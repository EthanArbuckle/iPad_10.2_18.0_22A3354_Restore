void OUTLINED_FUNCTION_6(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_5_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t OUTLINED_FUNCTION_4_0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

void OUTLINED_FUNCTION_4_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, a5, 0xCu);
}

void OUTLINED_FUNCTION_0_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_impl(a1, v9, OS_LOG_TYPE_DEFAULT, a4, &a9, 0xCu);
}

uint64_t OUTLINED_FUNCTION_0_1(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

void OUTLINED_FUNCTION_0_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_1_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t OUTLINED_FUNCTION_2(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

void OUTLINED_FUNCTION_0_3()
{
  JUMPOUT(0x1AF44D160);
}

void OUTLINED_FUNCTION_0_4(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_1_1(void *__p)
{
  operator delete(__p);
}

void OUTLINED_FUNCTION_0_5()
{
  JUMPOUT(0x1AF44D190);
}

void OUTLINED_FUNCTION_0_6()
{
  JUMPOUT(0x1AF44D160);
}

void OUTLINED_FUNCTION_0_7(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

void OUTLINED_FUNCTION_0_8(void *__p)
{
  operator delete(__p);
}

void OUTLINED_FUNCTION_0_9(uint64_t a1)
{
  operator delete(*(void **)(a1 + 8));
}

void OUTLINED_FUNCTION_0_10()
{
  unsigned __int8 *v0;

  exit(*v0);
}

uint64_t OUTLINED_FUNCTION_0_11()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 16))(v0);
}

void OUTLINED_FUNCTION_0_12(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

uint64_t OUTLINED_FUNCTION_1_2(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
}

uint64_t OUTLINED_FUNCTION_3_1(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t OUTLINED_FUNCTION_1_4(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void OUTLINED_FUNCTION_1_5(const char *a1@<X8>)
{
  const char *v1;

  if (a1)
    perror(a1);
  else
    perror(v1);
}

uint64_t OUTLINED_FUNCTION_1_6(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
}

void OUTLINED_FUNCTION_1_7(unint64_t *a1@<X8>)
{
  unint64_t v1;

  v1 = __ldaxr(a1);
  __stlxr(v1 - 1, a1);
}

void OUTLINED_FUNCTION_2_0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x12u);
}

void OUTLINED_FUNCTION_2_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_impl(a1, a2, OS_LOG_TYPE_DEFAULT, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_2_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void OUTLINED_FUNCTION_2_5(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

uint64_t OUTLINED_FUNCTION_2_6@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8 * a2))(a1);
}

void OUTLINED_FUNCTION_3_2()
{
  std::__shared_weak_count *v0;

  std::__shared_weak_count::__release_weak(v0);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::string *v4;
  std::string *begin;
  std::string *end;
  std::string *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::wstring> *this)
{
  std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100]((uint64_t)this, (void **)&this->__begin_->__r_.__value_.__l.__data_);
  if (this->__first_)
    operator delete(this->__first_);
}

uint64_t std::unordered_map<std::string,std::string>::unordered_map(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 48 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(a1, a2, (__int128 *)a2);
      a2 += 48;
      v5 -= 48;
    }
    while (v5);
  }
  return a1;
}

void sub_1AD758350(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::pair<std::string const,std::string> const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1AD7585CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1AD758640(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,int> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::pair<std::string const,int> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

_QWORD *std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  const void **v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = (_QWORD *)v4;
        v9 = (const void **)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32)))
          break;
        v4 = *v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

const void **std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(_QWORD *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  const void **v9;
  const void **v11;
  const void **v12;
  uint64_t v13;
  const void **v14;
  const void **v15;
  uint64_t *v16;
  BOOL v17;
  const void **v18;

  v9 = (const void **)(a1 + 1);
  if (a1 + 1 == a2 || std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if ((uint64_t *)*a1 == a2)
    {
      v12 = (const void **)a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = (const void **)a2;
        return (const void **)a2;
      }
    }
    v11 = (const void **)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (const void **)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (const void **)v16[2];
        v17 = *v12 == v16;
        v16 = (uint64_t *)v12;
      }
      while (v17);
    }
    if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v12 + 4, a5))
      goto LABEL_16;
    return (const void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (const void **)a2[1];
      do
      {
        v15 = v14;
        v14 = (const void **)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = (const void **)a2;
      do
      {
        v15 = (const void **)v18[2];
        v17 = *v15 == v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, v15 + 4))
        return (const void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const void **)a2;
    }
    return (const void **)a4;
  }
  *a3 = (const void **)a2;
  *a4 = (uint64_t)a2;
  return (const void **)a4;
}

void std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::pair<std::string const,int> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  *((_DWORD *)v6 + 14) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1AD758994(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::vector<double>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t *std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>(uint64_t **a1, uint64_t *a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<unsigned int>::__find_equal<unsigned int>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<unsigned int>::__find_equal<unsigned int>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

std::regex_iterator<std::__wrap_iter<const char *>, char> *__cdecl std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_iterator(std::regex_iterator<std::__wrap_iter<const char *>, char> *this, std::__wrap_iter<const char *> __a, std::__wrap_iter<const char *> __b, const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *__re, std::regex_constants::match_flag_type __m)
{
  __int16 v5;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::value_type *p_match;
  std::match_results<const wchar_t *> __p;

  v5 = __m;
  this->__begin_ = __a;
  this->__end_ = __b;
  this->__pregex_ = __re;
  this->__flags_ = __m;
  *(_OWORD *)&this->__match_.__matches_.__begin_ = 0u;
  p_match = &this->__match_;
  this->__match_.__prefix_.first.__i_ = 0;
  this->__match_.__prefix_.second.__i_ = 0;
  this->__match_.__prefix_.matched = 0;
  this->__match_.__suffix_.first.__i_ = 0;
  this->__match_.__suffix_.second.__i_ = 0;
  this->__match_.__suffix_.matched = 0;
  this->__match_.__ready_ = 0;
  this->__match_.__position_start_.__i_ = 0;
  *(_OWORD *)&this->__match_.__matches_.__end_cap_.__value_ = 0u;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)((char *)&this->__match_.__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>
                                                                               + 1) = 0u;
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 41);
  std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)__re, (__int32 *)__a.__i_, (__int32 *)__b.__i_, &__p, __m);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::wssub_match> *)p_match, (uint64_t)__a.__i_, (std::sub_match<std::__wrap_iter<const wchar_t *>> *)__b.__i_, (uint64_t *)&__p, (v5 & 0x800) != 0);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  return this;
}

void sub_1AD758D44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;
  void **v11;
  void *v13;

  if (__p)
    operator delete(__p);
  v13 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 40) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, __int32 *__f, __int32 *__l, std::match_results<const wchar_t *> *this, int a5)
{
  int v9;
  std::match_results<const wchar_t *>::value_type *p_unmatched;
  const __int32 *first;
  const __int32 *second;
  uint64_t result;
  int v14;
  const __int32 *v15;
  int v16;
  std::vector<std::wcsub_match>::pointer end;
  std::vector<std::wcsub_match>::pointer begin;

  if ((a5 & 0x80) != 0)
    v9 = a5 & 0xFFA;
  else
    v9 = a5;
  std::match_results<char const*>::__init(this, *(_DWORD *)(a1 + 28) + 1, __f, __l, (unsigned __int16)(v9 & 0x800) >> 11);
  if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, __f, __l, (uint64_t *)this, v9, (v9 & 0x800) == 0))
  {
    if (this->__matches_.__end_ == this->__matches_.__begin_)
      p_unmatched = &this->__unmatched_;
    else
      p_unmatched = this->__matches_.__begin_;
LABEL_8:
    first = p_unmatched->first;
    this->__prefix_.second = p_unmatched->first;
    this->__prefix_.matched = this->__prefix_.first != first;
    second = p_unmatched->second;
    this->__suffix_.first = second;
    this->__suffix_.matched = second != this->__suffix_.second;
    return 1;
  }
  if (__f != __l && (v9 & 0x40) == 0)
  {
    v14 = v9 | 0x80;
    v15 = (__int32 *)((char *)__f + 1);
    if (v15 != __l)
    {
      while (1)
      {
        std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__matches_.__end_ - (char *)this->__matches_.__begin_) >> 3), &this->__unmatched_);
        v16 = std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, v15, __l, (uint64_t *)this, v14, 0);
        begin = this->__matches_.__begin_;
        end = this->__matches_.__end_;
        if (v16)
          break;
        std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3), &this->__unmatched_);
        v15 = (const __int32 *)((char *)v15 + 1);
        if (v15 == __l)
          goto LABEL_14;
      }
      if (end == begin)
        p_unmatched = &this->__unmatched_;
      else
        p_unmatched = this->__matches_.__begin_;
      goto LABEL_8;
    }
LABEL_14:
    std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__matches_.__end_ - (char *)this->__matches_.__begin_) >> 3), &this->__unmatched_);
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, __l, __l, (uint64_t *)this, v14, 0))
    {
      if (this->__matches_.__end_ == this->__matches_.__begin_)
        p_unmatched = &this->__unmatched_;
      else
        p_unmatched = this->__matches_.__begin_;
      goto LABEL_8;
    }
  }
  result = 0;
  this->__matches_.__end_ = this->__matches_.__begin_;
  return result;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const __int32 *a2, const __int32 *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  _OWORD *v11;
  _OWORD *v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  _OWORD *v16;
  const __int32 *v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t *v34;
  _BYTE v37[56];
  void *__p[2];
  _QWORD v39[4];
  std::vector<std::wcsub_match>::value_type __x;
  _OWORD *v41;
  _OWORD *v42;
  unint64_t v43;

  v41 = 0;
  v42 = 0;
  v43 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    __x.first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)v37 = 0;
    memset(&v37[8], 0, 48);
    *(_OWORD *)__p = 0u;
    memset(v39, 0, 21);
    v42 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v41, (uint64_t)v37);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(_QWORD *)&v37[32])
    {
      *(_QWORD *)&v37[40] = *(_QWORD *)&v37[32];
      operator delete(*(void **)&v37[32]);
    }
    v34 = a4;
    v11 = v42;
    *((_DWORD *)v42 - 24) = 0;
    *((_QWORD *)v11 - 11) = a2;
    *((_QWORD *)v11 - 10) = a2;
    *((_QWORD *)v11 - 9) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::wcsub_match> *)(v11 - 4), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const wchar_t *>> *)((char *)v42 - 40), *(unsigned int *)(a1 + 32));
    v12 = v42;
    *((_QWORD *)v42 - 2) = v6;
    *((_DWORD *)v12 - 2) = a5;
    *((_BYTE *)v12 - 4) = a6;
    v13 = 1;
    while (2)
    {
      if ((v13 & 0xFFF) == 0 && (int)(v13 >> 12) >= (int)a3 - (int)a2)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      v15 = v12 - 1;
      v14 = *((_QWORD *)v12 - 2);
      v16 = v12 - 6;
      if (v14)
        (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v14 + 16))(v14, v12 - 6);
      switch(*(_DWORD *)v16)
      {
        case 0xFFFFFC18:
          v17 = (const __int32 *)*((_QWORD *)v12 - 10);
          if ((a5 & 0x20) != 0 && v17 == a2 || (a5 & 0x1000) != 0 && v17 != a3)
            goto LABEL_16;
          v25 = *v34;
          *(_QWORD *)v25 = a2;
          *(_QWORD *)(v25 + 8) = v17;
          *(_BYTE *)(v25 + 16) = 1;
          v26 = *((_QWORD *)v12 - 8);
          v27 = *((_QWORD *)v12 - 7) - v26;
          if (v27)
          {
            v28 = 0xAAAAAAAAAAAAAAABLL * (v27 >> 3);
            v29 = (_BYTE *)(v26 + 16);
            v30 = 1;
            do
            {
              v31 = v25 + 24 * v30;
              *(_OWORD *)v31 = *((_OWORD *)v29 - 1);
              v32 = *v29;
              v29 += 24;
              *(_BYTE *)(v31 + 16) = v32;
            }
            while (v28 > v30++);
          }
          v6 = 1;
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_23;
        case 0xFFFFFC1F:
LABEL_16:
          v18 = v42 - 6;
          std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)&v43, (_QWORD *)v42 - 12);
          v42 = v18;
          goto LABEL_23;
        case 0xFFFFFC20:
          v19 = *(v12 - 5);
          *(_OWORD *)v37 = *v16;
          *(_OWORD *)&v37[16] = v19;
          memset(&v37[32], 0, 24);
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v37[32], *((__int128 **)v12 - 8), *((__int128 **)v12 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v12 - 7) - *((_QWORD *)v12 - 8)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v39[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((__int128 **)v12 - 5), *((__int128 **)v12 - 4), (uint64_t)(*((_QWORD *)v12 - 4) - *((_QWORD *)v12 - 5)) >> 4);
          v20 = *v15;
          *(_QWORD *)((char *)&v39[1] + 5) = *(_QWORD *)((char *)v12 - 11);
          v39[1] = v20;
          (*(void (**)(_QWORD, uint64_t, _OWORD *))(*(_QWORD *)*v15 + 24))(*v15, 1, v12 - 6);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v39[1] + 24))(v39[1], 0, v37);
          v21 = v42;
          if ((unint64_t)v42 >= v43)
          {
            v42 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v41, (uint64_t)v37);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            v22 = *(_OWORD *)&v37[16];
            *v42 = *(_OWORD *)v37;
            v21[1] = v22;
            *((_QWORD *)v21 + 4) = 0;
            *((_QWORD *)v21 + 5) = 0;
            *((_QWORD *)v21 + 6) = 0;
            *((_QWORD *)v21 + 7) = 0;
            v21[2] = *(_OWORD *)&v37[32];
            *((_QWORD *)v21 + 6) = *(_QWORD *)&v37[48];
            memset(&v37[32], 0, 24);
            *((_QWORD *)v21 + 8) = 0;
            *((_QWORD *)v21 + 9) = 0;
            *(_OWORD *)((char *)v21 + 56) = *(_OWORD *)__p;
            *((_QWORD *)v21 + 9) = v39[0];
            __p[0] = 0;
            __p[1] = 0;
            v39[0] = 0;
            v23 = v39[1];
            *(_QWORD *)((char *)v21 + 85) = *(_QWORD *)((char *)&v39[1] + 5);
            *((_QWORD *)v21 + 10) = v23;
            v42 = v21 + 6;
          }
          if (*(_QWORD *)&v37[32])
          {
            *(_QWORD *)&v37[40] = *(_QWORD *)&v37[32];
            operator delete(*(void **)&v37[32]);
          }
LABEL_23:
          v12 = v42;
          ++v13;
          if (v41 != v42)
            continue;
          v6 = 0;
          break;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  *(_QWORD *)v37 = &v41;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
  return v6;
}

void sub_1AD7592F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;

  std::__state<char>::~__state(&a13);
  a13 = v18 - 112;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  char *current;
  char *last;
  signed __int8 v6;
  signed __int8 v7;
  std::regex_traits<char> *p_traits;
  std::vector<std::pair<char, char>>::pointer begin;
  uint64_t v10;
  uint64_t v11;
  char *p_second;
  std::vector<std::pair<std::string, std::string>>::pointer v14;
  char v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  const void *p_p;
  uint64_t v21;
  BOOL v22;
  int v23;
  std::string::size_type size;
  std::vector<std::pair<std::string, std::string>>::pointer v25;
  size_t v26;
  int v27;
  _BOOL4 v28;
  int v29;
  std::string::size_type v30;
  std::string *data;
  size_t v32;
  int v33;
  BOOL v34;
  int v35;
  _BOOL4 negate;
  uint64_t v37;
  size_t v38;
  unsigned __int8 v39;
  std::vector<char>::pointer v40;
  unint64_t v41;
  int v42;
  std::regex_traits<char>::char_class_type v43;
  int v44;
  std::vector<char>::pointer end;
  std::vector<char>::pointer v46;
  char *v47;
  std::vector<std::pair<std::string, std::string>>::pointer v48;
  std::vector<std::pair<std::string, std::string>>::pointer v49;
  int64_t v50;
  uint64_t v51;
  unint64_t v52;
  size_t v53;
  const void *v54;
  uint64_t v55;
  BOOL v56;
  int v57;
  std::string::size_type v58;
  std::vector<std::pair<std::string, std::string>>::pointer v59;
  size_t v60;
  int v61;
  _BOOL4 v62;
  int v63;
  std::string::size_type v64;
  std::string *v65;
  size_t v66;
  int v67;
  BOOL v68;
  std::vector<std::string>::pointer v69;
  uint64_t v70;
  int64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  size_t v75;
  size_t v76;
  uint64_t v77;
  BOOL v78;
  std::string *v79;
  std::string::size_type v80;
  int v81;
  std::string *v82;
  void **v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  std::regex_traits<char>::char_class_type v87;
  int v88;
  std::vector<std::string>::pointer v89;
  uint64_t v90;
  int64_t v91;
  uint64_t v92;
  unint64_t v93;
  size_t v94;
  void *v95;
  size_t v96;
  uint64_t v97;
  BOOL v98;
  std::string *v99;
  std::string::size_type v100;
  int v101;
  std::string *v102;
  void **v103;
  uint64_t v104;
  int v105;
  std::regex_traits<char>::char_class_type mask;
  const std::ctype_base::mask *tab;
  std::ctype_base::mask v108;
  std::regex_traits<char>::char_class_type neg_mask;
  int v110;
  std::__node<char> *first;
  int v112;
  char v113;
  char v114;
  uint64_t v115;
  _BOOL4 v116;
  _BOOL4 v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *__p;
  size_t v123;
  char v124;
  unsigned __int8 v125;
  unsigned __int8 v126;
  uint64_t v127;

  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    v37 = 0;
    negate = this->__negate_;
    goto LABEL_221;
  }
  if (!this->__might_have_digraph_ || current + 1 == last)
    goto LABEL_58;
  v6 = *current;
  v125 = *current;
  v7 = current[1];
  v126 = v7;
  if (this->__icase_)
  {
    v125 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    v126 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  p_traits = &this->__traits_;
  std::regex_traits<char>::__lookup_collatename<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v127, (uint64_t)&__p);
  if ((v124 & 0x80000000) == 0)
  {
    if (v124)
      goto LABEL_8;
LABEL_58:
    negate = 0;
    v37 = 1;
    goto LABEL_59;
  }
  v38 = v123;
  operator delete(__p);
  if (!v38)
    goto LABEL_58;
LABEL_8:
  begin = this->__digraphs_.__begin_;
  v10 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v10)
  {
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    p_second = &begin->second;
    do
    {
      if (v125 == *(p_second - 1) && v126 == *p_second)
        goto LABEL_218;
      p_second += 2;
      --v11;
    }
    while (v11);
  }
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    negate = 0;
  }
  else
  {
    std::regex_traits<char>::transform<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v127);
    v14 = this->__ranges_.__begin_;
    v15 = v124;
    v16 = (char *)this->__ranges_.__end_ - (char *)v14;
    if (v16)
    {
      v17 = 0;
      v18 = v16 / 48;
      v113 = v124;
      if (v124 >= 0)
        v19 = v124;
      else
        v19 = v123;
      if (v124 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if (v18 <= 1)
        v21 = 1;
      else
        v21 = v16 / 48;
      v22 = 1;
      while (1)
      {
        v23 = SHIBYTE(v14->first.__r_.__value_.__r.__words[2]);
        if (v23 >= 0)
          size = HIBYTE(v14->first.__r_.__value_.__r.__words[2]);
        else
          size = v14->first.__r_.__value_.__l.__size_;
        if (v23 >= 0)
          v25 = v14;
        else
          v25 = (std::vector<std::pair<std::string, std::string>>::pointer)v14->first.__r_.__value_.__r.__words[0];
        if (size >= v19)
          v26 = v19;
        else
          v26 = size;
        v27 = memcmp(p_p, v25, v26);
        v28 = v19 >= size;
        if (v27)
          v28 = v27 >= 0;
        if (v28)
        {
          v29 = SHIBYTE(v14->second.__r_.__value_.__r.__words[2]);
          if (v29 >= 0)
            v30 = HIBYTE(v14->second.__r_.__value_.__r.__words[2]);
          else
            v30 = v14->second.__r_.__value_.__l.__size_;
          if (v29 >= 0)
            data = &v14->second;
          else
            data = (std::string *)v14->second.__r_.__value_.__l.__data_;
          if (v19 >= v30)
            v32 = v30;
          else
            v32 = v19;
          v33 = memcmp(data, p_p, v32);
          v34 = v30 >= v19;
          if (v33)
            v34 = v33 >= 0;
          if (v34)
            break;
        }
        v22 = ++v17 < v18;
        ++v14;
        if (v21 == v17)
        {
          v35 = 0;
          negate = 0;
          goto LABEL_162;
        }
      }
      negate = 1;
      v35 = 5;
LABEL_162:
      p_traits = &this->__traits_;
      v15 = v113;
    }
    else
    {
      v22 = 0;
      v35 = 0;
      negate = 0;
    }
    if (v15 < 0)
      operator delete(__p);
    if (v22)
      goto LABEL_195;
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
    goto LABEL_200;
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)p_traits, (char *)&v125, (char *)&v127, (uint64_t)&__p);
  v89 = this->__equivalences_.__begin_;
  v90 = v124;
  v91 = (char *)this->__equivalences_.__end_ - (char *)v89;
  if (v91)
  {
    v92 = 0;
    v93 = v91 / 24;
    v95 = __p;
    v94 = v123;
    if (v124 >= 0)
      v96 = v124;
    else
      v96 = v123;
    if (v93 <= 1)
      v97 = 1;
    else
      v97 = v91 / 24;
    v98 = 1;
    while (1)
    {
      v99 = &v89[v92];
      v100 = HIBYTE(v99->__r_.__value_.__r.__words[2]);
      v101 = (char)v100;
      if ((v100 & 0x80u) != 0)
        v100 = v99->__r_.__value_.__l.__size_;
      if (v96 == v100)
      {
        if (v101 >= 0)
          v102 = &v89[v92];
        else
          v102 = (std::string *)v99->__r_.__value_.__r.__words[0];
        if ((v90 & 0x80) == 0)
        {
          if ((_DWORD)v90)
          {
            v103 = &__p;
            v104 = v90;
            do
            {
              if (*(unsigned __int8 *)v103 != v102->__r_.__value_.__s.__data_[0])
                goto LABEL_188;
              v103 = (void **)((char *)v103 + 1);
              v102 = (std::string *)((char *)v102 + 1);
              --v104;
            }
            while (v104);
            negate = 1;
            v35 = 5;
            goto LABEL_192;
          }
          negate = 1;
          if (v98)
            goto LABEL_220;
LABEL_200:
          if ((char)v125 < 0)
          {
            neg_mask = this->__neg_mask_;
            goto LABEL_213;
          }
          mask = this->__mask_;
          tab = this->__traits_.__ct_->__tab_;
          v108 = tab[v125];
          if ((v108 & mask) == 0 && (v125 != 95 || (mask & 0x80) == 0)
            || (char)v126 < 0
            || (tab[v126] & mask) == 0 && ((mask & 0x80) == 0 || v126 != 95))
          {
            neg_mask = this->__neg_mask_;
            if ((v108 & neg_mask) != 0 || v125 == 95 && (neg_mask & 0x80) != 0)
            {
LABEL_217:
              v110 = negate;
              goto LABEL_219;
            }
LABEL_213:
            if (((char)v126 & 0x80000000) == 0)
            {
              if ((this->__traits_.__ct_->__tab_[v126] & neg_mask) != 0)
                goto LABEL_217;
              v110 = 1;
              if (v126 == 95 && (neg_mask & 0x80) != 0)
                goto LABEL_217;
LABEL_219:
              negate = v110;
LABEL_220:
              v37 = 2;
              goto LABEL_221;
            }
          }
LABEL_218:
          v110 = 1;
          goto LABEL_219;
        }
        v118 = v93;
        v121 = v90;
        v105 = memcmp(v95, v102, v94);
        v93 = v118;
        v90 = v121;
        if (!v105)
          break;
      }
LABEL_188:
      v98 = ++v92 < v93;
      if (v92 == v97)
        goto LABEL_191;
    }
    v35 = 5;
    negate = 1;
    goto LABEL_193;
  }
  v98 = 0;
LABEL_191:
  v35 = 0;
LABEL_192:
  if ((v90 & 0x80) != 0)
LABEL_193:
    operator delete(__p);
  if (!v98)
    goto LABEL_200;
LABEL_195:
  if (v35)
    goto LABEL_220;
  v37 = 2;
LABEL_59:
  v39 = *a2->__current_;
  v125 = v39;
  if (this->__icase_)
  {
    v39 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v39);
    v125 = v39;
  }
  v40 = this->__chars_.__begin_;
  v41 = this->__chars_.__end_ - v40;
  if (v41)
  {
    if (v41 <= 1)
      v41 = 1;
    while (1)
    {
      v42 = *v40++;
      if (v42 == v39)
        break;
      if (!--v41)
        goto LABEL_66;
    }
LABEL_77:
    negate = 1;
    goto LABEL_221;
  }
LABEL_66:
  v43 = this->__neg_mask_;
  if (v43 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v39 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v39] & v43) == 0)
      v44 = (v39 == 95) & (v43 >> 7);
    else
      LOBYTE(v44) = 1;
    end = this->__neg_chars_.__end_;
    v46 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v39, end - this->__neg_chars_.__begin_);
    v47 = v46 ? v46 : end;
    if ((v44 & 1) == 0 && v47 == end)
      goto LABEL_77;
  }
  v49 = this->__ranges_.__begin_;
  v48 = this->__ranges_.__end_;
  if (v49 != v48)
  {
    if (this->__collate_)
    {
      std::regex_traits<char>::transform<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v126);
      v49 = this->__ranges_.__begin_;
      v48 = this->__ranges_.__end_;
    }
    else
    {
      v124 = 1;
      LOWORD(__p) = v39;
    }
    v50 = (char *)v48 - (char *)v49;
    if (v50)
    {
      v119 = v37;
      v116 = negate;
      v51 = 0;
      v52 = v50 / 48;
      v114 = v124;
      if (v124 >= 0)
        v53 = v124;
      else
        v53 = v123;
      if (v124 >= 0)
        v54 = &__p;
      else
        v54 = __p;
      if (v52 <= 1)
        v55 = 1;
      else
        v55 = v50 / 48;
      v56 = 1;
      while (1)
      {
        v57 = SHIBYTE(v49->first.__r_.__value_.__r.__words[2]);
        if (v57 >= 0)
          v58 = HIBYTE(v49->first.__r_.__value_.__r.__words[2]);
        else
          v58 = v49->first.__r_.__value_.__l.__size_;
        if (v57 >= 0)
          v59 = v49;
        else
          v59 = (std::vector<std::pair<std::string, std::string>>::pointer)v49->first.__r_.__value_.__r.__words[0];
        if (v58 >= v53)
          v60 = v53;
        else
          v60 = v58;
        v61 = memcmp(v54, v59, v60);
        v62 = v53 >= v58;
        if (v61)
          v62 = v61 >= 0;
        if (v62)
        {
          v63 = SHIBYTE(v49->second.__r_.__value_.__r.__words[2]);
          if (v63 >= 0)
            v64 = HIBYTE(v49->second.__r_.__value_.__r.__words[2]);
          else
            v64 = v49->second.__r_.__value_.__l.__size_;
          if (v63 >= 0)
            v65 = &v49->second;
          else
            v65 = (std::string *)v49->second.__r_.__value_.__l.__data_;
          if (v53 >= v64)
            v66 = v64;
          else
            v66 = v53;
          v67 = memcmp(v65, v54, v66);
          v68 = v64 >= v53;
          if (v67)
            v68 = v67 >= 0;
          if (v68)
            break;
        }
        v56 = ++v51 < v52;
        ++v49;
        if (v55 == v51)
        {
          negate = v116;
          goto LABEL_123;
        }
      }
      negate = 1;
LABEL_123:
      v37 = v119;
      if ((v114 & 0x80) == 0)
        goto LABEL_125;
    }
    else
    {
      v56 = 0;
      if ((v124 & 0x80) == 0)
        goto LABEL_125;
    }
    operator delete(__p);
LABEL_125:
    if (v56)
      goto LABEL_221;
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
    goto LABEL_154;
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v126, (uint64_t)&__p);
  v69 = this->__equivalences_.__begin_;
  v70 = v124;
  v71 = (char *)this->__equivalences_.__end_ - (char *)v69;
  if (v71)
  {
    v120 = v37;
    v72 = 0;
    v73 = v71 / 24;
    v74 = __p;
    v75 = v123;
    if (v124 >= 0)
      v76 = v124;
    else
      v76 = v123;
    if (v73 <= 1)
      v77 = 1;
    else
      v77 = v71 / 24;
    v78 = 1;
    while (1)
    {
      v79 = &v69[v72];
      v80 = HIBYTE(v79->__r_.__value_.__r.__words[2]);
      v81 = (char)v80;
      if ((v80 & 0x80u) != 0)
        v80 = v79->__r_.__value_.__l.__size_;
      if (v76 == v80)
      {
        if (v81 >= 0)
          v82 = &v69[v72];
        else
          v82 = (std::string *)v79->__r_.__value_.__r.__words[0];
        if ((v70 & 0x80) != 0)
        {
          v117 = negate;
          v85 = v73;
          v115 = v77;
          v86 = memcmp(v74, v82, v75);
          v77 = v115;
          v73 = v85;
          negate = v117;
          if (!v86)
          {
            negate = 1;
            v37 = v120;
            goto LABEL_152;
          }
        }
        else
        {
          if (!(_DWORD)v70)
          {
            negate = 1;
            v37 = v120;
            if (!v78)
              goto LABEL_154;
            goto LABEL_221;
          }
          v83 = &__p;
          v84 = v70;
          while (*(unsigned __int8 *)v83 == v82->__r_.__value_.__s.__data_[0])
          {
            v83 = (void **)((char *)v83 + 1);
            v82 = (std::string *)((char *)v82 + 1);
            if (!--v84)
            {
              negate = 1;
              goto LABEL_149;
            }
          }
        }
      }
      v78 = ++v72 < v73;
      if (v72 == v77)
      {
LABEL_149:
        v37 = v120;
        if ((v70 & 0x80) == 0)
          goto LABEL_153;
        goto LABEL_152;
      }
    }
  }
  v78 = 0;
  if (v124 < 0)
LABEL_152:
    operator delete(__p);
LABEL_153:
  if (!v78)
  {
LABEL_154:
    if ((char)v125 < 0)
      goto LABEL_221;
    v87 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v125] & v87) == 0)
    {
      v88 = (v87 >> 7) & 1;
      if (v125 != 95)
        v88 = 0;
      if (v88 != 1)
        goto LABEL_221;
    }
    goto LABEL_77;
  }
LABEL_221:
  if (negate == this->__negate_)
  {
    first = 0;
    v112 = -993;
  }
  else
  {
    a2->__current_ += v37;
    first = this->__first_;
    v112 = -995;
  }
  a2->__do_ = v112;
  a2->__node_ = first;
}

void std::vector<std::pair<unsigned long,char const*>>::resize(std::vector<std::pair<unsigned long, const wchar_t *>> *this, std::vector<std::pair<unsigned long, const wchar_t *>>::size_type __sz)
{
  std::vector<std::pair<unsigned long, const wchar_t *>>::size_type v2;

  v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append(this, __sz - v2);
  }
}

unsigned int *std::__loop<char>::__exec(unsigned int *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  uint64_t v10;

  v2 = result[10];
  v3 = a2[7];
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    v5 = *v4 + 1;
    *v4 = v5;
    v6 = *((_QWORD *)result + 3);
    v7 = *((_QWORD *)result + 4);
    v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      v10 = *(_QWORD *)(v3 + 16 * v2 + 8);
      v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8)
        goto LABEL_25;
LABEL_22:
      a2[10] = *((_QWORD *)result + 1);
      return std::__loop<char>::__init_repeat[abi:ne180100](result, a2);
    }
    goto LABEL_23;
  }
  *v4 = 0;
  if (*((_QWORD *)result + 4))
  {
    if (*((_QWORD *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((_QWORD *)result + 2);
  return result;
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::wcsub_match> *this, std::vector<std::wcsub_match>::size_type __n, std::vector<std::wcsub_match>::const_reference __u)
{
  std::sub_match<const wchar_t *> *value;
  std::sub_match<const wchar_t *> *begin;
  unint64_t v8;
  std::vector<std::wcsub_match>::size_type v9;
  unint64_t v10;
  std::vector<std::wcsub_match>::pointer v11;
  std::sub_match<const wchar_t *> *v12;
  std::vector<std::wcsub_match>::size_type v13;
  std::pair<const wchar_t *, const wchar_t *> v14;
  std::vector<std::wcsub_match>::pointer end;
  std::vector<std::wcsub_match>::size_type v16;
  std::vector<std::wcsub_match>::size_type v17;
  std::vector<std::wcsub_match>::value_type *v18;
  std::sub_match<const wchar_t *> *v19;
  std::vector<std::wcsub_match>::size_type v20;
  std::pair<const wchar_t *, const wchar_t *> v21;

  value = this->__end_cap_.__value_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) >= __n)
  {
    end = this->__end_;
    v16 = end - begin;
    if (v16 >= __n)
      v17 = __n;
    else
      v17 = end - begin;
    if (v17)
    {
      v18 = begin;
      do
      {
        *v18++ = *__u;
        --v17;
      }
      while (v17);
    }
    if (__n <= v16)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      v19 = &end[__n - v16];
      v20 = 24 * __n - 24 * v16;
      do
      {
        v21 = __u->std::pair<const wchar_t *, const wchar_t *>;
        *(_QWORD *)&end->matched = *(_QWORD *)&__u->matched;
        end->std::pair<const wchar_t *, const wchar_t *> = v21;
        ++end;
        v20 -= 24;
      }
      while (v20);
      this->__end_ = v19;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= __n)
      v9 = __n;
    if (v8 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    std::vector<std::string>::__vallocate[abi:ne180100](this, v10);
    v11 = this->__end_;
    v12 = &v11[__n];
    v13 = 24 * __n;
    do
    {
      v14 = __u->std::pair<const wchar_t *, const wchar_t *>;
      *(_QWORD *)&v11->matched = *(_QWORD *)&__u->matched;
      v11->std::pair<const wchar_t *, const wchar_t *> = v14;
      ++v11;
      v13 -= 24;
    }
    while (v13);
    this->__end_ = v12;
  }
}

void **std::__split_buffer<std::__state<char>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::__state<char>>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

uint64_t std::vector<std::__state<char>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::vector<std::sub_match<char const*>>::resize(std::vector<std::wcsub_match> *this, std::vector<std::wcsub_match>::size_type __sz, std::vector<std::wcsub_match>::const_reference __x)
{
  std::vector<std::wcsub_match>::size_type v3;
  BOOL v4;
  std::vector<std::wcsub_match>::size_type v5;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3);
  v4 = __sz >= v3;
  v5 = __sz - v3;
  if (v5 != 0 && v4)
  {
    std::vector<std::sub_match<char const*>>::__append(this, v5, __x);
  }
  else if (!v4)
  {
    this->__end_ = &this->__begin_[__sz];
  }
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const __int32 *a2, const __int32 *a3, uint64_t *a4, int a5, char a6)
{
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  if (*(_DWORD *)(a1 + 28))
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a2, (uint64_t)a3, a4, a5, a6);
}

void std::vector<std::pair<unsigned long,char const*>>::__append(std::vector<std::pair<unsigned long, const wchar_t *>> *this, std::vector<std::pair<unsigned long, const wchar_t *>>::size_type __n)
{
  std::__compressed_pair<std::pair<unsigned long, const wchar_t *> *, std::allocator<std::pair<unsigned long, const wchar_t *>>> *p_end_cap;
  std::pair<unsigned long, const wchar_t *> *v5;
  std::pair<unsigned long, const wchar_t *> *value;
  std::pair<unsigned long, const wchar_t *> *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  std::pair<unsigned long, const wchar_t *> *v14;
  std::pair<unsigned long, const wchar_t *> *v15;
  std::pair<unsigned long, const wchar_t *> *v16;
  std::pair<unsigned long, const wchar_t *> *end;
  std::vector<std::pair<unsigned long, const wchar_t *>>::pointer begin;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  v7 = p_end_cap[-1].__value_;
  if (__n <= value - v7)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 16 * __n);
      v7 += __n;
    }
    this->__end_ = v7;
  }
  else
  {
    v8 = (char *)v7 - (char *)this->__begin_;
    v9 = __n + (v8 >> 4);
    if (v9 >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = (char *)v5 - (char *)this->__begin_;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)p_end_cap, v12);
    else
      v13 = 0;
    v14 = (std::pair<unsigned long, const wchar_t *> *)&v13[16 * v10];
    v15 = (std::pair<unsigned long, const wchar_t *> *)&v13[16 * v12];
    bzero(v14, 16 * __n);
    v16 = &v14[__n];
    begin = this->__begin_;
    end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        v14[-1] = end[-1];
        --v14;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v14;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v15;
    if (end)
      operator delete(end);
  }
}

void std::match_results<char const*>::__init(std::match_results<const wchar_t *> *this, unsigned int __s, const __int32 *__f, const __int32 *__l, BOOL __no_update_pos)
{
  std::match_results<const wchar_t *>::value_type *p_unmatched;

  this->__unmatched_.first = __l;
  p_unmatched = &this->__unmatched_;
  this->__unmatched_.second = __l;
  this->__unmatched_.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&this->__matches_, __s, &this->__unmatched_);
  this->__prefix_.first = __f;
  this->__prefix_.second = __f;
  this->__prefix_.matched = 0;
  this->__suffix_ = *p_unmatched;
  if (!__no_update_pos)
    this->__position_start_ = __f;
  this->__ready_ = 1;
}

void std::vector<std::sub_match<std::__wrap_iter<char const*>>>::resize(std::vector<std::wssub_match> *this, std::vector<std::wssub_match>::size_type __sz)
{
  std::vector<std::wssub_match>::size_type v2;
  BOOL v3;
  std::vector<std::wssub_match>::size_type v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3);
  v3 = __sz >= v2;
  v4 = __sz - v2;
  if (v4 != 0 && v3)
  {
    std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(this, v4);
  }
  else if (!v3)
  {
    this->__end_ = &this->__begin_[__sz];
  }
}

BOOL std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(const std::regex_iterator<std::__wrap_iter<const char *>, char> *this, const std::regex_iterator<std::__wrap_iter<const char *>, char> *__x)
{
  std::vector<std::ssub_match>::pointer begin;
  std::sub_match<std::__wrap_iter<const char *>> *end;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::value_type *p_match;
  std::vector<std::ssub_match>::pointer v7;
  std::sub_match<std::__wrap_iter<const char *>> *v8;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::value_type *v9;
  BOOL v10;

  p_match = &this->__match_;
  begin = this->__match_.__matches_.__begin_;
  end = p_match->__matches_.__end_;
  v9 = &__x->__match_;
  v7 = __x->__match_.__matches_.__begin_;
  v8 = v9->__matches_.__end_;
  v10 = v8 == v7 && end == begin;
  if (end != begin && v8 != v7)
    return this->__begin_.__i_ == __x->__begin_.__i_
        && this->__end_.__i_ == __x->__end_.__i_
        && this->__pregex_ == __x->__pregex_
        && this->__flags_ == __x->__flags_
        && std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100]((uint64_t)begin, (uint64_t)v7) == 0;
  return v10;
}

void std::vector<int>::reserve(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::__compressed_pair<unsigned int *> *p_end_cap;
  unsigned int *value;
  int64_t v5;
  char *v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int *v9;
  std::vector<unsigned int>::pointer begin;
  unsigned int *end;
  unsigned int *v12;
  unsigned int v13;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = (char *)this->__end_ - (char *)this->__begin_;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, __n);
    v7 = (unsigned int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = (unsigned int *)&v6[4 * v8];
    begin = this->__begin_;
    end = this->__end_;
    v12 = v7;
    if (end != this->__begin_)
    {
      v12 = v7;
      do
      {
        v13 = *--end;
        *--v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
      operator delete(begin);
  }
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n, const std::vector<char>::value_type *__x)
{
  std::vector<char>::size_type v5;
  std::vector<char>::pointer end;
  char *v7;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    v5 = __n;
    std::vector<quasar::rescoring::FeatureType>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v7 = &end[v5];
    do
    {
      *end++ = *__x;
      --v5;
    }
    while (v5);
    this->__end_ = v7;
  }
  return this;
}

void sub_1AD75A298(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_1AD75A524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, unint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  int v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    v6 = *a3;
    v7 = a1[1];
    v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        v13 = *a1 + 8 * (v7 >> 6);
        v14 = v7 & 0x3F;
        if (v6)
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        else
          std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        return a1;
      }
    }
    else
    {
      v9 = v8 - 1;
    }
    v10 = v9 >> 6;
    if (v8 >= 0x41)
      v11 = v10;
    else
      v11 = 0;
    *(_QWORD *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void std::vector<std::vector<float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1AD75A768(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::vector<int>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::vector<int>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E5D405A8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v7;

  v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  return MEMORY[0x1AF44D190](a1, 0x10F1C4061CF1F02);
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1AF44D190);
}

void std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E5D405A8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1AF44D190);
}

void std::__repeat_one_loop<char>::~__repeat_one_loop()
{
  JUMPOUT(0x1AF44D190);
}

void std::__empty_non_own_state<char>::~__empty_non_own_state()
{
  JUMPOUT(0x1AF44D190);
}

void std::__end_state<char>::~__end_state()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t *v8;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = a1 + 8;
  do
  {
    v7 = std::less<std::string>::operator()[abi:ne180100](v5, (const void **)(v3 + 32), a2);
    v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:ne180100](v5, a2, (const void **)(v6 + 32)))
    return v2;
  return v6;
}

uint64_t *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((_DWORD *)v6 + 14) = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1AD75AD14(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n, const std::vector<int>::value_type *__x)
{
  std::vector<int>::pointer end;
  int *v7;
  std::vector<int>::size_type v8;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v7 = &end[__n];
    v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_1AD75AE14(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<float>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 2);
    if (v10 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = v5 - v8;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void std::vector<long long>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  std::__owns_one_state<char> *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  std::__node<char> *v15;
  std::__owns_one_state<char> *v16;
  std::__node<char> *v17;

  end = a1->__end_;
  v7 = a2;
  do
  {
    v8 = v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, (char *)v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  if (v8 != (unsigned __int8 *)a3)
  {
    while (*v8 == 124)
    {
      v12 = a1->__end_;
      v13 = v8 + 1;
      v14 = v8 + 1;
      do
      {
        v8 = v14;
        v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, (char *)v14, a3);
      }
      while (v14 != v8);
      if (v8 == v13)
      {
        v15 = (std::__node<char> *)operator new();
        v16 = a1->__end_;
        v17 = v16->__first_;
        v15[1].__vftable = (std::__node<char>_vtbl *)v17;
        v16->__first_ = v15;
        a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v12);
      if (v8 == (unsigned __int8 *)a3)
        return a3;
    }
    return (char *)v8;
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  unsigned __int8 *result;
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  unsigned __int8 *v9;

  result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, a2, a3);
  if (result == (unsigned __int8 *)a2)
  {
    end = a1->__end_;
    marked_count = a1->__marked_count_;
    v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
    result = (unsigned __int8 *)a2;
    if (v9 != (unsigned __int8 *)a2)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v9, (unsigned __int8 *)a3, end, marked_count + 1, a1->__marked_count_ + 1);
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  char *v5;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  uint64_t *v7;
  char *v8;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_20;
    v5 = a2[1] == 94 ? a2 + 2 : a2 + 1;
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if (v5 == a3)
      goto LABEL_20;
    v7 = (uint64_t *)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if (v5 == a3)
      goto LABEL_20;
    do
    {
      v8 = v5;
      v5 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(a1, v5, a3, v7);
    }
    while (v5 != v8);
    if (v8 == a3)
      goto LABEL_20;
    if (*v8 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v7, 45);
      ++v8;
    }
    if (v8 == a3 || *v8 != 93)
LABEL_20:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v8 + 1;
  }
  return a2;
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  _BYTE *v4;
  int v5;
  uint64_t v6;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  char *v13;
  char *v14;
  int v15;
  _BYTE *v16;
  std::string *v17;
  uint64_t v18;
  std::string::size_type size;
  char v20;
  uint64_t v22;
  std::string __p;
  std::string v24;
  std::string v25;
  std::string v26;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  if (v5 == 93)
    return v4;
  v6 = (uint64_t)a4;
  memset(&v26, 0, sizeof(v26));
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_9:
    v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_10;
  }
  v9 = a2[1];
  if (v9 != 46)
  {
    if (v9 == 58)
    {
      v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<char const*>(a1, a2 + 2, a3, (uint64_t)a4);
      goto LABEL_34;
    }
    if (v9 == 61)
    {
      v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(a1, a2 + 2, a3, a4);
LABEL_34:
      v6 = v10;
      v20 = 0;
      goto LABEL_38;
    }
    goto LABEL_9;
  }
  v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, a2 + 2, a3, (uint64_t)&v26);
  v4 = (_BYTE *)v18;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v26.__r_.__value_.__l.__size_;
  v14 = (char *)v18;
  if (!size)
  {
LABEL_10:
    if ((v11 | 0x40) == 0x40)
    {
      v12 = *v4;
      if (v12 == 92)
      {
        v13 = v4 + 1;
        if (v11)
        {
          v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v13, a3, &v26);
        }
        else
        {
          v14 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, &v26, v6);
          v11 = 0;
        }
        goto LABEL_16;
      }
    }
    else
    {
      LOBYTE(v12) = *v4;
    }
    std::string::operator=(&v26, v12);
    v14 = v4 + 1;
  }
LABEL_16:
  if (v14 == a3
    || (v15 = *v14, v15 == 93)
    || (v16 = v14 + 1, v14 + 1 == a3)
    || v15 != 45
    || *v16 == 93)
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v26.__r_.__value_.__l.__size_)
      {
        if (v26.__r_.__value_.__l.__size_ != 1)
        {
          v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
LABEL_36:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v6, v17->__r_.__value_.__s.__data_[0], v17->__r_.__value_.__s.__data_[1]);
          goto LABEL_37;
        }
        v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
        goto LABEL_28;
      }
    }
    else if (*((_BYTE *)&v26.__r_.__value_.__s + 23))
    {
      v17 = &v26;
      if (HIBYTE(v26.__r_.__value_.__r.__words[2]) != 1)
        goto LABEL_36;
LABEL_28:
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v6, v17->__r_.__value_.__s.__data_[0]);
    }
LABEL_37:
    v20 = 1;
    v4 = v14;
    goto LABEL_38;
  }
  memset(&v25, 0, sizeof(v25));
  v4 = v14 + 2;
  if (v14 + 2 != a3 && *v16 == 91 && *v4 == 46)
  {
    v22 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v14 + 3, a3, (uint64_t)&v25);
LABEL_55:
    v4 = (_BYTE *)v22;
    goto LABEL_56;
  }
  if ((v11 | 0x40) == 0x40)
  {
    LODWORD(v16) = *v16;
    if ((_DWORD)v16 == 92)
    {
      if (v11)
        v22 = (uint64_t)std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v14 + 2, a3, &v25);
      else
        v22 = (uint64_t)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)(v14 + 2), (std::basic_regex<char> *)a3, &v25, v6);
      goto LABEL_55;
    }
  }
  else
  {
    LOBYTE(v16) = *v16;
  }
  std::string::operator=(&v25, (std::string::value_type)v16);
LABEL_56:
  v24 = v26;
  memset(&v26, 0, sizeof(v26));
  __p = v25;
  memset(&v25, 0, sizeof(v25));
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](v6, (char *)&v24, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  v20 = 1;
LABEL_38:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if ((v20 & 1) != 0)
    return v4;
  return (_BYTE *)v6;
}

void sub_1AD75B604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a28 < 0)
    operator delete(a23);
  if (*(char *)(v28 - 49) < 0)
    operator delete(*(void **)(v28 - 72));
  _Unwind_Resume(exception_object);
}

void std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(std::__split_buffer<std::pair<std::wstring, std::wstring>> *this)
{
  std::__split_buffer<std::pair<std::string,std::string>>::clear[abi:ne180100](this);
  if (this->__first_)
    operator delete(this->__first_);
}

std::__bracket_expression<char, std::regex_traits<char>> *__cdecl std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(std::basic_regex<char> *this, BOOL __negate)
{
  std::__bracket_expression<char, std::regex_traits<char>> *v4;

  v4 = (std::__bracket_expression<char, std::regex_traits<char>> *)operator new();
  std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v4, (uint64_t)this, (uint64_t)this->__end_->__first_, __negate, this->__flags_ & 1, (this->__flags_ & 8) != 0);
  this->__end_->__first_ = v4;
  this->__end_ = v4;
  return v4;
}

void sub_1AD75B708(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(std::vector<std::pair<std::string, std::string>> *this, std::__split_buffer<std::pair<std::string, std::string>> *__v)
{
  std::pair<std::string, std::string> *v4;
  std::pair<std::string, std::string> *begin;
  std::pair<std::string, std::string> *end;
  std::pair<std::string, std::string> *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  size_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  size_t v18;
  BOOL v19;
  BOOL v20;
  std::__owns_one_state<char> *v21;
  BOOL v22;
  unsigned __int8 *v23;
  unsigned __int8 *v25;
  int v26;
  int v27;
  size_t __max;

  if (a2 == a3)
    return a2;
  v6 = a6;
  v7 = a5;
  v10 = a1;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      v13 = a2 + 1;
      if (v11)
        v20 = 1;
      else
        v20 = v13 == a3;
      if (!v20 && *v13 == 63)
      {
        v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        v14 = 0;
        v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      v14 = 0;
      v18 = 1;
      goto LABEL_45;
    }
    if (v12 != 123)
      return a2;
    v15 = a2 + 1;
    v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(a1, a2 + 1, a3, (int *)&__max);
    if (v16 != v15)
    {
      if (v16 != a3)
      {
        v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              v13 = v16 + 2;
              v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              v18 = (int)__max;
LABEL_33:
              v21 = __s;
              v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v18 = (int)__max;
LABEL_45:
            v21 = __s;
            v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        v23 = v16 + 1;
        if (v16 + 1 == a3)
          goto LABEL_58;
        if (*v23 == 125)
        {
          v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            v13 = v16 + 3;
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          v18 = -1;
          goto LABEL_45;
        }
        v27 = -1;
        v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v10, v23, a3, &v27);
        if (v25 != v23 && v25 != a3 && *v25 == 125)
        {
          v18 = v27;
          v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            v13 = v25 + 1;
            v22 = 1;
            if (!v11 && v13 != a3)
            {
              v26 = v25[1];
              v22 = v26 != 63;
              if (v26 == 63)
                v13 = v25 + 2;
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    v13 = a2 + 1;
    if (v11)
      v19 = 1;
    else
      v19 = v13 == a3;
    if (!v19 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    v14 = 0;
    goto LABEL_36;
  }
  if (v12 == 43)
  {
    v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 1;
LABEL_26:
      v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    v14 = 1;
    goto LABEL_36;
  }
  return a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
  int v8;
  int v9;
  _QWORD *v14;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  uint64_t v17;
  unsigned int loop_count;
  std::__node<char> *v19;
  std::__node<char> *v20;

  v8 = __mexp_end;
  v9 = __mexp_begin;
  v14 = (_QWORD *)operator new();
  end = this->__end_;
  first = end->__first_;
  v14[1] = first;
  end->__first_ = 0;
  v17 = operator new();
  loop_count = this->__loop_count_;
  v19 = __s->__first_;
  *(_QWORD *)v17 = &unk_1E5D46848;
  *(_QWORD *)(v17 + 8) = v19;
  *(_QWORD *)(v17 + 16) = v14;
  *(_QWORD *)(v17 + 24) = __min;
  *(_QWORD *)(v17 + 32) = __max;
  *(_DWORD *)(v17 + 40) = loop_count;
  *(_DWORD *)(v17 + 44) = v9;
  *(_DWORD *)(v17 + 48) = v8;
  *(_BYTE *)(v17 + 52) = __greedy;
  __s->__first_ = 0;
  v20 = (std::__node<char> *)operator new();
  v20->__vftable = (std::__node<char>_vtbl *)&unk_1E5D40608;
  v20[1].__vftable = (std::__node<char>_vtbl *)v17;
  this->__end_->__first_ = v20;
  this->__end_ = *(std::__owns_one_state<char> **)(v17 + 16);
  __s->__first_ = (std::__node<char> *)v17;
  ++this->__loop_count_;
}

void sub_1AD75BBC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_alternation(std::basic_regex<char> *this, std::__owns_one_state<char> *__sa, std::__owns_one_state<char> *__sb)
{
  std::__node<char> *v6;
  std::__node<char> *first;
  std::__node<char> *v8;
  std::__node<char> *v9;
  std::__node<char> *v10;
  std::__node<char> *v11;

  v6 = (std::__node<char> *)operator new();
  first = __sb->__first_;
  v6[1].__vftable = (std::__node<char>_vtbl *)__sa->__first_;
  v6[2].__vftable = (std::__node<char>_vtbl *)first;
  v6->__vftable = (std::__node<char>_vtbl *)&unk_1E5D40060;
  __sa->__first_ = v6;
  __sb->__first_ = 0;
  v8 = (std::__node<char> *)operator new();
  v9 = this->__end_->__first_;
  v8[1].__vftable = (std::__node<char>_vtbl *)v9;
  __sb->__first_ = v8;
  this->__end_->__first_ = 0;
  v10 = (std::__node<char> *)operator new();
  v11 = __sb->__first_;
  v10->__vftable = (std::__node<char>_vtbl *)&unk_1E5D466C8;
  v10[1].__vftable = (std::__node<char>_vtbl *)v11;
  this->__end_->__first_ = v10;
  this->__end_ = (std::__owns_one_state<char> *)__sb->__first_;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  char *v3;
  int v6;
  char *v7;
  BOOL v8;
  char *v9;
  int v11;
  char *v12;
  unsigned int v13;
  uint64_t v14;
  BOOL v15;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  char *v18;
  int v20;
  BOOL v21;
  unsigned int marked_count;
  std::basic_regex<char> v23;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v6 = *a2;
  if (v6 <= 91)
  {
    if (v6 != 36)
    {
      v8 = v6 == 40;
      v7 = a2 + 1;
      v8 = !v8 || v7 == a3;
      if (!v8)
      {
        v8 = *v7 == 63;
        v9 = a2 + 2;
        if (v8 && v9 != a3)
        {
          v11 = *v9;
          if (v11 == 33)
          {
            std::regex_traits<char>::regex_traits(&v23.__traits_);
            memset(&v23.__flags_, 0, 40);
            v23.__flags_ = this->__flags_;
            v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v23, v3 + 3, a3);
            marked_count = v23.__marked_count_;
            std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v23, 1, this->__marked_count_);
            this->__marked_count_ += marked_count;
            if (v12 == a3 || *v12 != 41)
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
            goto LABEL_31;
          }
          if (v11 == 61)
          {
            std::regex_traits<char>::regex_traits(&v23.__traits_);
            memset(&v23.__flags_, 0, 40);
            v23.__flags_ = this->__flags_;
            v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v23, v3 + 3, a3);
            v13 = v23.__marked_count_;
            std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v23, 0, this->__marked_count_);
            this->__marked_count_ += v13;
            if (v12 == a3 || *v12 != 41)
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
LABEL_31:
            v3 = v12 + 1;
            std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v23.__start_);
            std::locale::~locale(&v23.__traits_.__loc_);
            return v3;
          }
        }
      }
      return v3;
    }
    v14 = operator new();
    v15 = (this->__flags_ & 0x5F0) == 1024;
    end = this->__end_;
    first = end->__first_;
LABEL_21:
    *(_QWORD *)v14 = v18 + 16;
    *(_QWORD *)(v14 + 8) = first;
    *(_BYTE *)(v14 + 16) = v15;
    end->__first_ = (std::__node<char> *)v14;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    return ++v3;
  }
  if (v6 != 92)
  {
    if (v6 != 94)
      return v3;
    v14 = operator new();
    v15 = (this->__flags_ & 0x5F0) == 1024;
    end = this->__end_;
    first = end->__first_;
    goto LABEL_21;
  }
  if (a2 + 1 != a3)
  {
    v20 = a2[1];
    if (v20 == 66)
    {
      v21 = 1;
    }
    else
    {
      if (v20 != 98)
        return v3;
      v21 = 0;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(this, v21);
    v3 += 2;
  }
  return v3;
}

void sub_1AD75BF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  int v6;
  std::__node<char> *v7;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  int *p_open_count;
  unsigned __int8 *v12;
  unsigned int marked_count;
  unsigned __int8 *v14;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v6 = (char)*a2;
  if (v6 > 62)
  {
    if (v6 > 91)
    {
      if (v6 == 92)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(this, a2, a3);
      if (v6 != 123)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
    }
    else
    {
      if (v6 == 91)
        return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, (char *)a2, (char *)a3);
      if (v6 != 63)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
    }
LABEL_29:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
  }
  if (v6 == 40)
  {
    if (a2 + 1 == a3)
      goto LABEL_30;
    if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
    {
      p_open_count = &this->__open_count_;
      ++this->__open_count_;
      v12 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, a2 + 3, a3);
      if (v12 == a3)
        goto LABEL_30;
      v3 = v12;
      if (*v12 != 41)
        goto LABEL_30;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
      marked_count = this->__marked_count_;
      p_open_count = &this->__open_count_;
      ++this->__open_count_;
      v14 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, v3 + 1, a3);
      if (v14 == a3 || (v3 = v14, *v14 != 41))
LABEL_30:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, marked_count);
    }
    --*p_open_count;
    return ++v3;
  }
  if (v6 == 46)
  {
    v7 = (std::__node<char> *)operator new();
    end = this->__end_;
    first = end->__first_;
    v7->__vftable = (std::__node<char>_vtbl *)&unk_1E5D46728;
    v7[1].__vftable = (std::__node<char>_vtbl *)first;
    end->__first_ = v7;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    return ++v3;
  }
  if ((v6 - 42) < 2)
    goto LABEL_29;
  return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  unsigned int v8;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_1E5D400C0;
  v7 = (_QWORD *)operator new();
  v7[1] = v6;
  std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>((_QWORD *)(a1 + 40), (uint64_t)v7);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
  v8 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v8 > 0x3F)
  {
    switch(v8)
    {
      case 0x40u:
        return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, a3);
      case 0x80u:
        return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
      case 0x100u:
        return std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>((std::basic_regex<char> *)a1, a2, a3);
      default:
        goto LABEL_14;
    }
  }
  else if (v8)
  {
    if (v8 != 16)
    {
      if (v8 != 32)
LABEL_14:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
      return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, a3);
    }
    return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
  }
  else
  {
    return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)a2, (char *)a3);
  }
}

void sub_1AD75C2CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int *a4)
{
  int v4;
  int v5;
  int v6;

  if (a2 != a3)
  {
    v4 = *a2;
    if ((v4 & 0xF8) == 0x30 || (v4 & 0xFE) == 0x38)
    {
      v5 = v4 - 48;
      *a4 = v5;
      if (++a2 == a3)
      {
        return a3;
      }
      else
      {
        while (1)
        {
          v6 = *a2;
          if ((v6 & 0xF8) != 0x30 && (v6 & 0xFE) != 0x38)
            break;
          if (v5 >= 214748364)
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
          v5 = v6 + 10 * v5 - 48;
          *a4 = v5;
          if (++a2 == a3)
            return a3;
        }
      }
    }
  }
  return a2;
}

std::regex_traits<char> *__cdecl std::regex_traits<char>::regex_traits(std::regex_traits<char> *this)
{
  const std::locale *v2;

  v2 = (const std::locale *)MEMORY[0x1AF44CFA4]();
  this->__ct_ = (const std::ctype<char> *)std::locale::use_facet(v2, MEMORY[0x1E0DE4A90]);
  this->__col_ = (const std::collate<char> *)std::locale::use_facet(&this->__loc_, MEMORY[0x1E0DE4C08]);
  return this;
}

void sub_1AD75C3CC(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(std::basic_regex<char> *a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  int v4;
  BOOL v5;

  v3 = a2;
  if (a2 != a3)
  {
    v4 = (char)*a2;
    v5 = (v4 - 36) > 0x3A || ((1 << (*a2 - 36)) & 0x7800000080004F1) == 0;
    if (v5 && (v4 - 123) >= 3)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      ++v3;
    }
  }
  return v3;
}

void std::vector<std::string>::reserve(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *value;
  int64_t v5;
  uint64_t v6;
  std::__split_buffer<std::string> __v;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3) < __n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = (char *)this->__end_ - (char *)this->__begin_;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)p_end_cap, __n);
    __v.__begin_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_cap_.__value_ = &__v.__first_[v6];
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
  }
}

void sub_1AD75C4EC(_Unwind_Exception *a1, std::__split_buffer<std::wstring> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&a10);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned char>::vector(_QWORD *a1, size_t a2, _BYTE *a3)
{
  size_t v5;
  _BYTE *v6;
  _BYTE *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    v5 = a2;
    std::vector<quasar::rescoring::FeatureType>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_BYTE *)a1[1];
    v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_1AD75C560(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<double>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::vector<unsigned int>::pointer end;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_1AD75C6DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_set<std::string>::unordered_set(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_1AD75C754(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_1AD75C9C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;

  v7 = a1 + 16;
  v8 = operator new(0x28uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v9->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
  }
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1AD75CA6C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1AD75CB04(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::string>::__vdeallocate(std::vector<std::wstring> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

void std::vector<BOOL>::push_back(uint64_t a1, _BYTE *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64)
      v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v4 <= 0x3FFFFFFFFFFFFFFELL)
      v7 = v6;
    else
      v7 = 0x7FFFFFFFFFFFFFFFLL;
    std::vector<BOOL>::reserve((char **)a1, v7);
    v4 = *(_QWORD *)(a1 + 8);
  }
  *(_QWORD *)(a1 + 8) = v4 + 1;
  v8 = *(char **)a1;
  v9 = v4 >> 6;
  v10 = 1 << v4;
  if (*a2)
    v11 = *(_QWORD *)&v8[8 * v9] | v10;
  else
    v11 = *(_QWORD *)&v8[8 * v9] & ~v10;
  *(_QWORD *)&v8[8 * v9] = v11;
}

void std::vector<BOOL>::reserve(char **a1, unint64_t a2)
{
  unint64_t v3;
  char *v4;
  __int128 v5;
  char *v6;
  int v7;
  char *v8;
  int v9;
  char *v10;
  __int128 v11;

  if (a2 > (_QWORD)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0;
    v11 = 0uLL;
    std::vector<BOOL>::__vallocate[abi:ne180100](&v10, a2);
    v3 = (unint64_t)a1[1];
    v8 = *a1;
    v9 = 0;
    v6 = &v8[8 * (v3 >> 6)];
    v7 = v3 & 0x3F;
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    v4 = *a1;
    *a1 = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    v11 = v5;
    if (v4)
      operator delete(v4);
  }
}

void sub_1AD75CCA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::__compressed_pair<unsigned int *> *p_end_cap;
  unsigned int *v5;
  unsigned int *value;
  unsigned int *end;
  std::vector<unsigned int>::pointer begin;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unsigned int *v16;
  unsigned int *v17;
  int v18;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v9 = (char *)end - (char *)this->__begin_;
    v10 = __n + (v9 >> 2);
    if (v10 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v13);
      begin = this->__begin_;
      end = this->__end_;
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = (unsigned int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    v17 = (unsigned int *)&v15[4 * __n];
    while (end != begin)
    {
      v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<unsigned int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
      operator delete(begin);
  }
}

_QWORD *std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v6;
  i[2] = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1AD75CFC4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void std::vector<std::vector<unsigned int>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1AD75D35C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned int>>,std::reverse_iterator<std::vector<unsigned int>*>,std::reverse_iterator<std::vector<unsigned int>*>,std::reverse_iterator<std::vector<unsigned int>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

_QWORD *applesauce::CF::details::CFString_get_value<true>@<X0>(const __CFString *a1@<X0>, uint64_t a2@<X8>)
{
  char *CStringPtr;
  CFIndex Length;
  UInt8 *v7;
  CFIndex maxBufLen;
  CFRange v9;
  CFRange v10;

  CStringPtr = (char *)CFStringGetCStringPtr(a1, 0x8000100u);
  if (CStringPtr)
    return std::string::basic_string[abi:ne180100]<0>((_QWORD *)a2, CStringPtr);
  Length = CFStringGetLength(a1);
  maxBufLen = 0;
  v9.location = 0;
  v9.length = Length;
  CFStringGetBytes(a1, v9, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
  std::string::basic_string[abi:ne180100]((_QWORD *)a2, maxBufLen, 0);
  if (*(char *)(a2 + 23) >= 0)
    v7 = (UInt8 *)a2;
  else
    v7 = *(UInt8 **)a2;
  v10.location = 0;
  v10.length = Length;
  return (_QWORD *)CFStringGetBytes(a1, v10, 0x8000100u, 0, 0, v7, maxBufLen, &maxBufLen);
}

void sub_1AD75D4C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t i;
  void **v8;
  BOOL v9;
  void **v10;
  BOOL v11;

  v4 = a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (void **)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v8 + 2), (const std::string *)(v4 + 2));
        v10 = (void **)*v8;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, v8);
        v4 = (uint64_t *)*v4;
        if (v10)
          v11 = v4 == a3;
        else
          v11 = 1;
        v8 = v10;
      }
      while (!v11);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((int)a1, v10);
  }
  while (v4 != a3)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_multi<std::string const&>(a1, (uint64_t)(v4 + 2));
    v4 = (uint64_t *)*v4;
  }
}

void sub_1AD75D5A8(void *a1)
{
  int v1;
  void **v2;

  __cxa_begin_catch(a1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_1AD75D5C4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_multi<std::string const&>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node<std::string const&>((uint64_t)a1, a2, (uint64_t)&v4);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, v4);
}

void sub_1AD75D610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(_QWORD *a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  unint64_t v5;
  unsigned __int8 *inserted;

  v4 = (unsigned __int8 *)(a2 + 2);
  v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)(a2 + 2));
  a2[1] = v5;
  inserted = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi_perform(a1, a2, inserted);
  return a2;
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6;
  float v7;
  unint64_t v8;
  float v9;
  _BOOL8 v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  uint8x8_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  int v22;

  v6 = a1 + 32;
  v7 = *(float *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  if (!v8 || (float)(v7 * (float)v8) < v9)
  {
    v10 = 1;
    if (v8 >= 3)
      v10 = (v8 & (v8 - 1)) != 0;
    v11 = v10 | (2 * v8);
    v12 = vcvtps_u32_f32(v9 / v7);
    if (v11 <= v12)
      v13 = v12;
    else
      v13 = v11;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<false>(a1, v13);
    v8 = *(_QWORD *)(a1 + 8);
  }
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v14.i16[0] = vaddlv_u8(v14);
  v15 = v14.u32[0];
  if (v14.u32[0] > 1uLL)
  {
    v16 = a2;
    if (v8 <= a2)
      v16 = a2 % v8;
  }
  else
  {
    v16 = (v8 - 1) & a2;
  }
  v17 = *(unsigned __int8 **)(*(_QWORD *)a1 + 8 * v16);
  if (v17)
  {
    v18 = *(unsigned __int8 **)v17;
    if (*(_QWORD *)v17)
    {
      v19 = 0;
      do
      {
        v20 = *((_QWORD *)v18 + 1);
        if (v15 > 1)
        {
          v21 = *((_QWORD *)v18 + 1);
          if (v20 >= v8)
            v21 = v20 % v8;
        }
        else
        {
          v21 = v20 & (v8 - 1);
        }
        if (v21 != v16)
          break;
        v22 = v20 == a2 ? std::equal_to<std::string>::operator()[abi:ne180100](v6, v18 + 16, a3) : 0;
        if ((v19 & (v22 ^ 1) & 1) != 0)
          break;
        v19 |= v22;
        v17 = *(unsigned __int8 **)v17;
        v18 = *(unsigned __int8 **)v17;
      }
      while (*(_QWORD *)v17);
    }
  }
  return v17;
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n, const std::vector<unsigned int>::value_type *__x)
{
  std::vector<unsigned int>::pointer end;
  unsigned int *v7;
  std::vector<unsigned int>::size_type v8;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v7 = &end[__n];
    v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_1AD75D868(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v6 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 9) = 0;
    *((_QWORD *)v7 + 7) = 0;
    v13 = 1;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n)
{
  std::vector<char>::pointer end;
  char *v5;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<quasar::rescoring::FeatureType>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v5 = &end[__n];
    bzero(end, __n);
    this->__end_ = v5;
  }
  return this;
}

void sub_1AD75D99C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::vector<std::string> *__cdecl std::vector<std::string>::vector(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  std::vector<std::string>::pointer end;
  size_t v5;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v5 = 24 * ((24 * __n - 24) / 0x18) + 24;
    bzero(end, v5);
    this->__end_ = (std::vector<std::string>::pointer)((char *)end + v5);
  }
  return this;
}

void sub_1AD75DA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<unsigned int>::__assign_multi<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>(uint64_t **result, unsigned int *a2, unsigned int *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned int *v9;
  unsigned int *v10;
  BOOL v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          *((_DWORD *)v8 + 7) = v9[7];
          std::__tree<unsigned int>::__node_insert_multi(v5, (uint64_t)v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          v10 = (unsigned int *)*((_QWORD *)v9 + 1);
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = *(unsigned int **)v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (unsigned int *)*((_QWORD *)v9 + 2);
              v11 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)std::__tree<int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<unsigned int>::__emplace_multi<unsigned int const&>(v5, a2 + 7);
      v12 = (unsigned int *)*((_QWORD *)a2 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(unsigned int **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (unsigned int *)*((_QWORD *)a2 + 2);
          v11 = *(_QWORD *)v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1AD75DBA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<unsigned int>::__emplace_multi<unsigned int const&>(uint64_t **a1, unsigned int *a2)
{
  uint64_t *v4;
  unsigned int v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;

  v4 = (uint64_t *)operator new(0x20uLL);
  v5 = *a2;
  *((_DWORD *)v4 + 7) = *a2;
  v6 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        if (v5 >= *((_DWORD *)v7 + 7))
          break;
        v7 = (uint64_t *)*v7;
        v8 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7);
    v8 = v6 + 1;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v6, v8, v4);
  return v4;
}

uint64_t kaldi::quasar::ShortlistDataInManyFiles::ShortlistDataInManyFiles(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t *a4)
{
  __int128 v5;
  __int128 v6;

  *(_QWORD *)a1 = &off_1E5D33D50;
  v5 = *a2;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v5;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v6 = *a3;
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(a1 + 32) = v6;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__hash_table(a1 + 56, a4);
  return a1;
}

double kaldi::quasar::ShortlistDataInManyFiles::GetConstrainedWordIds@<D0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  unsigned __int8 *v8;
  uint64_t v9;
  double result;
  _QWORD v11[3];
  int v12;
  int v13;
  _QWORD *v14;

  v13 = a4;
  v12 = a5;
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 56), a2);
  if (v8)
  {
    v11[0] = a3;
    v11[1] = &v13;
    v11[2] = &v12;
    v9 = *((unsigned int *)v8 + 14);
    if ((_DWORD)v9 == -1)
      std::__throw_bad_variant_access[abi:ne180100]();
    v14 = v11;
    ((void (*)(_QWORD **, unsigned __int8 *))off_1E5D46C08[v9])(&v14, v8 + 40);
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    *(_DWORD *)(a6 + 32) = 1065353216;
  }
  return result;
}

void kaldi::quasar::ShortlistDataInManyFiles::Write(std::string::size_type a1, _QWORD *a2, uint64_t a3)
{
  uint64_t **i;
  uint64_t v7;
  std::string __p;
  char *v9;
  char v10;
  std::string *p_p;

  v10 = a3;
  kaldi::WriteToken(a2, a3, "<ShortlistTableInManyFiles>");
  if (*(char *)(a1 + 55) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 32), *(_QWORD *)(a1 + 40));
  else
    __p = *(std::string *)(a1 + 32);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  for (i = *(uint64_t ***)(a1 + 72); i; i = (uint64_t **)*i)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(i + 2);
    __p.__r_.__value_.__l.__size_ = a1;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(i + 2);
    v9 = &v10;
    v7 = *((unsigned int *)i + 14);
    if ((_DWORD)v7 == -1)
      std::__throw_bad_variant_access[abi:ne180100]();
    p_p = &__p;
    ((void (*)(std::string **, uint64_t **))off_1E5D46C18[v7])(&p_p, i + 5);
  }
}

void sub_1AD75DE30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL kaldi::quasar::ShortlistDataInManyFiles::IsLanguagePairSupported(uint64_t a1, unsigned __int8 *a2)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 56), a2) != 0;
}

void kaldi::quasar::ShortlistDataInManyFiles::Combine(uint64_t a1, void *lpsrc)
{
  _QWORD *v3;
  uint64_t *v4;
  _QWORD *v5;
  int v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  _QWORD *v19;
  uint64_t j;
  _BYTE *v21;
  uint64_t k;
  uint64_t v23;
  uint64_t m;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  _BYTE v37[48];
  uint64_t v38;
  std::__shared_weak_count *v39;
  _QWORD v40[34];

  if (!v3)
    __cxa_bad_cast();
  v4 = (uint64_t *)v3[9];
  if (v4)
  {
    v5 = (_QWORD *)(a1 + 56);
    while (1)
    {
      v6 = *((_DWORD *)v4 + 14);
      if (v6 != 1)
        break;
      v7 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v5, (unsigned __int8 *)v4 + 16);
      if (v7)
      {
        v8 = v7;
        v9 = *((_DWORD *)v7 + 14);
        if (v9 != 1)
        {
          if (!v9)
            goto LABEL_52;
          goto LABEL_53;
        }
        v10 = 0;
        v11 = *((_QWORD *)v7 + 5);
        v12 = v4[5] + 8;
        do
        {
          if (v10 == 48)
            LODWORD(v13) = 0;
          else
            v13 = *(_QWORD *)(v11 + v10 + 40);
          kaldi::MappableVector<int>::append(v11 + v10 + 8, v12 + v10, v13);
          v10 += 24;
        }
        while (v10 != 72);
        v14 = 0;
        v15 = *((_QWORD *)v8 + 5);
        v16 = v4[5] + 80;
        do
        {
          if (v14 == 24)
            LODWORD(v17) = 0;
          else
            v17 = *(_QWORD *)(v15 + v14 + 112);
          kaldi::MappableVector<int>::append(v15 + v14 + 80, v16 + v14, v17);
          v14 += 24;
        }
        while (v14 != 48);
      }
      else
      {
        for (i = 0; i != 9; i += 3)
        {
          v19 = &v40[i];
          v19[1] = 0;
          *((_BYTE *)v19 + 16) = 0;
        }
        for (j = 0; j != 48; j += 24)
        {
          v21 = &v37[j];
          *((_QWORD *)v21 + 1) = 0;
          v21[16] = 0;
        }
        std::allocate_shared[abi:ne180100]<kaldi::quasar::ShortlistDataOnDisk,std::allocator<kaldi::quasar::ShortlistDataOnDisk>,std::array<kaldi::MappableVector<int>,3ul>,std::array<kaldi::MappableVector<int>,2ul>,void>((uint64_t)v40, (uint64_t)v37, &v38);
        for (k = 0; k != -48; k -= 24)
        {
          if (v37[k + 40])
          {
            v23 = *(_QWORD *)&v37[k + 24];
            if (v23)
              MEMORY[0x1AF44D160](v23, 0x1000C8077774924);
          }
        }
        for (m = 0; m != -9; m -= 3)
        {
          if (LOBYTE(v40[m + 8]))
          {
            v25 = v40[m + 6];
            if (v25)
              MEMORY[0x1AF44D160](v25, 0x1000C8077774924);
          }
        }
        v26 = 0;
        v27 = v38;
        v28 = v4[5] + 8;
        do
        {
          if (v26 == 48)
            LODWORD(v29) = 0;
          else
            v29 = *(_QWORD *)(v27 + v26 + 40);
          kaldi::MappableVector<int>::append(v27 + v26 + 8, v28 + v26, v29);
          v26 += 24;
        }
        while (v26 != 72);
        v30 = 0;
        v31 = v38;
        v32 = v4[5] + 80;
        do
        {
          if (v30 == 24)
            LODWORD(v33) = 0;
          else
            v33 = *(_QWORD *)(v31 + v30 + 112);
          kaldi::MappableVector<int>::append(v31 + v30 + 80, v32 + v30, v33);
          v30 += 24;
        }
        while (v30 != 48);
        std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__emplace_unique_key_args<std::string,std::string const&,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>((uint64_t)v5, (unsigned __int8 *)v4 + 16, (__int128 *)v4 + 1, (uint64_t)&v38);
        v34 = v39;
        if (v39)
        {
          p_shared_owners = (unint64_t *)&v39->__shared_owners_;
          do
            v36 = __ldaxr(p_shared_owners);
          while (__stlxr(v36 - 1, p_shared_owners));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
      }
      v4 = (uint64_t *)*v4;
      if (!v4)
        return;
    }
    if (!v6)
    {
LABEL_52:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v40, "Combine of not loaded shortlist data objects is not supported.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
    }
LABEL_53:
    std::__throw_bad_variant_access[abi:ne180100]();
  }
}

void sub_1AD75E18C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void sub_1AD75E1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::operator<<[abi:ne180100]<std::char_traits<char>>(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v4);
}

uint64_t std::array<kaldi::MappableVector<int>,2ul>::~array(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  for (i = 0; i != -48; i -= 24)
  {
    if (*(_BYTE *)(a1 + i + 40))
    {
      v3 = *(_QWORD *)(a1 + i + 24);
      if (v3)
        MEMORY[0x1AF44D160](v3, 0x1000C8077774924);
    }
  }
  return a1;
}

uint64_t std::array<kaldi::MappableVector<int>,3ul>::~array(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  for (i = 0; i != -72; i -= 24)
  {
    if (*(_BYTE *)(a1 + i + 64))
    {
      v3 = *(_QWORD *)(a1 + i + 48);
      if (v3)
        MEMORY[0x1AF44D160](v3, 0x1000C8077774924);
    }
  }
  return a1;
}

uint64_t kaldi::quasar::ShortlistDataInManyFiles::operator==(uint64_t a1, void *lpsrc)
{
  _QWORD *v3;
  unsigned __int8 *v4;
  _QWORD *v5;
  uint64_t result;

  if (!v3)
    __cxa_bad_cast();
  if (*(_QWORD *)(a1 + 80) != v3[10])
    return 0;
  v4 = (unsigned __int8 *)v3[9];
  if (!v4)
    return 1;
  v5 = (_QWORD *)(a1 + 56);
  while (1)
  {
    result = (uint64_t)std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v5, v4 + 16);
    if (!result)
      break;
    if (*(_DWORD *)(result + 56) != 1 || *((_DWORD *)v4 + 14) != 1)
      return 0;
    result = kaldi::quasar::operator==(*(_QWORD *)(result + 40), *((_QWORD *)v4 + 5));
    if (!(_DWORD)result)
      return result;
    v4 = *(unsigned __int8 **)v4;
    if (!v4)
      return 1;
  }
  return result;
}

uint64_t kaldi::quasar::ShortlistDataInManyFiles::GetVocabSize(kaldi::quasar::ShortlistDataInManyFiles *this)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  _QWORD v5[34];

  if (!*((_QWORD *)this + 10))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "Vocab size requested on emtpy shortlist data");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  v1 = *((_QWORD *)this + 9);
  v2 = *(unsigned int *)(v1 + 56);
  if ((_DWORD)v2 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v5[0] = &v4;
  return ((uint64_t (*)(_QWORD *, uint64_t))off_1E5D46C28[v2])(v5, v1 + 40);
}

void sub_1AD75E3DC(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void kaldi::quasar::ShortlistDataInManyFiles::LoadLanguagePair(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  _QWORD v25[34];

  v4 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 56), (unsigned __int8 *)a2);
  if (v4)
  {
    v5 = v4;
    if (*((_DWORD *)v4 + 14) != 1)
    {
      kaldi::quasar::ShortlistDataBuilder::BuildShortlistDataOnDisk(a1 + 8, (const void **)a2, (std::string::size_type *)&v23);
      if (v23)
      {
        std::__variant_detail::__assignment<std::__variant_detail::__traits<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>::__assign_alt[abi:ne180100]<1ul,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>&>((uint64_t)(v5 + 40), (_QWORD *)v5 + 5, &v23);
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
          v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Shortlist data for language pair: ", 34);
          v7 = *(char *)(a2 + 23);
          if (v7 >= 0)
            v8 = a2;
          else
            v8 = *(_QWORD *)a2;
          if (v7 >= 0)
            v9 = *(unsigned __int8 *)(a2 + 23);
          else
            v9 = *(_QWORD *)(a2 + 8);
          v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" is successfully loaded", 23);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v25);
        }
      }
      else if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
        v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Unable to read shortlist data for language pair: ", 49);
        v17 = *(char *)(a2 + 23);
        if (v17 >= 0)
          v18 = a2;
        else
          v18 = *(_QWORD *)a2;
        if (v17 >= 0)
          v19 = *(unsigned __int8 *)(a2 + 23);
        else
          v19 = *(_QWORD *)(a2 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
      }
      v20 = v24;
      if (v24)
      {
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
    }
  }
  else if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Language pair: ", 15);
    v12 = *(char *)(a2 + 23);
    if (v12 >= 0)
      v13 = a2;
    else
      v13 = *(_QWORD *)a2;
    if (v12 >= 0)
      v14 = *(unsigned __int8 *)(a2 + 23);
    else
      v14 = *(_QWORD *)(a2 + 8);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" is not supported. Skip loading.", 32);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
  }
}

void sub_1AD75E5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ShortlistDataInManyFiles::~ShortlistDataInManyFiles(void **this)
{
  *this = &off_1E5D33D50;
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::~__hash_table((uint64_t)(this + 7));
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = &off_1E5D33D50;
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::~__hash_table((uint64_t)(this + 7));
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1AF44D190);
}

void std::__throw_bad_variant_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE5040] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E88], (void (*)(void *))std::bad_variant_access::~bad_variant_access);
}

double std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<kaldi::quasar::ShortlistDataInManyFiles::GetConstrainedWordIds(std::string const&,std::vector<int> const&,int,int)::$_0,kaldi::quasar::ShortlistDataInManyFiles::GetConstrainedWordIds(std::string const&,std::vector<int> const&,int,int)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>> const&>@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<kaldi::quasar::ShortlistDataInManyFiles::GetConstrainedWordIds(std::string const&,std::vector<int> const&,int,int)::$_0,kaldi::quasar::ShortlistDataInManyFiles::GetConstrainedWordIds(std::string const&,std::vector<int> const&,int,int)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>> const&>@<X0>(int ****a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return kaldi::quasar::ShortlistDataOnDisk::GetConstrainedWordIds(*a2, 0, **a1, *(_DWORD *)(*a1)[1], *(_DWORD *)(*a1)[2], a3);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E5CFD1B0, (void (*)(void *))MEMORY[0x1E0DE42D0]);
}

void sub_1AD75E800(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<kaldi::quasar::ShortlistDataInManyFiles::Write(std::ostream &,BOOL)::$_0,kaldi::quasar::ShortlistDataInManyFiles::Write(std::ostream &,BOOL)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>> const&>(uint64_t ***a1)
{
  uint64_t **v1;
  _QWORD *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD v7[34];

  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    v1 = *a1;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Language: ", 10);
    v3 = *((char *)*v1 + 23);
    if (v3 >= 0)
      v4 = (uint64_t)*v1;
    else
      v4 = **v1;
    if (v3 >= 0)
      v5 = *((unsigned __int8 *)*v1 + 23);
    else
      v5 = (*v1)[1];
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, v4, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" is not loaded. Nothing to write on disk.", 41);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v7);
  }
}

void sub_1AD75E8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a9);
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<kaldi::quasar::ShortlistDataInManyFiles::Write(std::ostream &,BOOL)::$_0,kaldi::quasar::ShortlistDataInManyFiles::Write(std::ostream &,BOOL)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  std::string *v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  char v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  std::string::size_type v21;
  std::__fs::filesystem::path *v22;
  _QWORD *v23;
  std::string::size_type size;
  std::__fs::filesystem::path *v25;
  std::string __p[11];
  void *v27[2];
  char v28;
  std::__fs::filesystem::path v29;
  std::__fs::filesystem::path v30;
  _QWORD v31[3];

  v31[2] = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)(*(_QWORD *)(*a1 + 8) + 32), *(_QWORD *)(*a1 + 8) + 8, &v30);
  std::__fs::filesystem::__create_directories(&v30, 0);
  v4 = *(_QWORD *)(v3 + 16);
  v5 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v27, ".shortlist");
  v6 = *(char *)(v4 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)v4;
  else
    v7 = *(const std::string::value_type **)v4;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v4 + 23);
  else
    v8 = *(_QWORD *)(v4 + 8);
  v9 = std::string::insert(v5, 0, v7, v8);
  v10 = v9->__r_.__value_.__r.__words[0];
  v31[0] = v9->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v31 + 7) = *(std::string::size_type *)((char *)&v9->__r_.__value_.__r.__words[1] + 7);
  v11 = HIBYTE(v9->__r_.__value_.__r.__words[2]);
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v31 + 7);
  __p[0].__r_.__value_.__r.__words[0] = v10;
  __p[0].__r_.__value_.__l.__size_ = v31[0];
  *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = v11;
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)__p, (uint64_t)&v30, &v29);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (v28 < 0)
    operator delete(v27[0]);
  if (SHIBYTE(v29.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(__p, v29.__pn_.__r_.__value_.__l.__data_, v29.__pn_.__r_.__value_.__l.__size_);
  else
    __p[0] = v29.__pn_;
  kaldi::Output::Output(v27, __p, **(unsigned __int8 **)(v3 + 24), 1);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (!v27[0])
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unable to create shortlist file: ", 33);
    size = HIBYTE(v29.__pn_.__r_.__value_.__r.__words[2]);
    if ((v29.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = &v29;
    else
      v25 = (std::__fs::filesystem::path *)v29.__pn_.__r_.__value_.__r.__words[0];
    if ((v29.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v29.__pn_.__r_.__value_.__l.__size_;
    std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(v23, v25, (_BYTE *)v25 + size, 0x22u, 0x5Cu);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  v12 = *a2;
  v13 = (_QWORD *)kaldi::Output::Stream((kaldi::Output *)v27);
  kaldi::quasar::ShortlistDataOnDisk::Write(v12, v13, **(unsigned __int8 **)(v3 + 24));
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Shortlist file for language pair \"", 34);
    v15 = *(_QWORD *)(v3 + 16);
    v16 = *(char *)(v15 + 23);
    if (v16 >= 0)
      v17 = *(_QWORD *)(v3 + 16);
    else
      v17 = *(_QWORD *)v15;
    if (v16 >= 0)
      v18 = *(unsigned __int8 *)(v15 + 23);
    else
      v18 = *(_QWORD *)(v15 + 8);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v17, v18);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\" is created: ", 14);
    v21 = HIBYTE(v29.__pn_.__r_.__value_.__r.__words[2]);
    if ((v29.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &v29;
    else
      v22 = (std::__fs::filesystem::path *)v29.__pn_.__r_.__value_.__r.__words[0];
    if ((v29.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v21 = v29.__pn_.__r_.__value_.__l.__size_;
    std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(v20, v22, (_BYTE *)v22 + v21, 0x22u, 0x5Cu);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
  }
  kaldi::Output::~Output((kaldi::Output *)v27);
  if (SHIBYTE(v29.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__pn_.__r_.__value_.__l.__data_);
}

void sub_1AD75EBA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

std::__fs::filesystem::path *std::__fs::filesystem::operator/[abi:ne180100]@<X0>(std::__fs::filesystem::path *this@<X1>, uint64_t a2@<X0>, std::__fs::filesystem::path *a3@<X8>)
{
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&a3->__pn_, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__pn_.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  return std::__fs::filesystem::path::operator/=[abi:ne180100](a3, this);
}

void sub_1AD75ECB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::__fs::filesystem::path *std::__fs::filesystem::path::operator/=[abi:ne180100](std::__fs::filesystem::path *a1, std::__fs::filesystem::path *this)
{
  int v4;
  std::__fs::filesystem::path *v5;
  std::string::size_type size;

  if (std::__fs::filesystem::path::__root_directory(this).__size_)
  {
    std::string::operator=(&a1->__pn_, &this->__pn_);
  }
  else
  {
    if (std::__fs::filesystem::path::__filename(a1).__size_)
      std::string::push_back(&a1->__pn_, 47);
    v4 = SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    if (v4 >= 0)
      v5 = this;
    else
      v5 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
    if (v4 >= 0)
      size = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    else
      size = this->__pn_.__r_.__value_.__l.__size_;
    std::string::append(&a1->__pn_, (const std::string::value_type *)v5, size);
  }
  return a1;
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

_QWORD *std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, _BYTE *a2, _BYTE *a3, unsigned __int8 __c, unsigned __int8 a5)
{
  int v10;
  std::string *v11;
  std::string::size_type size;
  _QWORD *v13;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  std::string::push_back(&v15, __c);
  while (a2 != a3)
  {
    v10 = *a2;
    if (v10 == a5 || v10 == __c)
    {
      std::string::push_back(&v15, a5);
      LOBYTE(v10) = *a2;
    }
    std::string::push_back(&v15, v10);
    ++a2;
  }
  std::string::push_back(&v15, __c);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v15;
  else
    v11 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  else
    size = v15.__r_.__value_.__l.__size_;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v11, size);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v13;
}

void sub_1AD75EED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x1AF44CB90](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x1AF44CB9C](v13);
  return a1;
}

void sub_1AD75EFF8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x1AF44CB9C](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1AD75EFD8);
}

void sub_1AD75F040(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_1AD75F174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<kaldi::quasar::ShortlistDataInManyFiles::GetVocabSize(void)::$_0,kaldi::quasar::ShortlistDataInManyFiles::GetVocabSize(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<kaldi::quasar::ShortlistDataInManyFiles::GetVocabSize(void)::$_0,kaldi::quasar::ShortlistDataInManyFiles::GetVocabSize(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _DWORD *v3;
  int v4;

  v2 = *a2;
  if (*(_QWORD *)(*a2 + 16) < 2uLL)
  {
    v4 = *(_DWORD *)(v2 + 40);
    v3 = *(_DWORD **)(v2 + 8);
  }
  else
  {
    v3 = *(_DWORD **)(v2 + 8);
    v4 = v3[1];
  }
  return (v4 - *v3);
}

void kaldi::KaldiLogMessage::~KaldiLogMessage(kaldi::KaldiLogMessage *this)
{
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  void *__p;
  char v6;

  v2 = (void (*)(uint64_t))kaldi::KaldiLogMessage::g_logger;
  std::stringbuf::str();
  v2((uint64_t)&__p);
  if (v6 < 0)
    operator delete(__p);
  v3 = MEMORY[0x1E0DE4F60];
  v4 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)this = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = *(_QWORD *)(v3 + 24);
  *((_QWORD *)this + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF44D094]((char *)this + 112);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,0>(uint64_t a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E5D46C38[v2])(&v4, a1);
  *(_DWORD *)(a1 + 16) = -1;
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN5kaldi6quasar24ShortlistDataInManyFiles28NotLoadedShortListDataOnDiskENS_10shared_ptrINS9_19ShortlistDataOnDiskEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSB_SE_EEEEEEDcSI_DpT0_(uint64_t a1, uint64_t a2)
{
  return std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  *(_QWORD *)(result + 8) = a2[1];
  a2[1] = 0;
  v5 = a2[2];
  v3 = a2 + 2;
  v4 = v5;
  *(_QWORD *)(result + 16) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 16;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v6 == v13)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v13 == v6)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v8 + a3 + v7 + v4;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v17 + v6 + v9;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v39 + v30 + v28 + v29;
        v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::quasar::ShortlistDataOnDisk,std::allocator<kaldi::quasar::ShortlistDataOnDisk>,std::array<kaldi::MappableVector<int>,3ul>,std::array<kaldi::MappableVector<int>,2ul>,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x98uLL);
  result = std::__shared_ptr_emplace<kaldi::quasar::ShortlistDataOnDisk>::__shared_ptr_emplace[abi:ne180100]<std::array<kaldi::MappableVector<int>,3ul>,std::array<kaldi::MappableVector<int>,2ul>,std::allocator<kaldi::quasar::ShortlistDataOnDisk>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1AD75FC50(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::quasar::ShortlistDataOnDisk>::__shared_ptr_emplace[abi:ne180100]<std::array<kaldi::MappableVector<int>,3ul>,std::array<kaldi::MappableVector<int>,2ul>,std::allocator<kaldi::quasar::ShortlistDataOnDisk>,0>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E5D41FB0;
  a1[1] = 0;
  std::allocator<kaldi::quasar::ShortlistDataOnDisk>::construct[abi:ne180100]<kaldi::quasar::ShortlistDataOnDisk,std::array<kaldi::MappableVector<int>,3ul>,std::array<kaldi::MappableVector<int>,2ul>>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1AD75FCB4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::ShortlistDataOnDisk>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41FB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::ShortlistDataOnDisk>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41FB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::quasar::ShortlistDataOnDisk>::__on_zero_shared(uint64_t a1)
{
  char v2;

  return std::allocator<kaldi::quasar::ShortlistDataOnDisk>::destroy[abi:ne180100]((uint64_t)&v2, (uint64_t *)(a1 + 24));
}

uint64_t std::allocator<kaldi::quasar::ShortlistDataOnDisk>::construct[abi:ne180100]<kaldi::quasar::ShortlistDataOnDisk,std::array<kaldi::MappableVector<int>,3ul>,std::array<kaldi::MappableVector<int>,2ul>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t i;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t j;
  uint64_t k;
  _BYTE v17[48];
  _BYTE v18[72];

  for (i = 0; i != 72; i += 24)
  {
    v5 = &v18[i];
    v6 = a3 + i;
    v7 = *(_QWORD *)(a3 + i + 8);
    *(_QWORD *)v5 = *(_QWORD *)(a3 + i);
    *((_QWORD *)v5 + 1) = v7;
    v5[16] = *(_BYTE *)(a3 + i + 16);
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_BYTE *)(v6 + 16) = 0;
  }
  v8 = 0;
  v9 = 0;
  do
  {
    v10 = 3 * v9;
    v11 = &v17[8 * v10];
    v12 = a4 + 8 * v10;
    v13 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)v11 = *(_QWORD *)v12;
    *((_QWORD *)v11 + 1) = v13;
    v11[16] = *(_BYTE *)(v12 + 16);
    LOBYTE(v11) = v8;
    *(_QWORD *)v12 = 0;
    *(_QWORD *)(v12 + 8) = 0;
    *(_BYTE *)(v12 + 16) = 0;
    v8 = 1;
    v9 = 1;
  }
  while ((v11 & 1) == 0);
  result = kaldi::quasar::ShortlistDataOnDisk::ShortlistDataOnDisk(a2, v18, v17);
  for (j = 0; j != -48; j -= 24)
  {
    if (v17[j + 40])
    {
      result = *(_QWORD *)&v17[j + 24];
      if (result)
        result = MEMORY[0x1AF44D160](result, 0x1000C8077774924);
    }
  }
  for (k = 0; k != -72; k -= 24)
  {
    if (v18[k + 64])
    {
      result = *(_QWORD *)&v18[k + 48];
      if (result)
        result = MEMORY[0x1AF44D160](result, 0x1000C8077774924);
    }
  }
  return result;
}

void sub_1AD75FE54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::array<kaldi::MappableVector<int>,2ul>::~array((uint64_t)va);
  std::array<kaldi::MappableVector<int>,3ul>::~array((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<kaldi::quasar::ShortlistDataOnDisk>::destroy[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t i;
  uint64_t v4;
  uint64_t j;
  uint64_t v6;
  uint64_t result;

  for (i = 0; i != -6; i -= 3)
  {
    if (LOBYTE(a2[i + 15]))
    {
      v4 = a2[i + 13];
      if (v4)
        MEMORY[0x1AF44D160](v4, 0x1000C8077774924);
    }
  }
  for (j = 0; j != -9; j -= 3)
  {
    if (LOBYTE(a2[j + 9]))
    {
      v6 = a2[j + 7];
      if (v6)
        MEMORY[0x1AF44D160](v6, 0x1000C8077774924);
    }
  }
  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void *kaldi::MappableVector<int>::append(uint64_t a1, uint64_t a2, int a3)
{
  char *v6;
  const void *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *result;
  uint64_t v12;

  v6 = (char *)operator new[]();
  v7 = *(const void **)a1;
  v8 = *(_QWORD *)(a1 + 8);
  memcpy(v6, *(const void **)a1, 4 * v8);
  v9 = &v6[4 * v8];
  v10 = *(_QWORD *)(a2 + 8);
  result = memcpy(v9, *(const void **)a2, 4 * v10);
  if (a3 && v10)
  {
    v12 = v10;
    do
    {
      *(_DWORD *)v9 += a3;
      v9 += 4;
      --v12;
    }
    while (v12);
  }
  if (*(_BYTE *)(a1 + 16) && v7)
  {
    result = (void *)MEMORY[0x1AF44D160](v7, 0x1000C8077774924);
    v10 = *(_QWORD *)(a2 + 8);
    v8 = *(_QWORD *)(a1 + 8);
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v8 + v10;
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__emplace_unique_key_args<std::string,std::string const&,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>(uint64_t a1, unsigned __int8 *a2, __int128 *a3, uint64_t a4)
{
  unint64_t v4;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *i;
  unint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD v27[3];

  v9 = (_QWORD *)(a1 + 24);
  v10 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v15 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      for (i = *v15; i; i = *(unsigned __int8 **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v11)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12)
              v17 %= v12;
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__construct_node_hash<std::string const&,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>(a1, v11, a3, a4, (uint64_t)v27);
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    v20 = 1;
    if (v12 >= 3)
      v20 = (v12 & (v12 - 1)) != 0;
    v21 = v20 | (2 * v12);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v23);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v4 = v11 % v12;
      else
        v4 = v11;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
  }
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)v27[0] = *v24;
    *v24 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v27[0])
    {
      v25 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12)
          v25 %= v12;
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v27[0];
    }
  }
  i = (unsigned __int8 *)v27[0];
  v27[0] = 0;
  ++*v9;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return i;
}

void sub_1AD7602C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__construct_node_hash<std::string const&,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  char *v10;
  std::string *result;

  v9 = a1 + 16;
  v10 = (char *)operator new(0x40uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = a2;
  result = std::pair<std::string const,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>::pair[abi:ne180100]<std::string const&,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>,0>((std::string *)(v10 + 16), a3, a4);
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_1AD76034C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>::pair[abi:ne180100]<std::string const&,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>,0>(std::string *this, __int128 *a2, uint64_t a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  LODWORD(this[1].__r_.__value_.__r.__words[2]) = 1;
  return this;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

_QWORD *std::__variant_detail::__assignment<std::__variant_detail::__traits<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>::__assign_alt[abi:ne180100]<1ul,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>&>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  if (*(_DWORD *)(a1 + 16) == 1)
    return std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](a2, a3);
  else
    return (_QWORD *)std::__variant_detail::__assignment<std::__variant_detail::__traits<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>::__emplace[abi:ne180100]<1ul,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>&>(a1, a3);
}

_QWORD *std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>::__emplace[abi:ne180100]<1ul,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>&>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  char v9;

  v4 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E5D46C38[v4])(&v9, a1);
  *(_DWORD *)(a1 + 16) = -1;
  v5 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_DWORD *)(a1 + 16) = 1;
  return a1;
}

uint64_t kaldi::quasar::Shortlist::Shortlist(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = -1;
  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 32) = v2;
  return result;
}

unint64_t kaldi::quasar::Shortlist::GetSoftmaxIdx(kaldi::quasar::Shortlist *this, int a2)
{
  _DWORD *v2;
  unint64_t v3;
  _DWORD *v4;
  unint64_t v5;
  int *v6;
  _DWORD *v7;
  int v8;
  _QWORD *v10;
  _QWORD v11[34];

  v2 = (_DWORD *)*((_QWORD *)this + 1);
  if (v2 == *(_DWORD **)this)
  {
    v4 = (_DWORD *)*((_QWORD *)this + 1);
  }
  else
  {
    v3 = ((uint64_t)v2 - *(_QWORD *)this) >> 2;
    v4 = *(_DWORD **)this;
    do
    {
      v5 = v3 >> 1;
      v6 = &v4[v3 >> 1];
      v8 = *v6;
      v7 = v6 + 1;
      v3 += ~(v3 >> 1);
      if (v8 < a2)
        v4 = v7;
      else
        v3 = v5;
    }
    while (v3);
  }
  if (v2 == v4 || *v4 != a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Shortlist target symbol id ", 27);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, " not in shortlist!");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
  }
  return ((unint64_t)v4 - *(_QWORD *)this) >> 2;
}

uint64_t kaldi::quasar::Shortlist::MapShortlist(std::vector<int> *a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, int **a7, int **a8, _QWORD *a9, char a10)
{
  int v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  const char *v22;
  uint64_t v23;
  char v24;
  int *v25;
  int *v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  _QWORD *v34;
  std::vector<int>::pointer v35;
  std::vector<int>::pointer v36;
  int v37;
  int *v38;
  int *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  BOOL v43;
  int *begin;
  uint64_t v45;
  _QWORD *v46;
  uint64_t result;
  __int32 *end;
  __int32 *v49;
  __int32 *v50;
  _QWORD *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  std::vector<int>::pointer v56;
  int *v57;
  void **v58;
  uint64_t v59;
  uint64_t v60;
  void *__p[2];
  unsigned __int8 v62;
  _QWORD v63[35];
  int v64[4];
  _QWORD v65[11];
  char v66;
  uint64_t v67;
  _QWORD v68[2];
  _QWORD *v69;
  int v70;
  int v71;

  v70 = a4;
  v71 = a3;
  v16 = (*(uint64_t (**)(std::vector<int>::pointer))(*(_QWORD *)a1[1].__end_ + 16))(a1[1].__end_);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v64);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"Language pair: ", 15);
    v18 = *(char *)(a2 + 23);
    if (v18 >= 0)
      v19 = a2;
    else
      v19 = *(_QWORD *)a2;
    if (v18 >= 0)
      v20 = *(unsigned __int8 *)(a2 + 23);
    else
      v20 = *(_QWORD *)(a2 + 8);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
    if (v16)
      v22 = " is supported";
    else
      v22 = " is not supported";
    if (v16)
      v23 = 13;
    else
      v23 = 17;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v64);
  }
  if (((int)a6 + (int)a5 < 0) ^ __OFADD__((_DWORD)a6, (_DWORD)a5) | ((_DWORD)a6 + (_DWORD)a5 == 0))
    v24 = 0;
  else
    v24 = v16;
  if ((v24 & 1) != 0)
  {
    (**(void (***)(_QWORD *__return_ptr, uint64_t, uint64_t, int **, uint64_t, uint64_t))a1[1].__end_)(v68, (uint64_t)a1[1].__end_, a2, a7, a5, a6);
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v68, &v71, &v71);
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v68, &v70, &v70);
    v25 = *a7;
    v26 = a7[1];
    while (v25 != v26)
    {
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v68, v25, v25);
      ++v25;
    }
    v38 = *a8;
    v39 = a8[1];
    while (v38 != v39)
    {
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v68, v38, v38);
      ++v38;
    }
    v40 = (_QWORD *)*a9;
    if ((_QWORD *)*a9 != a9 + 1)
    {
      do
      {
        v64[0] = *((_DWORD *)v40 + 7);
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__erase_unique<int>(v68, v64);
        v41 = (_QWORD *)v40[1];
        if (v41)
        {
          do
          {
            v42 = v41;
            v41 = (_QWORD *)*v41;
          }
          while (v41);
        }
        else
        {
          do
          {
            v42 = (_QWORD *)v40[2];
            v43 = *v42 == (_QWORD)v40;
            v40 = v42;
          }
          while (!v43);
        }
        v40 = v42;
      }
      while (v42 != a9 + 1);
    }
    begin = a1->__begin_;
    a1->__end_ = a1->__begin_;
    if (v69)
    {
      v45 = 0;
      v46 = v69;
      do
      {
        ++v45;
        v46 = (_QWORD *)*v46;
      }
      while (v46);
    }
    else
    {
      v45 = 0;
    }
    std::vector<int>::__insert_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<int,void *> *>,std::__hash_const_iterator<std::__hash_node<int,void *> *>>(a1, begin, v69, 0, v45);
    std::__sort<std::__less<int,int> &,int *>();
    end = a1->__end_;
    v49 = wmemchr(a1->__begin_, v71, end - a1->__begin_);
    if (v49)
      v50 = v49;
    else
      v50 = end;
    LODWORD(a1[1].__begin_) = (unint64_t)((char *)v50 - (char *)a1->__begin_) >> 2;
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v64);
      v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"Using shortlist for language_pair: ", 35);
      v52 = *(char *)(a2 + 23);
      v53 = v52 >= 0 ? a2 : *(_QWORD *)a2;
      v54 = v52 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(_QWORD *)(a2 + 8);
      v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, v53, v54);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)", reducing Voc size to ", 23);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v64);
      if (kaldi::g_kaldi_verbose_level >= 5)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v64);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"Shortlisted vocabulary:", 23);
        v56 = a1->__begin_;
        v57 = a1->__end_;
        if (a1->__begin_ != v57)
        {
          do
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)" ", 1);
            std::ostream::operator<<();
            ++v56;
          }
          while (v56 != v57);
        }
        if (kaldi::g_kaldi_verbose_level > 4)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v63, 5);
          std::stringbuf::str();
          if ((v62 & 0x80u) == 0)
            v58 = __p;
          else
            v58 = (void **)__p[0];
          if ((v62 & 0x80u) == 0)
            v59 = v62;
          else
            v59 = (uint64_t)__p[1];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)v58, v59);
          if ((char)v62 < 0)
            operator delete(__p[0]);
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v63);
        }
        *(_QWORD *)v64 = *MEMORY[0x1E0DE4F50];
        v60 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
        *(_QWORD *)((char *)v64 + *(_QWORD *)(*(_QWORD *)v64 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
        v65[0] = v60;
        v65[1] = MEMORY[0x1E0DE4FB8] + 16;
        if (v66 < 0)
          operator delete((void *)v65[9]);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1AF44D094](&v67);
      }
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v68);
  }
  else
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v64);
      v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"Has shortlist, but disabled due to shortlist-lang-pair = ", 57);
      v28 = *(char *)(a2 + 23);
      if (v28 >= 0)
        v29 = a2;
      else
        v29 = *(_QWORD *)a2;
      if (v28 >= 0)
        v30 = *(unsigned __int8 *)(a2 + 23);
      else
        v30 = *(_QWORD *)(a2 + 8);
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, v29, v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)", shortlist-cond-n = ", 21);
      v32 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)", shortlist-freq-n = ", 21);
      std::ostream::operator<<();
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v64);
    }
    if (!a10)
    {
      result = 0;
      a1->__end_ = a1->__begin_;
      return result;
    }
    v33 = (*(uint64_t (**)(std::vector<int>::pointer))(*(_QWORD *)a1[1].__end_ + 40))(a1[1].__end_) - 1;
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v64);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"Shortlist is disabled, and fallback to use full vocab (", 55);
      v34 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)") instead.", 10);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v64);
    }
    std::vector<int>::resize((std::vector<unsigned int> *)a1, v33);
    v35 = a1->__begin_;
    v36 = a1->__end_;
    if (a1->__begin_ != v36)
    {
      v37 = 0;
      do
        *v35++ = v37++;
      while (v35 != v36);
    }
    LODWORD(a1[1].__begin_) = v71;
  }
  return 1;
}

void sub_1AD760B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;

  if (a15 < 0)
    operator delete(__p);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a16);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a51);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v51 - 128);
  _Unwind_Resume(a1);
}

void std::vector<int>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz)
{
  std::vector<unsigned int>::size_type v2;

  v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<int>::__append(this, __sz - v2);
  }
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1AD760D10(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1AF44D094](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1AF44D094](a1 + 128);
  return a1;
}

uint64_t kaldi::quasar::Shortlist::LoadLanguagePair(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 48))(*(_QWORD *)(a1 + 32));
}

void kaldi::KaldiVlogMessage::~KaldiVlogMessage(kaldi::KaldiVlogMessage *this)
{
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  void *__p;
  char v6;

  v2 = (void (*)(uint64_t))kaldi::KaldiVlogMessage::g_logger;
  std::stringbuf::str();
  v2((uint64_t)&__p);
  if (v6 < 0)
    operator delete(__p);
  v3 = MEMORY[0x1E0DE4F60];
  v4 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)this = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = *(_QWORD *)(v3 + 24);
  *((_QWORD *)this + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF44D094]((char *)this + 112);
}

void std::vector<int>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

uint64_t std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1AD76112C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__erase_unique<int>(_QWORD *a1, int *a2)
{
  uint64_t *result;

  result = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a1, a2);
  if (result)
  {
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t *std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(_QWORD *a1, int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

uint64_t std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  void *__p;

  v2 = *a2;
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::remove(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    operator delete(v3);
  return v2;
}

_QWORD *std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::remove@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

int *std::vector<int>::__insert_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<int,void *> *>,std::__hash_const_iterator<std::__hash_node<int,void *> *>>(std::vector<int> *a1, int *__src, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  int *v5;
  _QWORD *v7;
  std::allocator<int> *p_end_cap;
  int *v10;
  int *value;
  unint64_t v12;
  char *begin;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  int *v23;
  int *v24;
  uint64_t v25;
  int *v26;
  _QWORD *v27;
  _DWORD *v28;
  char *v29;
  int *v30;
  int *v31;
  int v32;
  int *v33;
  std::__split_buffer<int> __v;

  v5 = __src;
  if (a5 >= 1)
  {
    v7 = a3;
    value = a1->__end_cap_.__value_;
    p_end_cap = (std::allocator<int> *)&a1->__end_cap_;
    v10 = value;
    v12 = *((_QWORD *)p_end_cap - 1);
    if (a5 <= (uint64_t)((uint64_t)value - v12) >> 2)
    {
      v19 = a5 + 1;
      v20 = a3;
      do
      {
        v20 = (_QWORD *)*v20;
        --v19;
      }
      while (v19 > 1);
      v21 = (uint64_t)(v12 - (_QWORD)__src) >> 2;
      if (v21 >= a5)
      {
        v23 = (int *)*((_QWORD *)p_end_cap - 1);
        v21 = a5;
      }
      else
      {
        if ((uint64_t)(v12 - (_QWORD)__src) < 1)
        {
          v20 = a3;
        }
        else
        {
          v22 = v21 + 1;
          v20 = a3;
          do
          {
            v20 = (_QWORD *)*v20;
            --v22;
          }
          while (v22 > 1);
        }
        v23 = (int *)*((_QWORD *)p_end_cap - 1);
        if (v20 != a4)
        {
          v27 = v20;
          v28 = (_DWORD *)*((_QWORD *)p_end_cap - 1);
          do
          {
            *v28++ = *((_DWORD *)v27 + 4);
            v27 = (_QWORD *)*v27;
            ++v23;
          }
          while (v27 != a4);
        }
        a1->__end_ = v23;
      }
      if (v21 >= 1)
      {
        v29 = (char *)&__src[a5];
        v30 = &v23[-a5];
        v31 = v23;
        if ((unint64_t)v30 < v12)
        {
          v31 = v23;
          do
          {
            v32 = *v30++;
            *v31++ = v32;
          }
          while ((unint64_t)v30 < v12);
        }
        a1->__end_ = v31;
        if (v23 != (int *)v29)
          memmove(&v23[-(((char *)v23 - v29) >> 2)], __src, (char *)v23 - v29);
        if (v20 != v7)
        {
          v33 = v5;
          do
          {
            *v33++ = *((_DWORD *)v7 + 4);
            v7 = (_QWORD *)*v7;
          }
          while (v7 != v20);
        }
      }
    }
    else
    {
      begin = (char *)a1->__begin_;
      v14 = a5 + ((uint64_t)(v12 - (unint64_t)a1->__begin_) >> 2);
      if (v14 >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v15 = ((char *)__src - begin) >> 2;
      v16 = (char *)v10 - begin;
      if (v16 >> 1 > v14)
        v14 = v16 >> 1;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
        v17 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v17 = v14;
      __v.__end_cap_.__value_ = p_end_cap;
      if (v17)
        v18 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v17);
      else
        v18 = 0;
      v24 = &v18[v15];
      __v.__first_ = v18;
      __v.__begin_ = v24;
      __v.__end_cap_.__value_ = &v18[v17];
      v25 = 4 * a5;
      v26 = &v24[a5];
      do
      {
        *v24++ = *((_DWORD *)v7 + 4);
        v7 = (_QWORD *)*v7;
        v25 -= 4;
      }
      while (v25);
      __v.__end_ = v26;
      v5 = std::vector<int>::__swap_out_circular_buffer(a1, &__v, v5);
      if (__v.__end_ != __v.__begin_)
        __v.__end_ = (std::__split_buffer<int>::pointer)((char *)__v.__end_
                                                       + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
      if (__v.__first_)
        operator delete(__v.__first_);
    }
  }
  return v5;
}

void sub_1AD7615C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::vector<int>::pointer std::vector<int>::__swap_out_circular_buffer(std::vector<int> *this, std::__split_buffer<int> *__v, std::vector<int>::pointer __p)
{
  int *begin;
  std::vector<int>::pointer v6;
  int *v7;
  std::vector<int>::pointer v8;
  int v9;
  int *end;
  std::__split_buffer<int>::pointer v11;
  int64_t v12;
  int *v13;
  int *v14;
  int *value;

  begin = __v->__begin_;
  v6 = this->__begin_;
  v7 = begin;
  if (this->__begin_ != __p)
  {
    v8 = __p;
    v7 = __v->__begin_;
    do
    {
      v9 = *--v8;
      *--v7 = v9;
    }
    while (v8 != v6);
  }
  __v->__begin_ = v7;
  end = this->__end_;
  v11 = __v->__end_;
  v12 = (char *)end - (char *)__p;
  if (end != __p)
  {
    memmove(__v->__end_, __p, (char *)end - (char *)__p);
    v7 = __v->__begin_;
  }
  __v->__end_ = (std::__split_buffer<int>::pointer)((char *)v11 + v12);
  v13 = this->__begin_;
  this->__begin_ = v7;
  __v->__begin_ = v13;
  v14 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v14;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

void kaldi::quasar::ShortlistNnetBuilder::ConstrainSoftmax(kaldi::nnet1::Nnet *a1@<X0>, _QWORD *a2@<X1>, kaldi::nnet1::Nnet **a3@<X8>)
{
  uint64_t v6;
  uint64_t Component;
  int v8;
  int v9;
  kaldi::nnet1::Nnet *v10;
  int v11;
  uint64_t v12;
  kaldi::nnet1::Component *v13;
  unsigned int *v14;
  uint64_t v15;
  kaldi::nnet1::Component *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::string::size_type v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float *v40;
  float *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  std::string::size_type v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  float *v69;
  float *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  std::string::size_type v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  std::string *v115;
  std::string::size_type size;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  kaldi::quasar::Vocab *v120;
  kaldi::quasar::Vocab *v121;
  int v122;
  int v123[4];
  int v124;
  std::string v125;

  v6 = (*((_QWORD *)a1 + 1) - *(_QWORD *)a1) >> 3;
  Component = kaldi::nnet1::Nnet::GetComponent(a1, (int)v6 - 1);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Component + 24))(Component);
  if (v8 == 513)
    v9 = -2;
  else
    v9 = -1;
  v10 = (kaldi::nnet1::Nnet *)operator new();
  kaldi::nnet1::Nnet::Nnet(v10);
  *a3 = v10;
  if (v9 + (int)v6 >= 1)
  {
    v11 = 0;
    do
    {
      v12 = kaldi::nnet1::Nnet::GetComponent(a1, v11);
      v13 = (kaldi::nnet1::Component *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
      kaldi::nnet1::Nnet::AppendComponent(v10, v13);
      ++v11;
    }
    while (v9 + (_DWORD)v6 != v11);
  }
  v122 = v8;
  v14 = (unsigned int *)kaldi::nnet1::Nnet::GetComponent(a1, v9 + (int)v6);
  v15 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v14 + 24))(v14);
  v16 = (kaldi::nnet1::Component *)v15;
  switch((int)v15)
  {
    case 257:
      v17 = v14[2];
      v19 = *a2;
      v18 = a2[1];
      if (!v20)
        goto LABEL_70;
      v21 = v20;
      v22 = operator new();
      v23 = (unint64_t)(v18 - v19) >> 2;
      kaldi::nnet1::AffineTransform::AffineTransform((kaldi::nnet1::AffineTransform *)v22, v17, v23);
      v24 = v21[14];
      kaldi::Matrix<float>::Matrix((uint64_t)v123, v23, v17, 0, 0);
      if ((int)v23 >= 1)
      {
        v25 = 0;
        v26 = *a2;
        v27 = *(_QWORD *)v123;
        v28 = 4 * v124;
        do
        {
          if ((int)v17 >= 1)
          {
            v29 = 0;
            v30 = *(_QWORD *)(v24 + 8) + 4 * *(_DWORD *)(v24 + 24) * *(_DWORD *)(v26 + 4 * v25);
            do
            {
              *(_DWORD *)(v27 + 4 * v29) = *(_DWORD *)(v30 + 4 * v29);
              ++v29;
            }
            while (v17 != v29);
          }
          ++v25;
          v27 += v28;
        }
        while (v25 != v23);
      }
      kaldi::nnet1::AffineTransform::SetLinearity((kaldi::nnet1::AffineTransform *)v22, v123);
      v31 = v21[15];
      memset(&v125, 0, sizeof(v125));
      kaldi::Vector<float>::Resize((void **)&v125.__r_.__value_.__l.__data_, v23, 0);
      if ((int)v23 >= 1)
      {
        v32 = 0;
        v33 = *a2;
        v34 = *(_QWORD *)(v31 + 8);
        v35 = v125.__r_.__value_.__r.__words[0];
        do
        {
          *(_DWORD *)(v35 + 4 * v32) = *(_DWORD *)(v34 + 4 * *(int *)(v33 + 4 * v32));
          ++v32;
        }
        while (v23 != v32);
      }
      kaldi::nnet1::AffineTransform::Bias((kaldi::nnet1::AffineTransform *)v22);
      v36 = (void *)kaldi::nnet1::AffineTransform::Bias((kaldi::nnet1::AffineTransform *)v22);
      kaldi::CuVectorBase<float>::CopyFromVec<float>(v36, (uint64_t)&v125);
      kaldi::Vector<float>::Destroy((uint64_t)&v125);
      goto LABEL_67;
    case 258:
      v95 = v14[2];
      v97 = *a2;
      v96 = a2[1];
      if (!v98)
        goto LABEL_70;
      v99 = v98;
      v22 = operator new();
      v100 = v96 - v97;
      kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearTransform(v22, v95, v100 >> 2);
      v101 = v99[13];
      kaldi::Matrix<float>::Matrix((uint64_t)v123, v100 >> 2, v95, 0, 0);
      if ((int)(v100 >> 2) >= 1)
      {
        v102 = 0;
        v103 = *a2;
        v104 = *(_QWORD *)v123;
        v105 = 4 * v124;
        do
        {
          if ((int)v95 >= 1)
          {
            v106 = 0;
            v107 = *(_QWORD *)(v101 + 8) + 4 * *(_DWORD *)(v101 + 24) * *(_DWORD *)(v103 + 4 * v102);
            do
            {
              *(_DWORD *)(v104 + 4 * v106) = *(_DWORD *)(v107 + 4 * v106);
              ++v106;
            }
            while (v95 != v106);
          }
          ++v102;
          v104 += v105;
        }
        while (v102 != (v100 >> 2));
      }
      kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::SetLinearity(v22, v123);
      goto LABEL_67;
    case 259:
      v53 = v14[2];
      v55 = *a2;
      v54 = a2[1];
      if (!v56)
        goto LABEL_70;
      v57 = v56;
      v22 = operator new();
      v58 = v54 - v55;
      kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::LinearTransform(v22, v53, v58 >> 2);
      v59 = v57[13];
      kaldi::Matrix<float>::Matrix((uint64_t)v123, v58 >> 2, v53, 0, 0);
      if ((int)(v58 >> 2) >= 1)
      {
        v60 = 0;
        v61 = (v58 >> 2);
        do
        {
          if ((int)v53 >= 1)
          {
            v62 = 0;
            v63 = *(_DWORD *)(*a2 + 4 * v60);
            do
            {
              v64 = kaldi::QuantizedMatrixBase<signed char>::Data(v59);
              v65 = kaldi::QuantizedMatrixBase<short>::NumCols(v59);
              *(float *)(*(_QWORD *)v123 + 4 * (int)v60 * v124 + 4 * v62) = (float)*(char *)(v64
                                                                                             + v63 * (uint64_t)v65
                                                                                             + v62)
                                                                            / *(float *)(v59 + 12);
              ++v62;
            }
            while (v53 != v62);
          }
          ++v60;
        }
        while (v60 != v61);
      }
      kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::SetLinearity(v22, (uint64_t)v123);
      goto LABEL_67;
    case 260:
      v82 = v14[2];
      v84 = *a2;
      v83 = a2[1];
      if (!v85)
        goto LABEL_70;
      v86 = v85;
      v22 = operator new();
      v87 = v83 - v84;
      kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::LinearTransform(v22, v82, v87 >> 2);
      v88 = v86[13];
      kaldi::Matrix<float>::Matrix((uint64_t)v123, v87 >> 2, v82, 0, 0);
      if ((int)(v87 >> 2) >= 1)
      {
        v89 = 0;
        v90 = (v87 >> 2);
        do
        {
          if ((int)v82 >= 1)
          {
            v91 = 0;
            v92 = *(_DWORD *)(*a2 + 4 * v89);
            do
            {
              v93 = kaldi::QuantizedMatrixBase<signed char>::Data(v88);
              v94 = kaldi::QuantizedMatrixBase<short>::NumCols(v88);
              *(float *)(*(_QWORD *)v123 + 4 * (int)v89 * v124 + 4 * v91) = (float)*(__int16 *)(v93
                                                                                                + 2 * v94 * v92
                                                                                                + 2 * v91)
                                                                            / *(float *)(v88 + 12);
              ++v91;
            }
            while (v82 != v91);
          }
          ++v89;
        }
        while (v89 != v90);
      }
      kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::SetLinearity(v22, (uint64_t)v123);
      goto LABEL_67;
    default:
      if ((_DWORD)v15 == 1035)
      {
        v66 = v14[2];
        v68 = *a2;
        v67 = a2[1];
        if (v69)
        {
          v70 = v69;
          v121 = (kaldi::quasar::Vocab *)operator new();
          v71 = (unint64_t)(v67 - v68) >> 2;
          kaldi::nnet1::QuantizedAffineTransform<short>::QuantizedAffineTransform((uint64_t)v121, v66, v71);
          kaldi::Matrix<float>::Matrix((uint64_t)v123, v71, v66, 0, 0);
          v72 = v71;
          v119 = v71;
          if ((int)v71 >= 1)
          {
            v73 = 0;
            do
            {
              if ((int)v66 >= 1)
              {
                v74 = 0;
                v75 = *(_DWORD *)(*a2 + 4 * v73);
                do
                {
                  v76 = kaldi::QuantizedMatrixBase<signed char>::Data((uint64_t)(v70 + 12));
                  v77 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)(v70 + 12));
                  *(float *)(*(_QWORD *)v123 + 4 * (int)v73 * v124 + 4 * v74) = (float)*(__int16 *)(v76 + 2 * v77 * v75 + 2 * v74)
                                                                                / v70[15];
                  ++v74;
                }
                while (v66 != v74);
              }
              ++v73;
            }
            while (v73 != v72);
          }
          v22 = (uint64_t)v121;
          kaldi::nnet1::QuantizedAffineTransform<short>::SetLinearity(v121, (uint64_t)v123);
          memset(&v125, 0, sizeof(v125));
          kaldi::Vector<float>::Resize((void **)&v125.__r_.__value_.__l.__data_, v119, 0);
          if ((int)v119 >= 1)
          {
            v78 = 0;
            v79 = *a2;
            v80 = *((_QWORD *)v70 + 13);
            v81 = v125.__r_.__value_.__r.__words[0];
            do
            {
              *(_DWORD *)(v81 + 4 * v78) = *(_DWORD *)(v80 + 4 * *(int *)(v79 + 4 * v78));
              ++v78;
            }
            while (v72 != v78);
          }
          goto LABEL_31;
        }
LABEL_70:
        __cxa_bad_cast();
      }
      if ((_DWORD)v15 != 1033)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v123);
        v113 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v123, (uint64_t)"GetShrinkedComponent", 20);
        v114 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v113, (uint64_t)" is not implemented for ", 24);
        kaldi::nnet1::Component::TypeToMarker(v16, &v125);
        if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v115 = &v125;
        else
          v115 = (std::string *)v125.__r_.__value_.__r.__words[0];
        if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v125.__r_.__value_.__r.__words[2]);
        else
          size = v125.__r_.__value_.__l.__size_;
        v117 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114, (uint64_t)v115, size);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v117, (uint64_t)" component.", 11);
        if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v125.__r_.__value_.__l.__data_);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v123);
      }
      v37 = v14[2];
      v39 = *a2;
      v38 = a2[1];
      if (!v40)
        goto LABEL_70;
      v41 = v40;
      v120 = (kaldi::quasar::Vocab *)operator new();
      v42 = (unint64_t)(v38 - v39) >> 2;
      kaldi::nnet1::QuantizedAffineTransform<signed char>::QuantizedAffineTransform((uint64_t)v120, v37, v42);
      kaldi::Matrix<float>::Matrix((uint64_t)v123, v42, v37, 0, 0);
      v43 = v42;
      v118 = v42;
      if ((int)v42 >= 1)
      {
        v44 = 0;
        do
        {
          if ((int)v37 >= 1)
          {
            v45 = 0;
            v46 = *(_DWORD *)(*a2 + 4 * v44);
            do
            {
              v47 = kaldi::QuantizedMatrixBase<signed char>::Data((uint64_t)(v41 + 12));
              v48 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)(v41 + 12));
              *(float *)(*(_QWORD *)v123 + 4 * (int)v44 * v124 + 4 * v45) = (float)*(char *)(v47
                                                                                             + v46 * (uint64_t)v48
                                                                                             + v45)
                                                                            / v41[15];
              ++v45;
            }
            while (v37 != v45);
          }
          ++v44;
        }
        while (v44 != v43);
      }
      v22 = (uint64_t)v120;
      kaldi::nnet1::QuantizedAffineTransform<signed char>::SetLinearity(v120, (uint64_t)v123);
      memset(&v125, 0, sizeof(v125));
      kaldi::Vector<float>::Resize((void **)&v125.__r_.__value_.__l.__data_, v118, 0);
      if ((int)v118 >= 1)
      {
        v49 = 0;
        v50 = *a2;
        v51 = *((_QWORD *)v41 + 13);
        v52 = v125.__r_.__value_.__r.__words[0];
        do
        {
          *(_DWORD *)(v52 + 4 * v49) = *(_DWORD *)(v51 + 4 * *(int *)(v50 + 4 * v49));
          ++v49;
        }
        while (v43 != v49);
      }
LABEL_31:
      kaldi::CuVectorBase<float>::CopyFromVec<float>((void *)(v22 + 96), (uint64_t)&v125);
      kaldi::Vector<float>::Destroy((uint64_t)&v125);
LABEL_67:
      kaldi::Matrix<float>::~Matrix((uint64_t)v123);
      kaldi::nnet1::Nnet::AppendComponent(v10, (kaldi::nnet1::Component *)v22);
      if (v122 == 513)
      {
        v110 = a2;
        v109 = *a2;
        v108 = v110[1];
        v111 = operator new();
        v112 = (unint64_t)(v108 - v109) >> 2;
        *(_DWORD *)(v111 + 8) = v112;
        *(_DWORD *)(v111 + 12) = v112;
        *(_WORD *)(v111 + 16) = 0;
        *(_QWORD *)(v111 + 32) = 0;
        *(_QWORD *)(v111 + 40) = 0;
        *(_QWORD *)(v111 + 24) = 0;
        *(_QWORD *)v111 = &off_1E5D32260;
        kaldi::nnet1::Nnet::AppendComponent(v10, (kaldi::nnet1::Component *)v111);
      }
      return;
  }
}

void sub_1AD762050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, kaldi::nnet1::Nnet **a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  kaldi::Vector<float>::Destroy(v5 - 112);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100](a4, 0);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ShortlistNnetBuilder::ConstructNnet(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X2>, kaldi::nnet1::Nnet **a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  kaldi::nnet1::Nnet *v10;
  kaldi::nnet1::Component *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;

  v8 = kaldi::MatrixBase<float>::NumCols(a1);
  v9 = kaldi::MatrixBase<float>::NumRows(a1);
  v10 = (kaldi::nnet1::Nnet *)operator new();
  kaldi::nnet1::Nnet::Nnet(v10);
  *a4 = v10;
  v11 = (kaldi::nnet1::Component *)operator new();
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::LinearTransform(v11, v8, v9);
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::SetLinearity((uint64_t)v11, a1);
  kaldi::nnet1::Nnet::AppendComponent(v10, v11);
  if (a2)
  {
    v14 = a3;
    v12 = *a3;
    v13 = v14[1];
    v15 = operator new();
    v16 = (unint64_t)(v13 - v12) >> 2;
    *(_DWORD *)(v15 + 8) = v16;
    *(_DWORD *)(v15 + 12) = v16;
    *(_WORD *)(v15 + 16) = 0;
    *(_QWORD *)(v15 + 32) = 0;
    *(_QWORD *)(v15 + 40) = 0;
    *(_QWORD *)(v15 + 24) = 0;
    *(_QWORD *)v15 = &off_1E5D32260;
    kaldi::nnet1::Nnet::AppendComponent(v10, (kaldi::nnet1::Component *)v15);
  }
}

void sub_1AD76227C(_Unwind_Exception *a1)
{
  kaldi::nnet1::Nnet **v1;

  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::QuantizedAffineTransform<signed char>::SetLinearity(kaldi::quasar::Vocab *a1, uint64_t a2)
{
  kaldi::MatrixBase<float>::NumRows(a2);
  a1 = (kaldi::quasar::Vocab *)((char *)a1 + 48);
  kaldi::quasar::Vocab::VocabSize(a1);
  kaldi::MatrixBase<float>::NumCols(a2);
  kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a1);
  kaldi::QuantizedMatrixBase<signed char>::CopyFromMat((uint64_t)a1, a2);
}

uint64_t kaldi::nnet1::QuantizedAffineTransform<signed char>::QuantizedAffineTransform(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &unk_1E5D302B8;
  kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(a1 + 48, a3, a2);
  *(_QWORD *)(a1 + 96) = &unk_1E5D341C8;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  kaldi::CuVector<float>::Resize(a1 + 96, a3, 0);
  return a1;
}

void sub_1AD7623AC(_Unwind_Exception *a1)
{
  kaldi::nnet1::Component *v1;
  uint64_t v2;

  kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v2);
  kaldi::nnet1::Component::~Component(v1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::QuantizedAffineTransform<signed char>::~QuantizedAffineTransform(kaldi::nnet1::Component *a1)
{
  kaldi::nnet1::QuantizedAffineTransform<signed char>::~QuantizedAffineTransform(a1);
  JUMPOUT(0x1AF44D190);
}

{
  *(_QWORD *)a1 = &unk_1E5D302B8;
  *((_QWORD *)a1 + 12) = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)a1 + 96);
  kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase((uint64_t)a1 + 48);
  kaldi::nnet1::Component::~Component(a1);
}

uint64_t kaldi::nnet1::QuantizedAffineTransform<signed char>::Copy(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v2 = off_1E5D32508;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *(_WORD *)(a1 + 16);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3);
  *(_QWORD *)v2 = &unk_1E5D302B8;
  kaldi::QuantizedMatrixBase<signed char>::QuantizedMatrixBase((int *)(v2 + 48), (int *)(a1 + 48));
  *(_QWORD *)(v2 + 96) = &unk_1E5D341C8;
  *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 120) = *(_QWORD *)(a1 + 120);
  kaldi::CuVector<float>::Resize(v2 + 96, *(unsigned int *)(a1 + 112), 1);
  kaldi::CuVectorBase<float>::CopyFromVec((_QWORD *)(v2 + 96), a1 + 96);
  return v2;
}

void sub_1AD7624CC(_Unwind_Exception *a1)
{
  kaldi::nnet1::Component *v1;

  kaldi::nnet1::Component::~Component(v1);
  MEMORY[0x1AF44D190](v1, 0x10D1C40B6DC7CF1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::QuantizedAffineTransform<signed char>::GetType()
{
  return 1033;
}

uint64_t kaldi::nnet1::Component::IsUpdatable(kaldi::nnet1::Component *this)
{
  return 0;
}

void kaldi::nnet1::Component::CountZeroCorr(kaldi::nnet1::Component *this, int *a2, int *a3)
{
  *a2 = 0;
  *a3 = 0;
}

void kaldi::nnet1::Component::VectorizeWeightsCorrs(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  kaldi::nnet1::Component *v4;
  std::string *v5;
  std::string::size_type size;
  _QWORD *v7;
  std::string v8;
  _QWORD v9[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"VectorizeWeightsCorrs", 21);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" is not implemented for ", 24);
  v4 = (kaldi::nnet1::Component *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  kaldi::nnet1::Component::TypeToMarker(v4, &v8);
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v8;
  else
    v5 = (std::string *)v8.__r_.__value_.__r.__words[0];
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
  else
    size = v8.__r_.__value_.__l.__size_;
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v5, size);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, " component.");
  std::string::~string(&v8);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
}

uint64_t kaldi::nnet1::Component::OutputRowCount(kaldi::nnet1::Component *this, uint64_t a2)
{
  return a2;
}

void kaldi::nnet1::QuantizedAffineTransform<signed char>::Info(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  void **v6;
  std::string::size_type v7;
  std::string *v8;
  void *__p[2];
  unsigned __int8 v10;
  std::string v11;
  std::string v12;

  std::string::basic_string[abi:ne180100]<0>(&v11, "\n  linearity is quantized");
  v4 = std::string::append(&v11, "\n  bias");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>(a1 + 96);
  if ((v10 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v10 & 0x80u) == 0)
    v7 = v10;
  else
    v7 = (std::string::size_type)__p[1];
  v8 = std::string::append(&v12, (const std::string::value_type *)v6, v7);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((char)v10 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1AD7626D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

_QWORD *kaldi::nnet1::Component::InfoGradient@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

_QWORD *kaldi::nnet1::Component::InfoPropagate@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

_QWORD *kaldi::nnet1::Component::InfoBackPropagate@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

void kaldi::nnet1::QuantizedAffineTransform<signed char>::WriteData(uint64_t a1, _QWORD *a2, int a3, int a4)
{
  kaldi::QuantizedMatrix<signed char>::Write((int *)(a1 + 48), a2, a3, a4);
  kaldi::CuVectorBase<float>::Write(a1 + 96, a2, a3);
}

uint64_t *kaldi::nnet1::QuantizedAffineTransform<signed char>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  LODWORD(a4) = 1.0;
  kaldi::CuMatrixBase<float>::AddMatMat<signed char>(a3, a2, 111, (kaldi::quasar::Vocab *)(a1 + 48), 112, a4, 0.0);
  return kaldi::CuMatrixBase<float>::AddVecToRows(a3, a1 + 96, 1.0, 1.0);
}

void kaldi::nnet1::Component::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  void *v10;
  __int128 v11;
  __int128 v12;

  v3 = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 8);
  v10 = &unk_1E5D29D40;
  *(_QWORD *)&v11 = v4;
  *((_QWORD *)&v11 + 1) = v3 | 0x100000000;
  LODWORD(v12) = v3;
  DWORD1(v12) = v3;
  *((_QWORD *)&v12 + 1) = *(_QWORD *)(a2 + 24);
  v5 = *(_DWORD *)(a3 + 16);
  v6 = *(_QWORD *)(a3 + 8);
  v7 = &unk_1E5D29D40;
  *(_QWORD *)&v8 = v6;
  *((_QWORD *)&v8 + 1) = v5 | 0x100000000;
  LODWORD(v9) = v5;
  DWORD1(v9) = v5;
  *((_QWORD *)&v9 + 1) = *(_QWORD *)(a3 + 24);
  (*(void (**)(uint64_t, void **, void **, _QWORD))(*(_QWORD *)a1 + 112))(a1, &v10, &v7, 0);
  v7 = &unk_1E5D29D40;
  v8 = 0u;
  v9 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v7);
  v10 = &unk_1E5D29D40;
  v11 = 0u;
  v12 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v10);
}

void sub_1AD7628A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;

  v17 = v14;
  *v16 = 0u;
  v16[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  a14 = v15;
  *v17 = 0u;
  v17[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a14);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::QuantizedAffineTransform<signed char>::BackpropagateFnc()
{
  _QWORD *v0;
  _QWORD v1[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"BackpropagateFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

char *kaldi::nnet1::Component::SetWorkspace(uint64_t a1, uint64_t a2)
{
  char *result;

  result = (char *)(a1 + 24);
  if (result != (char *)a2)
    return std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  return result;
}

void kaldi::nnet1::QuantizedAffineTransform<signed char>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v8;
  _BYTE v9[16];

  kaldi::CuVectorBase<float>::Set(a4, *(float *)(*(_QWORD *)(a1 + 104) + 4 * a3));
  kaldi::QuantizedMatrixBase<signed char>::Row(a1 + 48, a3, (uint64_t)v9);
  LODWORD(v8) = 1.0;
  kaldi::CuVectorBase<float>::AddMatVec<signed char>(a4, a2, 111, (uint64_t)v9, v8, 1.0);
}

float kaldi::nnet1::QuantizedAffineTransform<signed char>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3)
{
  float v4;
  _BYTE v6[16];

  v4 = *(float *)(*(_QWORD *)(a1 + 104) + 4 * a3);
  kaldi::QuantizedMatrixBase<signed char>::Row(a1 + 48, a3, (uint64_t)v6);
  return v4 + kaldi::VecVec<float,signed char>(a2, (uint64_t)v6);
}

double kaldi::nnet1::QuantizedAffineTransform<signed char>::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  kaldi::QuantizedMatrix<signed char>::Read((float *)(a1 + 48), a2, a3, a4);
  return kaldi::CuVector<float>::Read(a1 + 96, a2, a3);
}

_QWORD *std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1AD762B04(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

void kaldi::nnet1::MomentStatistics<float>(uint64_t a1)
{
  uint64_t v2;
  void *v3[3];

  v2 = *(unsigned int *)(a1 + 16);
  memset(v3, 0, sizeof(v3));
  kaldi::Vector<float>::Resize(v3, v2, 0);
  kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)a1, (uint64_t)v3);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)v3);
  kaldi::Vector<float>::Destroy((uint64_t)v3);
}

{
  float v2;
  float v3;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD v11[11];
  char v12;
  uint64_t v13;
  float *v14[3];
  void *v15;
  uint64_t v16;
  uint64_t v17;

  v15 = 0;
  v16 = 0;
  v17 = 0;
  kaldi::Vector<float>::Resize(&v15, *(unsigned int *)(a1 + 8), 1);
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v15, (const void **)a1);
  memset(v14, 0, sizeof(v14));
  kaldi::Vector<float>::Resize((void **)v14, *(unsigned int *)(a1 + 8), 1);
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)v14, (const void **)a1);
  v2 = kaldi::VectorBase<float>::Sum(a1);
  kaldi::VectorBase<float>::Add((uint64_t)&v15, -(float)(v2 / (float)*(int *)(a1 + 8)));
  kaldi::Vector<float>::Resize((void **)v14, v16, 1);
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)v14, (const void **)&v15);
  kaldi::VectorBase<float>::MulElements((uint64_t)&v15, v14);
  v3 = kaldi::VectorBase<float>::Sum((uint64_t)&v15);
  v4 = *(_DWORD *)(a1 + 8);
  kaldi::VectorBase<float>::MulElements((uint64_t)&v15, v14);
  kaldi::VectorBase<float>::Sum((uint64_t)&v15);
  pow((float)(v3 / (float)v4), 1.5);
  kaldi::VectorBase<float>::MulElements((uint64_t)&v15, v14);
  kaldi::VectorBase<float>::Sum((uint64_t)&v15);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"(min ", 7);
  kaldi::VectorBase<float>::Min((uint64_t *)a1);
  v5 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", max ", 6);
  kaldi::VectorBase<float>::Max((uint64_t *)a1);
  v6 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", mean ", 7);
  v7 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", variance ", 11);
  v8 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", skewness ", 11);
  v9 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", kurtosis ", 11);
  v10 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") ", 3);
  std::stringbuf::str();
  v11[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v11[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v12 < 0)
    operator delete((void *)v11[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF44D094](&v13);
  kaldi::Vector<float>::Destroy((uint64_t)v14);
  kaldi::Vector<float>::Destroy((uint64_t)&v15);
}

{
  int v2;
  int v3;
  void *v4[3];

  v2 = kaldi::MatrixBase<float>::NumRows(a1);
  v3 = kaldi::MatrixBase<float>::NumCols(a1);
  memset(v4, 0, sizeof(v4));
  kaldi::Vector<float>::Resize(v4, (v3 * v2), 0);
  kaldi::VectorBase<float>::CopyRowsFromMat(v4, a1);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)v4);
  kaldi::Vector<float>::Destroy((uint64_t)v4);
}

void sub_1AD762BF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1AD762EC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::Vector<float>::Destroy(v1 - 144);
  kaldi::Vector<float>::Destroy(v1 - 120);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x1E0DE4FE0] + 64;
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1AD762FD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1AF44D094](v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF44D094](a1 + 112);
  return a1;
}

void kaldi::CuSubMatrix<float>::~CuSubMatrix(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E5D29D40;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

{
  *(_QWORD *)a1 = &unk_1E5D29D40;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
  JUMPOUT(0x1AF44D190);
}

void kaldi::CuSubMatrix<float>::Read()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Function not implemented for this class");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

char *std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void kaldi::nnet1::QuantizedAffineTransform<short>::SetLinearity(kaldi::quasar::Vocab *a1, uint64_t a2)
{
  kaldi::MatrixBase<float>::NumRows(a2);
  a1 = (kaldi::quasar::Vocab *)((char *)a1 + 48);
  kaldi::quasar::Vocab::VocabSize(a1);
  kaldi::MatrixBase<float>::NumCols(a2);
  kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a1);
  kaldi::QuantizedMatrixBase<short>::CopyFromMat((uint64_t)a1, a2);
}

uint64_t kaldi::nnet1::QuantizedAffineTransform<short>::QuantizedAffineTransform(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &unk_1E5D30378;
  kaldi::QuantizedMatrix<short>::QuantizedMatrix(a1 + 48, a3, a2);
  *(_QWORD *)(a1 + 96) = &unk_1E5D341C8;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  kaldi::CuVector<float>::Resize(a1 + 96, a3, 0);
  return a1;
}

void sub_1AD7632F8(_Unwind_Exception *a1)
{
  kaldi::nnet1::Component *v1;
  uint64_t v2;

  kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v2);
  kaldi::nnet1::Component::~Component(v1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::QuantizedAffineTransform<short>::~QuantizedAffineTransform(kaldi::nnet1::Component *a1)
{
  kaldi::nnet1::QuantizedAffineTransform<short>::~QuantizedAffineTransform(a1);
  JUMPOUT(0x1AF44D190);
}

{
  *(_QWORD *)a1 = &unk_1E5D30378;
  *((_QWORD *)a1 + 12) = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)a1 + 96);
  kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase((uint64_t)a1 + 48);
  kaldi::nnet1::Component::~Component(a1);
}

uint64_t kaldi::nnet1::QuantizedAffineTransform<short>::Copy(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v2 = off_1E5D32508;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *(_WORD *)(a1 + 16);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3);
  *(_QWORD *)v2 = &unk_1E5D30378;
  kaldi::QuantizedMatrixBase<short>::QuantizedMatrixBase(v2 + 48, (int *)(a1 + 48));
  *(_QWORD *)(v2 + 96) = &unk_1E5D341C8;
  *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 120) = *(_QWORD *)(a1 + 120);
  kaldi::CuVector<float>::Resize(v2 + 96, *(unsigned int *)(a1 + 112), 1);
  kaldi::CuVectorBase<float>::CopyFromVec((_QWORD *)(v2 + 96), a1 + 96);
  return v2;
}

void sub_1AD763418(_Unwind_Exception *a1)
{
  kaldi::nnet1::Component *v1;

  kaldi::nnet1::Component::~Component(v1);
  MEMORY[0x1AF44D190](v1, 0x10D1C40B6DC7CF1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::QuantizedAffineTransform<short>::GetType()
{
  return 1035;
}

void kaldi::nnet1::QuantizedAffineTransform<short>::Info(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  void **v6;
  std::string::size_type v7;
  std::string *v8;
  void *__p[2];
  unsigned __int8 v10;
  std::string v11;
  std::string v12;

  std::string::basic_string[abi:ne180100]<0>(&v11, "\n  linearity is quantized");
  v4 = std::string::append(&v11, "\n  bias");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>(a1 + 96);
  if ((v10 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v10 & 0x80u) == 0)
    v7 = v10;
  else
    v7 = (std::string::size_type)__p[1];
  v8 = std::string::append(&v12, (const std::string::value_type *)v6, v7);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((char)v10 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1AD76353C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::QuantizedAffineTransform<short>::WriteData(uint64_t a1, _QWORD *a2, int a3, int a4)
{
  kaldi::QuantizedMatrix<short>::Write((int *)(a1 + 48), a2, a3, a4);
  kaldi::CuVectorBase<float>::Write(a1 + 96, a2, a3);
}

uint64_t *kaldi::nnet1::QuantizedAffineTransform<short>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  LODWORD(a4) = 1.0;
  kaldi::CuMatrixBase<float>::AddMatMat<short>(a3, a2, 111, (kaldi::quasar::Vocab *)(a1 + 48), 112, a4, 0.0);
  return kaldi::CuMatrixBase<float>::AddVecToRows(a3, a1 + 96, 1.0, 1.0);
}

void kaldi::nnet1::QuantizedAffineTransform<short>::BackpropagateFnc()
{
  _QWORD *v0;
  _QWORD v1[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"BackpropagateFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void kaldi::nnet1::QuantizedAffineTransform<short>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v8;
  _BYTE v9[16];

  kaldi::CuVectorBase<float>::Set(a4, *(float *)(*(_QWORD *)(a1 + 104) + 4 * a3));
  kaldi::QuantizedMatrixBase<short>::Row(a1 + 48, a3, (uint64_t)v9);
  LODWORD(v8) = 1.0;
  kaldi::CuVectorBase<float>::AddMatVec<short>(a4, a2, 111, (uint64_t)v9, v8, 1.0);
}

float kaldi::nnet1::QuantizedAffineTransform<short>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3)
{
  float v4;
  _BYTE v6[16];

  v4 = *(float *)(*(_QWORD *)(a1 + 104) + 4 * a3);
  kaldi::QuantizedMatrixBase<short>::Row(a1 + 48, a3, (uint64_t)v6);
  return v4 + kaldi::VecVec<float,short>(a2, (uint64_t)v6);
}

double kaldi::nnet1::QuantizedAffineTransform<short>::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  kaldi::QuantizedMatrix<short>::Read((float *)(a1 + 48), a2, a3, a4);
  return kaldi::CuVector<float>::Read(a1 + 96, a2, a3);
}

int *kaldi::nnet1::AffineTransform::SetLinearity(kaldi::nnet1::AffineTransform *a1, int *a2)
{
  uint64_t v4;

  kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
  kaldi::nnet1::AffineTransform::Linearity(a1);
  kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
  kaldi::nnet1::AffineTransform::Linearity(a1);
  v4 = kaldi::nnet1::AffineTransform::Linearity(a1);
  return kaldi::CuMatrixBase<float>::CopyFromMat(v4, a2, 111);
}

kaldi::nnet1::AffineTransform *kaldi::nnet1::AffineTransform::AffineTransform(kaldi::nnet1::AffineTransform *this, uint64_t a2, uint64_t a3)
{
  int32x2_t *v6;
  _QWORD *v7;

  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = &off_1E5D2D150;
  *(_OWORD *)((char *)this + 56) = xmmword_1AE13F660;
  *((_DWORD *)this + 18) = -1082130432;
  *(_QWORD *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 42) = 0;
  *((_BYTE *)this + 86) = 0;
  *((_QWORD *)this + 11) = &unk_1E5D2C890;
  *((_QWORD *)this + 12) = &unk_1E5D2C8B8;
  *((_QWORD *)this + 13) = &unk_1E5D2C8E0;
  *(_QWORD *)this = &off_1E5D2C750;
  v6 = (int32x2_t *)operator new();
  kaldi::CuMatrix<float>::CuMatrix(v6, a3, a2, 0, 0, 0);
  *((_QWORD *)this + 14) = v6;
  v7 = (_QWORD *)operator new();
  *v7 = &unk_1E5D341C8;
  v7[1] = 0;
  v7[2] = 0;
  v7[3] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v7, a3, 0);
  *((_QWORD *)this + 15) = v7;
  *((_BYTE *)this + 128) = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_BYTE *)this + 232) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)((char *)this + 236) = _D1;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *(_OWORD *)((char *)this + 244) = 0u;
  *(_OWORD *)((char *)this + 260) = 0u;
  *(_OWORD *)((char *)this + 276) = 0u;
  *((_QWORD *)this + 38) = &unk_1E5D34170;
  *((_BYTE *)this + 344) = 0;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  return this;
}

void sub_1AD7639A4(_Unwind_Exception *a1)
{
  kaldi::nnet1::UpdatableComponent *v1;
  quasar::Bitmap *v2;
  quasar::Bitmap *v3;
  quasar::Bitmap *v4;
  uint64_t v5;
  uint64_t v7;

  MEMORY[0x1AF44D190](v5, 0x1081C4072235B19);
  v7 = *((_QWORD *)v1 + 14);
  *((_QWORD *)v1 + 14) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  quasar::Bitmap::~Bitmap(v4);
  quasar::Bitmap::~Bitmap(v3);
  quasar::Bitmap::~Bitmap(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

void std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 48;
      v7 = v4 - 48;
      do
      {
        v8 = *(_QWORD *)v7;
        v7 -= 48;
        (*(void (**)(char *))(v8 + 16))(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 32;
      v7 = v4 - 32;
      do
      {
        v8 = *(_QWORD *)v7;
        v7 -= 32;
        (*(void (**)(char *))(v8 + 8))(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t kaldi::nnet1::AffineTransform::Linearity(kaldi::nnet1::AffineTransform *this)
{
  uint64_t result;
  _QWORD v2[34];

  result = *((_QWORD *)this + 14);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "linearity_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::AffineTransform::Bias(kaldi::nnet1::AffineTransform *this)
{
  uint64_t result;
  _QWORD v2[34];

  result = *((_QWORD *)this + 15);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "bias_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

kaldi::nnet1::Nnet *kaldi::nnet1::Nnet::Nnet(kaldi::nnet1::Nnet *this)
{
  uint64_t v2;

  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  v2 = operator new();
  *(_QWORD *)v2 = &off_1E5D2D150;
  *(_OWORD *)(v2 + 8) = xmmword_1AE13F660;
  *(_DWORD *)(v2 + 24) = -1082130432;
  *(_QWORD *)(v2 + 28) = 0x100000003;
  *(_WORD *)(v2 + 36) = 0;
  *(_BYTE *)(v2 + 38) = 0;
  *((_QWORD *)this + 18) = v2;
  *((_QWORD *)this + 24) = &unk_1E5D341C8;
  *((_WORD *)this + 76) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 28) = &unk_1E5D341C8;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  kaldi::nnet1::NnetCorrPacker::NnetCorrPacker((kaldi::nnet1::Nnet *)((char *)this + 304));
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  kaldi::nnet1::Nnet::ResetBuffersAndStates(this);
  return this;
}

void sub_1AD763D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  _QWORD *v12;
  _QWORD *v13;
  void **v14;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  v14 = v11;
  v16 = *v14;
  if (*v14)
  {
    *(_QWORD *)(v10 + 360) = v16;
    operator delete(v16);
  }
  kaldi::nnet1::Nnet::Nnet((_QWORD *)v10);
  v17 = *(void **)(v10 + 280);
  if (v17)
  {
    *(_QWORD *)(v10 + 288) = v17;
    operator delete(v17);
  }
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  kaldi::CuVector<float>::~CuVector(v13);
  kaldi::CuVector<float>::~CuVector(v12);
  v18 = *(void **)(v10 + 168);
  if (v18)
    operator delete(v18);
  a10 = (void **)(v10 + 120);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 + 72);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v19 = *(void **)(v10 + 48);
  if (v19)
  {
    *(_QWORD *)(v10 + 56) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(v10 + 24);
  if (v20)
  {
    *(_QWORD *)(v10 + 32) = v20;
    operator delete(v20);
  }
  v21 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(a1);
}

void std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

kaldi::nnet1::Nnet *std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100](kaldi::nnet1::Nnet **a1, kaldi::nnet1::Nnet *a2)
{
  kaldi::nnet1::Nnet *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    kaldi::nnet1::Nnet::~Nnet(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

void sub_1AD76400C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  void *v23;
  void *v24;

  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&a23);

  _Unwind_Resume(a1);
}

void sub_1AD7641D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1AD764320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

quasar::SystemConfig *quasar::SystemConfig::SystemConfig(quasar::SystemConfig *this)
{
  *(_QWORD *)this = off_1E5D34DA8;
  quasar::SystemConfig::SystemConfigInfo::SystemConfigInfo((quasar::SystemConfig *)((char *)this + 8));
  *((_QWORD *)this + 104) = 0;
  *((_OWORD *)this + 51) = 0u;
  _ZNSt3__115allocate_sharedB8ne180100IN6quasar11ModelLoaderENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((_QWORD *)this + 105);
  *((_QWORD *)this + 121) = 0;
  *((_QWORD *)this + 120) = 0;
  *(_OWORD *)((char *)this + 856) = 0u;
  *(_OWORD *)((char *)this + 872) = 0u;
  *(_OWORD *)((char *)this + 888) = 0u;
  *(_OWORD *)((char *)this + 904) = 0u;
  *(_OWORD *)((char *)this + 920) = 0u;
  *(_OWORD *)((char *)this + 936) = 0u;
  *((_QWORD *)this + 119) = (char *)this + 960;
  *((_QWORD *)this + 124) = 0;
  *((_QWORD *)this + 123) = 0;
  *((_QWORD *)this + 122) = (char *)this + 984;
  *((_QWORD *)this + 127) = 0;
  *((_QWORD *)this + 126) = 0;
  *((_QWORD *)this + 125) = (char *)this + 1008;
  *((_QWORD *)this + 139) = 0;
  *((_QWORD *)this + 138) = 0;
  *((_QWORD *)this + 136) = 0;
  *((_OWORD *)this + 67) = 0u;
  *((_OWORD *)this + 66) = 0u;
  *((_OWORD *)this + 65) = 0u;
  *((_OWORD *)this + 64) = 0u;
  *((_QWORD *)this + 137) = (char *)this + 1104;
  *((_QWORD *)this + 142) = 0;
  *((_QWORD *)this + 141) = 0;
  *((_QWORD *)this + 140) = (char *)this + 1128;
  *((_QWORD *)this + 144) = 0;
  *((_QWORD *)this + 145) = 0;
  *((_QWORD *)this + 143) = (char *)this + 1152;
  *((_QWORD *)this + 148) = 0;
  *((_QWORD *)this + 149) = 0;
  *((_QWORD *)this + 147) = (char *)this + 1184;
  *((_QWORD *)this + 151) = 0;
  *((_QWORD *)this + 152) = 0;
  *((_QWORD *)this + 150) = (char *)this + 1208;
  *((_QWORD *)this + 155) = 0;
  *((_QWORD *)this + 154) = 0;
  *((_QWORD *)this + 153) = (char *)this + 1232;
  *((_QWORD *)this + 158) = 0;
  *((_QWORD *)this + 157) = 0;
  *((_QWORD *)this + 156) = (char *)this + 1256;
  *((_QWORD *)this + 161) = 0;
  *((_QWORD *)this + 160) = 0;
  *((_QWORD *)this + 159) = (char *)this + 1280;
  *((_QWORD *)this + 164) = 0;
  *((_QWORD *)this + 163) = 0;
  *((_QWORD *)this + 162) = (char *)this + 1304;
  *((_QWORD *)this + 167) = 0;
  *((_QWORD *)this + 166) = 0;
  *((_QWORD *)this + 165) = (char *)this + 1328;
  *((_QWORD *)this + 170) = 0;
  *((_QWORD *)this + 169) = 0;
  *((_QWORD *)this + 168) = (char *)this + 1352;
  *((_QWORD *)this + 173) = 0;
  *((_QWORD *)this + 172) = 0;
  *((_QWORD *)this + 171) = (char *)this + 1376;
  *((_QWORD *)this + 176) = 0;
  *((_QWORD *)this + 175) = 0;
  *((_QWORD *)this + 174) = (char *)this + 1400;
  *((_QWORD *)this + 179) = 0;
  *((_QWORD *)this + 178) = 0;
  *((_QWORD *)this + 177) = (char *)this + 1424;
  *((_QWORD *)this + 182) = 0;
  *((_QWORD *)this + 181) = 0;
  *((_QWORD *)this + 180) = (char *)this + 1448;
  *((_QWORD *)this + 185) = 0;
  *((_QWORD *)this + 184) = 0;
  *((_QWORD *)this + 183) = (char *)this + 1472;
  *((_QWORD *)this + 188) = 0;
  *((_QWORD *)this + 187) = 0;
  *((_QWORD *)this + 186) = (char *)this + 1496;
  *((_QWORD *)this + 191) = 0;
  *((_QWORD *)this + 190) = 0;
  *((_QWORD *)this + 189) = (char *)this + 1520;
  *((_DWORD *)this + 384) = 0;
  return this;
}

void sub_1AD764590(_Unwind_Exception *a1)
{
  char *v1;
  quasar::SystemConfig::SystemConfigInfo *v2;
  void **v3;

  if (v1[839] < 0)
    operator delete(*v3);
  quasar::SystemConfig::SystemConfigInfo::~SystemConfigInfo(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v1);
  _Unwind_Resume(a1);
}

quasar::SystemConfig::SystemConfigInfo *quasar::SystemConfig::SystemConfigInfo::SystemConfigInfo(quasar::SystemConfig::SystemConfigInfo *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  quasar::SystemConfig::Version::Version((_DWORD *)this + 6, 0, 0);
  quasar::filesystem::Path::Path((_QWORD *)this + 4);
  quasar::PTree::PTree((quasar::SystemConfig::SystemConfigInfo *)((char *)this + 64));
  *((_QWORD *)this + 23) = 0;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_QWORD *)this + 22) = (char *)this + 184;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = (char *)this + 208;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = (char *)this + 232;
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 42) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = (char *)this + 328;
  *((_QWORD *)this + 43) = (char *)this + 352;
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = (char *)this + 376;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 53) = (char *)this + 432;
  *((_QWORD *)this + 62) = 0;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_DWORD *)this + 126) = 1065353216;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_DWORD *)this + 136) = 1065353216;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *((_DWORD *)this + 146) = 1065353216;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 38) = 0u;
  *((_DWORD *)this + 156) = 1065353216;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *((_DWORD *)this + 166) = 1065353216;
  *((_QWORD *)this + 86) = 0;
  *((_QWORD *)this + 85) = 0;
  *((_QWORD *)this + 84) = (char *)this + 680;
  *((_QWORD *)this + 89) = 0;
  *((_QWORD *)this + 88) = 0;
  *((_QWORD *)this + 87) = (char *)this + 704;
  *((_DWORD *)this + 180) = 0;
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *((_DWORD *)this + 190) = 1065353216;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 49) = 0u;
  *((_DWORD *)this + 200) = 1065353216;
  return this;
}

void sub_1AD7646FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = &unk_1E5D343A0;
  if (*(char *)(v1 + 63) < 0)
    operator delete(*(void **)(v1 + 40));
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void quasar::filesystem::Path::~Path(void **this)
{
  *this = &unk_1E5D343A0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = &unk_1E5D343A0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1AF44D190);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN6quasar11ModelLoaderENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x288uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN6quasar11ModelLoaderENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD764804(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN6quasar11ModelLoaderENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D42528;
  a1[1] = 0;
  quasar::ModelLoader::ModelLoader((quasar::ModelLoader *)(a1 + 3));
  return a1;
}

void sub_1AD764850(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::ModelLoader>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42528;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::ModelLoader>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42528;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::ModelLoader>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void quasar::SystemConfig::SystemConfigInfo::~SystemConfigInfo(quasar::SystemConfig::SystemConfigInfo *this)
{
  void **v2;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 768);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 728);
  std::__tree<std::string>::destroy((uint64_t)this + 696, *((char **)this + 88));
  std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::destroy((uint64_t)this + 672, *((_QWORD **)this + 85));
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::~__hash_table((uint64_t)this + 632);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 592);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::~__hash_table((uint64_t)this + 552);
  std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::~__hash_table((uint64_t)this + 512);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::~__hash_table((uint64_t)this + 472);
  v2 = (void **)((char *)this + 448);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::string>::destroy((uint64_t)this + 424, *((char **)this + 54));
  if (*((char *)this + 423) < 0)
    operator delete(*((void **)this + 50));
  quasar::SpeechModelInfo::~SpeechModelInfo((quasar::SystemConfig::SystemConfigInfo *)((char *)this + 128));
  quasar::PTree::~PTree((quasar::SystemConfig::SystemConfigInfo *)((char *)this + 64));
  *((_QWORD *)this + 4) = &unk_1E5D343A0;
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(int a1, void **__p)
{
  void **v2;
  void **v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_set<std::string>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_set<std::string>>,0>(uint64_t a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,quasar::TranslationPairSetting>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,quasar::TranslationPairSetting>>,0>(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::TranslationPairSetting>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::TranslationPairSetting>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::pair<std::string,std::string>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::pair<std::string,std::string>>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void std::__tree<std::string>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::string>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::string>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void quasar::SpeechModelInfo::~SpeechModelInfo(quasar::SpeechModelInfo *this)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 240, *((_QWORD **)this + 31));
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)this + 216, *((_QWORD **)this + 28));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 192, *((_QWORD **)this + 25));
  if (*((char *)this + 191) < 0)
    operator delete(*((void **)this + 21));
  if (*((char *)this + 167) < 0)
    operator delete(*((void **)this + 18));
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  std::__tree<std::string>::destroy((uint64_t)this + 96, *((char **)this + 13));
  std::__tree<std::string>::destroy((uint64_t)this + 72, *((char **)this + 10));
  std::__tree<int>::destroy((uint64_t)this + 48, *((_QWORD **)this + 7));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<int>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<int>::destroy(a1, *a2);
    std::__tree<int>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t **std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<int,std::map<std::string,double>>,std::__tree_node<std::__value_type<int,std::map<std::string,double>>,void *> *,long>>(uint64_t **result, uint64_t *a2, uint64_t *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          *((_DWORD *)v8 + 8) = *((_DWORD *)v9 + 8);
          if (v8 != v9)
          {
            std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,double>,std::__tree_node<std::__value_type<std::string,double>,void *> *,long>>((uint64_t **)v8 + 5, (_QWORD *)v9[5], v9 + 6);
            v8 = v16;
          }
          std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::__node_insert_multi(v5, (uint64_t)v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          v10 = (uint64_t *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = (uint64_t *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (uint64_t *)v9[2];
              v11 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::__emplace_multi<std::pair<int const,std::map<std::string,double>> const&>((uint64_t)v5, (uint64_t)(a2 + 4));
      v12 = (uint64_t *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (uint64_t *)a2[2];
          v11 = *v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1AD765190(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::__node_insert_multi(uint64_t **a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;

  v3 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 32) >= *((_DWORD *)v4 + 8))
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

uint64_t **std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,double>,std::__tree_node<std::__value_type<std::string,double>,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t **leaf_high;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t **v15;
  uint64_t *v16;
  const void **v17;
  uint64_t v18;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = (const void **)v8;
    if (v8)
    {
      v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          v8[7] = v9[7];
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(v5, v18, leaf_high, (uint64_t *)v17);
          v17 = (const void **)v16;
          if (v16)
            v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (_QWORD *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v12 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = (uint64_t *)v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_multi<std::pair<std::string const,double> const&>(v5, (uint64_t)(a2 + 4));
      v13 = (_QWORD *)a2[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)a2[2];
          v12 = *v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1AD765384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *result;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v5 = (_QWORD *)v4;
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32)))
          break;
        v4 = *v5;
        result = v5;
        if (!*v5)
          goto LABEL_9;
      }
      v4 = v5[1];
    }
    while (v4);
    result = v5 + 1;
  }
  else
  {
    result = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

BOOL std::less<std::string>::operator()[abi:ne180100](uint64_t a1, const void **a2, const void **a3)
{
  int v3;
  int v4;
  size_t v5;
  const void *v6;
  size_t v7;
  const void *v8;
  size_t v9;
  int v10;

  v3 = *((char *)a3 + 23);
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  if (v4 >= 0)
    v6 = a2;
  else
    v6 = *a2;
  if (v3 >= 0)
    v7 = *((unsigned __int8 *)a3 + 23);
  else
    v7 = (size_t)a3[1];
  if (v3 >= 0)
    v8 = a3;
  else
    v8 = *a3;
  if (v7 >= v5)
    v9 = v5;
  else
    v9 = v7;
  v10 = memcmp(v6, v8, v9);
  if (v10)
    return v10 < 0;
  else
    return v5 < v7;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

_QWORD *std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  std::__tree<std::string>::destroy(*(_QWORD *)a1, *(char **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = *(_QWORD *)(v3 + 16);
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::string>::destroy(*(_QWORD *)a1, (char *)v2);
  }
  return a1;
}

const void **std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_multi<std::pair<std::string const,double> const&>(uint64_t **a1, uint64_t a2)
{
  uint64_t **leaf_high;
  uint64_t v5;
  const void **v6;

  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__construct_node<std::pair<std::string const,double> const&>((uint64_t)a1, a2, (uint64_t)&v6);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)a1, &v5, v6 + 4);
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v5, leaf_high, (uint64_t *)v6);
  return v6;
}

void sub_1AD765760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

double std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__construct_node<std::pair<std::string const,double> const&>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  double result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  result = *(double *)(a2 + 24);
  *((double *)v6 + 7) = result;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1AD76580C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

void std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::destroy(a1, a2[1]);
    std::__tree<std::string>::destroy((uint64_t)(a2 + 5), (char *)a2[6]);
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::__emplace_multi<std::pair<int const,std::map<std::string,double>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t *v7;

  std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::__construct_node<std::pair<int const,std::map<std::string,double>> const&>(a1, a2, (uint64_t)&v7);
  v3 = (uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (*((_DWORD *)v7 + 8) >= *((_DWORD *)v4 + 8))
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v3, v5, v7);
  return v7;
}

uint64_t *std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::__construct_node<std::pair<int const,std::map<std::string,double>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t *result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *((_DWORD *)v6 + 8) = *(_DWORD *)a2;
  result = std::map<std::string,double>::map[abi:ne180100]((uint64_t *)v6 + 5, (const void ***)(a2 + 8));
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1AD765A00(_Unwind_Exception *a1)
{
  _QWORD *v1;
  char **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,std::map<std::string,double>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,double>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,double>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,double>,std::__tree_node<std::__value_type<std::string,double>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1AD765A58(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,double>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,double>,std::__tree_node<std::__value_type<std::string,double>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,double> const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,double> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__construct_node<std::pair<std::string const,double> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,std::map<std::string,double>>,void *>>>::operator()[abi:ne180100](uint64_t a1, char **a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    std::__tree<std::string>::destroy((uint64_t)(a2 + 5), a2[6]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t **std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,int>,std::__tree_node<std::__value_type<std::string,int>,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t **leaf_high;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t **v15;
  uint64_t *v16;
  const void **v17;
  uint64_t v18;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = (const void **)v8;
    if (v8)
    {
      v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          *((_DWORD *)v8 + 14) = *((_DWORD *)v9 + 14);
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(v5, v18, leaf_high, (uint64_t *)v17);
          v17 = (const void **)v16;
          if (v16)
            v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (_QWORD *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v12 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = (uint64_t *)v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_multi<std::pair<std::string const,int> const&>(v5, (uint64_t)(a2 + 4));
      v13 = (_QWORD *)a2[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)a2[2];
          v12 = *v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1AD765D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

const void **std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_multi<std::pair<std::string const,int> const&>(uint64_t **a1, uint64_t a2)
{
  uint64_t **leaf_high;
  uint64_t v5;
  const void **v6;

  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::pair<std::string const,int> const&>((uint64_t)a1, a2, (uint64_t)&v6);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)a1, &v5, v6 + 4);
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v5, leaf_high, (uint64_t *)v6);
  return v6;
}

void sub_1AD765D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

std::logic_error *quasar::Bitmap::CoordinatesOutOfRange::CoordinatesOutOfRange(std::logic_error *this, double a2, double a3)
{
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  std::string *p_p;
  std::string::size_type size;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string __p;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  std::string v21;

  std::to_string(&v17, a2);
  v5 = std::string::insert(&v17, 0, "Texture coordinates (");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v18, ",");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v11 = std::string::append(&v19, (const std::string::value_type *)p_p, size);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = std::string::append(&v20, ") out of range");
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  std::logic_error::logic_error(this, &v21);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  this->__vftable = (std::logic_error_vtbl *)&off_1E5D3B948;
  return this;
}

void sub_1AD766038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 41) < 0)
    operator delete(*(void **)(v33 - 64));
  if (*(char *)(v33 - 73) < 0)
    operator delete(*(void **)(v33 - 96));
  if (a14 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

std::logic_error *quasar::Bitmap::CoordinatesOutOfRange::CoordinatesOutOfRange(std::logic_error *this, int __val, int a3)
{
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  std::string *p_p;
  std::string::size_type size;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string __p;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  std::string v21;

  std::to_string(&v17, __val);
  v5 = std::string::insert(&v17, 0, "Bitmap coordinates (");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v18, ",");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v11 = std::string::append(&v19, (const std::string::value_type *)p_p, size);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = std::string::append(&v20, ") out of bounds");
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  std::logic_error::logic_error(this, &v21);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  this->__vftable = (std::logic_error_vtbl *)&off_1E5D3B948;
  return this;
}

void sub_1AD76624C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 41) < 0)
    operator delete(*(void **)(v33 - 64));
  if (*(char *)(v33 - 73) < 0)
    operator delete(*(void **)(v33 - 96));
  if (a14 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void quasar::Bitmap::CoordinatesOutOfRange::~CoordinatesOutOfRange(std::logic_error *this)
{
  std::logic_error::~logic_error(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::Bitmap::nearestNeighborSampleAt(quasar::Bitmap *this, quasar::Bitmap *a2, double a3, double a4)
{
  BOOL v6;
  int v8;
  int v9;
  int v10;
  signed int v11;
  uint64_t v12;
  int v13;
  quasar::Bitmap::CoordinatesOutOfRange *exception;

  if (a4 > 1.0 || (a3 >= 0.0 ? (v6 = a3 > 1.0) : (v6 = 1), v6 || a4 < 0.0))
  {
    exception = (quasar::Bitmap::CoordinatesOutOfRange *)__cxa_allocate_exception(0x10uLL);
    quasar::Bitmap::CoordinatesOutOfRange::CoordinatesOutOfRange(exception, a3, a4);
  }
  v8 = (*(uint64_t (**)(quasar::Bitmap *, quasar::Bitmap *))(*(_QWORD *)this + 16))(this, a2);
  v9 = (*(uint64_t (**)(quasar::Bitmap *))(*(_QWORD *)this + 24))(this);
  v10 = vcvtmd_s64_f64((double)v8 * a3);
  v11 = vcvtmd_s64_f64((double)v9 * a4);
  if (v8 - 1 < v10)
    v10 = v8 - 1;
  v12 = v10 & ~(v10 >> 31);
  v13 = v9 - 1;
  if (v9 - 1 >= v11)
    v13 = v11;
  return (*(uint64_t (**)(quasar::Bitmap *, uint64_t, _QWORD))(*(_QWORD *)this + 32))(this, v12, v13 & ~(v13 >> 31));
}

void sub_1AD7663EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::G2WP::G2WP(uint64_t a1, uint64_t *a2, uint64_t *a3, __int128 *a4, quasar::SystemConfig *a5, int a6, uint64_t a7)
{
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  size_t v43;
  void **v44;
  const void *v45;
  uint64_t PtreeOptional;
  BOOL v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  size_t v60;
  __int128 *p_p;
  const void *v62;
  quasar::SentencePieceModule *v63;
  uint64_t Ptree;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  size_t v70;
  void **v71;
  const void *v72;
  quasar::SentencePieceModule *v73;
  void *v75[2];
  char v76;
  void *v77[2];
  uint64_t v78;
  void *v79[2];
  uint64_t v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  void *v85[2];
  char v86;
  _BYTE v87[8];
  _QWORD *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  __int128 __p;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  v14 = a2[1];
  v95 = *a2;
  v96 = (std::__shared_weak_count *)v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v93 = 0;
  v94 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  quasar::QuasarG2PBase::QuasarG2PBase(a1, &v95, &v93, a4, a5, a6, a7, &__p);
  if (SBYTE7(v98) < 0)
    operator delete((void *)__p);
  v17 = v94;
  if (v94)
  {
    p_shared_owners = (unint64_t *)&v94->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v96;
  if (v96)
  {
    v21 = (unint64_t *)&v96->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  *(_QWORD *)a1 = &off_1E5D3B870;
  v23 = (_QWORD *)(a1 + 352);
  v24 = (uint64_t *)(a1 + 368);
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  std::string::basic_string[abi:ne180100]<0>(&__p, "g2wp");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a5, 252, 0, (uint64_t)&__p);
  if (SBYTE7(v98) < 0)
    operator delete((void *)__p);
  v25 = a2[1];
  v91 = *a2;
  v92 = (std::__shared_weak_count *)v25;
  if (v25)
  {
    v26 = (unint64_t *)(v25 + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v28 = a3[1];
  v89 = *a3;
  v90 = (std::__shared_weak_count *)v28;
  if (v28)
  {
    v29 = (unint64_t *)(v28 + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  quasar::QuasarG2PFactory::createQuasarG2P(&v91, &v89, a4, a5, 4, (void **)&__p);
  v31 = __p;
  *(_QWORD *)&__p = 0;
  v32 = *v23;
  *v23 = v31;
  if (v32)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = __p;
    *(_QWORD *)&__p = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  }
  v34 = v90;
  if (v90)
  {
    v35 = (unint64_t *)&v90->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v92;
  if (v92)
  {
    v38 = (unint64_t *)&v92->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v23 + 56))(*v23);
  LODWORD(__p) = 1;
  DWORD1(__p) = v40;
  std::map<quasar::PronType,int>::map[abi:ne180100]((uint64_t)v87, (int *)&__p, 1);
  v41 = operator new();
  v42 = *(_DWORD *)(a1 + 100);
  std::map<quasar::PronType,int>::map[abi:ne180100]((uint64_t *)&__p, (uint64_t)v87);
  *(_DWORD *)v41 = v42;
  std::map<quasar::PronType,int>::map[abi:ne180100]((uint64_t *)(v41 + 8), (uint64_t)&__p);
  std::__tree<int>::destroy((uint64_t)&__p, *((_QWORD **)&__p + 1));
  v85[0] = 0;
  std::unique_ptr<quasar::PronCombinator>::reset[abi:ne180100]((uint64_t *)(a1 + 40), v41);
  std::unique_ptr<quasar::PronCombinator>::reset[abi:ne180100]((uint64_t *)v85, 0);
  if (*(char *)(a7 + 23) >= 0)
    v43 = *(unsigned __int8 *)(a7 + 23);
  else
    v43 = *(_QWORD *)(a7 + 8);
  v44 = v85;
  std::string::basic_string[abi:ne180100]((uint64_t)v85, v43 + 5);
  if (v86 < 0)
    v44 = (void **)v85[0];
  if (v43)
  {
    if (*(char *)(a7 + 23) >= 0)
      v45 = (const void *)a7;
    else
      v45 = *(const void **)a7;
    memmove(v44, v45, v43);
  }
  strcpy((char *)v44 + v43, ".p2wp");
  PtreeOptional = quasar::SystemConfig::getPtreeOptional((uint64_t)a5, (uint64_t)v85);
  v47 = PtreeOptional != 0;
  if (PtreeOptional)
  {
    v48 = a2[1];
    v83 = *a2;
    v84 = (std::__shared_weak_count *)v48;
    if (v48)
    {
      v49 = (unint64_t *)(v48 + 8);
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    v81 = 0;
    v82 = 0;
    quasar::QuasarG2PFactory::createP2WP(&v83, &v81, (uint64_t)a4, (uint64_t)a5, (uint64_t)v85, 4u, (void **)&__p);
    v51 = __p;
    *(_QWORD *)&__p = 0;
    v52 = *(_QWORD *)(a1 + 360);
    *(_QWORD *)(a1 + 360) = v51;
    if (v52)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
      v53 = __p;
      *(_QWORD *)&__p = 0;
      if (v53)
        (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
    }
    v54 = v82;
    if (v82)
    {
      v55 = (unint64_t *)&v82->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    v57 = v84;
    if (v84)
    {
      v58 = (unint64_t *)&v84->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
  }
  if (*(char *)(a7 + 23) >= 0)
    v60 = *(unsigned __int8 *)(a7 + 23);
  else
    v60 = *(_QWORD *)(a7 + 8);
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v60 + 4);
  if (SBYTE7(v98) < 0)
    p_p = (__int128 *)__p;
  if (v60)
  {
    if (*(char *)(a7 + 23) >= 0)
      v62 = (const void *)a7;
    else
      v62 = *(const void **)a7;
    memmove(p_p, v62, v60);
  }
  strcpy((char *)p_p + v60, ".spm");
  if (quasar::SystemConfig::getPtreeOptional((uint64_t)a5, (uint64_t)&__p))
  {
    v63 = (quasar::SentencePieceModule *)operator new();
    quasar::SentencePieceModule::SentencePieceModule(v63, a5, &__p, 1);
    std::unique_ptr<quasar::SentencePieceModule>::reset[abi:ne180100]((quasar::SentencePieceModule **)(a1 + 376), v63);
    v47 = 1;
  }
  if (SBYTE7(v98) < 0)
    operator delete((void *)__p);
  Ptree = quasar::SystemConfig::getPtree((uint64_t)a5, a7);
  std::string::basic_string[abi:ne180100]<0>(v77, "extra-p2wp-dict-mapped-file");
  quasar::PTree::getStringOptional(Ptree, (uint64_t)v77, (std::string *)&__p);
  if (BYTE8(v98))
  {
    *(_OWORD *)v79 = __p;
    v80 = v98;
    *(_QWORD *)&v98 = 0;
    __p = 0uLL;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v79, "");
    if (BYTE8(v98) && SBYTE7(v98) < 0)
      operator delete((void *)__p);
  }
  if (SHIBYTE(v78) < 0)
    operator delete(v77[0]);
  std::string::basic_string[abi:ne180100]<0>(v75, "extra-p2wp-dict-file");
  quasar::PTree::getStringOptional(Ptree, (uint64_t)v75, (std::string *)&__p);
  if (BYTE8(v98))
  {
    *(_OWORD *)v77 = __p;
    v78 = v98;
    *(_QWORD *)&v98 = 0;
    __p = 0uLL;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v77, "");
    if (BYTE8(v98) && SBYTE7(v98) < 0)
      operator delete((void *)__p);
  }
  if (v76 < 0)
    operator delete(v75[0]);
  v65 = (void *)HIBYTE(v80);
  if (v80 < 0)
    v65 = v79[1];
  if (v65)
    goto LABEL_98;
  v66 = (void *)HIBYTE(v78);
  if (v78 < 0)
    v66 = v77[1];
  if (v66)
  {
LABEL_98:
    quasar::Lexicon::create((uint64_t)v79, (uint64_t)v77, &__p);
    v67 = __p;
    *(_QWORD *)&__p = 0;
    v68 = *v24;
    *v24 = v67;
    if (v68)
    {
      std::default_delete<quasar::Lexicon>::operator()[abi:ne180100](a1 + 368, v68);
      v69 = __p;
      *(_QWORD *)&__p = 0;
      if (v69)
        std::default_delete<quasar::Lexicon>::operator()[abi:ne180100]((uint64_t)&__p, v69);
    }
  }
  else if (!v47)
  {
    v112 = 0u;
    v113 = 0u;
    v110 = 0u;
    v111 = 0u;
    v108 = 0u;
    v109 = 0u;
    v106 = 0u;
    v107 = 0u;
    v104 = 0u;
    v105 = 0u;
    v102 = 0u;
    v103 = 0u;
    v100 = 0u;
    v101 = 0u;
    v98 = 0u;
    v99 = 0u;
    __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"G2WP loaded nothing G2WP-specific", 33);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
  }
  if (*(char *)(a7 + 23) >= 0)
    v70 = *(unsigned __int8 *)(a7 + 23);
  else
    v70 = *(_QWORD *)(a7 + 8);
  v71 = v75;
  std::string::basic_string[abi:ne180100]((uint64_t)v75, v70 + 6);
  if (v76 < 0)
    v71 = (void **)v75[0];
  if (v70)
  {
    if (*(char *)(a7 + 23) >= 0)
      v72 = (const void *)a7;
    else
      v72 = *(const void **)a7;
    memmove(v71, v72, v70);
  }
  strcpy((char *)v71 + v70, ".spm-2");
  if (quasar::SystemConfig::getPtreeOptional((uint64_t)a5, (uint64_t)v75))
  {
    if (*(_QWORD *)(a1 + 376))
    {
      v112 = 0u;
      v113 = 0u;
      v110 = 0u;
      v111 = 0u;
      v108 = 0u;
      v109 = 0u;
      v106 = 0u;
      v107 = 0u;
      v104 = 0u;
      v105 = 0u;
      v102 = 0u;
      v103 = 0u;
      v100 = 0u;
      v101 = 0u;
      v98 = 0u;
      v99 = 0u;
      __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"G2WP cannot have both spm and spm-2", 35);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
    }
    v73 = (quasar::SentencePieceModule *)operator new();
    quasar::SentencePieceModule::SentencePieceModule(v73, a5, v75, 2);
    std::unique_ptr<quasar::SentencePieceModule>::reset[abi:ne180100]((quasar::SentencePieceModule **)(a1 + 376), v73);
  }
  if (v76 < 0)
    operator delete(v75[0]);
  if (SHIBYTE(v78) < 0)
    operator delete(v77[0]);
  if (SHIBYTE(v80) < 0)
    operator delete(v79[0]);
  if (v86 < 0)
    operator delete(v85[0]);
  std::__tree<int>::destroy((uint64_t)v87, v88);
  return a1;
}

void sub_1AD766CD4(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1AD766ED4);
}

void sub_1AD766CE4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48)
{
  char v48;

  if (a48 && a47 < 0)
    operator delete(__p);
  if (a15 < 0)
    JUMPOUT(0x1AD766DC8);
  if (v48 < 0)
    JUMPOUT(0x1AD766E10);
  JUMPOUT(0x1AD766E20);
}

void sub_1AD766D04(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48)
{
  void *v48;
  char v49;

  if (a48 && a47 < 0)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  if (v49 < 0)
    operator delete(v48);
  JUMPOUT(0x1AD766E70);
}

void sub_1AD766D24(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  char v47;

  if (a15 < 0)
    operator delete(__p);
  if (v47 < 0)
    JUMPOUT(0x1AD766DC8);
  JUMPOUT(0x1AD766DD4);
}

void sub_1AD766E34(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  quasar::SentencePieceModule **v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9[61];

  std::__tree<int>::destroy((uint64_t)v9, v9[1]);
  std::unique_ptr<quasar::SentencePieceModule>::reset[abi:ne180100](v3, 0);
  v6 = *v2;
  *v2 = 0;
  if (v6)
    std::default_delete<quasar::Lexicon>::operator()[abi:ne180100]((uint64_t)v2, v6);
  v7 = *(_QWORD *)(v1 + 360);
  *(_QWORD *)(v1 + 360) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *v4;
  *v4 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  quasar::QuasarG2PBase::~QuasarG2PBase((void **)v1);
  _Unwind_Resume(a1);
}

void sub_1AD766EDC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  JUMPOUT(0x1AD766E7CLL);
}

void sub_1AD766F1C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a44 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  JUMPOUT(0x1AD766ED4);
}

void quasar::QuasarExceptionMessage::~QuasarExceptionMessage(quasar::QuasarExceptionMessage *this)
{
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage(this);
}

{
  uint64_t (*v2)();
  std::runtime_error *exception;
  std::string __p;

  v2 = quasar::QuasarExceptionMessage::logger;
  std::stringbuf::str();
  ((void (*)(std::string *, _QWORD))v2)(&__p, *((_QWORD *)this + 33));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (std::uncaught_exception())
    abort();
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::stringbuf::str();
  std::runtime_error::runtime_error(exception, &__p);
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void quasar::QuasarG2PBase::~QuasarG2PBase(void **this)
{
  *this = off_1E5D35008;
  if (*((char *)this + 351) < 0)
    operator delete(this[41]);
  if (*((char *)this + 327) < 0)
    operator delete(this[38]);
  quasar::G2P::~G2P((quasar::G2P *)this);
}

void quasar::G2WP::~G2WP(quasar::SentencePieceModule **this)
{
  uint64_t v2;
  quasar::SentencePieceModule *v3;
  quasar::SentencePieceModule *v4;

  *this = (quasar::SentencePieceModule *)&off_1E5D3B870;
  std::unique_ptr<quasar::SentencePieceModule>::reset[abi:ne180100](this + 47, 0);
  v2 = (uint64_t)this[46];
  this[46] = 0;
  if (v2)
    std::default_delete<quasar::Lexicon>::operator()[abi:ne180100]((uint64_t)(this + 46), v2);
  v3 = this[45];
  this[45] = 0;
  if (v3)
    (*(void (**)(quasar::SentencePieceModule *))(*(_QWORD *)v3 + 8))(v3);
  v4 = this[44];
  this[44] = 0;
  if (v4)
    (*(void (**)(quasar::SentencePieceModule *))(*(_QWORD *)v4 + 8))(v4);
  quasar::QuasarG2PBase::~QuasarG2PBase((void **)this);
}

{
  quasar::G2WP::~G2WP(this);
  JUMPOUT(0x1AF44D190);
}

void quasar::G2WP::normalizeToken(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
}

void quasar::G2WP::doG2P(uint64_t a1@<X0>, __int128 *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int8 v11;
  __int128 **v12;
  __int128 **v13;
  __int128 **v14;
  __int128 *v15;
  __int128 *v16;
  uint64_t v17;
  int v18;
  void *__p[2];
  unsigned __int8 v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23[3];
  __int128 ***v24;
  char v25;
  std::string v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  quasar::LmeDataFactoryBase::PronSet::PronSet(v23);
  quasar::PronGuessStats::PronGuessStats((quasar::PronGuessStats *)__p);
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v16 = (__int128 *)std::vector<quasar::TextTokenizer::Token>::__push_back_slow_path<quasar::TextTokenizer::Token const&>((uint64_t *)&v15, a2);
  v18 = 0;
  memset(&v26, 0, sizeof(v26));
  std::vector<quasar::TextTokenizer::Token>::__init_with_size[abi:ne180100]<quasar::TextTokenizer::Token*,quasar::TextTokenizer::Token*>(&v26, v15, v16, ((char *)v16 - (char *)v15) >> 5);
  v27 = v18;
  v13 = 0;
  v14 = 0;
  v12 = 0;
  v24 = &v12;
  v25 = 0;
  v12 = (__int128 **)operator new(0x20uLL);
  v13 = v12;
  v14 = v12 + 4;
  v13 = (__int128 **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TextTokenizer::TokenString>,quasar::TextTokenizer::TokenString const*,quasar::TextTokenizer::TokenString const*,quasar::TextTokenizer::TokenString*>((uint64_t)&v14, (uint64_t)&v26, (uint64_t)&v28, (uint64_t)v12);
  v24 = (__int128 ***)&v26;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  v8 = *(_QWORD **)(a1 + 352);
  std::string::basic_string[abi:ne180100]<0>(&v26, "");
  quasar::G2P::getProns(v8, &v12, __p, 0, a4);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v26.__r_.__value_.__l.__data_);
    if (a3)
      goto LABEL_3;
LABEL_12:
    v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
    std::vector<quasar::TextTokenizer::TokenString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
    v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
    std::__tree<std::string>::destroy((uint64_t)&v21, v22);
    goto LABEL_13;
  }
  if (!a3)
    goto LABEL_12;
LABEL_3:
  quasar::LmeDataFactoryBase::PronSet::insert((uint64_t)v23, a4);
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)a4;
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<quasar::TextTokenizer::TokenString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  std::__tree<std::string>::destroy((uint64_t)&v21, v22);
  quasar::LmeDataFactoryBase::PronSet::toPronChoices((uint64_t)v23, 3, (uint64_t *)&v15);
  quasar::G2WP::g2pToWP(a1, (int **)&v15, (uint64_t *)__p);
  quasar::LmeDataFactoryBase::PronSet::insert((uint64_t)v23, (uint64_t *)__p);
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  v9 = *(_QWORD *)(a1 + 376);
  if (v9)
  {
    quasar::SentencePieceModule::encode(v9, (const std::string *)a2, __p);
    v10 = v20;
    v11 = v20;
    if ((v20 & 0x80u) != 0)
      v10 = (unint64_t)__p[1];
    if (v10)
    {
      quasar::LmeDataFactoryBase::PronSet::insert(v23, 4, (uint64_t)__p, 0.0);
      v11 = v20;
    }
    if ((v11 & 0x80) != 0)
      operator delete(__p[0]);
  }
  quasar::LmeDataFactoryBase::PronSet::toPronChoices((uint64_t)v23, a3, a4);
LABEL_13:
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)v23, (char *)v23[1]);
}

void sub_1AD767314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,char *a29)
{
  if (a21 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&a28, a29);
  _Unwind_Resume(a1);
}

void sub_1AD767418()
{
  JUMPOUT(0x1AD767410);
}

void quasar::G2P::getProns(_QWORD *a1@<X0>, __int128 ***a2@<X2>, _DWORD *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  quasar::LmeData *v8;
  std::__shared_weak_count *v9;
  char v10;

  v10 = 0;
  v8 = 0;
  v9 = 0;
  quasar::G2P::getProns(a1, a2, a3, &v8, &v10, a4, a5);
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1AD767490(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::G2WP::g2pToWP(uint64_t a1@<X0>, int **a2@<X1>, uint64_t *a3@<X8>)
{
  int *v6;
  int *v7;
  _QWORD *v8;
  const char *v9;
  int *v10;
  int *v11;
  char *v12;
  _QWORD *v13;
  int v14;
  _QWORD *v15;
  int v16;
  uint64_t *v17;
  void *__p;
  char v19;
  char v20;
  __int128 **v21;
  __int128 **v22;
  __int128 **v23;
  __int128 *v24;
  __int128 *v25;
  uint64_t v26;
  int v27;
  std::string v28;
  int v29;
  __int128 v30;
  __int128 v31;
  int v32;
  char *v33[4];
  uint64_t *v34[3];
  std::string *v35;
  std::string v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  quasar::LmeDataFactoryBase::PronSet::PronSet(v34);
  if (*a2 != a2[1] && *(_QWORD *)(a1 + 360))
  {
    v17 = a3;
    quasar::PronGuessStats::PronGuessStats((quasar::PronGuessStats *)&v30);
    v6 = *a2;
    v7 = a2[1];
    if (*a2 != v7)
    {
      do
      {
        if (quasar::isPronTypePhoneme(*v6))
        {
          memset(&v28, 0, sizeof(v28));
          std::string::operator=(&v28, (const std::string *)(v6 + 2));
          v29 = 0;
          v24 = 0;
          v25 = 0;
          v26 = 0;
          v25 = (__int128 *)std::vector<quasar::TextTokenizer::Token>::__push_back_slow_path<quasar::TextTokenizer::Token const&>((uint64_t *)&v24, (__int128 *)&v28);
          v27 = 0;
          memset(&v36, 0, sizeof(v36));
          std::vector<quasar::TextTokenizer::Token>::__init_with_size[abi:ne180100]<quasar::TextTokenizer::Token*,quasar::TextTokenizer::Token*>(&v36, v24, v25, ((char *)v25 - (char *)v24) >> 5);
          v37 = v27;
          v22 = 0;
          v23 = 0;
          v21 = 0;
          __p = &v21;
          v19 = 0;
          v21 = (__int128 **)operator new(0x20uLL);
          v22 = v21;
          v23 = v21 + 4;
          v22 = (__int128 **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TextTokenizer::TokenString>,quasar::TextTokenizer::TokenString const*,quasar::TextTokenizer::TokenString const*,quasar::TextTokenizer::TokenString*>((uint64_t)&v23, (uint64_t)&v36, (uint64_t)&v38, (uint64_t)v21);
          __p = &v36;
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          v8 = *(_QWORD **)(a1 + 360);
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          quasar::G2P::getProns(v8, &v21, &v30, 1, (uint64_t *)&v36);
          quasar::LmeDataFactoryBase::PronSet::insert((uint64_t)v34, (uint64_t *)&v36);
          v35 = &v36;
          std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
          if (v20 < 0)
            operator delete(__p);
          v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
          std::vector<quasar::TextTokenizer::TokenString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
          v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
          if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v28.__r_.__value_.__l.__data_);
        }
        v6 += 10;
      }
      while (v6 != v7);
    }
    std::__tree<std::string>::destroy((uint64_t)v33, v33[1]);
    a3 = v17;
  }
  if (*(_QWORD *)(a1 + 368))
  {
    v9 = quasar::PronTypeToSeparator(5);
    v10 = *a2;
    v11 = a2[1];
    if (*a2 != v11)
    {
      v12 = (char *)v9;
      do
      {
        if (quasar::isPronTypePhoneme(*v10))
        {
          v30 = 0u;
          v31 = 0u;
          v32 = 1065353216;
          v13 = *(_QWORD **)(a1 + 368);
          std::string::basic_string[abi:ne180100]<0>(&v28, v12);
          v14 = quasar::Lexicon::lookUpProns(v13, (uint64_t)(v10 + 2), (uint64_t)&v30, (char *)&v28);
          if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v28.__r_.__value_.__l.__data_);
          v15 = (_QWORD *)v31;
          if ((_QWORD)v31)
            v16 = v14;
          else
            v16 = 0;
          if (v16 == 1)
          {
            do
            {
              quasar::LmeDataFactoryBase::PronSet::insert(v34, 5, (uint64_t)(v15 + 2), 0.0);
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v30);
        }
        v10 += 10;
      }
      while (v10 != v11);
    }
  }
  quasar::LmeDataFactoryBase::PronSet::toPronChoices((uint64_t)v34, 3, a3);
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)v34, (char *)v34[1]);
}

void sub_1AD767790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;

  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy(v38 - 160, *(char **)(v38 - 152));
  _Unwind_Resume(a1);
}

void quasar::G2WP::convertPhonemePronsToAllProns(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = *a2;
  v6 = a2[1];
  if (*a2 != v6)
  {
    v7 = 0;
    v8 = (unint64_t *)(a3 + 2);
    do
    {
      LODWORD(v9) = 1;
      LODWORD(v11) = 0;
      if (v7 >= *v8)
      {
        v7 = std::vector<quasar::PronChoice>::__emplace_back_slow_path<quasar::PronType,std::string const&,int>(a3, (int *)&v9, v5, (int *)&v11);
      }
      else
      {
        std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType,std::string const&,int>((uint64_t)(a3 + 2), v7, (int *)&v9, v5, (int *)&v11);
        v7 += 40;
        a3[1] = v7;
      }
      a3[1] = v7;
      v5 += 24;
    }
    while (v5 != v6);
  }
  quasar::G2WP::g2pToWP(a1, (int **)a3, &v9);
  std::vector<quasar::PronChoice>::__insert_with_size[abi:ne180100]<std::__wrap_iter<quasar::PronChoice*>,std::__wrap_iter<quasar::PronChoice*>>(a3, a3[1], v9, v10, 0xCCCCCCCCCCCCCCCDLL * ((v10 - v9) >> 3));
  v11 = (void **)&v9;
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](&v11);
}

void sub_1AD7679AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, void ***a12)
{
  a12 = &a9;
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void quasar::G2WP::batchDoG2P()
{
  _OWORD v0[17];

  memset(v0, 0, sizeof(v0));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v0);
}

uint64_t quasar::G2WP::getG2PVersion(quasar::G2WP *this)
{
  return 5;
}

uint64_t quasar::G2P::getMaxProns(quasar::G2P *this)
{
  return *((unsigned int *)this + 25);
}

uint64_t quasar::G2WP::getG2PModelInputSymbolTable(quasar::G2WP *this)
{
  return 0;
}

void sub_1AD767B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v19;
  uint64_t v20;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      v19 = MEMORY[0x1E0DE4F60];
      v20 = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)v15 = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)(v15 + *(_QWORD *)(v20 - 24)) = *(_QWORD *)(v19 + 24);
      *(_QWORD *)(v15 + 8) = MEMORY[0x1E0DE4FB8] + 16;
      if (*(char *)(v15 + 95) < 0)
        operator delete(*(void **)(v15 + 72));
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1AF44D094](v15 + 112);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

std::string *std::vector<quasar::TextTokenizer::Token>::__init_with_size[abi:ne180100]<quasar::TextTokenizer::Token*,quasar::TextTokenizer::Token*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>,quasar::TextTokenizer::Token*,quasar::TextTokenizer::Token*,quasar::TextTokenizer::Token*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1AD767C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>,quasar::TextTokenizer::Token*,quasar::TextTokenizer::Token*,quasar::TextTokenizer::Token*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  std::string *v8;
  _QWORD v10[3];
  char v11;
  std::string *v12;
  std::string *v13;

  v4 = this;
  v12 = this;
  v13 = this;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  v11 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v8 = v13;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        v8 = v4;
      }
      LODWORD(v4[1].__r_.__value_.__l.__data_) = *((_DWORD *)v6 + 6);
      v6 += 2;
      v4 = (std::string *)((char *)v8 + 32);
      v13 = (std::string *)((char *)v8 + 32);
    }
    while (v6 != a3);
  }
  v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,quasar::TextTokenizer::Token*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_1AD767D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,quasar::TextTokenizer::Token*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,quasar::TextTokenizer::Token*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,quasar::TextTokenizer::Token*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,quasar::TextTokenizer::Token*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 9) < 0)
      operator delete(*(void **)(v1 - 32));
    v1 -= 32;
  }
}

void std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<quasar::TextTokenizer::Token>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<quasar::TextTokenizer::Token>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0)
      operator delete(*(void **)(i - 32));
  }
  a1[1] = v2;
}

void std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[63] < 0)
      operator delete(*((void **)a2 + 5));
    operator delete(a2);
  }
}

void std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<quasar::PronChoice>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<quasar::PronChoice>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 40)
  {
    if (*(char *)(i - 9) < 0)
      operator delete(*(void **)(i - 32));
  }
  a1[1] = v2;
}

uint64_t *std::unique_ptr<quasar::PronCombinator>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::__tree<int>::destroy(v2 + 8, *(_QWORD **)(v2 + 16));
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

void std::default_delete<quasar::Lexicon>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2 + 32);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2 + 16);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2);
    JUMPOUT(0x1AF44D190);
  }
}

quasar::SentencePieceModule *std::unique_ptr<quasar::SentencePieceModule>::reset[abi:ne180100](quasar::SentencePieceModule **a1, quasar::SentencePieceModule *a2)
{
  quasar::SentencePieceModule *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::SentencePieceModule::~SentencePieceModule(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

uint64_t std::map<quasar::PronType,int>::map[abi:ne180100](uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 8 * a3;
    do
    {
      std::__tree<std::__value_type<quasar::PronType,int>,std::__map_value_compare<quasar::PronType,std::__value_type<quasar::PronType,int>,std::less<quasar::PronType>,true>,std::allocator<std::__value_type<quasar::PronType,int>>>::__emplace_hint_unique_key_args<quasar::PronType,std::pair<quasar::PronType const,int> const&>((uint64_t **)a1, v4, a2, (uint64_t *)a2);
      a2 += 2;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_1AD7680A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<int>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<quasar::PronType,int>,std::__map_value_compare<quasar::PronType,std::__value_type<quasar::PronType,int>,std::less<quasar::PronType>,true>,std::allocator<std::__value_type<quasar::PronType,int>>>::__emplace_hint_unique_key_args<quasar::PronType,std::pair<quasar::PronType const,int> const&>(uint64_t **a1, uint64_t *a2, int *a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<std::__value_type<quasar::PronType,int>,std::__map_value_compare<quasar::PronType,std::__value_type<quasar::PronType,int>,std::less<quasar::PronType>,true>,std::allocator<std::__value_type<quasar::PronType,int>>>::__find_equal<quasar::PronType>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = *a4;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<quasar::PronType,int>,std::__map_value_compare<quasar::PronType,std::__value_type<quasar::PronType,int>,std::less<quasar::PronType>,true>,std::allocator<std::__value_type<quasar::PronType,int>>>::__find_equal<quasar::PronType>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *std::map<quasar::PronType,int>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<quasar::PronType,int>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<quasar::PronType,int>,std::__tree_node<std::__value_type<quasar::PronType,int>,void *> *,long>>>(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1AD768328(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<int>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<quasar::PronType,int>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<quasar::PronType,int>,std::__tree_node<std::__value_type<quasar::PronType,int>,void *> *,long>>>(uint64_t *result, int *a2, int *a3)
{
  int *v4;
  uint64_t **v5;
  uint64_t *v6;
  int *v7;
  int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<quasar::PronType,int>,std::__map_value_compare<quasar::PronType,std::__value_type<quasar::PronType,int>,std::less<quasar::PronType>,true>,std::allocator<std::__value_type<quasar::PronType,int>>>::__emplace_hint_unique_key_args<quasar::PronType,std::pair<quasar::PronType const,int> const&>(v5, v6, v4 + 7, (uint64_t *)(v4 + 7));
      v7 = (int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

uint64_t std::vector<quasar::TextTokenizer::Token>::__push_back_slow_path<quasar::TextTokenizer::Token const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[2];
  std::string *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v7, v9);
  else
    v10 = 0;
  v11 = (std::string *)&v10[8 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = (char *)&v10[8 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v11 = v16;
  }
  else
  {
    v12 = *a2;
    v11->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  v10[8 * v4 + 6] = *((_DWORD *)a2 + 6);
  v16 = (std::string *)((char *)v11 + 32);
  std::vector<quasar::TextTokenizer::Token>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1AD768540(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::TextTokenizer::Token>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>,std::reverse_iterator<quasar::TextTokenizer::Token*>,std::reverse_iterator<quasar::TextTokenizer::Token*>,std::reverse_iterator<quasar::TextTokenizer::Token*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>,std::reverse_iterator<quasar::TextTokenizer::Token*>,std::reverse_iterator<quasar::TextTokenizer::Token*>,std::reverse_iterator<quasar::TextTokenizer::Token*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(a3 - 8);
      v8 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v8;
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,std::reverse_iterator<quasar::TextTokenizer::Token*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,std::reverse_iterator<quasar::TextTokenizer::Token*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,std::reverse_iterator<quasar::TextTokenizer::Token*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,std::reverse_iterator<quasar::TextTokenizer::Token*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 32;
  }
}

uint64_t std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<quasar::TextTokenizer::Token>::__destruct_at_end[abi:ne180100](a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<quasar::TextTokenizer::Token>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 4;
      *(_QWORD *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TextTokenizer::TokenString>,quasar::TextTokenizer::TokenString const*,quasar::TextTokenizer::TokenString const*,quasar::TextTokenizer::TokenString*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      std::vector<quasar::TextTokenizer::Token>::__init_with_size[abi:ne180100]<quasar::TextTokenizer::Token*,quasar::TextTokenizer::Token*>((std::string *)v4, *(__int128 **)v6, *(__int128 **)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 5);
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::TokenString>,quasar::TextTokenizer::TokenString*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1AD768818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::TokenString>,quasar::TextTokenizer::TokenString*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::TokenString>,quasar::TextTokenizer::TokenString*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::TokenString>,quasar::TextTokenizer::TokenString*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::TokenString>,quasar::TextTokenizer::TokenString*>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = **(void ****)(a1 + 16);
  v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 4;
    v3 = v1;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

void std::vector<quasar::TextTokenizer::TokenString>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 4;
        v6 = v4;
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<quasar::PronChoice>::__emplace_back_slow_path<quasar::PronType,std::string const&,int>(uint64_t *a1, int *a2, uint64_t a3, int *a4)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t *v18;

  v5 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0x666666666666666)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v6)
    v6 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333)
    v10 = 0x666666666666666;
  else
    v10 = v6;
  v18 = a1 + 2;
  if (v10)
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)(a1 + 2), v10);
  else
    v11 = 0;
  v14 = v11;
  v15 = &v11[40 * v5];
  v17 = &v11[40 * v10];
  std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType,std::string const&,int>((uint64_t)(a1 + 2), (uint64_t)v15, a2, a3, a4);
  v16 = v15 + 40;
  std::vector<quasar::PronChoice>::__swap_out_circular_buffer(a1, &v14);
  v12 = a1[1];
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)&v14);
  return v12;
}

void sub_1AD768A28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType,std::string const&,int>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int *a5)
{
  int v7;
  float v8;
  std::string *v9;
  int v10;
  std::string __p;

  v7 = *a3;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    __p = *(std::string *)a4;
  v8 = (float)*a5;
  *(_DWORD *)a2 = v7;
  v9 = (std::string *)(a2 + 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v10 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(float *)(a2 + 32) = v8;
    if (v10 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a2 + 24) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(float *)(a2 + 32) = v8;
  }
}

void sub_1AD768AEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::PronChoice>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::PronChoice>,std::reverse_iterator<quasar::PronChoice*>,std::reverse_iterator<quasar::PronChoice*>,std::reverse_iterator<quasar::PronChoice*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::PronChoice>,std::reverse_iterator<quasar::PronChoice*>,std::reverse_iterator<quasar::PronChoice*>,std::reverse_iterator<quasar::PronChoice*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 40;
      quasar::PronChoice::PronChoice((_DWORD *)(v7 - 40), v9);
      v7 = *((_QWORD *)&v15 + 1) - 40;
      *((_QWORD *)&v15 + 1) -= 40;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PronChoice>,std::reverse_iterator<quasar::PronChoice*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_1AD768C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PronChoice>,std::reverse_iterator<quasar::PronChoice*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_DWORD *quasar::PronChoice::PronChoice(_DWORD *a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;

  *a1 = *(_DWORD *)a2;
  v4 = (std::string *)(a1 + 2);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  a1[8] = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PronChoice>,std::reverse_iterator<quasar::PronChoice*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PronChoice>,std::reverse_iterator<quasar::PronChoice*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PronChoice>,std::reverse_iterator<quasar::PronChoice*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 31) < 0)
      operator delete(*(void **)(v1 + 8));
    v1 += 40;
  }
}

uint64_t std::__split_buffer<quasar::PronChoice>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<quasar::PronChoice>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<quasar::PronChoice>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 40;
      *(_QWORD *)(a1 + 16) = v2 - 40;
      if (*(char *)(v2 - 9) < 0)
      {
        operator delete(*(void **)(v2 - 32));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t std::vector<quasar::PronChoice>::__insert_with_size[abi:ne180100]<std::__wrap_iter<quasar::PronChoice*>,std::__wrap_iter<quasar::PronChoice*>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  _QWORD v27[2];
  char *v28;
  char *v29;
  uint64_t v30;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      v20 = v12 - a2;
      if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - a2) >> 3)) >= a5)
      {
        v21 = a3 + 40 * a5;
      }
      else
      {
        v21 = a3 + 8 * ((uint64_t)(v12 - a2) >> 3);
        a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::PronChoice>,quasar::PronChoice*,quasar::PronChoice*,quasar::PronChoice*>(v9, v21, a4, *(_DWORD **)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      std::vector<quasar::PronChoice>::__move_range((uint64_t)a1, v5, v12, v5 + 40 * a5);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<quasar::PronChoice *>,std::__wrap_iter<quasar::PronChoice *>,quasar::PronChoice *,0>(v7, v21, v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 - 0x3333333333333333 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x666666666666666)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v15 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - v13) >> 3);
      v16 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - v13) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x333333333333333)
        v18 = 0x666666666666666;
      else
        v18 = v17;
      v30 = v9;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v9, v18);
      else
        v19 = 0;
      v22 = &v19[40 * v15];
      v27[0] = v19;
      v27[1] = v22;
      v28 = v22;
      v29 = &v19[40 * v18];
      v23 = 5 * a5;
      v24 = &v22[40 * a5];
      v25 = 8 * v23;
      do
      {
        quasar::PronChoice::PronChoice(v22, v7);
        v22 += 40;
        v7 += 40;
        v25 -= 40;
      }
      while (v25);
      v28 = v24;
      v5 = std::vector<quasar::PronChoice>::__swap_out_circular_buffer(a1, v27, v5);
      std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)v27);
    }
  }
  return v5;
}

void sub_1AD768F90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::PronChoice>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  unint64_t v10;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = (_DWORD *)v6;
  if (v7 < a3)
  {
    v10 = a2 + v6 - a4;
    v8 = *(_DWORD **)(a1 + 8);
    do
    {
      quasar::PronChoice::PronChoice(v8, v10);
      v10 += 40;
      v8 += 10;
    }
    while (v10 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,quasar::PronChoice *,quasar::PronChoice *,quasar::PronChoice *,0>(a2, v7, v6);
}

void sub_1AD769044(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::PronChoice>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::PronChoice>,std::reverse_iterator<quasar::PronChoice*>,std::reverse_iterator<quasar::PronChoice*>,std::reverse_iterator<quasar::PronChoice*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::PronChoice>,quasar::PronChoice*,quasar::PronChoice*,quasar::PronChoice*>(v7, a3, a1[1], (_DWORD *)a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

_DWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::PronChoice>,quasar::PronChoice*,quasar::PronChoice*,quasar::PronChoice*>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  _DWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _DWORD *v10;
  _DWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      quasar::PronChoice::PronChoice(v4, v6);
      v6 += 40;
      v4 = v11 + 10;
      v11 += 10;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PronChoice>,quasar::PronChoice*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1AD769188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PronChoice>,quasar::PronChoice*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PronChoice>,quasar::PronChoice*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PronChoice>,quasar::PronChoice*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PronChoice>,quasar::PronChoice*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 9) < 0)
      operator delete(*(void **)(v1 - 32));
    v1 -= 40;
  }
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,quasar::PronChoice *,quasar::PronChoice *,quasar::PronChoice *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a2 != a1)
  {
    v6 = 0;
    do
    {
      *(_DWORD *)(a3 + v6 - 40) = *(_DWORD *)(a2 + v6 - 40);
      std::string::operator=((std::string *)(a3 + v6 - 32), (const std::string *)(a2 + v6 - 32));
      *(_DWORD *)(a3 + v6 - 8) = *(_DWORD *)(a2 + v6 - 8);
      v6 -= 40;
    }
    while (a2 + v6 != a1);
  }
  return a2;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<quasar::PronChoice *>,std::__wrap_iter<quasar::PronChoice *>,quasar::PronChoice *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    *(_DWORD *)a3 = *(_DWORD *)v4;
    std::string::operator=((std::string *)(a3 + 8), (const std::string *)(v4 + 8));
    *(_DWORD *)(a3 + 32) = *(_DWORD *)(v4 + 32);
    a3 += 40;
    v4 += 40;
  }
  while (v4 != v5);
  return v5;
}

_DWORD *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::PronChoice>,quasar::PronChoice*,quasar::PronChoice*,quasar::PronChoice*>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  _DWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _DWORD *v10;
  _DWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      quasar::PronChoice::PronChoice(v4, v6);
      v6 += 40;
      v4 = v11 + 10;
      v11 += 10;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PronChoice>,quasar::PronChoice*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1AD769390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PronChoice>,quasar::PronChoice*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::PdfPrior::PdfPrior(uint64_t a1, uint64_t a2)
{
  void *v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double *v13;
  const float *v14;
  double v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  double v19;
  const float *v21[3];
  void *v22[34];
  double *v23;
  uint64_t v24;
  uint64_t v25;

  *(_DWORD *)a1 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = &unk_1E5D341C8;
  v4 = (void *)(a1 + 8);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(_QWORD *)(a2 + 8))
      return a1;
  }
  else if (!*(_BYTE *)(a2 + 23))
  {
    return a1;
  }
  v23 = 0;
  v24 = 0;
  v25 = 0;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Computing pdf-priors from : ", 28);
    v6 = *(char *)(a2 + 23);
    if (v6 >= 0)
      v7 = a2;
    else
      v7 = *(_QWORD *)a2;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a2 + 23);
    else
      v8 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v22);
  }
  v22[0] = 0;
  kaldi::Input::OpenInternal(v22, a2, 0, 0);
  v9 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v22);
  kaldi::Vector<double>::Read((uint64_t)&v23, v9, 0, 0);
  kaldi::Input::Close((kaldi::Input *)v22);
  kaldi::Input::~Input((kaldi::Input *)v22);
  v10 = v24;
  memset(v21, 0, sizeof(v21));
  kaldi::Vector<float>::Resize((void **)v21, v24, 0);
  if ((int)v10 >= 1)
  {
    v11 = 0;
    v12 = 0;
    v13 = v23;
    v14 = v21[0];
    do
    {
      v15 = *(float *)(a2 + 28);
      if (v13[v11] < v15)
      {
        v13[v11] = v15;
        v14[v11] = 1.7014e38;
        ++v12;
      }
      ++v11;
    }
    while (v10 != v11);
    if (v12 >= 1 && kaldi::g_kaldi_verbose_level > -2)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
      v16 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" out of ", 8);
      v17 = (_QWORD *)std::ostream::operator<<();
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" classes have counts", 20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" lower than ", 12);
      std::ostream::operator<<();
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
    }
  }
  v19 = kaldi::VectorBase<double>::Sum((uint64_t)&v23);
  kaldi::VectorBase<double>::Scale((uint64_t)&v23, 1.0 / v19);
  kaldi::VectorBase<double>::ApplyLog((uint64_t)&v23);
  memset(v22, 0, 24);
  kaldi::Vector<float>::Resize(v22, v24, 1);
  kaldi::VectorBase<float>::CopyFromVec<double>((uint64_t)v22, &v23);
  kaldi::VectorBase<float>::AddVec<float>((uint64_t)v22, v21, 1.0);
  kaldi::CuVector<float>::Resize((uint64_t)v4, v10, 1);
  kaldi::CuVectorBase<float>::CopyFromVec<float>(v4, (uint64_t)v22);
  kaldi::Vector<float>::Destroy((uint64_t)v22);
  kaldi::Vector<float>::Destroy((uint64_t)v21);
  kaldi::Vector<float>::Destroy((uint64_t)&v23);
  return a1;
}

void sub_1AD76961C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;

  kaldi::Vector<float>::Destroy((uint64_t)&a9);
  kaldi::Vector<float>::Destroy(v10 - 88);
  kaldi::CuVector<float>::~CuVector(v9);
  _Unwind_Resume(a1);
}

uint64_t *kaldi::nnet1::PdfPrior::SubtractOnLogpost(uint64_t a1, uint64_t a2)
{
  int v2;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD v7[34];

  v2 = *(_DWORD *)(a1 + 24);
  if (!v2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"--class-frame-counts is empty: Cannot initialize priors ", 56);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "without the counts.");
    goto LABEL_5;
  }
  if (v2 != *(_DWORD *)(a2 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Dimensionality mismatch,", 24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" class_frame_counts ", 20);
    v6 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" pdf_output_llk ", 16);
    std::ostream::operator<<();
LABEL_5:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
  }
  return kaldi::CuMatrixBase<float>::AddVecToRows(a2, a1 + 8, -*(float *)a1, 1.0);
}

void sub_1AD76978C(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t kaldi::nnet1::PdfPrior::SubtractLogpostForPdf(uint64_t a1, int a2, uint64_t a3)
{
  int v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD v7[34];

  v3 = *(_DWORD *)(a1 + 24);
  if (!v3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"--class-frame-counts is empty: Cannot initialize priors ", 56);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "without the counts.");
    goto LABEL_5;
  }
  if (v3 <= a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Invalid pdf (", 13);
    v6 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"): log-prior dimension = ", 25);
    std::ostream::operator<<();
LABEL_5:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
  }
  return kaldi::CuVectorBase<float>::Add(a3, -(float)(*(float *)a1 * *(float *)(*(_QWORD *)(a1 + 16) + 4 * a2)));
}

void sub_1AD769860(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t quasar::matchMetaData(quasar::PTree *a1, quasar::PTree *a2, unsigned __int8 *a3)
{
  unsigned __int8 *String;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  int DataType;
  int v22;
  char v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned __int8 *v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  BOOL v37;
  double Double;
  BOOL v39;
  int v40;
  char Bool;
  _OWORD v43[17];

  if (!quasar::PTree::isLeaf(a1))
  {
    if ((quasar::PTree::isLeaf(a2) & 1) == 0)
    {
      v12 = quasar::PTree::size(a1);
      if (v12 == quasar::PTree::size(a2))
      {
        v13 = quasar::PTree::begin(a1);
        for (i = quasar::PTree::begin(a2); v13 != quasar::PTree::end(a1) && i != quasar::PTree::end(a2); i += 88)
        {
          v15 = *(unsigned __int8 *)(v13 + 23);
          if ((v15 & 0x80u) == 0)
            v16 = *(unsigned __int8 *)(v13 + 23);
          else
            v16 = *(_QWORD *)(v13 + 8);
          v17 = *(unsigned __int8 *)(i + 23);
          v18 = (char)v17;
          if ((v17 & 0x80u) != 0)
            v17 = *(_QWORD *)(i + 8);
          if (v16 != v17)
            goto LABEL_74;
          if (v18 >= 0)
            v19 = (unsigned __int8 *)i;
          else
            v19 = *(unsigned __int8 **)i;
          if ((v15 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v13, v19, *(_QWORD *)(v13 + 8)))
              goto LABEL_74;
          }
          else if (*(_BYTE *)(v13 + 23))
          {
            v20 = 0;
            while (*(unsigned __int8 *)(v13 + v20) == v19[v20])
            {
              if (v15 == ++v20)
                goto LABEL_37;
            }
            goto LABEL_74;
          }
LABEL_37:
          if (!quasar::matchMetaData(v13 + 24, i + 24, a3))
            goto LABEL_74;
          v13 += 88;
        }
        if (v13 == quasar::PTree::end(a1) && i == quasar::PTree::end(a2))
          goto LABEL_65;
        if (quasar::gLogLevel >= 1)
        {
LABEL_73:
          memset(v43, 0, sizeof(v43));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Logic error (this should not happen).", 37);
          quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v43);
        }
      }
    }
    goto LABEL_74;
  }
  String = (unsigned __int8 *)quasar::PTree::getString(a1);
  v7 = String[23];
  if ((v7 & 0x80u) == 0)
    v8 = String[23];
  else
    v8 = *((_QWORD *)String + 1);
  v9 = a3[23];
  v10 = (char)v9;
  if ((v9 & 0x80u) != 0)
    v9 = *((_QWORD *)a3 + 1);
  if (v8 == v9)
  {
    if (v10 >= 0)
      v11 = a3;
    else
      v11 = *(unsigned __int8 **)a3;
    if ((v7 & 0x80) != 0)
    {
      if (memcmp(*(const void **)String, v11, *((_QWORD *)String + 1)))
        goto LABEL_40;
    }
    else if (String[23])
    {
      while (*String == *v11)
      {
        ++String;
        ++v11;
        if (!--v7)
          goto LABEL_65;
      }
      goto LABEL_40;
    }
LABEL_65:
    v23 = 1;
    return v23 & 1;
  }
LABEL_40:
  DataType = quasar::PTree::getDataType(a1);
  if (DataType != quasar::PTree::getDataType(a2))
  {
LABEL_74:
    v23 = 0;
    return v23 & 1;
  }
  v22 = quasar::PTree::getDataType(a1);
  v23 = v22;
  switch(v22)
  {
    case 0:
      v24 = (unsigned __int8 *)quasar::PTree::getString(a1);
      v25 = quasar::PTree::getString(a2);
      v26 = v24[23];
      if ((v26 & 0x80u) == 0)
        v27 = v24[23];
      else
        v27 = *((_QWORD *)v24 + 1);
      v28 = *(unsigned __int8 *)(v25 + 23);
      v29 = (char)v28;
      if ((v28 & 0x80u) != 0)
        v28 = *(_QWORD *)(v25 + 8);
      if (v27 != v28)
        goto LABEL_74;
      if (v29 >= 0)
        v30 = (unsigned __int8 *)v25;
      else
        v30 = *(unsigned __int8 **)v25;
      if ((v26 & 0x80) != 0)
      {
        v39 = memcmp(*(const void **)v24, v30, *((_QWORD *)v24 + 1)) == 0;
LABEL_68:
        v23 = v39;
      }
      else
      {
        if (!v24[23])
          goto LABEL_65;
        v31 = v26 - 1;
        do
        {
          v33 = *v24++;
          v32 = v33;
          v35 = *v30++;
          v34 = v35;
          v37 = v31-- != 0;
          v23 = v32 == v34;
        }
        while (v23 && v37);
      }
      break;
    case 1:
      Double = quasar::PTree::getDouble(a1);
      v39 = Double == quasar::PTree::getDouble(a2);
      goto LABEL_68;
    case 2:
      v40 = quasar::PTree::getInt<int>((uint64_t)a1);
      v39 = v40 == quasar::PTree::getInt<int>((uint64_t)a2);
      goto LABEL_68;
    case 3:
      Bool = quasar::PTree::getBool(a1);
      v23 = Bool ^ quasar::PTree::getBool(a2) ^ 1;
      return v23 & 1;
    case 4:
      if (quasar::gLogLevel >= 1)
        goto LABEL_73;
      goto LABEL_74;
    default:
      return v23 & 1;
  }
  return v23 & 1;
}

void sub_1AD769C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *quasar::SelectBlockOptions::options@<X0>(quasar::SelectBlockOptions *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = operator new(0x18uLL);
  a2[1] = result + 3;
  a2[2] = result + 3;
  *result = (char *)this + 16;
  result[1] = (char *)this + 176;
  result[2] = (char *)this + 376;
  *a2 = result;
  return result;
}

void quasar::SelectBlock::processBody(quasar::SelectBlock *this)
{
  quasar::ProcessingInput *v2;
  _QWORD *Value;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ChildOptional;
  quasar::PTree *v8;
  quasar::PTree *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *__p[2];
  char v16;

  v2 = (quasar::SelectBlock *)((char *)this + 552);
  Value = (_QWORD *)quasar::ProcessingInput::getValue((quasar::SelectBlock *)((char *)this + 552));
  if (*Value != Value[1]
    && (v4 = quasar::ProcessingInput::getValue(v2),
        v5 = quasar::MetaInfo::get((quasar::MetaInfo *)(*(_QWORD *)v4 + 192)),
        v6 = quasar::OptionValue<std::string>::value((_QWORD *)this + 3),
        (ChildOptional = quasar::PTree::getChildOptional(v5, v6)) != 0)
    && (v8 = (quasar::PTree *)ChildOptional,
        v9 = (quasar::PTree *)quasar::OptionValue<quasar::PTree>::value((_QWORD *)this + 23),
        v10 = (unsigned __int8 *)quasar::OptionValue<std::string>::value((_QWORD *)this + 48),
        quasar::matchMetaData(v9, v8, v10)))
  {
    v11 = *(_QWORD *)(*(_QWORD *)this - 24);
    std::string::basic_string[abi:ne180100]<0>(__p, "match");
    v12 = quasar::ProcessingInput::getValue((quasar::SelectBlock *)((char *)this + 608));
    quasar::ProcessingBlock::send((uint64_t)this + v11, (const void **)__p, v12, 0);
  }
  else
  {
    v13 = *(_QWORD *)(*(_QWORD *)this - 24);
    std::string::basic_string[abi:ne180100]<0>(__p, "pass");
    v14 = quasar::ProcessingInput::getValue((quasar::SelectBlock *)((char *)this + 608));
    quasar::ProcessingBlock::send((uint64_t)this + v13, (const void **)__p, v14, 0);
  }
  if (v16 < 0)
    operator delete(__p[0]);
}

void sub_1AD769E20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ProcessingInput::getValue(quasar::ProcessingInput *this)
{
  BOOL v2;
  _QWORD *v3;
  int v4;
  quasar::ProcessingInput *v5;
  uint64_t v6;
  _QWORD *v7;
  _OWORD v9[17];

  if (*((_BYTE *)this + 24))
    v2 = 1;
  else
    v2 = quasar::gLogLevel < 1;
  if (!v2)
  {
    memset(v9, 0, sizeof(v9));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Input'", 6);
    v4 = *((char *)this + 23);
    if (v4 >= 0)
      v5 = this;
    else
      v5 = *(quasar::ProcessingInput **)this;
    if (v4 >= 0)
      v6 = *((unsigned __int8 *)this + 23);
    else
      v6 = *((_QWORD *)this + 1);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v5, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"' has no value set!", 19);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v9);
  }
  return (uint64_t)this + 32;
}

void sub_1AD769F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'quasar::SelectBlock::processBody(quasar::SelectBlock *this)
{
  quasar::SelectBlock::processBody((quasar::SelectBlock *)((char *)this - 544));
}

uint64_t quasar::SelectBlock::minConfigVersion(quasar::SelectBlock *this)
{
  return 165;
}

uint64_t `virtual thunk to'quasar::SelectBlock::minConfigVersion(quasar::SelectBlock *this)
{
  return 165;
}

void quasar::ConfiguredProcessingBlock<quasar::SelectBlockOptions>::setContextProvider(uint64_t a1, uint64_t *a2)
{
  void (***v3)(uint64_t **__return_ptr);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t *v15;
  uint64_t *v16;

  v3 = (void (***)(uint64_t **__return_ptr))(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  (**v3)(&v15);
  v4 = v15;
  v5 = v16;
  if (v15 != v16)
  {
    do
    {
      v6 = *v4;
      v7 = a2[1];
      v13 = *a2;
      v14 = (std::__shared_weak_count *)v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      quasar::OptionValueBase::setContextProvider(v6, &v13);
      v10 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      ++v4;
    }
    while (v4 != v5);
    v4 = v15;
  }
  if (v4)
  {
    v16 = v4;
    operator delete(v4);
  }
}

void sub_1AD76A008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::ConfiguredProcessingBlock<quasar::SelectBlockOptions>::getOptions(uint64_t a1)
{
  return a1 + 8;
}

void `virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::SelectBlockOptions>::setContextProvider(_QWORD *a1, uint64_t *a2)
{
  quasar::ConfiguredProcessingBlock<quasar::SelectBlockOptions>::setContextProvider((uint64_t)a1 + *(_QWORD *)(*a1 - 72), a2);
}

void quasar::ProcessingBlock::compilationSpecs(_QWORD *a1@<X8>)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = a1 + 1;
}

uint64_t `virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::SelectBlockOptions>::getOptions(_QWORD *a1)
{
  return (uint64_t)a1 + *(_QWORD *)(*a1 - 104) + 8;
}

uint64_t quasar::ProcessingBlock::getOptions(quasar::ProcessingBlock *this)
{
  return 0;
}

void quasar::SelectBlock::~SelectBlock(quasar::SelectBlock *this)
{
  char **v2;
  void **v3;

  *(_QWORD *)this = off_1E5D34978;
  v2 = (char **)((char *)this + 664);
  *((_QWORD *)this + 83) = off_1E5D34A70;
  *((_QWORD *)this + 68) = &off_1E5D349D0;
  v3 = (void **)((char *)this + 640);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 631) < 0)
    operator delete(*((void **)this + 76));
  v3 = (void **)((char *)this + 584);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 575) < 0)
    operator delete(*((void **)this + 69));
  *(_QWORD *)this = off_1E5D03A18;
  *((_QWORD *)this + 83) = &unk_1E5D03AA0;
  quasar::SelectBlockOptions::~SelectBlockOptions((quasar::SelectBlock *)((char *)this + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v2);
}

{
  char **v2;
  void **v3;

  *(_QWORD *)this = off_1E5D34978;
  v2 = (char **)((char *)this + 664);
  *((_QWORD *)this + 83) = off_1E5D34A70;
  *((_QWORD *)this + 68) = &off_1E5D349D0;
  v3 = (void **)((char *)this + 640);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 631) < 0)
    operator delete(*((void **)this + 76));
  v3 = (void **)((char *)this + 584);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 575) < 0)
    operator delete(*((void **)this + 69));
  *(_QWORD *)this = off_1E5D03A18;
  *((_QWORD *)this + 83) = &unk_1E5D03AA0;
  quasar::SelectBlockOptions::~SelectBlockOptions((quasar::SelectBlock *)((char *)this + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v2);
  MEMORY[0x1AF44D190](this, 0x10F3C40F9245A62);
}

const char *quasar::SelectBlock::blockType(quasar::SelectBlock *this)
{
  return "SelectBlock";
}

_QWORD *quasar::SelectBlock::inputs@<X0>(quasar::SelectBlock *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = operator new(0x10uLL);
  a2[1] = result + 2;
  a2[2] = result + 2;
  *result = (char *)this + 552;
  result[1] = (char *)this + 608;
  *a2 = result;
  return result;
}

_QWORD *`non-virtual thunk to'quasar::SelectBlock::inputs@<X0>(quasar::SelectBlock *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = operator new(0x10uLL);
  a2[1] = result + 2;
  a2[2] = result + 2;
  *result = (char *)this + 8;
  result[1] = (char *)this + 64;
  *a2 = result;
  return result;
}

void `non-virtual thunk to'quasar::SelectBlock::~SelectBlock(quasar::SelectBlock *this)
{
  _QWORD *v2;
  char **v3;
  void **v4;

  v2 = (_QWORD *)((char *)this - 544);
  *((_QWORD *)this - 68) = off_1E5D34978;
  *((_QWORD *)this + 15) = off_1E5D34A70;
  v3 = (char **)((char *)this + 120);
  *(_QWORD *)this = &off_1E5D349D0;
  v4 = (void **)((char *)this + 96);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  v4 = (void **)((char *)this + 40);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  *v2 = off_1E5D03A18;
  *((_QWORD *)this + 15) = &unk_1E5D03AA0;
  quasar::SelectBlockOptions::~SelectBlockOptions((quasar::SelectBlock *)((char *)this - 536));
  quasar::ProcessingBlock::~ProcessingBlock(v3);
}

{
  _QWORD *v2;
  char **v3;
  void **v4;

  v2 = (_QWORD *)((char *)this - 544);
  *((_QWORD *)this - 68) = off_1E5D34978;
  *((_QWORD *)this + 15) = off_1E5D34A70;
  v3 = (char **)((char *)this + 120);
  *(_QWORD *)this = &off_1E5D349D0;
  v4 = (void **)((char *)this + 96);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  v4 = (void **)((char *)this + 40);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  *v2 = off_1E5D03A18;
  *((_QWORD *)this + 15) = &unk_1E5D03AA0;
  quasar::SelectBlockOptions::~SelectBlockOptions((quasar::SelectBlock *)((char *)this - 536));
  quasar::ProcessingBlock::~ProcessingBlock(v3);
  MEMORY[0x1AF44D190](v2, 0x10F3C40F9245A62);
}

void `virtual thunk to'quasar::SelectBlock::~SelectBlock(quasar::SelectBlock *this)
{
  char *v1;
  void **v2;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = off_1E5D34978;
  *((_QWORD *)v1 + 83) = off_1E5D34A70;
  *((_QWORD *)v1 + 68) = &off_1E5D349D0;
  v2 = (void **)(v1 + 640);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (v1[631] < 0)
    operator delete(*((void **)v1 + 76));
  v2 = (void **)(v1 + 584);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (v1[575] < 0)
    operator delete(*((void **)v1 + 69));
  *(_QWORD *)v1 = off_1E5D03A18;
  *((_QWORD *)v1 + 83) = &unk_1E5D03AA0;
  quasar::SelectBlockOptions::~SelectBlockOptions((quasar::SelectBlockOptions *)(v1 + 8));
  quasar::ProcessingBlock::~ProcessingBlock((char **)v1 + 83);
}

{
  char *v1;
  void **v2;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = off_1E5D34978;
  *((_QWORD *)v1 + 83) = off_1E5D34A70;
  *((_QWORD *)v1 + 68) = &off_1E5D349D0;
  v2 = (void **)(v1 + 640);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (v1[631] < 0)
    operator delete(*((void **)v1 + 76));
  v2 = (void **)(v1 + 584);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (v1[575] < 0)
    operator delete(*((void **)v1 + 69));
  *(_QWORD *)v1 = off_1E5D03A18;
  *((_QWORD *)v1 + 83) = &unk_1E5D03AA0;
  quasar::SelectBlockOptions::~SelectBlockOptions((quasar::SelectBlockOptions *)(v1 + 8));
  quasar::ProcessingBlock::~ProcessingBlock((char **)v1 + 83);
  MEMORY[0x1AF44D190](v1, 0x10F3C40F9245A62);
}

const char *`virtual thunk to'quasar::SelectBlock::blockType(quasar::SelectBlock *this)
{
  return "SelectBlock";
}

void quasar::QuasarErrorMessage::~QuasarErrorMessage(quasar::QuasarErrorMessage *this)
{
  uint64_t (*v2)();
  uint64_t v3;
  uint64_t v4;
  std::runtime_error *exception;
  std::string __p;

  v2 = quasar::QuasarErrorMessage::logger;
  std::stringbuf::str();
  ((void (*)(std::string *, _QWORD))v2)(&__p, *((_QWORD *)this + 33));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (getenv("QSR_CRASH_ON_WARN"))
  {
    if (std::uncaught_exception())
      abort();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &__p);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v3 = MEMORY[0x1E0DE4F60];
  v4 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)this = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = *(_QWORD *)(v3 + 24);
  *((_QWORD *)this + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF44D094]((char *)this + 112);
}

void sub_1AD76A6A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  quasar::QuasarMessage *v15;
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      quasar::QuasarMessage::~QuasarMessage(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void quasar::QuasarMessage::~QuasarMessage(quasar::QuasarMessage *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)this = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *((_QWORD *)this + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF44D094]((char *)this + 112);
}

void std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)(v4 - 200));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void quasar::TranslationPhraseInternal::~TranslationPhraseInternal(quasar::TranslationPhraseInternal *this)
{
  void **v2;

  quasar::MetaInfo::~MetaInfo((quasar::MetaInfo::Impl **)this + 24);
  if (*((char *)this + 191) < 0)
    operator delete(*((void **)this + 21));
  v2 = (void **)((char *)this + 136);
  std::vector<quasar::TranslationTokenInternal>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((_BYTE *)this + 120))
  {
    v2 = (void **)((char *)this + 96);
    std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100](&v2);
  }
  if (*((_BYTE *)this + 88) && *((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  v2 = (void **)((char *)this + 16);
  std::vector<quasar::TranslationToken>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::vector<quasar::TranslationTokenInternal>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136;
        std::allocator<quasar::TranslationTokenInternal>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::TranslationTokenInternal>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;

  v3 = *(void **)(a2 + 104);
  if (v3)
  {
    *(_QWORD *)(a2 + 112) = v3;
    operator delete(v3);
  }
  if (*(char *)(a2 + 95) < 0)
    operator delete(*(void **)(a2 + 72));
  v4 = *(void **)(a2 + 32);
  if (v4)
  {
    *(_QWORD *)(a2 + 40) = v4;
    operator delete(v4);
  }
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void **v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 40;
        v7 = (void **)(v4 - 24);
        std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100](&v7);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v4 - 24);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<quasar::TranslationToken>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        std::allocator<quasar::TranslationToken>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::TranslationToken>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 32);
  if (v3)
  {
    *(_QWORD *)(a2 + 40) = v3;
    operator delete(v3);
  }
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void quasar::SelectBlockOptions::~SelectBlockOptions(quasar::SelectBlockOptions *this)
{
  *(_QWORD *)this = &off_1E5D36BE8;
  *((_QWORD *)this + 47) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 512, *((_QWORD **)this + 65));
  if (*((char *)this + 503) < 0)
    operator delete(*((void **)this + 60));
  *((_QWORD *)this + 47) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 464);
  if (*((char *)this + 455) < 0)
    operator delete(*((void **)this + 54));
  if (*((char *)this + 431) < 0)
    operator delete(*((void **)this + 51));
  if (*((char *)this + 407) < 0)
    operator delete(*((void **)this + 48));
  *((_QWORD *)this + 22) = &unk_1E5D347B8;
  std::__tree<std::__value_type<std::string,quasar::PTree>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PTree>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::PTree>>>::destroy((uint64_t)this + 352, *((_QWORD **)this + 45));
  quasar::PTree::~PTree((quasar::SelectBlockOptions *)((char *)this + 280));
  *((_QWORD *)this + 22) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 264);
  if (*((char *)this + 255) < 0)
    operator delete(*((void **)this + 29));
  if (*((char *)this + 231) < 0)
    operator delete(*((void **)this + 26));
  if (*((char *)this + 207) < 0)
    operator delete(*((void **)this + 23));
  *((_QWORD *)this + 2) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 152, *((_QWORD **)this + 20));
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  *((_QWORD *)this + 2) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

void quasar::OptionValue<std::string>::updateOptionalFromPtree(std::string *a1, uint64_t a2, const void **a3)
{
  std::string::size_type *p_size;
  size_t v6;
  std::string *v7;
  const void *v8;
  int v9;
  const std::string::value_type *size;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string v14;
  std::string __p;
  std::string v16;
  char v17;

  p_size = &a1->__r_.__value_.__l.__size_;
  quasar::getOptional<std::string>(&v16, a2, &a1->__r_.__value_.__r.__words[1]);
  if (*((char *)a3 + 23) >= 0)
    v6 = *((unsigned __int8 *)a3 + 23);
  else
    v6 = (size_t)a3[1];
  v7 = &v14;
  std::string::basic_string[abi:ne180100]((uint64_t)&v14, v6 + 1);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v14.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*((char *)a3 + 23) >= 0)
      v8 = a3;
    else
      v8 = *a3;
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 46;
  v9 = a1[1].__r_.__value_.__s.__data_[7];
  if (v9 >= 0)
    size = (const std::string::value_type *)p_size;
  else
    size = (const std::string::value_type *)a1->__r_.__value_.__l.__size_;
  if (v9 >= 0)
    v11 = a1[1].__r_.__value_.__s.__data_[7];
  else
    v11 = a1->__r_.__value_.__r.__words[2];
  v12 = std::string::append(&v14, size, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  quasar::OptionValue<std::string>::updateOptional(a1, &v16, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (v17)
  {
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void sub_1AD76ADD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a28)
  {
    if (a27 < 0)
      operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OptionValue<std::string>::debugInfo(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  BOOL v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD v39[2];
  _QWORD v40[11];
  char v41;
  uint64_t v42;

  v2 = quasar::OptionValue<std::string>::fallback(a1);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v39);
  v3 = *(char *)(a1 + 31);
  if (v3 >= 0)
    v4 = a1 + 8;
  else
    v4 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a1 + 31);
  else
    v5 = *(_QWORD *)(a1 + 16);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v4, v5);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
  v8 = *(char *)(v2 + 127);
  if (v8 >= 0)
    v9 = v2 + 104;
  else
    v9 = *(_QWORD *)(v2 + 104);
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(v2 + 127);
  else
    v10 = *(_QWORD *)(v2 + 112);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" (", 2);
  v15 = *(_QWORD *)(v2 + 32);
  v14 = v2 + 32;
  v13 = v15;
  v16 = *(char *)(v14 + 23);
  if (v16 >= 0)
    v17 = v14;
  else
    v17 = v13;
  if (v16 >= 0)
    v18 = *(unsigned __int8 *)(v14 + 23);
  else
    v18 = *(_QWORD *)(v14 + 8);
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v17, v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)")", 1);
  if (*(_QWORD *)(a1 + 152))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" overrides: [", 13);
    v20 = *(_QWORD **)(a1 + 136);
    v21 = (_QWORD *)(a1 + 144);
    if (v20 != (_QWORD *)(a1 + 144))
    {
      do
      {
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"\"", 1);
        v23 = *((char *)v20 + 55);
        if (v23 >= 0)
          v24 = (uint64_t)(v20 + 4);
        else
          v24 = v20[4];
        if (v23 >= 0)
          v25 = *((unsigned __int8 *)v20 + 55);
        else
          v25 = v20[5];
        v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
        v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"\": ", 3);
        v28 = *((char *)v20 + 79);
        if (v28 >= 0)
          v29 = (uint64_t)(v20 + 7);
        else
          v29 = v20[7];
        if (v28 >= 0)
          v30 = *((unsigned __int8 *)v20 + 79);
        else
          v30 = v20[8];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, v29, v30);
        v31 = (_QWORD *)*v21;
        v32 = (_QWORD *)(a1 + 144);
        if (*v21)
        {
          do
          {
            v33 = v31;
            v31 = (_QWORD *)v31[1];
          }
          while (v31);
        }
        else
        {
          do
          {
            v33 = (_QWORD *)v32[2];
            v34 = *v33 == (_QWORD)v32;
            v32 = v33;
          }
          while (v34);
        }
        if (v20 != v33)
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)", ", 2);
        v35 = (_QWORD *)v20[1];
        if (v35)
        {
          do
          {
            v36 = v35;
            v35 = (_QWORD *)*v35;
          }
          while (v35);
        }
        else
        {
          do
          {
            v36 = (_QWORD *)v20[2];
            v34 = *v36 == (_QWORD)v20;
            v20 = v36;
          }
          while (!v34);
        }
        v20 = v36;
      }
      while (v36 != v21);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"]", 1);
  }
  std::stringbuf::str();
  v39[0] = *MEMORY[0x1E0DE4F50];
  v37 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v39 + *(_QWORD *)(v39[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v40[0] = v37;
  v40[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v41 < 0)
    operator delete((void *)v40[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v42);
}

void sub_1AD76B0C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::OptionValue<std::string>::addOverride(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  std::string __p;
  char v7;
  _QWORD v8[2];

  v8[0] = a2;
  v8[1] = a3;
  quasar::getOptional<std::string>(&__p, a4, a1 + 8);
  if (v7)
  {
    v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string_view>(a1 + 136, (uint64_t)v8);
    if (a1 + 144 == v5)
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_impl<std::string_view &,std::string&>((uint64_t **)(a1 + 136), (uint64_t *)v5, (uint64_t)v8, (__int128 *)&__p);
    else
      std::string::operator=((std::string *)(v5 + 56), &__p);
    if (v7)
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1AD76B178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OptionValue<std::string>::isOverridable()
{
  return 0;
}

std::string *quasar::OptionValue<std::string>::updateOptional(std::string *result, const std::string *a2, const std::string *a3)
{
  std::string *v4;

  if (a2[1].__r_.__value_.__s.__data_[0])
  {
    v4 = result;
    std::string::operator=((std::string *)((char *)result + 104), a2);
    return std::string::operator=((std::string *)((char *)v4 + 32), a3);
  }
  return result;
}

uint64_t quasar::OptionValue<std::string>::fallback(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  int v3;
  uint64_t *v4;
  int v5;

  do
  {
    v1 = a1;
    a1 = *(_QWORD *)(a1 + 128);
    if (!a1)
      break;
    v2 = (uint64_t *)(v1 + 32);
    v3 = *(char *)(v1 + 55);
    if (v3 < 0)
    {
      if (*(_QWORD *)(v1 + 40) != 9)
        return v1;
      v2 = (uint64_t *)*v2;
    }
    else if (v3 != 9)
    {
      return v1;
    }
    v4 = (uint64_t *)*v2;
    v5 = *((unsigned __int8 *)v2 + 8);
  }
  while (v4 == (uint64_t *)0x746C75616665643CLL && v5 == 62);
  return v1;
}

uint64_t std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string_view>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = a1 + 8;
  do
  {
    v7 = std::less<void>::operator()[abi:ne180100]<std::string const&,std::string_view const&>(v5, (const void **)(v3 + 32), a2);
    v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2
    || std::less<void>::operator()[abi:ne180100]<std::string_view const&,std::string const&>(v5, a2, (const void **)(v6 + 32)))
  {
    return v2;
  }
  return v6;
}

uint64_t std::less<void>::operator()[abi:ne180100]<std::string const&,std::string_view const&>(uint64_t a1, const void **a2, uint64_t a3)
{
  int v3;
  const void *v4;
  size_t v5;
  const void *v6;
  size_t v7;
  size_t v8;
  int v9;
  unsigned int v10;

  v3 = *((char *)a2 + 23);
  if (v3 >= 0)
    v4 = a2;
  else
    v4 = *a2;
  if (v3 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  v6 = *(const void **)a3;
  v7 = *(_QWORD *)(a3 + 8);
  if (v7 >= v5)
    v8 = v5;
  else
    v8 = *(_QWORD *)(a3 + 8);
  v9 = memcmp(v4, v6, v8);
  if (v5 < v7)
    v10 = -1;
  else
    v10 = 1;
  if (v5 == v7)
    v10 = 0;
  if (v9)
    v10 = v9;
  return v10 >> 31;
}

uint64_t std::less<void>::operator()[abi:ne180100]<std::string_view const&,std::string const&>(uint64_t a1, uint64_t a2, const void **a3)
{
  const void *v3;
  size_t v4;
  int v5;
  const void *v6;
  size_t v7;
  size_t v8;
  int v9;
  unsigned int v10;

  v3 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *((char *)a3 + 23);
  if (v5 >= 0)
    v6 = a3;
  else
    v6 = *a3;
  if (v5 >= 0)
    v7 = *((unsigned __int8 *)a3 + 23);
  else
    v7 = (size_t)a3[1];
  if (v7 >= v4)
    v8 = v4;
  else
    v8 = v7;
  v9 = memcmp(v3, v6, v8);
  if (v4 < v7)
    v10 = -1;
  else
    v10 = 1;
  if (v4 == v7)
    v10 = 0;
  if (v9)
    v10 = v9;
  return v10 >> 31;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_impl<std::string_view &,std::string&>(uint64_t **a1, uint64_t *a2, uint64_t a3, __int128 *a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v9;
  const void **v10;
  uint64_t *v11[3];

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::string_view &,std::string&>((uint64_t)a1, a3, a4, (uint64_t)v11);
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v10, &v9, (const void **)v11[0] + 4);
  v7 = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v10, v6, v11[0]);
    v7 = v11[0];
    v11[0] = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  return v7;
}

void sub_1AD76B414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::string_view &,std::string&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 8;
  v8 = (char *)operator new(0x50uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  result = std::pair<std::string const,std::string>::pair[abi:ne180100]<std::string_view &,std::string&,0>((std::string *)(v8 + 32), a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1AD76B484(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100]<std::string_view &,std::string&,0>(std::string *__dst, uint64_t a2, __int128 *a3)
{
  size_t v4;
  const void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  __int128 v11;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = *(const void **)a2;
  if (v4 >= 0x17)
  {
    v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v8 = v4 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    __dst->__r_.__value_.__l.__size_ = v4;
    __dst->__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst->__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst->__r_.__value_.__s + 23) = v4;
  v7 = __dst;
  if (v4)
LABEL_8:
    memmove(v7, v6, v4);
  *((_BYTE *)v7 + v4) = 0;
  v10 = __dst + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v11 = *a3;
    __dst[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  return __dst;
}

void sub_1AD76B570(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void quasar::OptionValue<quasar::PTree>::updateOptionalFromPtree(std::string *a1, uint64_t a2, const void **a3)
{
  std::string::size_type *p_size;
  size_t v6;
  std::string *v7;
  const void *v8;
  int v9;
  const std::string::value_type *size;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string v14;
  std::string __p;
  _BYTE v16[79];

  p_size = &a1->__r_.__value_.__l.__size_;
  quasar::getOptional<quasar::PTree>(a2, (uint64_t)&a1->__r_.__value_.__l.__size_, v16);
  if (*((char *)a3 + 23) >= 0)
    v6 = *((unsigned __int8 *)a3 + 23);
  else
    v6 = (size_t)a3[1];
  v7 = &v14;
  std::string::basic_string[abi:ne180100]((uint64_t)&v14, v6 + 1);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v14.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*((char *)a3 + 23) >= 0)
      v8 = a3;
    else
      v8 = *a3;
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 46;
  v9 = a1[1].__r_.__value_.__s.__data_[7];
  if (v9 >= 0)
    size = (const std::string::value_type *)p_size;
  else
    size = (const std::string::value_type *)a1->__r_.__value_.__l.__size_;
  if (v9 >= 0)
    v11 = a1[1].__r_.__value_.__s.__data_[7];
  else
    v11 = a1->__r_.__value_.__r.__words[2];
  v12 = std::string::append(&v14, size, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  quasar::OptionValue<quasar::PTree>::updateOptional(a1, (uint64_t)v16, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (v16[64])
    quasar::PTree::~PTree((quasar::PTree *)v16);
}

void sub_1AD76B6F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a31)
    quasar::PTree::~PTree((quasar::PTree *)&a23);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OptionValue<quasar::PTree>::debugInfo(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD v33[2];
  _QWORD v34[11];
  char v35;
  uint64_t v36;

  v2 = quasar::OptionValue<quasar::PTree>::fallback(a1);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v33);
  v3 = *(char *)(a1 + 31);
  if (v3 >= 0)
    v4 = a1 + 8;
  else
    v4 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a1 + 31);
  else
    v5 = *(_QWORD *)(a1 + 16);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, v4, v5);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
  v8 = quasar::operator<<(v7, (quasar::PTree *)(v2 + 104));
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" (", 2);
  v12 = *(_QWORD *)(v2 + 32);
  v11 = v2 + 32;
  v10 = v12;
  v13 = *(char *)(v11 + 23);
  if (v13 >= 0)
    v14 = v11;
  else
    v14 = v10;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(v11 + 23);
  else
    v15 = *(_QWORD *)(v11 + 8);
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v14, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)")", 1);
  if (*(_QWORD *)(a1 + 192))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" overrides: [", 13);
    v17 = *(_QWORD **)(a1 + 176);
    v18 = (_QWORD *)(a1 + 184);
    if (v17 != (_QWORD *)(a1 + 184))
    {
      do
      {
        v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"\"", 1);
        v20 = *((char *)v17 + 55);
        if (v20 >= 0)
          v21 = (uint64_t)(v17 + 4);
        else
          v21 = v17[4];
        if (v20 >= 0)
          v22 = *((unsigned __int8 *)v17 + 55);
        else
          v22 = v17[5];
        v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
        v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"\": ", 3);
        quasar::operator<<(v24, (quasar::PTree *)(v17 + 7));
        v25 = (_QWORD *)*v18;
        v26 = (_QWORD *)(a1 + 184);
        if (*v18)
        {
          do
          {
            v27 = v25;
            v25 = (_QWORD *)v25[1];
          }
          while (v25);
        }
        else
        {
          do
          {
            v27 = (_QWORD *)v26[2];
            v28 = *v27 == (_QWORD)v26;
            v26 = v27;
          }
          while (v28);
        }
        if (v17 != v27)
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", ", 2);
        v29 = (_QWORD *)v17[1];
        if (v29)
        {
          do
          {
            v30 = v29;
            v29 = (_QWORD *)*v29;
          }
          while (v29);
        }
        else
        {
          do
          {
            v30 = (_QWORD *)v17[2];
            v28 = *v30 == (_QWORD)v17;
            v17 = v30;
          }
          while (!v28);
        }
        v17 = v30;
      }
      while (v30 != v18);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"]", 1);
  }
  std::stringbuf::str();
  v33[0] = *MEMORY[0x1E0DE4F50];
  v31 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v33 + *(_QWORD *)(v33[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v34[0] = v31;
  v34[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v35 < 0)
    operator delete((void *)v34[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v36);
}

void sub_1AD76B9A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::OptionValue<quasar::PTree>::addOverride(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  std::string v9;
  std::string *v10;
  std::string *v11;
  char v12;
  char v13;
  _QWORD v14[2];

  v14[0] = a2;
  v14[1] = a3;
  quasar::getOptional<quasar::PTree>(a4, a1 + 8, &v8);
  if (v13)
  {
    v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string_view>(a1 + 176, (uint64_t)v14);
    v6 = v5;
    if (a1 + 184 == v5)
    {
      std::__tree<std::__value_type<std::string,quasar::PTree>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PTree>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::PTree>>>::__emplace_hint_unique_impl<std::string_view &,quasar::PTree&>((uint64_t **)(a1 + 176), (uint64_t *)v5, (uint64_t)v14, (uint64_t)&v8);
    }
    else
    {
      *(_DWORD *)(v5 + 56) = v8;
      v7 = (int *)(v5 + 56);
      std::string::operator=((std::string *)(v5 + 64), &v9);
      if (v7 != &v8)
        std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(v6 + 88, v10, v11, 0x2E8BA2E8BA2E8BA3 * (((char *)v11 - (char *)v10) >> 3));
      *(_BYTE *)(v6 + 112) = v12;
    }
    if (v13)
      quasar::PTree::~PTree((quasar::PTree *)&v8);
  }
}

void sub_1AD76BAA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a18)
    quasar::PTree::~PTree((quasar::PTree *)&a10);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OptionValue<quasar::PTree>::isOverridable()
{
  return 0;
}

void std::__tree<std::__value_type<std::string,quasar::PTree>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PTree>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::PTree>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,quasar::PTree>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PTree>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::PTree>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,quasar::PTree>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PTree>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::PTree>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::PTree>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::PTree>,0>(uint64_t a1)
{
  quasar::PTree::~PTree((quasar::PTree *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

std::string *quasar::OptionValue<quasar::PTree>::updateOptional(std::string *result, uint64_t a2, const std::string *a3)
{
  std::string *v5;
  char *v6;

  if (*(_BYTE *)(a2 + 64))
  {
    v5 = result;
    LODWORD(result[4].__r_.__value_.__r.__words[1]) = *(_DWORD *)a2;
    v6 = &result[4].__r_.__value_.__s.__data_[8];
    std::string::operator=((std::string *)((char *)result + 112), (const std::string *)(a2 + 8));
    if (v6 != (char *)a2)
      std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((uint64_t)&v5[5].__r_.__value_.__r.__words[2], *(std::string **)(a2 + 32), *(std::string **)(a2 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
    v5[6].__r_.__value_.__s.__data_[16] = *(_BYTE *)(a2 + 56);
    return std::string::operator=((std::string *)((char *)v5 + 32), a3);
  }
  return result;
}

void std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(uint64_t a1, std::string *a2, std::string *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<std::pair<std::string,quasar::PTree>>::__vdeallocate((void **)a1);
    if (a4 > 0x2E8BA2E8BA2E8BALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x5D1745D1745D1746 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)) >= 0x1745D1745D1745DLL)
      v11 = 0x2E8BA2E8BA2E8BALL;
    else
      v11 = v10;
    std::vector<std::pair<std::string,quasar::PTree>>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,quasar::PTree>>,std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(v8, (uint64_t)a2, (uint64_t)a3, *(std::string **)(a1 + 8));
    goto LABEL_11;
  }
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = (std::string *)((char *)a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,quasar::PTree> *,std::pair<std::string,quasar::PTree> *,std::pair<std::string,quasar::PTree> *>((int)&v17, a2, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,quasar::PTree>>,std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(v8, (uint64_t)v13, (uint64_t)a3, *(std::string **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,quasar::PTree> *,std::pair<std::string,quasar::PTree> *,std::pair<std::string,quasar::PTree> *>((int)&v18, a2, a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 88;
      std::allocator<std::pair<std::string,quasar::PTree>>::destroy[abi:ne180100](v8, v16);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1AD76BD74(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1AD76BD7C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,quasar::PTree>>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 88;
        std::allocator<std::pair<std::string,quasar::PTree>>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<std::pair<std::string,quasar::PTree>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x2E8BA2E8BA2E8BBLL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,quasar::PTree>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[88 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,quasar::PTree>>,std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(uint64_t a1, uint64_t a2, uint64_t a3, std::string *a4)
{
  std::string *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  std::string *v10;
  std::string *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::pair<std::string,quasar::PTree>::pair[abi:ne180100](v4);
      v6 += 88;
      v4 = (std::string *)((char *)v11 + 88);
      v11 = (std::string *)((char *)v11 + 88);
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::PTree>>,std::pair<std::string,quasar::PTree>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1AD76BED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::PTree>>,std::pair<std::string,quasar::PTree>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,quasar::PTree>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 6);
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a2 + 4), *((_QWORD *)a2 + 5));
  }
  else
  {
    v5 = a2[2];
    this[2].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 6);
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = v5;
  }
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((std::string *)((char *)this + 56), *((_QWORD *)a2 + 7), *((_QWORD *)a2 + 8), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3));
  this[3].__r_.__value_.__s.__data_[8] = *((_BYTE *)a2 + 80);
  return this;
}

void sub_1AD76BFA8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(std::string *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::pair<std::string,quasar::PTree>>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,quasar::PTree>>,std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1AD76C040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::pair<std::string,quasar::PTree>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,quasar::PTree>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        std::allocator<std::pair<std::string,quasar::PTree>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::pair<std::string,quasar::PTree>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  quasar::PTree::~PTree((quasar::PTree *)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::PTree>>,std::pair<std::string,quasar::PTree>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::PTree>>,std::pair<std::string,quasar::PTree>*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::PTree>>,std::pair<std::string,quasar::PTree>*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 88;
      std::allocator<std::pair<std::string,quasar::PTree>>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,quasar::PTree> *,std::pair<std::string,quasar::PTree> *,std::pair<std::string,quasar::PTree> *>(int a1, std::string *__str, std::string *a3, std::string *this)
{
  std::string *v5;
  std::string *v6;

  v5 = __str;
  if (__str == a3)
    return __str;
  v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    LODWORD(this[1].__r_.__value_.__l.__data_) = v5[1].__r_.__value_.__l.__data_;
    std::string::operator=((std::string *)((char *)this + 32), (std::string *)((char *)v5 + 32));
    if (this != v5)
      std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&this[2].__r_.__value_.__r.__words[1]);
    this[3].__r_.__value_.__s.__data_[8] = v5[3].__r_.__value_.__s.__data_[8];
    this = (std::string *)((char *)this + 88);
    v5 = (std::string *)((char *)v5 + 88);
  }
  while (v5 != v6);
  return v6;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,quasar::PTree>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(88 * a2);
}

uint64_t quasar::OptionValue<quasar::PTree>::fallback(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  int v3;
  uint64_t *v4;
  int v5;

  do
  {
    v1 = a1;
    a1 = *(_QWORD *)(a1 + 168);
    if (!a1)
      break;
    v2 = (uint64_t *)(v1 + 32);
    v3 = *(char *)(v1 + 55);
    if (v3 < 0)
    {
      if (*(_QWORD *)(v1 + 40) != 9)
        return v1;
      v2 = (uint64_t *)*v2;
    }
    else if (v3 != 9)
    {
      return v1;
    }
    v4 = (uint64_t *)*v2;
    v5 = *((unsigned __int8 *)v2 + 8);
  }
  while (v4 == (uint64_t *)0x746C75616665643CLL && v5 == 62);
  return v1;
}

_QWORD *quasar::operator<<(_QWORD *a1, quasar::PTree *this)
{
  uint64_t String;
  int v5;
  uint64_t v6;
  uint64_t v7;
  void *p_p;
  uint64_t v9;
  void *__p;
  uint64_t v12;
  uint64_t v13;

  switch(quasar::PTree::getDataType(this))
  {
    case 0u:
      String = quasar::PTree::getString(this);
      v5 = *(char *)(String + 23);
      if (v5 >= 0)
        v6 = String;
      else
        v6 = *(_QWORD *)String;
      if (v5 >= 0)
        v7 = *(unsigned __int8 *)(String + 23);
      else
        v7 = *(_QWORD *)(String + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v6, v7);
      break;
    case 1u:
      quasar::PTree::getDouble(this);
      std::ostream::operator<<();
      break;
    case 2u:
      quasar::PTree::getInt<int>((uint64_t)this);
      std::ostream::operator<<();
      break;
    case 3u:
      quasar::PTree::getBool(this);
      std::ostream::operator<<();
      break;
    case 4u:
      __p = 0;
      v12 = 0;
      v13 = 0;
      quasar::ptree2Json(this, (uint64_t)&__p);
      if (v13 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if (v13 >= 0)
        v9 = HIBYTE(v13);
      else
        v9 = v12;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)p_p, v9);
      if (SHIBYTE(v13) < 0)
        operator delete(__p);
      break;
    default:
      return a1;
  }
  return a1;
}

void sub_1AD76C414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,quasar::PTree>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PTree>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::PTree>>>::__emplace_hint_unique_impl<std::string_view &,quasar::PTree&>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v9;
  const void **v10;
  uint64_t *v11[3];

  std::__tree<std::__value_type<std::string,quasar::PTree>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PTree>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::PTree>>>::__construct_node<std::string_view &,quasar::PTree&>((uint64_t)a1, a3, a4, (uint64_t)v11);
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v10, &v9, (const void **)v11[0] + 4);
  v7 = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v10, v6, v11[0]);
    v7 = v11[0];
    v11[0] = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::PTree>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::PTree>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  return v7;
}

void sub_1AD76C4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::PTree>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::PTree>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

char *std::__tree<std::__value_type<std::string,quasar::PTree>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PTree>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::PTree>>>::__construct_node<std::string_view &,quasar::PTree&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  char *result;

  v7 = a1 + 8;
  v8 = (char *)operator new(0x78uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  result = std::pair<std::string const,quasar::PTree>::pair[abi:ne180100]<std::string_view &,quasar::PTree&,0>(v8 + 32, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1AD76C524(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::PTree>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::PTree>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

char *std::pair<std::string const,quasar::PTree>::pair[abi:ne180100]<std::string_view &,quasar::PTree&,0>(char *__dst, uint64_t a2, uint64_t a3)
{
  size_t v4;
  const void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = *(const void **)a2;
  if (v4 >= 0x17)
  {
    v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v8 = v4 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)__dst + 1) = v4;
    *((_QWORD *)__dst + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)__dst = v7;
    goto LABEL_8;
  }
  __dst[23] = v4;
  v7 = __dst;
  if (v4)
LABEL_8:
    memmove(v7, v6, v4);
  *((_BYTE *)v7 + v4) = 0;
  *((_DWORD *)__dst + 6) = *(_DWORD *)a3;
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(__dst + 32), *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v10 = *(_OWORD *)(a3 + 8);
    *((_QWORD *)__dst + 6) = *(_QWORD *)(a3 + 24);
    *((_OWORD *)__dst + 2) = v10;
  }
  *((_QWORD *)__dst + 7) = 0;
  *((_QWORD *)__dst + 8) = 0;
  *((_QWORD *)__dst + 9) = 0;
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((std::string *)(__dst + 56), *(_QWORD *)(a3 + 32), *(_QWORD *)(a3 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a3 + 40) - *(_QWORD *)(a3 + 32)) >> 3));
  __dst[80] = *(_BYTE *)(a3 + 56);
  return __dst;
}

void sub_1AD76C658(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::PTree>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::PTree>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::PTree>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t quasar::OptionValue<std::string>::value(_QWORD *a1)
{
  uint64_t v2;
  const void ****v3;
  std::__shared_weak_count *v4;
  const void ***v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  const void **v10;
  const void **v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  v2 = quasar::OptionValue<std::string>::fallback((uint64_t)a1) + 104;
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 32))(a1))
  {
    v3 = (const void ****)a1[11];
    v4 = (std::__shared_weak_count *)v3[1];
    if (v4)
    {
      v5 = *v3;
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v7 = __ldxr(p_shared_weak_owners);
      while (__stxr(v7 + 1, p_shared_weak_owners));
      v8 = std::__shared_weak_count::lock(v4);
      if (!v8)
      {
        v9 = v4;
        goto LABEL_17;
      }
      v9 = v8;
      std::__shared_weak_count::__release_weak(v4);
      if (v5)
      {
        v10 = *v5;
        v11 = v5[1];
        if (*v5 != v11)
        {
          v12 = (uint64_t)(a1 + 17);
          v13 = a1 + 18;
          do
          {
            v14 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(v12, v10);
            if (v13 != (_QWORD *)v14)
              v2 = v14 + 56;
            v10 += 3;
          }
          while (v10 != v11);
        }
      }
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
LABEL_17:
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  return v2;
}

void sub_1AD76C7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::OptionValue<quasar::PTree>::value(_QWORD *a1)
{
  uint64_t v2;
  const void ****v3;
  std::__shared_weak_count *v4;
  const void ***v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  const void **v10;
  const void **v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  v2 = quasar::OptionValue<quasar::PTree>::fallback((uint64_t)a1) + 104;
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 32))(a1))
  {
    v3 = (const void ****)a1[11];
    v4 = (std::__shared_weak_count *)v3[1];
    if (v4)
    {
      v5 = *v3;
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v7 = __ldxr(p_shared_weak_owners);
      while (__stxr(v7 + 1, p_shared_weak_owners));
      v8 = std::__shared_weak_count::lock(v4);
      if (!v8)
      {
        v9 = v4;
        goto LABEL_17;
      }
      v9 = v8;
      std::__shared_weak_count::__release_weak(v4);
      if (v5)
      {
        v10 = *v5;
        v11 = v5[1];
        if (*v5 != v11)
        {
          v12 = (uint64_t)(a1 + 22);
          v13 = a1 + 23;
          do
          {
            v14 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(v12, v10);
            if (v13 != (_QWORD *)v14)
              v2 = v14 + 56;
            v10 += 3;
          }
          while (v10 != v11);
        }
      }
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
LABEL_17:
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  return v2;
}

void sub_1AD76C8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineAEDRescoringDecoder::OnlineAEDRescoringDecoder(uint64_t a1, __int128 *a2)
{
  uint64_t v3;

  v3 = quasar::CTCAlignedDecoder::CTCAlignedDecoder(a1, a2);
  *(_QWORD *)v3 = &off_1E5D39960;
  *(_DWORD *)(v3 + 472) = 32;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v3 + 480), "");
  *(_QWORD *)(a1 + 504) = 0x3F8000003E99999ALL;
  *(_DWORD *)(a1 + 512) = 1065353216;
  *(_BYTE *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 544), "decrease-by-one");
  return a1;
}

void sub_1AD76C998(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v4);
  if (*(char *)(v1 + 503) < 0)
    operator delete(*v2);
  quasar::CTCAlignedDecoder::~CTCAlignedDecoder((void **)v1);
  _Unwind_Resume(a1);
}

void quasar::CTCAlignedDecoder::~CTCAlignedDecoder(void **this)
{
  *this = &off_1E5CFF0E0;
  if (*((char *)this + 471) < 0)
    operator delete(this[56]);
  quasar::Decoder::~Decoder(this);
}

void quasar::OnlineAEDRescoringDecoder::finishInit(quasar::OnlineAEDRescoringDecoder *this)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<kaldi::quasar::CEAttnEncoderDecoder,std::allocator<kaldi::quasar::CEAttnEncoderDecoder>,std::string &,void>(&v5);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 520, &v5);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v5 + 1);
  if (*((_QWORD *)&v5 + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v5 + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

uint64_t std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

uint64_t quasar::OnlineAEDRescoringDecoder::supportsEager(quasar::OnlineAEDRescoringDecoder *this)
{
  return 0;
}

uint64_t quasar::OnlineAEDRescoringDecoder::runImpl(uint64_t a1, kaldi::OnlineFeatureMatrix **a2, _QWORD *a3, uint64_t a4)
{
  char *AllAedFeat;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t (**v27)();
  void **v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  int32x2_t v33;
  _DWORD *v34;
  unint64_t v35;
  int v36;
  _DWORD *v37;
  _DWORD *v38;
  _DWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  int v46;
  char *v47;
  _BYTE *v48;
  int v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  __int32 v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  __int32 *v63;
  __int32 v64;
  _QWORD *v65;
  void *v66;
  int v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _OWORD *v71;
  std::__shared_weak_count *v72;
  _QWORD *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  _QWORD *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  _QWORD *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  float v86;
  uint64_t *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  __n128 v94;
  _BOOL4 v95;
  void *v96;
  int v97;
  float v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  _QWORD *v107;
  char *v108;
  uint64_t v109;
  char **v110;
  char *v111;
  char *v112;
  unint64_t v113;
  unint64_t v114;
  double *v115;
  char *v116;
  double v117;
  uint64_t v118;
  _QWORD *v119;
  unint64_t v120;
  unint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  _DWORD *v124;
  int v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _DWORD *v130;
  int v131;
  void *v132;
  int v133;
  void *v134;
  int v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  int v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  int v147;
  int32x2_t v148;
  _QWORD *v149;
  _DWORD v150[2];
  void *v151;
  void *v152;
  uint64_t v153;
  void **v154;
  void *v155;
  _BYTE *v156;
  char *v157;
  std::__shared_weak_count *v158;
  void *v159;
  _DWORD *v160;
  _QWORD v161[2];
  void *v162;
  _BYTE *v163;
  uint64_t v164;
  uint64_t v165;
  int32x2_t v166;
  void *__p;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  unint64_t v172;
  void *v173;
  char *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char v179[8];
  void *v180;
  unsigned int v181;
  unsigned int v182;
  void *v183;
  void *v184;
  float v185;
  int v186;
  int **v187;
  _QWORD v188[3];
  _QWORD *v189;
  void *v190[6];
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  uint64_t v205;

  v205 = *MEMORY[0x1E0C80C00];
  AllAedFeat = kaldi::OnlineFeatureMatrix::GetAllAedFeat(*a2);
  kaldi::CuMatrix<float>::CuMatrix<float>(v179, AllAedFeat, 111, 0);
  if (quasar::gLogLevel >= 5)
  {
    v203 = 0u;
    v204 = 0u;
    v201 = 0u;
    v202 = 0u;
    v199 = 0u;
    v200 = 0u;
    v197 = 0u;
    v198 = 0u;
    v195 = 0u;
    v196 = 0u;
    v193 = 0u;
    v194 = 0u;
    v191 = 0u;
    v192 = 0u;
    memset(v190, 0, sizeof(v190));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v190);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v190, (uint64_t)"AED states (", 12);
    v9 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)")", 1);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v190);
  }
  if (v182 >= *(_DWORD *)(*a3 + 576))
    v11 = *(_DWORD *)(*a3 + 576);
  else
    v11 = v182;
  if (v11 > (int)kaldi::quasar::CEAttnEncoderDecoder::MaxEncoderSize(*(kaldi::quasar::CEAttnEncoderDecoder **)(a1 + 520)))
  {
    if (quasar::gLogLevel >= 4)
    {
      v203 = 0u;
      v204 = 0u;
      v201 = 0u;
      v202 = 0u;
      v199 = 0u;
      v200 = 0u;
      v197 = 0u;
      v198 = 0u;
      v195 = 0u;
      v196 = 0u;
      v193 = 0u;
      v194 = 0u;
      v191 = 0u;
      v192 = 0u;
      memset(v190, 0, sizeof(v190));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v190);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v190, (uint64_t)"Skip AED because audio (", 24);
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)") is longer than the maximum length that the model can rescore (", 64);
      kaldi::quasar::CEAttnEncoderDecoder::MaxEncoderSize(*(kaldi::quasar::CEAttnEncoderDecoder **)(a1 + 520));
      v13 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)")", 1);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v190);
    }
    goto LABEL_206;
  }
  v14 = (void *)quasar::PTree::begin(a2[4]);
  v15 = *(_QWORD *)(*a3 + 152);
  v188[0] = &off_1E5CFF6F8;
  v189 = v188;
  v16 = (uint64_t *)(a1 + 544);
  v17 = *(unsigned __int8 *)(a1 + 567);
  if ((v17 & 0x80) == 0)
  {
    if (v17 != 8)
    {
      if (v17 != 15)
      {
        v18 = (uint64_t *)(a1 + 544);
        if (v17 != 20)
          goto LABEL_212;
        goto LABEL_24;
      }
      if (*v16 != 0x6573616572636564 || *(_QWORD *)(a1 + 551) != 0x656E6F2D79622D65)
      {
LABEL_212:
        v203 = 0u;
        v204 = 0u;
        v201 = 0u;
        v202 = 0u;
        v199 = 0u;
        v200 = 0u;
        v197 = 0u;
        v198 = 0u;
        v195 = 0u;
        v196 = 0u;
        v193 = 0u;
        v194 = 0u;
        v191 = 0u;
        v192 = 0u;
        memset(v190, 0, sizeof(v190));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v190);
        v142 = *(char *)(a1 + 567);
        if (v142 >= 0)
          v143 = a1 + 544;
        else
          v143 = *(_QWORD *)(a1 + 544);
        if (v142 >= 0)
          v144 = *(unsigned __int8 *)(a1 + 567);
        else
          v144 = *(_QWORD *)(a1 + 552);
        v145 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v190, v143, v144);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v145, (uint64_t)" is not a valid ilabel mapper", 29);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v190);
      }
      goto LABEL_38;
    }
    if (*v16 != 0x797469746E656469)
      goto LABEL_212;
LABEL_40:
    v27 = &off_1E5CFF750;
    goto LABEL_41;
  }
  v19 = *(_QWORD *)(a1 + 552);
  if (v19 == 8 && *(_QWORD *)*v16 == 0x797469746E656469)
    goto LABEL_40;
  if (v19 == 15)
  {
    if (*(_QWORD *)*v16 == 0x6573616572636564 && *(_QWORD *)(*v16 + 7) == 0x656E6F2D79622D65)
    {
LABEL_38:
      v27 = &off_1E5CFF7A8;
LABEL_41:
      v190[0] = v27;
      goto LABEL_42;
    }
    v19 = *(_QWORD *)(a1 + 552);
  }
  if (v19 != 20)
    goto LABEL_212;
  v18 = (uint64_t *)*v16;
LABEL_24:
  v21 = *v18;
  v22 = v18[1];
  v23 = *((_DWORD *)v18 + 4);
  if (v21 != 0x6E6172742D657375 || v22 != 0x6D2D6E6F69746973 || v23 != 1818584175)
    goto LABEL_212;
  v190[0] = &off_1E5CFF800;
  v190[1] = v14;
LABEL_42:
  v190[3] = v190;
  std::__function::__value_func<int ()(int)>::swap[abi:ne180100](v190, v188);
  v28 = (void **)v190[3];
  if (v190[3] == v190)
  {
    v29 = 4;
    v28 = v190;
    goto LABEL_46;
  }
  if (v190[3])
  {
    v29 = 5;
LABEL_46:
    (*((void (**)(void))*v28 + v29))();
  }
  v147 = v11;
  v176 = 0;
  v177 = 0;
  v178 = 0;
  fst::NbestAsFsts<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(v15, *(int *)(a1 + 472), &v176);
  v149 = a3;
  if (quasar::gLogLevel >= 5)
  {
    v203 = 0u;
    v204 = 0u;
    v201 = 0u;
    v202 = 0u;
    v199 = 0u;
    v200 = 0u;
    v197 = 0u;
    v198 = 0u;
    v195 = 0u;
    v196 = 0u;
    v193 = 0u;
    v194 = 0u;
    v191 = 0u;
    v192 = 0u;
    memset(v190, 0, sizeof(v190));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v190);
    v30 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" nbest are extracted", 20);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v190);
  }
  v146 = a4;
  v173 = 0;
  v174 = 0;
  v175 = 0;
  v170 = 0;
  v171 = 0;
  v172 = 0;
  v31 = v176;
  if (v177 != v176)
  {
    v32 = 0;
    v33 = vdup_n_s32(0x7F800000u);
    do
    {
      v166 = v33;
      v168 = 0;
      v169 = 0;
      __p = 0;
      fst::RmEpsilon<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((void *)(v31 + 16 * v32), 1, (uint64_t *)&v166, -1, 0.00097656);
      if (__p)
      {
        v168 = __p;
        operator delete(__p);
      }
      fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v154);
      fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>(v176 + 16 * v32, (uint64_t)&v154, 1);
      v162 = 0;
      v163 = 0;
      v164 = 0;
      if ((fst::GetLinearSymbolSequence<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,int>((uint64_t)&v154, (uint64_t)&v162, 0, (int32x2_t *)&v157, 0) & 1) == 0)
      {
        v203 = 0u;
        v204 = 0u;
        v201 = 0u;
        v202 = 0u;
        v199 = 0u;
        v200 = 0u;
        v197 = 0u;
        v198 = 0u;
        v195 = 0u;
        v196 = 0u;
        v193 = 0u;
        v194 = 0u;
        v191 = 0u;
        v192 = 0u;
        memset(v190, 0, sizeof(v190));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v190);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v190, (uint64_t)"failed to retrieve hypotheses", 29);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v190);
      }
      v159 = 0;
      v160 = 0;
      v161[0] = 0;
      v34 = v162;
      if (v163 == v162)
      {
        v48 = 0;
        v47 = 0;
      }
      else
      {
        v35 = 0;
        do
        {
          LODWORD(v187) = v34[v35];
          if (!v189)
            std::__throw_bad_function_call[abi:ne180100]();
          v36 = (*(uint64_t (**)(_QWORD *, int ***))(*v189 + 48))(v189, &v187);
          if (v36 != kaldi::quasar::CEAttnEncoderDecoder::BlankIndex(*(kaldi::quasar::CEAttnEncoderDecoder **)(a1 + 520))
            && (!v35 || *((_DWORD *)v162 + v35 - 1) != *((_DWORD *)v162 + v35)))
          {
            v37 = v160;
            if ((unint64_t)v160 >= v161[0])
            {
              v39 = v159;
              v40 = ((char *)v160 - (_BYTE *)v159) >> 2;
              v41 = v40 + 1;
              if ((unint64_t)(v40 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v42 = v161[0] - (_QWORD)v159;
              if ((uint64_t)(v161[0] - (_QWORD)v159) >> 1 > v41)
                v41 = v42 >> 1;
              if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
                v43 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v43 = v41;
              if (v43)
              {
                v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v161, v43);
                v39 = v159;
                v37 = v160;
              }
              else
              {
                v44 = 0;
              }
              v45 = &v44[4 * v40];
              *(_DWORD *)v45 = v36;
              v38 = v45 + 4;
              while (v37 != v39)
              {
                v46 = *--v37;
                *((_DWORD *)v45 - 1) = v46;
                v45 -= 4;
              }
              v159 = v45;
              v160 = v38;
              v161[0] = &v44[4 * v43];
              if (v39)
                operator delete(v39);
            }
            else
            {
              *v160 = v36;
              v38 = v37 + 1;
            }
            v160 = v38;
          }
          ++v35;
          v34 = v162;
        }
        while (v35 < (v163 - (_BYTE *)v162) >> 2);
        v48 = v159;
        v47 = (char *)v160;
      }
      v49 = kaldi::quasar::CEAttnEncoderDecoder::MaxWordpieceSize(*(kaldi::quasar::CEAttnEncoderDecoder **)(a1 + 520));
      v50 = (v47 - v48) >> 2;
      if (v50 <= v49)
      {
        v52 = v171;
        if ((unint64_t)v171 >= v172)
        {
          v53 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(&v170, (uint64_t)&v159);
        }
        else
        {
          *v171 = 0;
          v52[1] = 0;
          v52[2] = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v52, v159, (uint64_t)v160, ((char *)v160 - (_BYTE *)v159) >> 2);
          v53 = (uint64_t)(v52 + 3);
        }
        v171 = (_QWORD *)v53;
        v54 = HIDWORD(v157);
        v55 = v174;
        if (v174 >= v175)
        {
          v57 = (char *)v173;
          v58 = (v174 - (_BYTE *)v173) >> 2;
          v59 = v58 + 1;
          if ((unint64_t)(v58 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v60 = v175 - (_BYTE *)v173;
          if ((v175 - (_BYTE *)v173) >> 1 > v59)
            v59 = v60 >> 1;
          if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL)
            v61 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v61 = v59;
          if (v61)
          {
            v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v175, v61);
            v57 = (char *)v173;
            v55 = v174;
          }
          else
          {
            v62 = 0;
          }
          v63 = (__int32 *)&v62[4 * v58];
          *v63 = v54;
          v56 = (char *)(v63 + 1);
          while (v55 != v57)
          {
            v64 = *((_DWORD *)v55 - 1);
            v55 -= 4;
            *--v63 = v64;
          }
          v173 = v63;
          v174 = v56;
          v175 = &v62[4 * v61];
          if (v57)
            operator delete(v57);
        }
        else
        {
          *(_DWORD *)v174 = HIDWORD(v157);
          v56 = v55 + 4;
        }
        v174 = v56;
        if (quasar::gLogLevel >= 5)
        {
          v203 = 0u;
          v204 = 0u;
          v201 = 0u;
          v202 = 0u;
          v199 = 0u;
          v200 = 0u;
          v197 = 0u;
          v198 = 0u;
          v195 = 0u;
          v196 = 0u;
          v193 = 0u;
          v194 = 0u;
          v191 = 0u;
          v192 = 0u;
          memset(v190, 0, sizeof(v190));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v190);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v190, (uint64_t)"preAED-amCost[", 14);
          v65 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"] = ", 4);
          std::ostream::operator<<();
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v190);
        }
      }
      else if (quasar::gLogLevel >= 4)
      {
        v203 = 0u;
        v204 = 0u;
        v201 = 0u;
        v202 = 0u;
        v199 = 0u;
        v200 = 0u;
        v197 = 0u;
        v198 = 0u;
        v195 = 0u;
        v196 = 0u;
        v193 = 0u;
        v194 = 0u;
        v191 = 0u;
        v192 = 0u;
        memset(v190, 0, sizeof(v190));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v190);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v190, (uint64_t)"Skip AED because hypothesis is longer than ", 43);
        kaldi::quasar::CEAttnEncoderDecoder::MaxWordpieceSize(*(kaldi::quasar::CEAttnEncoderDecoder **)(a1 + 520));
        v51 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)" wordpieces", 11);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v190);
      }
      if (v159)
      {
        v160 = v159;
        operator delete(v159);
      }
      if (v162)
      {
        v163 = v162;
        operator delete(v162);
      }
      v154 = (void **)&unk_1E5D25580;
      v66 = v155;
      if (v155)
      {
        v67 = *((_DWORD *)v155 + 14) - 1;
        *((_DWORD *)v155 + 14) = v67;
        if (!v67)
          (*(void (**)(void *))(*(_QWORD *)v66 + 8))(v66);
      }
      if (v50 > v49)
        goto LABEL_199;
      ++v32;
      v31 = v176;
    }
    while (v32 < (v177 - v176) >> 4);
  }
  v164 = 0;
  v165 = 0;
  v162 = &unk_1E5D341C8;
  v163 = 0;
  v161[0] = 0;
  v161[1] = 0;
  v159 = &unk_1E5D341C8;
  v160 = 0;
  v68 = *(_QWORD *)(a1 + 520);
  v190[2] = (void *)__PAIR64__(v147, v181);
  v190[3] = v183;
  v190[4] = v184;
  v190[0] = &unk_1E5D29D40;
  v190[1] = v180;
  kaldi::quasar::CEAttnEncoderDecoder::Decode(v68, (uint64_t)v190, &v170, (uint64_t)&v162, (uint64_t)&v159);
  v190[0] = &unk_1E5D29D40;
  memset(&v190[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v190);
  v69 = v149;
  v70 = *v149;
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 184))(v190, a1);
  v154 = v190;
  v71 = std::__tree<std::__value_type<std::string,std::shared_ptr<void>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<void>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<void>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v70 + 120), (const void **)v190, (uint64_t)&std::piecewise_construct, (_OWORD **)&v154);
  v72 = (std::__shared_weak_count *)*((_QWORD *)v71 + 8);
  v148 = *(int32x2_t *)((char *)v71 + 56);
  v157 = (char *)v148;
  v158 = v72;
  v73 = (_QWORD *)v15;
  if (v72)
  {
    p_shared_owners = (unint64_t *)&v72->__shared_owners_;
    do
      v75 = __ldxr(p_shared_owners);
    while (__stxr(v75 + 1, p_shared_owners));
  }
  if (SHIBYTE(v190[2]) < 0)
    operator delete(v190[0]);
  if (v148)
  {
    if (quasar::gLogLevel >= 4)
    {
      v203 = 0u;
      v204 = 0u;
      v201 = 0u;
      v202 = 0u;
      v199 = 0u;
      v200 = 0u;
      v197 = 0u;
      v198 = 0u;
      v195 = 0u;
      v196 = 0u;
      v193 = 0u;
      v194 = 0u;
      v191 = 0u;
      v192 = 0u;
      memset(v190, 0, sizeof(v190));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v190);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v190, (uint64_t)"Rescoring a lattice coming from CTC prefix beam search ...", 58);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v190);
    }
    v76 = operator new(0x30uLL);
    v76[2] = 0;
    *v76 = &unk_1E5D456D0;
    v76[1] = 0;
    v76[4] = 0;
    v76[5] = 0;
    v76[3] = 0;
    v190[0] = v76 + 3;
    v190[1] = v76;
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](*v149 + 352, (__int128 *)v190);
    v77 = (std::__shared_weak_count *)v190[1];
    if (v190[1])
    {
      v78 = (unint64_t *)((char *)v190[1] + 8);
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    v80 = operator new(0x30uLL);
    v80[2] = 0;
    *v80 = &unk_1E5D458C8;
    v80[1] = 0;
    v80[4] = 0;
    v80[5] = 0;
    v80[3] = 0;
    v190[0] = v80 + 3;
    v190[1] = v80;
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](*v149 + 392, (__int128 *)v190);
    v81 = (std::__shared_weak_count *)v190[1];
    if (v190[1])
    {
      v82 = (unint64_t *)((char *)v190[1] + 8);
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v83 - 1, v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
      }
    }
  }
  v84 = v177;
  if (v177 == v176)
  {
    v120 = (v177 - v176) >> 4;
    goto LABEL_173;
  }
  v85 = 0;
  v86 = INFINITY;
  v84 = v176;
  do
  {
    v87 = *(uint64_t **)(*v69 + 352);
    v88 = *(_QWORD **)(*v69 + 392);
    if (quasar::gLogLevel >= 5)
    {
      v203 = 0u;
      v204 = 0u;
      v201 = 0u;
      v202 = 0u;
      v199 = 0u;
      v200 = 0u;
      v197 = 0u;
      v198 = 0u;
      v195 = 0u;
      v196 = 0u;
      v193 = 0u;
      v194 = 0u;
      v191 = 0u;
      v192 = 0u;
      memset(v190, 0, sizeof(v190));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v190);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v190, (uint64_t)"AED-Cost[", 9);
      v89 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"] = (", 5);
      v90 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)", ", 2);
      v91 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)")", 1);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v190);
      v84 = v176;
    }
    v92 = (*(_QWORD *)(*(_QWORD *)(v84 + 16 * v85 + 8) + 72) - *(_QWORD *)(*(_QWORD *)(v84 + 16 * v85 + 8) + 64)) >> 3;
    if ((int)v92 < 1)
    {
      v69 = v149;
      goto LABEL_170;
    }
    v93 = 0;
    while (1)
    {
      (*(void (**)(void **__return_ptr, unint64_t, uint64_t))(*(_QWORD *)(v176 + 16 * v85) + 32))(v190, v176 + 16 * v85, v93);
      LODWORD(v187) = HIDWORD(v190[0]);
      LODWORD(v154) = v190[0];
      v186 = 2139095040;
      v185 = INFINITY;
      v94.n128_u32[0] = (unsigned __int32)v190[0];
      if (*(float *)v190 != INFINITY)
      {
        v95 = 1;
        v96 = v190[1];
        if (!v190[1])
          goto LABEL_140;
LABEL_139:
        v190[2] = v96;
        operator delete(v96);
        goto LABEL_140;
      }
      v94.n128_u32[0] = v187;
      v96 = v190[1];
      if (*(float *)&v187 == v185)
      {
        v95 = v190[2] != v190[1];
        if (v190[1])
          goto LABEL_139;
      }
      else
      {
        v95 = 1;
        if (v190[1])
          goto LABEL_139;
      }
LABEL_140:
      if (v95)
        break;
      v93 = (v93 + 1);
      if ((_DWORD)v92 == (_DWORD)v93)
        goto LABEL_169;
    }
    (*(void (**)(void ***__return_ptr, unint64_t, uint64_t, __n128))(*(_QWORD *)(v176 + 16 * v85) + 32))(&v154, v176 + 16 * v85, v93, v94);
    v97 = (int)v154;
    v98 = *((float *)&v154 + 1)
        + (float)((float)((float)(*(float *)(a1 + 512) * *(float *)&v160[v85])
                        + (float)(*(float *)(a1 + 508) * *(float *)&v163[4 * v85]))
                + (float)((float)(*(float *)(a1 + 504) + -1.0) * *((float *)v173 + v85)));
    if (quasar::gLogLevel >= 5)
    {
      v203 = 0u;
      v204 = 0u;
      v201 = 0u;
      v202 = 0u;
      v199 = 0u;
      v200 = 0u;
      v197 = 0u;
      v198 = 0u;
      v195 = 0u;
      v196 = 0u;
      v193 = 0u;
      v194 = 0u;
      v191 = 0u;
      v192 = 0u;
      memset(v190, 0, sizeof(v190));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v190);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v190, (uint64_t)"(", 1);
      v99 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)")", 1);
      v100 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)" += ", 4);
      v101 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)" * ", 3);
      v102 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)" + ", 3);
      v103 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)" * ", 3);
      v104 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)" + ", 3);
      v105 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, (uint64_t)" * ", 3);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v190);
    }
    v106 = v176;
    v150[0] = v97;
    *(float *)&v150[1] = v98;
    v152 = 0;
    v153 = 0;
    v151 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v151, v155, (uint64_t)v156, (v156 - (_BYTE *)v155) >> 2);
    (*(void (**)(unint64_t, uint64_t, _DWORD *))(*(_QWORD *)(v106 + 16 * v85) + 184))(v106 + 16 * v85, v93, v150);
    if (v151)
    {
      v152 = v151;
      operator delete(v151);
    }
    fst::GetLinearSymbolSequence<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,int>(v176 + 16 * v85, 0, 0, (uint64_t)&v154, 0);
    if (quasar::gLogLevel >= 4)
    {
      v203 = 0u;
      v204 = 0u;
      v201 = 0u;
      v202 = 0u;
      v199 = 0u;
      v200 = 0u;
      v197 = 0u;
      v198 = 0u;
      v195 = 0u;
      v196 = 0u;
      v193 = 0u;
      v194 = 0u;
      v191 = 0u;
      v192 = 0u;
      memset(v190, 0, sizeof(v190));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v190);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v190, (uint64_t)"postAED-amCost[", 15);
      v107 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)"] = ", 4);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v190);
    }
    if (v148)
    {
      v108 = v157;
      v109 = (uint64_t)(v157 + 24);
      if (!std::__hash_table<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>>>::find<std::vector<int>>((_QWORD *)v157 + 3, (int **)(v170 + 24 * v85)))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v190);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v190, (uint64_t)"ctxPtr->nbest.find(hyps[i]) != ctxPtr->nbest.end()", 50);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v190);
      }
      if (v98 < v86)
      {
        v110 = (char **)(v170 + 24 * v85);
        v86 = v98;
        if (v108 != (char *)v110)
        {
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v108, *v110, *(_QWORD *)(v170 + 24 * v85 + 8), (uint64_t)(*(_QWORD *)(v170 + 24 * v85 + 8) - (_QWORD)*v110) >> 2);
          v86 = v98;
        }
      }
      v111 = (char *)*v88;
      v112 = (char *)v88[1];
      if (v112 != (char *)*v88)
      {
        v113 = (uint64_t)&v112[-*v88] >> 3;
        v112 = (char *)*v88;
        do
        {
          v114 = v113 >> 1;
          v115 = (double *)&v112[8 * (v113 >> 1)];
          v117 = *v115;
          v116 = (char *)(v115 + 1);
          v113 += ~(v113 >> 1);
          if (v117 > v98)
            v113 = v114;
          else
            v112 = v116;
        }
        while (v113);
      }
      *(double *)v190 = v98;
      std::vector<double>::insert((uint64_t)v88, v112, (double *)v190);
      v118 = *v87;
      v187 = (int **)(v170 + 24 * v85);
      v119 = std::__hash_table<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>(v109, v187, (uint64_t)&std::piecewise_construct, (uint64_t *)&v187);
      std::vector<std::vector<quasar::Token>>::insert(v87, (uint64_t *)(v118 + 24 * (int)((unint64_t)(v112 - v111) >> 3)), v119 + 5);
    }
    if (v155)
    {
      v156 = v155;
      operator delete(v155);
    }
LABEL_169:
    v69 = v149;
    v84 = v176;
LABEL_170:
    ++v85;
    v120 = (v177 - v84) >> 4;
  }
  while (v120 > v85);
  v73 = (_QWORD *)v15;
LABEL_173:
  if (v148)
  {
    v121 = *(int *)(*(_QWORD *)v146 + 16);
    if (v120 > v121)
    {
      if (quasar::gLogLevel >= 4)
      {
        v203 = 0u;
        v204 = 0u;
        v201 = 0u;
        v202 = 0u;
        v199 = 0u;
        v200 = 0u;
        v197 = 0u;
        v198 = 0u;
        v195 = 0u;
        v196 = 0u;
        v193 = 0u;
        v194 = 0u;
        v191 = 0u;
        v192 = 0u;
        memset(v190, 0, sizeof(v190));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v190);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v190, (uint64_t)"Shrinking nbest from ", 21);
        v122 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)" to ", 4);
        std::ostream::operator<<();
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v190);
      }
      std::vector<std::vector<quasar::Token>>::resize(*(uint64_t **)(*v69 + 352), v121);
      std::vector<double>::resize(*(_QWORD *)(*v69 + 392), v121);
      v84 = v176;
    }
  }
  v123 = *(_QWORD *)(v84 + 8);
  ++*(_DWORD *)(v123 + 56);
  v124 = (_DWORD *)v73[1];
  if (v124)
  {
    v125 = v124[14] - 1;
    v124[14] = v125;
    if (!v125)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v124 + 8))(v124);
      v84 = v176;
    }
  }
  v73[1] = v123;
  if ((unint64_t)(v177 - v84) >= 0x11)
  {
    v126 = 1;
    v127 = 16;
    do
    {
      fst::Union<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t)v73, v84 + v127);
      ++v126;
      v84 = v176;
      v127 += 16;
    }
    while (v126 < (v177 - v176) >> 4);
  }
  kaldi::quasar::DeterminizeCompactLattice((uint64_t)v73);
  v128 = *(_QWORD *)(*v69 + 152);
  v129 = v73[1];
  ++*(_DWORD *)(v129 + 56);
  v130 = *(_DWORD **)(v128 + 8);
  if (v130)
  {
    v131 = v130[14] - 1;
    v130[14] = v131;
    if (!v131)
      (*(void (**)(_DWORD *))(*(_QWORD *)v130 + 8))(v130);
  }
  *(_QWORD *)(v128 + 8) = v129;
  fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(v190);
  kaldi::CompactLatticeShortestPath(v73, (uint64_t)v190, 0, (uint64_t *)(*v69 + 448));
  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v154);
  fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>((uint64_t)v190, (uint64_t)&v154, 1);
  v154 = (void **)&unk_1E5D25580;
  v132 = v155;
  if (v155)
  {
    v133 = *((_DWORD *)v155 + 14) - 1;
    *((_DWORD *)v155 + 14) = v133;
    if (!v133)
      (*(void (**)(void *))(*(_QWORD *)v132 + 8))(v132);
  }
  v190[0] = &unk_1E5D25800;
  v134 = v190[1];
  if (v190[1])
  {
    v135 = *((_DWORD *)v190[1] + 14) - 1;
    *((_DWORD *)v190[1] + 14) = v135;
    if (!v135)
      (*(void (**)(void *))(*(_QWORD *)v134 + 8))(v134);
  }
  v136 = v158;
  if (v158)
  {
    v137 = (unint64_t *)&v158->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v159 = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)&v159);
  v162 = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)&v162);
LABEL_199:
  v190[0] = &v170;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)v190);
  if (v173)
  {
    v174 = (char *)v173;
    operator delete(v173);
  }
  v190[0] = &v176;
  std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v190);
  v139 = v189;
  if (v189 == v188)
  {
    v140 = 4;
    v139 = v188;
LABEL_205:
    (*(void (**)(void))(*v139 + 8 * v140))();
  }
  else if (v189)
  {
    v140 = 5;
    goto LABEL_205;
  }
LABEL_206:
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v179);
  return 0;
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1)
        goto LABEL_10;
      a1 = (_QWORD *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1)
LABEL_10:
      std::string::__throw_out_of_range[abi:ne180100]();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

uint64_t fst::NbestAsFsts<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  int v7;
  int32x2_t v8;
  void *__p;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(&v12);
  v8 = vdup_n_s32(0x7F800000u);
  v10 = 0;
  v11 = 0;
  __p = 0;
  fst::ShortestPath<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(a1, (uint64_t)&v12, a2, 0, 0, (uint64_t *)&v8, -1, 0);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  fst::ConvertNbestToVector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t)&v12, a3);
  v12 = &unk_1E5D25800;
  result = v13;
  if (v13)
  {
    v7 = *(_DWORD *)(v13 + 56) - 1;
    *(_DWORD *)(v13 + 56) = v7;
    if (!v7)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_1AD76E440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14)
{
  int v15;

  if (a14)
  {
    v15 = a14[14] - 1;
    a14[14] = v15;
    if (!v15)
      (*(void (**)(_DWORD *))(*(_QWORD *)a14 + 8))(a14);
  }
  _Unwind_Resume(exception_object);
}

void fst::RmEpsilon<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(void *a1, char a2, uint64_t *a3, int a4, float a5)
{
  uint64_t v10;
  void *__p;
  _BYTE *v12;
  uint64_t v13;
  void ***v14;
  int v15;
  float v16;
  char v17;
  char v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  int v23;
  void **v24[9];
  uint64_t v25[3];

  memset(v25, 0, sizeof(v25));
  fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>((uint64_t)v24, (uint64_t)a1, (uint64_t)v25);
  v10 = *a3;
  v12 = 0;
  v13 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)a3[1], a3[2], (a3[2] - a3[1]) >> 2);
  v14 = v24;
  v15 = -1;
  v16 = a5;
  v17 = 0;
  v18 = a2;
  v19 = v10;
  v21 = 0;
  v22 = 0;
  v20 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v20, __p, (uint64_t)v12, (v12 - (_BYTE *)__p) >> 2);
  v23 = a4;
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
  fst::RmEpsilon<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>(a1, v25, (uint64_t)&v14);
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  fst::AutoQueue<int>::~AutoQueue(v24);
  v24[0] = (void **)v25;
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100](v24);
}

void sub_1AD76E5B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;

  if (__p)
    operator delete(__p);
  fst::AutoQueue<int>::~AutoQueue(&a21);
  a21 = v21 - 88;
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  _Unwind_Resume(a1);
}

void fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>(uint64_t a1, uint64_t a2, int a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  __int32 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  unint64_t v42;
  float v43;
  float v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int8x8_t v48;
  unint64_t v49;
  _DWORD *v50;
  unint64_t v51;
  _DWORD v52[2];
  int8x8_t v53;
  void *__p;
  _BYTE *v55;
  float v56;
  int v57;

  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
  if (v6 < 1)
  {
    v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, v38);
    return;
  }
  v39 = v6;
  v7 = v6;
  do
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
    --v7;
  }
  while (v7);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, v8);
  v9 = 0;
  v40 = a1;
  do
  {
    (*(void (**)(int8x8_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v53, a1, v9);
    v43 = *(float *)&v53.i32[1];
    LODWORD(v47) = v53.i32[0];
    v57 = 2139095040;
    v56 = INFINITY;
    v10.n128_u32[0] = v53.i32[0];
    if (*(float *)v53.i32 != INFINITY)
    {
      v12 = __p;
      v11 = v55;
LABEL_7:
      v13 = v11 - v12;
      if (v13)
      {
        v14 = 0;
        v15 = v13 >> 2;
        if (v15 <= 1)
          v16 = 1;
        else
          v16 = v15;
        v17 = v9;
        do
        {
          v18 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)a2 + 200))(a2, v10);
          v19 = *((_DWORD *)__p + v14);
          LODWORD(v47) = 0;
          HIDWORD(v47) = v19;
          v48 = vand_s8(v53, (int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v14 == 0), 0x1FuLL)));
          LODWORD(v49) = v18;
          if (a3)
            v47 = v19;
          (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 208))(a2, v17, &v47);
          ++v14;
          v17 = v18;
        }
        while (v16 != v14);
        v52[0] = 0;
        v20 = 0;
      }
      else
      {
        v20 = v53.i32[1];
        v52[0] = v53.i32[0];
        v18 = v9;
      }
      v52[1] = v20;
      (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)a2 + 184))(a2, v18, v52);
      goto LABEL_21;
    }
    v10.n128_f32[0] = v43;
    v12 = __p;
    v11 = v55;
    if (v43 != v56 || v55 != __p)
      goto LABEL_7;
LABEL_21:
    v51 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 136))(a1, v9, &v47);
    v41 = v9;
    while (1)
    {
      if (!v47)
      {
        if (v51 >= v49)
          goto LABEL_53;
        goto LABEL_27;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47))
        break;
      if (v47)
      {
        v21 = (*(uint64_t (**)(void))(*(_QWORD *)v47 + 32))();
        goto LABEL_28;
      }
LABEL_27:
      v21 = *(_QWORD *)&v48 + 48 * v51;
LABEL_28:
      v23 = *(_QWORD *)(v21 + 16);
      v22 = *(_QWORD *)(v21 + 24);
      v24 = v22 - v23;
      v42 = (v22 - v23) >> 2;
      v25 = v9;
      if ((unint64_t)(v22 - v23) >= 5)
      {
        v26 = 0;
        v27 = 2;
        if (v42 > 2)
          v27 = (v22 - v23) >> 2;
        v28 = v27 - 1;
        v29 = v41;
        do
        {
          v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
          v25 = v30;
          v31 = *(float *)v21;
          if (v26)
            v31 = 0.0;
          v32 = 0;
          if (!v26)
            v32 = *(_QWORD *)(v21 + 8);
          v33 = *(float *)(*(_QWORD *)(v21 + 16) + 4 * v26);
          v43 = v31;
          v44 = v33;
          v45 = v32;
          v46 = v30;
          if (a3)
          {
            v43 = v33;
            v44 = v31;
          }
          (*(void (**)(uint64_t, uint64_t, float *))(*(_QWORD *)a2 + 208))(a2, v29, &v43);
          ++v26;
          v29 = v25;
        }
        while (v28 != v26);
      }
      v34 = *(float *)v21;
      if (v24 >= 8)
        v34 = 0.0;
      if (v22 == v23)
      {
        v35 = 0.0;
        a1 = v40;
        v9 = v41;
LABEL_45:
        v36 = *(_QWORD *)(v21 + 8);
        goto LABEL_46;
      }
      v35 = *(float *)(*(_QWORD *)(v21 + 16) + 4 * v42 - 4);
      v36 = 0;
      a1 = v40;
      v9 = v41;
      if (v24 <= 7)
        goto LABEL_45;
LABEL_46:
      v37 = *(_DWORD *)(v21 + 40);
      v43 = v34;
      v44 = v35;
      v45 = v36;
      v46 = v37;
      if (a3)
      {
        v43 = v35;
        v44 = v34;
      }
      (*(void (**)(uint64_t, uint64_t, float *))(*(_QWORD *)a2 + 208))(a2, v25, &v43);
      if (v47)
        (*(void (**)(uint64_t))(*(_QWORD *)v47 + 40))(v47);
      else
        ++v51;
    }
    if (v47)
    {
      (*(void (**)(void))(*(_QWORD *)v47 + 8))();
      goto LABEL_55;
    }
LABEL_53:
    if (v50)
      --*v50;
LABEL_55:
    if (__p)
    {
      v55 = __p;
      operator delete(__p);
    }
    v9 = (v9 + 1);
  }
  while ((_DWORD)v9 != v39);
}

void sub_1AD76EA60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::GetLinearSymbolSequence<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,int>(uint64_t a1, uint64_t a2, uint64_t a3, int32x2_t *a4, int a5)
{
  uint64_t v10;
  float32x2_t i;
  __n128 v12;
  uint64_t v13;
  float32x2_t v14;
  int v15;
  BOOL v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  int v26;
  int v27;
  _DWORD *v28;
  _DWORD *v29;
  _DWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  int v37;
  uint64_t v38;
  float32x2_t v39;
  __int32 v41;
  __int32 v42;
  _QWORD v43[3];
  _DWORD *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  _DWORD *v48;
  unint64_t v49;
  void *__p;
  _DWORD *v51;
  unint64_t v52;
  float v53;
  int v54;
  float v55;

  __p = 0;
  v51 = 0;
  v52 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)v10 == -1)
  {
    if (a2)
      *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    if (a3)
      *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
    if (a4)
      *a4 = vdup_n_s32(0x7F800000u);
    v38 = 1;
  }
  else
  {
    for (i = 0; ; i = vadd_f32(i, v14))
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v46, a1, v10);
      v55 = *((float *)&v46 + 1);
      LODWORD(v43[0]) = v46;
      v54 = 2139095040;
      v53 = INFINITY;
      v12.n128_u32[0] = v46;
      if (*(float *)&v46 != INFINITY)
        break;
      v12.n128_f32[0] = v55;
      if (v55 != v53)
        break;
      if ((*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a1 + 40))(a1, v10, v55) != 1)
        goto LABEL_55;
      v45 = 0;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 136))(a1, v10, v43);
      if (v43[0])
        v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v43[0] + 32))(v43[0]);
      else
        v13 = v43[1] + 20 * v45;
      v14 = *(float32x2_t *)(v13 + 8);
      v15 = *(_DWORD *)v13;
      if (*(_DWORD *)v13)
        v16 = 0;
      else
        v16 = a5 == 0;
      if (!v16)
      {
        v17 = v51;
        if ((unint64_t)v51 >= v52)
        {
          v19 = __p;
          v20 = ((char *)v51 - (_BYTE *)__p) >> 2;
          v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 62)
            goto LABEL_77;
          v22 = v52 - (_QWORD)__p;
          if ((uint64_t)(v52 - (_QWORD)__p) >> 1 > v21)
            v21 = v22 >> 1;
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
            v23 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v23 = v21;
          if (v23)
          {
            v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v52, v23);
            v19 = __p;
            v17 = v51;
            v15 = *(_DWORD *)v13;
          }
          else
          {
            v24 = 0;
          }
          v25 = &v24[4 * v20];
          *(_DWORD *)v25 = v15;
          v18 = v25 + 4;
          while (v17 != v19)
          {
            v26 = *--v17;
            *((_DWORD *)v25 - 1) = v26;
            v25 -= 4;
          }
          __p = v25;
          v51 = v18;
          v52 = (unint64_t)&v24[4 * v23];
          if (v19)
            operator delete(v19);
        }
        else
        {
          *v51 = v15;
          v18 = v17 + 1;
        }
        v51 = v18;
      }
      v27 = *(_DWORD *)(v13 + 4);
      if (v27 || a5)
      {
        v28 = v48;
        if ((unint64_t)v48 >= v49)
        {
          v30 = v47;
          v31 = ((char *)v48 - (_BYTE *)v47) >> 2;
          v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 62)
LABEL_77:
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v33 = v49 - (_QWORD)v47;
          if ((uint64_t)(v49 - (_QWORD)v47) >> 1 > v32)
            v32 = v33 >> 1;
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
            v34 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v34 = v32;
          if (v34)
          {
            v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v49, v34);
            v30 = v47;
            v28 = v48;
            v27 = *(_DWORD *)(v13 + 4);
          }
          else
          {
            v35 = 0;
          }
          v36 = &v35[4 * v31];
          *(_DWORD *)v36 = v27;
          v29 = v36 + 4;
          while (v28 != v30)
          {
            v37 = *--v28;
            *((_DWORD *)v36 - 1) = v37;
            v36 -= 4;
          }
          v47 = v36;
          v48 = v29;
          v49 = (unint64_t)&v35[4 * v34];
          if (v30)
            operator delete(v30);
        }
        else
        {
          *v48 = v27;
          v29 = v28 + 1;
        }
        v48 = v29;
      }
      v10 = *(unsigned int *)(v13 + 16);
      if (v43[0])
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v43[0] + 8))(v43[0]);
      }
      else if (v44)
      {
        --*v44;
      }
    }
    v41 = HIDWORD(v46);
    v42 = v46;
    if ((*(uint64_t (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)a1 + 40))(a1, v10, v12))
    {
LABEL_55:
      v38 = 0;
    }
    else
    {
      if (a2 && &__p != (void **)a2)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a2, (char *)__p, (uint64_t)v51, ((char *)v51 - (_BYTE *)__p) >> 2);
      if (a3 && &v47 != (void **)a3)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a3, (char *)v47, (uint64_t)v48, ((char *)v48 - (_BYTE *)v47) >> 2);
      v39.i32[0] = v42;
      if (a4)
      {
        v39.i32[1] = v41;
        *a4 = (int32x2_t)vadd_f32(i, v39);
      }
      v38 = 1;
    }
    if (v47)
    {
      v48 = v47;
      operator delete(v47);
    }
  }
  if (__p)
  {
    v51 = __p;
    operator delete(__p);
  }
  return v38;
}

void sub_1AD76EECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (__p)
    operator delete(__p);
  if (a25)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

_QWORD *fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~VectorFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D25580;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t fst::GetLinearSymbolSequence<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,int>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  char v5;
  uint64_t v10;
  BOOL v11;
  char v12;
  BOOL v13;
  char v14;
  char v15;
  float32x2_t *v16;
  __int32 v17;
  BOOL v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  __int32 *v27;
  __int32 v28;
  __int32 v29;
  _DWORD *v30;
  _DWORD *v31;
  _DWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  __int32 *v38;
  __int32 v39;
  char *v42;
  int32x2_t v43;
  void *v44;
  _BYTE *v45;
  _QWORD *v46;
  void *__p;
  _BYTE *v48;
  _DWORD *v49;
  uint64_t v50;
  float32x2_t v51;
  void *v52;
  void *v53;
  void *v54;
  _DWORD *v55;
  unint64_t v56;
  void *v57;
  _DWORD *v58;
  unint64_t v59;
  __int128 v60;
  __int128 v61;
  float v62;
  int v63;

  v60 = 0u;
  v61 = 0u;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)v10 != -1)
  {
    if (a2)
      v11 = &v57 == (void **)a2;
    else
      v11 = 1;
    v12 = v11;
    if (a3)
      v13 = &v54 == (void **)a3;
    else
      v13 = 1;
    v14 = v13;
    v42 = (char *)a3;
    while (1)
    {
      (*(void (**)(float32x2_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v51, a1, v10);
      v43.i32[0] = v51.i32[1];
      LODWORD(v46) = v51.i32[0];
      v63 = 2139095040;
      v62 = INFINITY;
      if (v51.f32[0] == INFINITY && *(float *)v43.i32 == v62 && v53 == v52)
      {
        if ((*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a1 + 40))(a1, v10, *(float *)v43.i32) == 1)
        {
          v50 = 0;
          (*(void (**)(uint64_t, uint64_t, _QWORD **))(*(_QWORD *)a1 + 136))(a1, v10, &v46);
          if (v46)
            v16 = (float32x2_t *)(*(uint64_t (**)(_QWORD *))(*v46 + 32))(v46);
          else
            v16 = (float32x2_t *)((char *)__p + 48 * v50);
          fst::Times<fst::LatticeWeightTpl<float>,int>(v16 + 1, (float32x2_t *)&v60, &v43);
          *(int32x2_t *)&v60 = v43;
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v60 + 8, (char *)v44, (uint64_t)v45, (v45 - (_BYTE *)v44) >> 2);
          if (v44)
          {
            v45 = v44;
            operator delete(v44);
          }
          v17 = v16->i32[0];
          if (v16->i32[0])
            v18 = 0;
          else
            v18 = a5 == 0;
          if (!v18)
          {
            v19 = v58;
            if ((unint64_t)v58 >= v59)
            {
              v21 = v57;
              v22 = ((char *)v58 - (_BYTE *)v57) >> 2;
              v23 = v22 + 1;
              if ((unint64_t)(v22 + 1) >> 62)
                goto LABEL_99;
              v24 = v59 - (_QWORD)v57;
              if ((uint64_t)(v59 - (_QWORD)v57) >> 1 > v23)
                v23 = v24 >> 1;
              if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
                v25 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v25 = v23;
              if (v25)
              {
                v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v59, v25);
                v21 = v57;
                v19 = v58;
                v17 = v16->i32[0];
              }
              else
              {
                v26 = 0;
              }
              v27 = (__int32 *)&v26[4 * v22];
              *v27 = v17;
              v20 = v27 + 1;
              while (v19 != v21)
              {
                v28 = *--v19;
                *--v27 = v28;
              }
              v57 = v27;
              v58 = v20;
              v59 = (unint64_t)&v26[4 * v25];
              if (v21)
                operator delete(v21);
            }
            else
            {
              *v58 = v17;
              v20 = v19 + 1;
            }
            v58 = v20;
          }
          v29 = v16->i32[1];
          if (v29 || a5)
          {
            v30 = v55;
            if ((unint64_t)v55 >= v56)
            {
              v32 = v54;
              v33 = ((char *)v55 - (_BYTE *)v54) >> 2;
              v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 62)
LABEL_99:
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v35 = v56 - (_QWORD)v54;
              if ((uint64_t)(v56 - (_QWORD)v54) >> 1 > v34)
                v34 = v35 >> 1;
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
                v36 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v36 = v34;
              if (v36)
              {
                v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v56, v36);
                v32 = v54;
                v30 = v55;
                v29 = v16->i32[1];
              }
              else
              {
                v37 = 0;
              }
              v38 = (__int32 *)&v37[4 * v33];
              *v38 = v29;
              v31 = v38 + 1;
              while (v30 != v32)
              {
                v39 = *--v30;
                *--v38 = v39;
              }
              v54 = v38;
              v55 = v31;
              v56 = (unint64_t)&v37[4 * v36];
              if (v32)
                operator delete(v32);
            }
            else
            {
              *v55 = v29;
              v31 = v30 + 1;
            }
            v55 = v31;
          }
          v10 = v16[5].u32[0];
          if (v46)
          {
            (*(void (**)(_QWORD *))(*v46 + 8))(v46);
          }
          else if (v49)
          {
            --*v49;
          }
          v15 = 1;
          goto LABEL_30;
        }
      }
      else
      {
        fst::Times<fst::LatticeWeightTpl<float>,int>(&v51, (float32x2_t *)&v60, (int32x2_t *)&v46);
        *(_QWORD *)&v60 = v46;
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v60 + 8, (char *)__p, (uint64_t)v48, (v48 - (_BYTE *)__p) >> 2);
        if (__p)
        {
          v48 = __p;
          operator delete(__p);
        }
        if (!(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v10))
        {
          if ((v12 & 1) == 0)
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a2, (char *)v57, (uint64_t)v58, ((char *)v58 - (_BYTE *)v57) >> 2);
          if ((v14 & 1) == 0)
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v42, (char *)v54, (uint64_t)v55, ((char *)v55 - (_BYTE *)v54) >> 2);
          if (a4)
          {
            *(_QWORD *)a4 = v60;
            if (&v60 != (__int128 *)a4)
              std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a4 + 8), *((char **)&v60 + 1), v61, (uint64_t)(v61 - *((_QWORD *)&v60 + 1)) >> 2);
          }
          v15 = 0;
          v5 = 1;
          goto LABEL_30;
        }
      }
      v15 = 0;
      v5 = 0;
LABEL_30:
      if (v52)
      {
        v53 = v52;
        operator delete(v52);
      }
      if ((v15 & 1) == 0)
        goto LABEL_92;
    }
  }
  if (a2)
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  if (a3)
    *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  if (a4)
  {
    *(int32x2_t *)a4 = vdup_n_s32(0x7F800000u);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a4 + 8), 0, 0, 0);
  }
  v5 = 1;
LABEL_92:
  if (v54)
  {
    v55 = v54;
    operator delete(v54);
  }
  if (v57)
  {
    v58 = v57;
    operator delete(v57);
  }
  if (*((_QWORD *)&v60 + 1))
  {
    *(_QWORD *)&v61 = *((_QWORD *)&v60 + 1);
    operator delete(*((void **)&v60 + 1));
  }
  return v5 & 1;
}

void sub_1AD76F478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  uint64_t v31;
  void *v33;

  if (__p)
    operator delete(__p);
  if (a30)
    operator delete(a30);
  v33 = *(void **)(v31 - 136);
  if (v33)
  {
    *(_QWORD *)(v31 - 128) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<double>::insert(uint64_t a1, char *__src, double *a3)
{
  char *v4;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  void *__p;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v7 = a1 + 16;
  v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    v14 = *(_BYTE **)a1;
    v15 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v15 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v16 = (__src - v14) >> 3;
    v17 = v8 - (_QWORD)v14;
    if (v17 >> 2 > v15)
      v15 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v15;
    v25 = v7;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v7, v18);
    else
      v19 = 0;
    __p = v19;
    v22 = &v19[8 * v16];
    v23 = v22;
    v24 = &v19[8 * v18];
    std::__split_buffer<double>::push_back(&__p, a3);
    v4 = std::vector<double>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v23 != v22)
      v23 += (v22 - v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(double *)__src = *a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v10 = __src + 8;
    v11 = v6 - 8;
    v12 = v6;
    while (v11 < v6)
    {
      v13 = *(_QWORD *)v11;
      v11 += 8;
      *(_QWORD *)v12 = v13;
      v12 += 8;
    }
    *(_QWORD *)(a1 + 8) = v12;
    if (v6 != v10)
      memmove(&v6[-8 * ((v6 - v10) >> 3)], __src, v6 - v10);
    *(double *)v4 = *a3;
  }
  return v4;
}

void sub_1AD76F6B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<std::vector<quasar::Token>>::insert(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  void *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v4 = a2;
  v6 = a1[1];
  v9 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v8 = v9;
  if (v6 >= v9)
  {
    v10 = *a1;
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a1) >> 3) + 1;
    if (v11 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v10) >> 3);
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v10) >> 3);
    v14 = 2 * v13;
    if (2 * v13 <= v11)
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a1) >> 3) + 1;
    if (v13 >= 0x555555555555555)
      v15 = 0xAAAAAAAAAAAAAAALL;
    else
      v15 = v14;
    v22 = v7;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v15);
    else
      v16 = 0;
    v18 = v16;
    v19 = &v16[24 * v12];
    v20 = v19;
    v21 = &v16[24 * v15];
    std::__split_buffer<std::vector<quasar::Token>>::push_back[abi:ne180100](&v18, a3);
    v4 = (uint64_t *)std::vector<std::vector<quasar::Token>>::__swap_out_circular_buffer(a1, &v18, v4);
    std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer(&v18);
  }
  else if (a2 == (uint64_t *)v6)
  {
    std::vector<std::vector<quasar::Token>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::Token> const&>((uint64_t)a1, a3);
  }
  else
  {
    std::vector<std::vector<quasar::Token>>::__move_range((uint64_t)a1, a2, v6, (uint64_t)(a2 + 3));
    if (v4 <= a3)
      a3 += 3 * (a1[1] > (unint64_t)a3);
    if (v4 != a3)
      std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)v4, *a3, a3[1], 0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 5));
  }
  return v4;
}

void sub_1AD76F868(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<quasar::Token>>::resize(uint64_t *a1, unint64_t a2)
{
  void **v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;

  v3 = (void **)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<quasar::Token>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      v8 = v3;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void std::vector<double>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<double>::__append((char **)a1, a2 - v2);
  }
}

uint64_t fst::Union<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(uint64_t a1, uint64_t a2)
{
  fst *v4;
  const fst::SymbolTable *v5;
  fst *v6;
  const fst::SymbolTable *v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  fst *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  uint64_t v27;
  void *v28[2];
  void *v29[2];
  uint64_t v30;
  int v31;
  _QWORD v32[3];
  _DWORD *v33;
  unint64_t v34;
  uint64_t v35;
  void *__p;
  void *v37;
  uint64_t v38;
  int v39;
  unsigned int v40;

  v4 = (fst *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  v5 = (const fst::SymbolTable *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  if (!fst::CompatSymbols(v4, v5, (const fst::SymbolTable *)1)
    || (v6 = (fst *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1),
        v7 = (const fst::SymbolTable *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2),
        !fst::CompatSymbols(v6, v7, (const fst::SymbolTable *)1)))
  {
    std::string::basic_string[abi:ne180100]<0>(v28, "ERROR");
    v20 = fst::LogMessage::LogMessage((fst *)v32, (uint64_t)v28);
    v21 = (_QWORD *)fst::cerr(v20);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Union: input/output symbol tables of 1st argument ", 50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"do not match input/output symbol tables of 2nd argument", 55);
    fst::LogMessage::~LogMessage((fst::LogMessage *)v32);
    if (SHIBYTE(v29[0]) < 0)
      operator delete(v28[0]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, 4, 4);
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, 0x2000000000, 1);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if ((_DWORD)result == -1)
  {
    if ((v11 & 4) != 0)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, 4, 4);
    return result;
  }
  v13 = result;
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 1, 0))
  {
    v14 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2);
    if (v9)
      v15 = v8;
    else
      v15 = v8 + 1;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 248))(a1, (v15 + v14));
  }
  v40 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v38);
LABEL_10:
  if (!v38)
  {
    if ((int)v40 >= v39)
      goto LABEL_44;
    goto LABEL_14;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38))
  {
LABEL_14:
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
    if (v38)
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 24))(v38);
    else
      v17 = v40;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(&v35, a2, v17);
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 184))(a1, v16, &v35);
    if (__p)
    {
      v37 = __p;
      operator delete(__p);
    }
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v17);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 256))(a1, v16, v18);
    v34 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, v17, v32);
    while (1)
    {
      if (v32[0])
      {
        if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v32[0] + 24))(v32[0]))
        {
          if (v32[0])
          {
            (*(void (**)(void))(*(_QWORD *)v32[0] + 8))();
            goto LABEL_35;
          }
LABEL_33:
          if (v33)
            --*v33;
LABEL_35:
          if (v38)
            (*(void (**)(uint64_t))(*(_QWORD *)v38 + 32))(v38);
          else
            ++v40;
          goto LABEL_10;
        }
        if (v32[0])
        {
          v19 = (*(uint64_t (**)(void))(*(_QWORD *)v32[0] + 32))();
          goto LABEL_26;
        }
      }
      else if (v34 >= v32[2])
      {
        goto LABEL_33;
      }
      v19 = v32[1] + 48 * v34;
LABEL_26:
      v28[0] = *(void **)v19;
      v28[1] = *(void **)(v19 + 8);
      v29[1] = 0;
      v30 = 0;
      v29[0] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v29, *(const void **)(v19 + 16), *(_QWORD *)(v19 + 24), (uint64_t)(*(_QWORD *)(v19 + 24) - *(_QWORD *)(v19 + 16)) >> 2);
      v31 = *(_DWORD *)(v19 + 40) + v8;
      (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 208))(a1, v16, v28);
      if (v29[0])
      {
        v29[1] = v29[0];
        operator delete(v29[0]);
      }
      if (v32[0])
        (*(void (**)(_QWORD))(*(_QWORD *)v32[0] + 40))(v32[0]);
      else
        ++v34;
    }
  }
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
LABEL_44:
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)v23 == -1)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 176))(a1, v13);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v11, 0x3FFFFFFF0004);
  }
  else
  {
    v24 = v23;
    if (v9)
    {
      v30 = 0;
      *(_OWORD *)v28 = 0u;
      *(_OWORD *)v29 = 0u;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v29, 0, 0, 0);
      v31 = v13 + v8;
      (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 208))(a1, v24, v28);
      v25 = v29[0];
      if (v29[0])
        goto LABEL_47;
    }
    else
    {
      v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 176))(a1, v27);
      v30 = 0;
      *(_OWORD *)v28 = 0u;
      *(_OWORD *)v29 = 0u;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v29, 0, 0, 0);
      v31 = v24;
      (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 208))(a1, v27, v28);
      if (v29[0])
      {
        v29[1] = v29[0];
        operator delete(v29[0]);
      }
      v30 = 0;
      *(_OWORD *)v28 = 0u;
      *(_OWORD *)v29 = 0u;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v29, 0, 0, 0);
      v31 = v13 + v8;
      (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 208))(a1, v27, v28);
      v25 = v29[0];
      if (v29[0])
      {
LABEL_47:
        v29[1] = v25;
        operator delete(v25);
      }
    }
    v26 = fst::UnionProperties(v10, v11, 0);
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v26, 0x3FFFFFFF0007);
  }
}

void sub_1AD76FF5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~VectorFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D25800;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void quasar::OnlineAEDRescoringDecoder::registerParams(quasar::OnlineAEDRescoringDecoder *this, quasar::SystemConfig *a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "CTC-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "(default 0.3), amCost = amCost * ctcScale + forwardAEDScale * forwardAEDScore + backwardAEDScale * backwardAEDScore");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 504, (uint64_t)__p, 0, 251, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "forward-AED-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "(default 1.0), amCost = amCost * ctcScale + forwardAEDScale * forwardAEDScore + backwardAEDScale * backwardAEDScore");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 508, (uint64_t)__p, 0, 251, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "backward-AED-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "(default 1.0), amCost = amCost * ctcScale + forwardAEDScale * forwardAEDScore + backwardAEDScale * backwardAEDScore");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 512, (uint64_t)__p, 0, 251, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "enable-memory-map");
  std::string::basic_string[abi:ne180100]<0>(__p, "Map model into memory (requires aligned models)");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 536, (uint64_t)__p, 0, 251, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Path of the decoder neural network");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 480, (uint64_t)__p, 1, 251, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "nbest-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "How many nbest to keep and rescore (default 32)");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 472, (uint64_t)__p, 0, 251, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "ilabel-mapper-type");
  std::string::basic_string[abi:ne180100]<0>(__p, "(default decrease-by-one) either identity, decrease-by-one or use-transition-model");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 544, (uint64_t)__p, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1AD7703B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void quasar::SystemConfig::Register<float>(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9)
{
  uint64_t *v15;
  uint64_t *v16;
  uint64_t **v17;
  void *__p[2];
  char v19;
  uint64_t v20;
  void **v21;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  quasar::SystemConfig::Version::Version(&v20, a6, a7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  v21 = __p;
  v15 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1464), (const void **)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v21);
  v15[7] = v20;
  if (v19 < 0)
    operator delete(__p[0]);
  quasar::SystemConfig::Version::Version(&v20, a8, a9);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  v21 = __p;
  v16 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1488), (const void **)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v21);
  v16[7] = v20;
  if (v19 < 0)
  {
    operator delete(__p[0]);
    if (!a5)
      return;
  }
  else if (!a5)
  {
    return;
  }
  __p[0] = (void *)(a1 + 816);
  v17 = (uint64_t **)(std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1512), (const void **)(a1 + 816), (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(v17, (const void **)__p, (uint64_t)__p);
  if (v19 < 0)
    operator delete(__p[0]);
}

void sub_1AD77059C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::SystemConfig::Register<BOOL>(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9)
{
  uint64_t *v15;
  uint64_t *v16;
  uint64_t **v17;
  void *__p[2];
  char v19;
  uint64_t v20;
  void **v21;

  (**(void (***)(uint64_t))a1)(a1);
  quasar::SystemConfig::Version::Version(&v20, a6, a7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  v21 = __p;
  v15 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1464), (const void **)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v21);
  v15[7] = v20;
  if (v19 < 0)
    operator delete(__p[0]);
  quasar::SystemConfig::Version::Version(&v20, a8, a9);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  v21 = __p;
  v16 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1488), (const void **)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v21);
  v16[7] = v20;
  if (v19 < 0)
  {
    operator delete(__p[0]);
    if (!a5)
      return;
  }
  else if (!a5)
  {
    return;
  }
  __p[0] = (void *)(a1 + 816);
  v17 = (uint64_t **)(std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1512), (const void **)(a1 + 816), (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(v17, (const void **)__p, (uint64_t)__p);
  if (v19 < 0)
    operator delete(__p[0]);
}

void sub_1AD770744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::SystemConfig::Register<std::string>(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9)
{
  uint64_t *v15;
  uint64_t *v16;
  uint64_t **v17;
  void *__p[2];
  char v19;
  uint64_t v20;
  void **v21;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  quasar::SystemConfig::Version::Version(&v20, a6, a7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  v21 = __p;
  v15 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1464), (const void **)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v21);
  v15[7] = v20;
  if (v19 < 0)
    operator delete(__p[0]);
  quasar::SystemConfig::Version::Version(&v20, a8, a9);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  v21 = __p;
  v16 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1488), (const void **)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v21);
  v16[7] = v20;
  if (v19 < 0)
  {
    operator delete(__p[0]);
    if (!a5)
      return;
  }
  else if (!a5)
  {
    return;
  }
  __p[0] = (void *)(a1 + 816);
  v17 = (uint64_t **)(std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1512), (const void **)(a1 + 816), (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(v17, (const void **)__p, (uint64_t)__p);
  if (v19 < 0)
    operator delete(__p[0]);
}

void sub_1AD7708EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::SystemConfig::Register<int>(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9)
{
  uint64_t *v15;
  uint64_t *v16;
  uint64_t **v17;
  void *__p[2];
  char v19;
  uint64_t v20;
  void **v21;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  quasar::SystemConfig::Version::Version(&v20, a6, a7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  v21 = __p;
  v15 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1464), (const void **)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v21);
  v15[7] = v20;
  if (v19 < 0)
    operator delete(__p[0]);
  quasar::SystemConfig::Version::Version(&v20, a8, a9);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  v21 = __p;
  v16 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1488), (const void **)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v21);
  v16[7] = v20;
  if (v19 < 0)
  {
    operator delete(__p[0]);
    if (!a5)
      return;
  }
  else if (!a5)
  {
    return;
  }
  __p[0] = (void *)(a1 + 816);
  v17 = (uint64_t **)(std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1512), (const void **)(a1 + 816), (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(v17, (const void **)__p, (uint64_t)__p);
  if (v19 < 0)
    operator delete(__p[0]);
}

void sub_1AD770A94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::OnlineAEDRescoringDecoder::~OnlineAEDRescoringDecoder(void **this)
{
  *this = &off_1E5D39960;
  if (*((char *)this + 567) < 0)
    operator delete(this[68]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 65));
  if (*((char *)this + 503) < 0)
    operator delete(this[60]);
  *this = &off_1E5CFF0E0;
  if (*((char *)this + 471) < 0)
    operator delete(this[56]);
  quasar::Decoder::~Decoder(this);
}

{
  *this = &off_1E5D39960;
  if (*((char *)this + 567) < 0)
    operator delete(this[68]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 65));
  if (*((char *)this + 503) < 0)
    operator delete(this[60]);
  *this = &off_1E5CFF0E0;
  if (*((char *)this + 471) < 0)
    operator delete(this[56]);
  quasar::Decoder::~Decoder(this);
  JUMPOUT(0x1AF44D190);
}

void quasar::QuasarDebugMessage::~QuasarDebugMessage(quasar::QuasarDebugMessage *this)
{
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  void *__p;
  char v6;

  v2 = (void (*)(uint64_t))quasar::QuasarDebugMessage::logger;
  std::stringbuf::str();
  v2((uint64_t)&__p);
  if (v6 < 0)
    operator delete(__p);
  v3 = MEMORY[0x1E0DE4F60];
  v4 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)this = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = *(_QWORD *)(v3 + 24);
  *((_QWORD *)this + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF44D094]((char *)this + 112);
}

void quasar::QuasarInfoMessage::~QuasarInfoMessage(quasar::QuasarInfoMessage *this)
{
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  void *__p;
  char v6;

  v2 = (void (*)(uint64_t))quasar::QuasarInfoMessage::logger;
  std::stringbuf::str();
  v2((uint64_t)&__p);
  if (v6 < 0)
    operator delete(__p);
  v3 = MEMORY[0x1E0DE4F60];
  v4 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)this = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = *(_QWORD *)(v3 + 24);
  *((_QWORD *)this + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF44D094]((char *)this + 112);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 88);
}

double fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Final@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  double *v3;
  double result;

  v3 = *(double **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2);
  result = *v3;
  *a3 = *(_QWORD *)v3;
  return result;
}

unint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return 0xCCCCCCCCCCCCCCCDLL
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 32)
                  - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 24)) >> 2);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 8);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 16);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

void fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  fst::ArcBuffer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::SetFromFst<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(a3, a1, a2, a4, 2);
}

uint64_t fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Write(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1AD770F20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1AD771000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitMatcher()
{
  return 0;
}

uint64_t fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::IsMemoryMapped()
{
  return 0;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::operator=(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  void *__p[2];
  char v6;
  char v7;

  if (FLAGS_fst_error_fatal)
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  else
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ImplToFst: Assignment operator disallowed", 41);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) |= 4uLL;
  return a1;
}

void sub_1AD771108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

unint64_t fst::TestProperties<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *__p[2];
  char v13;
  char v14;

  if (!FLAGS_fst_verify_properties)
    return fst::ComputeProperties<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1, a2, a3, 1);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v7 = fst::ComputeProperties<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1, a2, a3, 0);
  if (!fst::CompatProperties(v6, v7))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
    v9 = (_QWORD *)fst::cerr(v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  return v7;
}

void sub_1AD771254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::vector<unsigned int>::size_type v18;
  __n128 v19;
  char v20;
  int *v21;
  int v22;
  int v23;
  unint64_t v24;
  float v25;
  int v26;
  std::vector<unsigned int>::pointer end;
  unsigned int *v28;
  std::vector<unsigned int>::pointer begin;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  std::vector<unsigned int>::pointer v38;
  unsigned int *v39;
  std::vector<unsigned int>::pointer v40;
  int64_t v41;
  unint64_t v42;
  int64_t v43;
  unint64_t v44;
  char *v45;
  unsigned int *v46;
  unsigned int v47;
  unint64_t v48;
  std::vector<unsigned int>::pointer v49;
  unsigned int v50;
  unint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unint64_t v54;
  std::vector<unsigned int>::pointer v55;
  unsigned int v56;
  unint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  std::vector<unsigned int> v65;
  std::vector<unsigned int> v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  float v73;
  int v74;
  float v75;
  unsigned __int32 v76;

  v7 = a1;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v9 = v8;
  if (!a4
    || (v10 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7, (a2 & ~v10) != 0))
  {
    v9 = v8 & 7;
    v72 = v9;
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    if ((a2 & 0xF3C00000000) != 0 && v11)
    {
      v67 = 0;
      v68 = 0;
      v69 = 0;
      v70 = &v72;
      fst::DfsVisit<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(v7, &v67, 0);
      v9 = v72;
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) != 0)
    {
      v12 = a2 & 0xC0000;
      v13 = 0x10425A810000;
      if ((a2 & 0xC0000) != 0)
        v13 = 0x10425A850000;
      v14 = v9 | v13;
      v15 = a2 & 0x300000;
      if ((a2 & 0x300000) != 0)
        v14 |= 0x100000uLL;
      v72 = v14;
      memset(&v66, 0, sizeof(v66));
      memset(&v65, 0, sizeof(v65));
      v64 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 128))(v7, &v62);
      v16 = 0;
      v61 = v7;
LABEL_12:
      if (v62)
      {
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v62 + 16))(v62))
        {
          if (v62)
          {
            v17 = (*(uint64_t (**)(void))(*(_QWORD *)v62 + 24))();
LABEL_18:
            v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 40))(v7, v17);
            v66.__end_ = v66.__begin_;
            v65.__end_ = v65.__begin_;
            if (v12)
              std::vector<int>::reserve(&v66, v18);
            if (v15)
              std::vector<int>::reserve(&v65, v18);
            v71 = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v7 + 136))(v7, v17, &v67);
            v20 = 1;
            while (1)
            {
              if (v67)
              {
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v67 + 24))(v67))
                {
                  if (v67)
                  {
                    (*(void (**)(void))(*(_QWORD *)v67 + 8))();
                  }
                  else
                  {
LABEL_94:
                    if (v70)
                      --*(_DWORD *)v70;
                  }
                  v7 = v61;
                  if (v12
                    && (std::__sort<std::__less<int,int> &,int *>(),
                        (std::vector<unsigned int>::pointer)((char *)v66.__end_ - (char *)v66.__begin_) >= (std::vector<unsigned int>::pointer)5))
                  {
                    v48 = v66.__end_ - v66.__begin_;
                    if (v48 <= 2)
                      v48 = 2;
                    v49 = v66.__begin_ + 1;
                    v50 = *v66.__begin_;
                    v51 = v48 - 1;
                    while (1)
                    {
                      v53 = *v49++;
                      v52 = v53;
                      if (v53 == v50)
                        break;
                      v50 = v52;
                      if (!--v51)
                        goto LABEL_103;
                    }
                    v72 = v72 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
                    if (!v15)
                    {
LABEL_114:
                      if (v16 >= 1)
                        v72 = v72 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v61 + 32))(&v67, v61, v17);
                      v75 = *((float *)&v67 + 1);
                      v76 = v67;
                      v74 = 2139095040;
                      v73 = INFINITY;
                      if (*(float *)&v67 == INFINITY && v75 == v73)
                      {
                        if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v61 + 40))(v61, v17) != 1)
                          v72 = v72 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                      }
                      else
                      {
                        v75 = *((float *)&v67 + 1);
                        v76 = v67;
                        v74 = 0;
                        v73 = 0.0;
                        if (*(float *)&v67 != 0.0 || v75 != v73)
                          v72 = v72 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                        ++v16;
                      }
                      if (v62)
                        (*(void (**)(uint64_t))(*(_QWORD *)v62 + 32))(v62);
                      else
                        ++v64;
                      goto LABEL_12;
                    }
                  }
                  else
                  {
LABEL_103:
                    if (!v15)
                      goto LABEL_114;
                  }
                  std::__sort<std::__less<int,int> &,int *>();
                  if ((std::vector<unsigned int>::pointer)((char *)v65.__end_ - (char *)v65.__begin_) >= (std::vector<unsigned int>::pointer)5)
                  {
                    v54 = v65.__end_ - v65.__begin_;
                    if (v54 <= 2)
                      v54 = 2;
                    v55 = v65.__begin_ + 1;
                    v56 = *v65.__begin_;
                    v57 = v54 - 1;
                    while (1)
                    {
                      v59 = *v55++;
                      v58 = v59;
                      if (v59 == v56)
                        break;
                      v56 = v58;
                      if (!--v57)
                        goto LABEL_114;
                    }
                    v72 = v72 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                  }
                  goto LABEL_114;
                }
                if (v67)
                {
                  v21 = (int *)(*(uint64_t (**)(void))(*(_QWORD *)v67 + 32))();
                  goto LABEL_29;
                }
              }
              else if (v71 >= v69)
              {
                goto LABEL_94;
              }
              v21 = (int *)(v68 + 20 * v71);
LABEL_29:
              v22 = *v21;
              v23 = *v21;
              if (*v21 != v21[1])
              {
                v72 = v72 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
                v23 = v21[1];
              }
              if (v22 | v23)
              {
                if (v22)
                {
                  if (v23)
                    goto LABEL_35;
                  goto LABEL_39;
                }
                v24 = v72;
              }
              else
              {
                v24 = v72 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
              }
              v72 = v24 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
              if (v23)
              {
LABEL_35:
                if ((v20 & 1) != 0)
                  goto LABEL_44;
                goto LABEL_40;
              }
LABEL_39:
              v72 = v72 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
              if ((v20 & 1) != 0)
                goto LABEL_44;
LABEL_40:
              if (v22 < (int)a2)
                v72 = v72 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
              if (v23 < SHIDWORD(a2))
                v72 = v72 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
LABEL_44:
              v76 = 0;
              v19.n128_u32[0] = v21[2];
              v25 = *((float *)v21 + 3);
              v76 = v19.n128_u32[0];
              v75 = v25;
              v74 = 0;
              v73 = 0.0;
              if (v19.n128_f32[0] != 0.0 || v75 != v73)
              {
                v76 = v19.n128_u32[0];
                v75 = v25;
                v74 = 2139095040;
                v73 = INFINITY;
                if (v19.n128_f32[0] != INFINITY || (v19.n128_f32[0] = v75, v75 != v73))
                  v72 = v72 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
              }
              v26 = v21[4];
              if (v26 <= (int)v17)
                v72 = v72 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
              if (v26 != (_DWORD)v17 + 1)
                v72 = v72 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              a2 = *(_QWORD *)v21;
              if (v12)
              {
                end = v66.__end_;
                if (v66.__end_ >= v66.__end_cap_.__value_)
                {
                  begin = v66.__begin_;
                  v30 = v66.__end_ - v66.__begin_;
                  v31 = v30 + 1;
                  if ((unint64_t)(v30 + 1) >> 62)
                    goto LABEL_139;
                  v32 = (char *)v66.__end_cap_.__value_ - (char *)v66.__begin_;
                  if (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 1 > v31)
                    v31 = v32 >> 1;
                  if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
                    v33 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v33 = v31;
                  if (v33)
                  {
                    v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v66.__end_cap_, v33);
                    begin = v66.__begin_;
                    end = v66.__end_;
                    LODWORD(v35) = *v21;
                  }
                  else
                  {
                    v34 = 0;
                    v35 = *(_QWORD *)v21;
                  }
                  v36 = (unsigned int *)&v34[4 * v30];
                  *v36 = v35;
                  v28 = v36 + 1;
                  while (end != begin)
                  {
                    v37 = *--end;
                    *--v36 = v37;
                  }
                  v66.__begin_ = v36;
                  v66.__end_ = v28;
                  v66.__end_cap_.__value_ = (unsigned int *)&v34[4 * v33];
                  if (begin)
                    operator delete(begin);
                }
                else
                {
                  *v66.__end_ = a2;
                  v28 = end + 1;
                }
                v66.__end_ = v28;
              }
              if (v15)
              {
                v38 = v65.__end_;
                if (v65.__end_ >= v65.__end_cap_.__value_)
                {
                  v40 = v65.__begin_;
                  v41 = v65.__end_ - v65.__begin_;
                  v42 = v41 + 1;
                  if ((unint64_t)(v41 + 1) >> 62)
LABEL_139:
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v43 = (char *)v65.__end_cap_.__value_ - (char *)v65.__begin_;
                  if (((char *)v65.__end_cap_.__value_ - (char *)v65.__begin_) >> 1 > v42)
                    v42 = v43 >> 1;
                  if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
                    v44 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v44 = v42;
                  if (v44)
                  {
                    v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v65.__end_cap_, v44);
                    v40 = v65.__begin_;
                    v38 = v65.__end_;
                  }
                  else
                  {
                    v45 = 0;
                  }
                  v46 = (unsigned int *)&v45[4 * v41];
                  *v46 = v21[1];
                  v39 = v46 + 1;
                  while (v38 != v40)
                  {
                    v47 = *--v38;
                    *--v46 = v47;
                  }
                  v65.__begin_ = v46;
                  v65.__end_ = v39;
                  v65.__end_cap_.__value_ = (unsigned int *)&v45[4 * v44];
                  if (v40)
                    operator delete(v40);
                }
                else
                {
                  *v65.__end_ = v21[1];
                  v39 = v38 + 1;
                }
                v65.__end_ = v39;
              }
              if (v67)
              {
                (*(void (**)(uint64_t, __n128))(*(_QWORD *)v67 + 40))(v67, v19);
                v20 = 0;
              }
              else
              {
                v20 = 0;
                ++v71;
              }
            }
          }
LABEL_17:
          v17 = v64;
          goto LABEL_18;
        }
        if (v62)
          (*(void (**)(void))(*(_QWORD *)v62 + 8))();
      }
      else if ((int)v64 < v63)
      {
        goto LABEL_17;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7) != -1
        && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7))
      {
        v72 = v72 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
      }
      if (v65.__begin_)
      {
        v65.__end_ = v65.__begin_;
        operator delete(v65.__begin_);
      }
      if (v66.__begin_)
      {
        v66.__end_ = v66.__begin_;
        operator delete(v66.__begin_);
      }
      v9 = v72;
    }
    v10 = v9 & 0x3FFFFFFF0000 | (2 * v9) & 0x2AAAAAAA0000 | (v9 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v10;
  return v9;
}

void sub_1AD771AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (__p)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

BOOL fst::CompatProperties(unint64_t this, unint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  fst *v7;
  _QWORD *v8;
  _QWORD *v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  const char *v17;
  uint64_t v18;
  void *__p[2];
  char v21;
  char v22;

  v2 = (((2 * a2) & 0x2AAAAAAA0000 | a2 & 0x3FFFFFFF0000 | (a2 >> 1) & 0x155555550000) & ((this >> 1) & 0x155555550000 | (2 * this) & 0x2AAAAAAA0000 | this) | 7) & (a2 ^ this);
  if (v2)
  {
    v5 = 0;
    v6 = 1;
    do
    {
      if ((v6 & v2) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        v7 = fst::LogMessage::LogMessage((fst *)&v22, (uint64_t)__p);
        v8 = (_QWORD *)fst::cerr(v7);
        v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"CompatProperties: mismatch: ", 28);
        v10 = strlen(fst::PropertyNames[v5]);
        v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)fst::PropertyNames[v5], v10);
        v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": props1 = ", 11);
        if ((v6 & this) != 0)
          v13 = "true";
        else
          v13 = "false";
        if ((v6 & this) != 0)
          v14 = 4;
        else
          v14 = 5;
        v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
        v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", props2 = ", 11);
        if ((v6 & a2) != 0)
          v17 = "true";
        else
          v17 = "false";
        if ((v6 & a2) != 0)
          v18 = 4;
        else
          v18 = 5;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v22);
        if (v21 < 0)
          operator delete(__p[0]);
      }
      v6 *= 2;
      ++v5;
    }
    while (v5 != 64);
  }
  return v2 == 0;
}

void sub_1AD771CEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char inited;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::vector<char>::pointer begin;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int v31;
  std::vector<char>::pointer end;
  char *v33;
  std::vector<char>::pointer v34;
  int64_t v35;
  int64_t v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char v43;
  char v44;
  uint64_t v45;
  int v46;
  std::vector<char>::value_type v47[8];
  std::vector<char>::value_type __x[8];
  int v49;
  int v50;
  void *v51;
  _QWORD v52[6];
  _QWORD *v53;
  _OWORD v54[2];
  __int128 v55;
  std::vector<char> v56;

  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitVisit((uint64_t)a2, a1);
  v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v46 == -1)
  {
    fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
    return;
  }
  memset(&v56, 0, sizeof(v56));
  v55 = 0u;
  memset(v54, 0, sizeof(v54));
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MemoryPool(&v51, 64);
  v45 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v45)
    v6 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v6 = (v46 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v6 <= (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v6 < (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
      v56.__end_ = &v56.__begin_[(int)v6];
  }
  else
  {
    std::vector<char>::__append(&v56, (int)v6 - (unint64_t)(v56.__end_ - v56.__begin_), __x);
  }
  v50 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v46 >= (int)v6)
    goto LABEL_97;
  v7 = v46;
  v44 = a3;
  do
  {
    v56.__begin_[(int)v7] = 1;
    v8 = (uint64_t)v53;
    if (v53)
    {
      v53 = (_QWORD *)v53[6];
    }
    else
    {
      v8 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v52, 1);
      *(_QWORD *)(v8 + 48) = 0;
    }
    *(_DWORD *)v8 = v7;
    *(_QWORD *)(v8 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v7, v8 + 8);
    *(_QWORD *)v47 = v8;
    std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::push_back(v54, v47);
    inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, v7, v7);
LABEL_16:
    v10 = inited;
    while (*((_QWORD *)&v55 + 1))
    {
      v11 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                   + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
      v12 = *(int *)v11;
      v13 = v56.__end_ - v56.__begin_;
      if (v56.__end_ - v56.__begin_ <= v12)
      {
        v6 = v12 + 1;
        v47[0] = 0;
        if (v12 + 1 <= v13)
        {
          if (v12 + 1 < v13)
            v56.__end_ = &v56.__begin_[v6];
        }
        else
        {
          std::vector<char>::__append(&v56, v12 + 1 - v13, v47);
        }
      }
      if ((v10 & 1) == 0)
        goto LABEL_33;
      v14 = v11[1];
      if (v14)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
          goto LABEL_33;
        v15 = v11[1];
        if (!v15)
          goto LABEL_29;
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
LABEL_30:
        v17 = *(int *)(v16 + 16);
        begin = v56.__begin_;
        v19 = v56.__end_ - v56.__begin_;
        if (v56.__end_ - v56.__begin_ <= v17)
        {
          v6 = (v17 + 1);
          v47[0] = 0;
          if ((int)v6 <= v19)
          {
            if ((int)v6 < v19)
              v56.__end_ = &v56.__begin_[(int)v6];
          }
          else
          {
            std::vector<char>::__append(&v56, (int)v6 - v19, v47);
            v17 = *(int *)(v16 + 16);
            begin = v56.__begin_;
          }
        }
        v26 = begin[v17];
        if (v26 == 1)
        {
          v10 = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::BackArc((uint64_t)a2, v12, v16);
          v25 = v11[1];
          if (v25)
            goto LABEL_50;
LABEL_51:
          ++v11[5];
        }
        else
        {
          if (v26 != 2)
          {
            begin[v17] = 1;
            v27 = (uint64_t)v53;
            if (v53)
            {
              v53 = (_QWORD *)v53[6];
            }
            else
            {
              v27 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v52, 1);
              *(_QWORD *)(v27 + 48) = 0;
            }
            *(_DWORD *)v27 = *(_DWORD *)(v16 + 16);
            *(_QWORD *)(v27 + 40) = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
            *(_QWORD *)v47 = v27;
            std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::push_back(v54, v47);
            inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, *(_DWORD *)(v16 + 16), v7);
            goto LABEL_16;
          }
          v10 = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::ForwardOrCrossArc((_QWORD **)a2, v12, v16);
          v25 = v11[1];
          if (!v25)
            goto LABEL_51;
LABEL_50:
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        }
      }
      else
      {
        if (v11[5] < v11[3])
        {
LABEL_29:
          v16 = v11[2] + 20 * v11[5];
          goto LABEL_30;
        }
LABEL_33:
        v56.__begin_[v12] = 2;
        v20 = v11[1];
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        }
        else
        {
          v21 = (_DWORD *)v11[4];
          if (v21)
            --*v21;
        }
        v11[6] = v53;
        v53 = v11;
        --*((_QWORD *)&v55 + 1);
        std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v54, 1);
        if (*((_QWORD *)&v55 + 1))
        {
          v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                      + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
          v23 = *(_DWORD *)v22;
          v24 = *(_QWORD *)(v22 + 8);
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
          fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishState((uint64_t)a2, v12, v23);
          v25 = *(_QWORD *)(v22 + 8);
          if (v25)
            goto LABEL_50;
          ++*(_QWORD *)(v22 + 40);
        }
        else
        {
          fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishState((uint64_t)a2, v12, -1);
        }
      }
    }
    if ((a3 & 1) != 0)
      break;
    if ((_DWORD)v7 == v46)
      v7 = 0;
    else
      v7 = (v7 + 1);
    if ((int)v7 < (int)v6)
    {
      v28 = &v56.__begin_[(int)v7];
      v29 = (int)v6 - (uint64_t)(int)v7;
      while (*v28++)
      {
        v7 = (v7 + 1);
        if (!--v29)
        {
          v7 = v6;
          break;
        }
      }
    }
    if (v45 || (_DWORD)v7 != (_DWORD)v6)
      continue;
LABEL_67:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_73;
      }
    }
    else if (v50 >= v49)
    {
      continue;
    }
    v31 = v50;
LABEL_73:
    if (v31 != (_DWORD)v6)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v50;
      goto LABEL_67;
    }
    end = v56.__end_;
    if (v56.__end_ >= v56.__end_cap_.__value_)
    {
      v34 = v56.__begin_;
      v35 = v56.__end_ - v56.__begin_;
      v36 = v56.__end_ - v56.__begin_ + 1;
      if (v36 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v37 = v56.__end_cap_.__value_ - v56.__begin_;
      if (2 * (v56.__end_cap_.__value_ - v56.__begin_) > (unint64_t)v36)
        v36 = 2 * v37;
      if (v37 >= 0x3FFFFFFFFFFFFFFFLL)
        v38 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (v38)
        v39 = (char *)operator new(v38);
      else
        v39 = 0;
      v40 = &v39[v35];
      v41 = &v39[v35];
      *v41 = 0;
      v33 = v41 + 1;
      if (end != v34)
      {
        v42 = &end[~(unint64_t)v34];
        do
        {
          v43 = *--end;
          (v42--)[(_QWORD)v39] = v43;
        }
        while (end != v34);
        end = v56.__begin_;
        v40 = v39;
      }
      v56.__begin_ = v40;
      v56.__end_ = v33;
      v56.__end_cap_.__value_ = &v39[v38];
      if (end)
        operator delete(end);
    }
    else
    {
      *v56.__end_ = 0;
      v33 = end + 1;
    }
    v56.__end_ = v33;
    v6 = (v6 + 1);
    a3 = v44;
  }
  while ((v10 & 1) != 0 && (int)v7 < (int)v6);
LABEL_97:
  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v51 = &unk_1E5D198A0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::~MemoryArena(v52);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v51);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v54);
  if (v56.__begin_)
  {
    v56.__end_ = v56.__begin_;
    operator delete(v56.__begin_);
  }
}

void sub_1AD7723EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D198A0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

_QWORD *fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitVisit(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *result;

  if (*(_QWORD *)a1)
    *(_QWORD *)(*(_QWORD *)a1 + 8) = **(_QWORD **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    *(_QWORD *)(v4 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = 0;
    *(_QWORD *)(v5 + 8) = 0;
  }
  else
  {
    v7 = (_QWORD *)operator new();
    v7[1] = 0;
    v7[2] = 0;
    *v7 = 0;
    *(_QWORD *)(a1 + 16) = v7;
    v6 = 1;
  }
  *(_BYTE *)(a1 + 52) = v6;
  **(_QWORD **)(a1 + 24) = **(_QWORD **)(a1 + 24) & 0xFFFFF0C3FFFFFFFFLL | 0x52800000000;
  *(_QWORD *)(a1 + 32) = a2;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  *(_DWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 40) = v8;
  v9 = (_QWORD *)operator new();
  v9[1] = 0;
  v9[2] = 0;
  *v9 = 0;
  *(_QWORD *)(a1 + 56) = v9;
  v10 = (_QWORD *)operator new();
  v10[1] = 0;
  v10[2] = 0;
  *v10 = 0;
  *(_QWORD *)(a1 + 64) = v10;
  v11 = (_QWORD *)operator new();
  v11[1] = 0;
  v11[2] = 0;
  *v11 = 0;
  *(_QWORD *)(a1 + 72) = v11;
  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *result = 0;
  *(_QWORD *)(a1 + 80) = result;
  return result;
}

uint64_t fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit(uint64_t result)
{
  _QWORD *v1;
  _DWORD *v2;
  uint64_t v3;
  unint64_t v4;
  void **v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  void *v12;

  v1 = (_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v2 = **(_DWORD ***)result;
    v3 = *(_QWORD *)(*(_QWORD *)result + 8) - (_QWORD)v2;
    if (v3)
    {
      v4 = v3 >> 2;
      if (v4 <= 1)
        v4 = 1;
      do
      {
        *v2 = *(_DWORD *)(result + 48) + ~*v2;
        ++v2;
        --v4;
      }
      while (v4);
    }
  }
  if (*(_BYTE *)(result + 52))
  {
    v5 = *(void ***)(result + 16);
    if (v5)
    {
      if (*v5)
        operator delete(*v5);
      result = MEMORY[0x1AF44D190](v5, 0x1010C40113C0ABBLL);
    }
  }
  v6 = v1[7];
  if (v6)
  {
    v7 = *(void **)v6;
    if (*(_QWORD *)v6)
    {
      *(_QWORD *)(v6 + 8) = v7;
      operator delete(v7);
    }
    result = MEMORY[0x1AF44D190](v6, 0x10C402FEFCB83);
  }
  v8 = v1[8];
  if (v8)
  {
    v9 = *(void **)v8;
    if (*(_QWORD *)v8)
    {
      *(_QWORD *)(v8 + 8) = v9;
      operator delete(v9);
    }
    result = MEMORY[0x1AF44D190](v8, 0x10C402FEFCB83);
  }
  v10 = (void **)v1[9];
  if (v10)
  {
    if (*v10)
      operator delete(*v10);
    result = MEMORY[0x1AF44D190](v10, 0x1010C40113C0ABBLL);
  }
  v11 = v1[10];
  if (v11)
  {
    v12 = *(void **)v11;
    if (*(_QWORD *)v11)
    {
      *(_QWORD *)(v11 + 8) = v12;
      operator delete(v12);
    }
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

uint64_t fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;

  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0))
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
  v6 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v4);
  v3 = 0;
  while (1)
  {
    while (!v4)
    {
      if (v6 >= v5)
        return v3;
      v3 = (v3 + 1);
LABEL_10:
      ++v6;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4))
      break;
    v3 = (v3 + 1);
    if (!v4)
      goto LABEL_10;
    (*(void (**)(void))(*(_QWORD *)v4 + 32))();
  }
  if (v4)
    (*(void (**)(void))(*(_QWORD *)v4 + 8))();
  return v3;
}

void sub_1AD772804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(uint64_t *a1, int a2, int a3)
{
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  unint64_t v37;
  _DWORD *v38;
  _DWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  int v46;
  uint64_t v47;
  _DWORD *v48;
  unint64_t v49;
  _DWORD *v50;
  _DWORD *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  int v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  char v65;
  char v66;
  char v67;

  v6 = a1[10];
  v7 = *(_DWORD **)(v6 + 8);
  v8 = *(_QWORD *)(v6 + 16);
  if ((unint64_t)v7 >= v8)
  {
    v10 = *(_DWORD **)v6;
    v11 = ((uint64_t)v7 - *(_QWORD *)v6) >> 2;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v13 = v8 - (_QWORD)v10;
    if (v13 >> 1 > v12)
      v12 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v6 + 16, v14);
      v10 = *(_DWORD **)v6;
      v7 = *(_DWORD **)(v6 + 8);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[4 * v11];
    v17 = &v15[4 * v14];
    *(_DWORD *)v16 = a2;
    v9 = v16 + 4;
    while (v7 != v10)
    {
      v18 = *--v7;
      *((_DWORD *)v16 - 1) = v18;
      v16 -= 4;
    }
    *(_QWORD *)v6 = v16;
    *(_QWORD *)(v6 + 8) = v9;
    *(_QWORD *)(v6 + 16) = v17;
    if (v10)
      operator delete(v10);
  }
  else
  {
    *v7 = a2;
    v9 = v7 + 1;
  }
  *(_QWORD *)(v6 + 8) = v9;
  v19 = a2;
  v20 = *(_QWORD *)a1[7];
  if (a2 >= (unint64_t)((*(_QWORD *)(a1[7] + 8) - v20) >> 2))
  {
    do
    {
      v21 = *a1;
      if (*a1)
      {
        v22 = *(_QWORD *)(v21 + 16);
        v23 = *(_DWORD **)(v21 + 8);
        if ((unint64_t)v23 >= v22)
        {
          v25 = *(_DWORD **)v21;
          v26 = ((uint64_t)v23 - *(_QWORD *)v21) >> 2;
          v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 62)
            goto LABEL_78;
          v28 = v22 - (_QWORD)v25;
          if (v28 >> 1 > v27)
            v27 = v28 >> 1;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
            v29 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v29 = v27;
          if (v29)
          {
            v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v21 + 16, v29);
            v25 = *(_DWORD **)v21;
            v23 = *(_DWORD **)(v21 + 8);
          }
          else
          {
            v30 = 0;
          }
          v31 = &v30[4 * v26];
          *(_DWORD *)v31 = -1;
          v24 = v31 + 4;
          while (v23 != v25)
          {
            v32 = *--v23;
            *((_DWORD *)v31 - 1) = v32;
            v31 -= 4;
          }
          *(_QWORD *)v21 = v31;
          *(_QWORD *)(v21 + 8) = v24;
          *(_QWORD *)(v21 + 16) = &v30[4 * v29];
          if (v25)
            operator delete(v25);
        }
        else
        {
          *v23 = -1;
          v24 = v23 + 1;
        }
        *(_QWORD *)(v21 + 8) = v24;
      }
      v33 = a1[1];
      if (v33)
      {
        v67 = 0;
        std::vector<BOOL>::push_back(v33, &v67);
      }
      v34 = a1[2];
      v66 = 0;
      std::vector<BOOL>::push_back(v34, &v66);
      v35 = a1[7];
      v36 = *(_DWORD **)(v35 + 8);
      v37 = *(_QWORD *)(v35 + 16);
      if ((unint64_t)v36 >= v37)
      {
        v39 = *(_DWORD **)v35;
        v40 = ((uint64_t)v36 - *(_QWORD *)v35) >> 2;
        v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 62)
          goto LABEL_78;
        v42 = v37 - (_QWORD)v39;
        if (v42 >> 1 > v41)
          v41 = v42 >> 1;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
          v43 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v43 = v41;
        if (v43)
        {
          v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v35 + 16, v43);
          v39 = *(_DWORD **)v35;
          v36 = *(_DWORD **)(v35 + 8);
        }
        else
        {
          v44 = 0;
        }
        v45 = &v44[4 * v40];
        *(_DWORD *)v45 = -1;
        v38 = v45 + 4;
        while (v36 != v39)
        {
          v46 = *--v36;
          *((_DWORD *)v45 - 1) = v46;
          v45 -= 4;
        }
        *(_QWORD *)v35 = v45;
        *(_QWORD *)(v35 + 8) = v38;
        *(_QWORD *)(v35 + 16) = &v44[4 * v43];
        if (v39)
          operator delete(v39);
      }
      else
      {
        *v36 = -1;
        v38 = v36 + 1;
      }
      *(_QWORD *)(v35 + 8) = v38;
      v47 = a1[8];
      v48 = *(_DWORD **)(v47 + 8);
      v49 = *(_QWORD *)(v47 + 16);
      if ((unint64_t)v48 >= v49)
      {
        v51 = *(_DWORD **)v47;
        v52 = ((uint64_t)v48 - *(_QWORD *)v47) >> 2;
        v53 = v52 + 1;
        if ((unint64_t)(v52 + 1) >> 62)
LABEL_78:
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v54 = v49 - (_QWORD)v51;
        if (v54 >> 1 > v53)
          v53 = v54 >> 1;
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL)
          v55 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v55 = v53;
        if (v55)
        {
          v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v47 + 16, v55);
          v51 = *(_DWORD **)v47;
          v48 = *(_DWORD **)(v47 + 8);
        }
        else
        {
          v56 = 0;
        }
        v57 = &v56[4 * v52];
        *(_DWORD *)v57 = -1;
        v50 = v57 + 4;
        while (v48 != v51)
        {
          v58 = *--v48;
          *((_DWORD *)v57 - 1) = v58;
          v57 -= 4;
        }
        *(_QWORD *)v47 = v57;
        *(_QWORD *)(v47 + 8) = v50;
        *(_QWORD *)(v47 + 16) = &v56[4 * v55];
        if (v51)
          operator delete(v51);
      }
      else
      {
        *v48 = -1;
        v50 = v48 + 1;
      }
      *(_QWORD *)(v47 + 8) = v50;
      v59 = a1[9];
      v65 = 0;
      std::vector<BOOL>::push_back(v59, &v65);
      v20 = *(_QWORD *)a1[7];
    }
    while (v19 >= (*(_QWORD *)(a1[7] + 8) - v20) >> 2);
  }
  *(_DWORD *)(v20 + 4 * v19) = *((_DWORD *)a1 + 11);
  v60 = (_QWORD *)a1[9];
  *(_DWORD *)(*(_QWORD *)a1[8] + 4 * v19) = *((_DWORD *)a1 + 11);
  v61 = v19 >> 6;
  v62 = 1 << v19;
  *(_QWORD *)(*v60 + 8 * (v19 >> 6)) |= 1 << v19;
  v63 = (_QWORD *)a1[1];
  if (*((_DWORD *)a1 + 10) == a3)
  {
    if (v63)
      *(_QWORD *)(*v63 + 8 * v61) |= v62;
  }
  else
  {
    if (v63)
      *(_QWORD *)(*v63 + 8 * v61) &= ~v62;
    *(_QWORD *)a1[3] = *(_QWORD *)a1[3] & 0xFFFFFCFFFFFFFFFFLL | 0x20000000000;
  }
  ++*((_DWORD *)a1 + 11);
  return 1;
}

unint64_t fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishState(uint64_t a1, int a2, int a3)
{
  unint64_t result;
  unint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int *i;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  float v23;
  int v24;
  float v25;
  int v26;

  result = (unint64_t)(*(_QWORD *(**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 32) + 32))(&v22);
  v25 = *((float *)&v22 + 1);
  v26 = v22;
  v24 = 2139095040;
  v23 = INFINITY;
  if (*(float *)&v22 == INFINITY && v25 == v23)
  {
    v7 = a2;
  }
  else
  {
    v7 = a2;
    *(_QWORD *)(**(_QWORD **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  }
  v8 = **(_QWORD **)(a1 + 64);
  if (*(_DWORD *)(**(_QWORD **)(a1 + 56) + 4 * v7) != *(_DWORD *)(v8 + 4 * v7))
    goto LABEL_17;
  v9 = 0;
  v10 = *(_QWORD **)(a1 + 80);
  v11 = v10[1];
  v12 = **(_QWORD **)(a1 + 16);
  v13 = (int *)(((v11 - *v10) & 0xFFFFFFFFFFFFFFFCLL) + *v10 - 4);
  do
  {
    v14 = *v13--;
    v9 |= *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14;
  }
  while ((_DWORD)v14 != a2);
  v15 = *(_QWORD **)a1;
  v16 = **(_QWORD **)(a1 + 72);
  for (i = (int *)(v11 - 4); ; --i)
  {
    v18 = *i;
    if (v15)
      *(_DWORD *)(*v15 + 4 * v18) = *(_DWORD *)(a1 + 48);
    result = v18 >> 6;
    v19 = 1 << v18;
    if ((v9 & 1) == 0)
      break;
    *(_QWORD *)(v12 + 8 * result) |= v19;
    *(_QWORD *)(v16 + 8 * result) &= ~v19;
    if ((_DWORD)v18 == a2)
    {
      v10[1] = i;
      goto LABEL_16;
    }
LABEL_14:
    ;
  }
  *(_QWORD *)(v16 + 8 * result) &= ~v19;
  if ((_DWORD)v18 != a2)
    goto LABEL_14;
  v10[1] = i;
  **(_QWORD **)(a1 + 24) = **(_QWORD **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
LABEL_16:
  ++*(_DWORD *)(a1 + 48);
LABEL_17:
  if (a3 != -1)
  {
    v20 = **(_QWORD **)(a1 + 16);
    if (((*(_QWORD *)(v20 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
      *(_QWORD *)(v20 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    v21 = *(_DWORD *)(v8 + 4 * v7);
    if (v21 < *(_DWORD *)(v8 + 4 * a3))
      *(_DWORD *)(v8 + 4 * a3) = v21;
  }
  return result;
}

uint64_t fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::BackArc(uint64_t a1, int a2, uint64_t a3)
{
  unint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(int *)(a3 + 16);
  v4 = *(_DWORD *)(**(_QWORD **)(a1 + 56) + 4 * v3);
  v5 = **(_QWORD **)(a1 + 64);
  if (v4 < *(_DWORD *)(v5 + 4 * a2))
    *(_DWORD *)(v5 + 4 * a2) = v4;
  v6 = **(_QWORD **)(a1 + 16);
  if (((*(_QWORD *)(v6 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    *(_QWORD *)(v6 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  v7 = *(unint64_t **)(a1 + 24);
  v8 = *v7 & 0xFFFFFFF3FFFFFFFFLL | 0x400000000;
  *v7 = v8;
  if (*(_DWORD *)(a3 + 16) == *(_DWORD *)(a1 + 40))
    *v7 = v8 & 0xFFFFFFC7FFFFFFFFLL | 0x1000000000;
  return 1;
}

uint64_t fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::ForwardOrCrossArc(_QWORD **a1, int a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(int *)(a3 + 16);
  v4 = *a1[7];
  v5 = *(_DWORD *)(v4 + 4 * v3);
  if (v5 >= *(_DWORD *)(v4 + 4 * a2))
  {
    v6 = v3 >> 6;
    v7 = 1 << v3;
  }
  else
  {
    v6 = v3 >> 6;
    v7 = 1 << v3;
    if ((*(_QWORD *)(*a1[9] + 8 * v6) & v7) != 0)
    {
      v8 = *a1[8];
      if (v5 < *(_DWORD *)(v8 + 4 * a2))
        *(_DWORD *)(v8 + 4 * a2) = v5;
    }
  }
  v9 = *a1[2];
  if ((*(_QWORD *)(v9 + 8 * v6) & v7) != 0)
    *(_QWORD *)(v9 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  return 1;
}

void fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(_QWORD *)a1 = &unk_1E5D198A0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  *(_QWORD *)a1 = &unk_1E5D198A0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MemoryPool(_QWORD *a1, uint64_t a2)
{
  *a1 = &unk_1E5D198A0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::MemoryArena(a1 + 1, a2);
  a1[7] = 0;
  return a1;
}

void sub_1AD772FE8(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Size()
{
  return 48;
}

_QWORD *fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::MemoryArena(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &unk_1E5D1A858;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_1AD7730D0(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1AF44D190);
}

{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;

  *a1 = &unk_1E5D1A858;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1AF44D160](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Size()
{
  return 56;
}

_QWORD *std::__list_imp<char *>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void std::vector<char>::__append(std::vector<char> *this, std::vector<char>::size_type __n, std::vector<char>::const_reference __x)
{
  std::vector<char>::size_type v4;
  char *value;
  char *end;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  std::vector<char>::value_type *v16;
  std::vector<char>::pointer begin;
  char v18;

  v4 = __n;
  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (value - end >= __n)
  {
    if (__n)
    {
      v13 = &end[__n];
      do
      {
        *end++ = *__x;
        --v4;
      }
      while (v4);
      end = v13;
    }
    this->__end_ = end;
  }
  else
  {
    v8 = end - this->__begin_;
    v9 = v8 + __n;
    if ((uint64_t)(v8 + __n) < 0)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = value - this->__begin_;
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)operator new(v11);
    else
      v12 = 0;
    v14 = &v12[v8];
    v15 = &v12[v8 + v4];
    v16 = &v12[v8];
    do
    {
      *v16++ = *__x;
      --v4;
    }
    while (v4);
    begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        v18 = *--end;
        *--v14 = v18;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v14;
    this->__end_ = v15;
    this->__end_cap_.__value_ = &v12[v11];
    if (end)
      operator delete(end);
  }
}

void std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1AD773654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v2 = a1;
  v3 = 56 * a2;
  v4 = a1[1];
  if (224 * a2 <= v4)
  {
    v9 = v2[2];
    if (v9 + v3 <= v4)
    {
      v10 = *(_QWORD *)(v2[4] + 16);
    }
    else
    {
      v10 = operator new[]();
      v2[2] = 0;
      v11 = operator new(0x18uLL);
      v9 = 0;
      v12 = (_QWORD *)v2[4];
      v13 = v2[5];
      *v11 = v2 + 3;
      v11[1] = v12;
      v11[2] = v10;
      *v12 = v11;
      v2[4] = v11;
      v2[5] = v13 + 1;
    }
    v5 = v10 + v9;
    v8 = v9 + v3;
  }
  else
  {
    v5 = operator new[]();
    v6 = operator new(0x18uLL);
    v7 = v2[3];
    v2 += 3;
    v6[1] = v2;
    v6[2] = v5;
    *v6 = v7;
    *(_QWORD *)(v7 + 8) = v6;
    *v2 = v6;
    v8 = v2[2] + 1;
  }
  v2[2] = v8;
  return v5;
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;

  v4 = a1[1];
  v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41)
      v6 = (v5 - 1) >> 6;
    else
      v6 = 0;
    *(_QWORD *)(*a1 + 8 * v6) = 0;
  }
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)a3;
  v9 = *(_DWORD *)(a3 + 8);
  v10 = *a1 + 8 * (v4 >> 6);
  v16 = *(_QWORD *)a2;
  v17 = v7;
  v14 = v8;
  v15 = v9;
  v12 = v10;
  v13 = v4 & 0x3F;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(&v16, &v14, &v12, (uint64_t)&v11);
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  v5 = *((_DWORD *)a1 + 2);
  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v16 = *a1;
  v17 = v5;
  v14 = v6;
  v15 = v7;
  v8 = *((_DWORD *)a3 + 2);
  v12 = *a3;
  v13 = v8;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  v9 = v19;
  v10 = v20;
  v11 = v21;
  *(_QWORD *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(_QWORD *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  int v5;
  int i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  v4 = *(_QWORD **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(_QWORD *)a1 != *(_QWORD *)a2 || v5 != *(_DWORD *)(a2 + 8); v5 = *(_DWORD *)(a1 + 8))
  {
    v8 = *(uint64_t **)a3;
    v9 = 1 << i;
    if (((*v4 >> v5) & 1) != 0)
      v10 = *v8 | v9;
    else
      v10 = *v8 & ~v9;
    *v8 = v10;
    if (v5 == 63)
    {
      v11 = 0;
      *(_QWORD *)a1 = v4 + 1;
    }
    else
    {
      v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      i = 0;
      *(_QWORD *)a3 += 8;
    }
    else
    {
      i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    v4 = *(_QWORD **)a1;
  }
  *(_QWORD *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

uint64_t std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = ((v2 - v3) << 6) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200)
    a2 = 1;
  if (v5 < 0x400)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

fst *fst::LogMessage::LogMessage(fst *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  BOOL v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(char *)(a2 + 23);
  if (v4 < 0)
  {
    if (*(_QWORD *)(a2 + 8) != 5)
    {
LABEL_12:
      v9 = 0;
      goto LABEL_13;
    }
    v5 = *(_QWORD *)a2;
  }
  else
  {
    v5 = a2;
    if (v4 != 5)
      goto LABEL_12;
  }
  v6 = *(_DWORD *)v5;
  v7 = *(unsigned __int8 *)(v5 + 4);
  v9 = v6 == 1096040774 && v7 == 76;
LABEL_13:
  *(_BYTE *)a1 = v9;
  v10 = (_QWORD *)fst::cerr(a1);
  v11 = *(char *)(a2 + 23);
  if (v11 >= 0)
    v12 = a2;
  else
    v12 = *(_QWORD *)a2;
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(a2 + 23);
  else
    v13 = *(_QWORD *)(a2 + 8);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)": ", 2);
  return a1;
}

void fst::LogMessage::~LogMessage(fst::LogMessage *this)
{
  _QWORD *v2;
  const std::locale::facet *v3;
  std::locale v4;

  v2 = (_QWORD *)fst::cerr(this);
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)));
  v3 = std::locale::use_facet(&v4, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  if (*(_BYTE *)this)
    exit(1);
}

void sub_1AD7740C4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  __clang_call_terminate(a1);
}

void fst::ArcBuffer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::SetFromFst<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  _DWORD *v28;

  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(_QWORD *)a2 + 136))(a2, a3, &v25);
  if (!v25 && (a4 & 1) == 0)
  {
    v10 = v26 + 20 * v27;
    *(_QWORD *)(a1 + 16) = v26;
    *(_QWORD *)(a1 + 24) = v10;
    if (*(_QWORD *)a1)
    {
      free(*(void **)a1);
      *(_QWORD *)a1 = 0;
    }
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a3);
  v12 = a5;
  if (!a4)
    v12 = 0;
  v13 = v11 + v12;
  if (*(_QWORD *)(a1 + 8) < (unint64_t)(v11 + v12))
  {
    if (*(_QWORD *)a1)
      free(*(void **)a1);
    v24 = 0x4000;
    if (v13 > 0x4000)
      v24 = v13;
    *(_QWORD *)(a1 + 8) = v24;
    v15 = malloc_type_malloc(20 * v24, 0x1000040A86A77D5uLL);
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 16) = v15;
    v14 = v15;
  }
  else
  {
    v14 = *(_DWORD **)(a1 + 16);
    v15 = *(_DWORD **)a1;
  }
  *(_QWORD *)(a1 + 24) = &v14[5 * v13];
  v16 = v25;
  v17 = v26;
  v19 = v27;
  v18 = v28;
  if (v28)
    ++*v28;
  v20 = 0;
LABEL_13:
  v15 += 5;
  while (v16)
  {
    v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
    v22 = *v16;
    if (v21)
    {
      (*(void (**)(uint64_t *))(v22 + 8))(v16);
      return;
    }
    v23 = (*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
LABEL_18:
    *(_QWORD *)(v15 - 5) = *(_QWORD *)v23;
    *(_QWORD *)(v15 - 3) = *(_QWORD *)(v23 + 8);
    *(v15 - 1) = *(_DWORD *)(v23 + 16);
    if (!v16)
    {
      ++v20;
      goto LABEL_13;
    }
    v15 += 5;
    (*(void (**)(uint64_t *))(*v16 + 40))(v16);
  }
  v23 = v17 + 20 * v20;
  if (v20 < v19)
    goto LABEL_18;
  if (v18)
    --*v18;
}

void sub_1AD7742C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 88);
}

_QWORD *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2);
  *a3 = *(_QWORD *)v3;
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a3 + 1, *(const void **)(v3 + 8), *(_QWORD *)(v3 + 16), (uint64_t)(*(_QWORD *)(v3 + 16) - *(_QWORD *)(v3 + 8)) >> 2);
}

unint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return 0xAAAAAAAAAAAAAAABLL
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 56)
                  - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 48)) >> 4);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 32);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

void fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  fst::ArcBuffer<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::SetFromFst<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(a3, a1, a2, a4, 2);
}

uint64_t fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::Write(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1AD7744DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1AD7745BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::IsMemoryMapped()
{
  return 0;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::operator=(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  void *__p[2];
  char v6;
  char v7;

  if (FLAGS_fst_error_fatal)
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  else
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ImplToFst: Assignment operator disallowed", 41);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) |= 4uLL;
  return a1;
}

void sub_1AD7746BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1AD774758(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

unint64_t fst::TestProperties<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *__p[2];
  char v13;
  char v14;

  if (!FLAGS_fst_verify_properties)
    return fst::ComputeProperties<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(a1, a2, a3, 1);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v7 = fst::ComputeProperties<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(a1, a2, a3, 0);
  if (!fst::CompatProperties(v6, v7))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
    v9 = (_QWORD *)fst::cerr(v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  return v7;
}

void sub_1AD7748C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::vector<unsigned int>::size_type v18;
  char v19;
  char *v20;
  int v21;
  int v22;
  unint64_t v23;
  float v24;
  float v25;
  int v26;
  std::vector<unsigned int>::pointer end;
  unsigned int *v28;
  std::vector<unsigned int>::pointer begin;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  unint64_t v33;
  char *v34;
  unsigned int *v35;
  unsigned int v36;
  std::vector<unsigned int>::pointer v37;
  unsigned int *v38;
  std::vector<unsigned int>::pointer v39;
  int64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  unsigned int *v45;
  unsigned int v46;
  unint64_t v47;
  std::vector<unsigned int>::pointer v48;
  unsigned int v49;
  unint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unint64_t v53;
  std::vector<unsigned int>::pointer v54;
  unsigned int v55;
  unint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v60;
  uint64_t v61;
  void *__p;
  void *v63;
  _DWORD *v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  unsigned int v68;
  std::vector<unsigned int> v69;
  std::vector<unsigned int> v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  unint64_t *v74;
  uint64_t v75;
  int v76;
  unint64_t v77;
  float v78;
  int v79;
  float v80;
  float v81;

  v7 = a1;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v9 = v8;
  if (!a4
    || (v10 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7, (a2 & ~v10) != 0))
  {
    v9 = v8 & 7;
    v77 = v9;
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    if ((a2 & 0xF3C00000000) != 0 && v11)
    {
      v71 = 0;
      v72 = 0;
      v73 = 0;
      v74 = &v77;
      fst::DfsVisit<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(v7, &v71, 0);
      v9 = v77;
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) != 0)
    {
      v12 = a2 & 0xC0000;
      v13 = 0x10425A810000;
      if ((a2 & 0xC0000) != 0)
        v13 = 0x10425A850000;
      v14 = v9 | v13;
      v15 = a2 & 0x300000;
      if ((a2 & 0x300000) != 0)
        v14 |= 0x100000uLL;
      v77 = v14;
      memset(&v70, 0, sizeof(v70));
      memset(&v69, 0, sizeof(v69));
      v68 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 128))(v7, &v66);
      v16 = 0;
      v60 = v7;
LABEL_12:
      if (v66)
      {
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v66 + 16))(v66))
        {
          if (v66)
          {
            v17 = (*(uint64_t (**)(void))(*(_QWORD *)v66 + 24))();
LABEL_18:
            v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 40))(v7, v17);
            v73 = 0;
            v74 = 0;
            v75 = 0;
            v70.__end_ = v70.__begin_;
            v69.__end_ = v69.__begin_;
            if (v12)
              std::vector<int>::reserve(&v70, v18);
            if (v15)
              std::vector<int>::reserve(&v69, v18);
            v65 = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v7 + 136))(v7, v17, &v61);
            v19 = 1;
            while (1)
            {
              if (v61)
              {
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v61 + 24))(v61))
                {
                  if (v61)
                  {
                    (*(void (**)(void))(*(_QWORD *)v61 + 8))();
                  }
                  else
                  {
LABEL_96:
                    if (v64)
                      --*v64;
                  }
                  v7 = v60;
                  if (v12
                    && (std::__sort<std::__less<int,int> &,int *>(),
                        (std::vector<unsigned int>::pointer)((char *)v70.__end_ - (char *)v70.__begin_) >= (std::vector<unsigned int>::pointer)5))
                  {
                    v47 = v70.__end_ - v70.__begin_;
                    if (v47 <= 2)
                      v47 = 2;
                    v48 = v70.__begin_ + 1;
                    v49 = *v70.__begin_;
                    v50 = v47 - 1;
                    while (1)
                    {
                      v52 = *v48++;
                      v51 = v52;
                      if (v52 == v49)
                        break;
                      v49 = v51;
                      if (!--v50)
                        goto LABEL_105;
                    }
                    v77 = v77 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
                    if (!v15)
                    {
LABEL_116:
                      if (v16 >= 1)
                        v77 = v77 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v60 + 32))(&v61, v60, v17);
                      v80 = *((float *)&v61 + 1);
                      v81 = *(float *)&v61;
                      v79 = 2139095040;
                      v78 = INFINITY;
                      if (*(float *)&v61 == INFINITY && v80 == v78 && v63 == __p)
                      {
                        if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v60 + 40))(v60, v17) != 1)
                          v77 = v77 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                      }
                      else
                      {
                        v80 = *((float *)&v61 + 1);
                        v81 = *(float *)&v61;
                        v79 = 0;
                        v78 = 0.0;
                        if (*(float *)&v61 != 0.0 || v80 != v78 || v63 != __p)
                          v77 = v77 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                        ++v16;
                      }
                      if (__p)
                      {
                        v63 = __p;
                        operator delete(__p);
                      }
                      if (v73)
                      {
                        v74 = (unint64_t *)v73;
                        operator delete(v73);
                      }
                      if (v66)
                        (*(void (**)(uint64_t))(*(_QWORD *)v66 + 32))(v66);
                      else
                        ++v68;
                      goto LABEL_12;
                    }
                  }
                  else
                  {
LABEL_105:
                    if (!v15)
                      goto LABEL_116;
                  }
                  std::__sort<std::__less<int,int> &,int *>();
                  if ((std::vector<unsigned int>::pointer)((char *)v69.__end_ - (char *)v69.__begin_) >= (std::vector<unsigned int>::pointer)5)
                  {
                    v53 = v69.__end_ - v69.__begin_;
                    if (v53 <= 2)
                      v53 = 2;
                    v54 = v69.__begin_ + 1;
                    v55 = *v69.__begin_;
                    v56 = v53 - 1;
                    while (1)
                    {
                      v58 = *v54++;
                      v57 = v58;
                      if (v58 == v55)
                        break;
                      v55 = v57;
                      if (!--v56)
                        goto LABEL_116;
                    }
                    v77 = v77 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                  }
                  goto LABEL_116;
                }
                if (v61)
                {
                  v20 = (char *)(*(uint64_t (**)(void))(*(_QWORD *)v61 + 32))();
                  goto LABEL_29;
                }
              }
              else if (v65 >= (unint64_t)v63)
              {
                goto LABEL_96;
              }
              v20 = (char *)__p + 48 * v65;
LABEL_29:
              v21 = *(_DWORD *)v20;
              v22 = *(_DWORD *)v20;
              if (*(_DWORD *)v20 != *((_DWORD *)v20 + 1))
              {
                v77 = v77 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
                v22 = *((_DWORD *)v20 + 1);
              }
              if (v21 | v22)
              {
                if (v21)
                {
                  if (v22)
                    goto LABEL_35;
                  goto LABEL_39;
                }
                v23 = v77;
              }
              else
              {
                v23 = v77 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
              }
              v77 = v23 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
              if (v22)
              {
LABEL_35:
                if ((v19 & 1) != 0)
                  goto LABEL_44;
                goto LABEL_40;
              }
LABEL_39:
              v77 = v77 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
              if ((v19 & 1) != 0)
                goto LABEL_44;
LABEL_40:
              if (v21 < (int)v71)
                v77 = v77 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
              if (v22 < SHIDWORD(v71))
                v77 = v77 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
LABEL_44:
              v24 = *((float *)v20 + 2);
              v25 = *((float *)v20 + 3);
              v81 = v24;
              v80 = v25;
              v79 = 0;
              v78 = 0.0;
              if (v24 != 0.0 || v80 != v78 || *((_QWORD *)v20 + 3) != *((_QWORD *)v20 + 2))
              {
                v81 = v24;
                v80 = v25;
                v79 = 2139095040;
                v78 = INFINITY;
                if (v24 != INFINITY || v80 != v78 || *((_QWORD *)v20 + 3) != *((_QWORD *)v20 + 2))
                  v77 = v77 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
              }
              v26 = *((_DWORD *)v20 + 10);
              if (v26 <= (int)v17)
                v77 = v77 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
              if (v26 != (_DWORD)v17 + 1)
                v77 = v77 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              v71 = *(_QWORD *)v20;
              fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)&v72, (uint64_t)(v20 + 8));
              v76 = *((_DWORD *)v20 + 10);
              if (v12)
              {
                end = v70.__end_;
                if (v70.__end_ >= v70.__end_cap_.__value_)
                {
                  begin = v70.__begin_;
                  v30 = v70.__end_ - v70.__begin_;
                  v31 = v30 + 1;
                  if ((unint64_t)(v30 + 1) >> 62)
                    goto LABEL_147;
                  v32 = (char *)v70.__end_cap_.__value_ - (char *)v70.__begin_;
                  if (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 1 > v31)
                    v31 = v32 >> 1;
                  if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
                    v33 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v33 = v31;
                  if (v33)
                  {
                    v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v70.__end_cap_, v33);
                    begin = v70.__begin_;
                    end = v70.__end_;
                  }
                  else
                  {
                    v34 = 0;
                  }
                  v35 = (unsigned int *)&v34[4 * v30];
                  *v35 = *(_DWORD *)v20;
                  v28 = v35 + 1;
                  while (end != begin)
                  {
                    v36 = *--end;
                    *--v35 = v36;
                  }
                  v70.__begin_ = v35;
                  v70.__end_ = v28;
                  v70.__end_cap_.__value_ = (unsigned int *)&v34[4 * v33];
                  if (begin)
                    operator delete(begin);
                }
                else
                {
                  *v70.__end_ = *(_DWORD *)v20;
                  v28 = end + 1;
                }
                v70.__end_ = v28;
              }
              if (v15)
              {
                v37 = v69.__end_;
                if (v69.__end_ >= v69.__end_cap_.__value_)
                {
                  v39 = v69.__begin_;
                  v40 = v69.__end_ - v69.__begin_;
                  v41 = v40 + 1;
                  if ((unint64_t)(v40 + 1) >> 62)
LABEL_147:
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v42 = (char *)v69.__end_cap_.__value_ - (char *)v69.__begin_;
                  if (((char *)v69.__end_cap_.__value_ - (char *)v69.__begin_) >> 1 > v41)
                    v41 = v42 >> 1;
                  if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
                    v43 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v43 = v41;
                  if (v43)
                  {
                    v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v69.__end_cap_, v43);
                    v39 = v69.__begin_;
                    v37 = v69.__end_;
                  }
                  else
                  {
                    v44 = 0;
                  }
                  v45 = (unsigned int *)&v44[4 * v40];
                  *v45 = *((_DWORD *)v20 + 1);
                  v38 = v45 + 1;
                  while (v37 != v39)
                  {
                    v46 = *--v37;
                    *--v45 = v46;
                  }
                  v69.__begin_ = v45;
                  v69.__end_ = v38;
                  v69.__end_cap_.__value_ = (unsigned int *)&v44[4 * v43];
                  if (v39)
                    operator delete(v39);
                }
                else
                {
                  *v69.__end_ = *((_DWORD *)v20 + 1);
                  v38 = v37 + 1;
                }
                v69.__end_ = v38;
              }
              if (v61)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
                v19 = 0;
              }
              else
              {
                v19 = 0;
                ++v65;
              }
            }
          }
LABEL_17:
          v17 = v68;
          goto LABEL_18;
        }
        if (v66)
          (*(void (**)(void))(*(_QWORD *)v66 + 8))();
      }
      else if ((int)v68 < v67)
      {
        goto LABEL_17;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7) != -1
        && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7))
      {
        v77 = v77 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
      }
      if (v69.__begin_)
      {
        v69.__end_ = v69.__begin_;
        operator delete(v69.__begin_);
      }
      if (v70.__begin_)
      {
        v70.__end_ = v70.__begin_;
        operator delete(v70.__begin_);
      }
      v9 = v77;
    }
    v10 = v9 & 0x3FFFFFFF0000 | (2 * v9) & 0x2AAAAAAA0000 | (v9 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v10;
  return v9;
}

void sub_1AD7751C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p)
    operator delete(__p);
  if (a27)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char inited;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::vector<char>::pointer begin;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int v31;
  std::vector<char>::pointer end;
  char *v33;
  std::vector<char>::pointer v34;
  int64_t v35;
  int64_t v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char v43;
  char v44;
  uint64_t v45;
  int v46;
  std::vector<char>::value_type v47[8];
  std::vector<char>::value_type __x[8];
  int v49;
  int v50;
  void *v51;
  _QWORD v52[6];
  _QWORD *v53;
  _OWORD v54[2];
  __int128 v55;
  std::vector<char> v56;

  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitVisit((uint64_t)a2, a1);
  v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v46 == -1)
  {
    fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
    return;
  }
  memset(&v56, 0, sizeof(v56));
  v55 = 0u;
  memset(v54, 0, sizeof(v54));
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MemoryPool(&v51, 64);
  v45 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v45)
    v6 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v6 = (v46 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v6 <= (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v6 < (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
      v56.__end_ = &v56.__begin_[(int)v6];
  }
  else
  {
    std::vector<char>::__append(&v56, (int)v6 - (unint64_t)(v56.__end_ - v56.__begin_), __x);
  }
  v50 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v46 >= (int)v6)
    goto LABEL_97;
  v7 = v46;
  v44 = a3;
  do
  {
    v56.__begin_[(int)v7] = 1;
    v8 = (uint64_t)v53;
    if (v53)
    {
      v53 = (_QWORD *)v53[6];
    }
    else
    {
      v8 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v52, 1);
      *(_QWORD *)(v8 + 48) = 0;
    }
    *(_DWORD *)v8 = v7;
    *(_QWORD *)(v8 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v7, v8 + 8);
    *(_QWORD *)v47 = v8;
    std::deque<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> *>>::push_back(v54, v47);
    inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, v7, v7);
LABEL_16:
    v10 = inited;
    while (*((_QWORD *)&v55 + 1))
    {
      v11 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                   + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
      v12 = *(int *)v11;
      v13 = v56.__end_ - v56.__begin_;
      if (v56.__end_ - v56.__begin_ <= v12)
      {
        v6 = v12 + 1;
        v47[0] = 0;
        if (v12 + 1 <= v13)
        {
          if (v12 + 1 < v13)
            v56.__end_ = &v56.__begin_[v6];
        }
        else
        {
          std::vector<char>::__append(&v56, v12 + 1 - v13, v47);
        }
      }
      if ((v10 & 1) == 0)
        goto LABEL_33;
      v14 = v11[1];
      if (v14)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
          goto LABEL_33;
        v15 = v11[1];
        if (!v15)
          goto LABEL_29;
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
LABEL_30:
        v17 = *(int *)(v16 + 40);
        begin = v56.__begin_;
        v19 = v56.__end_ - v56.__begin_;
        if (v56.__end_ - v56.__begin_ <= v17)
        {
          v6 = (v17 + 1);
          v47[0] = 0;
          if ((int)v6 <= v19)
          {
            if ((int)v6 < v19)
              v56.__end_ = &v56.__begin_[(int)v6];
          }
          else
          {
            std::vector<char>::__append(&v56, (int)v6 - v19, v47);
            v17 = *(int *)(v16 + 40);
            begin = v56.__begin_;
          }
        }
        v26 = begin[v17];
        if (v26 == 1)
        {
          v10 = fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::BackArc((uint64_t)a2, v12, v16);
          v25 = v11[1];
          if (v25)
            goto LABEL_50;
LABEL_51:
          ++v11[5];
        }
        else
        {
          if (v26 != 2)
          {
            begin[v17] = 1;
            v27 = (uint64_t)v53;
            if (v53)
            {
              v53 = (_QWORD *)v53[6];
            }
            else
            {
              v27 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v52, 1);
              *(_QWORD *)(v27 + 48) = 0;
            }
            *(_DWORD *)v27 = *(_DWORD *)(v16 + 40);
            *(_QWORD *)(v27 + 40) = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
            *(_QWORD *)v47 = v27;
            std::deque<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> *>>::push_back(v54, v47);
            inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, *(_DWORD *)(v16 + 40), v7);
            goto LABEL_16;
          }
          v10 = fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::ForwardOrCrossArc((_QWORD **)a2, v12, v16);
          v25 = v11[1];
          if (!v25)
            goto LABEL_51;
LABEL_50:
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        }
      }
      else
      {
        if (v11[5] < v11[3])
        {
LABEL_29:
          v16 = v11[2] + 48 * v11[5];
          goto LABEL_30;
        }
LABEL_33:
        v56.__begin_[v12] = 2;
        v20 = v11[1];
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        }
        else
        {
          v21 = (_DWORD *)v11[4];
          if (v21)
            --*v21;
        }
        v11[6] = v53;
        v53 = v11;
        --*((_QWORD *)&v55 + 1);
        std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v54, 1);
        if (*((_QWORD *)&v55 + 1))
        {
          v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                      + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
          v23 = *(_DWORD *)v22;
          v24 = *(_QWORD *)(v22 + 8);
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
          fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState((uint64_t)a2, v12, v23);
          v25 = *(_QWORD *)(v22 + 8);
          if (v25)
            goto LABEL_50;
          ++*(_QWORD *)(v22 + 40);
        }
        else
        {
          fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState((uint64_t)a2, v12, -1);
        }
      }
    }
    if ((a3 & 1) != 0)
      break;
    if ((_DWORD)v7 == v46)
      v7 = 0;
    else
      v7 = (v7 + 1);
    if ((int)v7 < (int)v6)
    {
      v28 = &v56.__begin_[(int)v7];
      v29 = (int)v6 - (uint64_t)(int)v7;
      while (*v28++)
      {
        v7 = (v7 + 1);
        if (!--v29)
        {
          v7 = v6;
          break;
        }
      }
    }
    if (v45 || (_DWORD)v7 != (_DWORD)v6)
      continue;
LABEL_67:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_73;
      }
    }
    else if (v50 >= v49)
    {
      continue;
    }
    v31 = v50;
LABEL_73:
    if (v31 != (_DWORD)v6)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v50;
      goto LABEL_67;
    }
    end = v56.__end_;
    if (v56.__end_ >= v56.__end_cap_.__value_)
    {
      v34 = v56.__begin_;
      v35 = v56.__end_ - v56.__begin_;
      v36 = v56.__end_ - v56.__begin_ + 1;
      if (v36 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v37 = v56.__end_cap_.__value_ - v56.__begin_;
      if (2 * (v56.__end_cap_.__value_ - v56.__begin_) > (unint64_t)v36)
        v36 = 2 * v37;
      if (v37 >= 0x3FFFFFFFFFFFFFFFLL)
        v38 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (v38)
        v39 = (char *)operator new(v38);
      else
        v39 = 0;
      v40 = &v39[v35];
      v41 = &v39[v35];
      *v41 = 0;
      v33 = v41 + 1;
      if (end != v34)
      {
        v42 = &end[~(unint64_t)v34];
        do
        {
          v43 = *--end;
          (v42--)[(_QWORD)v39] = v43;
        }
        while (end != v34);
        end = v56.__begin_;
        v40 = v39;
      }
      v56.__begin_ = v40;
      v56.__end_ = v33;
      v56.__end_cap_.__value_ = &v39[v38];
      if (end)
        operator delete(end);
    }
    else
    {
      *v56.__end_ = 0;
      v33 = end + 1;
    }
    v56.__end_ = v33;
    v6 = (v6 + 1);
    a3 = v44;
  }
  while ((v10 & 1) != 0 && (int)v7 < (int)v6);
LABEL_97:
  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v51 = &unk_1E5D198F0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Link>::~MemoryArena(v52);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v51);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v54);
  if (v56.__begin_)
  {
    v56.__end_ = v56.__begin_;
    operator delete(v56.__begin_);
  }
}

void sub_1AD775960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D198F0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState(uint64_t a1, int a2, int a3)
{
  BOOL v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int *i;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void *__p;
  void *v24;
  float v25;
  int v26;
  float v27;
  int v28;

  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 32) + 32))(&v22);
  v27 = *((float *)&v22 + 1);
  v28 = v22;
  v26 = 2139095040;
  v25 = INFINITY;
  v6 = *(float *)&v22 != INFINITY || v27 != v25 || v24 != __p;
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  if (v6)
    *(_QWORD *)(**(_QWORD **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  v7 = **(_QWORD **)(a1 + 64);
  if (*(_DWORD *)(**(_QWORD **)(a1 + 56) + 4 * a2) != *(_DWORD *)(v7 + 4 * a2))
    goto LABEL_21;
  v8 = 0;
  v9 = *(_QWORD **)(a1 + 80);
  v10 = v9[1];
  v11 = **(_QWORD **)(a1 + 16);
  v12 = (int *)(((v10 - *v9) & 0xFFFFFFFFFFFFFFFCLL) + *v9 - 4);
  do
  {
    v13 = *v12--;
    v8 |= *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13;
  }
  while ((_DWORD)v13 != a2);
  v14 = *(_QWORD **)a1;
  v15 = **(_QWORD **)(a1 + 72);
  for (i = (int *)(v10 - 4); ; --i)
  {
    v17 = *i;
    if (v14)
      *(_DWORD *)(*v14 + 4 * v17) = *(_DWORD *)(a1 + 48);
    v18 = v17 >> 6;
    v19 = 1 << v17;
    if ((v8 & 1) == 0)
      break;
    *(_QWORD *)(v11 + 8 * v18) |= v19;
    *(_QWORD *)(v15 + 8 * v18) &= ~v19;
    if ((_DWORD)v17 == a2)
    {
      v9[1] = i;
      goto LABEL_20;
    }
LABEL_18:
    ;
  }
  *(_QWORD *)(v15 + 8 * v18) &= ~v19;
  if ((_DWORD)v17 != a2)
    goto LABEL_18;
  v9[1] = i;
  **(_QWORD **)(a1 + 24) = **(_QWORD **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
LABEL_20:
  ++*(_DWORD *)(a1 + 48);
LABEL_21:
  if (a3 != -1)
  {
    v20 = **(_QWORD **)(a1 + 16);
    if (((*(_QWORD *)(v20 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
      *(_QWORD *)(v20 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    v21 = *(_DWORD *)(v7 + 4 * a2);
    if (v21 < *(_DWORD *)(v7 + 4 * a3))
      *(_DWORD *)(v7 + 4 * a3) = v21;
  }
}

uint64_t fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::BackArc(uint64_t a1, int a2, uint64_t a3)
{
  unint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(int *)(a3 + 40);
  v4 = *(_DWORD *)(**(_QWORD **)(a1 + 56) + 4 * v3);
  v5 = **(_QWORD **)(a1 + 64);
  if (v4 < *(_DWORD *)(v5 + 4 * a2))
    *(_DWORD *)(v5 + 4 * a2) = v4;
  v6 = **(_QWORD **)(a1 + 16);
  if (((*(_QWORD *)(v6 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    *(_QWORD *)(v6 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  v7 = *(unint64_t **)(a1 + 24);
  v8 = *v7 & 0xFFFFFFF3FFFFFFFFLL | 0x400000000;
  *v7 = v8;
  if (*(_DWORD *)(a3 + 40) == *(_DWORD *)(a1 + 40))
    *v7 = v8 & 0xFFFFFFC7FFFFFFFFLL | 0x1000000000;
  return 1;
}

uint64_t fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::ForwardOrCrossArc(_QWORD **a1, int a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(int *)(a3 + 40);
  v4 = *a1[7];
  v5 = *(_DWORD *)(v4 + 4 * v3);
  if (v5 >= *(_DWORD *)(v4 + 4 * a2))
  {
    v6 = v3 >> 6;
    v7 = 1 << v3;
  }
  else
  {
    v6 = v3 >> 6;
    v7 = 1 << v3;
    if ((*(_QWORD *)(*a1[9] + 8 * v6) & v7) != 0)
    {
      v8 = *a1[8];
      if (v5 < *(_DWORD *)(v8 + 4 * a2))
        *(_DWORD *)(v8 + 4 * a2) = v5;
    }
  }
  v9 = *a1[2];
  if ((*(_QWORD *)(v9 + 8 * v6) & v7) != 0)
    *(_QWORD *)(v9 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  return 1;
}

void fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(_QWORD *)a1 = &unk_1E5D198F0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  *(_QWORD *)a1 = &unk_1E5D198F0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MemoryPool(_QWORD *a1, uint64_t a2)
{
  *a1 = &unk_1E5D198F0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Link>::MemoryArena(a1 + 1, a2);
  a1[7] = 0;
  return a1;
}

void sub_1AD775DEC(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Size()
{
  return 48;
}

_QWORD *fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Link>::MemoryArena(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &unk_1E5D1A8A8;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_1AD775ED4(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1AF44D190);
}

{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;

  *a1 = &unk_1E5D1A8A8;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1AF44D160](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Link>::Size()
{
  return 56;
}

void std::deque<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> *>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> *>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1AD7762E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (a1 != a2)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 8), *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  return a1;
}

void fst::ArcBuffer<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::SetFromFst<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  _DWORD *v28;

  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(_QWORD *)a2 + 136))(a2, a3, &v25);
  if (!v25 && (a4 & 1) == 0)
  {
    v10 = v26 + 48 * v27;
    *(_QWORD *)(a1 + 16) = v26;
    *(_QWORD *)(a1 + 24) = v10;
    if (*(_QWORD *)a1)
    {
      free(*(void **)a1);
      *(_QWORD *)a1 = 0;
    }
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a3);
  v12 = a5;
  if (!a4)
    v12 = 0;
  v13 = v11 + v12;
  if (*(_QWORD *)(a1 + 8) < (unint64_t)(v11 + v12))
  {
    if (*(_QWORD *)a1)
      free(*(void **)a1);
    v24 = 0x4000;
    if (v13 > 0x4000)
      v24 = v13;
    *(_QWORD *)(a1 + 8) = v24;
    v15 = malloc_type_malloc(48 * v24, 0x1010040A52E2B18uLL);
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 16) = v15;
    v14 = v15;
  }
  else
  {
    v14 = *(_QWORD **)(a1 + 16);
    v15 = *(_QWORD **)a1;
  }
  *(_QWORD *)(a1 + 24) = &v14[6 * v13];
  v16 = v25;
  v17 = v26;
  v19 = v27;
  v18 = v28;
  if (v28)
    ++*v28;
  v20 = 0;
LABEL_13:
  v15 += 6;
  while (v16)
  {
    v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
    v22 = *v16;
    if (v21)
    {
      (*(void (**)(uint64_t *))(v22 + 8))(v16);
      return;
    }
    v23 = (*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
LABEL_18:
    *(v15 - 6) = *(_QWORD *)v23;
    fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)(v15 - 5), v23 + 8);
    *((_DWORD *)v15 - 2) = *(_DWORD *)(v23 + 40);
    if (!v16)
    {
      ++v20;
      goto LABEL_13;
    }
    v15 += 6;
    (*(void (**)(uint64_t *))(*v16 + 40))(v16);
  }
  v23 = v17 + 48 * v20;
  if (v20 < v19)
    goto LABEL_18;
  if (v18)
    --*v18;
}

void sub_1AD77656C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _DWORD *v2;

  if (v1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  else if (v2)
  {
    --*v2;
  }
  _Unwind_Resume(exception_object);
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("basic_string");
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E5CFD1B8, MEMORY[0x1E0DE42E0]);
}

void sub_1AD7765F4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

void std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<int>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

char *std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<int>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5;
  size_t v6;
  uint64_t result;
  char *v8;
  const void *v9;
  char *v10;
  const void *v11;

  if (*((char *)a1 + 23) >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  result = std::string::basic_string[abi:ne180100](a3, v6 + v5);
  if (*(char *)(result + 23) >= 0)
    v8 = (char *)result;
  else
    v8 = *(char **)result;
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0)
      v9 = a1;
    else
      v9 = *a1;
    result = (uint64_t)memmove(v8, v9, v5);
  }
  v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *a2;
    result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,quasar::SystemConfig::Version>::pair[abi:ne180100]<std::string&&>((uint64_t)v6 + 32, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1AD776988(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,quasar::SystemConfig::Version>::pair[abi:ne180100]<std::string&&>(uint64_t a1, __int128 *a2)
{
  __int128 v3;

  v3 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  quasar::SystemConfig::Version::Version((quasar::SystemConfig::Version *)(a1 + 24));
  return a1;
}

void sub_1AD7769E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1AD776B20(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::string>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::string>>,0>(uint64_t a1)
{
  std::__tree<std::string>::destroy(a1 + 24, *(char **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_OWORD *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(uint64_t **a1, const void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::quasar::CEAttnEncoderDecoder,std::allocator<kaldi::quasar::CEAttnEncoderDecoder>,std::string &,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0xE8uLL);
  result = std::__shared_ptr_emplace<kaldi::quasar::CEAttnEncoderDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<kaldi::quasar::CEAttnEncoderDecoder>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD776C90(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::quasar::CEAttnEncoderDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<kaldi::quasar::CEAttnEncoderDecoder>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D42058;
  a1[1] = 0;
  kaldi::quasar::CEAttnEncoderDecoder::CEAttnEncoderDecoder(a1 + 3);
  return a1;
}

void sub_1AD776CDC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::CEAttnEncoderDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42058;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::CEAttnEncoderDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42058;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<kaldi::quasar::CEAttnEncoderDecoder>::__on_zero_shared(uint64_t a1)
{
  kaldi::quasar::CEAttnEncoderDecoder::~CEAttnEncoderDecoder((kaldi::quasar::CEAttnEncoderDecoder *)(a1 + 24));
}

void std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0>,int ()(int)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0>,int ()(int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E5CFF6F8;
  return result;
}

void std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0>,int ()(int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E5CFF6F8;
}

uint64_t std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0>,int ()(int)>::operator()(uint64_t a1, _DWORD *a2)
{
  return (*a2 - 1);
}

uint64_t std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0>,int ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0>,int ()(int)>::target_type()
{
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

void std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1>,int ()(int)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1>,int ()(int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E5CFF750;
  return result;
}

void std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1>,int ()(int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E5CFF750;
}

uint64_t std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1>,int ()(int)>::operator()(uint64_t a1, unsigned int *a2)
{
  return *a2;
}

uint64_t std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1>,int ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1>,int ()(int)>::target_type()
{
}

_QWORD *std::__function::__value_func<int ()(int)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1AD777044(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_2,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_2>,int ()(int)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_2,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_2>,int ()(int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E5CFF7A8;
  return result;
}

void std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_2,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_2>,int ()(int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E5CFF7A8;
}

uint64_t std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_2,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_2>,int ()(int)>::operator()(uint64_t a1, _DWORD *a2)
{
  return (*a2 - 1);
}

uint64_t std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_2,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_2>,int ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_2,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_2>,int ()(int)>::target_type()
{
}

void std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3>,int ()(int)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3>,int ()(int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5CFF800;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3>,int ()(int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5CFF800;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3>,int ()(int)>::operator()(uint64_t a1, int *a2)
{
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 96) + 4 * *a2);
}

uint64_t std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3>,int ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3,std::allocator<quasar::OnlineAEDRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3>,int ()(int)>::target_type()
{
}

void std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 16;
      v7 = v4 - 16;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 16;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void fst::ShortestPath<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, uint64_t *a6, int a7, char a8)
{
  uint64_t v16;
  void *__p;
  _BYTE *v18;
  uint64_t v19;
  _DWORD v20[5];
  char v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  int v31;
  _QWORD v32[9];
  uint64_t v33[3];

  memset(v33, 0, sizeof(v33));
  fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>((uint64_t)v32, a1, (uint64_t)v33);
  v16 = *a6;
  v18 = 0;
  v19 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)a6[1], a6[2], (a6[2] - a6[1]) >> 2);
  *(_QWORD *)v20 = v32;
  *(_QWORD *)&v20[3] = 0x3A800000FFFFFFFFLL;
  v21 = 0;
  v22 = a3;
  v23 = a4;
  v24 = 0;
  v25 = a5;
  v26 = a8;
  v27 = v16;
  v29 = 0;
  v30 = 0;
  v28 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v28, __p, (uint64_t)v18, (v18 - (_BYTE *)__p) >> 2);
  v31 = a7;
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  fst::ShortestPath<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(a1, a2, v33, (uint64_t)v20);
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  fst::AutoQueue<int>::~AutoQueue(v32);
  *(_QWORD *)v20 = v33;
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100]((void ***)v20);
}

void sub_1AD77738C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  fst::AutoQueue<int>::~AutoQueue(&a23);
  a13 = v23 - 104;
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

uint64_t fst::ConvertNbestToVector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (***v6)(_QWORD);
  void (***v7)(_QWORD);
  void (**v8)(_QWORD);
  BOOL v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  __n128 v28;
  uint64_t v29;
  void *v30;
  void *v31;
  _QWORD v32[3];
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  void *__p;
  void *v37;
  void *v38;
  uint64_t v39;
  int v40;
  _QWORD v41[3];
  _DWORD *v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  int v47;
  float v48;
  int v49;

  v5 = *a2;
  v4 = a2[1];
  if (v4 != *a2)
  {
    v6 = (void (***)(_QWORD))(v4 - 16);
    v7 = (void (***)(_QWORD))(v4 - 16);
    do
    {
      v8 = *v7;
      v7 -= 2;
      (*v8)(v6);
      v9 = v6 == (void (***)(_QWORD))v5;
      v6 = v7;
    }
    while (!v9);
  }
  a2[1] = v5;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result == -1)
    return result;
  v11 = result;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, result);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v35, a1, v11);
  LODWORD(v32[0]) = HIDWORD(v35);
  LODWORD(v41[0]) = v35;
  v49 = 2139095040;
  v48 = INFINITY;
  v13 = *(float *)&v35 != INFINITY || *(float *)v32 != v48 || v37 != __p;
  if (__p)
  {
    v37 = __p;
    operator delete(__p);
  }
  std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::reserve(a2, v12 + v13);
  if (v13)
  {
    std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::resize(a2, ((a2[1] - *a2) >> 4) + 1);
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a2[1] - 16) + 200))(a2[1] - 16);
    v15 = a2[1];
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v44, a1, v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(v15 - 16) + 184))(v15 - 16, v14, &v44);
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
  }
  v43 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 136))(a1, v11, v41);
  while (1)
  {
    result = v41[0];
    if (v41[0])
      break;
    if (v43 >= v41[2])
      goto LABEL_51;
LABEL_19:
    std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::resize(a2, ((a2[1] - *a2) >> 4) + 1);
    v16 = a2[1];
    if (v41[0])
      v17 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v41[0] + 32))(v41[0]);
    else
      v17 = v41[1] + 48 * v43;
    v19 = *(_QWORD *)(v16 - 16);
    v18 = v16 - 16;
    v20 = (*(uint64_t (**)(uint64_t))(v19 + 200))(v18);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 176))(v18, v20);
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 200))(v18);
    v22 = *(void **)(v17 + 8);
    v35 = *(_QWORD *)v17;
    __p = v22;
    v38 = 0;
    v39 = 0;
    v37 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v37, *(const void **)(v17 + 16), *(_QWORD *)(v17 + 24), (uint64_t)(*(_QWORD *)(v17 + 24) - *(_QWORD *)(v17 + 16)) >> 2);
    v40 = v21;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v18 + 208))(v18, v20, &v35);
    if (v37)
    {
      v38 = v37;
      operator delete(v37);
    }
    v23 = *(unsigned int *)(v17 + 40);
    while ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v23))
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v35, a1, v23);
      v49 = HIDWORD(v35);
      LODWORD(v32[0]) = v35;
      v48 = INFINITY;
      v47 = 2139095040;
      v24.n128_u32[0] = v35;
      if (*(float *)&v35 == INFINITY)
        v24.n128_u32[0] = v47;
      if (__p)
      {
        v37 = __p;
        operator delete(__p);
      }
      v34 = 0;
      (*(void (**)(uint64_t, uint64_t, _QWORD *, __n128))(*(_QWORD *)a1 + 136))(a1, v23, v32, v24);
      if (v32[0])
        v25 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v32[0] + 32))(v32[0]);
      else
        v25 = v32[1] + 48 * v34;
      v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 200))(v18);
      v27 = *(void **)(v25 + 8);
      v35 = *(_QWORD *)v25;
      __p = v27;
      v38 = 0;
      v39 = 0;
      v37 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v37, *(const void **)(v25 + 16), *(_QWORD *)(v25 + 24), (uint64_t)(*(_QWORD *)(v25 + 24) - *(_QWORD *)(v25 + 16)) >> 2);
      v40 = v26;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v18 + 208))(v18, v21, &v35);
      if (v37)
      {
        v38 = v37;
        operator delete(v37);
      }
      v23 = *(unsigned int *)(v25 + 40);
      if (v32[0])
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v32[0] + 8))(v32[0]);
      }
      else if (v33)
      {
        --*v33;
      }
      v21 = v26;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v35, a1, v23);
    v49 = HIDWORD(v35);
    LODWORD(v32[0]) = v35;
    v48 = INFINITY;
    v47 = 2139095040;
    v28.n128_u32[0] = v35;
    if (*(float *)&v35 == INFINITY)
      v28.n128_u32[0] = v47;
    if (__p)
    {
      v37 = __p;
      operator delete(__p);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, __n128))(*(_QWORD *)a1 + 32))(&v29, a1, v23, v28);
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v18 + 184))(v18, v21, &v29);
    if (v30)
    {
      v31 = v30;
      operator delete(v30);
    }
    if (v41[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v41[0] + 40))(v41[0]);
    else
      ++v43;
  }
  if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)v41[0] + 24))(v41[0]))
    goto LABEL_19;
  result = v41[0];
  if (v41[0])
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v41[0] + 8))(v41[0]);
LABEL_51:
  if (v42)
    --*v42;
  return result;
}

void sub_1AD777924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  void *v29;

  v29 = *(void **)(v27 - 120);
  if (v29)
  {
    *(_QWORD *)(v27 - 112) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

void fst::ShortestPath<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int32x2_t *v17;
  __int32 v18;
  int *v19;
  unint64_t v20;
  int *v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  BOOL v28;
  int v29;
  float v30;
  void *v31;
  int v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  float32x2_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  void *v47;
  void *__p;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  float32x2_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  float32x2_t v56;
  void *v57;
  void *v58;
  int32x2_t v59;
  void *v60;
  _BYTE *v61;
  void *v62;
  int *v63;
  int *v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;

  v8 = *(_QWORD *)(a4 + 24);
  if (v8 == 1 && *(_BYTE *)(a4 + 35) == 0)
  {
    v47 = 0;
    __p = 0;
    *(_QWORD *)&v49 = 0;
    LODWORD(v62) = 0;
    if (fst::SingleShortestPath<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(a1, a3, (uint64_t *)a4, &v62, (char **)&v47))fst::SingleShortestPathBacktrace<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(a1, a2, &v47, v62);
    else
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
    if (v47)
    {
      __p = v47;
      operator delete(v47);
    }
  }
  else if (v8)
  {
    if (*(_BYTE *)(a4 + 33)
      || (fst::ShortestDistance<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(a1, a3, a4), a3[1] - *a3 != 32)|| fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Member(*a3))
    {
      v42 = a2;
      fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::VectorFst(&v66);
      fst::Reverse<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(a1, (uint64_t *)&v66, 1);
      v62 = (void *)vdup_n_s32(0x7F800000u);
      v64 = 0;
      v65 = 0;
      v63 = 0;
      v10 = **(_QWORD **)(v67 + 64);
      v12 = *(_QWORD *)(v10 + 48);
      v11 = *(_QWORD *)(v10 + 56);
      if (v11 == v12)
        v13 = 0;
      else
        v13 = *(_QWORD *)(v10 + 48);
      if (v11 != v12)
      {
        v14 = 0;
        if ((unint64_t)((v11 - v12) / 48) <= 1)
          v15 = 1;
        else
          v15 = (v11 - v12) / 48;
        while (1)
        {
          v16 = *(int *)(v13 + 48 * v14 + 40) - 1;
          if (v16 < (a3[1] - *a3) >> 5)
            break;
LABEL_27:
          if (++v14 == v15)
            goto LABEL_44;
        }
        fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Reverse((_QWORD *)(v13 + 48 * v14 + 8), &v56);
        fst::Times<fst::LatticeWeightTpl<float>,int>(&v56, (float32x2_t *)(*a3 + 32 * v16), &v59);
        if ((float)(*(float *)&v62 + *((float *)&v62 + 1)) < (float)(*(float *)v59.i32 + *(float *)&v59.i32[1]))
          goto LABEL_18;
        if ((float)(*(float *)&v62 + *((float *)&v62 + 1)) <= (float)(*(float *)v59.i32 + *(float *)&v59.i32[1]))
        {
          if (*(float *)&v62 < *(float *)v59.i32)
          {
LABEL_18:
            v17 = (int32x2_t *)&v62;
LABEL_21:
            v18 = v17->i32[1];
            LODWORD(v47) = v17->i32[0];
            HIDWORD(v47) = v18;
            v49 = 0uLL;
            __p = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)&v17[1], *(_QWORD *)&v17[2], (uint64_t)(*(_QWORD *)&v17[2] - *(_QWORD *)&v17[1]) >> 2);
            v62 = v47;
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v63, (char *)__p, v49, (uint64_t)(v49 - (_QWORD)__p) >> 2);
            if (__p)
            {
              *(_QWORD *)&v49 = __p;
              operator delete(__p);
            }
            if (v60)
            {
              v61 = v60;
              operator delete(v60);
            }
            if (v57)
            {
              v58 = v57;
              operator delete(v57);
            }
            goto LABEL_27;
          }
          if (*(float *)&v62 <= *(float *)v59.i32)
          {
            v19 = v63;
            v20 = (unint64_t)((char *)v64 - (char *)v63) >> 2;
            v21 = (int *)v60;
            v22 = (unint64_t)(v61 - (_BYTE *)v60) >> 2;
            if ((int)v20 <= (int)v22)
            {
              v17 = (int32x2_t *)&v62;
              if ((int)v20 < 1 || (int)v20 < (int)v22)
                goto LABEL_21;
              v23 = ((unint64_t)((char *)v64 - (char *)v63) >> 2) - 1;
              while (1)
              {
                v25 = *v19++;
                v24 = v25;
                v27 = *v21++;
                v26 = v27;
                if (v24 < v27)
                  break;
                v28 = v24 > v26 || v23-- == 0;
                v17 = (int32x2_t *)&v62;
                if (v28)
                  goto LABEL_21;
              }
            }
          }
        }
        v17 = &v59;
        goto LABEL_21;
      }
LABEL_44:
      std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::insert(a3, *a3, (unint64_t)&v62);
      if (*(_BYTE *)(a4 + 32))
      {
        v59 = 0;
        v60 = 0;
        v61 = 0;
        v29 = *(_DWORD *)(a4 + 16);
        LOBYTE(v47) = FLAGS_fst_default_cache_gc;
        __p = (void *)FLAGS_fst_default_cache_gc_limit;
        LODWORD(v49) = v29;
        *(_QWORD *)((char *)&v49 + 4) = 0;
        BYTE12(v49) = 0;
        v50 = 0;
        v51 = 0;
        fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::DeterminizeFst<fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>(&v56, (uint64_t)&v66, (uint64_t)a3, (uint64_t)&v59, (uint64_t)&v47);
        v30 = *(float *)(a4 + 16);
        v43 = *(float32x2_t *)(a4 + 40);
        v45 = 0;
        v46 = 0;
        v44 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v44, *(const void **)(a4 + 48), *(_QWORD *)(a4 + 56), (uint64_t)(*(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48)) >> 2);
        fst::NShortestPath<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>((uint64_t)&v56, v42, (uint64_t *)&v59, v8, &v43, *(_DWORD *)(a4 + 72), *(unsigned __int8 *)(a4 + 35), v30);
        if (v44)
        {
          v45 = v44;
          operator delete(v44);
        }
        v56 = (float32x2_t)&unk_1E5D27318;
        v31 = v57;
        if (v57)
        {
          v32 = *((_DWORD *)v57 + 14) - 1;
          *((_DWORD *)v57 + 14) = v32;
          if (!v32)
            (*(void (**)(void *))(*(_QWORD *)v31 + 8))(v31);
        }
        v47 = &v59;
        std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
      }
      else
      {
        v33 = *(float *)(a4 + 16);
        v52 = *(float32x2_t *)(a4 + 40);
        v54 = 0;
        v55 = 0;
        v53 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v53, *(const void **)(a4 + 48), *(_QWORD *)(a4 + 56), (uint64_t)(*(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48)) >> 2);
        fst::NShortestPath<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>((uint64_t)&v66, v42, a3, v8, &v52, *(_DWORD *)(a4 + 72), *(unsigned __int8 *)(a4 + 35), v33);
        if (v53)
        {
          v54 = v53;
          operator delete(v53);
        }
      }
      v34 = *a3;
      v35 = a3[1];
      v36 = *a3 + 32;
      if (v36 != v35)
      {
        v37 = *a3;
        do
        {
          v38 = v37 + 32;
          fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=(v37, v37 + 32);
          v34 += 32;
          v37 = v38;
        }
        while (v38 + 32 != v35);
        v36 = a3[1];
      }
      while (v36 != v34)
      {
        v39 = *(void **)(v36 - 24);
        if (v39)
        {
          *(_QWORD *)(v36 - 16) = v39;
          operator delete(v39);
        }
        v36 -= 32;
      }
      a3[1] = v34;
      if (v63)
      {
        v64 = v63;
        operator delete(v63);
      }
      v66 = &unk_1E5D24CC0;
      v40 = v67;
      if (v67)
      {
        v41 = *(_DWORD *)(v67 + 56) - 1;
        *(_DWORD *)(v67 + 56) = v41;
        if (!v41)
          (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
    }
  }
}

void sub_1AD777F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,void *a29,uint64_t a30)
{
  uint64_t v30;
  void *v32;
  _DWORD *v33;
  int v34;

  if (__p)
    operator delete(__p);
  v32 = *(void **)(v30 - 144);
  if (v32)
  {
    *(_QWORD *)(v30 - 136) = v32;
    operator delete(v32);
  }
  *(_QWORD *)(v30 - 120) = &unk_1E5D24CC0;
  v33 = *(_DWORD **)(v30 - 112);
  if (v33)
  {
    v34 = v33[14] - 1;
    v33[14] = v34;
    if (!v34)
      (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 8))(v33);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int *v9;
  int *v10;
  int *v11;
  int v12;
  int *v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  fst *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  fst *v26;
  _QWORD *v27;
  uint64_t v28;
  fst *v29;
  _QWORD *v30;
  uint64_t v31;
  fst *v32;
  _QWORD *v33;
  uint64_t v34;
  fst *v35;
  _QWORD *v36;
  fst *v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  fst *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  fst *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  fst *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  fst *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  void *__p[2];
  char v59;
  char v60;
  __int16 v61;
  void *v62[3];
  uint64_t v63[2];
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;

  *(_DWORD *)(a1 + 8) = 7;
  *(_BYTE *)(a1 + 12) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  v6 = (_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = &unk_1E5D239D8;
  v7 = (_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x4E00000000, 0);
  if ((v8 & 0x4000000000) != 0 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) == -1)
  {
    v21 = operator new();
    *(_DWORD *)(v21 + 8) = 5;
    *(_BYTE *)(v21 + 12) = 0;
    *(_QWORD *)v21 = &unk_1E5D1EEB0;
    *(_QWORD *)(v21 + 16) = 0xFFFFFFFF00000000;
    *(_QWORD *)(v21 + 32) = 0;
    *(_QWORD *)(v21 + 40) = 0;
    *(_QWORD *)(v21 + 24) = 0;
    *(_QWORD *)(a1 + 16) = v21;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v63, "INFO");
    v22 = fst::LogMessage::LogMessage((fst *)v62, (uint64_t)v63);
    v23 = (_QWORD *)fst::cerr(v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"AutoQueue: using state-order discipline", 39);
  }
  else if ((v8 & 0x800000000) != 0)
  {
    v25 = operator new();
    fst::TopOrderQueue<int>::TopOrderQueue<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(v25, a2);
    *(_QWORD *)(a1 + 16) = v25;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v63, "INFO");
    v26 = fst::LogMessage::LogMessage((fst *)v62, (uint64_t)v63);
    v27 = (_QWORD *)fst::cerr(v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"AutoQueue: using top-order discipline", 37);
  }
  else
  {
    if ((v8 & 0x200000000) == 0)
    {
      v66 = 0;
      v63[0] = (uint64_t)v7;
      v63[1] = 0;
      v64 = 0;
      v65 = &v66;
      fst::DfsVisit<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(a2, v63, 0);
      v9 = *(int **)(a1 + 48);
      v10 = *(int **)(a1 + 56);
      if (v9 != v10)
      {
        v11 = v9 + 1;
        if (v9 + 1 != v10)
        {
          v12 = *v9;
          v13 = v9 + 1;
          do
          {
            v15 = *v13++;
            v14 = v15;
            v16 = v12 < v15;
            if (v12 <= v15)
              v12 = v14;
            if (v16)
              v9 = v11;
            v11 = v13;
          }
          while (v13 != v10);
        }
      }
      v17 = *v9;
      v18 = *v9 + 1;
      std::vector<fst::QueueType>::vector(v62, v18);
      if (a3)
      {
        v19 = operator new();
        v20 = (_QWORD *)operator new();
        *v20 = a3;
      }
      else
      {
        v19 = 0;
        v20 = 0;
      }
      v61 = 0;
      fst::AutoQueue<int>::SccQueueType<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>(a2, v7, (uint64_t)v62, v19, &v61, (_BYTE *)&v61 + 1);
      if (HIBYTE(v61))
      {
        v31 = operator new();
        *(_DWORD *)(v31 + 8) = 2;
        *(_BYTE *)(v31 + 12) = 0;
        *(_OWORD *)(v31 + 16) = 0u;
        *(_OWORD *)(v31 + 32) = 0u;
        *(_OWORD *)(v31 + 48) = 0u;
        *(_QWORD *)v31 = &unk_1E5D27B60;
        *(_QWORD *)(a1 + 16) = v31;
        if (FLAGS_v < 2)
          goto LABEL_52;
        std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
        v32 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
        v33 = (_QWORD *)fst::cerr(v32);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"AutoQueue: using LIFO discipline", 32);
LABEL_30:
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v60);
        if (v59 < 0)
          operator delete(__p[0]);
LABEL_52:
        if (v20)
          MEMORY[0x1AF44D190](v20, 0x60C40B37CB4BBLL);
        if (v19)
          MEMORY[0x1AF44D190](v19, 0xC400A2AC0F1);
        v24 = v62[0];
        if (v62[0])
        {
          v62[1] = v62[0];
          goto LABEL_58;
        }
        return a1;
      }
      if ((_BYTE)v61)
      {
        v34 = operator new();
        fst::TopOrderQueue<int>::TopOrderQueue(v34, (uint64_t)v7);
        *(_QWORD *)(a1 + 16) = v34;
        if (FLAGS_v < 2)
          goto LABEL_52;
        std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
        v35 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
        v36 = (_QWORD *)fst::cerr(v35);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"AutoQueue: using top-order discipline", 37);
        goto LABEL_30;
      }
      if (FLAGS_v >= 2)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
        v37 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
        v38 = (_QWORD *)fst::cerr(v37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"AutoQueue: using SCC meta-discipline", 36);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v60);
        if (v59 < 0)
          operator delete(__p[0]);
      }
      std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v6, v18);
      if (v17 < 0)
      {
LABEL_51:
        v56 = operator new();
        *(_DWORD *)(v56 + 8) = 6;
        *(_BYTE *)(v56 + 12) = 0;
        *(_QWORD *)v56 = &unk_1E5D22CF0;
        *(_QWORD *)(v56 + 16) = v6;
        *(_QWORD *)(v56 + 24) = v7;
        *(_QWORD *)(v56 + 32) = 0xFFFFFFFF00000000;
        *(_QWORD *)(v56 + 48) = 0;
        *(_QWORD *)(v56 + 56) = 0;
        *(_QWORD *)(v56 + 40) = 0;
        *(_QWORD *)(a1 + 16) = v56;
        goto LABEL_52;
      }
      v39 = 0;
      while (1)
      {
        v40 = *((_DWORD *)v62[0] + v39);
        if (v40 == 3)
        {
          v44 = operator new();
          *(_DWORD *)(v44 + 8) = 3;
          *(_BYTE *)(v44 + 12) = 0;
          *(_QWORD *)v44 = &unk_1E5D21760;
          *(_OWORD *)(v44 + 16) = *(_OWORD *)v20;
          *(_OWORD *)(v44 + 32) = 0u;
          *(_OWORD *)(v44 + 48) = 0u;
          *(_OWORD *)(v44 + 64) = 0u;
          *(_OWORD *)(v44 + 80) = 0u;
          *(_OWORD *)(v44 + 92) = 0u;
          *(_QWORD *)(v44 + 120) = 0;
          *(_QWORD *)(v44 + 128) = 0;
          *(_QWORD *)(v44 + 112) = 0;
          *(_QWORD *)(*v6 + 8 * v39) = v44;
          if (FLAGS_v >= 3)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            v45 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
            v46 = (_QWORD *)fst::cerr(v45);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"AutoQueue: SCC #", 16);
            v47 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)": using shortest-first discipline", 33);
            goto LABEL_48;
          }
        }
        else if (v40 == 2)
        {
          v48 = operator new();
          *(_DWORD *)(v48 + 8) = 2;
          *(_BYTE *)(v48 + 12) = 0;
          *(_OWORD *)(v48 + 16) = 0u;
          *(_OWORD *)(v48 + 32) = 0u;
          *(_OWORD *)(v48 + 48) = 0u;
          *(_QWORD *)v48 = &unk_1E5D27B60;
          *(_QWORD *)(*v6 + 8 * v39) = v48;
          if (FLAGS_v >= 3)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            v49 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
            v50 = (_QWORD *)fst::cerr(v49);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"AutoQueue: SCC #", 16);
            v51 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)": using LIFO disciplle", 22);
            goto LABEL_48;
          }
        }
        else if (v40)
        {
          v52 = operator new();
          *(_DWORD *)(v52 + 8) = 1;
          *(_BYTE *)(v52 + 12) = 0;
          *(_OWORD *)(v52 + 16) = 0u;
          *(_OWORD *)(v52 + 32) = 0u;
          *(_OWORD *)(v52 + 48) = 0u;
          *(_QWORD *)v52 = &unk_1E5D23A28;
          *(_QWORD *)(*v6 + 8 * v39) = v52;
          if (FLAGS_v >= 3)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            v53 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
            v54 = (_QWORD *)fst::cerr(v53);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"AutoQueue: SCC #", 16);
            v55 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)": using FIFO disciplle", 22);
LABEL_48:
            fst::LogMessage::~LogMessage((fst::LogMessage *)&v60);
            if (v59 < 0)
              operator delete(__p[0]);
          }
        }
        else
        {
          *(_QWORD *)(*v6 + 8 * v39) = 0;
          if (FLAGS_v >= 3)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            v41 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
            v42 = (_QWORD *)fst::cerr(v41);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"AutoQueue: SCC #", 16);
            v43 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)": using trivial discipline", 26);
            goto LABEL_48;
          }
        }
        if (v18 == ++v39)
          goto LABEL_51;
      }
    }
    v28 = operator new();
    *(_DWORD *)(v28 + 8) = 2;
    *(_BYTE *)(v28 + 12) = 0;
    *(_OWORD *)(v28 + 16) = 0u;
    *(_OWORD *)(v28 + 32) = 0u;
    *(_OWORD *)(v28 + 48) = 0u;
    *(_QWORD *)v28 = &unk_1E5D27B60;
    *(_QWORD *)(a1 + 16) = v28;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v63, "INFO");
    v29 = fst::LogMessage::LogMessage((fst *)v62, (uint64_t)v63);
    v30 = (_QWORD *)fst::cerr(v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"AutoQueue: using LIFO discipline", 32);
  }
  fst::LogMessage::~LogMessage((fst::LogMessage *)v62);
  if (SHIBYTE(v64) < 0)
  {
    v24 = (void *)v63[0];
LABEL_58:
    operator delete(v24);
  }
  return a1;
}

void sub_1AD778894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, int a17, char a18, char a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  void **v29;
  void **v30;
  void *v32;
  void *v33;

  if (a16 < 0)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  v32 = *v30;
  if (*v30)
  {
    *(_QWORD *)(v28 + 56) = v32;
    operator delete(v32);
  }
  v33 = *v29;
  if (*v29)
  {
    *(_QWORD *)(v28 + 32) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::AutoQueue<int>::SccQueueType<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _BYTE *a5, _BYTE *a6)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  char v20;
  int v21;
  float v22;
  float v23;
  float v24;
  void *__p[2];
  __int128 v28;
  _QWORD v29[3];
  _DWORD *v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  float v35;
  int v36;
  float v37;

  *a5 = 1;
  *a6 = 1;
  v10 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v10)
  {
    v11 = v10 >> 2;
    if (v11 <= 1)
      v11 = 1;
    bzero(*(void **)a3, 4 * v11);
  }
  v34 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v32);
  while (1)
  {
    result = v32;
    if (!v32)
    {
      if ((int)v34 >= v33)
        return result;
LABEL_11:
      v14 = v34;
      goto LABEL_12;
    }
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
    result = v32;
    if (v13)
      break;
    if (!v32)
      goto LABEL_11;
    v14 = (*(uint64_t (**)(void))(*(_QWORD *)v32 + 24))();
LABEL_12:
    v31 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 136))(a1, v14, v29);
    v16 = (int)v14;
    while (1)
    {
      if (!v29[0])
      {
        if (v31 >= v29[2])
          goto LABEL_48;
        goto LABEL_18;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v29[0] + 24))(v29[0]))
        break;
      if (v29[0])
      {
        v17 = (*(uint64_t (**)(void))(*(_QWORD *)v29[0] + 32))();
        goto LABEL_19;
      }
LABEL_18:
      v17 = v29[1] + 48 * v31;
LABEL_19:
      v18 = *(int *)(*a2 + 4 * v16);
      if ((_DWORD)v18 == *(_DWORD *)(*a2 + 4 * *(int *)(v17 + 40)))
      {
        v19 = *(_DWORD **)a3;
        if (!a4)
          goto LABEL_24;
        *(_OWORD *)__p = 0u;
        v28 = 0u;
        v20 = fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::operator()(a4, v17 + 8, (uint64_t)__p);
        if (__p[1])
        {
          *(void **)&v28 = __p[1];
          operator delete(__p[1]);
        }
        if ((v20 & 1) != 0)
        {
LABEL_24:
          v21 = 1;
          goto LABEL_33;
        }
        if ((v19[v18] | 2) == 2)
        {
          LODWORD(__p[0]) = 0;
          v22 = *(float *)(v17 + 8);
          v23 = *(float *)(v17 + 12);
          *(float *)__p = v22;
          v37 = v23;
          v36 = 2139095040;
          v35 = INFINITY;
          if (v22 == INFINITY && v37 == v35 && *(_QWORD *)(v17 + 24) == *(_QWORD *)(v17 + 16)
            || (*(float *)__p = v22, v37 = v23, v36 = 0, v35 = 0.0, v22 == 0.0)
            && v37 == v35
            && *(_QWORD *)(v17 + 24) == *(_QWORD *)(v17 + 16))
          {
            v21 = 2;
          }
          else
          {
            v21 = 3;
          }
LABEL_33:
          v19[v18] = v21;
        }
        *a5 = 0;
      }
      LODWORD(__p[0]) = 0;
      v15.n128_u32[0] = *(_DWORD *)(v17 + 8);
      v24 = *(float *)(v17 + 12);
      LODWORD(__p[0]) = v15.n128_u32[0];
      v37 = v24;
      v36 = 2139095040;
      v35 = INFINITY;
      if (v15.n128_f32[0] != INFINITY || v37 != v35 || *(_QWORD *)(v17 + 24) != *(_QWORD *)(v17 + 16))
      {
        LODWORD(__p[0]) = v15.n128_u32[0];
        v37 = v24;
        v36 = 0;
        v35 = 0.0;
        if (v15.n128_f32[0] != 0.0
          || (v15.n128_f32[0] = v37, v37 != v35)
          || *(_QWORD *)(v17 + 24) != *(_QWORD *)(v17 + 16))
        {
          *a6 = 0;
        }
      }
      if (v29[0])
        (*(void (**)(_QWORD, __n128))(*(_QWORD *)v29[0] + 40))(v29[0], v15);
      else
        ++v31;
    }
    if (v29[0])
    {
      (*(void (**)(void))(*(_QWORD *)v29[0] + 8))();
      goto LABEL_50;
    }
LABEL_48:
    if (v30)
      --*v30;
LABEL_50:
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 32))(v32);
    else
      ++v34;
  }
  if (v32)
    return (*(uint64_t (**)(void))(*(_QWORD *)v32 + 8))();
  return result;
}

void sub_1AD778D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a20)
    (*(void (**)(uint64_t))(*(_QWORD *)a20 + 8))(a20);
  _Unwind_Resume(exception_object);
}

void std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::__append((void **)a1, a2 - v2);
  }
}

void fst::AutoQueue<int>::~AutoQueue(_QWORD *a1)
{
  fst::AutoQueue<int>::~AutoQueue(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::AutoQueue<int>::Head_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
}

uint64_t fst::AutoQueue<int>::Enqueue_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
}

uint64_t fst::AutoQueue<int>::Dequeue_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
}

uint64_t fst::AutoQueue<int>::Update_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
}

uint64_t fst::AutoQueue<int>::Empty_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16));
}

uint64_t fst::AutoQueue<int>::Clear_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16));
}

_QWORD *fst::StateOrderQueue<int>::~StateOrderQueue(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E5D1EEB0;
  v2 = (void *)a1[3];
  if (v2)
    operator delete(v2);
  return a1;
}

void fst::StateOrderQueue<int>::~StateOrderQueue(_QWORD *a1)
{
  void *v1;

  *a1 = &unk_1E5D1EEB0;
  v1 = (void *)a1[3];
  if (v1)
    operator delete(v1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::StateOrderQueue<int>::Head_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

BOOL fst::StateOrderQueue<int>::Empty_(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) > *(_DWORD *)(a1 + 20);
}

void fst::StateOrderQueue<int>::Enqueue(uint64_t a1, int a2)
{
  int v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  char v7;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_DWORD *)(a1 + 20);
  if (v3 > v4)
  {
    *(_DWORD *)(a1 + 20) = a2;
LABEL_6:
    *(_DWORD *)(a1 + 16) = a2;
    goto LABEL_7;
  }
  if (v4 < a2)
  {
    *(_DWORD *)(a1 + 20) = a2;
    goto LABEL_7;
  }
  if (v3 > a2)
    goto LABEL_6;
LABEL_7:
  v5 = (_QWORD *)(a1 + 24);
  v6 = a2;
  while (*(_QWORD *)(a1 + 32) <= v6)
  {
    v7 = 0;
    std::vector<BOOL>::push_back(a1 + 24, &v7);
  }
  *(_QWORD *)(*v5 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v6;
}

uint64_t fst::StateOrderQueue<int>::Dequeue(uint64_t result)
{
  uint64_t v1;
  int v2;
  unint64_t v3;
  int v4;

  v1 = *(_QWORD *)(result + 24);
  v2 = *(_DWORD *)(result + 20);
  v3 = *(int *)(result + 16);
  *(_QWORD *)(v1 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v3);
  if ((int)v3 <= v2)
  {
    v4 = v3 - 1;
    do
    {
      if (((*(_QWORD *)(v1 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
        break;
      ++v3;
      *(_DWORD *)(result + 16) = v4 + 2;
      ++v4;
    }
    while (v2 != v4);
  }
  return result;
}

double fst::StateOrderQueue<int>::Clear(uint64_t a1)
{
  int v1;
  unint64_t v2;
  uint64_t v3;
  int v4;
  double result;

  v1 = *(_DWORD *)(a1 + 20);
  v2 = *(int *)(a1 + 16);
  if ((int)v2 <= v1)
  {
    v3 = *(_QWORD *)(a1 + 24);
    v4 = v1 - v2 + 1;
    do
    {
      *(_QWORD *)(v3 + ((v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v2);
      ++v2;
      --v4;
    }
    while (v4);
  }
  result = NAN;
  *(_QWORD *)(a1 + 16) = 0xFFFFFFFF00000000;
  return result;
}

uint64_t fst::TopOrderQueue<int>::TopOrderQueue<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(uint64_t a1, uint64_t a2)
{
  std::vector<int> *v3;
  fst *v4;
  _QWORD *v5;
  void *__p[2];
  char v8;
  char v9;
  _QWORD v10[3];
  char v11;

  *(_DWORD *)(a1 + 8) = 4;
  *(_BYTE *)(a1 + 12) = 0;
  *(_QWORD *)a1 = &unk_1E5D1CC68;
  *(_QWORD *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + 24) = 0u;
  v3 = (std::vector<int> *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v11 = 0;
  v10[0] = a1 + 24;
  v10[1] = &v11;
  fst::DfsVisit<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(a2, (uint64_t)v10, 0);
  if (!v11)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v4 = fst::LogMessage::LogMessage((fst *)&v9, (uint64_t)__p);
    v5 = (_QWORD *)fst::cerr(v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"TopOrderQueue: fst is not acyclic.", 34);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v9);
    if (v8 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 12) = 1;
  }
  std::vector<int>::resize(v3, (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2, &fst::kNoStateId);
  return a1;
}

void sub_1AD7791F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  void **v19;
  void **v20;
  void *v22;
  void *v23;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  v22 = *v19;
  if (*v19)
  {
    *(_QWORD *)(v18 + 56) = v22;
    operator delete(v22);
  }
  v23 = *v20;
  if (*v20)
  {
    *(_QWORD *)(v18 + 32) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::vector<char>::pointer begin;
  unint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int v33;
  std::vector<char>::pointer end;
  char *v35;
  std::vector<char>::pointer v36;
  int64_t v37;
  int64_t v38;
  unint64_t v39;
  size_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char v45;
  char v46;
  uint64_t v47;
  int v48;
  std::vector<char>::value_type v49[8];
  std::vector<char>::value_type __x[8];
  int v51;
  int v52;
  void *v53;
  _QWORD v54[6];
  _QWORD *v55;
  _OWORD v56[2];
  __int128 v57;
  std::vector<char> v58;

  v6 = (_QWORD *)operator new();
  v6[1] = 0;
  v6[2] = 0;
  *v6 = 0;
  *(_QWORD *)(a2 + 16) = v6;
  **(_BYTE **)(a2 + 8) = 1;
  v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v48 == -1)
  {
    fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishVisit((char ***)a2);
    return;
  }
  memset(&v58, 0, sizeof(v58));
  v57 = 0u;
  memset(v56, 0, sizeof(v56));
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MemoryPool(&v53, 64);
  v47 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v47)
    v7 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v7 = (v48 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v7 <= (std::vector<char>::pointer)(v58.__end_ - v58.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v7 < (std::vector<char>::pointer)(v58.__end_ - v58.__begin_))
      v58.__end_ = &v58.__begin_[(int)v7];
  }
  else
  {
    std::vector<char>::__append(&v58, (int)v7 - (unint64_t)(v58.__end_ - v58.__begin_), __x);
  }
  v52 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v48 >= (int)v7)
    goto LABEL_102;
  v8 = v48;
  v46 = a3;
  do
  {
    v58.__begin_[(int)v8] = 1;
    v9 = (uint64_t)v55;
    if (v55)
    {
      v55 = (_QWORD *)v55[6];
    }
    else
    {
      v9 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v54, 1);
      *(_QWORD *)(v9 + 48) = 0;
    }
    *(_DWORD *)v9 = v8;
    *(_QWORD *)(v9 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v8, v9 + 8);
    *(_QWORD *)v49 = v9;
    std::deque<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> *>>::push_back(v56, v49);
    v10 = *((_QWORD *)&v57 + 1);
    if (!*((_QWORD *)&v57 + 1))
    {
      v11 = 1;
      if ((a3 & 1) != 0)
        break;
      goto LABEL_62;
    }
    v11 = 1;
    do
    {
      v12 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                   + (((unint64_t)(v10 + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v10 + v57 - 1) & 0x1FF));
      v13 = *(int *)v12;
      v14 = v58.__end_ - v58.__begin_;
      if (v58.__end_ - v58.__begin_ <= v13)
      {
        v7 = v13 + 1;
        v49[0] = 0;
        if (v13 + 1 <= v14)
        {
          if (v13 + 1 < v14)
            v58.__end_ = &v58.__begin_[v7];
        }
        else
        {
          std::vector<char>::__append(&v58, v13 + 1 - v14, v49);
        }
      }
      if ((v11 & 1) != 0)
      {
        v15 = v12[1];
        if (v15)
        {
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
          {
            v16 = v12[1];
            if (v16)
              v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
            else
LABEL_28:
              v17 = v12[2] + 48 * v12[5];
            v18 = *(int *)(v17 + 40);
            begin = v58.__begin_;
            v20 = v58.__end_ - v58.__begin_;
            if (v58.__end_ - v58.__begin_ <= v18)
            {
              v7 = (v18 + 1);
              v49[0] = 0;
              if ((int)v7 <= v20)
              {
                if ((int)v7 < v20)
                  v58.__end_ = &v58.__begin_[(int)v7];
              }
              else
              {
                std::vector<char>::__append(&v58, (int)v7 - v20, v49);
                v18 = *(int *)(v17 + 40);
                begin = v58.__begin_;
              }
            }
            v26 = begin[v18];
            if (v26 == 1)
            {
              **(_BYTE **)(a2 + 8) = 0;
              v28 = v12[1];
              if (v28)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
                v11 = 0;
              }
              else
              {
                v11 = 0;
                ++v12[5];
              }
            }
            else
            {
              if (v26 == 2)
              {
                v27 = v12[1];
                if (v27)
                  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
                else
                  ++v12[5];
              }
              else
              {
                begin[v18] = 1;
                v29 = (uint64_t)v55;
                if (v55)
                {
                  v55 = (_QWORD *)v55[6];
                }
                else
                {
                  v29 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v54, 1);
                  *(_QWORD *)(v29 + 48) = 0;
                }
                *(_DWORD *)v29 = *(_DWORD *)(v17 + 40);
                *(_QWORD *)(v29 + 40) = 0;
                (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
                *(_QWORD *)v49 = v29;
                std::deque<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> *>>::push_back(v56, v49);
              }
              v11 = 1;
            }
            goto LABEL_58;
          }
        }
        else if (v12[5] < v12[3])
        {
          goto LABEL_28;
        }
      }
      v58.__begin_[v13] = 2;
      v21 = v12[1];
      if (v21)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      }
      else
      {
        v22 = (_DWORD *)v12[4];
        if (v22)
          --*v22;
      }
      v12[6] = v55;
      v55 = v12;
      --*((_QWORD *)&v57 + 1);
      std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v56, 1);
      if (*((_QWORD *)&v57 + 1))
      {
        v23 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                    + (((unint64_t)(*((_QWORD *)&v57 + 1) + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((*((_QWORD *)&v57 + 1) + v57 - 1) & 0x1FF));
        v24 = *(_QWORD *)(v23 + 8);
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
        fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState(a2, v13);
        v25 = *(_QWORD *)(v23 + 8);
        if (v25)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        else
          ++*(_QWORD *)(v23 + 40);
      }
      else
      {
        fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState(a2, v13);
      }
LABEL_58:
      v10 = *((_QWORD *)&v57 + 1);
    }
    while (*((_QWORD *)&v57 + 1));
    if ((a3 & 1) != 0)
      break;
LABEL_62:
    if ((_DWORD)v8 == v48)
      v8 = 0;
    else
      v8 = (v8 + 1);
    if ((int)v8 < (int)v7)
    {
      v30 = &v58.__begin_[(int)v8];
      v31 = (int)v7 - (uint64_t)(int)v8;
      while (*v30++)
      {
        v8 = (v8 + 1);
        if (!--v31)
        {
          v8 = v7;
          break;
        }
      }
    }
    if (v47 || (_DWORD)v8 != (_DWORD)v7)
      continue;
LABEL_72:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_78;
      }
    }
    else if (v52 >= v51)
    {
      continue;
    }
    v33 = v52;
LABEL_78:
    if (v33 != (_DWORD)v7)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v52;
      goto LABEL_72;
    }
    end = v58.__end_;
    if (v58.__end_ >= v58.__end_cap_.__value_)
    {
      v36 = v58.__begin_;
      v37 = v58.__end_ - v58.__begin_;
      v38 = v58.__end_ - v58.__begin_ + 1;
      if (v38 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v39 = v58.__end_cap_.__value_ - v58.__begin_;
      if (2 * (v58.__end_cap_.__value_ - v58.__begin_) > (unint64_t)v38)
        v38 = 2 * v39;
      if (v39 >= 0x3FFFFFFFFFFFFFFFLL)
        v40 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v40 = v38;
      if (v40)
        v41 = (char *)operator new(v40);
      else
        v41 = 0;
      v42 = &v41[v37];
      v43 = &v41[v37];
      *v43 = 0;
      v35 = v43 + 1;
      if (end != v36)
      {
        v44 = &end[~(unint64_t)v36];
        do
        {
          v45 = *--end;
          (v44--)[(_QWORD)v41] = v45;
        }
        while (end != v36);
        end = v58.__begin_;
        v42 = v41;
      }
      v58.__begin_ = v42;
      v58.__end_ = v35;
      v58.__end_cap_.__value_ = &v41[v40];
      if (end)
        operator delete(end);
    }
    else
    {
      *v58.__end_ = 0;
      v35 = end + 1;
    }
    v58.__end_ = v35;
    v7 = (v7 + 1);
    a3 = v46;
  }
  while ((v11 & 1) != 0 && (int)v8 < (int)v7);
LABEL_102:
  fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishVisit((char ***)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v53 = &unk_1E5D198F0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Link>::~MemoryArena(v54);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v53);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v56);
  if (v58.__begin_)
  {
    v58.__end_ = v58.__begin_;
    operator delete(v58.__begin_);
  }
}

void sub_1AD779940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D198F0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz, std::vector<int>::const_reference __x)
{
  std::vector<int>::size_type v3;

  v3 = this->__end_ - this->__begin_;
  if (__sz <= v3)
  {
    if (__sz < v3)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<int>::__append(this, __sz - v3, __x);
  }
}

_QWORD *fst::TopOrderQueue<int>::~TopOrderQueue(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &unk_1E5D1CC68;
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

void fst::TopOrderQueue<int>::~TopOrderQueue(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &unk_1E5D1CC68;
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::TopOrderQueue<int>::Head_(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 48) + 4 * *(int *)(a1 + 16));
}

uint64_t fst::TopOrderQueue<int>::Enqueue_(uint64_t result, int a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;

  v2 = *(_DWORD *)(result + 16);
  v3 = *(_DWORD *)(result + 20);
  v4 = *(_QWORD *)(result + 24);
  v5 = *(_DWORD *)(v4 + 4 * a2);
  if (v2 > v3)
  {
    *(_DWORD *)(result + 20) = v5;
LABEL_6:
    *(_DWORD *)(result + 16) = v5;
    goto LABEL_7;
  }
  if (v5 <= v3)
  {
    if (v5 < v2)
      goto LABEL_6;
  }
  else
  {
    *(_DWORD *)(result + 20) = v5;
  }
LABEL_7:
  *(_DWORD *)(*(_QWORD *)(result + 48) + 4 * *(int *)(v4 + 4 * a2)) = a2;
  return result;
}

uint64_t fst::TopOrderQueue<int>::Dequeue_(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  int *v5;
  int v6;

  v1 = *(_QWORD *)(result + 48);
  *(_DWORD *)(v1 + 4 * *(int *)(result + 16)) = -1;
  v2 = *(_DWORD *)(result + 20);
  v3 = *(int *)(result + 16);
  if ((int)v3 <= v2)
  {
    v4 = v3 - 1;
    v5 = (int *)(v1 + 4 * v3);
    do
    {
      v6 = *v5++;
      if (v6 != -1)
        break;
      *(_DWORD *)(result + 16) = v4 + 2;
      ++v4;
    }
    while (v2 != v4);
  }
  return result;
}

BOOL fst::TopOrderQueue<int>::Empty_(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) > *(_DWORD *)(a1 + 20);
}

double fst::TopOrderQueue<int>::Clear_(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v1 = *(int *)(a1 + 16);
  if ((int)v1 <= *(_DWORD *)(a1 + 20))
  {
    v2 = *(_QWORD *)(a1 + 48);
    do
      *(_DWORD *)(v2 + 4 * v1) = -1;
    while (v1++ < *(int *)(a1 + 20));
  }
  result = NAN;
  *(_QWORD *)(a1 + 16) = 0xFFFFFFFF00000000;
  return result;
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::vector<int>::pointer end;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_1AD779C10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishVisit(char ***a1)
{
  _QWORD *v2;
  char *v3;
  unint64_t v4;
  char **v5;
  char *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;

  if (*(_BYTE *)a1[1])
  {
    (*a1)[1] = **a1;
    v2 = a1[2];
    v3 = (char *)v2[1];
    if (v3 == (char *)*v2)
    {
      v17 = (uint64_t)&v3[-*v2] >> 2;
      if (!v17)
        goto LABEL_28;
    }
    else
    {
      v4 = 0;
      do
      {
        v5 = *a1;
        v6 = (*a1)[1];
        v7 = (unint64_t)(*a1)[2];
        if ((unint64_t)v6 >= v7)
        {
          v9 = *v5;
          v10 = (v6 - *v5) >> 2;
          v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v12 = v7 - (_QWORD)v9;
          if (v12 >> 1 > v11)
            v11 = v12 >> 1;
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
            v13 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v13 = v11;
          if (v13)
          {
            v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(*a1 + 2), v13);
            v9 = *v5;
            v6 = v5[1];
          }
          else
          {
            v14 = 0;
          }
          v15 = &v14[4 * v10];
          *(_DWORD *)v15 = -1;
          v8 = v15 + 4;
          while (v6 != v9)
          {
            v16 = *((_DWORD *)v6 - 1);
            v6 -= 4;
            *((_DWORD *)v15 - 1) = v16;
            v15 -= 4;
          }
          *v5 = v15;
          v5[1] = v8;
          v5[2] = &v14[4 * v13];
          if (v9)
            operator delete(v9);
        }
        else
        {
          *(_DWORD *)v6 = -1;
          v8 = v6 + 4;
        }
        v5[1] = v8;
        ++v4;
        v2 = a1[2];
        v3 = (char *)*v2;
        v17 = (uint64_t)(v2[1] - *v2) >> 2;
      }
      while (v17 > v4);
      if (!v17)
      {
LABEL_28:
        v22 = (char *)*v2;
        if (*v2)
        {
          v2[1] = v22;
          operator delete(v22);
        }
        JUMPOUT(0x1AF44D190);
      }
    }
    v18 = 0;
    v19 = **a1;
    v20 = &v3[4 * v17 - 4];
    do
    {
      v21 = *(int *)v20;
      v20 -= 4;
      *(_DWORD *)&v19[4 * v21] = v18++;
    }
    while (v17 != v18);
  }
  else
  {
    v2 = a1[2];
  }
  if (v2)
    goto LABEL_28;
}

void fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState(uint64_t a1, int a2)
{
  uint64_t v3;
  _DWORD *v4;
  unint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_DWORD **)(v3 + 8);
  v5 = *(_QWORD *)(v3 + 16);
  if ((unint64_t)v4 >= v5)
  {
    v7 = *(_DWORD **)v3;
    v8 = ((uint64_t)v4 - *(_QWORD *)v3) >> 2;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v5 - (_QWORD)v7;
    if (v10 >> 1 > v9)
      v9 = v10 >> 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v3 + 16, v11);
      v7 = *(_DWORD **)v3;
      v4 = *(_DWORD **)(v3 + 8);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[4 * v8];
    v14 = &v12[4 * v11];
    *(_DWORD *)v13 = a2;
    v6 = v13 + 4;
    while (v4 != v7)
    {
      v15 = *--v4;
      *((_DWORD *)v13 - 1) = v15;
      v13 -= 4;
    }
    *(_QWORD *)v3 = v13;
    *(_QWORD *)(v3 + 8) = v6;
    *(_QWORD *)(v3 + 16) = v14;
    if (v7)
      operator delete(v7);
  }
  else
  {
    *v4 = a2;
    v6 = v4 + 1;
  }
  *(_QWORD *)(v3 + 8) = v6;
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n, std::vector<int>::const_reference __x)
{
  std::__compressed_pair<int *> *p_end_cap;
  int *v7;
  int *value;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  std::vector<int>::size_type v16;
  int *v17;
  int *v18;
  int *v19;
  std::vector<int>::size_type v20;
  int *v21;
  int *v22;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer i;
  int v25;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v7 = value;
  v9 = p_end_cap[-1].__value_;
  if (__n <= value - v9)
  {
    if (__n)
    {
      v16 = 4 * __n;
      v17 = &v9[__n];
      do
      {
        *v9++ = *__x;
        v16 -= 4;
      }
      while (v16);
      v9 = v17;
    }
    this->__end_ = v9;
  }
  else
  {
    v10 = (char *)v9 - (char *)this->__begin_;
    v11 = __n + (v10 >> 2);
    if (v11 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 2;
    v13 = (char *)v7 - (char *)this->__begin_;
    if (v13 >> 1 > v11)
      v11 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v14);
    else
      v15 = 0;
    v18 = (int *)&v15[4 * v12];
    v19 = &v18[__n];
    v20 = 4 * __n;
    v21 = v18;
    do
    {
      *v21++ = *__x;
      v20 -= 4;
    }
    while (v20);
    v22 = (int *)&v15[4 * v14];
    begin = this->__begin_;
    for (i = this->__end_; i != begin; --i)
    {
      v25 = *(i - 1);
      *--v18 = v25;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v22;
    if (begin)
      operator delete(begin);
  }
}

uint64_t fst::LifoQueue<int>::~LifoQueue(uint64_t a1)
{
  std::deque<int>::~deque[abi:ne180100]((_QWORD *)(a1 + 16));
  return a1;
}

void fst::LifoQueue<int>::~LifoQueue(uint64_t a1)
{
  std::deque<int>::~deque[abi:ne180100]((_QWORD *)(a1 + 16));
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::LifoQueue<int>::Head_(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + ((*(_QWORD *)(a1 + 48) >> 7) & 0x1FFFFFFFFFFFFF8))
                         + 4 * (*(_QWORD *)(a1 + 48) & 0x3FFLL));
}

void fst::LifoQueue<int>::Enqueue_(uint64_t a1, int a2)
{
  int v2;

  v2 = a2;
  std::deque<int>::push_front(a1 + 16, &v2);
}

uint64_t fst::LifoQueue<int>::Dequeue_(int64x2_t *a1)
{
  a1[3] = vaddq_s64(a1[3], (int64x2_t)xmmword_1AE13F780);
  return std::deque<int>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1[1].i64, 1);
}

BOOL fst::LifoQueue<int>::Empty_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) == 0;
}

uint64_t std::deque<int>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 512;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 1024;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

void std::deque<int>::push_front(uint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    std::deque<int>::__add_front_capacity((void **)a1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 8 * (v4 >> 10));
  if (*(_QWORD *)(a1 + 16) == v5)
    v7 = 0;
  else
    v7 = *v6 + 4 * (v4 & 0x3FF);
  if (v7 == *v6)
    v7 = *(v6 - 1) + 4096;
  *(_DWORD *)(v7 - 4) = *a2;
  v8 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 32) = v4 - 1;
  *(_QWORD *)(a1 + 40) = v8;
}

void std::deque<int>::__add_front_capacity(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = v3 - v2;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = ((v3 - v2) << 7) - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0x400)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 512;
      else
        v40 = (uint64_t)a1[4] + 1024;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0x1000uLL);
        std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0x1000uLL);
      }
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 512;
      else
        v35 = (uint64_t)a1[4] + 1024;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 1024;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &__p);
  }
}

void sub_1AD77A488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<int>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x400)
    a2 = 1;
  if (v2 < 0x800)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 1024;
  }
  return v4 ^ 1u;
}

void fst::LifoQueue<int>::Clear(_QWORD *a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (void **)a1[3];
  v3 = a1[4];
  a1[7] = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = a1[4];
      v2 = (void **)(a1[3] + 8);
      a1[3] = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 512;
  }
  else
  {
    if (v4 >> 3 != 2)
      return;
    v6 = 1024;
  }
  a1[6] = v6;
}

_QWORD *std::vector<fst::QueueType>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_1AD77A5FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  uint64_t result;
  int *v8;
  unint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;

  v3 = *(float *)a2;
  v4 = *(float *)a2 + *(float *)(a2 + 4);
  v5 = *(float *)a3;
  v6 = *(float *)a3 + *(float *)(a3 + 4);
  if (v4 < v6)
    return 1;
  if (v4 <= v6)
  {
    if (v3 < v5)
      return 1;
    if (v3 <= v5)
    {
      v8 = *(int **)(a2 + 8);
      v9 = *(_QWORD *)(a2 + 16) - (_QWORD)v8;
      v10 = *(int **)(a3 + 8);
      v11 = (*(_QWORD *)(a3 + 16) - (_QWORD)v10) >> 2;
      if ((int)(v9 >> 2) <= (int)v11)
      {
        if ((int)(v9 >> 2) < (int)v11)
          return 1;
        if ((int)(v9 >> 2) >= 1)
        {
          v12 = (v9 >> 2);
          while (1)
          {
            v14 = *v8++;
            v13 = v14;
            v15 = *v10++;
            v16 = v13 <= v15;
            if (v13 < v15)
              break;
            if (!v16)
              return 1;
            result = 0;
            if (!--v12)
              return result;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t fst::TopOrderQueue<int>::TopOrderQueue(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 4;
  *(_BYTE *)(a1 + 12) = 0;
  *(_QWORD *)a1 = &unk_1E5D1CC68;
  *(_QWORD *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 24), *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  std::vector<int>::vector((std::vector<int> *)(a1 + 48), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2, &fst::kNoStateId);
  return a1;
}

void sub_1AD77A734(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::~ShortestFirstQueue(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E5D21760;
  v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::~Heap(a1 + 2);
  return a1;
}

void fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::~ShortestFirstQueue(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E5D21760;
  v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::~Heap(a1 + 2);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::Head_(uint64_t a1)
{
  return **(unsigned int **)(a1 + 80);
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::Enqueue_(uint64_t a1, int a2)
{
  int v3;

  v3 = a2;
  return fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::Insert(a1 + 16, &v3);
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::Dequeue_(uint64_t a1)
{
  return fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::Pop(a1 + 16);
}

BOOL fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::Empty_(uint64_t a1)
{
  return *(_DWORD *)(a1 + 104) == 0;
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::Clear_(uint64_t result)
{
  *(_DWORD *)(result + 104) = 0;
  return result;
}

_QWORD *fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::~Heap(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::Insert(uint64_t a1, int *a2)
{
  int *v4;
  uint64_t v5;
  unint64_t v6;
  int *v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  int *v15;
  char *v16;
  int v17;
  unint64_t v18;
  char *v19;
  _DWORD *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  int v29;
  unint64_t v30;
  char *v31;
  _DWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  int v41;
  int v42;

  v5 = a1 + 64;
  v4 = *(int **)(a1 + 64);
  v6 = *(int *)(v5 + 24);
  v7 = *(int **)(v5 + 8);
  v8 = v7 - v4;
  if (v8 <= v6)
  {
    v9 = *(_QWORD *)(a1 + 80);
    if ((unint64_t)v7 >= v9)
    {
      if ((v8 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v11 = v9 - (_QWORD)v4;
      v12 = (uint64_t)(v9 - (_QWORD)v4) >> 1;
      if (v12 <= v8 + 1)
        v12 = v8 + 1;
      if (v11 >= 0x7FFFFFFFFFFFFFFCLL)
        v13 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
      {
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 80, v13);
        v4 = *(int **)(a1 + 64);
        v7 = *(int **)(a1 + 72);
      }
      else
      {
        v14 = 0;
      }
      v15 = (int *)&v14[4 * v8];
      v16 = &v14[4 * v13];
      *v15 = *a2;
      v10 = v15 + 1;
      while (v7 != v4)
      {
        v17 = *--v7;
        *--v15 = v17;
      }
      *(_QWORD *)(a1 + 64) = v15;
      *(_QWORD *)(a1 + 72) = v10;
      *(_QWORD *)(a1 + 80) = v16;
      if (v4)
        operator delete(v4);
    }
    else
    {
      *v7 = *a2;
      v10 = v7 + 1;
    }
    v18 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 72) = v10;
    v19 = *(char **)(a1 + 24);
    if ((unint64_t)v19 >= v18)
    {
      v21 = *(char **)(a1 + 16);
      v22 = (v19 - v21) >> 2;
      if ((unint64_t)(v22 + 1) >> 62)
        goto LABEL_53;
      v23 = v18 - (_QWORD)v21;
      v24 = (uint64_t)(v18 - (_QWORD)v21) >> 1;
      if (v24 <= v22 + 1)
        v24 = v22 + 1;
      if (v23 >= 0x7FFFFFFFFFFFFFFCLL)
        v25 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v25 = v24;
      if (v25)
      {
        v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 32, v25);
        v21 = *(char **)(a1 + 16);
        v19 = *(char **)(a1 + 24);
      }
      else
      {
        v26 = 0;
      }
      v27 = &v26[4 * v22];
      v28 = &v26[4 * v25];
      *(_DWORD *)v27 = *(_DWORD *)(a1 + 88);
      v20 = v27 + 4;
      while (v19 != v21)
      {
        v29 = *((_DWORD *)v19 - 1);
        v19 -= 4;
        *((_DWORD *)v27 - 1) = v29;
        v27 -= 4;
      }
      *(_QWORD *)(a1 + 16) = v27;
      *(_QWORD *)(a1 + 24) = v20;
      *(_QWORD *)(a1 + 32) = v28;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *(_DWORD *)v19 = *(_DWORD *)(a1 + 88);
      v20 = v19 + 4;
    }
    v30 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 24) = v20;
    v31 = *(char **)(a1 + 48);
    if ((unint64_t)v31 < v30)
    {
      *(_DWORD *)v31 = *(_DWORD *)(a1 + 88);
      v32 = v31 + 4;
LABEL_51:
      *(_QWORD *)(a1 + 48) = v32;
      goto LABEL_52;
    }
    v33 = *(char **)(a1 + 40);
    v34 = (v31 - v33) >> 2;
    if (!((unint64_t)(v34 + 1) >> 62))
    {
      v35 = v30 - (_QWORD)v33;
      v36 = (uint64_t)(v30 - (_QWORD)v33) >> 1;
      if (v36 <= v34 + 1)
        v36 = v34 + 1;
      if (v35 >= 0x7FFFFFFFFFFFFFFCLL)
        v37 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v37 = v36;
      if (v37)
      {
        v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 56, v37);
        v33 = *(char **)(a1 + 40);
        v31 = *(char **)(a1 + 48);
      }
      else
      {
        v38 = 0;
      }
      v39 = &v38[4 * v34];
      v40 = &v38[4 * v37];
      *(_DWORD *)v39 = *(_DWORD *)(a1 + 88);
      v32 = v39 + 4;
      while (v31 != v33)
      {
        v41 = *((_DWORD *)v31 - 1);
        v31 -= 4;
        *((_DWORD *)v39 - 1) = v41;
        v39 -= 4;
      }
      *(_QWORD *)(a1 + 40) = v39;
      *(_QWORD *)(a1 + 48) = v32;
      *(_QWORD *)(a1 + 56) = v40;
      if (v33)
        operator delete(v33);
      goto LABEL_51;
    }
LABEL_53:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  v4[v6] = *a2;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * *(int *)(*(_QWORD *)(a1 + 40) + 4 * *(int *)(a1 + 88))) = *(_DWORD *)(a1 + 88);
LABEL_52:
  v42 = *(_DWORD *)(a1 + 88);
  *(_DWORD *)(a1 + 88) = v42 + 1;
  return fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::Insert(a1, a2, v42);
}

uint64_t fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::Insert(uint64_t a1, int *a2, int a3)
{
  unsigned int v3;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = a3;
  if (a3 >= 1)
  {
    v6 = *(_QWORD *)(a1 + 64);
    while (1)
    {
      v7 = v3 - 1;
      v8 = (v3 - 1) >> 1;
      if ((fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::operator()(a1 + 8, **(_QWORD **)a1 + 32 * *(int *)(v6 + 4 * v8), **(_QWORD **)a1 + 32 * *a2) & 1) != 0)break;
      v9 = *(_QWORD *)(a1 + 40);
      v10 = *(int *)(v9 + 4 * v3);
      v11 = *(int *)(v9 + 4 * v8);
      *(_DWORD *)(v9 + 4 * v3) = v11;
      v12 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)(v12 + 4 * v11) = v3;
      *(_DWORD *)(v9 + 4 * v8) = v10;
      *(_DWORD *)(v12 + 4 * v10) = v8;
      v6 = *(_QWORD *)(a1 + 64);
      LODWORD(v10) = *(_DWORD *)(v6 + 4 * v3);
      *(_DWORD *)(v6 + 4 * v3) = *(_DWORD *)(v6 + 4 * v8);
      *(_DWORD *)(v6 + 4 * v8) = v10;
      v3 = v7 >> 1;
      if (v7 <= 1)
        return *(unsigned int *)(*(_QWORD *)(a1 + 40) + 4 * (int)v8);
    }
  }
  LODWORD(v8) = v3;
  return *(unsigned int *)(*(_QWORD *)(a1 + 40) + 4 * (int)v8);
}

uint64_t fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::Pop(uint64_t a1)
{
  _DWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_DWORD **)(a1 + 64);
  v2 = *v1;
  v3 = *(int *)(a1 + 88) - 1;
  v4 = *(int **)(a1 + 40);
  v5 = *v4;
  v6 = v4[v3];
  *v4 = v6;
  v7 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)(v7 + 4 * v6) = 0;
  v4[v3] = v5;
  *(_DWORD *)(v7 + 4 * v5) = v3;
  LODWORD(v4) = *v1;
  *v1 = v1[v3];
  v1[v3] = (_DWORD)v4;
  --*(_DWORD *)(a1 + 88);
  fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::Heapify(a1, 0);
  return v2;
}

uint64_t fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::Heapify(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result;
  v4 = result + 8;
  while (1)
  {
    v5 = (2 * (_DWORD)a2) | 1u;
    if ((int)v5 >= *(_DWORD *)(v3 + 88)
      || (result = fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::operator()(v4, **(_QWORD **)v3 + 32 * *(int *)(*(_QWORD *)(v3 + 64) + 4 * (int)v5), **(_QWORD **)v3 + 32 * *(int *)(*(_QWORD *)(v3 + 64) + 4 * (int)a2)), (result & 1) == 0))
    {
      v5 = a2;
    }
    v6 = 2 * a2 + 2;
    if ((signed int)v6 < *(_DWORD *)(v3 + 88))
    {
      result = fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::operator()(v4, **(_QWORD **)v3 + 32 * *(int *)(*(_QWORD *)(v3 + 64) + 4 * (int)v6), **(_QWORD **)v3 + 32 * *(int *)(*(_QWORD *)(v3 + 64) + 4 * (int)v5));
      if ((_DWORD)result)
        v5 = v6;
      else
        v5 = v5;
    }
    if ((_DWORD)v5 == (_DWORD)a2)
      break;
    v7 = *(_QWORD *)(v3 + 40);
    v8 = *(int *)(v7 + 4 * (int)a2);
    v9 = *(int *)(v7 + 4 * (int)v5);
    *(_DWORD *)(v7 + 4 * (int)a2) = v9;
    v10 = *(_QWORD *)(v3 + 16);
    *(_DWORD *)(v10 + 4 * v9) = a2;
    *(_DWORD *)(v7 + 4 * (int)v5) = v8;
    *(_DWORD *)(v10 + 4 * v8) = v5;
    v11 = *(_QWORD *)(v3 + 64);
    LODWORD(v8) = *(_DWORD *)(v11 + 4 * (int)a2);
    *(_DWORD *)(v11 + 4 * (int)a2) = *(_DWORD *)(v11 + 4 * (int)v5);
    *(_DWORD *)(v11 + 4 * (int)v5) = v8;
    a2 = v5;
  }
  return result;
}

uint64_t fst::FifoQueue<int>::~FifoQueue(uint64_t a1)
{
  std::deque<int>::~deque[abi:ne180100]((_QWORD *)(a1 + 16));
  return a1;
}

void fst::FifoQueue<int>::~FifoQueue(uint64_t a1)
{
  std::deque<int>::~deque[abi:ne180100]((_QWORD *)(a1 + 16));
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FifoQueue<int>::Head_(_QWORD *a1)
{
  unint64_t v1;

  v1 = a1[7] + a1[6] - 1;
  return *(unsigned int *)(*(_QWORD *)(a1[3] + ((v1 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v1 & 0x3FF));
}

void fst::FifoQueue<int>::Enqueue_(uint64_t a1, int a2)
{
  int v2;

  v2 = a2;
  std::deque<int>::push_front(a1 + 16, &v2);
}

uint64_t fst::FifoQueue<int>::Dequeue_(uint64_t a1)
{
  --*(_QWORD *)(a1 + 56);
  return std::deque<int>::__maybe_remove_back_spare[abi:ne180100]((_QWORD *)(a1 + 16), 1);
}

BOOL fst::FifoQueue<int>::Empty_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) == 0;
}

uint64_t std::deque<int>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = ((v2 - v3) << 7) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x400)
    a2 = 1;
  if (v5 < 0x800)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

_QWORD *fst::SccQueue<int,fst::QueueBase<int>>::~SccQueue(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E5D22CF0;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  return a1;
}

void fst::SccQueue<int,fst::QueueBase<int>>::~SccQueue(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E5D22CF0;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::SccQueue<int,fst::QueueBase<int>>::Update_(uint64_t a1, int a2)
{
  uint64_t result;

  result = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 8 * *(int *)(**(_QWORD **)(a1 + 24) + 4 * a2));
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t fst::SccQueue<int,fst::QueueBase<int>>::Head(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v2 = *(_DWORD *)(a1 + 32);
  if (v2 <= *(_DWORD *)(a1 + 36))
  {
    while (1)
    {
      v4 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 8 * v2);
      if (v4)
      {
        v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
        v3 = *(_DWORD *)(a1 + 32);
        if ((v5 & 1) != 0)
          goto LABEL_10;
        v6 = v3;
        if (*(_QWORD *)(**(_QWORD **)(a1 + 16) + 8 * v3))
          goto LABEL_11;
      }
      else
      {
        v6 = v2;
        v3 = v2;
      }
      v7 = *(_QWORD *)(a1 + 40);
      if (v6 < (*(_QWORD *)(a1 + 48) - v7) >> 2 && *(_DWORD *)(v7 + 4 * v6) != -1)
        goto LABEL_11;
LABEL_10:
      v2 = v3 + 1;
      *(_DWORD *)(a1 + 32) = v3 + 1;
      if (v3++ >= *(_DWORD *)(a1 + 36))
        goto LABEL_11;
    }
  }
  v3 = *(_DWORD *)(a1 + 32);
LABEL_11:
  v9 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 8 * v3);
  if (v9)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  else
    return *(unsigned int *)(*(_QWORD *)(a1 + 40) + 4 * v3);
}

char *fst::SccQueue<int,fst::QueueBase<int>>::Enqueue(uint64_t a1, uint64_t a2)
{
  int v2;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  char *result;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  int v21;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 32);
  v5 = *(_DWORD *)(a1 + 36);
  v6 = (int)a2;
  v7 = **(_QWORD **)(a1 + 24);
  v8 = *(_DWORD *)(v7 + 4 * (int)a2);
  if (v4 > v5)
  {
    *(_DWORD *)(a1 + 36) = v8;
LABEL_3:
    *(_DWORD *)(a1 + 32) = v8;
    goto LABEL_7;
  }
  if (v8 <= v5)
  {
    if (v8 < v4)
      goto LABEL_3;
  }
  else
  {
    *(_DWORD *)(a1 + 36) = v8;
  }
LABEL_7:
  v9 = *(int *)(v7 + 4 * (int)a2);
  v10 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 8 * v9);
  if (v10)
    return (char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 24))(v10, a2);
  result = *(char **)(a1 + 40);
  v12 = *(char **)(a1 + 48);
  v13 = (v12 - result) >> 2;
  if (v13 <= v9)
  {
    v14 = (_QWORD *)(a1 + 56);
    do
    {
      if ((unint64_t)v12 >= *v14)
      {
        v16 = v13 + 1;
        if ((v13 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v17 = *v14 - (_QWORD)result;
        if (v17 >> 1 > v16)
          v16 = v17 >> 1;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
          v18 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 56, v18);
          result = *(char **)(a1 + 40);
          v12 = *(char **)(a1 + 48);
        }
        else
        {
          v19 = 0;
        }
        v20 = &v19[4 * v13];
        *(_DWORD *)v20 = -1;
        v15 = v20 + 4;
        while (v12 != result)
        {
          v21 = *((_DWORD *)v12 - 1);
          v12 -= 4;
          *((_DWORD *)v20 - 1) = v21;
          v20 -= 4;
        }
        *(_QWORD *)(a1 + 40) = v20;
        *(_QWORD *)(a1 + 48) = v15;
        *(_QWORD *)(a1 + 56) = &v19[4 * v18];
        if (result)
        {
          operator delete(result);
          result = *(char **)(a1 + 40);
        }
        else
        {
          result = v20;
        }
      }
      else
      {
        *(_DWORD *)v12 = -1;
        v15 = v12 + 4;
      }
      *(_QWORD *)(a1 + 48) = v15;
      v13 = (v15 - result) >> 2;
      v9 = *(int *)(**(_QWORD **)(a1 + 24) + 4 * v6);
      v12 = v15;
    }
    while (v13 <= v9);
  }
  *(_DWORD *)&result[4 * v9] = v2;
  return result;
}

uint64_t fst::SccQueue<int,fst::QueueBase<int>>::Dequeue(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(result + 32);
  v2 = *(_QWORD *)(**(_QWORD **)(result + 16) + 8 * v1);
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  v3 = *(_QWORD *)(result + 40);
  if (v1 < (*(_QWORD *)(result + 48) - v3) >> 2)
    *(_DWORD *)(v3 + 4 * v1) = -1;
  return result;
}

uint64_t fst::SccQueue<int,fst::QueueBase<int>>::Empty(uint64_t a1)
{
  int v1;
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_DWORD *)(a1 + 36);
  v2 = *(int *)(a1 + 32);
  if ((int)v2 < v1)
    return 0;
  if ((int)v2 > v1)
    return 1;
  v4 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 8 * v2);
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
  v5 = *(_QWORD *)(a1 + 40);
  if (v2 >= (*(_QWORD *)(a1 + 48) - v5) >> 2)
    return 1;
  return *(_DWORD *)(v5 + 4 * v2) == -1;
}

double fst::SccQueue<int,fst::QueueBase<int>>::Clear(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double result;

  v2 = *(int *)(a1 + 32);
  if ((int)v2 <= *(_DWORD *)(a1 + 36))
  {
    do
    {
      v3 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 8 * v2);
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
      }
      else
      {
        v4 = *(_QWORD *)(a1 + 40);
        if (v2 < (*(_QWORD *)(a1 + 48) - v4) >> 2)
          *(_DWORD *)(v4 + 4 * v2) = -1;
      }
    }
    while ((uint64_t)v2++ < *(int *)(a1 + 36));
  }
  result = NAN;
  *(_QWORD *)(a1 + 32) = 0xFFFFFFFF00000000;
  return result;
}

uint64_t fst::SingleShortestPath<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(uint64_t a1, uint64_t *a2, uint64_t *a3, _DWORD *a4, char **a5)
{
  uint64_t v10;
  uint64_t v11;
  fst *v12;
  _QWORD *v13;
  uint64_t v14;
  fst *v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  int32x2_t v46;
  uint64_t v47;
  __n128 v48;
  _BOOL4 v49;
  void *v50;
  int32x2_t *v51;
  __int32 v52;
  _BOOL4 v53;
  _BYTE *v54;
  int32x2_t *v55;
  int *v56;
  unint64_t v57;
  int *v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  BOOL v65;
  __int32 v66;
  _BOOL4 v67;
  int v68;
  BOOL v69;
  int v70;
  float32x2_t *v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  float32x2_t *v87;
  float v88;
  float v89;
  float32x2_t *v90;
  __n128 v91;
  _BOOL4 v92;
  _BYTE *v93;
  unint64_t v94;
  const void *v95;
  size_t v96;
  float v97;
  float v98;
  float32x2_t *v99;
  int *v100;
  unint64_t v101;
  unint64_t v102;
  int *v103;
  unint64_t v104;
  BOOL v105;
  uint64_t v106;
  int v107;
  int v108;
  int v109;
  int v110;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int *v116;
  unint64_t v117;
  unint64_t v118;
  int *v119;
  unint64_t v120;
  uint64_t v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int *v127;
  unint64_t v128;
  int *v129;
  unint64_t v130;
  uint64_t v131;
  int v132;
  int v133;
  int v134;
  int v135;
  BOOL v136;
  _DWORD *v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  float32x2_t v142;
  void *v143;
  _BYTE *v144;
  uint64_t v145;
  void *__p[2];
  __int128 v147;
  unint64_t v148;
  float32x2_t v149;
  void *__s2;
  _BYTE *v151;
  uint64_t v152;
  float32x2_t v153;
  void *v154;
  void *v155;
  uint64_t v156;
  int32x2_t v157;
  int *v158;
  int *v159;
  uint64_t v160;
  void *v161[3];
  float v162;
  float v163;
  float v164;
  float v165;

  a5[1] = *a5;
  *a4 = -1;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) == -1)
    return 1;
  memset(v161, 0, sizeof(v161));
  v10 = *a3;
  v11 = *((unsigned int *)a3 + 3);
  if ((_DWORD)v11 == -1)
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v157 = vdup_n_s32(0x7F800000u);
  v159 = 0;
  v160 = 0;
  v158 = 0;
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__clear[abi:ne180100](a2);
  (*(void (**)(_QWORD))(**(_QWORD **)(v10 + 16) + 56))(*(_QWORD *)(v10 + 16));
  if (a3[3] != 1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v15 = fst::LogMessage::LogMessage((fst *)&v153, (uint64_t)__p);
    v16 = (_QWORD *)fst::cerr(v15);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"SingleShortestPath: for nshortest > 1, use ShortestPath", 55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" instead", 8);
LABEL_16:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v153);
    if (SBYTE7(v147) < 0)
      operator delete(__p[0]);
    goto LABEL_18;
  }
  LODWORD(__p[0]) = 0;
  LODWORD(__p[0]) = *((_DWORD *)a3 + 10);
  v153.i32[0] = 0;
  v153.i32[0] = *((_DWORD *)a3 + 11);
  v149.i32[0] = 2139095040;
  v142.i32[0] = 2139095040;
  if (*(float *)__p != INFINITY || v153.f32[0] != v142.f32[0] || a3[7] != a3[6] || *((_DWORD *)a3 + 18) != -1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v12 = fst::LogMessage::LogMessage((fst *)&v153, (uint64_t)__p);
    v13 = (_QWORD *)fst::cerr(v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"SingleShortestPath: weight and state thresholds not applicable", 62);
    goto LABEL_16;
  }
  v138 = a3;
  v139 = a1;
  v140 = v10;
  v137 = a4;
  v19 = a2[1];
  if ((int)v11 > (unint64_t)((uint64_t)(v19 - *a2) >> 5))
  {
    v20 = (void *)vdup_n_s32(0x7F800000u);
    do
    {
      __p[0] = v20;
      v147 = 0uLL;
      __p[1] = 0;
      if (v19 >= a2[2])
      {
        v21 = std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>(a2, (uint64_t)__p);
      }
      else
      {
        std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>((uint64_t)a2, (uint64_t)__p);
        v21 = v19 + 32;
      }
      a2[1] = v21;
      if (__p[1])
      {
        *(void **)&v147 = __p[1];
        operator delete(__p[1]);
      }
      LOBYTE(__p[0]) = 0;
      std::vector<BOOL>::push_back((uint64_t)v161, __p);
      v23 = a5[1];
      v22 = (unint64_t)a5[2];
      if ((unint64_t)v23 >= v22)
      {
        v25 = *a5;
        v26 = (v23 - *a5) >> 4;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v28 = v22 - (_QWORD)v25;
        if (v28 >> 3 > v27)
          v27 = v28 >> 3;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0)
          v29 = 0xFFFFFFFFFFFFFFFLL;
        else
          v29 = v27;
        if (v29)
        {
          v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a5 + 2), v29);
          v25 = *a5;
          v23 = a5[1];
        }
        else
        {
          v30 = 0;
        }
        v31 = &v30[16 * v26];
        *(_DWORD *)v31 = -1;
        *((_QWORD *)v31 + 1) = -1;
        v32 = v31;
        if (v23 != v25)
        {
          do
          {
            *((_OWORD *)v32 - 1) = *((_OWORD *)v23 - 1);
            v32 -= 16;
            v23 -= 16;
          }
          while (v23 != v25);
          v25 = *a5;
        }
        v24 = v31 + 16;
        *a5 = v32;
        a5[1] = v31 + 16;
        a5[2] = &v30[16 * v29];
        if (v25)
          operator delete(v25);
      }
      else
      {
        *(_DWORD *)v23 = -1;
        *((_QWORD *)v23 + 1) = -1;
        v24 = v23 + 16;
      }
      a5[1] = v24;
      v19 = a2[1];
    }
    while ((int)v11 > (unint64_t)((uint64_t)(v19 - *a2) >> 5));
  }
  *(_OWORD *)__p = 0u;
  v147 = 0u;
  if (v19 >= a2[2])
  {
    v33 = std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>(a2, (uint64_t)__p);
  }
  else
  {
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>((uint64_t)a2, (uint64_t)__p);
    v33 = v19 + 32;
  }
  a2[1] = v33;
  if (__p[1])
  {
    *(void **)&v147 = __p[1];
    operator delete(__p[1]);
  }
  v34 = (unint64_t)a5[2];
  v35 = a5[1];
  if ((unint64_t)v35 >= v34)
  {
    v37 = *a5;
    v38 = (v35 - *a5) >> 4;
    v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v40 = v34 - (_QWORD)v37;
    if (v40 >> 3 > v39)
      v39 = v40 >> 3;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
      v41 = 0xFFFFFFFFFFFFFFFLL;
    else
      v41 = v39;
    if (v41)
    {
      v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a5 + 2), v41);
      v37 = *a5;
      v35 = a5[1];
    }
    else
    {
      v42 = 0;
    }
    v43 = &v42[16 * v38];
    v44 = &v42[16 * v41];
    *(_DWORD *)v43 = -1;
    *((_QWORD *)v43 + 1) = -1;
    v36 = v43 + 16;
    if (v35 != v37)
    {
      do
      {
        *((_OWORD *)v43 - 1) = *((_OWORD *)v35 - 1);
        v43 -= 16;
        v35 -= 16;
      }
      while (v35 != v37);
      v37 = *a5;
    }
    *a5 = v43;
    a5[1] = v36;
    a5[2] = v44;
    if (v37)
      operator delete(v37);
  }
  else
  {
    *(_DWORD *)v35 = -1;
    *((_QWORD *)v35 + 1) = -1;
    v36 = v35 + 16;
  }
  a5[1] = v36;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v10 + 16) + 24))(*(_QWORD *)(v10 + 16), v11);
  LOBYTE(__p[0]) = 1;
  std::vector<BOOL>::push_back((uint64_t)v161, __p);
  v45 = (uint64_t)(a5 + 2);
  v46 = vdup_n_s32(0x7F800000u);
  do
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v140 + 16) + 48))(*(_QWORD *)(v140 + 16)) & 1) != 0)
      goto LABEL_244;
    v141 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v140 + 16) + 16))(*(_QWORD *)(v140 + 16));
    (*(void (**)(_QWORD))(**(_QWORD **)(v140 + 16) + 32))(*(_QWORD *)(v140 + 16));
    *(_QWORD *)((char *)v161[0] + (((unint64_t)(int)v141 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v141);
    v47 = *a2 + 32 * (int)v141;
    v153 = *(float32x2_t *)v47;
    v155 = 0;
    v156 = 0;
    v154 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v154, *(const void **)(v47 + 8), *(_QWORD *)(v47 + 16), (uint64_t)(*(_QWORD *)(v47 + 16) - *(_QWORD *)(v47 + 8)) >> 2);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v139 + 32))(__p, v139, v141);
    v142.i32[0] = HIDWORD(__p[0]);
    v149.i32[0] = (__int32)__p[0];
    v165 = INFINITY;
    v164 = INFINITY;
    v48.n128_u32[0] = (unsigned __int32)__p[0];
    if (*(float *)__p != INFINITY)
    {
      v49 = 1;
      v50 = __p[1];
      if (!__p[1])
        goto LABEL_76;
LABEL_75:
      *(_QWORD *)&v147 = v50;
      operator delete(v50);
      goto LABEL_76;
    }
    v48.n128_u32[0] = v142.i32[0];
    v50 = __p[1];
    if (v142.f32[0] == v164)
    {
      v49 = (void *)v147 != __p[1];
      if (__p[1])
        goto LABEL_75;
    }
    else
    {
      v49 = 1;
      if (__p[1])
        goto LABEL_75;
    }
LABEL_76:
    if (v49)
    {
      (*(void (**)(float32x2_t *__return_ptr, uint64_t, uint64_t, __n128))(*(_QWORD *)v139 + 32))(&v149, v139, v141, v48);
      fst::Times<fst::LatticeWeightTpl<float>,int>(&v153, &v149, (int32x2_t *)__p);
      if (__s2)
      {
        v151 = __s2;
        operator delete(__s2);
      }
      if ((float)(*(float *)v157.i32 + *(float *)&v157.i32[1]) < (float)(*(float *)__p + *((float *)__p + 1)))
        goto LABEL_80;
      if ((float)(*(float *)v157.i32 + *(float *)&v157.i32[1]) <= (float)(*(float *)__p + *((float *)__p + 1)))
      {
        if (*(float *)v157.i32 < *(float *)__p)
        {
LABEL_80:
          v51 = &v157;
          goto LABEL_86;
        }
        if (*(float *)v157.i32 <= *(float *)__p)
        {
          v56 = v158;
          v57 = (unint64_t)((char *)v159 - (char *)v158) >> 2;
          v58 = (int *)__p[1];
          v59 = ((unint64_t)v147 - (unint64_t)__p[1]) >> 2;
          if ((int)v57 <= (int)v59)
          {
            v51 = &v157;
            if ((int)v57 < 1 || (int)v57 < (int)v59)
            {
LABEL_86:
              v52 = v51->i32[1];
              v149.i32[0] = v51->i32[0];
              v149.i32[1] = v52;
              v151 = 0;
              v152 = 0;
              __s2 = 0;
              std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__s2, *(const void **)&v51[1], *(_QWORD *)&v51[2], (uint64_t)(*(_QWORD *)&v51[2] - *(_QWORD *)&v51[1]) >> 2);
              v165 = *(float *)&v157.i32[1];
              v142.i32[0] = v157.i32[0];
              v163 = v149.f32[1];
              v164 = v149.f32[0];
              if (*(float *)v157.i32 == v149.f32[0])
              {
                v54 = __s2;
                v53 = v165 != v163
                   || (char *)v159 - (char *)v158 != v151 - (_BYTE *)__s2
                   || memcmp(v158, __s2, (char *)v159 - (char *)v158) != 0;
              }
              else
              {
                v53 = 1;
                v54 = __s2;
              }
              if (v54)
              {
                v151 = v54;
                operator delete(v54);
              }
              if (!v53)
              {
LABEL_117:
                v67 = fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Member((uint64_t)&v157);
                if (*((_BYTE *)v138 + 34))
                  v68 = 5;
                else
                  v68 = 0;
                if (*((_BYTE *)v138 + 34))
                  v69 = 0;
                else
                  v69 = v67;
                if (v67)
                  v70 = v68;
                else
                  v70 = 1;
                if (__p[1])
                {
                  *(void **)&v147 = __p[1];
                  operator delete(__p[1]);
                }
                if (!v69)
                  goto LABEL_226;
                goto LABEL_129;
              }
              if ((float)(*(float *)v157.i32 + *(float *)&v157.i32[1]) < (float)(*(float *)__p + *((float *)__p + 1)))
                goto LABEL_96;
              if ((float)(*(float *)v157.i32 + *(float *)&v157.i32[1]) <= (float)(*(float *)__p + *((float *)__p + 1)))
              {
                if (*(float *)v157.i32 < *(float *)__p)
                {
LABEL_96:
                  v55 = &v157;
LABEL_114:
                  v66 = v55->i32[1];
                  v149.i32[0] = v55->i32[0];
                  v149.i32[1] = v66;
                  v151 = 0;
                  v152 = 0;
                  __s2 = 0;
                  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__s2, *(const void **)&v55[1], *(_QWORD *)&v55[2], (uint64_t)(*(_QWORD *)&v55[2] - *(_QWORD *)&v55[1]) >> 2);
                  v157 = (int32x2_t)v149;
                  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v158, (char *)__s2, (uint64_t)v151, (v151 - (_BYTE *)__s2) >> 2);
                  if (__s2)
                  {
                    v151 = __s2;
                    operator delete(__s2);
                  }
                  *v137 = v141;
                  goto LABEL_117;
                }
                if (*(float *)v157.i32 <= *(float *)__p)
                {
                  v127 = v158;
                  v128 = (unint64_t)((char *)v159 - (char *)v158) >> 2;
                  v129 = (int *)__p[1];
                  v130 = ((unint64_t)v147 - (unint64_t)__p[1]) >> 2;
                  if ((int)v128 <= (int)v130)
                  {
                    v55 = &v157;
                    if ((int)v128 < 1 || (int)v128 < (int)v130)
                      goto LABEL_114;
                    v131 = ((unint64_t)((char *)v159 - (char *)v158) >> 2) - 1;
                    while (1)
                    {
                      v133 = *v127++;
                      v132 = v133;
                      v135 = *v129++;
                      v134 = v135;
                      if (v132 < v135)
                        break;
                      v136 = v132 > v134 || v131-- == 0;
                      v55 = &v157;
                      if (v136)
                        goto LABEL_114;
                    }
                  }
                }
              }
              v55 = (int32x2_t *)__p;
              goto LABEL_114;
            }
            v60 = ((unint64_t)((char *)v159 - (char *)v158) >> 2) - 1;
            while (1)
            {
              v62 = *v56++;
              v61 = v62;
              v64 = *v58++;
              v63 = v64;
              if (v61 < v64)
                break;
              v65 = v61 > v63 || v60-- == 0;
              v51 = &v157;
              if (v65)
                goto LABEL_86;
            }
          }
        }
      }
      v51 = (int32x2_t *)__p;
      goto LABEL_86;
    }
LABEL_129:
    v148 = 0;
    (*(void (**)(uint64_t, uint64_t, void **, __n128))(*(_QWORD *)v139 + 136))(v139, v141, __p, v48);
    while (1)
    {
      if (!__p[0])
      {
        if (v148 >= (unint64_t)v147)
        {
LABEL_218:
          v70 = 0;
          goto LABEL_222;
        }
LABEL_135:
        v71 = (float32x2_t *)((char *)__p[1] + 48 * v148);
        goto LABEL_158;
      }
      if (((*(uint64_t (**)(void *))(*(_QWORD *)__p[0] + 24))(__p[0]) & 1) != 0)
        goto LABEL_218;
      if (!__p[0])
        goto LABEL_135;
      v71 = (float32x2_t *)(*(uint64_t (**)(void *))(*(_QWORD *)__p[0] + 32))(__p[0]);
LABEL_158:
      while (1)
      {
        v85 = *a2;
        v84 = a2[1];
        v86 = v71[5].i32[0];
        if (v86 < (uint64_t)(v84 - *a2) >> 5)
          break;
        v149 = (float32x2_t)v46;
        v151 = 0;
        v152 = 0;
        __s2 = 0;
        if (v84 >= a2[2])
        {
          v72 = std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>(a2, (uint64_t)&v149);
        }
        else
        {
          std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>((uint64_t)a2, (uint64_t)&v149);
          v72 = v84 + 32;
        }
        a2[1] = v72;
        if (__s2)
        {
          v151 = __s2;
          operator delete(__s2);
        }
        v149.i8[0] = 0;
        std::vector<BOOL>::push_back((uint64_t)v161, &v149);
        v74 = a5[1];
        v73 = (unint64_t)a5[2];
        if ((unint64_t)v74 >= v73)
        {
          v76 = *a5;
          v77 = (v74 - *a5) >> 4;
          v78 = v77 + 1;
          if ((unint64_t)(v77 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v79 = v73 - (_QWORD)v76;
          if (v79 >> 3 > v78)
            v78 = v79 >> 3;
          if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF0)
            v80 = 0xFFFFFFFFFFFFFFFLL;
          else
            v80 = v78;
          if (v80)
          {
            v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v45, v80);
            v76 = *a5;
            v74 = a5[1];
          }
          else
          {
            v81 = 0;
          }
          v82 = &v81[16 * v77];
          *(_DWORD *)v82 = -1;
          *((_QWORD *)v82 + 1) = -1;
          v83 = v82;
          if (v74 != v76)
          {
            do
            {
              *((_OWORD *)v83 - 1) = *((_OWORD *)v74 - 1);
              v83 -= 16;
              v74 -= 16;
            }
            while (v74 != v76);
            v76 = *a5;
          }
          v75 = v82 + 16;
          *a5 = v83;
          a5[1] = v82 + 16;
          a5[2] = &v81[16 * v80];
          if (v76)
            operator delete(v76);
        }
        else
        {
          *(_DWORD *)v74 = -1;
          *((_QWORD *)v74 + 1) = -1;
          v75 = v74 + 16;
        }
        a5[1] = v75;
      }
      fst::Times<fst::LatticeWeightTpl<float>,int>(&v153, v71 + 1, (int32x2_t *)&v149);
      v87 = (float32x2_t *)(v85 + 32 * v86);
      v88 = v87->f32[0];
      v89 = v87->f32[0] + v87->f32[1];
      v90 = v87;
      if (v89 >= (float)(v149.f32[0] + v149.f32[1]))
      {
        if (v89 > (float)(v149.f32[0] + v149.f32[1]))
          goto LABEL_161;
        v90 = (float32x2_t *)(v85 + 32 * v86);
        if (v88 >= v149.f32[0])
        {
          if (v88 <= v149.f32[0])
          {
            v100 = *(int **)(v85 + 32 * v86 + 8);
            v101 = *(_QWORD *)(v85 + 32 * v86 + 16) - (_QWORD)v100;
            v102 = v101 >> 2;
            v103 = (int *)__s2;
            v104 = (unint64_t)(v151 - (_BYTE *)__s2) >> 2;
            if ((int)(v101 >> 2) <= (int)v104)
            {
              v105 = (int)v102 < 1 || (int)v102 < (int)v104;
              v90 = (float32x2_t *)(v85 + 32 * v86);
              if (v105)
                goto LABEL_163;
              v106 = (v101 >> 2) - 1;
              while (1)
              {
                v108 = *v100++;
                v107 = v108;
                v110 = *v103++;
                v109 = v110;
                if (v107 < v110)
                  break;
                if (v107 > v109 || v106-- == 0)
                {
                  v90 = (float32x2_t *)(v85 + 32 * v86);
                  goto LABEL_163;
                }
              }
            }
          }
LABEL_161:
          v90 = &v149;
        }
      }
LABEL_163:
      v142 = *v90;
      v144 = 0;
      v145 = 0;
      v143 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v143, *(const void **)&v90[1], *(_QWORD *)&v90[2], (uint64_t)(*(_QWORD *)&v90[2] - *(_QWORD *)&v90[1]) >> 2);
      v165 = 0.0;
      v165 = v87->f32[0];
      v164 = 0.0;
      v164 = v87->f32[1];
      v162 = v142.f32[1];
      v163 = v142.f32[0];
      v91.n128_f32[0] = v165;
      if (v165 == v142.f32[0])
      {
        v91.n128_f32[0] = v164;
        v93 = v143;
        v92 = v164 != v162
           || (v94 = v85 + 32 * v86,
               v95 = *(const void **)(v94 + 8),
               v96 = *(_QWORD *)(v94 + 16) - (_QWORD)v95,
               v96 != v144 - (_BYTE *)v143)
           || memcmp(v95, v143, v96) != 0;
      }
      else
      {
        v92 = 1;
        v93 = v143;
      }
      if (v93)
      {
        v144 = v93;
        operator delete(v93);
      }
      if (v92)
        break;
LABEL_201:
      if (__s2)
      {
        v151 = __s2;
        operator delete(__s2);
      }
      v45 = (uint64_t)(a5 + 2);
      if (__p[0])
        (*(void (**)(void *, __n128))(*(_QWORD *)__p[0] + 40))(__p[0], v91);
      else
        ++v148;
    }
    v97 = v87->f32[0];
    v98 = v87->f32[0] + v87->f32[1];
    v99 = (float32x2_t *)(v85 + 32 * v86);
    if (v98 >= (float)(v149.f32[0] + v149.f32[1]))
    {
      if (v98 > (float)(v149.f32[0] + v149.f32[1]))
        goto LABEL_174;
      v99 = (float32x2_t *)(v85 + 32 * v86);
      if (v97 >= v149.f32[0])
      {
        if (v97 <= v149.f32[0])
        {
          v116 = *(int **)(v85 + 32 * v86 + 8);
          v117 = *(_QWORD *)(v85 + 32 * v86 + 16) - (_QWORD)v116;
          v118 = v117 >> 2;
          v119 = (int *)__s2;
          v120 = (unint64_t)(v151 - (_BYTE *)__s2) >> 2;
          if ((int)(v117 >> 2) <= (int)v120)
          {
            v99 = (float32x2_t *)(v85 + 32 * v86);
            if ((int)v118 < 1)
              goto LABEL_190;
            v99 = (float32x2_t *)(v85 + 32 * v86);
            if ((int)v118 < (int)v120)
              goto LABEL_190;
            v121 = (v117 >> 2) - 1;
            while (1)
            {
              v123 = *v116++;
              v122 = v123;
              v125 = *v119++;
              v124 = v125;
              if (v122 < v125)
                break;
              if (v122 > v124 || v121-- == 0)
              {
                v99 = (float32x2_t *)(v85 + 32 * v86);
                goto LABEL_190;
              }
            }
          }
        }
LABEL_174:
        v99 = &v149;
      }
    }
LABEL_190:
    v142 = *v99;
    v144 = 0;
    v145 = 0;
    v143 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v143, *(const void **)&v99[1], *(_QWORD *)&v99[2], (uint64_t)(*(_QWORD *)&v99[2] - *(_QWORD *)&v99[1]) >> 2);
    *v87 = v142;
    if (v87 != &v142)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v85 + 32 * v86 + 8), (char *)v143, (uint64_t)v144, (v144 - (_BYTE *)v143) >> 2);
    if (v143)
    {
      v144 = v143;
      operator delete(v143);
    }
    if (fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Member(v85 + 32 * v86))
    {
      if (__p[0])
        v112 = (*(uint64_t (**)(void *))(*(_QWORD *)__p[0] + 48))(__p[0]);
      else
        v112 = v148;
      v113 = v71[5].i32[0];
      v114 = (uint64_t)&(*a5)[16 * v113];
      *(_DWORD *)v114 = v141;
      *(_QWORD *)(v114 + 8) = v112;
      v115 = **(_QWORD **)(v140 + 16);
      if (((*(_QWORD *)((char *)v161[0] + ((v113 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v113) & 1) != 0)
      {
        (*(void (**)(void))(v115 + 40))();
      }
      else
      {
        (*(void (**)(void))(v115 + 24))();
        *(_QWORD *)((char *)v161[0] + (((unint64_t)v71[5].i32[0] >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v71[5].i32[0];
      }
      goto LABEL_201;
    }
    v45 = (uint64_t)(a5 + 2);
    if (__s2)
    {
      v151 = __s2;
      operator delete(__s2);
    }
    v70 = 1;
LABEL_222:
    if (__p[0])
    {
      (*(void (**)(void *))(*(_QWORD *)__p[0] + 8))(__p[0]);
    }
    else if (*((_QWORD *)&v147 + 1))
    {
      --**((_DWORD **)&v147 + 1);
    }
LABEL_226:
    if (v154)
    {
      v155 = v154;
      operator delete(v154);
    }
  }
  while (!v70);
  if (v70 != 5)
  {
LABEL_18:
    v14 = 0;
    goto LABEL_19;
  }
LABEL_244:
  v14 = 1;
LABEL_19:
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  if (v161[0])
    operator delete(v161[0]);
  return v14;
}

void sub_1AD77C22C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;
  void *v37;
  void *v38;

  v37 = *(void **)(v35 - 168);
  if (v37)
  {
    *(_QWORD *)(v35 - 160) = v37;
    operator delete(v37);
  }
  v38 = *(void **)(v35 - 144);
  if (v38)
    operator delete(v38);
  _Unwind_Resume(exception_object);
}

uint64_t fst::SingleShortestPathBacktrace<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD v19[2];
  void *v20;
  void *v21;
  uint64_t v22;
  int v23;
  _QWORD v24[3];
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  void *__p;
  void *v29;

  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 280))(a2, v8);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 288))(a2, v9);
  if ((_DWORD)a4 != -1)
  {
    v10 = -1;
    v11 = a4;
    LODWORD(v12) = -1;
    while (1)
    {
      v13 = v12;
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
      if (v10 == -1)
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v27, a1, a4);
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 184))(a2, v12, &v27);
        if (__p)
        {
          v29 = __p;
          operator delete(__p);
        }
        goto LABEL_18;
      }
      v26 = 0;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 136))(a1, v11, v24);
      v14 = *(_QWORD *)(*a3 + 16 * v10 + 8);
      if (!v24[0])
        break;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v24[0] + 64))(v24[0], v14);
      if (!v24[0])
      {
        v14 = v26;
        goto LABEL_11;
      }
      v15 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v24[0] + 32))(v24[0]);
LABEL_12:
      v19[0] = *(_QWORD *)v15;
      v19[1] = *(_QWORD *)(v15 + 8);
      v21 = 0;
      v22 = 0;
      v20 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v20, *(const void **)(v15 + 16), *(_QWORD *)(v15 + 24), (uint64_t)(*(_QWORD *)(v15 + 24) - *(_QWORD *)(v15 + 16)) >> 2);
      v23 = v13;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a2 + 208))(a2, v12, v19);
      if (v20)
      {
        v21 = v20;
        operator delete(v20);
      }
      if (v24[0])
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v24[0] + 8))(v24[0]);
      }
      else if (v25)
      {
        --*v25;
      }
LABEL_18:
      v10 = v11;
      v11 = *(unsigned int *)(*a3 + 16 * (int)v11);
      if ((_DWORD)v11 == -1)
        goto LABEL_21;
    }
    v26 = *(_QWORD *)(*a3 + 16 * v10 + 8);
LABEL_11:
    v15 = v24[1] + 48 * v14;
    goto LABEL_12;
  }
  v12 = 0xFFFFFFFFLL;
LABEL_21:
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, v12);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 4, 0))
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v17 = fst::ShortestPathProperties(v16, 0);
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, v17, 0x3FFFFFFF0007);
}

void sub_1AD77C6A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Type()
{
  unsigned __int8 v0;
  uint64_t v2;
  void **v3;
  std::string::size_type v4;
  std::string *v5;
  __int128 v6;
  void *__p[2];
  unsigned __int8 v8;
  std::string v9;
  char __s[2];

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    fst::LatticeWeightTpl<float>::Type();
    std::operator+<char>();
    strcpy(__s, "4");
    std::string::basic_string[abi:ne180100]<0>(__p, __s);
    if ((v8 & 0x80u) == 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    if ((v8 & 0x80u) == 0)
      v4 = v8;
    else
      v4 = (std::string::size_type)__p[1];
    v5 = std::string::append(&v9, (const std::string::value_type *)v3, v4);
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    *(_QWORD *)(v2 + 16) = *((_QWORD *)&v5->__r_.__value_.__l + 2);
    *(_OWORD *)v2 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if ((char)v8 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
    fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Type(void)::type = v2;
  }
  return fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Type(void)::type;
}

void sub_1AD77C814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  MEMORY[0x1AF44D190](v21, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t fst::ShortestDistance<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int32x2_t v6;
  void *__p;
  void *v8;
  uint64_t v9;
  uint64_t v10[3];
  int v11;
  char v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[2];

  v10[0] = a1;
  v10[1] = (uint64_t)a2;
  v10[2] = *(_QWORD *)a3;
  v11 = *(_DWORD *)(a3 + 16);
  v12 = *(_BYTE *)(a3 + 20);
  v13 = 0;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  memset(v17, 0, 29);
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__clear[abi:ne180100](a2);
  fst::ShortestDistanceState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::ShortestDistance(v10, *(_DWORD *)(a3 + 12));
  if (BYTE12(v17[1]))
  {
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__clear[abi:ne180100](a2);
    v6 = vdup_n_s32(0x7FC00000u);
    v8 = 0;
    v9 = 0;
    __p = 0;
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::resize(a2, 1uLL, (uint64_t)&v6);
    if (__p)
    {
      v8 = __p;
      operator delete(__p);
    }
  }
  return fst::ShortestDistanceState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ShortestDistanceState((uint64_t)v10);
}

void sub_1AD77C934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  if (__p)
    operator delete(__p);
  fst::ShortestDistanceState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ShortestDistanceState((uint64_t)&a14);
  _Unwind_Resume(a1);
}

BOOL fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Member(uint64_t a1)
{
  _BOOL8 result;

  result = fst::LatticeWeightTpl<float>::Member((float *)a1);
  if (result)
    return *(float *)a1 != INFINITY || *(float *)(a1 + 4) != INFINITY || *(_QWORD *)(a1 + 8) == *(_QWORD *)(a1 + 16);
  return result;
}

uint64_t fst::Reverse<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  void **v16;
  _BOOL4 v17;
  int v18;
  unsigned int v19;
  __n128 v20;
  _BOOL4 v21;
  int *v22;
  unint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  _BOOL4 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  char v35;
  void **v36;
  int v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void **v50;
  void *v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  float32x2_t v57;
  void *v58;
  void *v59;
  void **v60;
  void *v61;
  _BYTE *v62;
  void **v63;
  void *v64;
  _BYTE *v65;
  void *__p;
  void *v67;
  void *v68;
  void *v69[2];
  __int128 v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  _DWORD *v77;
  unint64_t v78;
  void **p_p;
  void **v80;
  void **v81;
  uint64_t *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;

  (*(void (**)(uint64_t *))(*a2 + 224))(a2);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 280))(a2, v6);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 288))(a2, v7);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0))
  {
    v8 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
    (*(void (**)(uint64_t *, _QWORD))(*a2 + 248))(a2, (v8 + 1));
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v10 = 0;
  v85 = 0;
  v46 = v9;
  if ((a3 & 1) != 0)
    goto LABEL_71;
  LODWORD(v76) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v74);
  v11 = 0xFFFFFFFFLL;
  while (1)
  {
    if (v74)
    {
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 16))(v74);
      v13 = v74;
      if ((v12 & 1) != 0)
        goto LABEL_30;
      if (v74)
      {
        v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 24))(v74);
        goto LABEL_11;
      }
    }
    else if ((int)v76 >= (int)v75)
    {
      goto LABEL_32;
    }
    v14 = v76;
LABEL_11:
    (*(void (**)(void ***__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&p_p, a1, v14);
    LODWORD(v60) = HIDWORD(p_p);
    LODWORD(__p) = (_DWORD)p_p;
    v57.i32[0] = 2139095040;
    LODWORD(v54) = 2139095040;
    v15.n128_u32[0] = p_p;
    if (*(float *)&p_p == INFINITY)
    {
      v15.n128_u32[0] = v60;
      v16 = v80;
      if (*(float *)&v60 == *(float *)&v54)
      {
        v17 = v81 == v80;
        if (!v80)
          goto LABEL_15;
LABEL_14:
        v81 = v16;
        operator delete(v16);
        goto LABEL_15;
      }
      v17 = 0;
      if (v80)
        goto LABEL_14;
    }
    else
    {
      v17 = 0;
      v16 = v80;
      if (v80)
        goto LABEL_14;
    }
LABEL_15:
    v18 = 2 * ((_DWORD)v11 != -1);
    v19 = (_DWORD)v11 == -1 ? v14 : -1;
    if (v17)
    {
      v18 = 4;
      v11 = v11;
    }
    else
    {
      v11 = v19;
    }
    if ((v18 | 4) != 4)
      break;
    if (v74)
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v74 + 32))(v74, v15);
    else
      LODWORD(v76) = v76 + 1;
  }
  v13 = v74;
LABEL_30:
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
LABEL_32:
  if ((_DWORD)v11 != -1)
  {
    (*(void (**)(void ***__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&p_p, a1, v11);
    LODWORD(__p) = HIDWORD(p_p);
    LODWORD(v74) = (_DWORD)p_p;
    LODWORD(v60) = 0;
    v57.i32[0] = 0;
    v20.n128_u32[0] = p_p;
    v21 = *(float *)&p_p != 0.0 || (v20.n128_u32[0] = __p, *(float *)&__p != v57.f32[0]) || v81 != v80;
    if (v80)
    {
      v81 = v80;
      operator delete(v80);
    }
    if (!v21)
    {
      v28 = 0;
      v45 = 0;
      goto LABEL_72;
    }
    __p = 0;
    v67 = 0;
    v68 = 0;
    p_p = &__p;
    v80 = 0;
    v81 = 0;
    v82 = &v85;
    fst::DfsVisit<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(a1, (uint64_t *)&p_p, 0);
    v22 = (int *)__p;
    if (__p != v67)
    {
      v23 = 0;
      do
      {
        v24 = *v22++;
        if (v24 == *((_DWORD *)__p + (int)v11))
          ++v23;
      }
      while (v22 != v67);
      if (v23 > 1)
        goto LABEL_66;
    }
    v78 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 136))(a1, v11, &v74);
    while (2)
    {
      while (2)
      {
        if (v74)
        {
          v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 24))(v74);
          v26 = v74;
          if ((v25 & 1) != 0)
            goto LABEL_60;
          if (v74)
          {
            v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 32))(v74);
            v26 = v74;
            if (*(_DWORD *)(v27 + 40) == (_DWORD)v11)
            {
              v11 = 0xFFFFFFFFLL;
LABEL_60:
              if (v26)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
                goto LABEL_64;
              }
LABEL_62:
              if (v77)
                --*v77;
LABEL_64:
              if ((_DWORD)v11 != -1)
              {
                v10 = 0x2000000000;
                goto LABEL_67;
              }
LABEL_66:
              v10 = 0;
              v11 = 0xFFFFFFFFLL;
LABEL_67:
              if (__p)
              {
                v67 = __p;
                operator delete(__p);
              }
              if ((_DWORD)v11 != -1)
              {
                v45 = v10;
                v28 = 0;
                goto LABEL_72;
              }
              goto LABEL_71;
            }
            if (v74)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v74 + 40))(v74);
              continue;
            }
            goto LABEL_54;
          }
        }
        else if (v78 >= v76)
        {
          goto LABEL_62;
        }
        break;
      }
      if (*(_DWORD *)(v75 + 48 * v78 + 40) == (_DWORD)v11)
      {
        v11 = 0xFFFFFFFFLL;
        goto LABEL_62;
      }
LABEL_54:
      ++v78;
      continue;
    }
  }
  v10 = 0;
LABEL_71:
  v45 = v10;
  v11 = (*(uint64_t (**)(uint64_t *))(*a2 + 200))(a2);
  v28 = 1;
LABEL_72:
  v73 = 0;
  (*(void (**)(uint64_t, uint64_t *, __n128))(*(_QWORD *)a1 + 128))(a1, &v71, v20);
  while (2)
  {
    if (!v71)
    {
      if ((int)v73 >= v72)
        goto LABEL_133;
      goto LABEL_78;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v71 + 16))(v71))
    {
      if (v71)
      {
        v29 = (*(uint64_t (**)(void))(*(_QWORD *)v71 + 24))();
LABEL_79:
        v30 = v29 + v28;
        while ((*(int (**)(uint64_t *))(*a2 + 160))(a2) <= v30)
          (*(void (**)(uint64_t *))(*a2 + 200))(a2);
        if ((_DWORD)v29 == v46)
        {
          *(_OWORD *)v69 = 0u;
          v70 = 0u;
          (*(void (**)(uint64_t *, _QWORD, void **))(*a2 + 184))(a2, (v29 + v28), v69);
          if (v69[1])
          {
            *(void **)&v70 = v69[1];
            operator delete(v69[1]);
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&__p, a1, v29);
        LODWORD(v74) = HIDWORD(__p);
        LODWORD(p_p) = (_DWORD)__p;
        LODWORD(v60) = 2139095040;
        v57.i32[0] = 2139095040;
        v31 = *(float *)&__p != INFINITY || *(float *)&v74 != v57.f32[0] || v68 != v67;
        if ((v28 & v31) == 1)
        {
          fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Reverse(&__p, &v63);
          p_p = 0;
          v80 = v63;
          v82 = 0;
          v83 = 0;
          v81 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v81, v64, (uint64_t)v65, (v65 - (_BYTE *)v64) >> 2);
          v84 = v29 + v28;
          if (v64)
          {
            v65 = v64;
            operator delete(v64);
          }
          (*(void (**)(uint64_t *, _QWORD, void ***))(*a2 + 208))(a2, 0, &p_p);
          if (v81)
          {
            v82 = (uint64_t *)v81;
            operator delete(v81);
          }
        }
        v78 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 136))(a1, v29, &v74);
LABEL_94:
        if (v74)
        {
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v74 + 24))(v74))
          {
            if (v74)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
              goto LABEL_125;
            }
LABEL_123:
            if (v77)
              --*v77;
LABEL_125:
            if (v67)
            {
              v68 = v67;
              operator delete(v67);
            }
            if (v71)
              (*(void (**)(uint64_t))(*(_QWORD *)v71 + 32))(v71);
            else
              ++v73;
            continue;
          }
          if (v74)
          {
            v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 32))(v74);
LABEL_100:
            v33 = *(_DWORD *)(v32 + 40);
            fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Reverse((_QWORD *)(v32 + 8), &v60);
            v34 = (v33 + v28);
            if ((_DWORD)v34 == (_DWORD)v11)
              v35 = v28;
            else
              v35 = 1;
            if ((v35 & 1) == 0)
            {
              (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v54, a1, v11);
              fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Reverse(&v54, &v57);
              fst::Times<fst::LatticeWeightTpl<float>,int>(&v57, (float32x2_t *)&v60, (int32x2_t *)&p_p);
              v60 = p_p;
              std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v61, (char *)v80, (uint64_t)v81, ((char *)v81 - (char *)v80) >> 2);
              if (v80)
              {
                v81 = v80;
                operator delete(v80);
              }
              if (v58)
              {
                v59 = v58;
                operator delete(v58);
              }
              if (v55)
              {
                v56 = v55;
                operator delete(v55);
              }
            }
            v36 = *(void ***)v32;
            v50 = v60;
            v52 = 0;
            v53 = 0;
            v51 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v51, v61, (uint64_t)v62, (v62 - (_BYTE *)v61) >> 2);
            p_p = v36;
            v80 = v50;
            v82 = 0;
            v83 = 0;
            v81 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v81, v51, (uint64_t)v52, (v52 - (_BYTE *)v51) >> 2);
            v84 = v30;
            if (v51)
            {
              v52 = v51;
              operator delete(v51);
            }
            while (1)
            {
              v37 = (*(uint64_t (**)(uint64_t *))(*a2 + 160))(a2);
              v38 = *a2;
              if (v37 > (int)v34)
                break;
              (*(void (**)(uint64_t *))(v38 + 200))(a2);
            }
            (*(void (**)(uint64_t *, uint64_t, void ***))(v38 + 208))(a2, v34, &p_p);
            if (v81)
            {
              v82 = (uint64_t *)v81;
              operator delete(v81);
            }
            if (v61)
            {
              v62 = v61;
              operator delete(v61);
            }
            if (v74)
              (*(void (**)(uint64_t))(*(_QWORD *)v74 + 40))(v74);
            else
              ++v78;
            goto LABEL_94;
          }
        }
        else if (v78 >= v76)
        {
          goto LABEL_123;
        }
        v32 = v75 + 48 * v78;
        goto LABEL_100;
      }
LABEL_78:
      v29 = v73;
      goto LABEL_79;
    }
    break;
  }
  if (v71)
    (*(void (**)(void))(*(_QWORD *)v71 + 8))();
LABEL_133:
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 176))(a2, v11);
  if ((_DWORD)v11 == v46)
    v39 = v28;
  else
    v39 = 1;
  if ((v39 & 1) == 0)
  {
    (*(void (**)(void ***__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(&p_p, a1, v46);
    fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Reverse(&p_p, &v47);
    (*(void (**)(uint64_t *, _QWORD, uint64_t *))(*a2 + 184))(a2, v46, &v47);
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (v80)
    {
      v81 = v80;
      operator delete(v80);
    }
  }
  v40 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  v41 = v85 | v40;
  v42 = (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD))(*a2 + 64))(a2, 0x3FFFFFFF0007, 0) | v45;
  v43 = fst::ReverseProperties(v41, v28);
  return (*(uint64_t (**)(uint64_t *, unint64_t, uint64_t))(*a2 + 192))(a2, v42 | v43, 0x3FFFFFFF0007);
}

void sub_1AD77D3D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::Times<fst::LatticeWeightTpl<float>,int>(float32x2_t *a1@<X0>, float32x2_t *a2@<X1>, int32x2_t *a3@<X8>)
{
  float32x2_t v6;
  std::vector<unsigned int>::pointer begin;
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  float32x2_t v13;
  std::vector<unsigned int> v14;
  float v15;
  int v16;
  float v17;

  v6 = vadd_f32(*a1, *a2);
  v17 = v6.f32[1];
  LODWORD(v14.__begin_) = v6.i32[0];
  v16 = 2139095040;
  v15 = INFINITY;
  if (v6.f32[0] == INFINITY && v17 == v15)
  {
    *a3 = vdup_n_s32(0x7F800000u);
    a3[2] = 0;
    a3[3] = 0;
    a3[1] = 0;
  }
  else
  {
    v13 = v6;
    memset(&v14, 0, sizeof(v14));
    std::vector<int>::resize(&v14, ((uint64_t)(*(_QWORD *)&a2[2] - *(_QWORD *)&a2[1]) >> 2) + ((uint64_t)(*(_QWORD *)&a1[2] - *(_QWORD *)&a1[1]) >> 2));
    begin = v14.__begin_;
    v8 = (_BYTE *)a1[1];
    v9 = (_BYTE *)a1[2];
    v10 = v9 - v8;
    if (v9 != v8)
      memmove(v14.__begin_, v8, v9 - v8);
    v11 = (_BYTE *)a2[1];
    v12 = (_BYTE *)a2[2];
    if (v12 != v11)
      memmove((char *)begin + v10, v11, v12 - v11);
    *a3 = (int32x2_t)v13;
    a3[2] = 0;
    a3[3] = 0;
    a3[1] = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&a3[1], v14.__begin_, (uint64_t)v14.__end_, v14.__end_ - v14.__begin_);
    if (v14.__begin_)
    {
      v14.__end_ = v14.__begin_;
      operator delete(v14.__begin_);
    }
  }
}

void sub_1AD77D6E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Reverse(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::vector<int>::size_type v6;
  std::vector<int>::pointer begin;
  uint64_t v8;
  int *v9;
  std::vector<int>::pointer v10;
  int v11;
  std::vector<int> v12;

  v5 = a1[1];
  v4 = a1[2];
  v6 = (v4 - v5) >> 2;
  std::vector<int>::vector(&v12, v6);
  begin = v12.__begin_;
  if (v4 != v5)
  {
    if (v6 <= 1)
      v8 = 1;
    else
      v8 = (v4 - v5) >> 2;
    v9 = (int *)(a1[1] + 4 * v6 - 4);
    v10 = v12.__begin_;
    do
    {
      v11 = *v9--;
      *v10++ = v11;
      --v8;
    }
    while (v8);
  }
  *a2 = *a1;
  a2[2] = 0;
  a2[3] = 0;
  a2[1] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a2 + 1, begin, (uint64_t)v12.__end_, v12.__end_ - begin);
  if (v12.__begin_)
  {
    v12.__end_ = v12.__begin_;
    operator delete(v12.__begin_);
  }
}

void sub_1AD77D7C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::insert(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v4 = a2;
  v6 = a1[1];
  v9 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v8 = v9;
  if (v6 >= v9)
  {
    v10 = *a1;
    v11 = ((uint64_t)(v6 - *a1) >> 5) + 1;
    if (v11 >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = (a2 - v10) >> 5;
    v13 = v8 - v10;
    v14 = v13 >> 4;
    if (v13 >> 4 <= v11)
      v14 = ((uint64_t)(v6 - *a1) >> 5) + 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0)
      v15 = 0x7FFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    v22 = v7;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v7, v15);
    else
      v16 = 0;
    v18 = v16;
    v19 = &v16[32 * v12];
    v20 = v19;
    v21 = &v16[32 * v15];
    std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::push_back[abi:ne180100](&v18, a3);
    v4 = std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__swap_out_circular_buffer(a1, &v18, v4);
    std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)&v18);
  }
  else if (a2 == v6)
  {
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>((uint64_t)a1, a3);
  }
  else
  {
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__move_range((uint64_t)a1, a2, v6, (char *)(a2 + 32));
    if (v4 <= a3)
      a3 += 32 * (a1[1] > a3);
    fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=(v4, a3);
  }
  return v4;
}

void sub_1AD77D908(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void fst::NShortestPath<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, float32x2_t *a5, int a6, int a7, float a8)
{
  fst *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  int *v35;
  int *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  int *v42;
  char *v43;
  int v44;
  int v45;
  void *v46;
  int *v47;
  int *v48;
  int v49;
  int *v50;
  int *v51;
  __int32 v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  int v56;
  char *v57;
  char *v58;
  unint64_t v59;
  float i;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  int v67;
  _QWORD *v68;
  unint64_t v69;
  uint64_t v70;
  BOOL v71;
  float v72;
  BOOL v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  float32x2_t *v78;
  uint64_t v80;
  float v81;
  BOOL v82;
  float v83;
  const void *v85;
  char *v86;
  void *v87;
  __int32 v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  int *v92;
  uint64_t v93;
  int *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  int *v100;
  int v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  int *v105;
  uint64_t v106;
  int *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  int *v113;
  int v114;
  unint64_t v115;
  unint64_t v116;
  char v117;
  int v118;
  uint64_t *v119[2];
  int v120;
  float v121;
  uint64_t *v122[2];
  int v123;
  float v124;
  int32x2_t v125;
  void *v126;
  void *v127;
  void *v128;
  uint64_t v129;
  int32x2_t v130;
  void *v131;
  _BYTE *v132;
  _QWORD *v133;
  void *v134;
  _BYTE *v135;
  _DWORD *v136;
  unint64_t v137;
  void *__p[5];
  __int32 v139;
  void *v140[2];
  __int128 v141;
  float v142;
  float32x2_t v143;
  void *v144;
  _BYTE *v145;
  uint64_t v146;
  uint64_t *v147[2];
  int v148;
  float v149;
  uint64_t v150;
  _QWORD *v151;
  unint64_t v152;
  float32x2_t v153;
  void *v154;
  _BYTE *v155;
  uint64_t v156;
  int32x2_t v157;
  void *v158;
  void *v159;
  __int128 v160;
  __int128 v161;
  char v162;
  char *v163;
  char *v164;
  char *v165;
  int *v166;
  int *v167;
  char *v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  float v172;

  if (!a4)
    return;
  if (a7 && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, 0x400000000, 1))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v16 = fst::LogMessage::LogMessage((fst *)&v142, (uint64_t)__p);
    v17 = (_QWORD *)fst::cerr(v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"NShortestPath: FST has a cycle and include_final_ties was set to true. This is not currently supported.", 103);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v142);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
    return;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 280))(a2, v18);
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 288))(a2, v19);
  v169 = 0;
  v170 = 0;
  v171 = 0;
  v166 = 0;
  v167 = 0;
  v168 = 0;
  v163 = 0;
  v164 = 0;
  v165 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) == -1)
    goto LABEL_244;
  v21 = *a3;
  v20 = a3[1];
  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) >= (unint64_t)((v20 - v21) >> 5))
    goto LABEL_244;
  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v23 = *a3;
  v24 = *a3 + 32 * v22;
  LODWORD(__p[0]) = 0;
  LODWORD(__p[0]) = *(_DWORD *)v24;
  v142 = 0.0;
  v142 = *(float *)(v24 + 4);
  LODWORD(v133) = 2139095040;
  v125.i32[0] = 2139095040;
  if (*(float *)__p == INFINITY
    && v142 == *(float *)v125.i32
    && *(_QWORD *)(v23 + 32 * v22 + 16) == *(_QWORD *)(v23 + 32 * v22 + 8))
  {
    goto LABEL_244;
  }
  memset(__p, 0, 32);
  v25 = fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::operator()((uint64_t)&v162, (uint64_t)a5, (uint64_t)__p);
  if (a6)
    v26 = v25;
  else
    v26 = 1;
  if (__p[1])
  {
    __p[2] = __p[1];
    operator delete(__p[1]);
  }
  if (v26)
  {
LABEL_244:
    if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 4, 0))
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
    goto LABEL_19;
  }
  v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, v27);
  v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
  v160 = 0u;
  v161 = 0u;
  (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a2 + 184))(a2, v28, &v160);
  v118 = a6;
  if (*((_QWORD *)&v160 + 1))
  {
    *(_QWORD *)&v161 = *((_QWORD *)&v160 + 1);
    operator delete(*((void **)&v160 + 1));
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v170 - v169) >> 3) <= (int)v28)
  {
    v29 = (void *)vdup_n_s32(0x7F800000u);
    do
    {
      LODWORD(__p[0]) = -1;
      __p[1] = v29;
      memset(&__p[2], 0, 24);
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p[2], 0, 0, 0);
      v30 = v170;
      if (v170 >= v171)
      {
        v31 = std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__push_back_slow_path<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>(&v169, (uint64_t)__p);
      }
      else
      {
        std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__construct_one_at_end[abi:ne180100]<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>((uint64_t)&v169, (uint64_t)__p);
        v31 = v30 + 40;
      }
      v170 = v31;
      if (__p[2])
      {
        __p[3] = __p[2];
        operator delete(__p[2]);
        v31 = v170;
      }
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v31 - v169) >> 3) <= (int)v28);
  }
  LODWORD(__p[0]) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  memset(&__p[1], 0, 32);
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p[2], 0, 0, 0);
  v32 = v169;
  v33 = v169 + 40 * (int)v28;
  *(_DWORD *)v33 = __p[0];
  *(void **)(v33 + 8) = __p[1];
  if ((void **)(v33 + 8) != &__p[1])
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v32 + 40 * (int)v28 + 16), (char *)__p[2], (uint64_t)__p[3], ((char *)__p[3] - (char *)__p[2]) >> 2);
  if (__p[2])
  {
    __p[3] = __p[2];
    operator delete(__p[2]);
  }
  v34 = v167;
  if (v167 >= (int *)v168)
  {
    v36 = v166;
    v37 = v167 - v166;
    v38 = v37 + 1;
    if ((unint64_t)(v37 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v39 = v168 - (char *)v166;
    if ((v168 - (char *)v166) >> 1 > v38)
      v38 = v39 >> 1;
    if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
      v40 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v40 = v38;
    if (v40)
    {
      v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v168, v40);
      v36 = v166;
      v34 = v167;
    }
    else
    {
      v41 = 0;
    }
    v42 = (int *)&v41[4 * v37];
    v43 = &v41[4 * v40];
    *v42 = v28;
    v35 = v42 + 1;
    while (v34 != v36)
    {
      v44 = *--v34;
      *--v42 = v44;
    }
    v166 = v42;
    v167 = v35;
    v168 = v43;
    if (v36)
      operator delete(v36);
  }
  else
  {
    *v167 = v28;
    v35 = v34 + 1;
  }
  v167 = v35;
  v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  fst::Times<fst::LatticeWeightTpl<float>,int>((float32x2_t *)(*a3 + 32 * v45), a5, &v157);
  v117 = 0;
  v154 = 0;
  v155 = 0;
  v156 = 0;
  v150 = 0;
  v151 = 0;
  v152 = 0;
  v46 = (void *)vdup_n_s32(0x7F800000u);
  do
  {
    v47 = v166;
    v48 = v167;
    if (v166 == v167)
      break;
    v147[0] = &v169;
    v147[1] = a3;
    v148 = -1;
    v149 = a8;
    if ((char *)v167 - (char *)v166 >= 5)
    {
      v49 = *v166;
      v50 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>> &,std::__wrap_iter<int *>>(v166, v147, (unint64_t)((char *)v167 - (char *)v166) >> 2);
      v51 = v48 - 1;
      if (v48 - 1 == v50)
      {
        *v50 = v49;
      }
      else
      {
        *v50 = *v51;
        *v51 = v49;
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>> &,std::__wrap_iter<int *>>((uint64_t)v47, (uint64_t)(v50 + 1), v147, v50 + 1 - v47);
      }
    }
    v52 = *(v167 - 1);
    v53 = v169 + 40 * v52;
    v142 = *(float *)v53;
    v143 = *(float32x2_t *)(v53 + 8);
    v145 = 0;
    v146 = 0;
    v144 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v144, *(const void **)(v53 + 16), *(_QWORD *)(v53 + 24), (uint64_t)(*(_QWORD *)(v53 + 24) - *(_QWORD *)(v53 + 16)) >> 2);
    --v167;
    if (v142 == NAN)
    {
      *(_OWORD *)v140 = 0u;
      v141 = 0u;
    }
    else if (SLODWORD(v142) >= (unint64_t)((a3[1] - *a3) >> 5))
    {
      v140[0] = v46;
      v141 = 0uLL;
      v140[1] = 0;
    }
    else
    {
      v54 = *a3 + 32 * SLODWORD(v142);
      v140[0] = *(void **)v54;
      v141 = 0uLL;
      v140[1] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v140[1], *(const void **)(v54 + 8), *(_QWORD *)(v54 + 16), (uint64_t)(*(_QWORD *)(v54 + 16) - *(_QWORD *)(v54 + 8)) >> 2);
    }
    fst::Times<fst::LatticeWeightTpl<float>,int>((float32x2_t *)v140, &v143, (int32x2_t *)__p);
    if ((fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::operator()((uint64_t)&v162, (uint64_t)&v157, (uint64_t)__p) & 1) != 0)
    {
      v55 = __p[1];
      if (__p[1])
      {
        __p[2] = __p[1];
        goto LABEL_225;
      }
      goto LABEL_226;
    }
    if (v118 == -1)
    {
      if (__p[1])
      {
        __p[2] = __p[1];
        operator delete(__p[1]);
      }
    }
    else
    {
      v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 160))(a2);
      if (__p[1])
      {
        __p[2] = __p[1];
        operator delete(__p[1]);
      }
      if (v56 >= v118)
        goto LABEL_226;
    }
    v57 = v163;
    v58 = v164;
    v59 = (v164 - v163) >> 2;
    for (i = v142; v59 <= SLODWORD(v142) + 1; v58 = v61)
    {
      if (v58 >= v165)
      {
        v62 = v59 + 1;
        if ((v59 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v63 = v165 - v57;
        if ((v165 - v57) >> 1 > v62)
          v62 = v63 >> 1;
        if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL)
          v64 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v64 = v62;
        if (v64)
        {
          v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v165, v64);
          v57 = v163;
          v58 = v164;
        }
        else
        {
          v65 = 0;
        }
        v66 = &v65[4 * v59];
        *(_DWORD *)v66 = 0;
        v61 = v66 + 4;
        while (v58 != v57)
        {
          v67 = *((_DWORD *)v58 - 1);
          v58 -= 4;
          *((_DWORD *)v66 - 1) = v67;
          v66 -= 4;
        }
        v163 = v66;
        v164 = v61;
        v165 = &v65[4 * v64];
        if (v57)
        {
          operator delete(v57);
          v57 = v163;
        }
        else
        {
          v57 = v66;
        }
      }
      else
      {
        *(_DWORD *)v58 = 0;
        v61 = v58 + 4;
      }
      v164 = v61;
      v59 = (v61 - v57) >> 2;
      i = v142;
    }
    if ((a7 & 1) != 0)
    {
      v68 = v151;
      v69 = LODWORD(i) + 1;
      if (v69 >= ((uint64_t)v151 - v150) >> 5)
      {
        do
        {
          __p[0] = v46;
          memset(&__p[1], 0, 24);
          if ((unint64_t)v68 >= v152)
          {
            v68 = (_QWORD *)std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>(&v150, (uint64_t)__p);
          }
          else
          {
            *v68 = v46;
            v68[2] = 0;
            v68[3] = 0;
            v68[1] = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v68 + 1, __p[1], (uint64_t)__p[2], ((char *)__p[2] - (char *)__p[1]) >> 2);
            v68 += 4;
          }
          v151 = v68;
          if (__p[1])
          {
            __p[2] = __p[1];
            operator delete(__p[1]);
            v68 = v151;
          }
          v69 = SLODWORD(v142) + 1;
        }
        while (v69 >= ((uint64_t)v68 - v150) >> 5);
        v57 = v163;
      }
    }
    else
    {
      v69 = LODWORD(i) + 1;
    }
    ++*(_DWORD *)&v57[4 * v69];
    v70 = LODWORD(v142);
    if (v142 == NAN)
    {
      if ((v117 & 1) != 0)
      {
        v71 = v153.f32[0] == v143.f32[0] && v153.f32[1] == v143.f32[1];
        v72 = vabds_f32(v153.f32[0] + v153.f32[1], v143.f32[0] + v143.f32[1]);
        v73 = !v71 && v72 > 0.00097656;
        if (v73 || v155 - (_BYTE *)v154 != v145 - (_BYTE *)v144 || memcmp(v154, v144, v155 - (_BYTE *)v154))
        {
          v74 = 1;
          v117 = 1;
          goto LABEL_227;
        }
      }
      v75 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
      memset(__p, 0, sizeof(__p));
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p[2], 0, 0, 0);
      v139 = v52;
      (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a2 + 208))(a2, v75, __p);
      if (__p[2])
      {
        __p[3] = __p[2];
        operator delete(__p[2]);
      }
      v70 = LODWORD(v142);
    }
    if ((v117 & 1) != 0)
      goto LABEL_125;
    if ((_DWORD)v70 == -1)
    {
      v74 = *(int *)v163 == a4;
      if (*(_DWORD *)v163 != a4 || a7 == 0)
      {
        v117 = 0;
        goto LABEL_227;
      }
      v153 = v143;
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v154, (char *)v144, (uint64_t)v145, (v145 - (_BYTE *)v144) >> 2);
      v70 = LODWORD(v142);
LABEL_125:
      v117 = 1;
      if ((_DWORD)v70 == -1)
        goto LABEL_226;
      goto LABEL_129;
    }
    v117 = 0;
LABEL_129:
    v76 = (int)v70 + 1;
    v77 = *(int *)&v163[4 * v76];
    if (a7)
    {
      if (v77 == a4)
      {
        v78 = (float32x2_t *)(v150 + 32 * v76);
        *v78 = v143;
        if (v78 != &v143)
        {
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v78[1], (char *)v144, (uint64_t)v145, (v145 - (_BYTE *)v144) >> 2);
          v70 = LODWORD(v142);
        }
      }
      else if (v77 > a4)
      {
        v80 = v150 + 32 * v76;
        v81 = *(float *)(v80 + 4);
        v82 = v143.f32[0] == *(float *)v80 && v143.f32[1] == v81;
        v83 = vabds_f32(v143.f32[0] + v143.f32[1], *(float *)v80 + v81);
        if (!v82 && v83 > 0.00097656)
          goto LABEL_226;
        v85 = *(const void **)(v80 + 8);
        if (v145 - (_BYTE *)v144 != *(_QWORD *)(v80 + 16) - (_QWORD)v85 || memcmp(v144, v85, v145 - (_BYTE *)v144))
          goto LABEL_226;
      }
    }
    else if (v77 > a4)
    {
      goto LABEL_226;
    }
    v137 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD **))(*(_QWORD *)a1 + 136))(a1, v70, &v133);
    while (1)
    {
      if (!v133)
      {
        if (v137 >= (unint64_t)v135)
          goto LABEL_190;
        goto LABEL_157;
      }
      if ((*(unsigned int (**)(_QWORD *))(*v133 + 24))(v133))
        break;
      if (v133)
      {
        v86 = (char *)(*(uint64_t (**)(void))(*v133 + 32))();
        goto LABEL_158;
      }
LABEL_157:
      v86 = (char *)v134 + 48 * v137;
LABEL_158:
      v87 = *(void **)v86;
      fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Reverse((_QWORD *)v86 + 1, &v125);
      v88 = *((_DWORD *)v86 + 10);
      __p[0] = v87;
      __p[1] = (void *)v125;
      memset(&__p[2], 0, 24);
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p[2], v126, (uint64_t)v127, ((_BYTE *)v127 - (_BYTE *)v126) >> 2);
      v139 = v88;
      if (v126)
      {
        v127 = v126;
        operator delete(v126);
      }
      fst::Times<fst::LatticeWeightTpl<float>,int>(&v143, (float32x2_t *)&__p[1], &v130);
      v89 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
      v125.i32[0] = v139;
      v126 = (void *)v130;
      v128 = 0;
      v129 = 0;
      v127 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v127, v131, (uint64_t)v132, (v132 - (_BYTE *)v131) >> 2);
      v90 = v170;
      if (v170 >= v171)
      {
        v91 = std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__push_back_slow_path<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>(&v169, (uint64_t)&v125);
      }
      else
      {
        std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__construct_one_at_end[abi:ne180100]<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>((uint64_t)&v169, (uint64_t)&v125);
        v91 = v90 + 40;
      }
      v170 = v91;
      if (v127)
      {
        v128 = v127;
        operator delete(v127);
      }
      v139 = v52;
      (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a2 + 208))(a2, v89, __p);
      v92 = v167;
      if (v167 >= (int *)v168)
      {
        v94 = v166;
        v95 = v167 - v166;
        v96 = v95 + 1;
        if ((unint64_t)(v95 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v97 = v168 - (char *)v166;
        if ((v168 - (char *)v166) >> 1 > v96)
          v96 = v97 >> 1;
        if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFFCLL)
          v98 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v98 = v96;
        if (v98)
        {
          v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v168, v98);
          v94 = v166;
          v92 = v167;
        }
        else
        {
          v99 = 0;
        }
        v100 = (int *)&v99[4 * v95];
        *v100 = v89;
        v93 = (uint64_t)(v100 + 1);
        while (v92 != v94)
        {
          v101 = *--v92;
          *--v100 = v101;
        }
        v166 = v100;
        v167 = (int *)v93;
        v168 = &v99[4 * v98];
        if (v94)
          operator delete(v94);
      }
      else
      {
        *v167 = v89;
        v93 = (uint64_t)(v92 + 1);
      }
      v167 = (int *)v93;
      v122[0] = &v169;
      v122[1] = a3;
      v123 = -1;
      v124 = a8;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>> &,std::__wrap_iter<int *>>((uint64_t)v166, v93, v122, (v93 - (uint64_t)v166) >> 2);
      if (v131)
      {
        v132 = v131;
        operator delete(v131);
      }
      if (__p[2])
      {
        __p[3] = __p[2];
        operator delete(__p[2]);
      }
      if (v133)
        (*(void (**)(_QWORD *))(*v133 + 40))(v133);
      else
        ++v137;
    }
    if (v133)
    {
      (*(void (**)(void))(*v133 + 8))();
      goto LABEL_192;
    }
LABEL_190:
    if (v136)
      --*v136;
LABEL_192:
    (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(__p, a1, LODWORD(v142));
    fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Reverse(__p, &v133);
    if (__p[1])
    {
      __p[2] = __p[1];
      operator delete(__p[1]);
    }
    v125.i32[0] = HIDWORD(v133);
    LODWORD(__p[0]) = (_DWORD)v133;
    v130.i32[0] = 2139095040;
    v172 = INFINITY;
    if (*(float *)&v133 != INFINITY || *(float *)v125.i32 != v172 || (v55 = v135, v135 != v134))
    {
      fst::Times<fst::LatticeWeightTpl<float>,int>(&v143, (float32x2_t *)&v133, &v125);
      v102 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
      LODWORD(__p[0]) = -1;
      __p[1] = (void *)v125;
      memset(&__p[2], 0, 24);
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p[2], v126, (uint64_t)v127, ((_BYTE *)v127 - (_BYTE *)v126) >> 2);
      v103 = v170;
      if (v170 >= v171)
      {
        v104 = std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__push_back_slow_path<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>(&v169, (uint64_t)__p);
      }
      else
      {
        std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__construct_one_at_end[abi:ne180100]<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>((uint64_t)&v169, (uint64_t)__p);
        v104 = v103 + 40;
      }
      v170 = v104;
      if (__p[2])
      {
        __p[3] = __p[2];
        operator delete(__p[2]);
      }
      __p[0] = 0;
      __p[1] = v133;
      memset(&__p[2], 0, 24);
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p[2], v134, (uint64_t)v135, (v135 - (_BYTE *)v134) >> 2);
      v139 = v52;
      (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a2 + 208))(a2, v102, __p);
      if (__p[2])
      {
        __p[3] = __p[2];
        operator delete(__p[2]);
      }
      v105 = v167;
      if (v167 >= (int *)v168)
      {
        v107 = v166;
        v108 = v167 - v166;
        v109 = v108 + 1;
        if ((unint64_t)(v108 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v110 = v168 - (char *)v166;
        if ((v168 - (char *)v166) >> 1 > v109)
          v109 = v110 >> 1;
        if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFFCLL)
          v111 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v111 = v109;
        if (v111)
        {
          v112 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v168, v111);
          v107 = v166;
          v105 = v167;
        }
        else
        {
          v112 = 0;
        }
        v113 = (int *)&v112[4 * v108];
        *v113 = v102;
        v106 = (uint64_t)(v113 + 1);
        while (v105 != v107)
        {
          v114 = *--v105;
          *--v113 = v114;
        }
        v166 = v113;
        v167 = (int *)v106;
        v168 = &v112[4 * v111];
        if (v107)
          operator delete(v107);
      }
      else
      {
        *v167 = v102;
        v106 = (uint64_t)(v105 + 1);
      }
      v167 = (int *)v106;
      v119[0] = &v169;
      v119[1] = a3;
      v120 = -1;
      v121 = a8;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>> &,std::__wrap_iter<int *>>((uint64_t)v166, v106, v119, (v106 - (uint64_t)v166) >> 2);
      if (v126)
      {
        v127 = v126;
        operator delete(v126);
      }
      v55 = v134;
    }
    if (v55)
    {
      v135 = v55;
LABEL_225:
      operator delete(v55);
    }
LABEL_226:
    v74 = 0;
LABEL_227:
    if (v140[1])
    {
      *(void **)&v141 = v140[1];
      operator delete(v140[1]);
    }
    if (v144)
    {
      v145 = v144;
      operator delete(v144);
    }
  }
  while (!v74);
  fst::Connect<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 4, 0))
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
  v115 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v116 = fst::ShortestPathProperties(v115, 0);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, v116, 0x3FFFFFFF0007);
  __p[0] = &v150;
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v154)
  {
    v155 = v154;
    operator delete(v154);
  }
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
LABEL_19:
  if (v163)
  {
    v164 = v163;
    operator delete(v163);
  }
  if (v166)
  {
    v167 = v166;
    operator delete(v166);
  }
  __p[0] = &v169;
  std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1AD77EA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,void *__p,uint64_t a42)
{
  uint64_t v42;
  void *v44;
  void *v45;

  if (__p)
  {
    a42 = (uint64_t)__p;
    operator delete(__p);
  }
  v44 = *(void **)(v42 - 208);
  if (v44)
  {
    *(_QWORD *)(v42 - 200) = v44;
    operator delete(v44);
  }
  v45 = *(void **)(v42 - 184);
  if (v45)
  {
    *(_QWORD *)(v42 - 176) = v45;
    operator delete(v45);
  }
  a39 = (void *)(v42 - 160);
  std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a39);
  _Unwind_Resume(a1);
}

_QWORD *fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~DeterminizeFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D27318;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

_QWORD *fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~VectorFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D24CC0;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

_QWORD *std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = *(_QWORD *)a2;
  v3[2] = 0;
  v3[3] = 0;
  v3[1] = 0;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v3 + 1, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  *(_QWORD *)(a1 + 8) = v3 + 4;
  return result;
}

void sub_1AD77EE34(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[32 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[32 * v9];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  *((_QWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 3) = 0;
  *((_QWORD *)v11 + 1) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)v11 + 1, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  v15 += 32;
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1AD77EF24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  v15 = 0;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v10 = *(_QWORD *)(v9 - 32);
      v9 -= 32;
      *(_QWORD *)(v7 - 24) = 0;
      v11 = (_QWORD *)(v7 - 24);
      *(v11 - 1) = v10;
      v11[1] = 0;
      v11[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v11, *(const void **)(v9 + 8), *(_QWORD *)(v9 + 16), (uint64_t)(*(_QWORD *)(v9 + 16) - *(_QWORD *)(v9 + 8)) >> 2);
      v7 = *((_QWORD *)&v17 + 1) - 32;
      *((_QWORD *)&v17 + 1) -= 32;
    }
    while (v9 != a5);
    v12 = v17;
  }
  v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

void sub_1AD77F064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 + 8);
    if (v3)
    {
      *(_QWORD *)(v1 + 16) = v3;
      operator delete(v3);
    }
    v1 += 32;
  }
}

uint64_t std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    *(_QWORD *)(a1 + 16) = v2 - 32;
    v5 = *(void **)(v2 - 24);
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

uint64_t fst::LatticeWeightTpl<float>::Type()
{
  unsigned __int8 v0;
  _QWORD *v2;

  {
    v2 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v2, "lattice4");
    fst::LatticeWeightTpl<float>::Type(void)::type = (uint64_t)v2;
  }
  return fst::LatticeWeightTpl<float>::Type(void)::type;
}

void sub_1AD77F22C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

void fst::ShortestDistanceState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::ShortestDistance(uint64_t *a1, int a2)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  int32x2_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  _QWORD *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  int32x2_t v31;
  int v32;
  uint64_t *v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  BOOL v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, _QWORD, int32x2_t *);
  char v45;
  int32x2_t v46;
  float32x2_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  unint64_t i;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  int v65;
  __int32 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  float v75;
  float v76;
  int32x2_t *v77;
  float v78;
  BOOL v79;
  uint64_t v80;
  BOOL v81;
  _BYTE *v82;
  uint64_t v83;
  const void *v84;
  size_t v85;
  int v86;
  int v87;
  float v88;
  float v89;
  int32x2_t *v90;
  uint64_t v91;
  int *v92;
  unint64_t v93;
  unint64_t v94;
  int *v95;
  unint64_t v96;
  BOOL v97;
  uint64_t v98;
  int v99;
  int v100;
  int v101;
  int v102;
  uint64_t v104;
  float v105;
  float v106;
  int32x2_t *v107;
  uint64_t v108;
  int *v109;
  unint64_t v110;
  unint64_t v111;
  int *v112;
  unint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int *v120;
  unint64_t v121;
  unint64_t v122;
  int *v123;
  unint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  int v129;
  _BYTE *v131;
  int32x2_t v132;
  void *v133;
  _BYTE *v134;
  uint64_t v135;
  int32x2_t v136;
  void *v137;
  _BYTE *v138;
  uint64_t v139;
  int32x2_t v140;
  void *__p;
  void *v142;
  _DWORD *v143;
  unint64_t v144;
  float32x2_t v145;
  void *v146;
  void *v147;
  uint64_t v148;
  float v149;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a1 + 24))(*a1) == -1)
  {
    if (!(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*a1 + 64))(*a1, 4, 0))
      return;
    v131 = (char *)a1 + 116;
LABEL_209:
    *v131 = 1;
    return;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 56))(*(_QWORD *)(a1[2] + 16));
  if (!*((_BYTE *)a1 + 33))
  {
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__clear[abi:ne180100]((uint64_t *)a1[1]);
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__clear[abi:ne180100](a1 + 5);
    a1[9] = 0;
  }
  if (a2 == -1)
    a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 24))(*a1);
  v4 = a2;
  v5 = (uint64_t *)a1[1];
  v6 = v5 + 1;
  v7 = *v5;
  if (a2 >= (unint64_t)((v5[1] - *v5) >> 5))
  {
    v8 = vdup_n_s32(0x7F800000u);
    do
    {
      v140 = v8;
      v142 = 0;
      v143 = 0;
      __p = 0;
      v9 = v5[1];
      if (v9 >= v5[2])
      {
        v10 = std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>(v5, (uint64_t)&v140);
      }
      else
      {
        std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>((uint64_t)v5, (uint64_t)&v140);
        v10 = v9 + 32;
      }
      *v6 = v10;
      if (__p)
      {
        v142 = __p;
        operator delete(__p);
      }
      v140 = v8;
      v142 = 0;
      v143 = 0;
      __p = 0;
      v11 = a1[6];
      if (v11 >= a1[7])
      {
        v12 = std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>(a1 + 5, (uint64_t)&v140);
      }
      else
      {
        std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>((uint64_t)(a1 + 5), (uint64_t)&v140);
        v12 = v11 + 32;
      }
      a1[6] = v12;
      if (__p)
      {
        v142 = __p;
        operator delete(__p);
      }
      v140.i8[0] = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &v140);
      v5 = (uint64_t *)a1[1];
      v6 = v5 + 1;
      v7 = *v5;
    }
    while (a2 >= (unint64_t)((v5[1] - *v5) >> 5));
  }
  if (*((_BYTE *)a1 + 33))
  {
    v13 = (char *)a1[11];
    v14 = (char *)a1[12];
    v15 = (v14 - v13) >> 2;
    if (v15 <= a2)
    {
      v16 = a1 + 13;
      do
      {
        if ((unint64_t)v14 >= *v16)
        {
          v18 = v15 + 1;
          if ((v15 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v19 = *v16 - (_QWORD)v13;
          if (v19 >> 1 > v18)
            v18 = v19 >> 1;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
            v20 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v20);
            v13 = (char *)a1[11];
            v14 = (char *)a1[12];
          }
          else
          {
            v21 = 0;
          }
          v22 = &v21[4 * v15];
          *(_DWORD *)v22 = -1;
          v17 = v22 + 4;
          while (v14 != v13)
          {
            v23 = *((_DWORD *)v14 - 1);
            v14 -= 4;
            *((_DWORD *)v22 - 1) = v23;
            v22 -= 4;
          }
          a1[11] = (uint64_t)v22;
          a1[12] = (uint64_t)v17;
          a1[13] = (uint64_t)&v21[4 * v20];
          if (v13)
          {
            operator delete(v13);
            v13 = (char *)a1[11];
          }
          else
          {
            v13 = v22;
          }
        }
        else
        {
          *(_DWORD *)v14 = -1;
          v17 = v14 + 4;
        }
        a1[12] = (uint64_t)v17;
        v15 = (v17 - v13) >> 2;
        v14 = v17;
      }
      while (v15 <= a2);
      v7 = *(_QWORD *)a1[1];
    }
    *(_DWORD *)&v13[4 * a2] = *((_DWORD *)a1 + 28);
  }
  v24 = v7 + 32 * a2;
  *(_QWORD *)v24 = 0;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v24 + 8), 0, 0, 0);
  v25 = a1 + 5;
  v26 = a1[5] + 32 * v4;
  *(_QWORD *)v26 = 0;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v26 + 8), 0, 0, 0);
  v27 = a1 + 8;
  v28 = *(uint64_t **)(a1[2] + 16);
  v29 = *v28;
  *(_QWORD *)(a1[8] + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v4;
  (*(void (**)(uint64_t *, unint64_t))(v29 + 24))(v28, v4);
  v30 = a1 + 13;
  v131 = (char *)a1 + 116;
  v31 = vdup_n_s32(0x7F800000u);
  do
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 48))(*(_QWORD *)(a1[2] + 16)) & 1) != 0)
    {
LABEL_208:
      ++*((_DWORD *)a1 + 28);
      if (!(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*a1 + 64))(*a1, 4, 0))
        return;
      goto LABEL_209;
    }
    v32 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 16))(*(_QWORD *)(a1[2] + 16));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 32))(*(_QWORD *)(a1[2] + 16));
    while (1)
    {
      v33 = (uint64_t *)a1[1];
      v34 = v33 + 1;
      if (v32 < (unint64_t)((v33[1] - *v33) >> 5))
        break;
      v140 = v31;
      v142 = 0;
      v143 = 0;
      __p = 0;
      v35 = v33[1];
      if (v35 >= v33[2])
      {
        v36 = std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>(v33, (uint64_t)&v140);
      }
      else
      {
        std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>((uint64_t)v33, (uint64_t)&v140);
        v36 = v35 + 32;
      }
      *v34 = v36;
      if (__p)
      {
        v142 = __p;
        operator delete(__p);
      }
      v140 = v31;
      v142 = 0;
      v143 = 0;
      __p = 0;
      v37 = a1[6];
      if (v37 >= a1[7])
      {
        v38 = std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>(a1 + 5, (uint64_t)&v140);
      }
      else
      {
        std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>((uint64_t)(a1 + 5), (uint64_t)&v140);
        v38 = v37 + 32;
      }
      a1[6] = v38;
      if (__p)
      {
        v142 = __p;
        operator delete(__p);
      }
      v140.i8[0] = 0;
      std::vector<BOOL>::push_back((uint64_t)v27, &v140);
    }
    if (*((_BYTE *)a1 + 32))
    {
      (*(void (**)(int32x2_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)*a1 + 32))(&v140, *a1, v32);
      v136.i32[0] = v140.i32[1];
      v145.i32[0] = v140.i32[0];
      v132.i32[0] = 2139095040;
      v149 = INFINITY;
      if (*(float *)v140.i32 == INFINITY)
      {
        v40 = __p;
        if (*(float *)v136.i32 == v149)
        {
          v39 = v142 != __p;
          if (!__p)
          {
LABEL_64:
            if (v39)
              goto LABEL_208;
            goto LABEL_65;
          }
        }
        else
        {
          v39 = 1;
          if (!__p)
            goto LABEL_64;
        }
      }
      else
      {
        v39 = 1;
        v40 = __p;
        if (!__p)
          goto LABEL_64;
      }
      v142 = v40;
      operator delete(v40);
      goto LABEL_64;
    }
LABEL_65:
    *(_QWORD *)(*v27 + (((unint64_t)v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v32);
    v41 = *v25 + 32 * v32;
    v145 = *(float32x2_t *)v41;
    v147 = 0;
    v148 = 0;
    v146 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v146, *(const void **)(v41 + 8), *(_QWORD *)(v41 + 16), (uint64_t)(*(_QWORD *)(v41 + 16) - *(_QWORD *)(v41 + 8)) >> 2);
    v42 = *v25 + 32 * v32;
    *(int32x2_t *)v42 = v31;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v42 + 8), 0, 0, 0);
    v43 = *a1;
    v44 = *(void (**)(uint64_t, _QWORD, int32x2_t *))(*(_QWORD *)*a1 + 136);
    v144 = 0;
    v44(v43, v32, &v140);
    while (1)
    {
      if (!*(_QWORD *)&v140)
      {
        if (v144 >= (unint64_t)v142)
        {
          v86 = 10;
          goto LABEL_196;
        }
        goto LABEL_71;
      }
      v45 = (*(uint64_t (**)(int32x2_t))(**(_QWORD **)&v140 + 24))(v140);
      v46 = v140;
      if ((v45 & 1) != 0)
        break;
      if (v140)
      {
        v47 = (float32x2_t *)(*(uint64_t (**)(void))(**(_QWORD **)&v140 + 32))();
        goto LABEL_72;
      }
LABEL_71:
      v47 = (float32x2_t *)((char *)__p + 48 * v144);
LABEL_72:
      v48 = (uint64_t *)a1[1];
      v49 = v48 + 1;
      for (i = v47[5].i32[0]; i >= (v48[1] - *v48) >> 5; i = v47[5].i32[0])
      {
        v136 = v31;
        v138 = 0;
        v139 = 0;
        v137 = 0;
        v51 = v48[1];
        if (v51 >= v48[2])
        {
          v52 = std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>(v48, (uint64_t)&v136);
        }
        else
        {
          std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>((uint64_t)v48, (uint64_t)&v136);
          v52 = v51 + 32;
        }
        *v49 = v52;
        if (v137)
        {
          v138 = v137;
          operator delete(v137);
        }
        v136 = v31;
        v138 = 0;
        v139 = 0;
        v137 = 0;
        v53 = a1[6];
        if (v53 >= a1[7])
        {
          v54 = std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>(a1 + 5, (uint64_t)&v136);
        }
        else
        {
          std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>((uint64_t)(a1 + 5), (uint64_t)&v136);
          v54 = v53 + 32;
        }
        a1[6] = v54;
        if (v137)
        {
          v138 = v137;
          operator delete(v137);
        }
        v136.i8[0] = 0;
        std::vector<BOOL>::push_back((uint64_t)v27, &v136);
        v48 = (uint64_t *)a1[1];
        v49 = v48 + 1;
      }
      if (*((_BYTE *)a1 + 33))
      {
        v55 = (char *)a1[11];
        v56 = (char *)a1[12];
        v57 = (v56 - v55) >> 2;
        if (v57 <= (int)i)
        {
          do
          {
            if ((unint64_t)v56 >= *v30)
            {
              v60 = v57 + 1;
              if ((v57 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v61 = *v30 - (_QWORD)v55;
              if (v61 >> 1 > v60)
                v60 = v61 >> 1;
              if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
                v62 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v62 = v60;
              if (v62)
              {
                v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v30, v62);
                v55 = (char *)a1[11];
                v56 = (char *)a1[12];
              }
              else
              {
                v63 = 0;
              }
              v64 = &v63[4 * v57];
              *(_DWORD *)v64 = -1;
              v59 = v64 + 4;
              while (v56 != v55)
              {
                v65 = *((_DWORD *)v56 - 1);
                v56 -= 4;
                *((_DWORD *)v64 - 1) = v65;
                v64 -= 4;
              }
              a1[11] = (uint64_t)v64;
              a1[12] = (uint64_t)v59;
              a1[13] = (uint64_t)&v63[4 * v62];
              if (v55)
              {
                operator delete(v55);
                v55 = (char *)a1[11];
              }
              else
              {
                v55 = v64;
              }
            }
            else
            {
              *(_DWORD *)v56 = -1;
              v59 = v56 + 4;
            }
            a1[12] = (uint64_t)v59;
            v57 = (v59 - v55) >> 2;
            v66 = v47[5].i32[0];
            v56 = v59;
          }
          while (v57 <= v66);
          v58 = v66;
          v48 = (uint64_t *)a1[1];
          LODWORD(i) = v47[5].i32[0];
        }
        else
        {
          v58 = (int)i;
        }
        if (*(_DWORD *)&v55[4 * v58] != *((_DWORD *)a1 + 28))
        {
          v67 = *v48 + 32 * v58;
          *(int32x2_t *)v67 = v31;
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v67 + 8), 0, 0, 0);
          v68 = *v25 + 32 * v47[5].i32[0];
          *(int32x2_t *)v68 = v31;
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v68 + 8), 0, 0, 0);
          v48 = (uint64_t *)a1[1];
          v69 = a1[11];
          v70 = *((_DWORD *)a1 + 28);
          v71 = v47[5].i32[0];
          *(_QWORD *)(a1[8] + ((v71 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v71);
          *(_DWORD *)(v69 + 4 * v71) = v70;
          LODWORD(i) = v47[5].i32[0];
        }
      }
      v72 = *v48;
      v73 = *v25;
      fst::Times<fst::LatticeWeightTpl<float>,int>(&v145, v47 + 1, &v136);
      v74 = v72 + 32 * (int)i;
      v75 = *(float *)v74;
      v76 = *(float *)v74 + *(float *)(v74 + 4);
      v77 = (int32x2_t *)v74;
      if (v76 >= (float)(*(float *)v136.i32 + *(float *)&v136.i32[1]))
      {
        if (v76 > (float)(*(float *)v136.i32 + *(float *)&v136.i32[1]))
          goto LABEL_110;
        v77 = (int32x2_t *)(v72 + 32 * (int)i);
        if (v75 >= *(float *)v136.i32)
        {
          if (v75 > *(float *)v136.i32)
            goto LABEL_110;
          v92 = *(int **)(v72 + 32 * (int)i + 8);
          v93 = *(_QWORD *)(v72 + 32 * (int)i + 16) - (_QWORD)v92;
          v94 = v93 >> 2;
          v95 = (int *)v137;
          v96 = (unint64_t)(v138 - (_BYTE *)v137) >> 2;
          if ((int)(v93 >> 2) > (int)v96)
            goto LABEL_110;
          v97 = (int)v94 < 1 || (int)v94 < (int)v96;
          v77 = (int32x2_t *)(v72 + 32 * (int)i);
          if (!v97)
          {
            v98 = (v93 >> 2) - 1;
            while (1)
            {
              v100 = *v92++;
              v99 = v100;
              v102 = *v95++;
              v101 = v102;
              if (v99 < v102)
                break;
              if (v99 > v101 || v98-- == 0)
              {
                v77 = (int32x2_t *)(v72 + 32 * (int)i);
                goto LABEL_112;
              }
            }
LABEL_110:
            v77 = &v136;
          }
        }
      }
LABEL_112:
      v132 = *v77;
      v134 = 0;
      v135 = 0;
      v133 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v133, *(const void **)&v77[1], *(_QWORD *)&v77[2], (uint64_t)(*(_QWORD *)&v77[2] - *(_QWORD *)&v77[1]) >> 2);
      v78 = *(float *)(v74 + 4);
      v79 = *(float *)v74 == *(float *)v132.i32 && v78 == *(float *)&v132.i32[1];
      if (v79 || vabds_f32(*(float *)v74 + v78, *(float *)v132.i32 + *(float *)&v132.i32[1]) <= *((float *)a1 + 7))
      {
        v80 = (int)i;
        v83 = v72 + 32 * (int)i;
        v84 = *(const void **)(v83 + 8);
        v85 = *(_QWORD *)(v83 + 16) - (_QWORD)v84;
        v82 = v133;
        if (v85 != v134 - (_BYTE *)v133)
        {
          v81 = 0;
          if (!v133)
            goto LABEL_124;
LABEL_123:
          v134 = v82;
          operator delete(v82);
          goto LABEL_124;
        }
        v81 = memcmp(v84, v133, v85) == 0;
        if (v82)
          goto LABEL_123;
      }
      else
      {
        v80 = (int)i;
        v81 = 0;
        v82 = v133;
        if (v133)
          goto LABEL_123;
      }
LABEL_124:
      if (v81)
      {
        v86 = 0;
        v87 = 1;
        v30 = a1 + 13;
        v27 = a1 + 8;
        goto LABEL_161;
      }
      v88 = *(float *)v74;
      v89 = *(float *)v74 + *(float *)(v74 + 4);
      v90 = (int32x2_t *)v74;
      v91 = v80;
      if (v89 >= (float)(*(float *)v136.i32 + *(float *)&v136.i32[1]))
      {
        if (v89 > (float)(*(float *)v136.i32 + *(float *)&v136.i32[1]))
          goto LABEL_128;
        v90 = (int32x2_t *)v74;
        if (v88 >= *(float *)v136.i32)
        {
          if (v88 > *(float *)v136.i32)
            goto LABEL_128;
          v109 = *(int **)(v72 + 32 * v80 + 8);
          v110 = *(_QWORD *)(v72 + 32 * v80 + 16) - (_QWORD)v109;
          v111 = v110 >> 2;
          v112 = (int *)v137;
          v113 = (unint64_t)(v138 - (_BYTE *)v137) >> 2;
          if ((int)(v110 >> 2) > (int)v113)
            goto LABEL_128;
          v90 = (int32x2_t *)v74;
          if ((int)v111 >= 1)
          {
            v90 = (int32x2_t *)v74;
            if ((int)v111 >= (int)v113)
            {
              v114 = (v110 >> 2) - 1;
              while (1)
              {
                v116 = *v109++;
                v115 = v116;
                v118 = *v112++;
                v117 = v118;
                if (v115 < v118)
                  break;
                if (v115 > v117 || v114-- == 0)
                {
                  v90 = (int32x2_t *)v74;
                  goto LABEL_144;
                }
              }
LABEL_128:
              v90 = &v136;
            }
          }
        }
      }
LABEL_144:
      v132 = *v90;
      v134 = 0;
      v135 = 0;
      v133 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v133, *(const void **)&v90[1], *(_QWORD *)&v90[2], (uint64_t)(*(_QWORD *)&v90[2] - *(_QWORD *)&v90[1]) >> 2);
      *(int32x2_t *)v74 = v132;
      v27 = a1 + 8;
      if ((int32x2_t *)v74 != &v132)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v72 + 32 * v91 + 8), (char *)v133, (uint64_t)v134, (v134 - (_BYTE *)v133) >> 2);
      if (v133)
      {
        v134 = v133;
        operator delete(v133);
      }
      v104 = v73 + 32 * v91;
      v105 = *(float *)v104;
      v106 = *(float *)v104 + *(float *)(v104 + 4);
      v107 = (int32x2_t *)v104;
      if (v106 < (float)(*(float *)v136.i32 + *(float *)&v136.i32[1]))
        goto LABEL_152;
      if (v106 <= (float)(*(float *)v136.i32 + *(float *)&v136.i32[1]))
      {
        v107 = (int32x2_t *)(v73 + 32 * v91);
        if (v105 < *(float *)v136.i32)
          goto LABEL_152;
        if (v105 <= *(float *)v136.i32)
        {
          v120 = *(int **)(v73 + 32 * v91 + 8);
          v121 = *(_QWORD *)(v73 + 32 * v91 + 16) - (_QWORD)v120;
          v122 = v121 >> 2;
          v123 = (int *)v137;
          v124 = (unint64_t)(v138 - (_BYTE *)v137) >> 2;
          if ((int)(v121 >> 2) <= (int)v124)
          {
            v107 = (int32x2_t *)(v73 + 32 * v91);
            if ((int)v122 < 1)
              goto LABEL_152;
            v107 = (int32x2_t *)(v73 + 32 * v91);
            if ((int)v122 < (int)v124)
              goto LABEL_152;
            v125 = (v121 >> 2) - 1;
            while (1)
            {
              v127 = *v120++;
              v126 = v127;
              v129 = *v123++;
              v128 = v129;
              if (v126 < v129)
                break;
              if (v126 > v128 || v125-- == 0)
              {
                v107 = (int32x2_t *)(v73 + 32 * v91);
                goto LABEL_152;
              }
            }
          }
        }
      }
      v107 = &v136;
LABEL_152:
      v132 = *v107;
      v134 = 0;
      v135 = 0;
      v133 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v133, *(const void **)&v107[1], *(_QWORD *)&v107[2], (uint64_t)(*(_QWORD *)&v107[2] - *(_QWORD *)&v107[1]) >> 2);
      *(int32x2_t *)v104 = v132;
      if ((int32x2_t *)v104 != &v132)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v73 + 32 * v91 + 8), (char *)v133, (uint64_t)v134, (v134 - (_BYTE *)v133) >> 2);
      if (v133)
      {
        v134 = v133;
        operator delete(v133);
      }
      v30 = a1 + 13;
      if (fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Member(v74)
        && fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Member(v104))
      {
        v108 = **(_QWORD **)(a1[2] + 16);
        if (((*(_QWORD *)(a1[8] + (((unint64_t)v47[5].i32[0] >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v47[5].i32[0]) & 1) != 0)
        {
          (*(void (**)(void))(v108 + 40))();
          v86 = 0;
          v87 = 1;
        }
        else
        {
          (*(void (**)(void))(v108 + 24))();
          v86 = 0;
          v87 = 1;
          *(_QWORD *)(a1[8] + (((unint64_t)v47[5].i32[0] >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v47[5].i32[0];
        }
      }
      else
      {
        v87 = 0;
        v86 = 1;
        *v131 = 1;
      }
LABEL_161:
      if (v137)
      {
        v138 = v137;
        operator delete(v137);
      }
      v46 = v140;
      if (!v87)
        goto LABEL_193;
      if (v140)
        (*(void (**)(void))(**(_QWORD **)&v140 + 40))();
      else
        ++v144;
    }
    v86 = 10;
LABEL_193:
    if (v46)
    {
      (*(void (**)(int32x2_t))(**(_QWORD **)&v46 + 8))(v46);
      goto LABEL_198;
    }
LABEL_196:
    if (v143)
      --*v143;
LABEL_198:
    if (v86 == 10)
      v86 = 0;
    if (v146)
    {
      v147 = v146;
      operator delete(v146);
    }
  }
  while (!v86);
}

void sub_1AD77FFE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  void *v29;

  v29 = *(void **)(v27 - 136);
  if (v29)
  {
    *(_QWORD *)(v27 - 128) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::resize(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v4 = a1[1];
  v5 = (v4 - *a1) >> 5;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      v6 = *a1 + 32 * a2;
      while (v4 != v6)
      {
        v7 = *(void **)(v4 - 24);
        if (v7)
        {
          *(_QWORD *)(v4 - 16) = v7;
          operator delete(v7);
        }
        v4 -= 32;
      }
      a1[1] = v6;
    }
  }
  else
  {
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__append(a1, a2 - v5, a3);
  }
}

_QWORD *std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__append(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  _QWORD *v23;

  v8 = a1[2];
  result = a1 + 2;
  v7 = v8;
  v9 = *(result - 1);
  if (a2 <= (v8 - v9) >> 5)
  {
    if (a2)
    {
      v16 = (_QWORD *)(v9 + 8);
      v17 = 32 * a2;
      v18 = v9 + 32 * a2;
      do
      {
        *(v16 - 1) = *(_QWORD *)a3;
        v16[1] = 0;
        v16[2] = 0;
        *v16 = 0;
        result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v16, *(const void **)(a3 + 8), *(_QWORD *)(a3 + 16), (uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 2);
        v16 += 4;
        v17 -= 32;
      }
      while (v17);
    }
    else
    {
      v18 = *(result - 1);
    }
    a1[1] = v18;
  }
  else
  {
    v10 = v9 - *a1;
    v11 = a2 + (v10 >> 5);
    if (v11 >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 5;
    v13 = v7 - *a1;
    if (v13 >> 4 > v11)
      v11 = v13 >> 4;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0)
      v14 = 0x7FFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    v23 = result;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)result, v14);
    else
      v15 = 0;
    v19 = v15;
    v20 = &v15[32 * v12];
    v21 = v20;
    v22 = &v15[32 * v14];
    std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_at_end(&v19, a2, a3);
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__swap_out_circular_buffer(a1, &v19);
    return (_QWORD *)std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)&v19);
  }
  return result;
}

void sub_1AD780268(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_at_end(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;

  v3 = result;
  v4 = result[2];
  if (a2)
  {
    v6 = (_QWORD *)(v4 + 8);
    v7 = 32 * a2;
    v4 += 32 * a2;
    do
    {
      *(v6 - 1) = *(_QWORD *)a3;
      v6[1] = 0;
      v6[2] = 0;
      *v6 = 0;
      result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v6, *(const void **)(a3 + 8), *(_QWORD *)(a3 + 16), (uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 2);
      v6 += 4;
      v7 -= 32;
    }
    while (v7);
  }
  v3[2] = v4;
  return result;
}

void sub_1AD780304(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2 - 8;
  _Unwind_Resume(a1);
}

uint64_t fst::ShortestDistanceState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ShortestDistanceState(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v5;

  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 64);
  if (v3)
    operator delete(v3);
  v5 = (void **)(a1 + 40);
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100](&v5);
  return a1;
}

BOOL fst::LatticeWeightTpl<float>::Member(float *a1)
{
  float v1;
  float v2;
  BOOL v4;
  _BOOL8 result;

  v1 = *a1;
  v2 = a1[1];
  v4 = v2 == -INFINITY || v1 == -INFINITY;
  result = 0;
  if (!v4)
  {
    if (v1 != INFINITY && v2 != INFINITY)
      return 1;
    if (v1 == INFINITY && v2 == INFINITY)
      return 1;
  }
  return result;
}

_QWORD *fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::VectorFst(_QWORD *a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::VectorFstImpl(v2);
  *a1 = &unk_1E5D27F70;
  a1[1] = v2;
  return a1;
}

void sub_1AD780414(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~VectorFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D24CC0;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 88);
}

_QWORD *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2);
  *a3 = *(_QWORD *)v3;
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a3 + 1, *(const void **)(v3 + 8), *(_QWORD *)(v3 + 16), (uint64_t)(*(_QWORD *)(v3 + 16) - *(_QWORD *)(v3 + 8)) >> 2);
}

unint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::NumArcs(uint64_t a1, int a2)
{
  return 0xAAAAAAAAAAAAAAABLL
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 56)
                  - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 48)) >> 4);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 32);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

void fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  fst::ArcBuffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetFromFst<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(a3, a1, a2, a4, 2);
}

_QWORD *fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Copy(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  ++*(_DWORD *)(v3 + 56);
  *result = &unk_1E5D27F70;
  result[1] = v3;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(_QWORD *)(v2 + 72) - *(_QWORD *)(v2 + 64)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::InitArcIterator(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;

  v3 = *(_QWORD *)(result + 8);
  *a3 = 0;
  v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 8 * a2) + 48);
  v4 = *v5;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v5[1] - *v5) >> 4);
  if (v5[1] == *v5)
    v4 = 0;
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::IsMemoryMapped()
{
  return 0;
}

uint64_t fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::NumStates(uint64_t a1)
{
  return (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64)) >> 3;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  int v6;

  if (a1 != a2)
  {
    v4 = operator new();
    fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::VectorFstImpl(v4, a2);
    v5 = *(_DWORD **)(a1 + 8);
    if (v5)
    {
      v6 = v5[14] - 1;
      v5[14] = v6;
      if (!v6)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  return a1;
}

void sub_1AD780748(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

unint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetStart(uint64_t a1, int a2)
{
  uint64_t v4;
  unint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 88) = a2;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_QWORD *)(v4 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(_QWORD *)(v4 + 8) & 4;
  return result;
}

void fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetFinal(uint64_t a1, int a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  v7 = *a3;
  v9 = 0;
  v10 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)a3[1], a3[2], (a3[2] - a3[1]) >> 2);
  fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::SetFinal(v6, a2, (uint64_t)&v7);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
}

void sub_1AD780854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = a3 & 4;
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), v6);
  if (result != (v6 & a2))
    result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MutateCheck(a1);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::AddState(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MutateCheck(a1);
  v2 = *(_QWORD **)(a1 + 8);
  v3 = fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2) & 0x2AFFFFFF0007;
  return v3;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::AddArc(uint64_t a1, int a2, float *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MutateCheck(a1);
  return fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::AddArc(*(_QWORD **)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::DeleteStates(uint64_t a1, char **a2)
{
  _QWORD *v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MutateCheck(a1);
  v4 = *(_QWORD **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::DeleteStates((uint64_t)v4, a2);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0x6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::DeleteStates(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MutateCheck(a1);
  v2 = *(_QWORD **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::DeleteStates((uint64_t)v2);
  result = (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2);
  v2[1] = (*((_DWORD *)v2 + 2) | result) & 4 | 0x156A5A950003;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::DeleteArcs(*(_QWORD **)(v6[8] + 8 * a2), a3);
  result = (*(uint64_t (**)(_QWORD *))(*v6 + 24))(v6);
  v6[1] = v6[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::DeleteArcs(uint64_t a1, int a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MutateCheck(a1);
  v4 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD **)(v4[8] + 8 * a2);
  v5[4] = 0;
  v5[5] = 0;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__clear[abi:ne180100](v5 + 6);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0xA6A5A950007;
  return result;
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MutateCheck(a1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(*(_QWORD *)(a1 + 8) + 64), a2);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MutateCheck(a1);
  return std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::reserve((uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 48), a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MutableInputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MutableOutputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v4 + 40);
  if (result != a2)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    else
      result = 0;
    *(_QWORD *)(v4 + 40) = result;
  }
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v4 + 48);
  if (result != a2)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    else
      result = 0;
    *(_QWORD *)(v4 + 48) = result;
  }
  return result;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::InitMutableArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_1E5D21030;
  v6[3] = 0;
  result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MutateCheck(a1);
  v8 = *(_QWORD *)(a1 + 8);
  v6[1] = *(_QWORD *)(*(_QWORD *)(v8 + 64) + 8 * a2);
  v6[2] = v8 + 8;
  *a3 = v6;
  return result;
}

void sub_1AD780D30(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::VectorFstImpl(uint64_t a1)
{
  std::string *v2;
  std::string __str;

  *(_QWORD *)a1 = &unk_1E5D22630;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)a1 = &unk_1E5D1CD60;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x156A5A950003;
  return a1;
}

void sub_1AD780E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  if (a15 < 0)
    operator delete(__p);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  _QWORD *v2;
  unint64_t v3;

  *a1 = &unk_1E5D1FB60;
  v2 = (_QWORD *)a1[9];
  if (v2 != (_QWORD *)a1[8])
  {
    v3 = 0;
    v2 = (_QWORD *)a1[8];
    do
    {
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Destroy(v2[v3++]);
      v2 = (_QWORD *)a1[8];
    }
    while (v3 < (uint64_t)(a1[9] - (_QWORD)v2) >> 3);
  }
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~FstImpl((uint64_t)a1);
}

void fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~VectorFstImpl(_QWORD *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Properties(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) & a2;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

void fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~FstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~FstImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E5D22630;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Destroy(uint64_t a1)
{
  void *v2;
  void **v3;

  if (a1)
  {
    v3 = (void **)(a1 + 48);
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v2 = *(void **)(a1 + 8);
    if (v2)
    {
      *(_QWORD *)(a1 + 16) = v2;
      operator delete(v2);
    }
    operator delete((void *)a1);
  }
}

void std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 48)
  {
    v4 = *(void **)(i - 32);
    if (v4)
    {
      *(_QWORD *)(i - 24) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Write(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1AD78114C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1AD78122C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::operator=(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  void *__p[2];
  char v6;
  char v7;

  if (FLAGS_fst_error_fatal)
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  else
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ImplToFst: Assignment operator disallowed", 41);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) |= 4uLL;
  return a1;
}

void sub_1AD78132C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MutateCheck(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  if (*(int *)(*(_QWORD *)(result + 8) + 56) >= 2)
  {
    v1 = result;
    v2 = operator new();
    fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::VectorFstImpl(v2, v1);
    result = *(_QWORD *)(v1 + 8);
    if (result)
    {
      v3 = *(_DWORD *)(result + 56) - 1;
      *(_DWORD *)(result + 56) = v3;
      if (!v3)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    *(_QWORD *)(v1 + 8) = v2;
  }
  return result;
}

void sub_1AD7813DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  std::string __p;
  _DWORD *v19;
  std::string::size_type v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  int v25;
  unsigned int v26;

  *(_QWORD *)a1 = &unk_1E5D22630;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  v5 = (uint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 64) = 0;
  v6 = (_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)a1 = &unk_1E5D1CD60;
  std::string::basic_string[abi:ne180100]<0>(&__p, "vector");
  std::string::operator=(v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v8 = *v5;
  if (*v5 != v7)
  {
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v7)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    else
      v9 = 0;
    *v5 = v9;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v11 = *(_QWORD *)(a1 + 48);
  if (v11 != v10)
  {
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (v10)
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    else
      v12 = 0;
    *(_QWORD *)(a1 + 48) = v12;
  }
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 1, 0))
  {
    v13 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2);
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 64), v13);
  }
  v26 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v24);
  while (1)
  {
    if (!v24)
    {
      if ((int)v26 >= v25)
        goto LABEL_47;
LABEL_25:
      v14 = v26;
      goto LABEL_26;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24))
      break;
    if (!v24)
      goto LABEL_25;
    v14 = (*(uint64_t (**)(void))(*(_QWORD *)v24 + 24))();
LABEL_26:
    fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::AddState((_QWORD *)a1);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(&v21, a2, v14);
    fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::SetFinal(a1, v14, &v21);
    if (v22)
    {
      v23 = v22;
      operator delete(v22);
    }
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v14);
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::reserve((uint64_t *)(*(_QWORD *)(*v6 + 8 * (int)v14) + 48), v15);
    v20 = 0;
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)a2 + 136))(a2, v14, &__p);
    while (1)
    {
      if (!__p.__r_.__value_.__r.__words[0])
      {
        if (v20 >= __p.__r_.__value_.__r.__words[2])
          goto LABEL_40;
LABEL_34:
        v16 = (_DWORD *)(__p.__r_.__value_.__l.__size_ + 48 * v20);
        goto LABEL_35;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 24))(__p.__r_.__value_.__r.__words[0]))
        break;
      if (!__p.__r_.__value_.__r.__words[0])
        goto LABEL_34;
      v16 = (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 32))();
LABEL_35:
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::AddArc(*(_QWORD **)(*v6 + 8 * (int)v14), v16);
      if (__p.__r_.__value_.__r.__words[0])
        (*(void (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 40))(__p.__r_.__value_.__r.__words[0]);
      else
        ++v20;
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_42;
    }
LABEL_40:
    if (v19)
      --*v19;
LABEL_42:
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
    else
      ++v26;
  }
  if (v24)
    (*(void (**)(void))(*(_QWORD *)v24 + 8))();
LABEL_47:
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0004, 0) | *(_QWORD *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_1AD7817B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  _QWORD *v21;

  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~VectorFstBaseImpl(v21);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::AddState(_QWORD *a1)
{
  char *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v2 = (char *)operator new(0x48uLL);
  v3 = a1[10];
  *(int32x2_t *)v2 = vdup_n_s32(0x7F800000u);
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  v4 = (_QWORD *)a1[9];
  if ((unint64_t)v4 >= v3)
  {
    v6 = a1[8];
    v7 = ((uint64_t)v4 - v6) >> 3;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v8 = v3 - v6;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    if (v10)
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 10), v10);
    else
      v11 = 0;
    v12 = &v11[8 * v7];
    v13 = &v11[8 * v10];
    *(_QWORD *)v12 = v2;
    v5 = v12 + 8;
    v15 = (char *)a1[8];
    v14 = (char *)a1[9];
    if (v14 != v15)
    {
      do
      {
        v16 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *((_QWORD *)v12 - 1) = v16;
        v12 -= 8;
      }
      while (v14 != v15);
      v14 = (char *)a1[8];
    }
    a1[8] = v12;
    a1[9] = v5;
    a1[10] = v13;
    if (v14)
      operator delete(v14);
  }
  else
  {
    *v4 = v2;
    v5 = v4 + 1;
  }
  a1[9] = v5;
  return (((unint64_t)v5 - a1[8]) >> 3) - 1;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::SetFinal(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  void *__p;
  _BYTE *v6;
  uint64_t v7;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * a2);
  v4 = *a3;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)a3[1], a3[2], (a3[2] - a3[1]) >> 2);
  *(_QWORD *)v3 = v4;
  if ((uint64_t *)v3 != &v4)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v3 + 8), (char *)__p, (uint64_t)v6, (v6 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_1AD7819F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 48 * v6;
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1AD781AA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  char v17;
  __int128 v18;
  __int128 v19;

  v7 = a7;
  *(_QWORD *)&v19 = a6;
  *((_QWORD *)&v19 + 1) = a7;
  v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  v17 = 0;
  if (a3 == a5)
  {
    v14 = a6;
  }
  else
  {
    v9 = a3;
    v10 = a3;
    do
    {
      v11 = *(_QWORD *)(v10 - 48);
      v10 -= 48;
      *(_QWORD *)(v7 - 48) = v11;
      v12 = *(_QWORD *)(v10 + 8);
      *(_QWORD *)(v7 - 32) = 0;
      v13 = v7 - 32;
      *(_QWORD *)(v7 - 40) = v12;
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v7 - 32), *(const void **)(v10 + 16), *(_QWORD *)(v10 + 24), (uint64_t)(*(_QWORD *)(v10 + 24) - *(_QWORD *)(v10 + 16)) >> 2);
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(v9 - 8);
      v7 = *((_QWORD *)&v19 + 1) - 48;
      *((_QWORD *)&v19 + 1) -= 48;
      v9 = v10;
    }
    while (v10 != a5);
    v14 = v19;
  }
  v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

void sub_1AD781C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 + 16);
    if (v3)
    {
      *(_QWORD *)(v1 + 24) = v3;
      operator delete(v3);
    }
    v1 += 48;
  }
}

uint64_t std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    *(_QWORD *)(a1 + 16) = v2 - 48;
    v5 = *(void **)(v2 - 32);
    if (v5)
    {
      *(_QWORD *)(v2 - 24) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 48;
    }
  }
}

uint64_t fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::AddArc(_QWORD *a1, _DWORD *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;

  if (!*a2)
    ++a1[4];
  if (!a2[1])
    ++a1[5];
  v3 = a1 + 6;
  v4 = a1[7];
  if (v4 >= a1[8])
  {
    result = std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__push_back_slow_path<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const&>(v3, (uint64_t)a2);
  }
  else
  {
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__construct_one_at_end[abi:ne180100]<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const&>((uint64_t)v3, (uint64_t)a2);
    result = v4 + 48;
  }
  a1[7] = result;
  return result;
}

_QWORD *std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__construct_one_at_end[abi:ne180100]<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *result;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v4 = *(_QWORD *)a2;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v4 + 16), *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 8) = v4 + 48;
  return result;
}

void sub_1AD781E30(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__push_back_slow_path<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  _QWORD *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[12 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = (char *)&v10[12 * v9];
  *v11 = *(_QWORD *)a2;
  v12 = *(_QWORD *)(a2 + 8);
  v11[2] = 0;
  v11 += 2;
  *(v11 - 1) = v12;
  v11[1] = 0;
  v11[2] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v11, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
  v10[12 * v4 + 10] = *(_DWORD *)(a2 + 40);
  v16 += 6;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1AD781F58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

unint64_t fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *__p[2];
  char v13;
  char v14;

  if (!FLAGS_fst_verify_properties)
    return fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(a1, a2, a3, 1);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v7 = fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(a1, a2, a3, 0);
  if (!fst::CompatProperties(v6, v7))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
    v9 = (_QWORD *)fst::cerr(v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  return v7;
}

void sub_1AD78210C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::vector<unsigned int>::size_type v18;
  char v19;
  char *v20;
  int v21;
  int v22;
  unint64_t v23;
  float v24;
  float v25;
  int v26;
  std::vector<unsigned int>::pointer end;
  unsigned int *v28;
  std::vector<unsigned int>::pointer begin;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  unint64_t v33;
  char *v34;
  unsigned int *v35;
  unsigned int v36;
  std::vector<unsigned int>::pointer v37;
  unsigned int *v38;
  std::vector<unsigned int>::pointer v39;
  int64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  unsigned int *v45;
  unsigned int v46;
  unint64_t v47;
  std::vector<unsigned int>::pointer v48;
  unsigned int v49;
  unint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unint64_t v53;
  std::vector<unsigned int>::pointer v54;
  unsigned int v55;
  unint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v60;
  uint64_t v61;
  void *__p;
  void *v63;
  _DWORD *v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  unsigned int v68;
  std::vector<unsigned int> v69;
  std::vector<unsigned int> v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  unint64_t *v74;
  uint64_t v75;
  int v76;
  unint64_t v77;
  float v78;
  int v79;
  float v80;
  float v81;

  v7 = a1;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v9 = v8;
  if (!a4
    || (v10 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7, (a2 & ~v10) != 0))
  {
    v9 = v8 & 7;
    v77 = v9;
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    if ((a2 & 0xF3C00000000) != 0 && v11)
    {
      v71 = 0;
      v72 = 0;
      v73 = 0;
      v74 = &v77;
      fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, &v71, 0);
      v9 = v77;
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) != 0)
    {
      v12 = a2 & 0xC0000;
      v13 = 0x10425A810000;
      if ((a2 & 0xC0000) != 0)
        v13 = 0x10425A850000;
      v14 = v9 | v13;
      v15 = a2 & 0x300000;
      if ((a2 & 0x300000) != 0)
        v14 |= 0x100000uLL;
      v77 = v14;
      memset(&v70, 0, sizeof(v70));
      memset(&v69, 0, sizeof(v69));
      v68 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 128))(v7, &v66);
      v16 = 0;
      v60 = v7;
LABEL_12:
      if (v66)
      {
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v66 + 16))(v66))
        {
          if (v66)
          {
            v17 = (*(uint64_t (**)(void))(*(_QWORD *)v66 + 24))();
LABEL_18:
            v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 40))(v7, v17);
            v73 = 0;
            v74 = 0;
            v75 = 0;
            v70.__end_ = v70.__begin_;
            v69.__end_ = v69.__begin_;
            if (v12)
              std::vector<int>::reserve(&v70, v18);
            if (v15)
              std::vector<int>::reserve(&v69, v18);
            v65 = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v7 + 136))(v7, v17, &v61);
            v19 = 1;
            while (1)
            {
              if (v61)
              {
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v61 + 24))(v61))
                {
                  if (v61)
                  {
                    (*(void (**)(void))(*(_QWORD *)v61 + 8))();
                  }
                  else
                  {
LABEL_96:
                    if (v64)
                      --*v64;
                  }
                  v7 = v60;
                  if (v12
                    && (std::__sort<std::__less<int,int> &,int *>(),
                        (std::vector<unsigned int>::pointer)((char *)v70.__end_ - (char *)v70.__begin_) >= (std::vector<unsigned int>::pointer)5))
                  {
                    v47 = v70.__end_ - v70.__begin_;
                    if (v47 <= 2)
                      v47 = 2;
                    v48 = v70.__begin_ + 1;
                    v49 = *v70.__begin_;
                    v50 = v47 - 1;
                    while (1)
                    {
                      v52 = *v48++;
                      v51 = v52;
                      if (v52 == v49)
                        break;
                      v49 = v51;
                      if (!--v50)
                        goto LABEL_105;
                    }
                    v77 = v77 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
                    if (!v15)
                    {
LABEL_116:
                      if (v16 >= 1)
                        v77 = v77 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v60 + 32))(&v61, v60, v17);
                      v80 = *((float *)&v61 + 1);
                      v81 = *(float *)&v61;
                      v79 = 2139095040;
                      v78 = INFINITY;
                      if (*(float *)&v61 == INFINITY && v80 == v78 && v63 == __p)
                      {
                        if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v60 + 40))(v60, v17) != 1)
                          v77 = v77 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                      }
                      else
                      {
                        v80 = *((float *)&v61 + 1);
                        v81 = *(float *)&v61;
                        v79 = 0;
                        v78 = 0.0;
                        if (*(float *)&v61 != 0.0 || v80 != v78 || v63 != __p)
                          v77 = v77 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                        ++v16;
                      }
                      if (__p)
                      {
                        v63 = __p;
                        operator delete(__p);
                      }
                      if (v73)
                      {
                        v74 = (unint64_t *)v73;
                        operator delete(v73);
                      }
                      if (v66)
                        (*(void (**)(uint64_t))(*(_QWORD *)v66 + 32))(v66);
                      else
                        ++v68;
                      goto LABEL_12;
                    }
                  }
                  else
                  {
LABEL_105:
                    if (!v15)
                      goto LABEL_116;
                  }
                  std::__sort<std::__less<int,int> &,int *>();
                  if ((std::vector<unsigned int>::pointer)((char *)v69.__end_ - (char *)v69.__begin_) >= (std::vector<unsigned int>::pointer)5)
                  {
                    v53 = v69.__end_ - v69.__begin_;
                    if (v53 <= 2)
                      v53 = 2;
                    v54 = v69.__begin_ + 1;
                    v55 = *v69.__begin_;
                    v56 = v53 - 1;
                    while (1)
                    {
                      v58 = *v54++;
                      v57 = v58;
                      if (v58 == v55)
                        break;
                      v55 = v57;
                      if (!--v56)
                        goto LABEL_116;
                    }
                    v77 = v77 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                  }
                  goto LABEL_116;
                }
                if (v61)
                {
                  v20 = (char *)(*(uint64_t (**)(void))(*(_QWORD *)v61 + 32))();
                  goto LABEL_29;
                }
              }
              else if (v65 >= (unint64_t)v63)
              {
                goto LABEL_96;
              }
              v20 = (char *)__p + 48 * v65;
LABEL_29:
              v21 = *(_DWORD *)v20;
              v22 = *(_DWORD *)v20;
              if (*(_DWORD *)v20 != *((_DWORD *)v20 + 1))
              {
                v77 = v77 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
                v22 = *((_DWORD *)v20 + 1);
              }
              if (v21 | v22)
              {
                if (v21)
                {
                  if (v22)
                    goto LABEL_35;
                  goto LABEL_39;
                }
                v23 = v77;
              }
              else
              {
                v23 = v77 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
              }
              v77 = v23 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
              if (v22)
              {
LABEL_35:
                if ((v19 & 1) != 0)
                  goto LABEL_44;
                goto LABEL_40;
              }
LABEL_39:
              v77 = v77 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
              if ((v19 & 1) != 0)
                goto LABEL_44;
LABEL_40:
              if (v21 < (int)v71)
                v77 = v77 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
              if (v22 < SHIDWORD(v71))
                v77 = v77 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
LABEL_44:
              v24 = *((float *)v20 + 2);
              v25 = *((float *)v20 + 3);
              v81 = v24;
              v80 = v25;
              v79 = 0;
              v78 = 0.0;
              if (v24 != 0.0 || v80 != v78 || *((_QWORD *)v20 + 3) != *((_QWORD *)v20 + 2))
              {
                v81 = v24;
                v80 = v25;
                v79 = 2139095040;
                v78 = INFINITY;
                if (v24 != INFINITY || v80 != v78 || *((_QWORD *)v20 + 3) != *((_QWORD *)v20 + 2))
                  v77 = v77 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
              }
              v26 = *((_DWORD *)v20 + 10);
              if (v26 <= (int)v17)
                v77 = v77 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
              if (v26 != (_DWORD)v17 + 1)
                v77 = v77 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              v71 = *(_QWORD *)v20;
              fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)&v72, (uint64_t)(v20 + 8));
              v76 = *((_DWORD *)v20 + 10);
              if (v12)
              {
                end = v70.__end_;
                if (v70.__end_ >= v70.__end_cap_.__value_)
                {
                  begin = v70.__begin_;
                  v30 = v70.__end_ - v70.__begin_;
                  v31 = v30 + 1;
                  if ((unint64_t)(v30 + 1) >> 62)
                    goto LABEL_147;
                  v32 = (char *)v70.__end_cap_.__value_ - (char *)v70.__begin_;
                  if (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 1 > v31)
                    v31 = v32 >> 1;
                  if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
                    v33 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v33 = v31;
                  if (v33)
                  {
                    v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v70.__end_cap_, v33);
                    begin = v70.__begin_;
                    end = v70.__end_;
                  }
                  else
                  {
                    v34 = 0;
                  }
                  v35 = (unsigned int *)&v34[4 * v30];
                  *v35 = *(_DWORD *)v20;
                  v28 = v35 + 1;
                  while (end != begin)
                  {
                    v36 = *--end;
                    *--v35 = v36;
                  }
                  v70.__begin_ = v35;
                  v70.__end_ = v28;
                  v70.__end_cap_.__value_ = (unsigned int *)&v34[4 * v33];
                  if (begin)
                    operator delete(begin);
                }
                else
                {
                  *v70.__end_ = *(_DWORD *)v20;
                  v28 = end + 1;
                }
                v70.__end_ = v28;
              }
              if (v15)
              {
                v37 = v69.__end_;
                if (v69.__end_ >= v69.__end_cap_.__value_)
                {
                  v39 = v69.__begin_;
                  v40 = v69.__end_ - v69.__begin_;
                  v41 = v40 + 1;
                  if ((unint64_t)(v40 + 1) >> 62)
LABEL_147:
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v42 = (char *)v69.__end_cap_.__value_ - (char *)v69.__begin_;
                  if (((char *)v69.__end_cap_.__value_ - (char *)v69.__begin_) >> 1 > v41)
                    v41 = v42 >> 1;
                  if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
                    v43 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v43 = v41;
                  if (v43)
                  {
                    v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v69.__end_cap_, v43);
                    v39 = v69.__begin_;
                    v37 = v69.__end_;
                  }
                  else
                  {
                    v44 = 0;
                  }
                  v45 = (unsigned int *)&v44[4 * v40];
                  *v45 = *((_DWORD *)v20 + 1);
                  v38 = v45 + 1;
                  while (v37 != v39)
                  {
                    v46 = *--v37;
                    *--v45 = v46;
                  }
                  v69.__begin_ = v45;
                  v69.__end_ = v38;
                  v69.__end_cap_.__value_ = (unsigned int *)&v44[4 * v43];
                  if (v39)
                    operator delete(v39);
                }
                else
                {
                  *v69.__end_ = *((_DWORD *)v20 + 1);
                  v38 = v37 + 1;
                }
                v69.__end_ = v38;
              }
              if (v61)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
                v19 = 0;
              }
              else
              {
                v19 = 0;
                ++v65;
              }
            }
          }
LABEL_17:
          v17 = v68;
          goto LABEL_18;
        }
        if (v66)
          (*(void (**)(void))(*(_QWORD *)v66 + 8))();
      }
      else if ((int)v68 < v67)
      {
        goto LABEL_17;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7) != -1
        && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7))
      {
        v77 = v77 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
      }
      if (v69.__begin_)
      {
        v69.__end_ = v69.__begin_;
        operator delete(v69.__begin_);
      }
      if (v70.__begin_)
      {
        v70.__end_ = v70.__begin_;
        operator delete(v70.__begin_);
      }
      v9 = v77;
    }
    v10 = v9 & 0x3FFFFFFF0000 | (2 * v9) & 0x2AAAAAAA0000 | (v9 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v10;
  return v9;
}

void sub_1AD782A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p)
    operator delete(__p);
  if (a27)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char inited;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::vector<char>::pointer begin;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int v31;
  std::vector<char>::pointer end;
  char *v33;
  std::vector<char>::pointer v34;
  int64_t v35;
  int64_t v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char v43;
  char v44;
  uint64_t v45;
  int v46;
  std::vector<char>::value_type v47[8];
  std::vector<char>::value_type __x[8];
  int v49;
  int v50;
  void *v51;
  _QWORD v52[6];
  _QWORD *v53;
  _OWORD v54[2];
  __int128 v55;
  std::vector<char> v56;

  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitVisit((uint64_t)a2, a1);
  v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v46 == -1)
  {
    fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
    return;
  }
  memset(&v56, 0, sizeof(v56));
  v55 = 0u;
  memset(v54, 0, sizeof(v54));
  fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MemoryPool(&v51, 64);
  v45 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v45)
    v6 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v6 = (v46 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v6 <= (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v6 < (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
      v56.__end_ = &v56.__begin_[(int)v6];
  }
  else
  {
    std::vector<char>::__append(&v56, (int)v6 - (unint64_t)(v56.__end_ - v56.__begin_), __x);
  }
  v50 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v46 >= (int)v6)
    goto LABEL_97;
  v7 = v46;
  v44 = a3;
  do
  {
    v56.__begin_[(int)v7] = 1;
    v8 = (uint64_t)v53;
    if (v53)
    {
      v53 = (_QWORD *)v53[6];
    }
    else
    {
      v8 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v52, 1);
      *(_QWORD *)(v8 + 48) = 0;
    }
    *(_DWORD *)v8 = v7;
    *(_QWORD *)(v8 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v7, v8 + 8);
    *(_QWORD *)v47 = v8;
    std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> *>>::push_back(v54, v47);
    inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, v7, v7);
LABEL_16:
    v10 = inited;
    while (*((_QWORD *)&v55 + 1))
    {
      v11 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                   + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
      v12 = *(int *)v11;
      v13 = v56.__end_ - v56.__begin_;
      if (v56.__end_ - v56.__begin_ <= v12)
      {
        v6 = v12 + 1;
        v47[0] = 0;
        if (v12 + 1 <= v13)
        {
          if (v12 + 1 < v13)
            v56.__end_ = &v56.__begin_[v6];
        }
        else
        {
          std::vector<char>::__append(&v56, v12 + 1 - v13, v47);
        }
      }
      if ((v10 & 1) == 0)
        goto LABEL_33;
      v14 = v11[1];
      if (v14)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
          goto LABEL_33;
        v15 = v11[1];
        if (!v15)
          goto LABEL_29;
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
LABEL_30:
        v17 = *(int *)(v16 + 40);
        begin = v56.__begin_;
        v19 = v56.__end_ - v56.__begin_;
        if (v56.__end_ - v56.__begin_ <= v17)
        {
          v6 = (v17 + 1);
          v47[0] = 0;
          if ((int)v6 <= v19)
          {
            if ((int)v6 < v19)
              v56.__end_ = &v56.__begin_[(int)v6];
          }
          else
          {
            std::vector<char>::__append(&v56, (int)v6 - v19, v47);
            v17 = *(int *)(v16 + 40);
            begin = v56.__begin_;
          }
        }
        v26 = begin[v17];
        if (v26 == 1)
        {
          v10 = fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::BackArc((uint64_t)a2, v12, v16);
          v25 = v11[1];
          if (v25)
            goto LABEL_50;
LABEL_51:
          ++v11[5];
        }
        else
        {
          if (v26 != 2)
          {
            begin[v17] = 1;
            v27 = (uint64_t)v53;
            if (v53)
            {
              v53 = (_QWORD *)v53[6];
            }
            else
            {
              v27 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v52, 1);
              *(_QWORD *)(v27 + 48) = 0;
            }
            *(_DWORD *)v27 = *(_DWORD *)(v16 + 40);
            *(_QWORD *)(v27 + 40) = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
            *(_QWORD *)v47 = v27;
            std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> *>>::push_back(v54, v47);
            inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, *(_DWORD *)(v16 + 40), v7);
            goto LABEL_16;
          }
          v10 = fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::ForwardOrCrossArc((_QWORD **)a2, v12, v16);
          v25 = v11[1];
          if (!v25)
            goto LABEL_51;
LABEL_50:
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        }
      }
      else
      {
        if (v11[5] < v11[3])
        {
LABEL_29:
          v16 = v11[2] + 48 * v11[5];
          goto LABEL_30;
        }
LABEL_33:
        v56.__begin_[v12] = 2;
        v20 = v11[1];
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        }
        else
        {
          v21 = (_DWORD *)v11[4];
          if (v21)
            --*v21;
        }
        v11[6] = v53;
        v53 = v11;
        --*((_QWORD *)&v55 + 1);
        std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v54, 1);
        if (*((_QWORD *)&v55 + 1))
        {
          v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                      + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
          v23 = *(_DWORD *)v22;
          v24 = *(_QWORD *)(v22 + 8);
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
          fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState((uint64_t)a2, v12, v23);
          v25 = *(_QWORD *)(v22 + 8);
          if (v25)
            goto LABEL_50;
          ++*(_QWORD *)(v22 + 40);
        }
        else
        {
          fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState((uint64_t)a2, v12, -1);
        }
      }
    }
    if ((a3 & 1) != 0)
      break;
    if ((_DWORD)v7 == v46)
      v7 = 0;
    else
      v7 = (v7 + 1);
    if ((int)v7 < (int)v6)
    {
      v28 = &v56.__begin_[(int)v7];
      v29 = (int)v6 - (uint64_t)(int)v7;
      while (*v28++)
      {
        v7 = (v7 + 1);
        if (!--v29)
        {
          v7 = v6;
          break;
        }
      }
    }
    if (v45 || (_DWORD)v7 != (_DWORD)v6)
      continue;
LABEL_67:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_73;
      }
    }
    else if (v50 >= v49)
    {
      continue;
    }
    v31 = v50;
LABEL_73:
    if (v31 != (_DWORD)v6)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v50;
      goto LABEL_67;
    }
    end = v56.__end_;
    if (v56.__end_ >= v56.__end_cap_.__value_)
    {
      v34 = v56.__begin_;
      v35 = v56.__end_ - v56.__begin_;
      v36 = v56.__end_ - v56.__begin_ + 1;
      if (v36 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v37 = v56.__end_cap_.__value_ - v56.__begin_;
      if (2 * (v56.__end_cap_.__value_ - v56.__begin_) > (unint64_t)v36)
        v36 = 2 * v37;
      if (v37 >= 0x3FFFFFFFFFFFFFFFLL)
        v38 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (v38)
        v39 = (char *)operator new(v38);
      else
        v39 = 0;
      v40 = &v39[v35];
      v41 = &v39[v35];
      *v41 = 0;
      v33 = v41 + 1;
      if (end != v34)
      {
        v42 = &end[~(unint64_t)v34];
        do
        {
          v43 = *--end;
          (v42--)[(_QWORD)v39] = v43;
        }
        while (end != v34);
        end = v56.__begin_;
        v40 = v39;
      }
      v56.__begin_ = v40;
      v56.__end_ = v33;
      v56.__end_cap_.__value_ = &v39[v38];
      if (end)
        operator delete(end);
    }
    else
    {
      *v56.__end_ = 0;
      v33 = end + 1;
    }
    v56.__end_ = v33;
    v6 = (v6 + 1);
    a3 = v44;
  }
  while ((v10 & 1) != 0 && (int)v7 < (int)v6);
LABEL_97:
  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v51 = &unk_1E5D19788;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Link>::~MemoryArena(v52);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v51);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v54);
  if (v56.__begin_)
  {
    v56.__end_ = v56.__begin_;
    operator delete(v56.__begin_);
  }
}

void sub_1AD7831AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D19788;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(_QWORD *)a1 = &unk_1E5D19788;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  *(_QWORD *)a1 = &unk_1E5D19788;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MemoryPool(_QWORD *a1, uint64_t a2)
{
  *a1 = &unk_1E5D19788;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Link>::MemoryArena(a1 + 1, a2);
  a1[7] = 0;
  return a1;
}

void sub_1AD7832B8(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Size()
{
  return 48;
}

_QWORD *fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Link>::MemoryArena(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &unk_1E5D1A740;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_1AD7833A0(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1AF44D190);
}

{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;

  *a1 = &unk_1E5D1A740;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1AF44D160](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Link>::Size()
{
  return 56;
}

void std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> *>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> *>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1AD7837AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ArcBuffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetFromFst<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  _DWORD *v28;

  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(_QWORD *)a2 + 136))(a2, a3, &v25);
  if (!v25 && (a4 & 1) == 0)
  {
    v10 = v26 + 48 * v27;
    *(_QWORD *)(a1 + 16) = v26;
    *(_QWORD *)(a1 + 24) = v10;
    if (*(_QWORD *)a1)
    {
      free(*(void **)a1);
      *(_QWORD *)a1 = 0;
    }
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a3);
  v12 = a5;
  if (!a4)
    v12 = 0;
  v13 = v11 + v12;
  if (*(_QWORD *)(a1 + 8) < (unint64_t)(v11 + v12))
  {
    if (*(_QWORD *)a1)
      free(*(void **)a1);
    v24 = 0x4000;
    if (v13 > 0x4000)
      v24 = v13;
    *(_QWORD *)(a1 + 8) = v24;
    v15 = malloc_type_malloc(48 * v24, 0x1010040A52E2B18uLL);
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 16) = v15;
    v14 = v15;
  }
  else
  {
    v14 = *(_QWORD **)(a1 + 16);
    v15 = *(_QWORD **)a1;
  }
  *(_QWORD *)(a1 + 24) = &v14[6 * v13];
  v16 = v25;
  v17 = v26;
  v19 = v27;
  v18 = v28;
  if (v28)
    ++*v28;
  v20 = 0;
LABEL_13:
  v15 += 6;
  while (v16)
  {
    v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
    v22 = *v16;
    if (v21)
    {
      (*(void (**)(uint64_t *))(v22 + 8))(v16);
      return;
    }
    v23 = (*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
LABEL_18:
    *(v15 - 6) = *(_QWORD *)v23;
    fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)(v15 - 5), v23 + 8);
    *((_DWORD *)v15 - 2) = *(_DWORD *)(v23 + 40);
    if (!v16)
    {
      ++v20;
      goto LABEL_13;
    }
    v15 += 6;
    (*(void (**)(uint64_t *))(*v16 + 40))(v16);
  }
  v23 = v17 + 48 * v20;
  if (v20 < v19)
    goto LABEL_18;
  if (v18)
    --*v18;
}

void sub_1AD7839F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _DWORD *v2;

  if (v1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  else if (v2)
  {
    --*v2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::WriteFst<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  fst *v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t updated;
  fst *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;
  _BYTE v35[8];
  void *v36[2];
  void *v37[2];
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::string __p[5];
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v38 = 0u;
  v39 = 0u;
  *(_OWORD *)v36 = 0u;
  *(_OWORD *)v37 = 0u;
  v6 = -1;
  v41 = 0;
  v42 = 0;
  v40 = -1;
  v40 = (*(int (**)(_QWORD *))(*a1 + 24))(a1);
  v41 = -1;
  if ((*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, 1, 0))
  {
    v6 = 0;
LABEL_3:
    v7 = 0;
    v41 = (int)fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)a1);
    goto LABEL_6;
  }
  v8 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v8 + 5) + 32))(__p, *((_QWORD *)v8 + 5), 0, 1, 16);
    v6 = v44;
    if (v44 != -1)
      goto LABEL_3;
  }
  v7 = 1;
LABEL_6:
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  v9 |= 3uLL;
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (_BYTE *)a3, 2, __p, v9, (uint64_t)v35);
  v31 = v9;
  v32 = v6;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v10 = *(_QWORD *)(a1[1] + 72) - *(_QWORD *)(a1[1] + 64);
  v11 = v10 >> 3;
  if ((int)(v10 >> 3) < 1)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    v33 = v7;
    v12 = 0;
    v13 = (v10 >> 3);
    do
    {
      (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t))(*a1 + 32))(__p, a1, v12);
      fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Write((uint64_t)__p, a2);
      if (__p[0].__r_.__value_.__l.__size_)
      {
        __p[0].__r_.__value_.__r.__words[2] = __p[0].__r_.__value_.__l.__size_;
        operator delete((void *)__p[0].__r_.__value_.__l.__size_);
      }
      __p[0].__r_.__value_.__r.__words[0] = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, v12);
      std::ostream::write();
      v14 = *(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * v12);
      v16 = *(_QWORD *)(v14 + 48);
      v15 = *(_QWORD *)(v14 + 56);
      if (v15 == v16)
        v17 = 0;
      else
        v17 = *(_DWORD **)(v14 + 48);
      if (v15 != v16)
      {
        if ((unint64_t)((v15 - v16) / 48) <= 1)
          v18 = 1;
        else
          v18 = (v15 - v16) / 48;
        v19 = v17;
        do
        {
          v20 = *v19;
          v19 += 12;
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v20;
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v17[1];
          std::ostream::write();
          fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Write((uint64_t)(v17 + 2), a2);
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v17[10];
          std::ostream::write();
          v17 = v19;
          --v18;
        }
        while (v18);
      }
      ++v12;
    }
    while (v12 != v13);
    v7 = v33;
  }
  std::ostream::flush();
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v21 = fst::LogMessage::LogMessage((fst *)&v34, (uint64_t)__p);
    v22 = (_QWORD *)fst::cerr(v21);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"VectorFst::Write: write failed: ", 32);
    v24 = *(char *)(a3 + 23);
    if (v24 >= 0)
      v25 = a3;
    else
      v25 = *(_QWORD *)a3;
    if (v24 >= 0)
      v26 = *(unsigned __int8 *)(a3 + 23);
    else
      v26 = *(_QWORD *)(a3 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
LABEL_32:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v34);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    updated = 0;
    goto LABEL_35;
  }
  if (!v7)
  {
    if (v41 == v11)
    {
      updated = 1;
      goto LABEL_35;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v29 = fst::LogMessage::LogMessage((fst *)&v34, (uint64_t)__p);
    v30 = (_QWORD *)fst::cerr(v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_32;
  }
  v41 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  updated = fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, __p, v31, (uint64_t)v35, v32);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_35:
  if (SHIBYTE(v38) < 0)
    operator delete(v37[1]);
  if (SHIBYTE(v37[0]) < 0)
    operator delete(v36[0]);
  return updated;
}

void sub_1AD783E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    operator delete(__p);
  fst::FstHeader::~FstHeader(&a15);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::WriteFstHeader(uint64_t a1, uint64_t a2, _BYTE *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  const std::string *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t result;
  BOOL v22;
  uint64_t v23;

  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    v13 = (const std::string *)fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(_QWORD *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
      v14 = a3[25] == 0;
    else
      v14 = 1;
    v15 = !v14;
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    if (a3[26])
      v17 = v16 == 0;
    else
      v17 = 1;
    v18 = v15 | 2;
    if (v17)
      v18 = v15;
    if (a3[27])
      v18 |= 4u;
    *(_DWORD *)(a7 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
    v19 = a3[25] == 0;
  else
    v19 = 1;
  if (!v19)
  {
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 72))(v20, a2);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  if (result)
    v22 = a3[26] == 0;
  else
    v22 = 1;
  if (!v22)
  {
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 72))(v23, a2);
  }
  return result;
}

_QWORD *fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Write(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  fst::LatticeWeightTpl<float>::Write(a1, (uint64_t)a2);
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0)
  {
    v4 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
    std::ostream::write();
    if ((int)(v4 >> 2) >= 1)
    {
      v5 = 0;
      v6 = v4 & 0x3FFFFFFFCLL;
      do
      {
        std::ostream::write();
        v5 += 4;
      }
      while (v6 != v5);
    }
  }
  return a2;
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::UpdateFstHeader(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v16;
  uint64_t v17;
  fst *v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  fst *v24;
  _QWORD *v25;
  int v26;
  char *v27;
  fst *v28;
  _QWORD *v29;
  int v30;
  _BYTE v32[16];
  _QWORD v33[17];
  __int128 __p;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1AF44CB90](v32);
  v16 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    v17 = *((_QWORD *)v16 + 5);
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    __p = 0u;
    v35 = 0u;
    v42 = a8;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v17 + 40))(v33, v17, &__p, 16);
    if (v33[16] == -1)
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
  }
  MEMORY[0x1AF44CB9C](v32);
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v18 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
    v19 = (_QWORD *)fst::cerr(v18);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    v21 = *(char *)(a3 + 23);
    if (v21 >= 0)
      v22 = a3;
    else
      v22 = *(_QWORD *)a3;
    if (v21 >= 0)
      v23 = *(unsigned __int8 *)(a3 + 23);
    else
      v23 = *(_QWORD *)(a3 + 8);
  }
  else
  {
    fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::WriteFstHeader(a1, (uint64_t)a2, (_BYTE *)a3, a4, a5, a6, a7);
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      v24 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      v25 = (_QWORD *)fst::cerr(v24);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      v26 = *(char *)(a3 + 23);
      if (v26 >= 0)
        v22 = a3;
      else
        v22 = *(_QWORD *)a3;
      if (v26 >= 0)
        v23 = *(unsigned __int8 *)(a3 + 23);
      else
        v23 = *(_QWORD *)(a3 + 8);
    }
    else
    {
      MEMORY[0x1AF44CB90](v33, a2);
      v27 = (char *)a2 + *(_QWORD *)(*a2 - 24);
      if ((v27[32] & 5) == 0)
      {
        (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v27 + 5) + 32))(&__p, *((_QWORD *)v27 + 5), 0, 2, 16);
        if (v42 == -1)
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
      }
      MEMORY[0x1AF44CB9C](v33);
      if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0)
        return 1;
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      v28 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      v29 = (_QWORD *)fst::cerr(v28);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      v30 = *(char *)(a3 + 23);
      if (v30 >= 0)
        v22 = a3;
      else
        v22 = *(_QWORD *)a3;
      if (v30 >= 0)
        v23 = *(unsigned __int8 *)(a3 + 23);
      else
        v23 = *(_QWORD *)(a3 + 8);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v33);
  if (SBYTE7(v35) < 0)
    operator delete((void *)__p);
  return 0;
}

void sub_1AD7843E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  MEMORY[0x1AF44CB9C](&a12);
  _Unwind_Resume(a1);
}

void fst::FstHeader::~FstHeader(void **this)
{
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

uint64_t fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::Type()
{
  unsigned __int8 v0;
  uint64_t v2;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>::Type();
    std::operator+<char>();
    fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::Type(void)::type = v2;
  }
  return fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::Type(void)::type;
}

void sub_1AD784514(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>::Type()
{
  unsigned __int8 v0;
  std::string *v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;

  if ((v0 & 1) == 0
  {
    v2 = (std::string *)operator new();
    v3 = (_QWORD *)fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Type();
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "tropical"))
    {
      std::string::basic_string[abi:ne180100]<0>(v2, "standard");
    }
    else
    {
      v4 = fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Type();
      if (*(char *)(v4 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)v4, *(_QWORD *)(v4 + 8));
      }
      else
      {
        v5 = *(_OWORD *)v4;
        v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 16);
        *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v5;
      }
    }
    fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>::Type(void)::type = (uint64_t)v2;
  }
  return fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>::Type(void)::type;
}

void sub_1AD784610(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::LatticeWeightTpl<float>::Write(uint64_t a1, uint64_t a2)
{
  std::ostream::write();
  std::ostream::write();
  return a2;
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::WriteFile(fst *a1, uint64_t a2)
{
  fst *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  const std::string::value_type *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  std::string __p;
  __int16 v16;
  char v17;
  char v18;
  char v19;
  std::string v20;
  __int16 v21;
  char v22;
  char v23;
  _BYTE v24[384];
  _QWORD v25[20];

  v25[19] = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(_QWORD *)(a2 + 8))
    {
LABEL_5:
      std::ofstream::basic_ofstream(&v20);
      if ((v24[*(_QWORD *)(v20.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        v4 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
        v5 = (_QWORD *)fst::cerr(v4);
        v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fst::Write: Can't open file: ", 29);
        v7 = *(char *)(a2 + 23);
        if (v7 >= 0)
          v8 = (const std::string::value_type *)a2;
        else
          v8 = *(const std::string::value_type **)a2;
        if (v7 >= 0)
          v9 = *(unsigned __int8 *)(a2 + 23);
        else
          v9 = *(_QWORD *)(a2 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v10 = 0;
      }
      else
      {
        v13 = FLAGS_fst_align;
        if (*(char *)(a2 + 23) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          __p = *(std::string *)a2;
        v16 = 257;
        v17 = 1;
        v18 = v13;
        v10 = (*(uint64_t (**)(fst *, std::string *, std::string *))(*(_QWORD *)a1 + 96))(a1, &v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v20.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F48];
      *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words
                                + *(_QWORD *)(v20.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48]
                                                                                                  + 24);
      MEMORY[0x1AF44CA70](&v20.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x1AF44D094](v25);
      return v10;
    }
  }
  else if (*(_BYTE *)(a2 + 23))
  {
    goto LABEL_5;
  }
  v11 = fst::cout(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  v12 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v20 = __p;
  v21 = 257;
  v22 = 1;
  v23 = v12;
  v10 = (*(uint64_t (**)(fst *, uint64_t, std::string *))(*(_QWORD *)a1 + 96))(a1, v11, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v10;
}

void sub_1AD78490C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::ofstream::~ofstream(&a21);
  _Unwind_Resume(a1);
}

_QWORD *std::ofstream::basic_ofstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FB0];
  v3 = MEMORY[0x1E0DE4FB0] + 64;
  a1[52] = MEMORY[0x1E0DE4FB0] + 64;
  v4 = a1 + 1;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 1);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[52] = v3;
  MEMORY[0x1AF44CA64](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FB0];
  v3 = MEMORY[0x1E0DE4FB0] + 64;
  a1[52] = MEMORY[0x1E0DE4FB0] + 64;
  v4 = a1 + 1;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 1);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[52] = v3;
  MEMORY[0x1AF44CA64](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_1AD784A58(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1AF44D094](v1 + 416);
  _Unwind_Resume(a1);
}

_QWORD *std::ofstream::~ofstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F48];
  v3 = *MEMORY[0x1E0DE4F48];
  *a1 = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x1AF44CA70](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x1AF44D094](a1 + 52);
  return a1;
}

void fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::SetFinal(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *__p;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _BYTE *v22;
  uint64_t v23;

  v6 = *(uint64_t **)(a1[8] + 8 * a2);
  v20 = *v6;
  v22 = 0;
  v23 = 0;
  v21 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v21, (const void *)v6[1], v6[2], (v6[2] - v6[1]) >> 2);
  v16 = *(_QWORD *)a3;
  v18 = 0;
  v19 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a3 + 8), *(_QWORD *)(a3 + 16), (uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 2);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::SetFinal((uint64_t)a1, a2, &v16);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  v12 = v20;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v13, v21, (uint64_t)v22, (v22 - (_BYTE *)v21) >> 2);
  v8 = *(_QWORD *)a3;
  v10 = 0;
  v11 = 0;
  v9 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v9, *(const void **)(a3 + 8), *(_QWORD *)(a3 + 16), (uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 2);
  a1[1] = a1[1] & 4 | fst::SetFinalProperties<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>(v7, (uint64_t)&v12, (uint64_t)&v8);
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
  if (v13)
  {
    v14 = v13;
    operator delete(v13);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
}

void sub_1AD784C48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  void *v21;

  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  v21 = *(void **)(v19 - 56);
  if (v21)
  {
    *(_QWORD *)(v19 - 48) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::SetFinalProperties<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(float *)a2 != INFINITY || *(float *)(a2 + 4) != INFINITY || *(_QWORD *)(a2 + 16) != *(_QWORD *)(a2 + 8))
    && (*(float *)a2 != 0.0 || *(float *)(a2 + 4) != 0.0 || *(_QWORD *)(a2 + 16) != *(_QWORD *)(a2 + 8)))
  {
    a1 &= ~0x100000000uLL;
  }
  if ((*(float *)a3 != INFINITY || *(float *)(a3 + 4) != INFINITY || *(_QWORD *)(a3 + 16) != *(_QWORD *)(a3 + 8))
    && (*(float *)a3 != 0.0 || *(float *)(a3 + 4) != 0.0 || *(_QWORD *)(a3 + 16) != *(_QWORD *)(a3 + 8)))
  {
    a1 = a1 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  return a1 & 0x3FFFFFF0007;
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::AddArc(_QWORD *a1, int a2, float *a3)
{
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;

  v6 = *(_QWORD *)(*(_QWORD *)(a1[8] + 8 * a2) + 56);
  if (v6 == *(_QWORD *)(*(_QWORD *)(a1[8] + 8 * a2) + 48))
    v7 = 0;
  else
    v7 = (_DWORD *)(v6 - 48);
  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | fst::AddArcProperties<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(v8, a2, a3, v7);
  return fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::AddArc(*(_QWORD **)(a1[8] + 8 * a2), a3);
}

uint64_t fst::AddArcProperties<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(unint64_t a1, int a2, float *a3, _DWORD *a4)
{
  float v4;
  int v5;
  unint64_t v6;
  unint64_t v7;

  v4 = *a3;
  v5 = *((_DWORD *)a3 + 1);
  v6 = a1 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (*(_DWORD *)a3 == v5)
    v6 = a1;
  v7 = v6 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
  if (!v5)
    v7 = v6 & 0xFFFFFFFFFC3FFFFFLL | 0x1400000;
  if (v4 == 0.0)
    v6 = v7;
  if (!v5)
    v6 = v6 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
  if (a4)
  {
    if (*a4 > SLODWORD(v4))
      v6 = v6 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
    if (a4[1] > v5)
      v6 = v6 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
  }
  if ((a3[2] != INFINITY || a3[3] != INFINITY || *((_QWORD *)a3 + 3) != *((_QWORD *)a3 + 2))
    && (a3[2] != 0.0 || a3[3] != 0.0 || *((_QWORD *)a3 + 3) != *((_QWORD *)a3 + 2)))
  {
    v6 = v6 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  if (*((_DWORD *)a3 + 10) <= a2)
    v6 = v6 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
  if ((v6 & 0x4000000000) != 0)
    return v6 & 0x5D7FFEB0007 | 0x2800000000;
  else
    return v6 & 0x5D7FFEB0007;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::DeleteStates(uint64_t a1, char **a2)
{
  uint64_t *v4;
  std::vector<int>::size_type v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  std::vector<int>::pointer begin;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  int64x2_t *v16;
  int64x2_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  int64x2_t v26;
  unint64_t v27;
  uint64_t v28;
  int *v29;
  int64x2_t v30;
  int64x2_t v31;
  std::vector<int>::value_type __x;
  std::vector<int> v33;

  v4 = (uint64_t *)(a1 + 64);
  v5 = (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3;
  __x = 0;
  std::vector<int>::vector(&v33, v5, &__x);
  v6 = *a2;
  v7 = a2[1] - *a2;
  if (v7)
  {
    v8 = v7 >> 2;
    begin = v33.__begin_;
    if (v8 <= 1)
      v8 = 1;
    do
    {
      v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  v11 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v11)
  {
    v13 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    do
    {
      if (v33.__begin_[v12] == -1)
      {
        fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Destroy(*(_QWORD *)(v11 + 8 * v12));
      }
      else
      {
        v33.__begin_[v12] = v13;
        if (v12 != v13)
          *(_QWORD *)(v11 + 8 * v13) = *(_QWORD *)(v11 + 8 * v12);
        ++v13;
      }
      ++v12;
      v11 = *(_QWORD *)(a1 + 64);
    }
    while (v12 < (*(_QWORD *)(a1 + 72) - v11) >> 3);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v13);
  v14 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) != v14)
  {
    v15 = 0;
    do
    {
      v16 = *(int64x2_t **)(v14 + 8 * v15);
      v17 = v16[2];
      v18 = v16[3].i64[1] - v16[3].i64[0];
      if (v18)
        v19 = v16[3].i64[0];
      else
        v19 = 0;
      if (v18)
      {
        v20 = 0;
        v21 = 0;
        v22 = (int *)(v19 + 40);
        do
        {
          v23 = v33.__begin_[*v22];
          if (v23 == -1)
          {
            v25 = *((_QWORD *)v22 - 5);
            v26.i64[0] = v25;
            v26.i64[1] = HIDWORD(v25);
            v17 = vaddq_s64(v17, vceqzq_s64(v26));
          }
          else
          {
            *v22 = v23;
            if (v20 != v21)
            {
              v30 = v17;
              v24 = (_QWORD *)(v19 + 48 * v21);
              *v24 = *((_QWORD *)v22 - 5);
              fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)(v24 + 1), (uint64_t)(v22 - 8));
              *(_DWORD *)(v19 + 48 * v21 + 40) = *v22;
              v14 = *v4;
              v17 = v30;
            }
            ++v21;
          }
          ++v20;
          v16 = *(int64x2_t **)(v14 + 8 * v15);
          v27 = 0xAAAAAAAAAAAAAAABLL * ((v16[3].i64[1] - v16[3].i64[0]) >> 4);
          v22 += 12;
        }
        while (v20 < v27);
        v31 = v17;
      }
      else
      {
        v31 = v16[2];
        v21 = 0;
        v27 = 0;
      }
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::DeleteArcs(v16, v27 - v21);
      v14 = *(_QWORD *)(a1 + 64);
      *(int64x2_t *)(*(_QWORD *)(v14 + 8 * v15++) + 32) = v31;
    }
    while (v15 < (*(_QWORD *)(a1 + 72) - v14) >> 3);
  }
  v28 = *(int *)(a1 + 88);
  if ((_DWORD)v28 == -1)
  {
    v29 = v33.__begin_;
    if (!v33.__begin_)
      return;
  }
  else
  {
    v29 = v33.__begin_;
    *(_DWORD *)(a1 + 88) = v33.__begin_[v28];
  }
  v33.__end_ = v29;
  operator delete(v29);
}

void sub_1AD785224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::DeleteArcs(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  void *v5;

  if (a2)
  {
    v2 = a2;
    v4 = a1[7] - 48;
    do
    {
      if (!*(_DWORD *)v4)
        --a1[4];
      if (!*(_DWORD *)(v4 + 4))
        --a1[5];
      v5 = *(void **)(v4 + 16);
      if (v5)
      {
        *(_QWORD *)(v4 + 24) = v5;
        operator delete(v5);
      }
      a1[7] = v4;
      v4 -= 48;
      --v2;
    }
    while (v2);
  }
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::DeleteStates(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 72);
  if (v2 != *(_QWORD *)(a1 + 64))
  {
    v3 = 0;
    v2 = *(_QWORD *)(a1 + 64);
    do
    {
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Destroy(*(_QWORD *)(v2 + 8 * v3++));
      v2 = *(_QWORD *)(a1 + 64);
    }
    while (v3 < (*(_QWORD *)(a1 + 72) - v2) >> 3);
  }
  *(_QWORD *)(a1 + 72) = v2;
  *(_DWORD *)(a1 + 88) = -1;
}

void fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::~MutableArcIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ArcIteratorBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Reinit()
{
  return 0;
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Done_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) >= 0xAAAAAAAAAAAAAAABLL
                               * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56)
                                          - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48)) >> 4);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Value_(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) + 48 * *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Next_(uint64_t result)
{
  ++*(_QWORD *)(result + 24);
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Position_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Reset_(uint64_t result)
{
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Seek_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Flags_()
{
  return 15;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::SetValue(uint64_t a1, float *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  int v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t result;
  float v17;
  int v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;

  v4 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = v4[6];
  v7 = (int *)(v6 + 48 * v5);
  v8 = *v7;
  v9 = v7[1];
  if (v8 != v9)
    **(_QWORD **)(a1 + 16) &= ~0x20000uLL;
  if (v8)
  {
    if (v9)
      goto LABEL_9;
    v10 = *(unint64_t **)(a1 + 16);
    v11 = *v10;
  }
  else
  {
    v10 = *(unint64_t **)(a1 + 16);
    v12 = *v10;
    *v10 &= ~0x1000000uLL;
    if (v9)
      goto LABEL_9;
    v11 = v12 & 0xFFFFFFFFFEBFFFFFLL;
    *v10 = v11;
  }
  *v10 = v11 & 0xFFFFFFFFFBFFFFFFLL;
LABEL_9:
  v13 = v6 + 48 * v5;
  if ((*(float *)(v13 + 8) != INFINITY
     || *(float *)(v13 + 12) != INFINITY
     || *(_QWORD *)(v6 + 48 * v5 + 24) != *(_QWORD *)(v6 + 48 * v5 + 16))
    && (*(float *)(v13 + 8) != 0.0
     || *(float *)(v13 + 12) != 0.0
     || *(_QWORD *)(v6 + 48 * v5 + 24) != *(_QWORD *)(v6 + 48 * v5 + 16)))
  {
    **(_QWORD **)(a1 + 16) &= ~0x100000000uLL;
  }
  v14 = 0x30FC30007;
  v15 = *(_DWORD *)a2 == v8 && *((_DWORD *)a2 + 1) == v9;
  if (v15 && *((_DWORD *)a2 + 10) == *(_DWORD *)(v6 + 48 * v5 + 40))
    v14 = 0x3FFFFFFF0007;
  result = fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetArc(v4, a2, v5);
  v17 = *a2;
  v18 = *((_DWORD *)a2 + 1);
  if (*(_DWORD *)a2 != v18)
    **(_QWORD **)(a1 + 16) = **(_QWORD **)(a1 + 16) & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (v17 == 0.0)
  {
    v19 = *(unint64_t **)(a1 + 16);
    v21 = *v19 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
    *v19 = v21;
    if (!v18)
    {
      v20 = v21 & 0xFFFFFFFFFD3FFFFFLL | 0x400000;
      *v19 = v20;
      goto LABEL_30;
    }
  }
  else if (!v18)
  {
    v19 = *(unint64_t **)(a1 + 16);
    v20 = *v19;
LABEL_30:
    *v19 = v20 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
  }
  if ((a2[2] != INFINITY || a2[3] != INFINITY || *((_QWORD *)a2 + 3) != *((_QWORD *)a2 + 2))
    && (a2[2] != 0.0 || a2[3] != 0.0 || *((_QWORD *)a2 + 3) != *((_QWORD *)a2 + 2)))
  {
    **(_QWORD **)(a1 + 16) = **(_QWORD **)(a1 + 16) & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  **(_QWORD **)(a1 + 16) &= v14;
  return result;
}

uint64_t fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetArc(_QWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t result;

  v4 = a1[6];
  v5 = (_DWORD *)(v4 + 48 * a3);
  if (!*v5)
    --a1[4];
  if (!*(_DWORD *)(v4 + 48 * a3 + 4))
    --a1[5];
  if (!*a2)
    ++a1[4];
  if (!a2[1])
    ++a1[5];
  *(_QWORD *)v5 = *(_QWORD *)a2;
  v6 = v4 + 48 * a3;
  result = fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=(v6 + 8, (uint64_t)(a2 + 2));
  *(_DWORD *)(v6 + 40) = a2[10];
  return result;
}

uint64_t std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__move_range(uint64_t result, uint64_t a2, unint64_t a3, char *a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = result;
  v7 = *(char **)(result + 8);
  v8 = v7 - a4;
  v9 = a2 + v7 - a4;
  v10 = v7;
  if (v9 < a3)
  {
    v12 = v7 + 8;
    do
    {
      *(v12 - 1) = *(_QWORD *)v9;
      v12[1] = 0;
      v12[2] = 0;
      *v12 = 0;
      result = (uint64_t)std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v12, *(const void **)(v9 + 8), *(_QWORD *)(v9 + 16), (uint64_t)(*(_QWORD *)(v9 + 16) - *(_QWORD *)(v9 + 8)) >> 2);
      v12 += 4;
      v9 += 32;
    }
    while (v9 < a3);
    v10 = (char *)(v12 - 1);
  }
  *(_QWORD *)(v6 + 8) = v10;
  if (v7 != a4)
  {
    v13 = (uint64_t)(v7 - 32);
    v14 = 32 * (v8 >> 5);
    v15 = a2 - 32;
    do
    {
      result = fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=(v13, v15 + v14);
      v13 -= 32;
      v14 -= 32;
    }
    while (v14);
  }
  return result;
}

void sub_1AD78580C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2 - 8;
  _Unwind_Resume(a1);
}

_QWORD *std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::push_back[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD *result;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v4 = (_QWORD *)a1[2];
  if (v4 == (_QWORD *)a1[3])
  {
    v5 = a1[1];
    v6 = v5 - *a1;
    if (v5 <= *a1)
    {
      if (v4 == (_QWORD *)*a1)
        v13 = 1;
      else
        v13 = ((uint64_t)v4 - *a1) >> 4;
      v14 = a1[4];
      v22 = a1[4];
      *(_QWORD *)&v20 = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v14, v13);
      *((_QWORD *)&v20 + 1) = v20 + 32 * (v13 >> 2);
      *(_QWORD *)&v21 = *((_QWORD *)&v20 + 1);
      *((_QWORD *)&v21 + 1) = v20 + 32 * v15;
      std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_at_end_with_size<std::move_iterator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>>(&v20, a1[1], (uint64_t)(a1[2] - a1[1]) >> 5);
      v16 = v21;
      v17 = *(_OWORD *)a1;
      v18 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v20;
      *((_OWORD *)a1 + 1) = v16;
      v20 = v17;
      v21 = v18;
      std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)&v20);
      v4 = (_QWORD *)a1[2];
    }
    else
    {
      v7 = v6 >> 5;
      v8 = v6 >> 5 < -1;
      v9 = (v6 >> 5) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      if ((_QWORD *)v5 == v4)
      {
        v12 = (_QWORD *)(v5 - 32 * (v10 >> 1));
      }
      else
      {
        do
        {
          fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=(v5 + 32 * v11, v5);
          v5 += 32;
        }
        while ((_QWORD *)v5 != v4);
        v4 = (_QWORD *)a1[1];
        v12 = (_QWORD *)(v5 + 32 * v11);
      }
      a1[1] = &v4[4 * v11];
      a1[2] = v12;
      v4 = v12;
    }
  }
  *v4 = *(_QWORD *)a2;
  v4[2] = 0;
  v4[3] = 0;
  v4[1] = 0;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v4 + 1, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  a1[2] += 32;
  return result;
}

void sub_1AD785954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>(v7, a3, a1[1], (_QWORD *)a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

_QWORD *std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_at_end_with_size<std::move_iterator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>>(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;

  v3 = result;
  v4 = result[2];
  if (a3)
  {
    v6 = (_QWORD *)(v4 + 8);
    v7 = 32 * a3;
    v4 += 32 * a3;
    do
    {
      *(v6 - 1) = *(_QWORD *)a2;
      v6[1] = 0;
      v6[2] = 0;
      *v6 = 0;
      result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v6, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
      v6 += 4;
      a2 += 32;
      v7 -= 32;
    }
    while (v7);
  }
  v3[2] = v4;
  return result;
}

void sub_1AD785A94(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2 - 8;
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = *(_QWORD *)v6;
      v4[2] = 0;
      v4[3] = 0;
      v4[1] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v4 + 1, *(const void **)(v6 + 8), *(_QWORD *)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 2);
      v4 = v11 + 4;
      v11 += 4;
      v6 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1AD785B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 - 24);
    if (v3)
    {
      *(_QWORD *)(v1 - 16) = v3;
      operator delete(v3);
    }
    v1 -= 32;
  }
}

void fst::Connect<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  int v13;
  void *__p;
  char *v15;
  char *v16;
  uint64_t v17[11];
  uint64_t v18;
  void *v19[3];
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;

  v20 = 0;
  v21 = 0;
  v22 = 0;
  memset(v19, 0, sizeof(v19));
  v18 = 0;
  v17[0] = 0;
  v17[1] = (uint64_t)&v20;
  v17[2] = (uint64_t)v19;
  v17[3] = (uint64_t)&v18;
  fst::DfsVisit<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(a1, v17, 0);
  __p = 0;
  v15 = 0;
  v16 = 0;
  v2 = v21;
  if (v21)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      if ((v20[v4 >> 6] & (1 << v4)) == 0 || (*((_QWORD *)v19[0] + (v4 >> 6)) & (1 << v4)) == 0)
      {
        if (v3 >= v16)
        {
          v6 = (char *)__p;
          v7 = (v3 - (_BYTE *)__p) >> 2;
          v8 = v7 + 1;
          if ((unint64_t)(v7 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v9 = v16 - (_BYTE *)__p;
          if ((v16 - (_BYTE *)__p) >> 1 > v8)
            v8 = v9 >> 1;
          if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
            v10 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v10 = v8;
          if (v10)
          {
            v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v16, v10);
            v6 = (char *)__p;
            v3 = v15;
          }
          else
          {
            v11 = 0;
          }
          v12 = &v11[4 * v7];
          *(_DWORD *)v12 = v4;
          v5 = v12 + 4;
          while (v3 != v6)
          {
            v13 = *((_DWORD *)v3 - 1);
            v3 -= 4;
            *((_DWORD *)v12 - 1) = v13;
            v12 -= 4;
          }
          __p = v12;
          v15 = v5;
          v16 = &v11[4 * v10];
          if (v6)
            operator delete(v6);
        }
        else
        {
          *(_DWORD *)v3 = v4;
          v5 = v3 + 4;
        }
        v15 = v5;
        v2 = v21;
        v3 = v5;
      }
      ++v4;
    }
    while (v2 > v4);
  }
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 216))(a1, &__p);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, 0x50000000000, 0x50000000000);
  if (__p)
  {
    v15 = (char *)__p;
    operator delete(__p);
  }
  if (v19[0])
    operator delete(v19[0]);
  if (v20)
    operator delete(v20);
}

void sub_1AD785DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;
  void *v14;

  v13 = *(void **)(v11 - 112);
  if (v13)
    operator delete(v13);
  v14 = *(void **)(v11 - 88);
  if (v14)
    operator delete(v14);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__construct_one_at_end[abi:ne180100]<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)v3 = *(_DWORD *)a2;
  *(_QWORD *)(v3 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v3 + 16), *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
  *(_QWORD *)(a1 + 8) = v3 + 40;
  return result;
}

void sub_1AD785E40(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__push_back_slow_path<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x333333333333333)
    v9 = 0x666666666666666;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[40 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[40 * v9];
  *(_DWORD *)v11 = *(_DWORD *)a2;
  *((_QWORD *)v11 + 1) = *(_QWORD *)(a2 + 8);
  *((_QWORD *)v11 + 3) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)v11 + 2, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
  v15 += 40;
  std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1AD785F58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>*>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>*>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>*>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>*>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  char v16;
  __int128 v17;
  __int128 v18;

  v7 = a7;
  *(_QWORD *)&v18 = a6;
  *((_QWORD *)&v18 + 1) = a7;
  v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  v16 = 0;
  if (a3 == a5)
  {
    v13 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v10 = *(_DWORD *)(v9 - 40);
      v9 -= 40;
      v11 = *(_QWORD *)(v9 + 8);
      *(_QWORD *)(v7 - 24) = 0;
      v12 = (_QWORD *)(v7 - 24);
      *((_DWORD *)v12 - 4) = v10;
      *(v12 - 1) = v11;
      v12[1] = 0;
      v12[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v12, *(const void **)(v9 + 16), *(_QWORD *)(v9 + 24), (uint64_t)(*(_QWORD *)(v9 + 24) - *(_QWORD *)(v9 + 16)) >> 2);
      v7 = *((_QWORD *)&v18 + 1) - 40;
      *((_QWORD *)&v18 + 1) -= 40;
    }
    while (v9 != a5);
    v13 = v18;
  }
  v16 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
  return v13;
}

void sub_1AD7860A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 + 16);
    if (v3)
    {
      *(_QWORD *)(v1 + 24) = v3;
      operator delete(v3);
    }
    v1 += 40;
  }
}

uint64_t std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    *(_QWORD *)(a1 + 16) = v2 - 40;
    v5 = *(void **)(v2 - 24);
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 40;
    }
  }
}

int *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>> &,std::__wrap_iter<int *>>(int *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = &a1[v6 + 1];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3
      && fst::ShortestPathCompare<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::operator()(a2, *v9, a1[v6 + 2]))
    {
      ++v9;
      v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>> &,std::__wrap_iter<int *>>(uint64_t result, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  int *v8;
  int *v9;
  int v10;
  int *v11;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = (int *)(result + 4 * (v4 >> 1));
    v9 = (int *)(a2 - 4);
    result = fst::ShortestPathCompare<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::operator()(a3, *v8, *(_DWORD *)(a2 - 4));
    if ((_DWORD)result)
    {
      v10 = *v9;
      do
      {
        v11 = v8;
        *v9 = *v8;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (int *)(v6 + 4 * v7);
        result = fst::ShortestPathCompare<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::operator()(a3, *v8, v10);
        v9 = v11;
      }
      while ((result & 1) != 0);
      *v11 = v10;
    }
  }
  return result;
}

uint64_t fst::ShortestPathCompare<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::operator()(uint64_t **a1, int a2, int a3)
{
  uint64_t v6;
  int *v7;
  int *v8;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v21;
  char v22;
  int32x2_t v24;
  void *__p;
  _BYTE *v26;
  int32x2_t v27;
  void *v28;
  _BYTE *v29;
  void *v30[2];
  __int128 v31;
  __int128 v32;
  __int128 v33;

  v6 = **a1;
  v7 = (int *)(v6 + 40 * a2);
  v8 = (int *)(v6 + 40 * a3);
  v9 = *v7;
  v10 = *((_DWORD *)a1 + 4);
  if (*v7 == v10)
  {
    v32 = 0u;
    v33 = 0u;
  }
  else
  {
    v11 = *a1[1];
    if (v9 >= (unint64_t)((a1[1][1] - v11) >> 5))
    {
      v32 = (unint64_t)vdup_n_s32(0x7F800000u);
      v33 = 0uLL;
      v9 = v10;
    }
    else
    {
      v12 = (unint64_t *)(v11 + 32 * v9);
      v32 = *v12;
      v33 = 0uLL;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)&v32 + 1, (const void *)v12[1], v12[2], (uint64_t)(v12[2] - v12[1]) >> 2);
      v9 = *((_DWORD *)a1 + 4);
    }
  }
  v13 = *v8;
  if ((_DWORD)v13 == v9)
  {
    *(_OWORD *)v30 = 0u;
    v31 = 0u;
  }
  else
  {
    v14 = *a1[1];
    if (v13 >= (a1[1][1] - v14) >> 5)
    {
      v30[0] = (void *)vdup_n_s32(0x7F800000u);
      v31 = 0uLL;
      v30[1] = 0;
    }
    else
    {
      v15 = v14 + 32 * v13;
      v30[0] = *(void **)v15;
      v31 = 0uLL;
      v30[1] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v30[1], *(const void **)(v15 + 8), *(_QWORD *)(v15 + 16), (uint64_t)(*(_QWORD *)(v15 + 16) - *(_QWORD *)(v15 + 8)) >> 2);
    }
  }
  fst::Times<fst::LatticeWeightTpl<float>,int>((float32x2_t *)&v32, (float32x2_t *)(v6 + 40 * a2 + 8), &v27);
  fst::Times<fst::LatticeWeightTpl<float>,int>((float32x2_t *)v30, (float32x2_t *)(v6 + 40 * a3 + 8), &v24);
  v16 = *((_DWORD *)a1 + 4);
  v17 = *v8;
  v18 = (uint64_t)(a1 + 3);
  if (*v7 == v16 && v17 != v16)
  {
    v22 = fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::operator()(v18, (uint64_t)&v24, (uint64_t)&v27);
    if ((v22 & 1) != 0)
    {
LABEL_22:
      v21 = 1;
      goto LABEL_35;
    }
    if ((*(float *)v27.i32 == *(float *)v24.i32 && *(float *)&v27.i32[1] == *(float *)&v24.i32[1]
       || vabds_f32(*(float *)v27.i32 + *(float *)&v27.i32[1], *(float *)v24.i32 + *(float *)&v24.i32[1]) <= *((float *)a1 + 5))
      && v29 - (_BYTE *)v28 == v26 - (_BYTE *)__p)
    {
      v21 = memcmp(v28, __p, v29 - (_BYTE *)v28) == 0;
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  if (*v7 == v16 || v17 != v16)
  {
    v21 = fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::operator()(v18, (uint64_t)&v24, (uint64_t)&v27);
    goto LABEL_35;
  }
  if (!fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::operator()(v18, (uint64_t)&v24, (uint64_t)&v27))
  {
LABEL_34:
    v21 = 0;
    goto LABEL_35;
  }
  if ((*(float *)v27.i32 != *(float *)v24.i32 || *(float *)&v27.i32[1] != *(float *)&v24.i32[1])
    && vabds_f32(*(float *)v27.i32 + *(float *)&v27.i32[1], *(float *)v24.i32 + *(float *)&v24.i32[1]) > *((float *)a1 + 5)
    || v29 - (_BYTE *)v28 != v26 - (_BYTE *)__p)
  {
    goto LABEL_22;
  }
  v21 = memcmp(v28, __p, v29 - (_BYTE *)v28) != 0;
LABEL_35:
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  if (v30[1])
  {
    *(void **)&v31 = v30[1];
    operator delete(v30[1]);
  }
  if (*((_QWORD *)&v32 + 1))
  {
    *(_QWORD *)&v33 = *((_QWORD *)&v32 + 1);
    operator delete(*((void **)&v32 + 1));
  }
  return v21;
}

void sub_1AD7865D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  uint64_t v19;
  void *v21;

  v21 = *(void **)(v19 - 72);
  if (v21)
  {
    *(_QWORD *)(v19 - 64) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 40)
  {
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

_QWORD *fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::DeterminizeFst<fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  fst *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _DWORD *v14;
  int v15;
  void *__p[2];
  char v18;
  char v19;

  *a1 = &unk_1E5D1DC18;
  a1[1] = 0;
  if (!(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x10000, 1))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v10 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)__p);
    v11 = (_QWORD *)fst::cerr(v10);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"DeterminizeFst:", 15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" distance to final states computed for acceptors only", 53);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
    if (v18 < 0)
      operator delete(__p[0]);
    *(_QWORD *)(a1[1] + 8) |= 4uLL;
  }
  v13 = (_QWORD *)operator new();
  fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(v13, a2, a3, a4, a5);
  v14 = (_DWORD *)a1[1];
  if (v14)
  {
    v15 = v14[14] - 1;
    v14[14] = v15;
    if (!v15)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
  }
  a1[1] = v13;
  return a1;
}

void sub_1AD78682C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  _QWORD *v18;
  _DWORD *v20;
  int v21;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  *v18 = &unk_1E5D27318;
  v20 = (_DWORD *)v18[1];
  if (v20)
  {
    v21 = v20[14] - 1;
    v20[14] = v21;
    if (!v21)
      (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
  }
  _Unwind_Resume(a1);
}

void fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~DeterminizeFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D27318;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Start(uint64_t a1)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Start(*(_QWORD *)(a1 + 8));
}

_QWORD *fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Final@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Final(*(_QWORD *)(a1 + 8), a2, a3);
}

unint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::NumArcs(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::NumArcs(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::NumInputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::NumInputEpsilons(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::NumOutputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::NumOutputEpsilons(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

_QWORD *fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Copy(uint64_t a1, int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::DeterminizeFst(v4, a1, a2);
  return v4;
}

void sub_1AD786A4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::InitStateIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &unk_1E5D200E8;
  *(_QWORD *)(v4 + 8) = a1;
  v5 = *a1;
  *(_QWORD *)(v4 + 16) = a1[1];
  *(_DWORD *)(v4 + 24) = 0;
  result = (*(uint64_t (**)(uint64_t *))(v5 + 24))(a1);
  *(_QWORD *)v4 = &unk_1E5D1C2E8;
  *a2 = v4;
  return result;
}

void sub_1AD786B08(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::InitArcIterator(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

_QWORD *fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  fst *v13;
  _QWORD *v14;
  uint64_t *v15;
  void *__p[2];
  char v18;
  char v19;

  v10 = fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::DeterminizeFstImplBase<fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>((uint64_t)a1, a2, a5);
  *(_QWORD *)v10 = &unk_1E5D20818;
  *(_DWORD *)(v10 + 144) = *(_DWORD *)(a5 + 16);
  *(_QWORD *)(v10 + 152) = a3;
  *(_QWORD *)(v10 + 160) = a4;
  v11 = *(_QWORD **)(a5 + 32);
  if (!v11)
  {
    v11 = (_QWORD *)operator new();
    *v11 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  }
  a1[22] = v11;
  v12 = *(_QWORD **)(a5 + 40);
  if (!v12)
  {
    v12 = (_QWORD *)operator new();
    *v12 = 0;
    v12[2] = v12 + 1;
    v12[3] = v12 + 1;
    std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set((uint64_t)(v12 + 4), 0, v12 + 2, v12 + 3);
    v12[11] = 0;
    v12[12] = 0;
    v12[13] = 0;
  }
  a1[23] = v12;
  if (!(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x10000, 1))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v13 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)__p);
    v14 = (_QWORD *)fst::cerr(v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"DeterminizeFst: argument not an acceptor", 40);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
    if (v18 < 0)
      operator delete(__p[0]);
    a1[1] |= 4uLL;
  }
  v15 = (uint64_t *)a1[20];
  if (v15)
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__clear[abi:ne180100](v15);
  return a1;
}

void sub_1AD786CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  _QWORD *v18;
  uint64_t v20;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  *v18 = &unk_1E5D21E10;
  v20 = v18[17];
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~CacheBaseImpl(v18);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::DeterminizeFstImplBase<fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string __str;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::CacheBaseImpl(a1, a3) = &unk_1E5D21E10;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  std::string::basic_string[abi:ne180100]<0>(&__str, "determinize");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v8 = *(_DWORD *)(a3 + 24) != 1 || *(_BYTE *)(a3 + 28) != 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::DeterminizeProperties(v6, *(_DWORD *)(a3 + 20) != 0, v8) & 0x3FFFFFFF0004;
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v10 = *(_QWORD *)(a1 + 40);
  if (v10 != v9)
  {
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (v9)
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    else
      v11 = 0;
    *(_QWORD *)(a1 + 40) = v11;
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v13 = *(_QWORD *)(a1 + 48);
  if (v13 != v12)
  {
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    if (v12)
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    else
      v14 = 0;
    *(_QWORD *)(a1 + 48) = v14;
  }
  return a1;
}

void sub_1AD786F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(_QWORD *a1)
{
  fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 4, 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

_QWORD *fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::Copy(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(v2, a1);
  return v2;
}

void sub_1AD787024(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405CF36722);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::Expand(_QWORD *a1, int a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  BOOL v7;
  uint64_t *v8;
  _QWORD *v9[2];

  v9[0] = 0;
  v9[1] = 0;
  v8 = (uint64_t *)v9;
  fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::GetLabelMap(a1, a2, &v8);
  v4 = v8;
  if (v8 != (uint64_t *)v9)
  {
    do
    {
      fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::AddArc((uint64_t)a1, a2, (uint64_t)(v4 + 5));
      v5 = (uint64_t *)v4[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (uint64_t *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (uint64_t *)v4[2];
          v7 = *v6 == (_QWORD)v4;
          v4 = v6;
        }
        while (!v7);
      }
      v4 = v6;
    }
    while (v6 != (uint64_t *)v9);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetArcs((uint64_t)a1, a2);
  std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>>>::destroy((uint64_t)&v8, v9[0]);
}

void sub_1AD7870FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::ComputeStart(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t State;
  int v6;
  void *__p[2];
  __int128 v8;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 24))(*(_QWORD *)(a1 + 136));
  if (v2 == -1)
    return 0xFFFFFFFFLL;
  v6 = v2;
  *(_OWORD *)__p = 0u;
  v8 = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p[1], 0, 0, 0);
  v3 = operator new();
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = -1;
  *(_QWORD *)v3 = std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__create_node[abi:ne180100]<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> const&>(v3, 0, (uint64_t)&v6);
  *(_BYTE *)(v3 + 8) = 0;
  State = fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::FindState(a1, (float32x2_t **)v3);
  if (__p[1])
  {
    *(void **)&v8 = __p[1];
    operator delete(__p[1]);
  }
  return State;
}

void sub_1AD7871E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::ComputeFinal@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  float32x2_t **v4;
  float32x2_t *v5;
  uint64_t v6;
  float v7;
  float v8;
  int32x2_t *v9;
  int *v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int32x2_t v21;
  void *v22;
  _BYTE *v23;
  uint64_t v24;
  float32x2_t v25;
  void *v26;
  void *v27;
  int32x2_t v28;
  void *v29;
  _BYTE *v30;
  int32x2_t v31;
  void *__p;
  _BYTE *v33;
  uint64_t v34;

  v4 = *(float32x2_t ***)(*(_QWORD *)(*(_QWORD *)(result + 184) + 88) + 8 * a2);
  *(int32x2_t *)a3 = vdup_n_s32(0x7F800000u);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  v5 = *v4;
  if (*v4)
  {
    v6 = result;
    while (1)
    {
      (*(void (**)(float32x2_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v6 + 136) + 32))(&v25, *(_QWORD *)(v6 + 136), v5[1].u32[0]);
      fst::Times<fst::LatticeWeightTpl<float>,int>(v5 + 2, &v25, &v28);
      v7 = *(float *)a3;
      v8 = *(float *)a3 + *(float *)(a3 + 4);
      v9 = (int32x2_t *)a3;
      if (v8 >= (float)(*(float *)v28.i32 + *(float *)&v28.i32[1]))
      {
        if (v8 > (float)(*(float *)v28.i32 + *(float *)&v28.i32[1]))
          goto LABEL_8;
        v9 = (int32x2_t *)a3;
        if (v7 >= *(float *)v28.i32)
          break;
      }
LABEL_9:
      v31 = *v9;
      v33 = 0;
      v34 = 0;
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)&v9[1], *(_QWORD *)&v9[2], (uint64_t)(*(_QWORD *)&v9[2] - *(_QWORD *)&v9[1]) >> 2);
      *(int32x2_t *)a3 = v31;
      if (&v31 != (int32x2_t *)a3)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a3 + 8), (char *)__p, (uint64_t)v33, (v33 - (_BYTE *)__p) >> 2);
      if (__p)
      {
        v33 = __p;
        operator delete(__p);
      }
      if (v29)
      {
        v30 = v29;
        operator delete(v29);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v21 = *(int32x2_t *)a3;
      v23 = 0;
      v24 = 0;
      v22 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v22, *(const void **)(a3 + 8), *(_QWORD *)(a3 + 16), (uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 2);
      v31 = v21;
      v33 = 0;
      v34 = 0;
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v22, (uint64_t)v23, (v23 - (_BYTE *)v22) >> 2);
      *(int32x2_t *)a3 = v31;
      if (&v31 != (int32x2_t *)a3)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a3 + 8), (char *)__p, (uint64_t)v33, (v33 - (_BYTE *)__p) >> 2);
      if (__p)
      {
        v33 = __p;
        operator delete(__p);
      }
      if (v22)
      {
        v23 = v22;
        operator delete(v22);
      }
      result = fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Member(a3);
      if ((result & 1) == 0)
        *(_QWORD *)(v6 + 8) |= 4uLL;
      v5 = (float32x2_t *)*v5;
      if (!v5)
        return result;
    }
    if (v7 <= *(float *)v28.i32)
    {
      v10 = *(int **)(a3 + 8);
      v11 = *(_QWORD *)(a3 + 16) - (_QWORD)v10;
      v12 = v11 >> 2;
      v13 = (int *)v29;
      v14 = (unint64_t)(v30 - (_BYTE *)v29) >> 2;
      if ((int)(v11 >> 2) <= (int)v14)
      {
        v9 = (int32x2_t *)a3;
        if ((int)v12 < 1)
          goto LABEL_9;
        v9 = (int32x2_t *)a3;
        if ((int)v12 < (int)v14)
          goto LABEL_9;
        v15 = (v11 >> 2) - 1;
        while (1)
        {
          v17 = *v10++;
          v16 = v17;
          v19 = *v13++;
          v18 = v19;
          if (v16 < v19)
            break;
          if (v16 > v18 || v15-- == 0)
          {
            v9 = (int32x2_t *)a3;
            goto LABEL_9;
          }
        }
      }
    }
LABEL_8:
    v9 = &v28;
    goto LABEL_9;
  }
  return result;
}

void sub_1AD787464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  uint64_t v23;
  void **v24;
  void *v26;

  if (__p)
    operator delete(__p);
  if (a10)
    operator delete(a10);
  v26 = *v24;
  if (*v24)
  {
    *(_QWORD *)(v23 + 16) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::CacheBaseImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  *(_QWORD *)a1 = &unk_1E5D22630;
  *(_QWORD *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1B608;
  *(_BYTE *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 8);
  v4 = operator new();
  fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::VectorCacheStore((_QWORD *)v4, (_BYTE *)a2);
  v5 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(v4 + 72) = v5 == 0;
  *(_DWORD *)(v4 + 76) = -1;
  *(_QWORD *)(v4 + 80) = 0;
  *(_BYTE *)(v4 + 88) = *(_BYTE *)a2;
  if (v5 <= 0x1FA0)
    v5 = 8096;
  *(_QWORD *)(v4 + 96) = v5;
  *(_BYTE *)(v4 + 104) = 0;
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)(a1 + 120) = v4;
  *(_BYTE *)(a1 + 128) = 1;
  return a1;
}

void sub_1AD7875F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  MEMORY[0x1AF44D190](v2, 0x10A0C407A9BBF1FLL);
  v4 = *(void **)(v1 + 72);
  if (v4)
    operator delete(v4);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

void fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~CacheBaseImpl(_QWORD *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~CacheBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::VectorCacheStore(_QWORD *a1, _BYTE *a2)
{
  *(_BYTE *)a1 = *a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  a1[7] = 0;
  fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Clear(a1);
  a1[7] = a1[5];
  return a1;
}

void sub_1AD7876B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;
  void **v4;
  void *v6;

  v4 = v3;
  std::__list_imp<char *>::clear(v2);
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

_QWORD *fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Clear(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = a1[2];
  if (v2 != a1[1])
  {
    v3 = 0;
    v2 = a1[1];
    do
    {
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Destroy(*(_QWORD *)(v2 + 8 * v3++));
      v2 = a1[1];
    }
    while (v3 < (a1[2] - v2) >> 3);
  }
  a1[2] = v2;
  return std::__list_imp<char *>::clear(a1 + 4);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~CacheBaseImpl(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *a1 = &unk_1E5D1B608;
  v2 = (_QWORD *)a1[15];
  if (v2)
  {
    v3 = fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~VectorCacheStore(v2);
    MEMORY[0x1AF44D190](v3, 0x10A0C407A9BBF1FLL);
  }
  v4 = (void *)a1[9];
  if (v4)
    operator delete(v4);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~FstImpl((uint64_t)a1);
}

_QWORD *fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~VectorCacheStore(_QWORD *a1)
{
  void *v2;

  fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Clear(a1);
  std::__list_imp<char *>::clear(a1 + 4);
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::CompactHashBiTable(uint64_t a1, size_t a2)
{
  *(_QWORD *)(a1 + 8) = a1;
  *(_QWORD *)(a1 + 16) = a1;
  std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set(a1 + 24, a2, (_QWORD *)(a1 + 8), (_QWORD *)(a1 + 16));
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  if (a2)
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 80), a2);
  return a1;
}

void sub_1AD78783C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 88) = v5;
    operator delete(v5);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set(uint64_t a1, size_t a2, _QWORD *a3, _QWORD *a4)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = *a3;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_QWORD *)(a1 + 48) = *a4;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1AD7878A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 40));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__do_rehash<true>(a1, prime);
  }
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &unk_1E5D20818;
  v2 = (_QWORD *)a1[22];
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    MEMORY[0x1AF44D190](v2, 0x20C4093837F09);
  }
  v3 = a1[23];
  if (v3)
  {
    v4 = fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::~DefaultDeterminizeStateTable(v3);
    MEMORY[0x1AF44D190](v4, 0x10E0C400200E20DLL);
  }
  *a1 = &unk_1E5D21E10;
  v5 = a1[17];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~CacheBaseImpl(a1);
}

uint64_t fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::~DefaultDeterminizeStateTable(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a1 + 88;
  v2 = *(_QWORD **)(a1 + 88);
  v3 = *(_QWORD *)(v4 + 8);
  if ((int)((unint64_t)(v3 - (_QWORD)v2) >> 3) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = v2[v5];
      if (v6)
      {
        std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::clear((_QWORD **)v2[v5]);
        MEMORY[0x1AF44D190](v6, 0x1020C405F07FB98);
        v2 = *(_QWORD **)(a1 + 88);
        v3 = *(_QWORD *)(a1 + 96);
      }
      ++v5;
    }
    while (v5 < (int)((unint64_t)(v3 - (_QWORD)v2) >> 3));
  }
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 32);
  return a1;
}

void std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::clear(_QWORD **a1)
{
  _QWORD *i;
  _QWORD *v3;

  for (i = *a1; i; i = v3)
  {
    v3 = (_QWORD *)*i;
    std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__delete_node[abi:ne180100]<>((int)a1, i);
  }
  *a1 = 0;
}

void std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__delete_node[abi:ne180100]<>(int a1, _QWORD *__p)
{
  void *v3;

  v3 = (void *)__p[3];
  if (v3)
  {
    __p[4] = v3;
    operator delete(v3);
  }
  operator delete(__p);
}

_QWORD *fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  size_t *v8;
  size_t v9;
  fst *v10;
  _QWORD *v11;
  void *__p[2];
  char v14;
  char v15;

  v4 = fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::DeterminizeFstImplBase((uint64_t)a1, a2);
  *(_QWORD *)v4 = &unk_1E5D20818;
  *(_DWORD *)(v4 + 144) = *(_DWORD *)(a2 + 144);
  *(_QWORD *)(v4 + 152) = 0;
  *(_QWORD *)(v4 + 160) = 0;
  v5 = (_QWORD *)operator new();
  if (a1[17])
    v6 = a1[17];
  else
    v6 = **(_QWORD **)(a2 + 176);
  *v5 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 88))(v6, 0);
  a1[22] = v5;
  v7 = (_QWORD *)operator new();
  v8 = *(size_t **)(a2 + 184);
  v9 = *v8;
  *v7 = *v8;
  fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::CompactHashBiTable((uint64_t)(v7 + 1), v9);
  a1[23] = v7;
  if (*(_QWORD *)(a2 + 160))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v10 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    v11 = (_QWORD *)fst::cerr(v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"DeterminizeFsaImpl: cannot copy with out_dist vector", 52);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0)
      operator delete(__p[0]);
    a1[1] |= 4uLL;
  }
  return a1;
}

void sub_1AD787C9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  _QWORD *v18;
  uint64_t v20;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  *v18 = &unk_1E5D21E10;
  v20 = v18[17];
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~CacheBaseImpl(v18);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::DeterminizeFstImplBase(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string __str;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::CacheBaseImpl(a1, a2, 0) = &unk_1E5D21E10;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 136) + 88))(*(_QWORD *)(a2 + 136), 1);
  std::string::basic_string[abi:ne180100]<0>(&__str, "determinize");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) & 0x3FFFFFFF0004;
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 40);
  if (v5 != v4)
  {
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    if (v4)
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    else
      v6 = 0;
    *(_QWORD *)(a1 + 40) = v6;
  }
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 48);
  if (v8 != v7)
  {
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v7)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    else
      v9 = 0;
    *(_QWORD *)(a1 + 48) = v9;
  }
  return a1;
}

void sub_1AD787E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  if (a15 < 0)
    operator delete(__p);
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::CacheBaseImpl(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  char v13[8];
  unint64_t v14;

  *(_QWORD *)a1 = &unk_1E5D22630;
  *(_QWORD *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1B608;
  *(_BYTE *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v6 = operator new();
  v7 = *(_QWORD *)(a1 + 112);
  v13[0] = *(_BYTE *)(a1 + 104);
  v14 = v7;
  fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::VectorCacheStore((_QWORD *)v6, v13);
  v8 = v14;
  *(_BYTE *)(v6 + 72) = v14 == 0;
  *(_DWORD *)(v6 + 76) = -1;
  *(_QWORD *)(v6 + 80) = 0;
  *(_BYTE *)(v6 + 88) = v13[0];
  if (v8 <= 0x1FA0)
    v8 = 8096;
  *(_QWORD *)(v6 + 96) = v8;
  *(_BYTE *)(v6 + 104) = 0;
  *(_QWORD *)(v6 + 112) = 0;
  *(_QWORD *)(a1 + 120) = v6;
  if (*(_BYTE *)(a2 + 128))
    v9 = 1;
  else
    v9 = a3 ^ 1;
  *(_BYTE *)(a1 + 128) = v9;
  if (((a3 ^ 1) & 1) == 0)
  {
    v10 = *(_QWORD *)(a2 + 120);
    fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::operator=(v6, v10);
    v11 = *(_OWORD *)(v10 + 104);
    *(_OWORD *)(v6 + 88) = *(_OWORD *)(v10 + 88);
    *(_OWORD *)(v6 + 104) = v11;
    *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    std::vector<BOOL>::operator=((void **)(a1 + 72), a2 + 72);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  }
  return a1;
}

void sub_1AD78802C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  MEMORY[0x1AF44D190](v3, 0x10A0C407A9BBF1FLL);
  if (*v2)
    operator delete(*v2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

void **std::vector<BOOL>::operator=(void **a1, uint64_t a2)
{
  unint64_t v4;
  void *v5;
  void *v6;

  if (a1 != (void **)a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (v4)
    {
      if (v4 > (_QWORD)a1[2] << 6)
      {
        v5 = *a1;
        if (*a1)
        {
          operator delete(v5);
          *a1 = 0;
          a1[1] = 0;
          a1[2] = 0;
          v4 = *(_QWORD *)(a2 + 8);
        }
        std::vector<BOOL>::__vallocate[abi:ne180100](a1, v4);
        v4 = *(_QWORD *)(a2 + 8);
      }
      memmove(*a1, *(const void **)a2, (((v4 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
      v6 = *(void **)(a2 + 8);
    }
    else
    {
      v6 = 0;
    }
    a1[1] = v6;
  }
  return a1;
}

uint64_t fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  char *MutableState;

  if (a1 != a2)
  {
    fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::CopyStates((_QWORD *)a1, a2);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
    if (*(_DWORD *)(a2 + 76) == -1)
      MutableState = 0;
    else
      MutableState = fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::GetMutableState(a1, 0);
    *(_QWORD *)(a1 + 80) = MutableState;
  }
  return a1;
}

char *fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::GetMutableState(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _DWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;

  v4 = a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v5 = a1 + 8;
  if (a2 >= (unint64_t)((v7 - v6) >> 3))
  {
    v13 = 0;
    std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize(v5, a2 + 1, &v13);
  }
  else
  {
    v8 = *(char **)(v6 + 8 * a2);
    if (v8)
      return v8;
  }
  v8 = (char *)operator new(0x50uLL);
  *(int32x2_t *)v8 = vdup_n_s32(0x7F800000u);
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *((_QWORD *)v8 + 9) = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v4) = v8;
  if (*(_BYTE *)a1)
  {
    v9 = operator new(0x18uLL);
    v9[4] = a2;
    v11 = *(_QWORD *)(a1 + 32);
    v10 = (_QWORD *)(a1 + 32);
    *(_QWORD *)v9 = v11;
    *((_QWORD *)v9 + 1) = v10;
    *(_QWORD *)(v11 + 8) = v9;
    *v10 = v9;
    ++v10[2];
  }
  return v8;
}

void fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::CopyStates(_QWORD *a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Clear(a1);
  v4 = (char **)(a1 + 1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)a1 + 1, (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a2 + 16) != v5)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v5 + 8 * v6);
      if (v7)
      {
        v8 = operator new(0x50uLL);
        fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::CacheState((uint64_t)v8, v7);
        if (*(_BYTE *)a1)
        {
          v9 = operator new(0x18uLL);
          v9[4] = v6;
          v10 = a1[4];
          *(_QWORD *)v9 = v10;
          *((_QWORD *)v9 + 1) = a1 + 4;
          *(_QWORD *)(v10 + 8) = v9;
          a1[4] = v9;
          ++a1[6];
        }
      }
      else
      {
        v8 = 0;
      }
      v12 = (_QWORD *)a1[2];
      v11 = a1[3];
      if ((unint64_t)v12 >= v11)
      {
        v14 = ((char *)v12 - *v4) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v15 = v11 - (_QWORD)*v4;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v17);
        else
          v18 = 0;
        v19 = &v18[8 * v14];
        *(_QWORD *)v19 = v8;
        v13 = v19 + 8;
        v21 = (char *)a1[1];
        v20 = (char *)a1[2];
        if (v20 != v21)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *((_QWORD *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          v20 = *v4;
        }
        a1[1] = v19;
        a1[2] = v13;
        a1[3] = &v18[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v12 = v8;
        v13 = v12 + 1;
      }
      a1[2] = v13;
      ++v6;
      v5 = *(_QWORD *)(a2 + 8);
    }
    while (v6 < (*(_QWORD *)(a2 + 16) - v5) >> 3);
  }
}

uint64_t fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::CacheState(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 8), *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*>,std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*>>((_QWORD *)(a1 + 48), v5, v6, 0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 4));
  *(_QWORD *)(a1 + 72) = *(unsigned int *)(a2 + 72);
  return a1;
}

void sub_1AD788460(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*>,std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*>>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1AD7884E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x555555555555556)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = *(_QWORD *)v6;
      v7 = *(_QWORD *)(v6 + 8);
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)(v4 + 8) = v7;
      *(_QWORD *)(v4 + 24) = 0;
      *(_QWORD *)(v4 + 32) = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v4 + 16), *(const void **)(v6 + 16), *(_QWORD *)(v6 + 24), (uint64_t)(*(_QWORD *)(v6 + 24) - *(_QWORD *)(v6 + 16)) >> 2);
      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v6 + 40);
      v4 = v12 + 48;
      v12 += 48;
      v6 += 48;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1AD788604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 - 32);
    if (v3)
    {
      *(_QWORD *)(v1 - 24) = v3;
      operator delete(v3);
    }
    v1 -= 48;
  }
}

void std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::__append((void **)a1, a2 - v3, a3);
  }
}

void std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::__append(void **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 3)
  {
    if (a2)
    {
      v16 = 8 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 3);
    if (v11 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 3;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 2 > v11)
      v11 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[8 * v12];
    v19 = &v18[8 * a2];
    v20 = 8 * a2;
    v21 = v18;
    do
    {
      *(_QWORD *)v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    v22 = &v15[8 * v14];
    v24 = (char *)*a1;
    v23 = (char *)a1[1];
    if (v23 != *a1)
    {
      do
      {
        v25 = *((_QWORD *)v23 - 1);
        v23 -= 8;
        *((_QWORD *)v18 - 1) = v25;
        v18 -= 8;
      }
      while (v23 != v24);
      v23 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::GetLabelMap(_QWORD *a1, int a2, uint64_t **a3)
{
  float32x2_t *v5;
  uint64_t v6;
  uint64_t v7;
  float32x2_t *v8;
  __int32 v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  int32x2_t v16;
  void *__p;
  _BYTE *v18;
  __int32 v19;
  int32x2_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[3];
  _DWORD *v25;
  unint64_t v26;

  v5 = **(float32x2_t ***)(*(_QWORD *)(a1[23] + 88) + 8 * a2);
  if (!v5)
    goto LABEL_21;
  do
  {
    v6 = v5[1].u32[0];
    v7 = a1[17];
    v26 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v7 + 136))(v7, v6, v24);
    while (1)
    {
      if (!v24[0])
      {
        if (v26 >= v24[2])
          goto LABEL_18;
        goto LABEL_8;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v24[0] + 24))(v24[0]))
        break;
      if (v24[0])
      {
        v8 = (float32x2_t *)(*(uint64_t (**)(void))(*(_QWORD *)v24[0] + 32))();
        goto LABEL_9;
      }
LABEL_8:
      v8 = (float32x2_t *)(v24[1] + 48 * v26);
LABEL_9:
      v9 = v8[5].i32[0];
      fst::Times<fst::LatticeWeightTpl<float>,int>(v5 + 2, v8 + 1, &v16);
      v19 = v9;
      v20 = v16;
      v22 = 0;
      v23 = 0;
      v21 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v21, __p, (uint64_t)v18, (v18 - (_BYTE *)__p) >> 2);
      if (__p)
      {
        v18 = __p;
        operator delete(__p);
      }
      fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::FilterArc(a1[22], (int *)v8, (uint64_t)&v5[1], (uint64_t)&v19, a3);
      if (v21)
      {
        v22 = v21;
        operator delete(v21);
      }
      if (v24[0])
        (*(void (**)(_QWORD))(*(_QWORD *)v24[0] + 40))(v24[0]);
      else
        ++v26;
    }
    if (v24[0])
    {
      (*(void (**)(void))(*(_QWORD *)v24[0] + 8))();
      goto LABEL_20;
    }
LABEL_18:
    if (v25)
      --*v25;
LABEL_20:
    v5 = (float32x2_t *)*v5;
  }
  while (v5);
LABEL_21:
  v12 = *a3;
  v10 = a3 + 1;
  v11 = v12;
  if (v12 != (uint64_t *)v10)
  {
    do
    {
      fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::NormArc((uint64_t)a1, (uint64_t)(v11 + 5));
      v13 = (uint64_t *)v11[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (uint64_t *)v11[2];
          v15 = *v14 == (_QWORD)v11;
          v11 = v14;
        }
        while (!v15);
      }
      v11 = v14;
    }
    while (v14 != (uint64_t *)v10);
  }
}

void sub_1AD7889D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_DWORD *a21)
{
  if (a18)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a18 + 8))(a18);
  }
  else if (a21)
  {
    --*a21;
  }
  _Unwind_Resume(exception_object);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::AddArc(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t *MutableState;
  _DWORD v7[2];
  uint64_t v8;
  void *__p;
  void *v10;
  uint64_t v11;
  int State;

  __p = 0;
  v10 = 0;
  v11 = 0;
  v7[0] = *(_DWORD *)a3;
  v7[1] = v7[0];
  fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)&v8, a3 + 8);
  State = fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::FindState(a1, *(float32x2_t ***)(a3 + 40));
  MutableState = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::PushArc(MutableState, (uint64_t)v7);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void sub_1AD788AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetArcs(uint64_t a1, int a2)
{
  char *MutableState;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int *v9;
  int v10;
  int v11;

  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>>::SetArcs(*(_QWORD *)(a1 + 120), (uint64_t)MutableState);
  v5 = *((_QWORD *)MutableState + 6);
  v6 = *((_QWORD *)MutableState + 7) - v5;
  if (v6)
  {
    v7 = v6 / 48;
    v8 = *(_DWORD *)(a1 + 68);
    if (v7 <= 1)
      v7 = 1;
    v9 = (int *)(v5 + 40);
    do
    {
      v11 = *v9;
      v9 += 12;
      v10 = v11;
      if (v11 >= v8)
      {
        v8 = v10 + 1;
        *(_DWORD *)(a1 + 68) = v10 + 1;
      }
      --v7;
    }
    while (v7);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(a1, a2);
  *((_DWORD *)MutableState + 18) |= 0xAu;
}

uint64_t fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::FilterArc(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  int32x2_t *v7;
  int32x2_t v8;
  _BYTE *v9;
  uint64_t *v10;
  int32x2_t v12[2];
  void *__p;
  _BYTE *v14;
  int32x2_t v15;

  v12[0] = (int32x2_t)a2;
  v7 = (int32x2_t *)std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a5, a2, (uint64_t)&std::piecewise_construct, v12);
  if (v7[5].i32[0] == -1)
  {
    fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::DeterminizeArc(v12, a2);
    v7[5].i32[0] = v12[0].i32[0];
    v7[6] = v12[1];
    if (&v7[5] != v12)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v7[7], (char *)__p, (uint64_t)v14, (v14 - (_BYTE *)__p) >> 2);
    v8 = v15;
    v9 = __p;
    v7[10] = v15;
    if (v9)
    {
      v14 = v9;
      operator delete(v9);
      v8 = v7[10];
    }
    *(_BYTE *)(*(_QWORD *)&v8 + 8) = 0;
  }
  v10 = (uint64_t *)v7[10];
  *v10 = (uint64_t)std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__create_node[abi:ne180100]<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> const&>((uint64_t)v10, *v10, a4);
  return 1;
}

void sub_1AD788C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::NormArc(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t *v5;
  float32x2_t *v6;
  char *v7;
  uint64_t *v8;
  float32x2_t *v9;
  float v10;
  float v11;
  float v12;
  float v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  int *v17;
  unint64_t v18;
  unint64_t v19;
  int *v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  float32x2_t *v28;
  float32x2_t *v29;
  double v30;
  uint64_t **v31;
  uint64_t v32;
  void *__p;
  _BYTE *v34;
  uint64_t v35;

  v4 = *(uint64_t ***)(a2 + 40);
  std::forward_list<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::sort[abi:ne180100](v4);
  v31 = v4;
  v5 = *v4;
  if (!*v4)
    return;
  v6 = (float32x2_t *)(a2 + 8);
  v7 = (char *)(a2 + 16);
  v8 = v5;
  do
  {
    fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::operator()((uint64_t)v6, (uint64_t)(v8 + 2), &v32);
    *v6 = (float32x2_t)v32;
    if (v6 != (float32x2_t *)&v32)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v7, (char *)__p, (uint64_t)v34, (v34 - (_BYTE *)__p) >> 2);
    if (__p)
    {
      v34 = __p;
      operator delete(__p);
    }
    if (v5 == v8 || *((_DWORD *)v8 + 2) != *((_DWORD *)v5 + 2))
    {
      v15 = *v8;
      v5 = v8;
      goto LABEL_21;
    }
    v10 = *((float *)v5 + 4);
    v9 = (float32x2_t *)(v5 + 2);
    v11 = v10 + *((float *)v5 + 5);
    v12 = *((float *)v8 + 4);
    v13 = v12 + *((float *)v8 + 5);
    v14 = v5 + 2;
    if (v11 >= v13)
    {
      if (v11 <= v13)
      {
        v14 = v5 + 2;
        if (v10 < v12)
          goto LABEL_14;
        if (v10 <= v12)
        {
          v17 = (int *)v5[3];
          v18 = v5[4] - (_QWORD)v17;
          v19 = v18 >> 2;
          v20 = (int *)v8[3];
          v21 = (unint64_t)(v8[4] - (_QWORD)v20) >> 2;
          if ((int)(v18 >> 2) <= (int)v21)
          {
            v14 = v5 + 2;
            if ((int)v19 < 1)
              goto LABEL_14;
            v14 = v5 + 2;
            if ((int)v19 < (int)v21)
              goto LABEL_14;
            v22 = (v18 >> 2) - 1;
            while (1)
            {
              v24 = *v17++;
              v23 = v24;
              v26 = *v20++;
              v25 = v26;
              if (v23 < v26)
                break;
              if (v23 > v25 || v22-- == 0)
              {
                v14 = v5 + 2;
                goto LABEL_14;
              }
            }
          }
        }
      }
      v14 = v8 + 2;
    }
LABEL_14:
    v32 = *v14;
    v34 = 0;
    v35 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)v14[1], v14[2], (v14[2] - v14[1]) >> 2);
    *v9 = (float32x2_t)v32;
    if (v9 != (float32x2_t *)&v32)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v5 + 24, (char *)__p, (uint64_t)v34, (v34 - (_BYTE *)__p) >> 2);
    if (__p)
    {
      v34 = __p;
      operator delete(__p);
    }
    if (!fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Member((uint64_t)(v5 + 2)))
      *(_QWORD *)(a1 + 8) |= 4uLL;
    v15 = *v8;
    v16 = (_QWORD *)*v5;
    *v5 = *(_QWORD *)*v5;
    std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__delete_node[abi:ne180100]<>((int)v31, v16);
LABEL_21:
    v8 = (uint64_t *)v15;
  }
  while (v15);
  v28 = (float32x2_t *)*v31;
  if (*v31)
  {
    do
    {
      v29 = v28 + 2;
      fst::Divide<fst::LatticeWeightTpl<float>,int>((uint64_t)&v28[2], (uint64_t)v6, 0, (uint64_t)&v32);
      HIDWORD(v30) = HIDWORD(v32);
      v28[2] = (float32x2_t)v32;
      if (&v28[2] != (float32x2_t *)&v32)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v28[3], (char *)__p, (uint64_t)v34, (v34 - (_BYTE *)__p) >> 2);
      if (__p)
      {
        v34 = __p;
        operator delete(__p);
      }
      LODWORD(v30) = *(_DWORD *)(a1 + 144);
      fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Quantize((uint64_t)&v28[2], (float32x2_t *)&v32, v30);
      *v29 = (float32x2_t)v32;
      if (v29 != (float32x2_t *)&v32)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v28[3], (char *)__p, (uint64_t)v34, (v34 - (_BYTE *)__p) >> 2);
      if (__p)
      {
        v34 = __p;
        operator delete(__p);
      }
      v28 = (float32x2_t *)*v28;
    }
    while (v28);
  }
}

void sub_1AD788F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  char *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (char *)operator new(0x58uLL);
    *((_DWORD *)v11 + 8) = **a4;
    *((_DWORD *)v11 + 10) = -1;
    *((int32x2_t *)v11 + 6) = vdup_n_s32(0x7F800000u);
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

int32x2_t *fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::DeterminizeArc(int32x2_t *a1, __int32 *a2)
{
  uint64_t v3;

  a1->i32[0] = *a2;
  a1[1] = vdup_n_s32(0x7F800000u);
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  v3 = operator new();
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = -1;
  a1[5] = (int32x2_t)v3;
  return a1;
}

void sub_1AD7890B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 24) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__create_node[abi:ne180100]<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;

  v5 = operator new(0x30uLL);
  *(_QWORD *)v5 = a2;
  v5[2] = *(_DWORD *)a3;
  *((_QWORD *)v5 + 2) = *(_QWORD *)(a3 + 8);
  *((_QWORD *)v5 + 4) = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 3) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)v5 + 3, *(const void **)(a3 + 16), *(_QWORD *)(a3 + 24), (uint64_t)(*(_QWORD *)(a3 + 24) - *(_QWORD *)(a3 + 16)) >> 2);
  return v5;
}

void sub_1AD78913C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::forward_list<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::sort[abi:ne180100](uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *result;
  char v6;

  v2 = *a1;
  if (v2)
  {
    v3 = 0;
    v4 = v2;
    do
    {
      ++v3;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    v3 = 0;
  }
  result = std::forward_list<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__sort<std::__less<void,void>>(v2, v3, (uint64_t)&v6);
  *a1 = result;
  return result;
}

_QWORD *fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::operator()@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  int *v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;
  uint64_t v12;
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;

  v4 = *(float *)a1;
  v5 = *(float *)a1 + *(float *)(a1 + 4);
  v6 = *(float *)a2;
  v7 = *(float *)a2 + *(float *)(a2 + 4);
  if (v5 >= v7)
  {
    if (v5 > v7)
    {
LABEL_6:
      a1 = a2;
      goto LABEL_7;
    }
    if (v4 >= v6)
    {
      if (v4 > v6)
        goto LABEL_6;
      v8 = *(int **)(a1 + 8);
      v9 = *(_QWORD *)(a1 + 16) - (_QWORD)v8;
      v10 = v9 >> 2;
      v11 = *(int **)(a2 + 8);
      v12 = (*(_QWORD *)(a2 + 16) - (_QWORD)v11) >> 2;
      if ((int)(v9 >> 2) > (int)v12)
        goto LABEL_6;
      if ((int)v10 >= 1)
      {
        v15 = __OFSUB__((_DWORD)v10, (_DWORD)v12);
        v14 = (int)v10 - (int)v12 < 0;
      }
      else
      {
        v15 = 0;
        v14 = 1;
      }
      if (v14 == v15)
      {
        v16 = (v9 >> 2) - 1;
        do
        {
          v18 = *v8++;
          v17 = v18;
          v20 = *v11++;
          v19 = v20;
          if (v17 < v20)
            goto LABEL_6;
        }
        while (v17 <= v19 && v16-- != 0);
      }
    }
  }
LABEL_7:
  *a3 = *(_QWORD *)a1;
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a3 + 1, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 2);
}

void fst::Divide<fst::LatticeWeightTpl<float>,int>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL4 v18;
  size_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  _BYTE *v23;
  void *v24;
  _BYTE *v25;
  uint64_t v26;
  void *v27;
  _BYTE *v28;
  uint64_t v29;
  float v30;
  void *__p;
  _BYTE *v32;
  uint64_t v33;

  LODWORD(__p) = 0;
  v8 = *(float *)a1;
  v9 = *(float *)(a1 + 4);
  LODWORD(__p) = *(_DWORD *)a1;
  *(float *)&v27 = v9;
  LODWORD(v24) = 2139095040;
  v30 = INFINITY;
  if (*(float *)&__p == INFINITY && *(float *)&v27 == v30)
  {
    LODWORD(__p) = 0;
    LODWORD(__p) = *(_DWORD *)a2;
    LODWORD(v27) = 0;
    LODWORD(v27) = *(_DWORD *)(a2 + 4);
    LODWORD(v24) = 2139095040;
    v30 = INFINITY;
    if (*(float *)&__p != INFINITY || *(float *)&v27 != v30)
    {
      *(int32x2_t *)a4 = vdup_n_s32(0x7F800000u);
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)(a4 + 24) = 0;
      *(_QWORD *)(a4 + 8) = 0;
      return;
    }
    if (kaldi::g_kaldi_verbose_level < -1)
LABEL_53:
      exit(1);
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Division by zero [0/0] in CompactLatticeWeightTpl", 49);
LABEL_52:
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    goto LABEL_53;
  }
  LODWORD(__p) = 0;
  v10 = *(float *)a2;
  v11 = *(float *)(a2 + 4);
  LODWORD(__p) = *(_DWORD *)a2;
  *(float *)&v27 = v11;
  LODWORD(v24) = 2139095040;
  v30 = INFINITY;
  if (*(float *)&__p == INFINITY && *(float *)&v27 == v30)
  {
    if (kaldi::g_kaldi_verbose_level < -1)
      goto LABEL_53;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Error: division by zero in CompactLatticeWeightTpl::Divide()", 60);
    goto LABEL_52;
  }
  v12 = v8 - v10;
  v13 = v9 - v11;
  if (v12 == -INFINITY || v13 == -INFINITY)
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"LatticeWeightTpl::Divide, NaN or invalid number produced. ", 58);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"[dividing by zero?]  Returning zero.", 36);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
    }
    v16 = INFINITY;
    v17 = INFINITY;
  }
  else
  {
    v18 = v12 == INFINITY;
    if (v13 == INFINITY)
      v18 = 1;
    if (v18)
      v16 = INFINITY;
    else
      v16 = v12;
    if (v18)
      v17 = INFINITY;
    else
      v17 = v13;
  }
  v27 = 0;
  v28 = 0;
  v29 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v27, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 2);
  v24 = 0;
  v25 = 0;
  v26 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v24, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  v19 = v25 - (_BYTE *)v24;
  v20 = (v25 - (_BYTE *)v24) >> 2;
  v21 = (char *)v27;
  v22 = (uint64_t)v28;
  if (v20 > (v28 - (_BYTE *)v27) >> 2)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Error in Divide (CompactLatticeWeightTpl): cannot divide, length mismatch.", 74);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    }
    exit(1);
  }
  if (a3 == 1)
  {
    v23 = &v28[-4 * v20];
    if (!memcmp(v24, v23, v19))
    {
      __p = 0;
      v32 = 0;
      v33 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, v21, v22 - 4 * v20, (v23 - v21) >> 2);
      *(float *)a4 = v16;
      *(float *)(a4 + 4) = v17;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)(a4 + 24) = 0;
      *(_QWORD *)(a4 + 8) = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a4 + 8), __p, (uint64_t)v32, (v32 - (_BYTE *)__p) >> 2);
      goto LABEL_31;
    }
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
LABEL_48:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Error in Divide (CompactLatticeWeighTpl): cannot divide, data mismatch.", 71);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    }
LABEL_49:
    exit(1);
  }
  if (a3)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Cannot divide CompactLatticeWeightTpl with DIVIDE_ANY.", 54);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    }
    goto LABEL_49;
  }
  if (memcmp(v24, v27, v19))
  {
    if (kaldi::g_kaldi_verbose_level < -1)
      goto LABEL_49;
    goto LABEL_48;
  }
  __p = 0;
  v32 = 0;
  v33 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, &v21[4 * v20], v22, (v22 - (uint64_t)&v21[4 * v20]) >> 2);
  *(float *)a4 = v16;
  *(float *)(a4 + 4) = v17;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 8) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a4 + 8), __p, (uint64_t)v32, (v32 - (_BYTE *)__p) >> 2);
LABEL_31:
  if (__p)
  {
    v32 = __p;
    operator delete(__p);
  }
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
}

void sub_1AD7896C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a17);
  _Unwind_Resume(a1);
}

_QWORD *fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Quantize@<X0>(uint64_t a1@<X0>, float32x2_t *a2@<X8>, double a3@<D0>)
{
  float v3;
  float32x2_t v4;

  v3 = vaddv_f32(*(float32x2_t *)a1);
  v4 = (float32x2_t)0x7F0000007FLL;
  if (v3 != -INFINITY)
  {
    if (v3 == INFINITY)
      v4 = (float32x2_t)vdup_n_s32(0x7F800000u);
    else
      v4 = vmul_n_f32(vrndm_f32(vadd_f32(vdiv_f32(*(float32x2_t *)a1, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0)), (float32x2_t)0x3F0000003F000000)), *(float *)&a3);
  }
  *a2 = v4;
  a2[2] = 0;
  a2[3] = 0;
  a2[1] = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&a2[1], *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 2);
}

uint64_t *std::forward_list<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__sort<std::__less<void,void>>(uint64_t *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;

  if ((unint64_t)a2 >= 2)
  {
    if (a2 == 2)
    {
      v3 = (_QWORD *)*result;
      if (*(_DWORD *)(*result + 8) < *((_DWORD *)result + 2))
      {
        *v3 = result;
        *result = 0;
        return v3;
      }
    }
    else
    {
      if (a2 >= 0)
        v6 = a2;
      else
        v6 = a2 + 1;
      v7 = v6 >> 1;
      v8 = a2 - (v6 >> 1);
      v9 = result;
      if (a2 >= 4)
      {
        v10 = v7;
        v9 = result;
        do
        {
          --v10;
          v9 = (uint64_t *)*v9;
        }
        while (v10 > 1);
      }
      v11 = (uint64_t *)*v9;
      *v9 = 0;
      v12 = (uint64_t *)std::forward_list<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__sort<std::__less<void,void>>(result, v7, a3);
      v13 = (uint64_t *)std::forward_list<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__sort<std::__less<void,void>>(v11, v8, a3);
      return std::forward_list<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__merge<std::__less<void,void>>(v12, v13);
    }
  }
  return result;
}

uint64_t *std::forward_list<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__merge<std::__less<void,void>>(uint64_t *a1, uint64_t *a2)
{
  int v2;
  uint64_t *v3;
  uint64_t **v4;
  uint64_t v5;
  _BOOL4 v6;
  BOOL v7;
  uint64_t *v8;
  int v9;
  uint64_t *v10;
  uint64_t **v11;
  BOOL v12;

  if (a1)
  {
    if (a2)
    {
      v2 = *((_DWORD *)a1 + 2);
      if (*((_DWORD *)a2 + 2) >= v2)
      {
        v3 = a2;
        a2 = a1;
      }
      else
      {
        v3 = a2;
        do
        {
          v4 = (uint64_t **)v3;
          v3 = (uint64_t *)*v3;
        }
        while (v3 && *((_DWORD *)v3 + 2) < v2);
        *v4 = a1;
      }
      v5 = *a1;
      v6 = v3 != 0;
      if (*a1)
        v7 = v3 == 0;
      else
        v7 = 1;
      if (!v7)
      {
        do
        {
          v8 = (uint64_t *)v5;
          v9 = *(_DWORD *)(v5 + 8);
          if (*((_DWORD *)v3 + 2) < v9)
          {
            v10 = v3;
            do
            {
              v11 = (uint64_t **)v10;
              v10 = (uint64_t *)*v10;
            }
            while (v10 && *((_DWORD *)v10 + 2) < v9);
            *a1 = (uint64_t)v3;
            v3 = *v11;
            *v11 = v8;
          }
          v5 = *v8;
          v6 = v3 != 0;
          if (*v8)
            v12 = v3 == 0;
          else
            v12 = 1;
          a1 = v8;
        }
        while (!v12);
        a1 = v8;
      }
      if (v6)
        *a1 = (uint64_t)v3;
    }
    else
    {
      return a1;
    }
  }
  return a2;
}

_QWORD *std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1AD789A1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::FindState(uint64_t a1, float32x2_t **a2)
{
  uint64_t State;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  void *__p;
  void *v12;

  State = fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::FindState(*(_QWORD **)(a1 + 184), (uint64_t)a2);
  v5 = State;
  if (*(_QWORD *)(a1 + 152))
  {
    v6 = *(uint64_t **)(a1 + 160);
    if ((int)State >= (unint64_t)((v6[1] - *v6) >> 5))
    {
      fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::ComputeDistance(a1, a2, (uint64_t)&v10);
      v7 = v6[1];
      if (v7 >= v6[2])
      {
        v8 = std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>(v6, (uint64_t)&v10);
      }
      else
      {
        std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)v6, (uint64_t)&v10);
        v8 = v7 + 32;
      }
      v6[1] = v8;
      if (__p)
      {
        v12 = __p;
        operator delete(__p);
      }
    }
  }
  return v5;
}

void sub_1AD789AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::FindState(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Id;
  uint64_t v4;
  int v6[2];

  *(_QWORD *)v6 = a2;
  v2 = (a1[12] - a1[11]) >> 3;
  Id = fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::FindId(a1 + 1, v6, 1);
  if ((_DWORD)Id != (_DWORD)v2)
  {
    v4 = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
    {
      std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::clear(*(_QWORD ***)v6);
      MEMORY[0x1AF44D190](v4, 0x1020C405F07FB98);
    }
  }
  return Id;
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>::ComputeDistance(uint64_t a1@<X0>, float32x2_t **a2@<X1>, uint64_t a3@<X8>)
{
  int32x2_t v4;
  float32x2_t *v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  int32x2_t *v12;
  int *v13;
  unint64_t v14;
  unint64_t v15;
  int *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int32x2_t v24;
  void *v25;
  _BYTE *v26;
  int32x2_t v27;
  void *__p;
  _BYTE *v29;
  uint64_t v30;
  float32x2_t v31;
  void *v32;
  void *v33;
  uint64_t v34;

  v4 = vdup_n_s32(0x7F800000u);
  *(int32x2_t *)a3 = v4;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  v5 = *a2;
  if (*a2)
  {
    while (1)
    {
      v7 = v5[1].i32[0];
      v8 = **(_QWORD **)(a1 + 152);
      if (v7 >= (*(_QWORD *)(*(_QWORD *)(a1 + 152) + 8) - v8) >> 5)
      {
        v31 = (float32x2_t)v4;
        v33 = 0;
        v34 = 0;
        v32 = 0;
      }
      else
      {
        v9 = v8 + 32 * v7;
        v31 = *(float32x2_t *)v9;
        v33 = 0;
        v34 = 0;
        v32 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v32, *(const void **)(v9 + 8), *(_QWORD *)(v9 + 16), (uint64_t)(*(_QWORD *)(v9 + 16) - *(_QWORD *)(v9 + 8)) >> 2);
      }
      fst::Times<fst::LatticeWeightTpl<float>,int>(v5 + 2, &v31, &v24);
      v10 = *(float *)a3;
      v11 = *(float *)a3 + *(float *)(a3 + 4);
      v12 = (int32x2_t *)a3;
      if (v11 < (float)(*(float *)v24.i32 + *(float *)&v24.i32[1]))
        goto LABEL_11;
      if (v11 > (float)(*(float *)v24.i32 + *(float *)&v24.i32[1]))
        goto LABEL_10;
      v12 = (int32x2_t *)a3;
      if (v10 >= *(float *)v24.i32)
        break;
LABEL_11:
      v27 = *v12;
      v29 = 0;
      v30 = 0;
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)&v12[1], *(_QWORD *)&v12[2], (uint64_t)(*(_QWORD *)&v12[2] - *(_QWORD *)&v12[1]) >> 2);
      *(int32x2_t *)a3 = v27;
      if (&v27 != (int32x2_t *)a3)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a3 + 8), (char *)__p, (uint64_t)v29, (v29 - (_BYTE *)__p) >> 2);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v25)
      {
        v26 = v25;
        operator delete(v25);
      }
      if (v32)
      {
        v33 = v32;
        operator delete(v32);
      }
      v5 = (float32x2_t *)*v5;
      if (!v5)
        return;
    }
    if (v10 <= *(float *)v24.i32)
    {
      v13 = *(int **)(a3 + 8);
      v14 = *(_QWORD *)(a3 + 16) - (_QWORD)v13;
      v15 = v14 >> 2;
      v16 = (int *)v25;
      v17 = (unint64_t)(v26 - (_BYTE *)v25) >> 2;
      if ((int)(v14 >> 2) <= (int)v17)
      {
        v12 = (int32x2_t *)a3;
        if ((int)v15 < 1)
          goto LABEL_11;
        v12 = (int32x2_t *)a3;
        if ((int)v15 < (int)v17)
          goto LABEL_11;
        v18 = (v14 >> 2) - 1;
        while (1)
        {
          v20 = *v13++;
          v19 = v20;
          v22 = *v16++;
          v21 = v22;
          if (v19 < v22)
            break;
          if (v19 > v21 || v18-- == 0)
          {
            v12 = (int32x2_t *)a3;
            goto LABEL_11;
          }
        }
      }
    }
LABEL_10:
    v12 = &v24;
    goto LABEL_11;
  }
}

void sub_1AD789D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  uint64_t v19;
  void **v20;
  void *v22;

  v22 = *v20;
  if (*v20)
  {
    *(_QWORD *)(v19 + 16) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::FindId(_QWORD *a1, _QWORD *a2, int a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;

  a1[13] = a2;
  v6 = (uint64_t)(a1 + 3);
  v7 = std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::find<int>(a1 + 3, (int *)&fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::kCurrentKey);
  if (v7)
    return *((unsigned int *)v7 + 4);
  if (!a3)
    return 0xFFFFFFFFLL;
  v9 = a1[10];
  v10 = (_QWORD *)a1[11];
  v11 = ((uint64_t)v10 - v9) >> 3;
  v23 = v11;
  v12 = a1[12];
  if ((unint64_t)v10 >= v12)
  {
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v14 = v12 - v9;
    v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v11 + 1))
      v15 = v11 + 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 12), v16);
    else
      v17 = 0;
    v18 = &v17[8 * v11];
    v19 = &v17[8 * v16];
    *(_QWORD *)v18 = *a2;
    v13 = v18 + 8;
    v21 = (char *)a1[10];
    v20 = (char *)a1[11];
    if (v20 != v21)
    {
      do
      {
        v22 = *((_QWORD *)v20 - 1);
        v20 -= 8;
        *((_QWORD *)v18 - 1) = v22;
        v18 -= 8;
      }
      while (v20 != v21);
      v20 = (char *)a1[10];
    }
    a1[10] = v18;
    a1[11] = v13;
    a1[12] = v19;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *v10 = *a2;
    v13 = v10 + 1;
  }
  a1[11] = v13;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v6, (int *)&v23, &v23);
  return v23;
}

uint64_t *std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::find<int>(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t ****v6;
  unint64_t v7;
  int8x8_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t v15;

  v4 = *a2;
  if ((int)v4 < -1)
  {
    v7 = 0;
  }
  else
  {
    v5 = a1[4];
    if ((_DWORD)v4 == -1)
      v6 = *(uint64_t *****)(v5 + 104);
    else
      v6 = (uint64_t ****)(*(_QWORD *)(v5 + 80) + 8 * v4);
    v7 = fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey::operator()(v5, *v6);
  }
  v8 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v8)
    return 0;
  v9 = (uint8x8_t)vcnt_s8(v8);
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    v11 = v7;
    if (v7 >= *(_QWORD *)&v8)
      v11 = v7 % *(_QWORD *)&v8;
  }
  else
  {
    v11 = (*(_QWORD *)&v8 - 1) & v7;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12)
    return 0;
  v13 = *v12;
  if (*v12)
  {
    v14 = a1 + 6;
    do
    {
      v15 = v13[1];
      if (v15 == v7)
      {
        if ((fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()(v14, *((_DWORD *)v13 + 4), *a2) & 1) != 0)return v13;
      }
      else
      {
        if (v10 > 1)
        {
          if (v15 >= *(_QWORD *)&v8)
            v15 %= *(_QWORD *)&v8;
        }
        else
        {
          v15 &= *(_QWORD *)&v8 - 1;
        }
        if (v15 != v11)
          return 0;
      }
      v13 = (uint64_t *)*v13;
    }
    while (v13);
  }
  return v13;
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()(uint64_t *a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v6;

  if (a2 < -1 || a3 < -1)
    return a2 == a3;
  v3 = *a1;
  if (a2 == -1)
    v4 = *(uint64_t **)(v3 + 104);
  else
    v4 = (uint64_t *)(*(_QWORD *)(v3 + 80) + 8 * a2);
  if (a3 == -1)
    v6 = *(uint64_t **)(v3 + 104);
  else
    v6 = (uint64_t *)(*(_QWORD *)(v3 + 80) + 8 * a3);
  return fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::operator==(*v4, *v6);
}

uint64_t fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey::operator()(uint64_t a1, uint64_t ***a2)
{
  uint64_t v2;
  uint64_t **i;
  unint64_t v4;

  v2 = *((char *)a2 + 8);
  for (i = *a2; i; i = (uint64_t **)*i)
  {
    v4 = *((int *)i + 2);
    v2 ^= fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Hash((uint64_t)(i + 2)) ^ (2 * v2) ^ (32 * v4) ^ (v4 >> 59);
  }
  return v2;
}

uint64_t fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Hash(uint64_t a1)
{
  int v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_DWORD *)(a1 + 4);
  v3 = __CFADD__(v2, *(_DWORD *)a1);
  v4 = (v2 + *(_DWORD *)a1);
  v5 = 0x100000000;
  if (!v3)
    v5 = 0;
  result = v5 | v4;
  v8 = a1 + 8;
  v7 = *(int **)(a1 + 8);
  v9 = *(_QWORD *)(v8 + 8) - (_QWORD)v7;
  if (v9)
  {
    v10 = v9 >> 2;
    if (v10 <= 1)
      v10 = 1;
    v11 = 6967;
    do
    {
      v12 = *v7++;
      result += v11 * v12;
      v11 *= 7499;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::operator==(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (*(unsigned __int8 *)(a2 + 8) != *(unsigned __int8 *)(a1 + 8))
    return 0;
  v2 = (_QWORD *)a2;
  v3 = (_QWORD *)a1;
  while (1)
  {
    v2 = (_QWORD *)*v2;
    v3 = (_QWORD *)*v3;
    if (!v2 || v3 == 0)
      break;
    if (!fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::operator==((uint64_t)(v2 + 1), (uint64_t)(v3 + 1)))return 0;
  }
  return (v2 != 0) ^ (v3 == 0);
}

BOOL fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::operator==(uint64_t a1, uint64_t a2)
{
  const void *v2;
  uint64_t v3;
  size_t v4;
  const void *v5;
  uint64_t v6;

  if (*(_DWORD *)a1 == *(_DWORD *)a2
    && *(float *)(a1 + 8) == *(float *)(a2 + 8)
    && *(float *)(a1 + 12) == *(float *)(a2 + 12)
    && (v3 = a1 + 16,
        v2 = *(const void **)(a1 + 16),
        v4 = *(_QWORD *)(v3 + 8) - (_QWORD)v2,
        v6 = a2 + 16,
        v5 = *(const void **)(a2 + 16),
        v4 == *(_QWORD *)(v6 + 8) - (_QWORD)v5))
  {
    return memcmp(v2, v5, v4) == 0;
  }
  else
  {
    return 0;
  }
}

void *std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t ****v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = *a2;
  if ((int)v7 < -1)
  {
    v10 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 32);
    if ((_DWORD)v7 == -1)
      v9 = *(uint64_t *****)(v8 + 104);
    else
      v9 = (uint64_t ****)(*(_QWORD *)(v8 + 80) + 8 * v7);
    v10 = fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey::operator()(v8, *v9);
  }
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v3 = v10;
      if (v10 >= v11)
        v3 = v10 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()((uint64_t *)(a1 + 48), *((_DWORD *)i + 4), *a2) & 1) != 0)return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  *((_DWORD *)i + 4) = *a3;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 40);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *(_QWORD *)i = *v24;
LABEL_44:
    *v24 = i;
    goto LABEL_45;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v25 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11)
        v25 %= v11;
    }
    else
    {
      v25 &= v11 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1AD78A4B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = *(_QWORD *)a2;
  v3[2] = 0;
  v3[3] = 0;
  v3[1] = 0;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v3 + 1, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  *(_QWORD *)(a1 + 8) = v3 + 4;
  return result;
}

void sub_1AD78A51C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[32 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[32 * v9];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  *((_QWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 3) = 0;
  *((_QWORD *)v11 + 1) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)v11 + 1, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  v15 += 32;
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1AD78A60C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

char *fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  char *MutableState;
  char *v4;
  int v5;
  unint64_t v6;

  MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::GetMutableState(a1, a2);
  v4 = MutableState;
  if (*(_BYTE *)(a1 + 88))
  {
    v5 = *((_DWORD *)MutableState + 18);
    if ((v5 & 4) == 0)
    {
      *((_DWORD *)MutableState + 18) = v5 | 4;
      v6 = *((_QWORD *)MutableState + 7) - *((_QWORD *)MutableState + 6) + *(_QWORD *)(a1 + 112) + 80;
      *(_QWORD *)(a1 + 112) = v6;
      *(_BYTE *)(a1 + 104) = 1;
      if (v6 > *(_QWORD *)(a1 + 96))
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>>::GC(a1, MutableState, 0, 0.666);
    }
  }
  return v4;
}

uint64_t fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::PushArc(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;

  v3 = a1 + 6;
  v4 = a1[7];
  if (v4 >= a1[8])
  {
    result = std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__push_back_slow_path<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const&>(v3, a2);
  }
  else
  {
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__construct_one_at_end[abi:ne180100]<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const&>((uint64_t)v3, a2);
    result = v4 + 48;
  }
  a1[7] = result;
  return result;
}

char *fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  int v3;
  char *result;
  uint64_t v5;
  char *MutableState;

  v3 = *(_DWORD *)(a1 + 76);
  if (v3 == a2)
    return *(char **)(a1 + 80);
  if (!*(_BYTE *)(a1 + 72))
    return fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::GetMutableState(a1, a2 + 1);
  if (v3 == -1)
  {
    *(_DWORD *)(a1 + 76) = a2;
    MutableState = fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::GetMutableState(a1, 0);
    *(_QWORD *)(a1 + 80) = MutableState;
    *((_DWORD *)MutableState + 18) |= 4u;
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::reserve((uint64_t *)MutableState + 6, 0x80uLL);
    return *(char **)(a1 + 80);
  }
  v5 = *(_QWORD *)(a1 + 80);
  if (*(_DWORD *)(v5 + 76))
  {
    *(_DWORD *)(v5 + 72) &= ~4u;
    *(_BYTE *)(a1 + 72) = 0;
    return fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::GetMutableState(a1, a2 + 1);
  }
  *(_DWORD *)(a1 + 76) = a2;
  fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Reset(v5);
  result = *(char **)(a1 + 80);
  *((_DWORD *)result + 18) |= 4u;
  return result;
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>>::GC(uint64_t a1, char *a2, char a3, float a4)
{
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  char *MutableState;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  fst *v27;
  _QWORD *v28;
  fst *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37[2];
  char v38;
  char v39;
  char v40;
  void *__p[2];
  char v42;

  if (*(_BYTE *)(a1 + 104))
  {
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v8 = fst::LogMessage::LogMessage((fst *)v37, (uint64_t)__p);
      v9 = (_QWORD *)fst::cerr(v8);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GCCacheStore: Enter GC: object = ", 33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"), free recently cached = ", 26);
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", cache size = ", 15);
      v13 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", cache frac = ", 15);
      v14 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", cache limit = ", 16);
      v15 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)v37);
      if (v42 < 0)
        operator delete(__p[0]);
    }
    v16 = (unint64_t)(float)((float)*(unint64_t *)(a1 + 96) * a4);
    v17 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 56) = v17;
    while (v17 != a1 + 32)
    {
      v18 = *(_DWORD *)(v17 + 16);
      if (v18)
        v19 = v18 - 1;
      else
        v19 = *(_DWORD *)(a1 + 76);
      MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::GetMutableState(a1, v19);
      v21 = *(_QWORD *)(a1 + 112);
      if (v21 > v16 && !*((_DWORD *)MutableState + 19))
      {
        if ((a3 & 1) != 0)
        {
          if (MutableState != a2)
          {
            v22 = *((_DWORD *)MutableState + 18);
LABEL_19:
            if ((v22 & 4) != 0)
            {
              v23 = *((_QWORD *)MutableState + 7) - *((_QWORD *)MutableState + 6) + 80;
              FstCheck(v23 <= v21, "(size) <= (cache_size_)", "../libquasar/libkaldi/tools/openfst/src/include/fst/cache.h");
              *(_QWORD *)(a1 + 112) -= v23;
            }
            fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Delete((_QWORD *)a1);
            v17 = *(_QWORD *)(a1 + 56);
            continue;
          }
        }
        else
        {
          v22 = *((_DWORD *)MutableState + 18);
          if ((v22 & 8) == 0 && MutableState != a2)
            goto LABEL_19;
        }
      }
      *((_DWORD *)MutableState + 18) &= ~8u;
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      *(_QWORD *)(a1 + 56) = v17;
    }
    if ((a3 & 1) != 0 || *(_QWORD *)(a1 + 112) <= v16)
    {
      v24 = *(_QWORD *)(a1 + 112);
      if (v16)
      {
        if (v24 > v16)
        {
          v25 = *(_QWORD *)(a1 + 96);
          do
          {
            v25 *= 2;
            v26 = v24 > 2 * v16;
            v16 *= 2;
          }
          while (v26);
          *(_QWORD *)(a1 + 96) = v25;
        }
      }
      else if (v24)
      {
        if (FLAGS_fst_error_fatal)
          std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
        else
          std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        v27 = fst::LogMessage::LogMessage((fst *)&v40, (uint64_t)__p);
        v28 = (_QWORD *)fst::cerr(v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"GCCacheStore:GC: Unable to free all cached states", 49);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v40);
        if (v42 < 0)
          operator delete(__p[0]);
      }
    }
    else
    {
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>>::GC(a1, a2, 1, a4);
    }
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v37, "INFO");
      v29 = fst::LogMessage::LogMessage((fst *)&v39, (uint64_t)v37);
      v30 = (_QWORD *)fst::cerr(v29);
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"GCCacheStore: Exit GC: object = ", 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"(", 1);
      v32 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"), free recently cached = ", 26);
      v33 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", cache size = ", 15);
      v34 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", cache frac = ", 15);
      v35 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", cache limit = ", 16);
      v36 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v39);
      if (v38 < 0)
        operator delete(v37[0]);
    }
  }
}

void sub_1AD78AB80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a19);
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Reset(uint64_t a1)
{
  *(int32x2_t *)a1 = vdup_n_s32(0x7F800000u);
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 8), 0, 0, 0);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__clear[abi:ne180100]((uint64_t *)(a1 + 48));
}

void FstCheck(char a1, const char *a2, const char *a3)
{
  fst *v5;
  _QWORD *v6;
  _QWORD *v7;
  size_t v8;
  _QWORD *v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  void *__p[2];
  char v14;
  char v15;

  if ((a1 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    v5 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    v6 = (_QWORD *)fst::cerr(v5);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: \"", 15);
    v8 = strlen(a2);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)a2, v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\" file: ", 8);
    v11 = strlen(a3);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)a3, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" line: ", 7);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0)
      operator delete(__p[0]);
  }
}

void sub_1AD78AD10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Delete(_QWORD *a1)
{
  int v1;

  v1 = *(_DWORD *)(a1[7] + 16);
  if (!v1 || v1 - 1 == *((_DWORD *)a1 + 19))
  {
    *((_DWORD *)a1 + 19) = -1;
    a1[10] = 0;
  }
  fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Delete(a1);
}

void fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Delete(_QWORD *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Destroy(*(_QWORD *)(a1[1] + 8 * *(int *)(a1[7] + 16)));
  v2 = a1[6];
  *(_QWORD *)(a1[1] + 8 * *(int *)(a1[7] + 16)) = 0;
  v3 = (uint64_t *)a1[7];
  v5 = *v3;
  v4 = v3[1];
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)v3[1] = v5;
  a1[6] = v2 - 1;
  a1[7] = v4;
  operator delete(v3);
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>>::SetArcs(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetArcs((_QWORD *)a2);
  if (*(_BYTE *)(a1 + 104) && (*(_BYTE *)(a2 + 72) & 4) != 0)
  {
    v4 = *(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48) + *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = v4;
    if (v4 > *(_QWORD *)(a1 + 96))
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>>::GC(a1, (char *)a2, 0, 0.666);
  }
}

void fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(uint64_t a1, int a2)
{
  int v3;
  _QWORD *v4;
  unint64_t v5;
  char v6;

  if (*(_DWORD *)(a1 + 100) < a2)
    *(_DWORD *)(a1 + 100) = a2;
  v3 = *(_DWORD *)(a1 + 96);
  if (v3 <= a2)
  {
    if (v3 == a2)
      *(_DWORD *)(a1 + 96) = a2 + 1;
    if (*(_BYTE *)(a1 + 104) || !*(_QWORD *)(a1 + 112))
    {
      v4 = (_QWORD *)(a1 + 72);
      v5 = a2;
      while (*(_QWORD *)(a1 + 80) <= v5)
      {
        v6 = 0;
        std::vector<BOOL>::push_back(a1 + 72, &v6);
      }
      *(_QWORD *)(*v4 + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v5;
    }
  }
}

_QWORD *fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetArcs(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _DWORD *v4;

  v1 = result[6];
  v2 = result[7] - v1;
  if (v2)
  {
    v3 = v2 / 48;
    if (v3 <= 1)
      v3 = 1;
    v4 = (_DWORD *)(v1 + 4);
    do
    {
      if (!*(v4 - 1))
        ++result[4];
      if (!*v4)
        ++result[5];
      v4 += 12;
      --v3;
    }
    while (v3);
  }
  return result;
}

void std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>>>::destroy(a1, a2[1]);
    v4 = (void *)a2[7];
    if (v4)
    {
      a2[8] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Start(uint64_t a1)
{
  int v3;

  if (!*(_BYTE *)(a1 + 60))
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 4))
    {
      *(_BYTE *)(a1 + 60) = 1;
    }
    else if (!*(_BYTE *)(a1 + 60))
    {
      v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
      if (v3 != -1)
      {
        *(_DWORD *)(a1 + 64) = v3;
        *(_BYTE *)(a1 + 60) = 1;
        if (*(_DWORD *)(a1 + 68) <= v3)
          *(_DWORD *)(a1 + 68) = v3 + 1;
      }
    }
  }
  return *(unsigned int *)(a1 + 64);
}

_QWORD *fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Final@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _BYTE *v13;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::HasFinal(a1, a2) & 1) == 0)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(&v11, a1, a2);
    v7 = v11;
    v9 = 0;
    v10 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v12, (uint64_t)v13, (v13 - (_BYTE *)v12) >> 2);
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetFinal(a1, a2, &v7);
    if (__p)
    {
      v9 = __p;
      operator delete(__p);
    }
    if (v12)
    {
      v13 = v12;
      operator delete(v12);
    }
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Final(a1, a2, a3);
}

void sub_1AD78B0F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::HasFinal(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v2 + 76) == a2)
  {
    v3 = (uint64_t *)(v2 + 80);
  }
  else
  {
    v4 = a2 + 1;
    v6 = v2 + 8;
    v5 = *(_QWORD *)(v2 + 8);
    if (v4 >= (*(_QWORD *)(v6 + 8) - v5) >> 3)
      return 0;
    v3 = (uint64_t *)(v5 + 8 * v4);
  }
  v7 = *v3;
  if (!v7)
    return 0;
  v8 = *(_DWORD *)(v7 + 72);
  if ((v8 & 1) == 0)
    return 0;
  *(_DWORD *)(v7 + 72) = v8 | 8;
  return 1;
}

void fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetFinal(uint64_t a1, int a2, uint64_t *a3)
{
  char *MutableState;
  uint64_t v5;
  void *__p;
  _BYTE *v7;
  uint64_t v8;

  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  v5 = *a3;
  v7 = 0;
  v8 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)a3[1], a3[2], (a3[2] - a3[1]) >> 2);
  *(_QWORD *)MutableState = v5;
  if (MutableState != (char *)&v5)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(MutableState + 8, (char *)__p, (uint64_t)v7, (v7 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  *((_DWORD *)MutableState + 18) |= 9u;
}

void sub_1AD78B22C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v5 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v5 + 76) == a2)
    v6 = (uint64_t *)(v5 + 80);
  else
    v6 = (uint64_t *)(*(_QWORD *)(v5 + 8) + 8 * (a2 + 1));
  v7 = *v6;
  *a3 = *(_QWORD *)v7;
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a3 + 1, *(const void **)(v7 + 8), *(_QWORD *)(v7 + 16), (uint64_t)(*(_QWORD *)(v7 + 16) - *(_QWORD *)(v7 + 8)) >> 2);
}

unint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::NumArcs(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(_QWORD *, uint64_t))(*a1 + 48))(a1, a2);
  v4 = a1[15];
  if (*(_DWORD *)(v4 + 76) == (_DWORD)a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * ((int)a2 + 1);
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)v5 + 56) - *(_QWORD *)(*(_QWORD *)v5 + 48)) >> 4);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::HasArcs(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v2 + 76) == a2)
  {
    v3 = (uint64_t *)(v2 + 80);
  }
  else
  {
    v4 = a2 + 1;
    v6 = v2 + 8;
    v5 = *(_QWORD *)(v2 + 8);
    if (v4 >= (*(_QWORD *)(v6 + 8) - v5) >> 3)
      return 0;
    v3 = (uint64_t *)(v5 + 8 * v4);
  }
  v7 = *v3;
  if (!v7)
    return 0;
  v8 = *(_DWORD *)(v7 + 72);
  if ((v8 & 2) == 0)
    return 0;
  *(_DWORD *)(v7 + 72) = v8 | 8;
  return 1;
}

uint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::NumInputEpsilons(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(_QWORD *, uint64_t))(*a1 + 48))(a1, a2);
  v4 = a1[15];
  if (*(_DWORD *)(v4 + 76) == (_DWORD)a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * ((int)a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 32);
}

uint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::NumOutputEpsilons(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(_QWORD *, uint64_t))(*a1 + 48))(a1, a2);
  v4 = a1[15];
  if (*(_DWORD *)(v4 + 76) == (_DWORD)a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * ((int)a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 40);
}

_QWORD *fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::DeterminizeFst(_QWORD *a1, uint64_t a2, int a3)
{
  _DWORD *v4;
  _DWORD *v5;
  int v6;

  *a1 = &unk_1E5D1DC18;
  a1[1] = 0;
  v4 = *(_DWORD **)(a2 + 8);
  if (a3)
  {
    v4 = (_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 40))(*(_QWORD *)(a2 + 8));
    v5 = (_DWORD *)a1[1];
    if (v5)
    {
      v6 = v5[14] - 1;
      v5[14] = v6;
      if (!v6)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  else
  {
    ++v4[14];
  }
  a1[1] = v4;
  return a1;
}

void sub_1AD78B4C4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _DWORD *v3;

  *v1 = &unk_1E5D27318;
  v3 = (_DWORD *)v1[1];
  if (v3)
    fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::DeterminizeFst(v3);
  _Unwind_Resume(exception_object);
}

void fst::StateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~StateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Next_(uint64_t result)
{
  ++*(_DWORD *)(result + 24);
  return result;
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~CacheStateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Done(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  char *v19;
  unint64_t v20;

  v2 = *(_DWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68))
    return 0;
  v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if ((int)v5 >= *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68))
    return 1;
  v6 = v5;
  do
  {
    fst::ArcIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::ArcIterator(&v19, *(_QWORD *)(a1 + 8), v6);
    v7 = v20;
    v8 = *((_QWORD *)v19 + 6);
    v9 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v19 + 7) - v8) >> 4);
    v10 = *(_QWORD *)(a1 + 16);
    if (v20 < v9)
    {
      v11 = *(_DWORD *)(v10 + 68);
      v12 = (int *)(v8 + 48 * v20 + 40);
      do
      {
        v14 = *v12;
        v12 += 12;
        v13 = v14;
        if (v11 <= v14)
        {
          v11 = v13 + 1;
          *(_DWORD *)(v10 + 68) = v13 + 1;
        }
        ++v7;
      }
      while (v9 != v7);
      v20 = v9;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(v10, v6);
    v15 = *(_DWORD *)(a1 + 24);
    v16 = *(_QWORD *)(a1 + 16);
    v17 = *(_DWORD *)(v16 + 68);
    --*((_DWORD *)v19 + 19);
    v4 = v15 >= v17;
    if (v15 < v17)
      break;
    v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v16);
  }
  while ((int)v6 < *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68));
  return v4;
}

void sub_1AD78B668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  --*(_DWORD *)(a9 + 76);
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(uint64_t a1)
{
  uint64_t v1;
  int v3;
  int v4;

  v1 = *(unsigned int *)(a1 + 96);
  if ((int)v1 <= *(_DWORD *)(a1 + 100))
  {
    while (1)
    {
      v3 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::ExpandedState(a1, v1);
      v4 = *(_DWORD *)(a1 + 96);
      if (!v3)
        break;
      v1 = (v4 + 1);
      *(_DWORD *)(a1 + 96) = v1;
      if (v4 >= *(_DWORD *)(a1 + 100))
        return v1;
    }
    return *(unsigned int *)(a1 + 96);
  }
  return v1;
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::ExpandedState(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 104) || !*(_QWORD *)(a1 + 112))
    return (*(_QWORD *)(*(_QWORD *)(a1 + 72) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1;
  if (*(_BYTE *)(a1 + 128))
  {
    v3 = *(_QWORD *)(a1 + 120);
    if (*(_DWORD *)(v3 + 76) == a2)
    {
      v4 = (_QWORD *)(v3 + 80);
      return *v4 != 0;
    }
    v5 = a2 + 1;
    v7 = v3 + 8;
    v6 = *(_QWORD *)(v3 + 8);
    if (v5 < (*(_QWORD *)(v7 + 8) - v6) >> 3)
    {
      v4 = (_QWORD *)(v6 + 8 * v5);
      return *v4 != 0;
    }
  }
  return 0;
}

char **fst::ArcIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::ArcIterator(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *MutableState;

  v6 = *(_QWORD *)(a2 + 8);
  a1[1] = 0;
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>>::GetMutableState(*(_QWORD *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 19);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::HasArcs(*(_QWORD *)(a2 + 8), a3) & 1) == 0)(*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 48))(*(_QWORD *)(a2 + 8), a3);
  return a1;
}

void sub_1AD78B7D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  --*(_DWORD *)(*(_QWORD *)v1 + 76);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::InitArcIterator(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::HasArcs(a1, a2) & 1) == 0)(*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, a2);
  return fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::InitArcIterator(a1, a2, a3);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::InitArcIterator(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;

  v3 = *(_QWORD *)(result + 120);
  if (*(_DWORD *)(v3 + 76) == a2)
    v4 = (uint64_t *)(v3 + 80);
  else
    v4 = (uint64_t *)(*(_QWORD *)(v3 + 8) + 8 * (a2 + 1));
  v5 = *v4;
  v8 = *(_DWORD *)(v5 + 76);
  v6 = (_DWORD *)(v5 + 76);
  v7 = v8;
  v9 = *(_QWORD *)(v6 - 7);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v6 - 5) - v9) >> 4);
  if (*(_QWORD *)(v6 - 5) == v9)
    v9 = 0;
  *a3 = 0;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v6;
  *v6 = v7 + 1;
  return result;
}

_QWORD *fst::AutoQueue<int>::~AutoQueue(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  *a1 = &unk_1E5D239D8;
  v3 = a1[3];
  v2 = a1[4];
  if (v2 != v3)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v3 + 8 * v4);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        v3 = a1[3];
        v2 = a1[4];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  v6 = a1[2];
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (void *)a1[6];
  if (v7)
  {
    a1[7] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[3];
  if (v8)
  {
    a1[4] = v8;
    operator delete(v8);
  }
  return a1;
}

void std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

uint64_t std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 16 * v6;
    std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1AD78B9F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t (***v6)(_QWORD);
  uint64_t (***v7)(_QWORD);
  uint64_t (**v8)(_QWORD);
  BOOL v9;

  v2 = result;
  v3 = result[1];
  v4 = (v3 - *result) >> 4;
  if (a2 > v4)
    return std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__append(result, a2 - v4);
  if (a2 < v4)
  {
    v5 = *result + 16 * a2;
    if (v3 != v5)
    {
      v6 = (uint64_t (***)(_QWORD))(v3 - 16);
      v7 = (uint64_t (***)(_QWORD))(v3 - 16);
      do
      {
        v8 = *v7;
        v7 -= 2;
        result = (uint64_t *)(*v8)(v6);
        v9 = v6 == (uint64_t (***)(_QWORD))v5;
        v6 = v7;
      }
      while (!v9);
    }
    v2[1] = v5;
  }
  return result;
}

uint64_t *std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 != *result)
  {
    do
    {
      *(_QWORD *)(v4 - 16) = &unk_1E5D28AB0;
      v4 -= 16;
      v5 = *(_QWORD *)(v3 - 8);
      *(_QWORD *)(v4 + 8) = v5;
      ++*(_DWORD *)(v5 + 56);
      v3 -= 16;
    }
    while (v3 != v2);
  }
  a2[1] = v4;
  v6 = *result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~VectorFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D25800;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Copy(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  ++*(_DWORD *)(v3 + 56);
  *result = &unk_1E5D28AB0;
  result[1] = v3;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(_QWORD *)(v2 + 72) - *(_QWORD *)(v2 + 64)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::InitArcIterator(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;

  v3 = *(_QWORD *)(result + 8);
  *a3 = 0;
  v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 8 * a2) + 48);
  v4 = *v5;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v5[1] - *v5) >> 4);
  if (v5[1] == *v5)
    v4 = 0;
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::NumStates(uint64_t a1)
{
  return (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64)) >> 3;
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  int v6;

  if (a1 != a2)
  {
    v4 = operator new();
    fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFstImpl(v4, a2);
    v5 = *(_DWORD **)(a1 + 8);
    if (v5)
    {
      v6 = v5[14] - 1;
      v5[14] = v6;
      if (!v6)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  return a1;
}

void sub_1AD78BCD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

unint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetStart(uint64_t a1, int a2)
{
  uint64_t v4;
  unint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 88) = a2;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_QWORD *)(v4 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(_QWORD *)(v4 + 8) & 4;
  return result;
}

void fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetFinal(uint64_t a1, int a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  v7 = *a3;
  v9 = 0;
  v10 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)a3[1], a3[2], (a3[2] - a3[1]) >> 2);
  fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetFinal(v6, a2, (uint64_t)&v7);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
}

void sub_1AD78BDDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = a3 & 4;
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), v6);
  if (result != (v6 & a2))
    result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(a1);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::AddState(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(a1);
  v2 = *(_QWORD **)(a1 + 8);
  v3 = fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2) & 0x2AFFFFFF0007;
  return v3;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::AddArc(uint64_t a1, int a2, float *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(a1);
  return fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::AddArc(*(_QWORD **)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::DeleteStates(uint64_t a1, char **a2)
{
  _QWORD *v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(a1);
  v4 = *(_QWORD **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::DeleteStates((uint64_t)v4, a2);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0x6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::DeleteStates(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(a1);
  v2 = *(_QWORD **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::DeleteStates((uint64_t)v2);
  result = (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2);
  v2[1] = (*((_DWORD *)v2 + 2) | result) & 4 | 0x156A5A950003;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::DeleteArcs(*(_QWORD **)(v6[8] + 8 * a2), a3);
  result = (*(uint64_t (**)(_QWORD *))(*v6 + 24))(v6);
  v6[1] = v6[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::DeleteArcs(uint64_t a1, int a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(a1);
  v4 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD **)(v4[8] + 8 * a2);
  v5[4] = 0;
  v5[5] = 0;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__clear[abi:ne180100](v5 + 6);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0xA6A5A950007;
  return result;
}

void fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(a1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(*(_QWORD *)(a1 + 8) + 64), a2);
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(a1);
  return std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::reserve((uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 48), a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutableInputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutableOutputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v4 + 40);
  if (result != a2)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    else
      result = 0;
    *(_QWORD *)(v4 + 40) = result;
  }
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v4 + 48);
  if (result != a2)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    else
      result = 0;
    *(_QWORD *)(v4 + 48) = result;
  }
  return result;
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::InitMutableArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_1E5D21420;
  v6[3] = 0;
  result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(a1);
  v8 = *(_QWORD *)(a1 + 8);
  v6[1] = *(_QWORD *)(*(_QWORD *)(v8 + 64) + 8 * a2);
  v6[2] = v8 + 8;
  *a3 = v6;
  return result;
}

void sub_1AD78C2B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  if (*(int *)(*(_QWORD *)(result + 8) + 56) >= 2)
  {
    v1 = result;
    v2 = operator new();
    fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFstImpl(v2, v1);
    result = *(_QWORD *)(v1 + 8);
    if (result)
    {
      v3 = *(_DWORD *)(result + 56) - 1;
      *(_DWORD *)(result + 56) = v3;
      if (!v3)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    *(_QWORD *)(v1 + 8) = v2;
  }
  return result;
}

void sub_1AD78C354(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  std::string __p;
  _DWORD *v19;
  std::string::size_type v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  int v25;
  unsigned int v26;

  *(_QWORD *)a1 = &unk_1E5D22828;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  v5 = (uint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 64) = 0;
  v6 = (_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)a1 = &unk_1E5D1CF58;
  std::string::basic_string[abi:ne180100]<0>(&__p, "vector");
  std::string::operator=(v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v8 = *v5;
  if (*v5 != v7)
  {
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v7)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    else
      v9 = 0;
    *v5 = v9;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v11 = *(_QWORD *)(a1 + 48);
  if (v11 != v10)
  {
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (v10)
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    else
      v12 = 0;
    *(_QWORD *)(a1 + 48) = v12;
  }
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 1, 0))
  {
    v13 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2);
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 64), v13);
  }
  v26 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v24);
  while (1)
  {
    if (!v24)
    {
      if ((int)v26 >= v25)
        goto LABEL_47;
LABEL_25:
      v14 = v26;
      goto LABEL_26;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24))
      break;
    if (!v24)
      goto LABEL_25;
    v14 = (*(uint64_t (**)(void))(*(_QWORD *)v24 + 24))();
LABEL_26:
    fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::AddState((_QWORD *)a1);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(&v21, a2, v14);
    fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetFinal(a1, v14, &v21);
    if (v22)
    {
      v23 = v22;
      operator delete(v22);
    }
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v14);
    std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::reserve((uint64_t *)(*(_QWORD *)(*v6 + 8 * (int)v14) + 48), v15);
    v20 = 0;
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)a2 + 136))(a2, v14, &__p);
    while (1)
    {
      if (!__p.__r_.__value_.__r.__words[0])
      {
        if (v20 >= __p.__r_.__value_.__r.__words[2])
          goto LABEL_40;
LABEL_34:
        v16 = (_DWORD *)(__p.__r_.__value_.__l.__size_ + 48 * v20);
        goto LABEL_35;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 24))(__p.__r_.__value_.__r.__words[0]))
        break;
      if (!__p.__r_.__value_.__r.__words[0])
        goto LABEL_34;
      v16 = (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 32))();
LABEL_35:
      fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::AddArc(*(_QWORD **)(*v6 + 8 * (int)v14), v16);
      if (__p.__r_.__value_.__r.__words[0])
        (*(void (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 40))(__p.__r_.__value_.__r.__words[0]);
      else
        ++v20;
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_42;
    }
LABEL_40:
    if (v19)
      --*v19;
LABEL_42:
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
    else
      ++v26;
  }
  if (v24)
    (*(void (**)(void))(*(_QWORD *)v24 + 8))();
LABEL_47:
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0004, 0) | *(_QWORD *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_1AD78C728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  _QWORD *v21;

  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~VectorFstBaseImpl(v21);
  _Unwind_Resume(a1);
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetFinal(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  void *__p;
  _BYTE *v6;
  uint64_t v7;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * a2);
  v4 = *a3;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)a3[1], a3[2], (a3[2] - a3[1]) >> 2);
  *(_QWORD *)v3 = v4;
  if ((uint64_t *)v3 != &v4)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v3 + 8), (char *)__p, (uint64_t)v6, (v6 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_1AD78C854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  _QWORD *v2;
  unint64_t v3;

  *a1 = &unk_1E5D1FD58;
  v2 = (_QWORD *)a1[9];
  if (v2 != (_QWORD *)a1[8])
  {
    v3 = 0;
    v2 = (_QWORD *)a1[8];
    do
    {
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Destroy(v2[v3++]);
      v2 = (_QWORD *)a1[8];
    }
    while (v3 < (uint64_t)(a1[9] - (_QWORD)v2) >> 3);
  }
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::~FstImpl((uint64_t)a1);
}

void fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~VectorFstImpl(_QWORD *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::Properties(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) & a2;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

void fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::~FstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::~FstImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E5D22828;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 48 * v6;
    std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1AD78CA88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::reverse_iterator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>,std::reverse_iterator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>,std::reverse_iterator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::reverse_iterator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>,std::reverse_iterator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>,std::reverse_iterator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  char v17;
  __int128 v18;
  __int128 v19;

  v7 = a7;
  *(_QWORD *)&v19 = a6;
  *((_QWORD *)&v19 + 1) = a7;
  v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  v17 = 0;
  if (a3 == a5)
  {
    v14 = a6;
  }
  else
  {
    v9 = a3;
    v10 = a3;
    do
    {
      v11 = *(_QWORD *)(v10 - 48);
      v10 -= 48;
      *(_QWORD *)(v7 - 48) = v11;
      v12 = *(_QWORD *)(v10 + 8);
      *(_QWORD *)(v7 - 32) = 0;
      v13 = v7 - 32;
      *(_QWORD *)(v7 - 40) = v12;
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v7 - 32), *(const void **)(v10 + 16), *(_QWORD *)(v10 + 24), (uint64_t)(*(_QWORD *)(v10 + 24) - *(_QWORD *)(v10 + 16)) >> 2);
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(v9 - 8);
      v7 = *((_QWORD *)&v19 + 1) - 48;
      *((_QWORD *)&v19 + 1) -= 48;
      v9 = v10;
    }
    while (v10 != a5);
    v14 = v19;
  }
  v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::reverse_iterator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

void sub_1AD78CBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::reverse_iterator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::reverse_iterator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::AddArc(_QWORD *a1, _DWORD *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;

  if (!*a2)
    ++a1[4];
  if (!a2[1])
    ++a1[5];
  v3 = a1 + 6;
  v4 = a1[7];
  if (v4 >= a1[8])
  {
    result = std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__push_back_slow_path<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&>(v3, (uint64_t)a2);
  }
  else
  {
    std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__construct_one_at_end[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&>((uint64_t)v3, (uint64_t)a2);
    result = v4 + 48;
  }
  a1[7] = result;
  return result;
}

_QWORD *std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__construct_one_at_end[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *result;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v4 = *(_QWORD *)a2;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v4 + 16), *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 8) = v4 + 48;
  return result;
}

void sub_1AD78CCFC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__push_back_slow_path<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  _QWORD *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[12 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = (char *)&v10[12 * v9];
  *v11 = *(_QWORD *)a2;
  v12 = *(_QWORD *)(a2 + 8);
  v11[2] = 0;
  v11 += 2;
  *(v11 - 1) = v12;
  v11[1] = 0;
  v11[2] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v11, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
  v10[12 * v4 + 10] = *(_DWORD *)(a2 + 40);
  v16 += 6;
  std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1AD78CE24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::WriteFst<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  fst *v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t updated;
  fst *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;
  _BYTE v35[8];
  void *v36[2];
  void *v37[2];
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::string __p[5];
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v38 = 0u;
  v39 = 0u;
  *(_OWORD *)v36 = 0u;
  *(_OWORD *)v37 = 0u;
  v6 = -1;
  v41 = 0;
  v42 = 0;
  v40 = -1;
  v40 = (*(int (**)(_QWORD *))(*a1 + 24))(a1);
  v41 = -1;
  if ((*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, 1, 0))
  {
    v6 = 0;
LABEL_3:
    v7 = 0;
    v41 = (int)fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)a1);
    goto LABEL_6;
  }
  v8 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v8 + 5) + 32))(__p, *((_QWORD *)v8 + 5), 0, 1, 16);
    v6 = v44;
    if (v44 != -1)
      goto LABEL_3;
  }
  v7 = 1;
LABEL_6:
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  v9 |= 3uLL;
  fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (_BYTE *)a3, 2, __p, v9, (uint64_t)v35);
  v31 = v9;
  v32 = v6;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v10 = *(_QWORD *)(a1[1] + 72) - *(_QWORD *)(a1[1] + 64);
  v11 = v10 >> 3;
  if ((int)(v10 >> 3) < 1)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    v33 = v7;
    v12 = 0;
    v13 = (v10 >> 3);
    do
    {
      (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t))(*a1 + 32))(__p, a1, v12);
      fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Write((uint64_t)__p, a2);
      if (__p[0].__r_.__value_.__l.__size_)
      {
        __p[0].__r_.__value_.__r.__words[2] = __p[0].__r_.__value_.__l.__size_;
        operator delete((void *)__p[0].__r_.__value_.__l.__size_);
      }
      __p[0].__r_.__value_.__r.__words[0] = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, v12);
      std::ostream::write();
      v14 = *(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * v12);
      v16 = *(_QWORD *)(v14 + 48);
      v15 = *(_QWORD *)(v14 + 56);
      if (v15 == v16)
        v17 = 0;
      else
        v17 = *(_DWORD **)(v14 + 48);
      if (v15 != v16)
      {
        if ((unint64_t)((v15 - v16) / 48) <= 1)
          v18 = 1;
        else
          v18 = (v15 - v16) / 48;
        v19 = v17;
        do
        {
          v20 = *v19;
          v19 += 12;
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v20;
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v17[1];
          std::ostream::write();
          fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Write((uint64_t)(v17 + 2), a2);
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v17[10];
          std::ostream::write();
          v17 = v19;
          --v18;
        }
        while (v18);
      }
      ++v12;
    }
    while (v12 != v13);
    v7 = v33;
  }
  std::ostream::flush();
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v21 = fst::LogMessage::LogMessage((fst *)&v34, (uint64_t)__p);
    v22 = (_QWORD *)fst::cerr(v21);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"VectorFst::Write: write failed: ", 32);
    v24 = *(char *)(a3 + 23);
    if (v24 >= 0)
      v25 = a3;
    else
      v25 = *(_QWORD *)a3;
    if (v24 >= 0)
      v26 = *(unsigned __int8 *)(a3 + 23);
    else
      v26 = *(_QWORD *)(a3 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
LABEL_32:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v34);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    updated = 0;
    goto LABEL_35;
  }
  if (!v7)
  {
    if (v41 == v11)
    {
      updated = 1;
      goto LABEL_35;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v29 = fst::LogMessage::LogMessage((fst *)&v34, (uint64_t)__p);
    v30 = (_QWORD *)fst::cerr(v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_32;
  }
  v41 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  updated = fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, __p, v31, (uint64_t)v35, v32);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_35:
  if (SHIBYTE(v38) < 0)
    operator delete(v37[1]);
  if (SHIBYTE(v37[0]) < 0)
    operator delete(v36[0]);
  return updated;
}

void sub_1AD78D254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    operator delete(__p);
  fst::FstHeader::~FstHeader(&a15);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::WriteFstHeader(uint64_t a1, uint64_t a2, _BYTE *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  const std::string *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t result;
  BOOL v22;
  uint64_t v23;

  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    v13 = (const std::string *)fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(_QWORD *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
      v14 = a3[25] == 0;
    else
      v14 = 1;
    v15 = !v14;
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    if (a3[26])
      v17 = v16 == 0;
    else
      v17 = 1;
    v18 = v15 | 2;
    if (v17)
      v18 = v15;
    if (a3[27])
      v18 |= 4u;
    *(_DWORD *)(a7 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
    v19 = a3[25] == 0;
  else
    v19 = 1;
  if (!v19)
  {
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 72))(v20, a2);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  if (result)
    v22 = a3[26] == 0;
  else
    v22 = 1;
  if (!v22)
  {
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 72))(v23, a2);
  }
  return result;
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::UpdateFstHeader(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v16;
  uint64_t v17;
  fst *v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  fst *v24;
  _QWORD *v25;
  int v26;
  char *v27;
  fst *v28;
  _QWORD *v29;
  int v30;
  _BYTE v32[16];
  _QWORD v33[17];
  __int128 __p;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1AF44CB90](v32);
  v16 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    v17 = *((_QWORD *)v16 + 5);
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    __p = 0u;
    v35 = 0u;
    v42 = a8;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v17 + 40))(v33, v17, &__p, 16);
    if (v33[16] == -1)
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
  }
  MEMORY[0x1AF44CB9C](v32);
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v18 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
    v19 = (_QWORD *)fst::cerr(v18);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    v21 = *(char *)(a3 + 23);
    if (v21 >= 0)
      v22 = a3;
    else
      v22 = *(_QWORD *)a3;
    if (v21 >= 0)
      v23 = *(unsigned __int8 *)(a3 + 23);
    else
      v23 = *(_QWORD *)(a3 + 8);
  }
  else
  {
    fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::WriteFstHeader(a1, (uint64_t)a2, (_BYTE *)a3, a4, a5, a6, a7);
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      v24 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      v25 = (_QWORD *)fst::cerr(v24);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      v26 = *(char *)(a3 + 23);
      if (v26 >= 0)
        v22 = a3;
      else
        v22 = *(_QWORD *)a3;
      if (v26 >= 0)
        v23 = *(unsigned __int8 *)(a3 + 23);
      else
        v23 = *(_QWORD *)(a3 + 8);
    }
    else
    {
      MEMORY[0x1AF44CB90](v33, a2);
      v27 = (char *)a2 + *(_QWORD *)(*a2 - 24);
      if ((v27[32] & 5) == 0)
      {
        (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v27 + 5) + 32))(&__p, *((_QWORD *)v27 + 5), 0, 2, 16);
        if (v42 == -1)
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
      }
      MEMORY[0x1AF44CB9C](v33);
      if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0)
        return 1;
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      v28 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      v29 = (_QWORD *)fst::cerr(v28);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      v30 = *(char *)(a3 + 23);
      if (v30 >= 0)
        v22 = a3;
      else
        v22 = *(_QWORD *)a3;
      if (v30 >= 0)
        v23 = *(unsigned __int8 *)(a3 + 23);
      else
        v23 = *(_QWORD *)(a3 + 8);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v33);
  if (SBYTE7(v35) < 0)
    operator delete((void *)__p);
  return 0;
}

void sub_1AD78D748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  MEMORY[0x1AF44CB9C](&a12);
  _Unwind_Resume(a1);
}

uint64_t fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::WriteFile(fst *a1, uint64_t a2)
{
  fst *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  const std::string::value_type *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  std::string __p;
  __int16 v16;
  char v17;
  char v18;
  char v19;
  std::string v20;
  __int16 v21;
  char v22;
  char v23;
  _BYTE v24[384];
  _QWORD v25[20];

  v25[19] = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(_QWORD *)(a2 + 8))
    {
LABEL_5:
      std::ofstream::basic_ofstream(&v20);
      if ((v24[*(_QWORD *)(v20.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        v4 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
        v5 = (_QWORD *)fst::cerr(v4);
        v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fst::Write: Can't open file: ", 29);
        v7 = *(char *)(a2 + 23);
        if (v7 >= 0)
          v8 = (const std::string::value_type *)a2;
        else
          v8 = *(const std::string::value_type **)a2;
        if (v7 >= 0)
          v9 = *(unsigned __int8 *)(a2 + 23);
        else
          v9 = *(_QWORD *)(a2 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v10 = 0;
      }
      else
      {
        v13 = FLAGS_fst_align;
        if (*(char *)(a2 + 23) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          __p = *(std::string *)a2;
        v16 = 257;
        v17 = 1;
        v18 = v13;
        v10 = (*(uint64_t (**)(fst *, std::string *, std::string *))(*(_QWORD *)a1 + 96))(a1, &v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v20.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F48];
      *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words
                                + *(_QWORD *)(v20.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48]
                                                                                                  + 24);
      MEMORY[0x1AF44CA70](&v20.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x1AF44D094](v25);
      return v10;
    }
  }
  else if (*(_BYTE *)(a2 + 23))
  {
    goto LABEL_5;
  }
  v11 = fst::cout(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  v12 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v20 = __p;
  v21 = 257;
  v22 = 1;
  v23 = v12;
  v10 = (*(uint64_t (**)(fst *, uint64_t, std::string *))(*(_QWORD *)a1 + 96))(a1, v11, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v10;
}

void sub_1AD78DA18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::ofstream::~ofstream(&a21);
  _Unwind_Resume(a1);
}

void fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetFinal(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *__p;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _BYTE *v22;
  uint64_t v23;

  v6 = *(uint64_t **)(a1[8] + 8 * a2);
  v20 = *v6;
  v22 = 0;
  v23 = 0;
  v21 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v21, (const void *)v6[1], v6[2], (v6[2] - v6[1]) >> 2);
  v16 = *(_QWORD *)a3;
  v18 = 0;
  v19 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a3 + 8), *(_QWORD *)(a3 + 16), (uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 2);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetFinal((uint64_t)a1, a2, &v16);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  v12 = v20;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v13, v21, (uint64_t)v22, (v22 - (_BYTE *)v21) >> 2);
  v8 = *(_QWORD *)a3;
  v10 = 0;
  v11 = 0;
  v9 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v9, *(const void **)(a3 + 8), *(_QWORD *)(a3 + 16), (uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 2);
  a1[1] = a1[1] & 4 | fst::SetFinalProperties<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>(v7, (uint64_t)&v12, (uint64_t)&v8);
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
  if (v13)
  {
    v14 = v13;
    operator delete(v13);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
}

void sub_1AD78DBF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  void *v21;

  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  v21 = *(void **)(v19 - 56);
  if (v21)
  {
    *(_QWORD *)(v19 - 48) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::AddArc(_QWORD *a1, int a2, float *a3)
{
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;

  v6 = *(_QWORD *)(*(_QWORD *)(a1[8] + 8 * a2) + 56);
  if (v6 == *(_QWORD *)(*(_QWORD *)(a1[8] + 8 * a2) + 48))
    v7 = 0;
  else
    v7 = (_DWORD *)(v6 - 48);
  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | fst::AddArcProperties<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(v8, a2, a3, v7);
  return fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::AddArc(*(_QWORD **)(a1[8] + 8 * a2), a3);
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::DeleteStates(uint64_t a1, char **a2)
{
  uint64_t *v4;
  std::vector<int>::size_type v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  std::vector<int>::pointer begin;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  int64x2_t *v16;
  int64x2_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  int64x2_t v26;
  unint64_t v27;
  uint64_t v28;
  int *v29;
  int64x2_t v30;
  int64x2_t v31;
  std::vector<int>::value_type __x;
  std::vector<int> v33;

  v4 = (uint64_t *)(a1 + 64);
  v5 = (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3;
  __x = 0;
  std::vector<int>::vector(&v33, v5, &__x);
  v6 = *a2;
  v7 = a2[1] - *a2;
  if (v7)
  {
    v8 = v7 >> 2;
    begin = v33.__begin_;
    if (v8 <= 1)
      v8 = 1;
    do
    {
      v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  v11 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v11)
  {
    v13 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    do
    {
      if (v33.__begin_[v12] == -1)
      {
        fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Destroy(*(_QWORD *)(v11 + 8 * v12));
      }
      else
      {
        v33.__begin_[v12] = v13;
        if (v12 != v13)
          *(_QWORD *)(v11 + 8 * v13) = *(_QWORD *)(v11 + 8 * v12);
        ++v13;
      }
      ++v12;
      v11 = *(_QWORD *)(a1 + 64);
    }
    while (v12 < (*(_QWORD *)(a1 + 72) - v11) >> 3);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v13);
  v14 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) != v14)
  {
    v15 = 0;
    do
    {
      v16 = *(int64x2_t **)(v14 + 8 * v15);
      v17 = v16[2];
      v18 = v16[3].i64[1] - v16[3].i64[0];
      if (v18)
        v19 = v16[3].i64[0];
      else
        v19 = 0;
      if (v18)
      {
        v20 = 0;
        v21 = 0;
        v22 = (int *)(v19 + 40);
        do
        {
          v23 = v33.__begin_[*v22];
          if (v23 == -1)
          {
            v25 = *((_QWORD *)v22 - 5);
            v26.i64[0] = v25;
            v26.i64[1] = HIDWORD(v25);
            v17 = vaddq_s64(v17, vceqzq_s64(v26));
          }
          else
          {
            *v22 = v23;
            if (v20 != v21)
            {
              v30 = v17;
              v24 = (_QWORD *)(v19 + 48 * v21);
              *v24 = *((_QWORD *)v22 - 5);
              fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)(v24 + 1), (uint64_t)(v22 - 8));
              *(_DWORD *)(v19 + 48 * v21 + 40) = *v22;
              v14 = *v4;
              v17 = v30;
            }
            ++v21;
          }
          ++v20;
          v16 = *(int64x2_t **)(v14 + 8 * v15);
          v27 = 0xAAAAAAAAAAAAAAABLL * ((v16[3].i64[1] - v16[3].i64[0]) >> 4);
          v22 += 12;
        }
        while (v20 < v27);
        v31 = v17;
      }
      else
      {
        v31 = v16[2];
        v21 = 0;
        v27 = 0;
      }
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::DeleteArcs(v16, v27 - v21);
      v14 = *(_QWORD *)(a1 + 64);
      *(int64x2_t *)(*(_QWORD *)(v14 + 8 * v15++) + 32) = v31;
    }
    while (v15 < (*(_QWORD *)(a1 + 72) - v14) >> 3);
  }
  v28 = *(int *)(a1 + 88);
  if ((_DWORD)v28 == -1)
  {
    v29 = v33.__begin_;
    if (!v33.__begin_)
      return;
  }
  else
  {
    v29 = v33.__begin_;
    *(_DWORD *)(a1 + 88) = v33.__begin_[v28];
  }
  v33.__end_ = v29;
  operator delete(v29);
}

void sub_1AD78DF18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~MutableArcIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ArcIteratorBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::Reinit()
{
  return 0;
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Done_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) >= 0xAAAAAAAAAAAAAAABLL
                               * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56)
                                          - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48)) >> 4);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Value_(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) + 48 * *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Next_(uint64_t result)
{
  ++*(_QWORD *)(result + 24);
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Position_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Reset_(uint64_t result)
{
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Seek_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Flags_()
{
  return 15;
}

uint64_t std::__split_buffer<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 16);
    *(_QWORD *)(a1 + 16) = i - 16;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__append(uint64_t *a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  _QWORD v19[2];
  char *v20;
  char *v21;
  _QWORD *v22;

  v6 = a1[2];
  result = a1 + 2;
  v5 = v6;
  v7 = (_QWORD *)*(result - 1);
  if (a2 <= (v6 - (uint64_t)v7) >> 4)
  {
    if (a2)
    {
      v14 = 16 * a2;
      v15 = &v7[2 * a2];
      do
      {
        result = fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(v7);
        v7 += 2;
        v14 -= 16;
      }
      while (v14);
      v7 = v15;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    v8 = (uint64_t)v7 - *a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - *a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v22 = result;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)result, v12);
    else
      v13 = 0;
    v16 = &v13[16 * v10];
    v19[0] = v13;
    v19[1] = v16;
    v20 = v16;
    v21 = &v13[16 * v12];
    v17 = 16 * a2;
    v18 = &v16[16 * a2];
    do
    {
      fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(v16);
      v16 += 16;
      v17 -= 16;
    }
    while (v17);
    v20 = v18;
    std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__swap_out_circular_buffer(a1, v19);
    return (_QWORD *)std::__split_buffer<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~__split_buffer((uint64_t)v19);
  }
  return result;
}

void sub_1AD78E130(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void fst::RmEpsilon<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>(void *a1, uint64_t *a2, uint64_t a3)
{
  int v6;
  int v7;
  uint64_t v8;
  _DWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void **p_begin;
  int *v15;
  uint64_t v16;
  unint64_t v17;
  std::vector<int>::pointer v18;
  uint64_t v19;
  int v20;
  std::vector<int>::pointer v21;
  unint64_t v22;
  int v23;
  std::vector<unsigned int>::pointer v24;
  unsigned int *v25;
  std::vector<unsigned int>::pointer v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  char *v31;
  unsigned int *v32;
  unsigned int v33;
  signed int i;
  std::vector<unsigned int>::pointer end;
  unsigned int *v36;
  std::vector<unsigned int>::pointer begin;
  int64_t v38;
  unint64_t v39;
  int64_t v40;
  unint64_t v41;
  char *v42;
  unsigned int *v43;
  unsigned int v44;
  int begin_low;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  std::vector<unsigned int>::pointer v49;
  fst *v50;
  _QWORD *v51;
  std::vector<unsigned int>::pointer j;
  unint64_t v53;
  uint64_t v54;
  uint64_t k;
  uint64_t v56;
  void *v57;
  unint64_t m;
  unint64_t v59;
  unint64_t v60;
  float v61;
  int v62;
  _QWORD *v63;
  _QWORD *v64;
  _DWORD v65[2];
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  uint64_t v72;
  void *__p;
  uint64_t *v74;
  unint64_t v75;
  uint64_t *v76;
  unint64_t v77;
  int v78;
  char v79;
  char v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _BYTE v84[29];
  _BYTE v85[32];
  int v86;
  _QWORD v87[6];
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  _BYTE *v94;
  uint64_t v95;
  int v96;
  std::vector<int> v97;
  uint64_t v98;
  std::vector<int> v99;
  char v100;
  std::vector<int> *p_p;
  std::vector<int> *v102;
  uint64_t v103;
  std::vector<unsigned int> v104;
  char *v105;
  float v106;

  if ((*(unsigned int (**)(void *))(*(_QWORD *)a1 + 24))(a1) == -1)
    return;
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)a1 + 160))(a1);
  LOBYTE(__p) = 0;
  std::vector<BOOL>::vector(&v105, v6, (unsigned __int8 *)&__p);
  v7 = (*(uint64_t (**)(void *))(*(_QWORD *)a1 + 24))(a1);
  v8 = 0;
  *(_QWORD *)&v105[((unint64_t)v7 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v7;
LABEL_3:
  if ((int)v8 < (*(int (**)(void *))(*(_QWORD *)a1 + 160))(a1))
  {
    v77 = 0;
    (*(void (**)(void *, uint64_t, void **))(*(_QWORD *)a1 + 136))(a1, v8, &__p);
    while (__p)
    {
      if ((*(unsigned int (**)(void *))(*(_QWORD *)__p + 24))(__p))
      {
        if (__p)
        {
          (*(void (**)(void))(*(_QWORD *)__p + 8))();
          goto LABEL_26;
        }
LABEL_24:
        if (v76)
          --*(_DWORD *)v76;
LABEL_26:
        v8 = (v8 + 1);
        goto LABEL_3;
      }
      if (!__p)
        goto LABEL_12;
      v9 = (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
      v10 = __p;
      if (*v9)
        goto LABEL_15;
      if (__p)
      {
        v11 = (*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
        v10 = __p;
        goto LABEL_14;
      }
LABEL_13:
      v10 = 0;
      v11 = (uint64_t)&v74[6 * v77];
LABEL_14:
      if (*(_DWORD *)(v11 + 4))
      {
LABEL_15:
        if (v10)
        {
          v12 = (*(uint64_t (**)(void *))(*(_QWORD *)v10 + 32))(v10);
          v10 = __p;
        }
        else
        {
LABEL_17:
          v10 = 0;
          v12 = (uint64_t)&v74[6 * v77];
        }
        *(_QWORD *)&v105[((unint64_t)*(int *)(v12 + 40) >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << *(_DWORD *)(v12 + 40);
      }
      if (v10)
        (*(void (**)(void *))(*(_QWORD *)v10 + 40))(v10);
      else
        ++v77;
    }
    if (v77 >= v75)
      goto LABEL_24;
LABEL_12:
    if (LODWORD(v74[6 * v77]))
      goto LABEL_17;
    goto LABEL_13;
  }
  memset(&v104, 0, sizeof(v104));
  v13 = (*(uint64_t (**)(void *))(*(_QWORD *)a1 + 160))(a1);
  std::vector<int>::reserve(&v104, v13);
  if (((*(uint64_t (**)(void *, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x4000000000, 0) & 0x4000000000) != 0)
  {
    for (i = 0; i < (*(int (**)(void *))(*(_QWORD *)a1 + 160))(a1); ++i)
    {
      end = v104.__end_;
      if (v104.__end_ >= v104.__end_cap_.__value_)
      {
        begin = v104.__begin_;
        v38 = v104.__end_ - v104.__begin_;
        v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v40 = (char *)v104.__end_cap_.__value_ - (char *)v104.__begin_;
        if (((char *)v104.__end_cap_.__value_ - (char *)v104.__begin_) >> 1 > v39)
          v39 = v40 >> 1;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
          v41 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v41 = v39;
        if (v41)
        {
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v104.__end_cap_, v41);
          begin = v104.__begin_;
          end = v104.__end_;
        }
        else
        {
          v42 = 0;
        }
        v43 = (unsigned int *)&v42[4 * v38];
        *v43 = i;
        v36 = v43 + 1;
        while (end != begin)
        {
          v44 = *--end;
          *--v43 = v44;
        }
        v104.__begin_ = v43;
        v104.__end_ = v36;
        v104.__end_cap_.__value_ = (unsigned int *)&v42[4 * v41];
        if (begin)
          operator delete(begin);
      }
      else
      {
        *v104.__end_ = i;
        v36 = end + 1;
      }
      v104.__end_ = v36;
    }
LABEL_99:
    __p = a1;
    v74 = a2;
    v75 = (unint64_t)a1;
    v76 = a2;
    v77 = *(_QWORD *)a3;
    v78 = *(_DWORD *)(a3 + 16);
    v79 = *(_BYTE *)(a3 + 20);
    v80 = 1;
    v81 = 0u;
    v82 = 0u;
    v83 = 0u;
    memset(v84, 0, sizeof(v84));
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__clear[abi:ne180100](a2);
    memset(v85, 0, sizeof(v85));
    v86 = 1065353216;
    v90 = 0u;
    memset(v87, 0, sizeof(v87));
    v88 = 0u;
    v89 = 0u;
    v91 = 0;
    v93 = 0;
    v94 = 0;
    v95 = 0;
    v96 = 0;
    for (j = v104.__end_; v104.__begin_ != v104.__end_; j = v104.__end_)
    {
      v53 = (int)*(j - 1);
      v104.__end_ = j - 1;
      if (((*(_QWORD *)&v105[(v53 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v53) & 1) == 0)
      {
        if (*(_BYTE *)(a3 + 21))
          continue;
        LODWORD(p_p) = 0;
        LODWORD(p_p) = *(_DWORD *)(a3 + 24);
        LODWORD(v97.__begin_) = 0;
        LODWORD(v97.__begin_) = *(_DWORD *)(a3 + 28);
        LODWORD(v98) = 2139095040;
        v106 = INFINITY;
        if (*(float *)&p_p != INFINITY
          || *(float *)&v97.__begin_ != v106
          || *(_QWORD *)(a3 + 40) != *(_QWORD *)(a3 + 32)
          || *(_DWORD *)(a3 + 56) != -1)
        {
          continue;
        }
      }
      fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Expand(&__p, v53);
      v69 = v92;
      v71 = 0;
      v72 = 0;
      v70 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v70, v93, (uint64_t)v94, (v94 - (_BYTE *)v93) >> 2);
      (*(void (**)(void *, unint64_t, uint64_t *))(*(_QWORD *)a1 + 184))(a1, v53, &v69);
      if (v70)
      {
        v71 = v70;
        operator delete(v70);
      }
      (*(void (**)(void *, unint64_t))(*(_QWORD *)a1 + 240))(a1, v53);
      (*(void (**)(void *, unint64_t, unint64_t))(*(_QWORD *)a1 + 256))(a1, v53, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v90 + 1) - v90) >> 4));
      v54 = *((_QWORD *)&v90 + 1);
      for (k = v90; k != v54; k = v90)
      {
        (*(void (**)(void *, unint64_t, uint64_t))(*(_QWORD *)a1 + 208))(a1, v53, v54 - 48);
        v56 = *((_QWORD *)&v90 + 1);
        v57 = *(void **)(*((_QWORD *)&v90 + 1) - 32);
        if (v57)
        {
          *(_QWORD *)(*((_QWORD *)&v90 + 1) - 24) = v57;
          operator delete(v57);
        }
        v54 = v56 - 48;
        *((_QWORD *)&v90 + 1) = v56 - 48;
      }
    }
    if (*(_BYTE *)(a3 + 21)
      || (LODWORD(p_p) = 0,
          LODWORD(p_p) = *(_DWORD *)(a3 + 24),
          LODWORD(v97.__begin_) = 0,
          LODWORD(v97.__begin_) = *(_DWORD *)(a3 + 28),
          LODWORD(v98) = 2139095040,
          v106 = INFINITY,
          *(float *)&p_p != INFINITY)
      || *(float *)&v97.__begin_ != v106
      || *(_QWORD *)(a3 + 40) != *(_QWORD *)(a3 + 32)
      || *(_DWORD *)(a3 + 56) != -1)
    {
      for (m = 0; (uint64_t)m < (*(int (**)(void *))(*(_QWORD *)a1 + 160))(a1); ++m)
      {
        if (((*(_QWORD *)&v105[(m >> 3) & 0x1FFFFFFFFFFFFFF8] >> m) & 1) == 0)
          (*(void (**)(void *, unint64_t))(*(_QWORD *)a1 + 240))(a1, m);
      }
    }
    if (v84[28])
      (*(void (**)(void *, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, 4, 4);
    v59 = (*(uint64_t (**)(void *, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    v60 = fst::RmEpsilonProperties(v59, 0);
    (*(void (**)(void *, unint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v60, 0x3FFFFFFF0007);
    LODWORD(p_p) = 0;
    v61 = *(float *)(a3 + 24);
    v62 = *(_DWORD *)(a3 + 28);
    *(float *)&p_p = v61;
    LODWORD(v97.__begin_) = v62;
    LODWORD(v98) = 2139095040;
    v106 = INFINITY;
    if (v61 != INFINITY
      || *(float *)&v97.__begin_ != v106
      || *(_QWORD *)(a3 + 40) != *(_QWORD *)(a3 + 32)
      || *(_DWORD *)(a3 + 56) != -1)
    {
      *(float *)v65 = v61;
      v65[1] = v62;
      v67 = 0;
      v68 = 0;
      v66 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v66, *(const void **)(a3 + 32), *(_QWORD *)(a3 + 40), (uint64_t)(*(_QWORD *)(a3 + 40) - *(_QWORD *)(a3 + 32)) >> 2);
      fst::Prune<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t)a1, (uint64_t)v65, *(_DWORD *)(a3 + 56), 0.0009765625);
      if (v66)
      {
        v67 = v66;
        operator delete(v66);
      }
    }
    if (*(_BYTE *)(a3 + 21))
    {
      LODWORD(p_p) = 0;
      LODWORD(p_p) = *(_DWORD *)(a3 + 24);
      LODWORD(v97.__begin_) = 0;
      LODWORD(v97.__begin_) = *(_DWORD *)(a3 + 28);
      LODWORD(v98) = 2139095040;
      v106 = INFINITY;
      if (*(float *)&p_p == INFINITY
        && *(float *)&v97.__begin_ == v106
        && *(_QWORD *)(a3 + 40) == *(_QWORD *)(a3 + 32)
        && *(_DWORD *)(a3 + 56) == -1)
      {
        fst::Connect<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t)a1);
      }
    }
    if (v93)
    {
      v94 = v93;
      operator delete(v93);
    }
    p_p = (std::vector<int> *)&v90;
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
    v63 = (_QWORD *)*((_QWORD *)&v89 + 1);
    if (*((_QWORD *)&v89 + 1))
    {
      do
      {
        v64 = (_QWORD *)*v63;
        operator delete(v63);
        v63 = v64;
      }
      while (v64);
    }
    *((_QWORD *)&v89 + 1) = 0;
    if ((_QWORD)v88)
      operator delete((void *)v88);
    std::deque<int>::~deque[abi:ne180100](v87);
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v85);
    fst::ShortestDistanceState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ShortestDistanceState((uint64_t)&v75);
    goto LABEL_145;
  }
  if (((*(uint64_t (**)(void *, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x800000000, 0) & 0x800000000) == 0)
  {
    v98 = 0;
    p_p = 0;
    v102 = 0;
    v103 = 0;
    __p = &p_p;
    v74 = 0;
    v75 = 0;
    v76 = &v98;
    fst::DfsVisit<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>((uint64_t)a1, (uint64_t *)&__p, 0);
    std::vector<int>::vector(&v99, ((char *)v102 - (char *)p_p) >> 2, &fst::kNoStateId);
    std::vector<int>::vector(&v97, ((char *)v102 - (char *)p_p) >> 2, &fst::kNoStateId);
    p_begin = (void **)&p_p->__begin_;
    v15 = v99.__begin_;
    if (v102 != p_p)
    {
      v16 = 0;
      v17 = ((char *)v102 - (char *)p_p) >> 2;
      v18 = v97.__begin_;
      if (v17 <= 1)
        v17 = 1;
      do
      {
        v19 = *((int *)p_begin + v16);
        v20 = v15[v19];
        if (v20 != -1)
        {
          v18[v16] = v20;
          v19 = *((int *)p_begin + v16);
        }
        v15[v19] = v16++;
      }
      while (v17 != v16);
    }
    v21 = v99.__end_;
    if (v99.__end_ != v15)
    {
      v22 = 0;
      do
      {
        v23 = v15[v22];
        if (v23 != -1)
        {
          v24 = v104.__end_;
          do
          {
            if (v24 >= v104.__end_cap_.__value_)
            {
              v26 = v104.__begin_;
              v27 = v24 - v104.__begin_;
              v28 = v27 + 1;
              if ((unint64_t)(v27 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v29 = (char *)v104.__end_cap_.__value_ - (char *)v104.__begin_;
              if (((char *)v104.__end_cap_.__value_ - (char *)v104.__begin_) >> 1 > v28)
                v28 = v29 >> 1;
              if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
                v30 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v30 = v28;
              if (v30)
              {
                v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v104.__end_cap_, v30);
                v26 = v104.__begin_;
                v24 = v104.__end_;
              }
              else
              {
                v31 = 0;
              }
              v32 = (unsigned int *)&v31[4 * v27];
              *v32 = v23;
              v25 = v32 + 1;
              while (v24 != v26)
              {
                v33 = *--v24;
                *--v32 = v33;
              }
              v104.__begin_ = v32;
              v104.__end_ = v25;
              v104.__end_cap_.__value_ = (unsigned int *)&v31[4 * v30];
              if (v26)
                operator delete(v26);
            }
            else
            {
              *v24 = v23;
              v25 = v24 + 1;
            }
            v104.__end_ = v25;
            v23 = v97.__begin_[v23];
            v24 = v25;
          }
          while (v23 != -1);
          v15 = v99.__begin_;
          v21 = v99.__end_;
        }
        ++v22;
      }
      while (v22 < v21 - v15);
    }
    if (v97.__begin_)
    {
      v97.__end_ = v97.__begin_;
      operator delete(v97.__begin_);
      v15 = v99.__begin_;
    }
    if (v15)
    {
      v99.__end_ = v15;
      operator delete(v15);
    }
    if (p_p)
    {
      v102 = p_p;
      operator delete(p_p);
    }
    goto LABEL_99;
  }
  __p = 0;
  v74 = 0;
  v75 = 0;
  LOBYTE(v97.__begin_) = 0;
  p_p = (std::vector<int> *)&__p;
  v102 = &v97;
  fst::DfsVisit<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>((uint64_t)a1, (uint64_t)&p_p, 0);
  begin_low = LOBYTE(v97.__begin_);
  if (!LOBYTE(v97.__begin_))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(&v99, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(&v99, "ERROR");
    v50 = fst::LogMessage::LogMessage((fst *)&v100, (uint64_t)&v99);
    v51 = (_QWORD *)fst::cerr(v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"RmEpsilon: inconsistent acyclic property bit", 44);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v100);
    if (SHIBYTE(v99.__end_cap_.__value_) < 0)
      operator delete(v99.__begin_);
    (*(void (**)(void *, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, 4, 4);
    v46 = (uint64_t *)__p;
LABEL_96:
    if (v46)
      goto LABEL_97;
    goto LABEL_98;
  }
  std::vector<int>::resize(&v104, ((char *)v74 - (_BYTE *)__p) >> 2);
  v46 = (uint64_t *)__p;
  if (v74 == __p)
  {
    v46 = v74;
    goto LABEL_96;
  }
  v47 = 0;
  v48 = ((char *)v74 - (_BYTE *)__p) >> 2;
  v49 = v104.__begin_;
  if (v48 <= 1)
    v48 = 1;
  do
  {
    v49[*((int *)v46 + v47)] = v47;
    ++v47;
  }
  while (v48 != v47);
LABEL_97:
  v74 = v46;
  operator delete(v46);
LABEL_98:
  if (begin_low)
    goto LABEL_99;
LABEL_145:
  if (v104.__begin_)
  {
    v104.__end_ = v104.__begin_;
    operator delete(v104.__begin_);
  }
  if (v105)
    operator delete(v105);
}

void sub_1AD78ECC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  void *v22;
  void *v23;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v20 - 169));
  if (*(char *)(v20 - 177) < 0)
    operator delete(*(void **)(v20 - 200));
  if (__p)
    operator delete(__p);
  v22 = *(void **)(v20 - 144);
  if (v22)
  {
    *(_QWORD *)(v20 - 136) = v22;
    operator delete(v22);
  }
  v23 = *(void **)(v20 - 120);
  if (v23)
    operator delete(v23);
  _Unwind_Resume(a1);
}

uint64_t fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int *v9;
  int *v10;
  int *v11;
  int v12;
  int *v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  fst *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  fst *v26;
  _QWORD *v27;
  uint64_t v28;
  fst *v29;
  _QWORD *v30;
  uint64_t v31;
  fst *v32;
  _QWORD *v33;
  uint64_t v34;
  fst *v35;
  _QWORD *v36;
  fst *v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  fst *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  fst *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  fst *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  fst *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  void *__p[2];
  char v59;
  char v60;
  __int16 v61;
  void *v62[3];
  uint64_t v63[2];
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;

  *(_DWORD *)(a1 + 8) = 7;
  *(_BYTE *)(a1 + 12) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  v6 = (_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = &unk_1E5D239D8;
  v7 = (_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x4E00000000, 0);
  if ((v8 & 0x4000000000) != 0 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) == -1)
  {
    v21 = operator new();
    *(_DWORD *)(v21 + 8) = 5;
    *(_BYTE *)(v21 + 12) = 0;
    *(_QWORD *)v21 = &unk_1E5D1EEB0;
    *(_QWORD *)(v21 + 16) = 0xFFFFFFFF00000000;
    *(_QWORD *)(v21 + 32) = 0;
    *(_QWORD *)(v21 + 40) = 0;
    *(_QWORD *)(v21 + 24) = 0;
    *(_QWORD *)(a1 + 16) = v21;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v63, "INFO");
    v22 = fst::LogMessage::LogMessage((fst *)v62, (uint64_t)v63);
    v23 = (_QWORD *)fst::cerr(v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"AutoQueue: using state-order discipline", 39);
  }
  else if ((v8 & 0x800000000) != 0)
  {
    v25 = operator new();
    fst::TopOrderQueue<int>::TopOrderQueue<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(v25, a2);
    *(_QWORD *)(a1 + 16) = v25;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v63, "INFO");
    v26 = fst::LogMessage::LogMessage((fst *)v62, (uint64_t)v63);
    v27 = (_QWORD *)fst::cerr(v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"AutoQueue: using top-order discipline", 37);
  }
  else
  {
    if ((v8 & 0x200000000) == 0)
    {
      v66 = 0;
      v63[0] = (uint64_t)v7;
      v63[1] = 0;
      v64 = 0;
      v65 = &v66;
      fst::DfsVisit<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(a2, v63, 0);
      v9 = *(int **)(a1 + 48);
      v10 = *(int **)(a1 + 56);
      if (v9 != v10)
      {
        v11 = v9 + 1;
        if (v9 + 1 != v10)
        {
          v12 = *v9;
          v13 = v9 + 1;
          do
          {
            v15 = *v13++;
            v14 = v15;
            v16 = v12 < v15;
            if (v12 <= v15)
              v12 = v14;
            if (v16)
              v9 = v11;
            v11 = v13;
          }
          while (v13 != v10);
        }
      }
      v17 = *v9;
      v18 = *v9 + 1;
      std::vector<fst::QueueType>::vector(v62, v18);
      if (a3)
      {
        v19 = operator new();
        v20 = (_QWORD *)operator new();
        *v20 = a3;
      }
      else
      {
        v19 = 0;
        v20 = 0;
      }
      v61 = 0;
      fst::AutoQueue<int>::SccQueueType<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>(a2, v7, (uint64_t)v62, v19, &v61, (_BYTE *)&v61 + 1);
      if (HIBYTE(v61))
      {
        v31 = operator new();
        *(_DWORD *)(v31 + 8) = 2;
        *(_BYTE *)(v31 + 12) = 0;
        *(_OWORD *)(v31 + 16) = 0u;
        *(_OWORD *)(v31 + 32) = 0u;
        *(_OWORD *)(v31 + 48) = 0u;
        *(_QWORD *)v31 = &unk_1E5D27B60;
        *(_QWORD *)(a1 + 16) = v31;
        if (FLAGS_v < 2)
          goto LABEL_52;
        std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
        v32 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
        v33 = (_QWORD *)fst::cerr(v32);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"AutoQueue: using LIFO discipline", 32);
LABEL_30:
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v60);
        if (v59 < 0)
          operator delete(__p[0]);
LABEL_52:
        if (v20)
          MEMORY[0x1AF44D190](v20, 0x60C40B37CB4BBLL);
        if (v19)
          MEMORY[0x1AF44D190](v19, 0xC400A2AC0F1);
        v24 = v62[0];
        if (v62[0])
        {
          v62[1] = v62[0];
          goto LABEL_58;
        }
        return a1;
      }
      if ((_BYTE)v61)
      {
        v34 = operator new();
        fst::TopOrderQueue<int>::TopOrderQueue(v34, (uint64_t)v7);
        *(_QWORD *)(a1 + 16) = v34;
        if (FLAGS_v < 2)
          goto LABEL_52;
        std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
        v35 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
        v36 = (_QWORD *)fst::cerr(v35);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"AutoQueue: using top-order discipline", 37);
        goto LABEL_30;
      }
      if (FLAGS_v >= 2)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
        v37 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
        v38 = (_QWORD *)fst::cerr(v37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"AutoQueue: using SCC meta-discipline", 36);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v60);
        if (v59 < 0)
          operator delete(__p[0]);
      }
      std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v6, v18);
      if (v17 < 0)
      {
LABEL_51:
        v56 = operator new();
        *(_DWORD *)(v56 + 8) = 6;
        *(_BYTE *)(v56 + 12) = 0;
        *(_QWORD *)v56 = &unk_1E5D22CF0;
        *(_QWORD *)(v56 + 16) = v6;
        *(_QWORD *)(v56 + 24) = v7;
        *(_QWORD *)(v56 + 32) = 0xFFFFFFFF00000000;
        *(_QWORD *)(v56 + 48) = 0;
        *(_QWORD *)(v56 + 56) = 0;
        *(_QWORD *)(v56 + 40) = 0;
        *(_QWORD *)(a1 + 16) = v56;
        goto LABEL_52;
      }
      v39 = 0;
      while (1)
      {
        v40 = *((_DWORD *)v62[0] + v39);
        if (v40 == 3)
        {
          v44 = operator new();
          *(_DWORD *)(v44 + 8) = 3;
          *(_BYTE *)(v44 + 12) = 0;
          *(_QWORD *)v44 = &unk_1E5D21760;
          *(_OWORD *)(v44 + 16) = *(_OWORD *)v20;
          *(_OWORD *)(v44 + 32) = 0u;
          *(_OWORD *)(v44 + 48) = 0u;
          *(_OWORD *)(v44 + 64) = 0u;
          *(_OWORD *)(v44 + 80) = 0u;
          *(_OWORD *)(v44 + 92) = 0u;
          *(_QWORD *)(v44 + 120) = 0;
          *(_QWORD *)(v44 + 128) = 0;
          *(_QWORD *)(v44 + 112) = 0;
          *(_QWORD *)(*v6 + 8 * v39) = v44;
          if (FLAGS_v >= 3)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            v45 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
            v46 = (_QWORD *)fst::cerr(v45);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"AutoQueue: SCC #", 16);
            v47 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)": using shortest-first discipline", 33);
            goto LABEL_48;
          }
        }
        else if (v40 == 2)
        {
          v48 = operator new();
          *(_DWORD *)(v48 + 8) = 2;
          *(_BYTE *)(v48 + 12) = 0;
          *(_OWORD *)(v48 + 16) = 0u;
          *(_OWORD *)(v48 + 32) = 0u;
          *(_OWORD *)(v48 + 48) = 0u;
          *(_QWORD *)v48 = &unk_1E5D27B60;
          *(_QWORD *)(*v6 + 8 * v39) = v48;
          if (FLAGS_v >= 3)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            v49 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
            v50 = (_QWORD *)fst::cerr(v49);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"AutoQueue: SCC #", 16);
            v51 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)": using LIFO disciplle", 22);
            goto LABEL_48;
          }
        }
        else if (v40)
        {
          v52 = operator new();
          *(_DWORD *)(v52 + 8) = 1;
          *(_BYTE *)(v52 + 12) = 0;
          *(_OWORD *)(v52 + 16) = 0u;
          *(_OWORD *)(v52 + 32) = 0u;
          *(_OWORD *)(v52 + 48) = 0u;
          *(_QWORD *)v52 = &unk_1E5D23A28;
          *(_QWORD *)(*v6 + 8 * v39) = v52;
          if (FLAGS_v >= 3)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            v53 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
            v54 = (_QWORD *)fst::cerr(v53);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"AutoQueue: SCC #", 16);
            v55 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)": using FIFO disciplle", 22);
LABEL_48:
            fst::LogMessage::~LogMessage((fst::LogMessage *)&v60);
            if (v59 < 0)
              operator delete(__p[0]);
          }
        }
        else
        {
          *(_QWORD *)(*v6 + 8 * v39) = 0;
          if (FLAGS_v >= 3)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            v41 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
            v42 = (_QWORD *)fst::cerr(v41);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"AutoQueue: SCC #", 16);
            v43 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)": using trivial discipline", 26);
            goto LABEL_48;
          }
        }
        if (v18 == ++v39)
          goto LABEL_51;
      }
    }
    v28 = operator new();
    *(_DWORD *)(v28 + 8) = 2;
    *(_BYTE *)(v28 + 12) = 0;
    *(_OWORD *)(v28 + 16) = 0u;
    *(_OWORD *)(v28 + 32) = 0u;
    *(_OWORD *)(v28 + 48) = 0u;
    *(_QWORD *)v28 = &unk_1E5D27B60;
    *(_QWORD *)(a1 + 16) = v28;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v63, "INFO");
    v29 = fst::LogMessage::LogMessage((fst *)v62, (uint64_t)v63);
    v30 = (_QWORD *)fst::cerr(v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"AutoQueue: using LIFO discipline", 32);
  }
  fst::LogMessage::~LogMessage((fst::LogMessage *)v62);
  if (SHIBYTE(v64) < 0)
  {
    v24 = (void *)v63[0];
LABEL_58:
    operator delete(v24);
  }
  return a1;
}

void sub_1AD78F624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, int a17, char a18, char a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  void **v29;
  void **v30;
  void *v32;
  void *v33;

  if (a16 < 0)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  v32 = *v30;
  if (*v30)
  {
    *(_QWORD *)(v28 + 56) = v32;
    operator delete(v32);
  }
  v33 = *v29;
  if (*v29)
  {
    *(_QWORD *)(v28 + 32) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char inited;
  char v10;
  int *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  int v30;
  std::vector<char>::pointer end;
  char *v32;
  std::vector<char>::pointer begin;
  int64_t v34;
  int64_t v35;
  unint64_t v36;
  size_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char v42;
  char v43;
  uint64_t v44;
  int v45;
  std::vector<char>::value_type v46[8];
  std::vector<char>::value_type __x[8];
  int v48;
  int v49;
  void *v50;
  _QWORD v51[6];
  int *v52;
  _OWORD v53[2];
  __int128 v54;
  std::vector<char> v55;

  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitVisit((uint64_t)a2, a1);
  v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v45 == -1)
  {
    fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
    return;
  }
  memset(&v55, 0, sizeof(v55));
  v54 = 0u;
  memset(v53, 0, sizeof(v53));
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MemoryPool(&v50, 64);
  v44 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v44)
    v6 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v6 = (v45 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v6 <= (std::vector<char>::pointer)(v55.__end_ - v55.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v6 < (std::vector<char>::pointer)(v55.__end_ - v55.__begin_))
      v55.__end_ = &v55.__begin_[(int)v6];
  }
  else
  {
    std::vector<char>::__append(&v55, (int)v6 - (unint64_t)(v55.__end_ - v55.__begin_), __x);
  }
  v49 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v45 >= (int)v6)
    goto LABEL_100;
  v7 = v45;
  v43 = a3;
  do
  {
    v55.__begin_[(int)v7] = 1;
    v8 = (uint64_t)v52;
    if (v52)
    {
      v52 = (int *)*((_QWORD *)v52 + 6);
    }
    else
    {
      v8 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v51, 1);
      *(_QWORD *)(v8 + 48) = 0;
    }
    *(_DWORD *)v8 = v7;
    *(_QWORD *)(v8 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v7, v8 + 8);
    *(_QWORD *)v46 = v8;
    std::deque<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> *>>::push_back(v53, v46);
    inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, v7, v7);
LABEL_16:
    v10 = inited;
    while (*((_QWORD *)&v54 + 1))
    {
      v11 = *(int **)(*(_QWORD *)(*((_QWORD *)&v53[0] + 1)
                                + (((unint64_t)(*((_QWORD *)&v54 + 1) + v54 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                    + 8 * ((*((_QWORD *)&v54 + 1) + v54 - 1) & 0x1FF));
      v12 = *v11;
      v13 = v55.__end_ - v55.__begin_;
      if (v55.__end_ - v55.__begin_ <= v12)
      {
        v6 = v12 + 1;
        v46[0] = 0;
        if (v12 + 1 <= v13)
        {
          if (v12 + 1 < v13)
            v55.__end_ = &v55.__begin_[v6];
        }
        else
        {
          std::vector<char>::__append(&v55, v12 + 1 - v13, v46);
        }
      }
      if ((v10 & 1) == 0)
        goto LABEL_33;
      v14 = *((_QWORD *)v11 + 1);
      if (v14)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
          goto LABEL_33;
        v15 = *((_QWORD *)v11 + 1);
        if (v15)
        {
          v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
          goto LABEL_30;
        }
LABEL_29:
        v16 = *((_QWORD *)v11 + 2) + 48 * *((_QWORD *)v11 + 5);
LABEL_30:
        v17 = *(int *)(v16 + 40);
        v18 = v55.__end_ - v55.__begin_;
        if (v55.__end_ - v55.__begin_ <= v17)
        {
          v6 = v17 + 1;
          v46[0] = 0;
          if (v17 + 1 <= v18)
          {
            if (v17 + 1 < v18)
              v55.__end_ = &v55.__begin_[v6];
          }
          else
          {
            std::vector<char>::__append(&v55, v17 + 1 - v18, v46);
          }
        }
        if (*(_QWORD *)v16)
        {
          v23 = *((_QWORD *)v11 + 1);
          if (v23)
            goto LABEL_53;
          goto LABEL_54;
        }
        v24 = *(int *)(v16 + 40);
        v25 = v55.__begin_[v24];
        if (v25 == 1)
        {
          v10 = fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::BackArc((uint64_t)a2, v12, v16);
          v23 = *((_QWORD *)v11 + 1);
          if (v23)
            goto LABEL_53;
          goto LABEL_54;
        }
        if (v25 != 2)
        {
          v55.__begin_[v24] = 1;
          v26 = (uint64_t)v52;
          if (v52)
          {
            v52 = (int *)*((_QWORD *)v52 + 6);
          }
          else
          {
            v26 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v51, 1);
            *(_QWORD *)(v26 + 48) = 0;
          }
          *(_DWORD *)v26 = *(_DWORD *)(v16 + 40);
          *(_QWORD *)(v26 + 40) = 0;
          (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
          *(_QWORD *)v46 = v26;
          std::deque<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> *>>::push_back(v53, v46);
          inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, *(_DWORD *)(v16 + 40), v7);
          goto LABEL_16;
        }
        v10 = fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::ForwardOrCrossArc((_QWORD **)a2, v12, v16);
        v23 = *((_QWORD *)v11 + 1);
        if (!v23)
          goto LABEL_54;
LABEL_53:
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 40))(v23);
      }
      else
      {
        if (*((_QWORD *)v11 + 5) < *((_QWORD *)v11 + 3))
          goto LABEL_29;
LABEL_33:
        v55.__begin_[v12] = 2;
        v19 = *((_QWORD *)v11 + 1);
        if (v19)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        }
        else
        {
          v20 = (_DWORD *)*((_QWORD *)v11 + 4);
          if (v20)
            --*v20;
        }
        *((_QWORD *)v11 + 6) = v52;
        v52 = v11;
        --*((_QWORD *)&v54 + 1);
        std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v53, 1);
        if (*((_QWORD *)&v54 + 1))
        {
          v11 = *(int **)(*(_QWORD *)(*((_QWORD *)&v53[0] + 1)
                                    + (((unint64_t)(*((_QWORD *)&v54 + 1) + v54 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((*((_QWORD *)&v54 + 1) + v54 - 1) & 0x1FF));
          v21 = *v11;
          v22 = *((_QWORD *)v11 + 1);
          if (v22)
            (*(void (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
          fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState((uint64_t)a2, v12, v21);
          v23 = *((_QWORD *)v11 + 1);
          if (v23)
            goto LABEL_53;
LABEL_54:
          ++*((_QWORD *)v11 + 5);
        }
        else
        {
          fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState((uint64_t)a2, v12, -1);
        }
      }
    }
    if ((a3 & 1) != 0)
      break;
    if ((_DWORD)v7 == v45)
      v7 = 0;
    else
      v7 = (v7 + 1);
    if ((int)v7 < (int)v6)
    {
      v27 = &v55.__begin_[(int)v7];
      v28 = (int)v6 - (uint64_t)(int)v7;
      while (*v27++)
      {
        v7 = (v7 + 1);
        if (!--v28)
        {
          v7 = v6;
          break;
        }
      }
    }
    if (v44 || (_DWORD)v7 != (_DWORD)v6)
      continue;
LABEL_70:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v30 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_76;
      }
    }
    else if (v49 >= v48)
    {
      continue;
    }
    v30 = v49;
LABEL_76:
    if (v30 != (_DWORD)v6)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v49;
      goto LABEL_70;
    }
    end = v55.__end_;
    if (v55.__end_ >= v55.__end_cap_.__value_)
    {
      begin = v55.__begin_;
      v34 = v55.__end_ - v55.__begin_;
      v35 = v55.__end_ - v55.__begin_ + 1;
      if (v35 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v36 = v55.__end_cap_.__value_ - v55.__begin_;
      if (2 * (v55.__end_cap_.__value_ - v55.__begin_) > (unint64_t)v35)
        v35 = 2 * v36;
      if (v36 >= 0x3FFFFFFFFFFFFFFFLL)
        v37 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v37 = v35;
      if (v37)
        v38 = (char *)operator new(v37);
      else
        v38 = 0;
      v39 = &v38[v34];
      v40 = &v38[v34];
      *v40 = 0;
      v32 = v40 + 1;
      if (end != begin)
      {
        v41 = &end[~(unint64_t)begin];
        do
        {
          v42 = *--end;
          (v41--)[(_QWORD)v38] = v42;
        }
        while (end != begin);
        end = v55.__begin_;
        v39 = v38;
      }
      v55.__begin_ = v39;
      v55.__end_ = v32;
      v55.__end_cap_.__value_ = &v38[v37];
      if (end)
        operator delete(end);
    }
    else
    {
      *v55.__end_ = 0;
      v32 = end + 1;
    }
    v55.__end_ = v32;
    v6 = (v6 + 1);
    a3 = v43;
  }
  while ((v10 & 1) != 0 && (int)v7 < (int)v6);
LABEL_100:
  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v50 = &unk_1E5D198F0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Link>::~MemoryArena(v51);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v50);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v53);
  if (v55.__begin_)
  {
    v55.__end_ = v55.__begin_;
    operator delete(v55.__begin_);
  }
}

void sub_1AD78FE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D198F0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::AutoQueue<int>::SccQueueType<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _BYTE *a5, _BYTE *a6)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  char v18;
  int v19;
  float v20;
  float v21;
  float v22;
  float v23;
  void *__p[2];
  __int128 v28;
  _QWORD v29[3];
  _DWORD *v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  float v35;
  int v36;
  float v37;

  *a5 = 1;
  *a6 = 1;
  v9 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v9)
  {
    v10 = v9 >> 2;
    if (v10 <= 1)
      v10 = 1;
    bzero(*(void **)a3, 4 * v10);
  }
  v34 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v32);
  while (1)
  {
    result = v32;
    if (!v32)
    {
      if ((int)v34 >= v33)
        return result;
LABEL_11:
      v13 = v34;
      goto LABEL_12;
    }
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
    result = v32;
    if (v12)
      break;
    if (!v32)
      goto LABEL_11;
    v13 = (*(uint64_t (**)(void))(*(_QWORD *)v32 + 24))();
LABEL_12:
    v31 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 136))(a1, v13, v29);
    v14 = (int)v13;
    while (1)
    {
      if (!v29[0])
      {
        if (v31 >= v29[2])
          goto LABEL_49;
        goto LABEL_18;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v29[0] + 24))(v29[0]))
        break;
      if (v29[0])
      {
        v15 = (*(uint64_t (**)(void))(*(_QWORD *)v29[0] + 32))();
        goto LABEL_19;
      }
LABEL_18:
      v15 = v29[1] + 48 * v31;
LABEL_19:
      if (*(_QWORD *)v15)
        goto LABEL_43;
      v16 = *(int *)(*a2 + 4 * v14);
      if ((_DWORD)v16 == *(_DWORD *)(*a2 + 4 * *(int *)(v15 + 40)))
      {
        v17 = *(_DWORD **)a3;
        if (!a4)
          goto LABEL_25;
        *(_OWORD *)__p = 0u;
        v28 = 0u;
        v18 = fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::operator()(a4, v15 + 8, (uint64_t)__p);
        if (__p[1])
        {
          *(void **)&v28 = __p[1];
          operator delete(__p[1]);
        }
        if ((v18 & 1) != 0)
        {
LABEL_25:
          v19 = 1;
          goto LABEL_34;
        }
        if ((v17[v16] | 2) == 2)
        {
          LODWORD(__p[0]) = 0;
          v20 = *(float *)(v15 + 8);
          v21 = *(float *)(v15 + 12);
          *(float *)__p = v20;
          v37 = v21;
          v36 = 2139095040;
          v35 = INFINITY;
          if (v20 == INFINITY && v37 == v35 && *(_QWORD *)(v15 + 24) == *(_QWORD *)(v15 + 16)
            || (*(float *)__p = v20, v37 = v21, v36 = 0, v35 = 0.0, v20 == 0.0)
            && v37 == v35
            && *(_QWORD *)(v15 + 24) == *(_QWORD *)(v15 + 16))
          {
            v19 = 2;
          }
          else
          {
            v19 = 3;
          }
LABEL_34:
          v17[v16] = v19;
        }
        *a5 = 0;
      }
      LODWORD(__p[0]) = 0;
      v22 = *(float *)(v15 + 8);
      v23 = *(float *)(v15 + 12);
      *(float *)__p = v22;
      v37 = v23;
      v36 = 2139095040;
      v35 = INFINITY;
      if (v22 != INFINITY || v37 != v35 || *(_QWORD *)(v15 + 24) != *(_QWORD *)(v15 + 16))
      {
        *(float *)__p = v22;
        v37 = v23;
        v36 = 0;
        v35 = 0.0;
        if (v22 != 0.0 || v37 != v35 || *(_QWORD *)(v15 + 24) != *(_QWORD *)(v15 + 16))
          *a6 = 0;
      }
LABEL_43:
      if (v29[0])
        (*(void (**)(_QWORD))(*(_QWORD *)v29[0] + 40))(v29[0]);
      else
        ++v31;
    }
    if (v29[0])
    {
      (*(void (**)(void))(*(_QWORD *)v29[0] + 8))();
      goto LABEL_51;
    }
LABEL_49:
    if (v30)
      --*v30;
LABEL_51:
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 32))(v32);
    else
      ++v34;
  }
  if (v32)
    return (*(uint64_t (**)(void))(*(_QWORD *)v32 + 8))();
  return result;
}

void sub_1AD7902A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a22)
    (*(void (**)(uint64_t))(*(_QWORD *)a22 + 8))(a22);
  _Unwind_Resume(exception_object);
}

uint64_t fst::TopOrderQueue<int>::TopOrderQueue<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(uint64_t a1, uint64_t a2)
{
  std::vector<int> *v3;
  fst *v4;
  _QWORD *v5;
  void *__p[2];
  char v8;
  char v9;
  _QWORD v10[3];
  char v11;

  *(_DWORD *)(a1 + 8) = 4;
  *(_BYTE *)(a1 + 12) = 0;
  *(_QWORD *)a1 = &unk_1E5D1CC68;
  *(_QWORD *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + 24) = 0u;
  v3 = (std::vector<int> *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v11 = 0;
  v10[0] = a1 + 24;
  v10[1] = &v11;
  fst::DfsVisit<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(a2, (uint64_t)v10, 0);
  if (!v11)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v4 = fst::LogMessage::LogMessage((fst *)&v9, (uint64_t)__p);
    v5 = (_QWORD *)fst::cerr(v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"TopOrderQueue: fst is not acyclic.", 34);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v9);
    if (v8 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 12) = 1;
  }
  std::vector<int>::resize(v3, (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2, &fst::kNoStateId);
  return a1;
}

void sub_1AD790450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  void **v19;
  void **v20;
  void *v22;
  void *v23;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  v22 = *v19;
  if (*v19)
  {
    *(_QWORD *)(v18 + 56) = v22;
    operator delete(v22);
  }
  v23 = *v20;
  if (*v20)
  {
    *(_QWORD *)(v18 + 32) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int v33;
  std::vector<char>::pointer end;
  char *v35;
  std::vector<char>::pointer begin;
  int64_t v37;
  int64_t v38;
  unint64_t v39;
  size_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char v45;
  char v46;
  uint64_t v47;
  int v48;
  std::vector<char>::value_type v49[8];
  std::vector<char>::value_type __x[8];
  int v51;
  int v52;
  void *v53;
  _QWORD v54[6];
  _QWORD *v55;
  _OWORD v56[2];
  __int128 v57;
  std::vector<char> v58;

  v6 = (_QWORD *)operator new();
  v6[1] = 0;
  v6[2] = 0;
  *v6 = 0;
  *(_QWORD *)(a2 + 16) = v6;
  **(_BYTE **)(a2 + 8) = 1;
  v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v48 == -1)
  {
    fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishVisit((char ***)a2);
    return;
  }
  memset(&v58, 0, sizeof(v58));
  v57 = 0u;
  memset(v56, 0, sizeof(v56));
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MemoryPool(&v53, 64);
  v47 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v47)
    v7 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v7 = (v48 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v7 <= (std::vector<char>::pointer)(v58.__end_ - v58.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v7 < (std::vector<char>::pointer)(v58.__end_ - v58.__begin_))
      v58.__end_ = &v58.__begin_[(int)v7];
  }
  else
  {
    std::vector<char>::__append(&v58, (int)v7 - (unint64_t)(v58.__end_ - v58.__begin_), __x);
  }
  v52 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v48 >= (int)v7)
    goto LABEL_106;
  v8 = v48;
  v46 = a3;
  do
  {
    v58.__begin_[(int)v8] = 1;
    v9 = (uint64_t)v55;
    if (v55)
    {
      v55 = (_QWORD *)v55[6];
    }
    else
    {
      v9 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v54, 1);
      *(_QWORD *)(v9 + 48) = 0;
    }
    *(_DWORD *)v9 = v8;
    *(_QWORD *)(v9 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v8, v9 + 8);
    *(_QWORD *)v49 = v9;
    std::deque<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> *>>::push_back(v56, v49);
    v10 = *((_QWORD *)&v57 + 1);
    if (!*((_QWORD *)&v57 + 1))
    {
      v11 = 1;
      if ((a3 & 1) != 0)
        break;
      goto LABEL_66;
    }
    v11 = 1;
    do
    {
      v12 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                   + (((unint64_t)(v10 + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v10 + v57 - 1) & 0x1FF));
      v13 = *(int *)v12;
      v14 = v58.__end_ - v58.__begin_;
      if (v58.__end_ - v58.__begin_ <= v13)
      {
        v7 = v13 + 1;
        v49[0] = 0;
        if (v13 + 1 <= v14)
        {
          if (v13 + 1 < v14)
            v58.__end_ = &v58.__begin_[v7];
        }
        else
        {
          std::vector<char>::__append(&v58, v13 + 1 - v14, v49);
        }
      }
      if ((v11 & 1) == 0)
      {
LABEL_32:
        v58.__begin_[v13] = 2;
        v20 = v12[1];
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        }
        else
        {
          v21 = (_DWORD *)v12[4];
          if (v21)
            --*v21;
        }
        v12[6] = v55;
        v55 = v12;
        --*((_QWORD *)&v57 + 1);
        std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v56, 1);
        if (!*((_QWORD *)&v57 + 1))
        {
          fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState(a2, v13);
          goto LABEL_62;
        }
        v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                    + (((unint64_t)(*((_QWORD *)&v57 + 1) + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((*((_QWORD *)&v57 + 1) + v57 - 1) & 0x1FF));
        v23 = *(_QWORD *)(v22 + 8);
        if (v23)
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 32))(v23);
        fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState(a2, v13);
        v24 = *(_QWORD *)(v22 + 8);
        if (v24)
        {
LABEL_41:
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
          goto LABEL_62;
        }
        ++*(_QWORD *)(v22 + 40);
        goto LABEL_62;
      }
      v15 = v12[1];
      if (!v15)
      {
        if (v12[5] >= v12[3])
          goto LABEL_32;
LABEL_28:
        v17 = v12[2] + 48 * v12[5];
        goto LABEL_29;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
        goto LABEL_32;
      v16 = v12[1];
      if (!v16)
        goto LABEL_28;
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
LABEL_29:
      v18 = *(int *)(v17 + 40);
      v19 = v58.__end_ - v58.__begin_;
      if (v58.__end_ - v58.__begin_ <= v18)
      {
        v7 = v18 + 1;
        v49[0] = 0;
        if (v18 + 1 <= v19)
        {
          if (v18 + 1 < v19)
            v58.__end_ = &v58.__begin_[v7];
        }
        else
        {
          std::vector<char>::__append(&v58, v18 + 1 - v19, v49);
        }
      }
      if (*(_QWORD *)v17)
      {
        v24 = v12[1];
        if (v24)
          goto LABEL_41;
LABEL_58:
        ++v12[5];
        goto LABEL_62;
      }
      v25 = *(int *)(v17 + 40);
      v26 = v58.__begin_[v25];
      if (v26 == 1)
      {
        **(_BYTE **)(a2 + 8) = 0;
        v28 = v12[1];
        if (v28)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
          v11 = 0;
          goto LABEL_62;
        }
        v11 = 0;
        goto LABEL_58;
      }
      if (v26 == 2)
      {
        v27 = v12[1];
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
        else
          ++v12[5];
      }
      else
      {
        v58.__begin_[v25] = 1;
        v29 = (uint64_t)v55;
        if (v55)
        {
          v55 = (_QWORD *)v55[6];
        }
        else
        {
          v29 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v54, 1);
          *(_QWORD *)(v29 + 48) = 0;
        }
        *(_DWORD *)v29 = *(_DWORD *)(v17 + 40);
        *(_QWORD *)(v29 + 40) = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
        *(_QWORD *)v49 = v29;
        std::deque<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> *>>::push_back(v56, v49);
      }
      v11 = 1;
LABEL_62:
      v10 = *((_QWORD *)&v57 + 1);
    }
    while (*((_QWORD *)&v57 + 1));
    if ((a3 & 1) != 0)
      break;
LABEL_66:
    if ((_DWORD)v8 == v48)
      v8 = 0;
    else
      v8 = (v8 + 1);
    if ((int)v8 < (int)v7)
    {
      v30 = &v58.__begin_[(int)v8];
      v31 = (int)v7 - (uint64_t)(int)v8;
      while (*v30++)
      {
        v8 = (v8 + 1);
        if (!--v31)
        {
          v8 = v7;
          break;
        }
      }
    }
    if (v47 || (_DWORD)v8 != (_DWORD)v7)
      continue;
LABEL_76:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_82;
      }
    }
    else if (v52 >= v51)
    {
      continue;
    }
    v33 = v52;
LABEL_82:
    if (v33 != (_DWORD)v7)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v52;
      goto LABEL_76;
    }
    end = v58.__end_;
    if (v58.__end_ >= v58.__end_cap_.__value_)
    {
      begin = v58.__begin_;
      v37 = v58.__end_ - v58.__begin_;
      v38 = v58.__end_ - v58.__begin_ + 1;
      if (v38 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v39 = v58.__end_cap_.__value_ - v58.__begin_;
      if (2 * (v58.__end_cap_.__value_ - v58.__begin_) > (unint64_t)v38)
        v38 = 2 * v39;
      if (v39 >= 0x3FFFFFFFFFFFFFFFLL)
        v40 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v40 = v38;
      if (v40)
        v41 = (char *)operator new(v40);
      else
        v41 = 0;
      v42 = &v41[v37];
      v43 = &v41[v37];
      *v43 = 0;
      v35 = v43 + 1;
      if (end != begin)
      {
        v44 = &end[~(unint64_t)begin];
        do
        {
          v45 = *--end;
          (v44--)[(_QWORD)v41] = v45;
        }
        while (end != begin);
        end = v58.__begin_;
        v42 = v41;
      }
      v58.__begin_ = v42;
      v58.__end_ = v35;
      v58.__end_cap_.__value_ = &v41[v40];
      a3 = v46;
      if (end)
        operator delete(end);
    }
    else
    {
      *v58.__end_ = 0;
      v35 = end + 1;
    }
    v58.__end_ = v35;
    v7 = (v7 + 1);
  }
  while ((v11 & 1) != 0 && (int)v8 < (int)v7);
LABEL_106:
  fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishVisit((char ***)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v53 = &unk_1E5D198F0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Link>::~MemoryArena(v54);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v53);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v56);
  if (v58.__begin_)
  {
    v58.__end_ = v58.__begin_;
    operator delete(v58.__begin_);
  }
}

void sub_1AD790BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D198F0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Expand(_QWORD *a1, int a2)
{
  char *v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  float32x2_t *v22;
  float v23;
  float v24;
  void **v25;
  int *v26;
  unint64_t v27;
  unint64_t v28;
  int *v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  unint64_t v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  float32x2_t *v41;
  float v42;
  float v43;
  float32x2_t *v44;
  int *v45;
  unint64_t v46;
  unint64_t v47;
  int *v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int *i;
  char *v57;
  float32x2_t *v58;
  uint64_t v59;
  _QWORD *v60;
  float32x2_t v61;
  int v62;
  float32x2_t v63;
  void *__p;
  _BYTE *v65;
  unint64_t v66;
  float32x2_t v67;
  void *v68;
  void *v69;
  _BYTE *v70;
  uint64_t v71;
  int v72;
  _QWORD *v73;
  char *v74;
  char *v75;
  _DWORD *v76;
  unint64_t v77;
  int v78[3];

  v78[0] = a2;
  a1[36] = vdup_n_s32(0x7F800000u);
  v4 = (char *)(a1 + 37);
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a1 + 296, 0, 0, 0);
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__clear[abi:ne180100](a1 + 33);
  fst::ShortestDistanceState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::ShortestDistance(a1 + 2, a2);
  if (*((_BYTE *)a1 + 132))
    return;
  v57 = v4;
  v60 = a1 + 23;
  std::deque<int>::push_back(a1 + 23, v78);
  v5 = a1[28];
  if (!v5)
    goto LABEL_84;
  v6 = a1 + 33;
  v58 = (float32x2_t *)(a1 + 36);
  v7 = a1 + 29;
  do
  {
    v8 = v5 - 1;
    v9 = *(unsigned int *)(*(_QWORD *)(a1[24] + (((unint64_t)(a1[27] + v8) >> 7) & 0x1FFFFFFFFFFFFF8))
                         + 4 * ((a1[27] + v8) & 0x3FF));
    a1[28] = v8;
    std::deque<int>::__maybe_remove_back_spare[abi:ne180100](v60, 1);
    v10 = (int)v9;
    v59 = v9;
    while (a1[30] <= (unint64_t)(int)v9)
    {
      v67.i8[0] = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 29), &v67);
    }
    v11 = *(_QWORD *)(*v7 + 8 * ((unint64_t)(int)v9 >> 6));
    if ((v11 & (1 << v9)) != 0)
      goto LABEL_72;
    *(_QWORD *)(*v7 + 8 * ((unint64_t)(int)v9 >> 6)) = v11 | (1 << v9);
    v12 = a1[32];
    v13 = operator new(0x10uLL);
    *(_QWORD *)v13 = v12;
    v13[2] = v9;
    a1[32] = v13;
    v14 = *a1;
    v77 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 136))(v14);
    while (1)
    {
      if (!v73)
      {
        if (v77 >= (unint64_t)v75)
          goto LABEL_56;
        goto LABEL_13;
      }
      if ((*(unsigned int (**)(_QWORD *))(*v73 + 24))(v73))
        break;
      if (v73)
      {
        v15 = (char *)(*(uint64_t (**)(void))(*v73 + 32))();
        goto LABEL_14;
      }
LABEL_13:
      v15 = &v74[48 * v77];
LABEL_14:
      v67 = *(float32x2_t *)v15;
      v68 = (void *)*((_QWORD *)v15 + 1);
      v70 = 0;
      v71 = 0;
      v69 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v69, *((const void **)v15 + 2), *((_QWORD *)v15 + 3), (uint64_t)(*((_QWORD *)v15 + 3) - *((_QWORD *)v15 + 2)) >> 2);
      v72 = *((_DWORD *)v15 + 10);
      fst::Times<fst::LatticeWeightTpl<float>,int>((float32x2_t *)(*(_QWORD *)a1[1] + 32 * v10), (float32x2_t *)&v68, (int32x2_t *)&v63);
      v68 = (void *)v63;
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v69, (char *)__p, (uint64_t)v65, (v65 - (_BYTE *)__p) >> 2);
      if (__p)
      {
        v65 = __p;
        operator delete(__p);
      }
      if (v67)
      {
        v61 = v67;
        v62 = v72;
        v16 = std::__hash_table<std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,std::__unordered_map_hasher<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementKey,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementEqual,true>,std::__unordered_map_equal<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementEqual,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>>>::find<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element>(a1 + 17, (int *)&v61);
        if (!v16)
        {
          v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[34] - a1[33]) >> 4);
          v38 = *((_DWORD *)a1 + 80);
          v63 = v61;
          LODWORD(__p) = v62;
          LODWORD(v65) = v38;
          v66 = v37;
          std::__hash_table<std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,std::__unordered_map_hasher<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementKey,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementEqual,true>,std::__unordered_map_equal<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementEqual,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>>>::__emplace_unique_key_args<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>>((uint64_t)(a1 + 17), (int *)&v63, (uint64_t)&v63);
          v39 = a1[34];
          if (v39 >= a1[35])
            goto LABEL_42;
LABEL_41:
          std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__construct_one_at_end[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&>((uint64_t)v6, (uint64_t)&v67);
          v40 = v39 + 48;
LABEL_43:
          a1[34] = v40;
          goto LABEL_49;
        }
        v17 = *((_DWORD *)a1 + 80);
        if (*((_DWORD *)v16 + 8) != v17)
        {
          *((_DWORD *)v16 + 8) = v17;
          v39 = a1[34];
          v16[5] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - a1[33]) >> 4);
          if (v39 < a1[35])
            goto LABEL_41;
LABEL_42:
          v40 = std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__push_back_slow_path<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&>(v6, (uint64_t)&v67);
          goto LABEL_43;
        }
        v18 = v16[5];
        v19 = v6;
        v20 = *v6;
        v21 = *v6 + 48 * v18;
        v23 = *(float *)(v21 + 8);
        v24 = *(float *)(v21 + 12);
        v22 = (float32x2_t *)(v21 + 8);
        v25 = (void **)v22;
        if ((float)(v23 + v24) >= (float)(*(float *)&v68 + *((float *)&v68 + 1)))
        {
          v25 = &v68;
          if ((float)(v23 + v24) <= (float)(*(float *)&v68 + *((float *)&v68 + 1)))
          {
            v25 = (void **)v22;
            if (v23 >= *(float *)&v68)
            {
              v25 = &v68;
              if (v23 <= *(float *)&v68)
              {
                v26 = *(int **)(v20 + 48 * v18 + 16);
                v27 = *(_QWORD *)(v20 + 48 * v18 + 24) - (_QWORD)v26;
                v28 = v27 >> 2;
                v29 = (int *)v69;
                v30 = (unint64_t)(v70 - (_BYTE *)v69) >> 2;
                v25 = &v68;
                if ((int)(v27 >> 2) <= (int)v30)
                {
                  v25 = (void **)v22;
                  if ((int)v28 >= 1)
                  {
                    v25 = (void **)v22;
                    if ((int)v28 >= (int)v30)
                    {
                      v31 = (v27 >> 2) - 1;
                      while (1)
                      {
                        v33 = *v26++;
                        v32 = v33;
                        v35 = *v29++;
                        v34 = v35;
                        if (v32 < v35)
                          break;
                        if (v32 > v34 || v31-- == 0)
                        {
                          v25 = (void **)v22;
                          goto LABEL_45;
                        }
                      }
                      v25 = &v68;
                    }
                  }
                }
              }
            }
          }
        }
LABEL_45:
        v63 = (float32x2_t)*v25;
        v65 = 0;
        v66 = 0;
        __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v25[1], (uint64_t)v25[2], ((_BYTE *)v25[2] - (_BYTE *)v25[1]) >> 2);
        *v22 = v63;
        if (v22 != &v63)
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v20 + 48 * v18 + 16), (char *)__p, (uint64_t)v65, (v65 - (_BYTE *)__p) >> 2);
        v6 = v19;
        if (__p)
        {
          v65 = __p;
          operator delete(__p);
        }
      }
      else
      {
        while (a1[30] <= (unint64_t)v72)
        {
          v63.i8[0] = 0;
          std::vector<BOOL>::push_back((uint64_t)(a1 + 29), &v63);
        }
        if (((*(_QWORD *)(*v7 + (((unint64_t)v72 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v72) & 1) == 0)
          std::deque<int>::push_back(v60, &v72);
      }
LABEL_49:
      if (v69)
      {
        v70 = v69;
        operator delete(v69);
      }
      if (v73)
        (*(void (**)(_QWORD *))(*v73 + 40))(v73);
      else
        ++v77;
    }
    if (v73)
    {
      (*(void (**)(void))(*v73 + 8))();
      goto LABEL_58;
    }
LABEL_56:
    if (v76)
      --*v76;
LABEL_58:
    v41 = (float32x2_t *)(*(_QWORD *)a1[1] + 32 * v10);
    (*(void (**)(float32x2_t *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(&v63, *a1, v59);
    fst::Times<fst::LatticeWeightTpl<float>,int>(v41, &v63, (int32x2_t *)&v73);
    v42 = *((float *)a1 + 72);
    v43 = v42 + *((float *)a1 + 73);
    v44 = (float32x2_t *)(a1 + 36);
    if (v43 >= (float)(*(float *)&v73 + *((float *)&v73 + 1)))
    {
      if (v43 > (float)(*(float *)&v73 + *((float *)&v73 + 1)))
        goto LABEL_63;
      v44 = (float32x2_t *)(a1 + 36);
      if (v42 >= *(float *)&v73)
      {
        if (v42 > *(float *)&v73)
          goto LABEL_63;
        v45 = (int *)a1[37];
        v46 = a1[38] - (_QWORD)v45;
        v47 = v46 >> 2;
        v48 = (int *)v74;
        v49 = (unint64_t)(v75 - v74) >> 2;
        if ((int)(v46 >> 2) > (int)v49)
          goto LABEL_63;
        v44 = (float32x2_t *)(a1 + 36);
        if ((int)v47 >= 1)
        {
          v44 = (float32x2_t *)(a1 + 36);
          if ((int)v47 >= (int)v49)
          {
            v50 = (v46 >> 2) - 1;
            while (1)
            {
              v52 = *v45++;
              v51 = v52;
              v54 = *v48++;
              v53 = v54;
              if (v51 < v54)
                break;
              if (v51 > v53 || v50-- == 0)
              {
                v44 = (float32x2_t *)(a1 + 36);
                goto LABEL_64;
              }
            }
LABEL_63:
            v44 = (float32x2_t *)&v73;
          }
        }
      }
    }
LABEL_64:
    v67 = *v44;
    v69 = 0;
    v70 = 0;
    v68 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v68, *(const void **)&v44[1], *(_QWORD *)&v44[2], (uint64_t)(*(_QWORD *)&v44[2] - *(_QWORD *)&v44[1]) >> 2);
    *v58 = v67;
    if (v58 != &v67)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v57, (char *)v68, (uint64_t)v69, ((_BYTE *)v69 - (_BYTE *)v68) >> 2);
    if (v68)
    {
      v69 = v68;
      operator delete(v68);
    }
    if (v74)
    {
      v75 = v74;
      operator delete(v74);
    }
    if (__p)
    {
      v65 = __p;
      operator delete(__p);
    }
LABEL_72:
    v5 = a1[28];
  }
  while (v5);
LABEL_84:
  for (i = (int *)a1[32]; i; i = (int *)a1[32])
  {
    *(_QWORD *)(a1[29] + (((unint64_t)i[2] >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << i[2]);
    a1[32] = *(_QWORD *)i;
    operator delete(i);
  }
  ++*((_DWORD *)a1 + 80);
}

void sub_1AD791348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,void *a24,uint64_t a25)
{
  uint64_t v25;
  void *v27;

  if (__p)
    operator delete(__p);
  v27 = *(void **)(v25 - 128);
  if (v27)
  {
    *(_QWORD *)(v25 - 120) = v27;
    operator delete(v27);
  }
  if (a19)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

void fst::Prune<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(uint64_t a1, uint64_t a2, int a3, double a4)
{
  float v6;
  void *__p;
  void *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  float v12;

  v6 = a4;
  v8 = 0;
  v9 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  v10 = a3;
  v11 = 0;
  v12 = v6;
  fst::Prune<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(a1);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
}

void sub_1AD79149C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::~RmEpsilonState(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  void **v7;

  v2 = *(void **)(a1 + 296);
  if (v2)
  {
    *(_QWORD *)(a1 + 304) = v2;
    operator delete(v2);
  }
  v7 = (void **)(a1 + 264);
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v3 = *(_QWORD **)(a1 + 256);
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  *(_QWORD *)(a1 + 256) = 0;
  v5 = *(void **)(a1 + 232);
  if (v5)
    operator delete(v5);
  std::deque<int>::~deque[abi:ne180100]((_QWORD *)(a1 + 184));
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 136);
  fst::ShortestDistanceState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ShortestDistanceState(a1 + 16);
  return a1;
}

_QWORD *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = *((_DWORD *)result + 2);
  v5 = (_QWORD *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    v2 = a2 - v6;
    *result = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    result = memset(v5, 255, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

void fst::ShortestDistanceState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::ShortestDistance(uint64_t *a1, int a2)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  int32x2_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  _QWORD *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  int32x2_t v31;
  int v32;
  uint64_t *v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  BOOL v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, _QWORD, int32x2_t *);
  char v45;
  int32x2_t v46;
  float32x2_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  unint64_t i;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  float v75;
  float v76;
  int32x2_t *v77;
  float v78;
  BOOL v79;
  uint64_t v80;
  BOOL v81;
  _BYTE *v82;
  uint64_t v83;
  const void *v84;
  size_t v85;
  int v86;
  int v87;
  float v88;
  float v89;
  int32x2_t *v90;
  uint64_t v91;
  int *v92;
  unint64_t v93;
  unint64_t v94;
  int *v95;
  unint64_t v96;
  BOOL v97;
  uint64_t v98;
  int v99;
  int v100;
  int v101;
  int v102;
  uint64_t v104;
  uint64_t v105;
  float v106;
  float v107;
  int32x2_t *v108;
  uint64_t v109;
  int *v110;
  unint64_t v111;
  unint64_t v112;
  int *v113;
  unint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int *v121;
  unint64_t v122;
  unint64_t v123;
  int *v124;
  unint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  int v129;
  int v130;
  _BYTE *v132;
  int32x2_t v133;
  void *v134;
  _BYTE *v135;
  uint64_t v136;
  int32x2_t v137;
  void *v138;
  _BYTE *v139;
  uint64_t v140;
  int32x2_t v141;
  void *__p;
  void *v143;
  _DWORD *v144;
  unint64_t v145;
  float32x2_t v146;
  void *v147;
  void *v148;
  uint64_t v149;
  float v150;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a1 + 24))(*a1) == -1)
  {
    if (!(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*a1 + 64))(*a1, 4, 0))
      return;
    v132 = (char *)a1 + 116;
LABEL_211:
    *v132 = 1;
    return;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 56))(*(_QWORD *)(a1[2] + 16));
  if (!*((_BYTE *)a1 + 33))
  {
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__clear[abi:ne180100]((uint64_t *)a1[1]);
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__clear[abi:ne180100](a1 + 5);
    a1[9] = 0;
  }
  if (a2 == -1)
    a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 24))(*a1);
  v4 = a2;
  v5 = (uint64_t *)a1[1];
  v6 = v5 + 1;
  v7 = *v5;
  if (a2 >= (unint64_t)((v5[1] - *v5) >> 5))
  {
    v8 = vdup_n_s32(0x7F800000u);
    do
    {
      v141 = v8;
      v143 = 0;
      v144 = 0;
      __p = 0;
      v9 = v5[1];
      if (v9 >= v5[2])
      {
        v10 = std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>(v5, (uint64_t)&v141);
      }
      else
      {
        std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>((uint64_t)v5, (uint64_t)&v141);
        v10 = v9 + 32;
      }
      *v6 = v10;
      if (__p)
      {
        v143 = __p;
        operator delete(__p);
      }
      v141 = v8;
      v143 = 0;
      v144 = 0;
      __p = 0;
      v11 = a1[6];
      if (v11 >= a1[7])
      {
        v12 = std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>(a1 + 5, (uint64_t)&v141);
      }
      else
      {
        std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>((uint64_t)(a1 + 5), (uint64_t)&v141);
        v12 = v11 + 32;
      }
      a1[6] = v12;
      if (__p)
      {
        v143 = __p;
        operator delete(__p);
      }
      v141.i8[0] = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &v141);
      v5 = (uint64_t *)a1[1];
      v6 = v5 + 1;
      v7 = *v5;
    }
    while (a2 >= (unint64_t)((v5[1] - *v5) >> 5));
  }
  if (*((_BYTE *)a1 + 33))
  {
    v13 = (char *)a1[11];
    v14 = (char *)a1[12];
    v15 = (v14 - v13) >> 2;
    if (v15 <= a2)
    {
      v16 = a1 + 13;
      do
      {
        if ((unint64_t)v14 >= *v16)
        {
          v18 = v15 + 1;
          if ((v15 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v19 = *v16 - (_QWORD)v13;
          if (v19 >> 1 > v18)
            v18 = v19 >> 1;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
            v20 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v20);
            v13 = (char *)a1[11];
            v14 = (char *)a1[12];
          }
          else
          {
            v21 = 0;
          }
          v22 = &v21[4 * v15];
          *(_DWORD *)v22 = -1;
          v17 = v22 + 4;
          while (v14 != v13)
          {
            v23 = *((_DWORD *)v14 - 1);
            v14 -= 4;
            *((_DWORD *)v22 - 1) = v23;
            v22 -= 4;
          }
          a1[11] = (uint64_t)v22;
          a1[12] = (uint64_t)v17;
          a1[13] = (uint64_t)&v21[4 * v20];
          if (v13)
          {
            operator delete(v13);
            v13 = (char *)a1[11];
          }
          else
          {
            v13 = v22;
          }
        }
        else
        {
          *(_DWORD *)v14 = -1;
          v17 = v14 + 4;
        }
        a1[12] = (uint64_t)v17;
        v15 = (v17 - v13) >> 2;
        v14 = v17;
      }
      while (v15 <= a2);
      v7 = *(_QWORD *)a1[1];
    }
    *(_DWORD *)&v13[4 * a2] = *((_DWORD *)a1 + 28);
  }
  v24 = v7 + 32 * a2;
  *(_QWORD *)v24 = 0;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v24 + 8), 0, 0, 0);
  v25 = a1 + 5;
  v26 = a1[5] + 32 * v4;
  *(_QWORD *)v26 = 0;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v26 + 8), 0, 0, 0);
  v27 = a1 + 8;
  v28 = *(uint64_t **)(a1[2] + 16);
  v29 = *v28;
  *(_QWORD *)(a1[8] + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v4;
  (*(void (**)(uint64_t *, unint64_t))(v29 + 24))(v28, v4);
  v30 = a1 + 13;
  v132 = (char *)a1 + 116;
  v31 = vdup_n_s32(0x7F800000u);
  do
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 48))(*(_QWORD *)(a1[2] + 16)) & 1) != 0)
    {
LABEL_210:
      ++*((_DWORD *)a1 + 28);
      if (!(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*a1 + 64))(*a1, 4, 0))
        return;
      goto LABEL_211;
    }
    v32 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 16))(*(_QWORD *)(a1[2] + 16));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 32))(*(_QWORD *)(a1[2] + 16));
    while (1)
    {
      v33 = (uint64_t *)a1[1];
      v34 = v33 + 1;
      if (v32 < (unint64_t)((v33[1] - *v33) >> 5))
        break;
      v141 = v31;
      v143 = 0;
      v144 = 0;
      __p = 0;
      v35 = v33[1];
      if (v35 >= v33[2])
      {
        v36 = std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>(v33, (uint64_t)&v141);
      }
      else
      {
        std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>((uint64_t)v33, (uint64_t)&v141);
        v36 = v35 + 32;
      }
      *v34 = v36;
      if (__p)
      {
        v143 = __p;
        operator delete(__p);
      }
      v141 = v31;
      v143 = 0;
      v144 = 0;
      __p = 0;
      v37 = a1[6];
      if (v37 >= a1[7])
      {
        v38 = std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>(a1 + 5, (uint64_t)&v141);
      }
      else
      {
        std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>((uint64_t)(a1 + 5), (uint64_t)&v141);
        v38 = v37 + 32;
      }
      a1[6] = v38;
      if (__p)
      {
        v143 = __p;
        operator delete(__p);
      }
      v141.i8[0] = 0;
      std::vector<BOOL>::push_back((uint64_t)v27, &v141);
    }
    if (*((_BYTE *)a1 + 32))
    {
      (*(void (**)(int32x2_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)*a1 + 32))(&v141, *a1, v32);
      v137.i32[0] = v141.i32[1];
      v146.i32[0] = v141.i32[0];
      v133.i32[0] = 2139095040;
      v150 = INFINITY;
      if (*(float *)v141.i32 == INFINITY)
      {
        v40 = __p;
        if (*(float *)v137.i32 == v150)
        {
          v39 = v143 != __p;
          if (!__p)
          {
LABEL_64:
            if (v39)
              goto LABEL_210;
            goto LABEL_65;
          }
        }
        else
        {
          v39 = 1;
          if (!__p)
            goto LABEL_64;
        }
      }
      else
      {
        v39 = 1;
        v40 = __p;
        if (!__p)
          goto LABEL_64;
      }
      v143 = v40;
      operator delete(v40);
      goto LABEL_64;
    }
LABEL_65:
    *(_QWORD *)(*v27 + (((unint64_t)v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v32);
    v41 = *v25 + 32 * v32;
    v146 = *(float32x2_t *)v41;
    v148 = 0;
    v149 = 0;
    v147 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v147, *(const void **)(v41 + 8), *(_QWORD *)(v41 + 16), (uint64_t)(*(_QWORD *)(v41 + 16) - *(_QWORD *)(v41 + 8)) >> 2);
    v42 = *v25 + 32 * v32;
    *(int32x2_t *)v42 = v31;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v42 + 8), 0, 0, 0);
    v43 = *a1;
    v44 = *(void (**)(uint64_t, _QWORD, int32x2_t *))(*(_QWORD *)*a1 + 136);
    v145 = 0;
    v44(v43, v32, &v141);
    while (1)
    {
      if (!*(_QWORD *)&v141)
      {
        if (v145 >= (unint64_t)v143)
        {
          v86 = 10;
          goto LABEL_198;
        }
        goto LABEL_71;
      }
      v45 = (*(uint64_t (**)(int32x2_t))(**(_QWORD **)&v141 + 24))(v141);
      v46 = v141;
      if ((v45 & 1) != 0)
        break;
      if (v141)
      {
        v47 = (float32x2_t *)(*(uint64_t (**)(void))(**(_QWORD **)&v141 + 32))();
        goto LABEL_72;
      }
LABEL_71:
      v47 = (float32x2_t *)((char *)__p + 48 * v145);
LABEL_72:
      if (*v47)
      {
        v46 = v141;
        goto LABEL_166;
      }
      v48 = (uint64_t *)a1[1];
      v49 = v48 + 1;
      for (i = v47[5].i32[0]; i >= (v48[1] - *v48) >> 5; i = v47[5].i32[0])
      {
        v137 = v31;
        v139 = 0;
        v140 = 0;
        v138 = 0;
        v51 = v48[1];
        if (v51 >= v48[2])
        {
          v52 = std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>(v48, (uint64_t)&v137);
        }
        else
        {
          std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>((uint64_t)v48, (uint64_t)&v137);
          v52 = v51 + 32;
        }
        *v49 = v52;
        if (v138)
        {
          v139 = v138;
          operator delete(v138);
        }
        v137 = v31;
        v139 = 0;
        v140 = 0;
        v138 = 0;
        v53 = a1[6];
        if (v53 >= a1[7])
        {
          v54 = std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>(a1 + 5, (uint64_t)&v137);
        }
        else
        {
          std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&>((uint64_t)(a1 + 5), (uint64_t)&v137);
          v54 = v53 + 32;
        }
        a1[6] = v54;
        if (v138)
        {
          v139 = v138;
          operator delete(v138);
        }
        v137.i8[0] = 0;
        std::vector<BOOL>::push_back((uint64_t)v27, &v137);
        v48 = (uint64_t *)a1[1];
        v49 = v48 + 1;
      }
      if (*((_BYTE *)a1 + 33))
      {
        v55 = (char *)a1[11];
        v56 = (char *)a1[12];
        v57 = (v56 - v55) >> 2;
        if (v57 <= (int)i)
        {
          do
          {
            if ((unint64_t)v56 >= *v30)
            {
              v60 = v57 + 1;
              if ((v57 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v61 = *v30 - (_QWORD)v55;
              if (v61 >> 1 > v60)
                v60 = v61 >> 1;
              if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
                v62 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v62 = v60;
              if (v62)
              {
                v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v30, v62);
                v55 = (char *)a1[11];
                v56 = (char *)a1[12];
              }
              else
              {
                v63 = 0;
              }
              v64 = &v63[4 * v57];
              *(_DWORD *)v64 = -1;
              v59 = v64 + 4;
              while (v56 != v55)
              {
                v65 = *((_DWORD *)v56 - 1);
                v56 -= 4;
                *((_DWORD *)v64 - 1) = v65;
                v64 -= 4;
              }
              a1[11] = (uint64_t)v64;
              a1[12] = (uint64_t)v59;
              a1[13] = (uint64_t)&v63[4 * v62];
              if (v55)
              {
                operator delete(v55);
                v55 = (char *)a1[11];
              }
              else
              {
                v55 = v64;
              }
            }
            else
            {
              *(_DWORD *)v56 = -1;
              v59 = v56 + 4;
            }
            a1[12] = (uint64_t)v59;
            v57 = (v59 - v55) >> 2;
            LODWORD(i) = v47[5].i32[0];
            v56 = v59;
          }
          while (v57 <= (int)i);
          v58 = (int)i;
          v48 = (uint64_t *)a1[1];
        }
        else
        {
          v58 = (int)i;
        }
        if (*(_DWORD *)&v55[4 * v58] != *((_DWORD *)a1 + 28))
        {
          v66 = *v48 + 32 * v58;
          *(int32x2_t *)v66 = v31;
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v66 + 8), 0, 0, 0);
          v67 = *v25 + 32 * v47[5].i32[0];
          *(int32x2_t *)v67 = v31;
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v67 + 8), 0, 0, 0);
          v48 = (uint64_t *)a1[1];
          v68 = a1[11];
          v69 = *((_DWORD *)a1 + 28);
          v70 = v47[5].i32[0];
          *(_QWORD *)(a1[8] + ((v70 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v70);
          *(_DWORD *)(v68 + 4 * v70) = v69;
          LODWORD(i) = v47[5].i32[0];
        }
      }
      v71 = *v48;
      v72 = *v25;
      fst::Times<fst::LatticeWeightTpl<float>,int>(&v146, v47 + 1, &v137);
      v73 = (int)i;
      v74 = v71 + 32 * (int)i;
      v75 = *(float *)v74;
      v76 = *(float *)v74 + *(float *)(v74 + 4);
      v77 = (int32x2_t *)v74;
      if (v76 >= (float)(*(float *)v137.i32 + *(float *)&v137.i32[1]))
      {
        if (v76 > (float)(*(float *)v137.i32 + *(float *)&v137.i32[1]))
          goto LABEL_111;
        v77 = (int32x2_t *)v74;
        if (v75 >= *(float *)v137.i32)
        {
          if (v75 > *(float *)v137.i32)
            goto LABEL_111;
          v92 = *(int **)(v71 + 32 * v73 + 8);
          v93 = *(_QWORD *)(v71 + 32 * v73 + 16) - (_QWORD)v92;
          v94 = v93 >> 2;
          v95 = (int *)v138;
          v96 = (unint64_t)(v139 - (_BYTE *)v138) >> 2;
          if ((int)(v93 >> 2) > (int)v96)
            goto LABEL_111;
          v97 = (int)v94 < 1 || (int)v94 < (int)v96;
          v77 = (int32x2_t *)v74;
          if (!v97)
          {
            v98 = (v93 >> 2) - 1;
            while (1)
            {
              v100 = *v92++;
              v99 = v100;
              v102 = *v95++;
              v101 = v102;
              if (v99 < v102)
                break;
              if (v99 > v101 || v98-- == 0)
              {
                v77 = (int32x2_t *)v74;
                goto LABEL_114;
              }
            }
LABEL_111:
            v77 = &v137;
          }
        }
      }
LABEL_114:
      v133 = *v77;
      v135 = 0;
      v136 = 0;
      v134 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v134, *(const void **)&v77[1], *(_QWORD *)&v77[2], (uint64_t)(*(_QWORD *)&v77[2] - *(_QWORD *)&v77[1]) >> 2);
      v78 = *(float *)(v74 + 4);
      v79 = *(float *)v74 == *(float *)v133.i32 && v78 == *(float *)&v133.i32[1];
      if (v79 || vabds_f32(*(float *)v74 + v78, *(float *)v133.i32 + *(float *)&v133.i32[1]) <= *((float *)a1 + 7))
      {
        v80 = v73;
        v83 = v71 + 32 * v73;
        v84 = *(const void **)(v83 + 8);
        v85 = *(_QWORD *)(v83 + 16) - (_QWORD)v84;
        v82 = v134;
        if (v85 != v135 - (_BYTE *)v134)
        {
          v81 = 0;
          if (!v134)
            goto LABEL_126;
LABEL_125:
          v135 = v82;
          operator delete(v82);
          goto LABEL_126;
        }
        v81 = memcmp(v84, v134, v85) == 0;
        if (v82)
          goto LABEL_125;
      }
      else
      {
        v80 = v73;
        v81 = 0;
        v82 = v134;
        if (v134)
          goto LABEL_125;
      }
LABEL_126:
      if (v81)
      {
        v86 = 0;
        v87 = 1;
        v30 = a1 + 13;
        v27 = a1 + 8;
        goto LABEL_163;
      }
      v88 = *(float *)v74;
      v89 = *(float *)v74 + *(float *)(v74 + 4);
      v90 = (int32x2_t *)v74;
      v91 = v80;
      if (v89 >= (float)(*(float *)v137.i32 + *(float *)&v137.i32[1]))
      {
        if (v89 > (float)(*(float *)v137.i32 + *(float *)&v137.i32[1]))
          goto LABEL_130;
        v90 = (int32x2_t *)v74;
        if (v88 >= *(float *)v137.i32)
        {
          if (v88 > *(float *)v137.i32)
            goto LABEL_130;
          v110 = *(int **)(v71 + 32 * v80 + 8);
          v111 = *(_QWORD *)(v71 + 32 * v80 + 16) - (_QWORD)v110;
          v112 = v111 >> 2;
          v113 = (int *)v138;
          v114 = (unint64_t)(v139 - (_BYTE *)v138) >> 2;
          if ((int)(v111 >> 2) > (int)v114)
            goto LABEL_130;
          v90 = (int32x2_t *)v74;
          if ((int)v112 >= 1)
          {
            v90 = (int32x2_t *)v74;
            if ((int)v112 >= (int)v114)
            {
              v115 = (v111 >> 2) - 1;
              while (1)
              {
                v117 = *v110++;
                v116 = v117;
                v119 = *v113++;
                v118 = v119;
                if (v116 < v119)
                  break;
                if (v116 > v118 || v115-- == 0)
                {
                  v90 = (int32x2_t *)v74;
                  goto LABEL_146;
                }
              }
LABEL_130:
              v90 = &v137;
            }
          }
        }
      }
LABEL_146:
      v133 = *v90;
      v135 = 0;
      v136 = 0;
      v134 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v134, *(const void **)&v90[1], *(_QWORD *)&v90[2], (uint64_t)(*(_QWORD *)&v90[2] - *(_QWORD *)&v90[1]) >> 2);
      *(int32x2_t *)v74 = v133;
      v27 = a1 + 8;
      if ((int32x2_t *)v74 != &v133)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v71 + 32 * v91 + 8), (char *)v134, (uint64_t)v135, (v135 - (_BYTE *)v134) >> 2);
      if (v134)
      {
        v135 = v134;
        operator delete(v134);
      }
      v104 = v91;
      v105 = v72 + 32 * v91;
      v106 = *(float *)v105;
      v107 = *(float *)v105 + *(float *)(v105 + 4);
      v108 = (int32x2_t *)v105;
      if (v107 < (float)(*(float *)v137.i32 + *(float *)&v137.i32[1]))
        goto LABEL_154;
      if (v107 <= (float)(*(float *)v137.i32 + *(float *)&v137.i32[1]))
      {
        v108 = (int32x2_t *)v105;
        if (v106 < *(float *)v137.i32)
          goto LABEL_154;
        if (v106 <= *(float *)v137.i32)
        {
          v121 = *(int **)(v72 + 32 * v104 + 8);
          v122 = *(_QWORD *)(v72 + 32 * v104 + 16) - (_QWORD)v121;
          v123 = v122 >> 2;
          v124 = (int *)v138;
          v125 = (unint64_t)(v139 - (_BYTE *)v138) >> 2;
          if ((int)(v122 >> 2) <= (int)v125)
          {
            v108 = (int32x2_t *)v105;
            if ((int)v123 < 1)
              goto LABEL_154;
            v108 = (int32x2_t *)v105;
            if ((int)v123 < (int)v125)
              goto LABEL_154;
            v126 = (v122 >> 2) - 1;
            while (1)
            {
              v128 = *v121++;
              v127 = v128;
              v130 = *v124++;
              v129 = v130;
              if (v127 < v130)
                break;
              if (v127 > v129 || v126-- == 0)
              {
                v108 = (int32x2_t *)v105;
                goto LABEL_154;
              }
            }
          }
        }
      }
      v108 = &v137;
LABEL_154:
      v133 = *v108;
      v135 = 0;
      v136 = 0;
      v134 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v134, *(const void **)&v108[1], *(_QWORD *)&v108[2], (uint64_t)(*(_QWORD *)&v108[2] - *(_QWORD *)&v108[1]) >> 2);
      *(int32x2_t *)v105 = v133;
      if ((int32x2_t *)v105 != &v133)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v72 + 32 * v104 + 8), (char *)v134, (uint64_t)v135, (v135 - (_BYTE *)v134) >> 2);
      if (v134)
      {
        v135 = v134;
        operator delete(v134);
      }
      v30 = a1 + 13;
      if (fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Member(v74)
        && fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Member(v105))
      {
        v109 = **(_QWORD **)(a1[2] + 16);
        if (((*(_QWORD *)(a1[8] + (((unint64_t)v47[5].i32[0] >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v47[5].i32[0]) & 1) != 0)
        {
          (*(void (**)(void))(v109 + 40))();
          v86 = 0;
          v87 = 1;
        }
        else
        {
          (*(void (**)(void))(v109 + 24))();
          v86 = 0;
          v87 = 1;
          *(_QWORD *)(a1[8] + (((unint64_t)v47[5].i32[0] >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v47[5].i32[0];
        }
      }
      else
      {
        v87 = 0;
        v86 = 1;
        *v132 = 1;
      }
LABEL_163:
      if (v138)
      {
        v139 = v138;
        operator delete(v138);
      }
      v46 = v141;
      if (!v87)
        goto LABEL_195;
LABEL_166:
      if (v46)
        (*(void (**)(int32x2_t))(**(_QWORD **)&v46 + 40))(v46);
      else
        ++v145;
    }
    v86 = 10;
LABEL_195:
    if (v46)
    {
      (*(void (**)(int32x2_t))(**(_QWORD **)&v46 + 8))(v46);
      goto LABEL_200;
    }
LABEL_198:
    if (v144)
      --*v144;
LABEL_200:
    if (v86 == 10)
      v86 = 0;
    if (v147)
    {
      v148 = v147;
      operator delete(v147);
    }
  }
  while (!v86);
}

void sub_1AD792430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  void *v29;

  v29 = *(void **)(v27 - 136);
  if (v29)
  {
    *(_QWORD *)(v27 - 128) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

void std::deque<int>::push_back(_QWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 7) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<int>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_DWORD *)(*(_QWORD *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<int>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x400;
  v4 = v2 - 1024;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1AD792854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,std::__unordered_map_hasher<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementKey,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementEqual,true>,std::__unordered_map_equal<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementEqual,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>>>::find<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element>(_QWORD *a1, int *a2)
{
  int8x8_t v2;
  uint64_t v3;
  int v4;
  int v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t *result;
  unint64_t v11;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v4 = a2[1];
  v3 = a2[2];
  v5 = *a2;
  v6 = v3 + 7853 * *a2 + 7867 * v4;
  v7 = (uint8x8_t)vcnt_s8(v2);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = v3 + 7853 * v5 + 7867 * v4;
    if (v6 >= *(_QWORD *)&v2)
      v8 = v6 % *(_QWORD *)&v2;
  }
  else
  {
    v8 = v6 & (*(_QWORD *)&v2 - 1);
  }
  v9 = *(uint64_t ***)(*a1 + 8 * v8);
  if (!v9)
    return 0;
  for (result = *v9; result; result = (uint64_t *)*result)
  {
    v11 = result[1];
    if (v11 == v6)
    {
      if (*((_DWORD *)result + 4) == v5 && *(uint64_t *)((char *)result + 20) == __PAIR64__(v3, v4))
        return result;
    }
    else
    {
      if (v7.u32[0] > 1uLL)
      {
        if (v11 >= *(_QWORD *)&v2)
          v11 %= *(_QWORD *)&v2;
      }
      else
      {
        v11 &= *(_QWORD *)&v2 - 1;
      }
      if (v11 != v8)
        return 0;
    }
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,std::__unordered_map_hasher<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementKey,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementEqual,true>,std::__unordered_map_equal<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementEqual,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>>>::__emplace_unique_key_args<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>>(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = a2[1];
  v6 = a2[2];
  v8 = *a2;
  v9 = v6 + 7853 * *a2 + 7867 * v7;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = v6 + 7853 * v8 + 7867 * v7;
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 4) == v8 && *(_QWORD *)((char *)v13 + 20) == __PAIR64__(v6, v7))
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v13 = operator new(0x30uLL);
  *v13 = 0;
  v13[1] = v9;
  v13[2] = *(_QWORD *)a3;
  *((_DWORD *)v13 + 6) = *(_DWORD *)(a3 + 8);
  *((_OWORD *)v13 + 2) = *(_OWORD *)(a3 + 16);
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v20);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *v13 = *v22;
LABEL_39:
    *v22 = v13;
    goto LABEL_40;
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v21 + 8 * v3) = a1 + 16;
  if (*v13)
  {
    v23 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10)
        v23 %= v10;
    }
    else
    {
      v23 &= v10 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_39;
  }
LABEL_40:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_1AD792BC0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::Prune<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  char v12;
  char v13;

  if (FLAGS_fst_error_fatal)
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  else
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Prune: Weight needs to have the path property and", 49);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" be commutative: ", 17);
  v6 = fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::Type();
  v7 = *(char *)(v6 + 23);
  if (v7 >= 0)
    v8 = v6;
  else
    v8 = *(_QWORD *)v6;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(v6 + 23);
  else
    v9 = *(_QWORD *)(v6 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v8, v9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, 4, 4);
}

void sub_1AD792CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(_QWORD *a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFstImpl(v2);
  *a1 = &unk_1E5D28830;
  a1[1] = v2;
  return a1;
}

void sub_1AD792D54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~VectorFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D25580;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::Copy(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  ++*(_DWORD *)(v3 + 56);
  *result = &unk_1E5D28830;
  result[1] = v3;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(_QWORD *)(v2 + 72) - *(_QWORD *)(v2 + 64)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::InitArcIterator(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;

  v3 = *(_QWORD *)(result + 8);
  *a3 = 0;
  v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 8 * a2) + 24);
  v4 = *v5;
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((v5[1] - *v5) >> 2);
  if (v5[1] == *v5)
    v4 = 0;
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::NumStates(uint64_t a1)
{
  return (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64)) >> 3;
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  int v6;

  if (a1 != a2)
  {
    v4 = operator new();
    fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFstImpl(v4, a2);
    v5 = *(_DWORD **)(a1 + 8);
    if (v5)
    {
      v6 = v5[14] - 1;
      v5[14] = v6;
      if (!v6)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  return a1;
}

void sub_1AD792F38(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

unint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetStart(uint64_t a1, int a2)
{
  uint64_t v4;
  unint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 88) = a2;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_QWORD *)(v4 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(_QWORD *)(v4 + 8) & 4;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetFinal(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t *v6;
  uint64_t v8;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck(a1);
  v6 = *(uint64_t **)(a1 + 8);
  v8 = *a3;
  return fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetFinal(v6, a2, &v8);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = a3 & 4;
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), v6);
  if (result != (v6 & a2))
    result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck(a1);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::AddState(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck(a1);
  v2 = *(_QWORD **)(a1 + 8);
  v3 = fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2) & 0x2AFFFFFF0007;
  return v3;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::AddArc(uint64_t a1, int a2, float *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck(a1);
  return fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::AddArc(*(_QWORD **)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::DeleteStates(uint64_t a1, char **a2)
{
  _QWORD *v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck(a1);
  v4 = *(_QWORD **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::DeleteStates((uint64_t)v4, a2);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0x6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::DeleteStates(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck(a1);
  v2 = *(_QWORD **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::DeleteStates((uint64_t)v2);
  result = (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2);
  v2[1] = (*((_DWORD *)v2 + 2) | result) & 4 | 0x156A5A950003;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::DeleteArcs(*(_QWORD **)(v6[8] + 8 * a2), a3);
  result = (*(uint64_t (**)(_QWORD *))(*v6 + 24))(v6);
  v6[1] = v6[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::DeleteArcs(uint64_t a1, int a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck(a1);
  v4 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD **)(v4[8] + 8 * a2);
  v5[1] = 0;
  v5[2] = 0;
  v5[4] = v5[3];
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0xA6A5A950007;
  return result;
}

void fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck(a1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(*(_QWORD *)(a1 + 8) + 64), a2);
}

void fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck(a1);
  std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::reserve((uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 24), a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutableInputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutableOutputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v4 + 40);
  if (result != a2)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    else
      result = 0;
    *(_QWORD *)(v4 + 40) = result;
  }
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v4 + 48);
  if (result != a2)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    else
      result = 0;
    *(_QWORD *)(v4 + 48) = result;
  }
  return result;
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::InitMutableArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_1E5D21340;
  v6[3] = 0;
  result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck(a1);
  v8 = *(_QWORD *)(a1 + 8);
  v6[1] = *(_QWORD *)(*(_QWORD *)(v8 + 64) + 8 * a2);
  v6[2] = v8 + 8;
  *a3 = v6;
  return result;
}

void sub_1AD7934D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFstImpl(uint64_t a1)
{
  std::string *v2;
  std::string __str;

  *(_QWORD *)a1 = &unk_1E5D227B8;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)a1 = &unk_1E5D1CEE8;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x156A5A950003;
  return a1;
}

void sub_1AD7935B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  if (a15 < 0)
    operator delete(__p);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  _QWORD **v2;
  unint64_t v3;

  *a1 = &unk_1E5D1FCE8;
  v2 = (_QWORD **)a1[9];
  if (v2 != (_QWORD **)a1[8])
  {
    v3 = 0;
    v2 = (_QWORD **)a1[8];
    do
    {
      fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Destroy(v2[v3++]);
      v2 = (_QWORD **)a1[8];
    }
    while (v3 < (uint64_t)(a1[9] - (_QWORD)v2) >> 3);
  }
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return fst::FstImpl<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
}

void fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~VectorFstImpl(_QWORD *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Properties(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) & a2;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

void fst::FstImpl<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::~FstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::~FstImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E5D227B8;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Destroy(_QWORD *__p)
{
  void *v2;

  if (__p)
  {
    v2 = (void *)__p[3];
    if (v2)
    {
      __p[4] = v2;
      operator delete(v2);
    }
    operator delete(__p);
  }
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  if (*(int *)(*(_QWORD *)(result + 8) + 56) >= 2)
  {
    v1 = result;
    v2 = operator new();
    fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFstImpl(v2, v1);
    result = *(_QWORD *)(v1 + 8);
    if (result)
    {
      v3 = *(_DWORD *)(result + 56) - 1;
      *(_DWORD *)(result + 56) = v3;
      if (!v3)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    *(_QWORD *)(v1 + 8) = v2;
  }
  return result;
}

void sub_1AD79380C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  std::string __str;
  _DWORD *v19;
  std::string::size_type v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;

  *(_QWORD *)a1 = &unk_1E5D227B8;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  v5 = (uint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 64) = 0;
  v6 = (_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)a1 = &unk_1E5D1CEE8;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v4, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v8 = *v5;
  if (*v5 != v7)
  {
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v7)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    else
      v9 = 0;
    *v5 = v9;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v11 = *(_QWORD *)(a1 + 48);
  if (v11 != v10)
  {
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (v10)
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    else
      v12 = 0;
    *(_QWORD *)(a1 + 48) = v12;
  }
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 1, 0))
  {
    v13 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2);
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 64), v13);
  }
  v24 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v22);
  while (1)
  {
    if (!v22)
    {
      if ((int)v24 >= v23)
        goto LABEL_45;
LABEL_25:
      v14 = v24;
      goto LABEL_26;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22))
      break;
    if (!v22)
      goto LABEL_25;
    v14 = (*(uint64_t (**)(void))(*(_QWORD *)v22 + 24))();
LABEL_26:
    fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::AddState((_QWORD *)a1);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(&v21, a2, v14);
    **(_QWORD **)(*v6 + 8 * (int)v14) = v21;
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v14);
    std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::reserve((uint64_t *)(*(_QWORD *)(*v6 + 8 * (int)v14) + 24), v15);
    v20 = 0;
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)a2 + 136))(a2, v14, &__str);
    while (1)
    {
      if (!__str.__r_.__value_.__r.__words[0])
      {
        if (v20 >= __str.__r_.__value_.__r.__words[2])
          goto LABEL_38;
LABEL_32:
        v16 = __str.__r_.__value_.__l.__size_ + 20 * v20;
        goto LABEL_33;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 24))(__str.__r_.__value_.__r.__words[0]))
        break;
      if (!__str.__r_.__value_.__r.__words[0])
        goto LABEL_32;
      v16 = (*(uint64_t (**)(void))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 32))();
LABEL_33:
      fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::AddArc(*(_QWORD **)(*v6 + 8 * (int)v14), v16);
      if (__str.__r_.__value_.__r.__words[0])
        (*(void (**)(std::string::size_type))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 40))(__str.__r_.__value_.__r.__words[0]);
      else
        ++v20;
    }
    if (__str.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_40;
    }
LABEL_38:
    if (v19)
      --*v19;
LABEL_40:
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
    else
      ++v24;
  }
  if (v22)
    (*(void (**)(void))(*(_QWORD *)v22 + 8))();
LABEL_45:
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0004, 0) | *(_QWORD *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_1AD793BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  _QWORD *v19;

  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~VectorFstBaseImpl(v19);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::AddState(_QWORD *a1)
{
  char *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v2 = (char *)operator new(0x30uLL);
  v3 = a1[10];
  *(int32x2_t *)v2 = vdup_n_s32(0x7F800000u);
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((_QWORD *)v2 + 5) = 0;
  v4 = (_QWORD *)a1[9];
  if ((unint64_t)v4 >= v3)
  {
    v6 = a1[8];
    v7 = ((uint64_t)v4 - v6) >> 3;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v8 = v3 - v6;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    if (v10)
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 10), v10);
    else
      v11 = 0;
    v12 = &v11[8 * v7];
    v13 = &v11[8 * v10];
    *(_QWORD *)v12 = v2;
    v5 = v12 + 8;
    v15 = (char *)a1[8];
    v14 = (char *)a1[9];
    if (v14 != v15)
    {
      do
      {
        v16 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *((_QWORD *)v12 - 1) = v16;
        v12 -= 8;
      }
      while (v14 != v15);
      v14 = (char *)a1[8];
    }
    a1[8] = v12;
    a1[9] = v5;
    a1[10] = v13;
    if (v14)
      operator delete(v14);
  }
  else
  {
    *v4 = v2;
    v5 = v4 + 1;
  }
  a1[9] = v5;
  return (((unint64_t)v5 - a1[8]) >> 3) - 1;
}

void std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 2) < a2)
  {
    if (a2 >= 0xCCCCCCCCCCCCCCDLL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v11 = v3;
    __p = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(v3, a2);
    v8 = (char *)__p + v5;
    v9 = (char *)__p + v5;
    v10 = (char *)__p + 20 * v6;
    std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__swap_out_circular_buffer(a1, &__p);
    if (v9 != v8)
      v9 = &v8[(v9 - v8 - 20) % 0x14uLL];
    if (__p)
      operator delete(__p);
  }
}

void sub_1AD793E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      *(_QWORD *)(v6 - 20) = *(_QWORD *)(v2 + v5 - 20);
      *(_QWORD *)(v6 - 12) = *(_QWORD *)(v2 + v5 - 12);
      *(_DWORD *)(v6 - 4) = *(_DWORD *)(v2 + v5 - 4);
      v5 -= 20;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v7 = *result;
  *result = v4;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xCCCCCCCCCCCCCCDLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(20 * a2);
}

uint64_t fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::AddArc(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t result;

  if (!*(_DWORD *)a2)
    ++a1[1];
  if (!*(_DWORD *)(a2 + 4))
    ++a1[2];
  v3 = a1[4];
  if (v3 >= a1[5])
  {
    result = std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const&>(a1 + 3, a2);
  }
  else
  {
    *(_QWORD *)v3 = *(_QWORD *)a2;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(v3 + 16) = *(_DWORD *)(a2 + 16);
    result = v3 + 20;
  }
  a1[4] = result;
  return result;
}

uint64_t std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 2);
  v5 = v4 + 1;
  if (v4 + 1 > 0xCCCCCCCCCCCCCCCLL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 2);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x666666666666666)
    v9 = 0xCCCCCCCCCCCCCCCLL;
  else
    v9 = v5;
  v19 = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(v7, v9);
  v11 = &v10[20 * v4];
  __p = v10;
  v16 = v11;
  v18 = &v10[20 * v12];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  *((_QWORD *)v11 + 1) = *(_QWORD *)(a2 + 8);
  *((_DWORD *)v11 + 4) = *(_DWORD *)(a2 + 16);
  v17 = v11 + 20;
  std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__swap_out_circular_buffer(a1, &__p);
  v13 = a1[1];
  if (v17 != v16)
    v17 = &v16[(v17 - v16 - 20) % 0x14uLL];
  if (__p)
    operator delete(__p);
  return v13;
}

void sub_1AD7940F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::WriteFst<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  fst *v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t updated;
  fst *v28;
  _QWORD *v29;
  int v30;
  _BYTE v31[8];
  void *v32[2];
  void *v33[2];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int data;
  std::string __p[5];
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v35 = 0u;
  v34 = 0u;
  *(_OWORD *)v33 = 0u;
  *(_OWORD *)v32 = 0u;
  v6 = -1;
  v37 = 0;
  v38 = 0;
  v36 = -1;
  v36 = (*(int (**)(_QWORD *))(*a1 + 24))(a1);
  v37 = -1;
  if ((*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, 1, 0))
  {
    v6 = 0;
LABEL_3:
    v7 = 0;
    v37 = (int)fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)a1);
    goto LABEL_6;
  }
  v8 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v8 + 5) + 32))(__p, *((_QWORD *)v8 + 5), 0, 1, 16);
    v6 = v41;
    if (v41 != -1)
      goto LABEL_3;
  }
  v7 = 1;
LABEL_6:
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  v10 = v9 | 3;
  fst::FstImpl<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (_BYTE *)a3, 2, __p, v10, (uint64_t)v31);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v11 = *(_QWORD *)(a1[1] + 72) - *(_QWORD *)(a1[1] + 64);
  v12 = v11 >> 3;
  if ((int)(v11 >> 3) < 1)
  {
    LODWORD(v12) = 0;
  }
  else
  {
    v30 = v7;
    v13 = 0;
    v14 = (v11 >> 3);
    do
    {
      (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t))(*a1 + 32))(__p, a1, v13);
      data = (int)__p[0].__r_.__value_.__l.__data_;
      std::ostream::write();
      data = HIDWORD(__p[0].__r_.__value_.__r.__words[0]);
      std::ostream::write();
      __p[0].__r_.__value_.__r.__words[0] = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, v13);
      std::ostream::write();
      v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * v13) + 24);
      v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * v13) + 32) - v15;
      if (v16)
      {
        v17 = v16 / 20;
        if (v17 <= 1)
          v18 = 1;
        else
          v18 = v17;
        v19 = v15 + 8;
        do
        {
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(_DWORD *)(v19 - 8);
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(_DWORD *)(v19 - 4);
          std::ostream::write();
          fst::LatticeWeightTpl<float>::Write(v19, (uint64_t)a2);
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(_DWORD *)(v19 + 8);
          std::ostream::write();
          v19 += 20;
          --v18;
        }
        while (v18);
      }
      ++v13;
    }
    while (v13 != v14);
    v7 = v30;
  }
  std::ostream::flush();
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v20 = fst::LogMessage::LogMessage((fst *)&data, (uint64_t)__p);
    v21 = (_QWORD *)fst::cerr(v20);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"VectorFst::Write: write failed: ", 32);
    v23 = *(char *)(a3 + 23);
    if (v23 >= 0)
      v24 = a3;
    else
      v24 = *(_QWORD *)a3;
    if (v23 >= 0)
      v25 = *(unsigned __int8 *)(a3 + 23);
    else
      v25 = *(_QWORD *)(a3 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
LABEL_27:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&data);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    updated = 0;
    goto LABEL_30;
  }
  if (!v7)
  {
    if (v37 == v12)
    {
      updated = 1;
      goto LABEL_30;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v28 = fst::LogMessage::LogMessage((fst *)&data, (uint64_t)__p);
    v29 = (_QWORD *)fst::cerr(v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_27;
  }
  v37 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  updated = fst::FstImpl<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, __p, v10, (uint64_t)v31, v6);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_30:
  if (SHIBYTE(v34) < 0)
    operator delete(v33[1]);
  if (SHIBYTE(v33[0]) < 0)
    operator delete(v32[0]);
  return updated;
}

void sub_1AD794578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    operator delete(__p);
  fst::FstHeader::~FstHeader(&a11);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::WriteFstHeader(uint64_t a1, uint64_t a2, _BYTE *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  const std::string *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t result;
  BOOL v22;
  uint64_t v23;

  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    v13 = (const std::string *)fst::ArcTpl<fst::LatticeWeightTpl<float>,int>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(_QWORD *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
      v14 = a3[25] == 0;
    else
      v14 = 1;
    v15 = !v14;
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    if (a3[26])
      v17 = v16 == 0;
    else
      v17 = 1;
    v18 = v15 | 2;
    if (v17)
      v18 = v15;
    if (a3[27])
      v18 |= 4u;
    *(_DWORD *)(a7 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
    v19 = a3[25] == 0;
  else
    v19 = 1;
  if (!v19)
  {
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 72))(v20, a2);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  if (result)
    v22 = a3[26] == 0;
  else
    v22 = 1;
  if (!v22)
  {
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 72))(v23, a2);
  }
  return result;
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::UpdateFstHeader(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v16;
  uint64_t v17;
  fst *v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  fst *v24;
  _QWORD *v25;
  int v26;
  char *v27;
  fst *v28;
  _QWORD *v29;
  int v30;
  _BYTE v32[16];
  _QWORD v33[17];
  __int128 __p;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1AF44CB90](v32);
  v16 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    v17 = *((_QWORD *)v16 + 5);
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    __p = 0u;
    v35 = 0u;
    v42 = a8;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v17 + 40))(v33, v17, &__p, 16);
    if (v33[16] == -1)
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
  }
  MEMORY[0x1AF44CB9C](v32);
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v18 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
    v19 = (_QWORD *)fst::cerr(v18);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    v21 = *(char *)(a3 + 23);
    if (v21 >= 0)
      v22 = a3;
    else
      v22 = *(_QWORD *)a3;
    if (v21 >= 0)
      v23 = *(unsigned __int8 *)(a3 + 23);
    else
      v23 = *(_QWORD *)(a3 + 8);
  }
  else
  {
    fst::FstImpl<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::WriteFstHeader(a1, (uint64_t)a2, (_BYTE *)a3, a4, a5, a6, a7);
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      v24 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      v25 = (_QWORD *)fst::cerr(v24);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      v26 = *(char *)(a3 + 23);
      if (v26 >= 0)
        v22 = a3;
      else
        v22 = *(_QWORD *)a3;
      if (v26 >= 0)
        v23 = *(unsigned __int8 *)(a3 + 23);
      else
        v23 = *(_QWORD *)(a3 + 8);
    }
    else
    {
      MEMORY[0x1AF44CB90](v33, a2);
      v27 = (char *)a2 + *(_QWORD *)(*a2 - 24);
      if ((v27[32] & 5) == 0)
      {
        (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v27 + 5) + 32))(&__p, *((_QWORD *)v27 + 5), 0, 2, 16);
        if (v42 == -1)
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
      }
      MEMORY[0x1AF44CB9C](v33);
      if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0)
        return 1;
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      v28 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      v29 = (_QWORD *)fst::cerr(v28);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      v30 = *(char *)(a3 + 23);
      if (v30 >= 0)
        v22 = a3;
      else
        v22 = *(_QWORD *)a3;
      if (v30 >= 0)
        v23 = *(unsigned __int8 *)(a3 + 23);
      else
        v23 = *(_QWORD *)(a3 + 8);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v33);
  if (SBYTE7(v35) < 0)
    operator delete((void *)__p);
  return 0;
}

void sub_1AD794A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  MEMORY[0x1AF44CB9C](&a12);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcTpl<fst::LatticeWeightTpl<float>,int>::Type()
{
  unsigned __int8 v0;
  std::string *v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;

  if ((v0 & 1) == 0
  {
    v2 = (std::string *)operator new();
    v3 = (_QWORD *)fst::LatticeWeightTpl<float>::Type();
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "tropical"))
    {
      std::string::basic_string[abi:ne180100]<0>(v2, "standard");
    }
    else
    {
      v4 = fst::LatticeWeightTpl<float>::Type();
      if (*(char *)(v4 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)v4, *(_QWORD *)(v4 + 8));
      }
      else
      {
        v5 = *(_OWORD *)v4;
        v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 16);
        *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v5;
      }
    }
    fst::ArcTpl<fst::LatticeWeightTpl<float>,int>::Type(void)::type = (uint64_t)v2;
  }
  return fst::ArcTpl<fst::LatticeWeightTpl<float>,int>::Type(void)::type;
}

void sub_1AD794B84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::WriteFile(fst *a1, uint64_t a2)
{
  fst *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  const std::string::value_type *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  std::string __p;
  __int16 v16;
  char v17;
  char v18;
  char v19;
  std::string v20;
  __int16 v21;
  char v22;
  char v23;
  _BYTE v24[384];
  _QWORD v25[20];

  v25[19] = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(_QWORD *)(a2 + 8))
    {
LABEL_5:
      std::ofstream::basic_ofstream(&v20);
      if ((v24[*(_QWORD *)(v20.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        v4 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
        v5 = (_QWORD *)fst::cerr(v4);
        v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fst::Write: Can't open file: ", 29);
        v7 = *(char *)(a2 + 23);
        if (v7 >= 0)
          v8 = (const std::string::value_type *)a2;
        else
          v8 = *(const std::string::value_type **)a2;
        if (v7 >= 0)
          v9 = *(unsigned __int8 *)(a2 + 23);
        else
          v9 = *(_QWORD *)(a2 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v10 = 0;
      }
      else
      {
        v13 = FLAGS_fst_align;
        if (*(char *)(a2 + 23) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          __p = *(std::string *)a2;
        v16 = 257;
        v17 = 1;
        v18 = v13;
        v10 = (*(uint64_t (**)(fst *, std::string *, std::string *))(*(_QWORD *)a1 + 96))(a1, &v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v20.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F48];
      *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words
                                + *(_QWORD *)(v20.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48]
                                                                                                  + 24);
      MEMORY[0x1AF44CA70](&v20.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x1AF44D094](v25);
      return v10;
    }
  }
  else if (*(_BYTE *)(a2 + 23))
  {
    goto LABEL_5;
  }
  v11 = fst::cout(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  v12 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v20 = __p;
  v21 = 257;
  v22 = 1;
  v23 = v12;
  v10 = (*(uint64_t (**)(fst *, uint64_t, std::string *))(*(_QWORD *)a1 + 96))(a1, v11, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v10;
}

void sub_1AD794E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::ofstream::~ofstream(&a21);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetFinal(uint64_t *a1, int a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v5 = *(uint64_t **)(a1[8] + 8 * a2);
  v6 = *a1;
  v7 = *v5;
  *v5 = *a3;
  v8 = (*(uint64_t (**)(uint64_t *))(v6 + 24))(a1);
  v10 = *a3;
  v11 = v7;
  result = fst::SetFinalProperties<fst::LatticeWeightTpl<float>>(v8, (float *)&v11, (float *)&v10);
  a1[1] = a1[1] & 4 | result;
  return result;
}

uint64_t fst::SetFinalProperties<fst::LatticeWeightTpl<float>>(unint64_t a1, float *a2, float *a3)
{
  if ((*a2 != INFINITY || a2[1] != INFINITY) && (*a2 != 0.0 || a2[1] != 0.0))
    a1 &= ~0x100000000uLL;
  if ((*a3 != INFINITY || a3[1] != INFINITY) && (*a3 != 0.0 || a3[1] != 0.0))
    a1 = a1 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  return a1 & 0x3FFFFFF0007;
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::AddArc(_QWORD *a1, int a2, float *a3)
{
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;

  v6 = *(_QWORD *)(*(_QWORD *)(a1[8] + 8 * a2) + 32);
  if (v6 == *(_QWORD *)(*(_QWORD *)(a1[8] + 8 * a2) + 24))
    v7 = 0;
  else
    v7 = (_DWORD *)(v6 - 20);
  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | fst::AddArcProperties<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(v8, a2, a3, v7);
  return fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::AddArc(*(_QWORD **)(a1[8] + 8 * a2), (uint64_t)a3);
}

uint64_t fst::AddArcProperties<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(unint64_t a1, int a2, float *a3, _DWORD *a4)
{
  float v4;
  int v5;
  unint64_t v6;
  unint64_t v7;

  v4 = *a3;
  v5 = *((_DWORD *)a3 + 1);
  v6 = a1 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (*(_DWORD *)a3 == v5)
    v6 = a1;
  v7 = v6 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
  if (!v5)
    v7 = v6 & 0xFFFFFFFFFC3FFFFFLL | 0x1400000;
  if (v4 == 0.0)
    v6 = v7;
  if (!v5)
    v6 = v6 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
  if (a4)
  {
    if (*a4 > SLODWORD(v4))
      v6 = v6 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
    if (a4[1] > v5)
      v6 = v6 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
  }
  if ((a3[2] != INFINITY || a3[3] != INFINITY) && (a3[2] != 0.0 || a3[3] != 0.0))
    v6 = v6 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  if (*((_DWORD *)a3 + 4) <= a2)
    v6 = v6 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
  if ((v6 & 0x4000000000) != 0)
    return v6 & 0x5D7FFEB0007 | 0x2800000000;
  else
    return v6 & 0x5D7FFEB0007;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::DeleteStates(uint64_t a1, char **a2)
{
  uint64_t *v4;
  std::vector<int>::size_type v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  std::vector<int>::pointer begin;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64x2_t v19;
  uint64_t v20;
  unint64_t v21;
  int *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int64x2_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int *v30;
  int64x2_t v31;
  std::vector<int>::value_type __x;
  std::vector<int> v33;

  v4 = (uint64_t *)(a1 + 64);
  v5 = (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3;
  __x = 0;
  std::vector<int>::vector(&v33, v5, &__x);
  v6 = *a2;
  v7 = a2[1] - *a2;
  if (v7)
  {
    v8 = v7 >> 2;
    begin = v33.__begin_;
    if (v8 <= 1)
      v8 = 1;
    do
    {
      v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  v11 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v11)
  {
    v13 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    do
    {
      if (v33.__begin_[v12] == -1)
      {
        fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Destroy(*(_QWORD **)(v11 + 8 * v12));
      }
      else
      {
        v33.__begin_[v12] = v13;
        if (v12 != v13)
          *(_QWORD *)(v11 + 8 * v13) = *(_QWORD *)(v11 + 8 * v12);
        ++v13;
      }
      ++v12;
      v11 = *(_QWORD *)(a1 + 64);
    }
    while (v12 < (*(_QWORD *)(a1 + 72) - v11) >> 3);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v13);
  v14 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) != v14)
  {
    v15 = 0;
    do
    {
      v16 = *(_QWORD *)(v14 + 8 * v15);
      v18 = *(_QWORD *)(v16 + 24);
      v17 = *(_QWORD *)(v16 + 32);
      v19 = *(int64x2_t *)(v16 + 8);
      v20 = v17 - v18;
      if (v17 == v18)
      {
        v31 = *(int64x2_t *)(v16 + 8);
        v27 = 0;
        v28 = 0xCCCCCCCCCCCCCCCDLL * (v20 >> 2);
      }
      else
      {
        v21 = 0;
        v27 = 0;
        v22 = (int *)(v18 + 16);
        do
        {
          v23 = v33.__begin_[*v22];
          if (v23 == -1)
          {
            v25 = *((_QWORD *)v22 - 2);
            v26.i64[0] = v25;
            v26.i64[1] = HIDWORD(v25);
            v19 = vaddq_s64(v19, vceqzq_s64(v26));
          }
          else
          {
            *v22 = v23;
            if (v21 != v27)
            {
              v24 = v18 + 20 * v27;
              *(_QWORD *)v24 = *((_QWORD *)v22 - 2);
              *(_QWORD *)(v24 + 8) = *((_QWORD *)v22 - 1);
              *(_DWORD *)(v24 + 16) = v23;
              v14 = *v4;
            }
            ++v27;
          }
          ++v21;
          v16 = *(_QWORD *)(v14 + 8 * v15);
          v28 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v16 + 32) - *(_QWORD *)(v16 + 24)) >> 2);
          v22 += 5;
        }
        while (v21 < v28);
        v31 = v19;
      }
      fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::DeleteArcs((_QWORD *)v16, v28 - v27);
      v14 = *(_QWORD *)(a1 + 64);
      *(int64x2_t *)(*(_QWORD *)(v14 + 8 * v15++) + 8) = v31;
    }
    while (v15 < (*(_QWORD *)(a1 + 72) - v14) >> 3);
  }
  v29 = *(int *)(a1 + 88);
  if ((_DWORD)v29 == -1)
  {
    v30 = v33.__begin_;
    if (!v33.__begin_)
      return;
  }
  else
  {
    v30 = v33.__begin_;
    *(_DWORD *)(a1 + 88) = v33.__begin_[v29];
  }
  v33.__end_ = v30;
  operator delete(v30);
}

void sub_1AD795424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::DeleteArcs(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  int v6;

  if (a2)
  {
    v2 = result[4];
    v3 = -20 * a2;
    v4 = (_DWORD *)(v2 - 20);
    v5 = (_DWORD *)(v2 - 20);
    do
    {
      v6 = *v5;
      v5 -= 5;
      if (!v6)
        --result[1];
      if (!v4[1])
        --result[2];
      v4 = v5;
      --a2;
    }
    while (a2);
    result[4] = v2 + v3;
  }
  return result;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::DeleteStates(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 72);
  if (v2 != *(_QWORD *)(a1 + 64))
  {
    v3 = 0;
    v2 = *(_QWORD *)(a1 + 64);
    do
    {
      fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Destroy(*(_QWORD **)(v2 + 8 * v3++));
      v2 = *(_QWORD *)(a1 + 64);
    }
    while (v3 < (*(_QWORD *)(a1 + 72) - v2) >> 3);
  }
  *(_QWORD *)(a1 + 72) = v2;
  *(_DWORD *)(a1 + 88) = -1;
}

void fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::~MutableArcIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ArcIteratorBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Reinit()
{
  return 0;
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::Done_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) >= 0xCCCCCCCCCCCCCCCDLL
                               * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32)
                                          - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24)) >> 2);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::Value_(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 20 * *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::Next_(uint64_t result)
{
  ++*(_QWORD *)(result + 24);
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::Position_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::Reset_(uint64_t result)
{
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::Seek_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::Flags_()
{
  return 15;
}

void fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::SetValue(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  int v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  int v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;

  v4 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = v4[3];
  v7 = (int *)(v6 + 20 * v5);
  v8 = *v7;
  v9 = v7[1];
  if (v8 != v9)
    **(_QWORD **)(a1 + 16) &= ~0x20000uLL;
  if (v8)
  {
    if (v9)
      goto LABEL_9;
    v10 = *(unint64_t **)(a1 + 16);
    v11 = *v10;
  }
  else
  {
    v10 = *(unint64_t **)(a1 + 16);
    v12 = *v10;
    *v10 &= ~0x1000000uLL;
    if (v9)
      goto LABEL_9;
    v11 = v12 & 0xFFFFFFFFFEBFFFFFLL;
    *v10 = v11;
  }
  *v10 = v11 & 0xFFFFFFFFFBFFFFFFLL;
LABEL_9:
  v13 = v6 + 20 * v5;
  if ((*(float *)(v13 + 8) != INFINITY || *(float *)(v13 + 12) != INFINITY)
    && (*(float *)(v13 + 8) != 0.0 || *(float *)(v13 + 12) != 0.0))
  {
    **(_QWORD **)(a1 + 16) &= ~0x100000000uLL;
  }
  v14 = 0x30FC30007;
  v15 = *(_DWORD *)a2 == v8 && *(_DWORD *)(a2 + 4) == v9;
  if (v15 && *(_DWORD *)(a2 + 16) == *(_DWORD *)(v6 + 20 * v5 + 16))
    v14 = 0x3FFFFFFF0007;
  fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetArc(v4, a2, v5);
  v16 = *(_DWORD *)a2;
  v17 = *(_DWORD *)(a2 + 4);
  if (*(_DWORD *)a2 != v17)
    **(_QWORD **)(a1 + 16) = **(_QWORD **)(a1 + 16) & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (v16)
  {
    if (!v17)
    {
      v18 = *(unint64_t **)(a1 + 16);
      v19 = *v18;
LABEL_28:
      *v18 = v19 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
    }
  }
  else
  {
    v18 = *(unint64_t **)(a1 + 16);
    v20 = *v18 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
    *v18 = v20;
    if (!v17)
    {
      v19 = v20 & 0xFFFFFFFFFD3FFFFFLL | 0x400000;
      *v18 = v19;
      goto LABEL_28;
    }
  }
  if ((*(float *)(a2 + 8) != INFINITY || *(float *)(a2 + 12) != INFINITY)
    && (*(float *)(a2 + 8) != 0.0 || *(float *)(a2 + 12) != 0.0))
  {
    **(_QWORD **)(a1 + 16) = **(_QWORD **)(a1 + 16) & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  **(_QWORD **)(a1 + 16) &= v14;
}

double fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetArc(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double result;

  v3 = a1[3];
  v4 = (_DWORD *)(v3 + 20 * a3);
  if (!*v4)
    --a1[1];
  if (!*(_DWORD *)(v3 + 20 * a3 + 4))
    --a1[2];
  if (!*(_DWORD *)a2)
    ++a1[1];
  if (!*(_DWORD *)(a2 + 4))
    ++a1[2];
  *(_QWORD *)v4 = *(_QWORD *)a2;
  v5 = v3 + 20 * a3;
  result = *(double *)(a2 + 8);
  *(double *)(v5 + 8) = result;
  *(_DWORD *)(v5 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v15 += 24;
  std::vector<std::vector<int>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1AD795A1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<int>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

void std::__split_buffer<std::vector<int>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

_OWORD *std::__tree<std::__value_type<std::string,std::shared_ptr<void>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<void>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<void>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v6 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x48uLL);
    v12[1] = a1 + 1;
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 7) = 0;
    *((_QWORD *)v7 + 8) = 0;
    v13 = 1;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<void>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<void>>,0>(uint64_t a1)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__shared_ptr_emplace<std::vector<std::vector<quasar::Token>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D456D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::vector<quasar::Token>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D456D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<std::vector<std::vector<quasar::Token>>>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        quasar::Token::~Token(v4 - 28);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void quasar::Token::~Token(void **this)
{
  void **v2;

  if (*((char *)this + 199) < 0)
    operator delete(this[22]);
  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  v2 = this + 15;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  v2 = this + 9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void std::__shared_ptr_emplace<std::vector<double>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D458C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<double>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D458C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<std::vector<double>>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>>>::find<std::vector<int>>(_QWORD *a1, int **a2)
{
  int *v2;
  int *v3;
  unint64_t v4;
  int *v5;
  uint64_t v6;
  int8x8_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  size_t v13;
  unint64_t v14;
  const void *v15;

  v3 = *a2;
  v2 = a2[1];
  if (*a2 == v2)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = *a2;
    do
    {
      v6 = *v5++;
      v4 = v6 + 7853 * v4;
    }
    while (v5 != v2);
  }
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    v10 = v4;
    if (v4 >= *(_QWORD *)&v7)
      v10 = v4 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v4;
  }
  v11 = *(_QWORD **)(*a1 + 8 * v10);
  if (!v11)
    return 0;
  v12 = (_QWORD *)*v11;
  if (*v11)
  {
    v13 = (char *)v2 - (char *)v3;
    do
    {
      v14 = v12[1];
      if (v14 == v4)
      {
        v15 = (const void *)v12[2];
        if (v12[3] - (_QWORD)v15 == v13 && !memcmp(v15, v3, v13))
          return v12;
      }
      else
      {
        if (v9 > 1)
        {
          if (v14 >= *(_QWORD *)&v7)
            v14 %= *(_QWORD *)&v7;
        }
        else
        {
          v14 &= *(_QWORD *)&v7 - 1;
        }
        if (v14 != v10)
          return 0;
      }
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  return v12;
}

double std::__split_buffer<double>::push_back(_QWORD *a1, double *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  double result;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
    }
  }
  result = *a2;
  *(double *)v4 = *a2;
  a1[2] = v4 + 8;
  return result;
}

char *std::vector<double>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>(uint64_t a1, int **a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  int *v6;
  int *v7;
  unint64_t v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  size_t v16;
  unint64_t v17;
  const void *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t *v28;
  _QWORD v29[3];

  v7 = *a2;
  v6 = a2[1];
  if (*a2 == v6)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    v9 = *a2;
    do
    {
      v10 = *v9++;
      v8 = v10 + 7853 * v8;
    }
    while (v9 != v6);
  }
  v11 = *(_QWORD *)(a1 + 8);
  if (!v11)
    goto LABEL_26;
  v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v12.i16[0] = vaddlv_u8(v12);
  v13 = v12.u32[0];
  if (v12.u32[0] > 1uLL)
  {
    v4 = v8;
    if (v8 >= v11)
      v4 = v8 % v11;
  }
  else
  {
    v4 = (v11 - 1) & v8;
  }
  v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (!v14)
    goto LABEL_26;
  v15 = (_QWORD *)*v14;
  if (!*v14)
    goto LABEL_26;
  v28 = a4;
  v16 = (char *)v6 - (char *)v7;
  do
  {
    v17 = v15[1];
    if (v17 == v8)
    {
      v18 = (const void *)v15[2];
      if (v15[3] - (_QWORD)v18 == v16 && !memcmp(v18, v7, v16))
        return v15;
      goto LABEL_24;
    }
    if (v13 > 1)
    {
      if (v17 >= v11)
        v17 %= v11;
    }
    else
    {
      v17 &= v11 - 1;
    }
    if (v17 != v4)
      break;
LABEL_24:
    v15 = (_QWORD *)*v15;
  }
  while (v15);
  a4 = v28;
LABEL_26:
  std::__hash_table<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>(a1, v8, a4, (uint64_t)v29);
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    v21 = 1;
    if (v11 >= 3)
      v21 = (v11 & (v11 - 1)) != 0;
    v22 = v21 | (2 * v11);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v24);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v8 >= v11)
        v4 = v8 % v11;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v11 - 1) & v8;
    }
  }
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v25)
  {
    *(_QWORD *)v29[0] = *v25;
    *v25 = v29[0];
  }
  else
  {
    *(_QWORD *)v29[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v29[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v29[0])
    {
      v26 = *(_QWORD *)(*(_QWORD *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v26 >= v11)
          v26 %= v11;
      }
      else
      {
        v26 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v29[0];
    }
  }
  v15 = (_QWORD *)v29[0];
  v29[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return v15;
}

void sub_1AD796570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = *a3;
  v8[3] = 0;
  v8[4] = 0;
  v8[2] = 0;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v8 + 2, *(const void **)v9, *(_QWORD *)(v9 + 8), (uint64_t)(*(_QWORD *)(v9 + 8) - *(_QWORD *)v9) >> 2);
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1AD796604(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::vector<int> const,std::vector<quasar::Token>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::vector<int> const,std::vector<quasar::Token>>,0>(uint64_t a1)
{
  void *v2;
  void **v3;

  v3 = (void **)(a1 + 24);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
}

_QWORD *std::vector<std::vector<quasar::Token>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::Token> const&>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v3, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1AD796700(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<quasar::Token>>::__move_range(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  char v11;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (_QWORD *)((char *)a2 + v6 - a4);
  v8 = (_QWORD *)v6;
  if ((unint64_t)v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD **)(a1 + 8);
    do
    {
      *v8 = 0;
      v8[1] = 0;
      v8[2] = 0;
      *(_OWORD *)v8 = *(_OWORD *)v9;
      v8[2] = v9[2];
      *v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      v8 += 3;
      v9 += 3;
    }
    while ((unint64_t)v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<quasar::Token> *,std::vector<quasar::Token> *,std::vector<quasar::Token> *>((uint64_t)&v11, a2, v7, v6);
}

_QWORD *std::__split_buffer<std::vector<quasar::Token>>::push_back[abi:ne180100](_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int64x2_t v23;
  uint64_t v24;
  _QWORD *result;
  void *v26;
  int64x2_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = (_QWORD *)a1[2];
  if (v4 == (_QWORD *)a1[3])
  {
    v5 = a1[1];
    if (v5 <= *a1)
    {
      v11 = (uint64_t)v4 - *a1;
      v10 = v11 == 0;
      v12 = 0x5555555555555556 * (v11 >> 3);
      if (v10)
        v13 = 1;
      else
        v13 = v12;
      v14 = v13 >> 2;
      v15 = a1[4];
      v29 = a1[4];
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v15, v13);
      v18 = &v16[24 * v14];
      v19 = a1[1];
      v20 = a1[2] - v19;
      if (v20)
      {
        v21 = &v18[v20];
        v22 = &v16[24 * v14];
        do
        {
          *(_QWORD *)v22 = 0;
          *((_QWORD *)v22 + 1) = 0;
          *((_QWORD *)v22 + 2) = 0;
          *(_OWORD *)v22 = *(_OWORD *)v19;
          *((_QWORD *)v22 + 2) = *(_QWORD *)(v19 + 16);
          *(_QWORD *)v19 = 0;
          *(_QWORD *)(v19 + 8) = 0;
          *(_QWORD *)(v19 + 16) = 0;
          v22 += 24;
          v19 += 24;
        }
        while (v22 != v21);
        v23 = *(int64x2_t *)(a1 + 1);
      }
      else
      {
        v23 = vdupq_n_s64(v19);
        v21 = &v16[24 * v14];
      }
      v26 = (void *)*a1;
      *a1 = v16;
      a1[1] = v18;
      v27 = v23;
      v24 = a1[3];
      a1[2] = v21;
      a1[3] = &v16[24 * v17];
      v28 = v24;
      std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer(&v26);
      v4 = (_QWORD *)a1[2];
    }
    else
    {
      v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
      if (v6 >= -1)
        v7 = v6 + 1;
      else
        v7 = v6 + 2;
      v8 = -3 * (v7 >> 1);
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<quasar::Token> *,std::vector<quasar::Token> *,std::vector<quasar::Token> *>((uint64_t)&v26, v5, (uint64_t)v4, v5 - 24 * (v7 >> 1));
      v4 = v9;
      a1[1] += 8 * v8;
      a1[2] = v9;
    }
  }
  *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  result = std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v4, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
  a1[2] += 24;
  return result;
}

uint64_t std::vector<std::vector<quasar::Token>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::Token>>,std::reverse_iterator<std::vector<quasar::Token>*>,std::reverse_iterator<std::vector<quasar::Token>*>,std::reverse_iterator<std::vector<quasar::Token>*>>((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (_QWORD *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::Token>>,std::vector<quasar::Token>*,std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v7, (uint64_t)a3, a1[1], (_QWORD *)a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

_QWORD *std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::Token>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Token>,quasar::Token*,quasar::Token*,quasar::Token*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1AD796A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<quasar::Token>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x124924924924925)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[224 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x124924924924925)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(224 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Token>,quasar::Token*,quasar::Token*,quasar::Token*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      quasar::Token::Token((std::string *)(a4 + v7), (const quasar::Token *)(a2 + v7));
      v7 += 224;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1AD796B30(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 224;
    do
    {
      quasar::Token::~Token((void **)(v4 + v2));
      v2 -= 224;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *quasar::Token::Token(std::string *this, const quasar::Token *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int v9;
  std::string *v10;
  __int128 v11;
  __int128 v12;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *(_OWORD *)((char *)a2 + 24);
  *(std::string::size_type *)((char *)&this[1].__r_.__value_.__r.__words[1] + 6) = *(_QWORD *)((char *)a2 + 38);
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  this[3].__r_.__value_.__r.__words[0] = 0;
  this[3].__r_.__value_.__l.__size_ = 0;
  this[3].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this + 3, *((__int128 **)a2 + 9), *((__int128 **)a2 + 10), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9)) >> 3));
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(this + 4, *((const std::string::value_type **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v7 = *((_OWORD *)a2 + 6);
    this[4].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 14);
    *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v7;
  }
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__l.__size_ = 0;
  this[5].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::pair<std::string,float>>::__init_with_size[abi:ne180100]<std::pair<std::string,float>*,std::pair<std::string,float>*>(this + 5, *((__int128 **)a2 + 15), *((__int128 **)a2 + 16), (uint64_t)(*((_QWORD *)a2 + 16) - *((_QWORD *)a2 + 15)) >> 5);
  if (*((char *)a2 + 167) < 0)
  {
    std::string::__init_copy_ctor_external(this + 6, *((const std::string::value_type **)a2 + 18), *((_QWORD *)a2 + 19));
  }
  else
  {
    v8 = *((_OWORD *)a2 + 9);
    this[6].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 20);
    *(_OWORD *)&this[6].__r_.__value_.__l.__data_ = v8;
  }
  v9 = *((_DWORD *)a2 + 42);
  WORD2(this[7].__r_.__value_.__r.__words[0]) = *((_WORD *)a2 + 86);
  LODWORD(this[7].__r_.__value_.__l.__data_) = v9;
  v10 = (std::string *)((char *)this + 176);
  if (*((char *)a2 + 199) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)a2 + 22), *((_QWORD *)a2 + 23));
  }
  else
  {
    v11 = *((_OWORD *)a2 + 11);
    this[8].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 24);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  v12 = *(_OWORD *)((char *)a2 + 200);
  LODWORD(this[9].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 54);
  *(_OWORD *)&this[8].__r_.__value_.__r.__words[1] = v12;
  return this;
}

void sub_1AD796CF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void **v4;
  void **v5;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 167) < 0)
    operator delete(*v5);
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 119) < 0)
    operator delete(*v4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1AD796DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1AD796F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

std::string *std::vector<std::pair<std::string,float>>::__init_with_size[abi:ne180100]<std::pair<std::string,float>*,std::pair<std::string,float>*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,float>>,std::pair<std::string,float>*,std::pair<std::string,float>*,std::pair<std::string,float>*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1AD796FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,float>>,std::pair<std::string,float>*,std::pair<std::string,float>*,std::pair<std::string,float>*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  std::string *v8;
  _QWORD v10[3];
  char v11;
  std::string *v12;
  std::string *v13;

  v4 = this;
  v12 = this;
  v13 = this;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  v11 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v8 = v13;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        v8 = v4;
      }
      LODWORD(v4[1].__r_.__value_.__l.__data_) = *((_DWORD *)v6 + 6);
      v6 += 2;
      v4 = (std::string *)((char *)v8 + 32);
      v13 = (std::string *)((char *)v8 + 32);
    }
    while (v6 != a3);
  }
  v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,float>>,std::pair<std::string,float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_1AD7970C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,float>>,std::pair<std::string,float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,float>>,std::pair<std::string,float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,quasar::TextTokenizer::Token*>::operator()[abi:ne180100](a1);
  return a1;
}

_QWORD *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<quasar::Token> *,std::vector<quasar::Token> *,std::vector<quasar::Token> *>(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;

  if (a3 != a2)
  {
    v6 = a4 - 24;
    v7 = a3;
    do
    {
      std::vector<quasar::Token>::__vdeallocate((void **)v6);
      v8 = *(_OWORD *)(v7 - 3);
      v7 -= 3;
      *(_OWORD *)v6 = v8;
      *(_QWORD *)(v6 + 16) = v7[2];
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
      v6 -= 24;
    }
    while (v7 != a2);
  }
  return a3;
}

void std::vector<quasar::Token>::__vdeallocate(void **a1)
{
  void **v1;
  void **v3;
  void *v4;

  v1 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = v1;
    if (v3 != v1)
    {
      do
        quasar::Token::~Token(v3 - 28);
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5) < a4)
  {
    std::vector<quasar::Token>::__vdeallocate((void **)a1);
    if (a4 > 0x124924924924924)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5);
    if (v10 <= a4)
      v10 = a4;
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5)) >= 0x92492492492492)
      v11 = 0x124924924924924;
    else
      v11 = v10;
    std::vector<quasar::Token>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Token>,quasar::Token*,quasar::Token*,quasar::Token*>(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 5) < a4)
  {
    v13 = a2 + 32 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 5);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::Token *,quasar::Token *,quasar::Token *,0>(a2, v13, (uint64_t)v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Token>,quasar::Token*,quasar::Token*,quasar::Token*>(v8, v13, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::Token *,quasar::Token *,quasar::Token *,0>(a2, a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
      quasar::Token::~Token((void **)(v16 - 224));
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1AD797350(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1AD797358(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::Token *,quasar::Token *,quasar::Token *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      quasar::Token::operator=(a3, v4);
      v4 += 224;
      a3 += 224;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t quasar::Token::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int16 v5;
  int v6;

  std::string::operator=((std::string *)a1, (const std::string *)a2);
  v4 = *(_QWORD *)(a2 + 38);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 38) = v4;
  std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 48));
  if (a1 == a2)
  {
    std::string::operator=((std::string *)(a1 + 96), (const std::string *)(a2 + 96));
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 72), *(std::string **)(a2 + 72), *(__int128 **)(a2 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 3));
    std::string::operator=((std::string *)(a1 + 96), (const std::string *)(a2 + 96));
    std::vector<std::pair<std::string,float>>::__assign_with_size[abi:ne180100]<std::pair<std::string,float>*,std::pair<std::string,float>*>(a1 + 120, *(std::string **)(a2 + 120), *(__int128 **)(a2 + 128), (uint64_t)(*(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120)) >> 5);
  }
  std::string::operator=((std::string *)(a1 + 144), (const std::string *)(a2 + 144));
  v5 = *(_WORD *)(a2 + 172);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_WORD *)(a1 + 172) = v5;
  std::string::operator=((std::string *)(a1 + 176), (const std::string *)(a2 + 176));
  v6 = *(_DWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 216) = v6;
  return a1;
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(std::vector<std::wstring> *this, std::string *__str, __int128 *a3, unint64_t a4)
{
  std::__compressed_pair<std::wstring *> *p_end_cap;
  std::string *begin;
  unint64_t v10;
  unint64_t v11;
  std::wstring *v12;
  std::string *v13;
  std::wstring *v14;
  std::wstring *v15;
  std::vector<std::wstring>::pointer end;

  p_end_cap = &this->__end_cap_;
  begin = (std::string *)this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:ne180100](this, v11);
    v12 = (std::wstring *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (__int128 *)__str, a3, (std::string *)this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, v13, begin);
    v12 = (std::wstring *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (__int128 *)v13, a3, (std::string *)this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, (std::string *)a3, begin);
  v15 = v14;
  end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(end[-1].__r_.__value_.__l.__data_);
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_1AD7975F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1AD7975FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(std::string *__str, std::string *a2, std::string *this)
{
  const std::string *v4;

  v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

void std::vector<std::pair<std::string,float>>::__assign_with_size[abi:ne180100]<std::pair<std::string,float>*,std::pair<std::string,float>*>(uint64_t a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  std::string *v13;
  unint64_t v14;
  std::string *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5)
  {
    std::vector<std::pair<std::string,float>>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v11 = v10 >> 4;
    if (v10 >> 4 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100]((_QWORD *)a1, v12);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,float>>,std::pair<std::string,float>*,std::pair<std::string,float>*,std::pair<std::string,float>*>(v8, (__int128 *)__str, a3, *(std::string **)(a1 + 8));
    goto LABEL_11;
  }
  v14 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 5;
  if (v14 < a4)
  {
    v15 = (std::string *)((char *)__str + 32 * v14);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<std::string,float> *,std::pair<std::string,float> *,std::pair<std::string,float> *,0>(__str, v15, v9);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,float>>,std::pair<std::string,float>*,std::pair<std::string,float>*,std::pair<std::string,float>*>(v8, (__int128 *)v15, a3, *(std::string **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v13;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<std::string,float> *,std::pair<std::string,float> *,std::pair<std::string,float> *,0>(__str, (std::string *)a3, v9);
  v17 = v16;
  v18 = *(_QWORD *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      if (*(char *)(v18 - 9) < 0)
        operator delete(*(void **)(v18 - 32));
      v18 -= 32;
    }
    while (v18 != v17);
  }
  *(_QWORD *)(a1 + 8) = v17;
}

void sub_1AD797794(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1AD79779C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,float>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<quasar::TextTokenizer::Token>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<std::string,float> *,std::pair<std::string,float> *,std::pair<std::string,float> *,0>(std::string *__str, std::string *a2, std::string *this)
{
  std::string *v4;
  std::string *v5;

  v4 = __str;
  if (__str == a2)
    return __str;
  v5 = a2;
  do
  {
    std::string::operator=(this, v4);
    LODWORD(this[1].__r_.__value_.__l.__data_) = v4[1].__r_.__value_.__l.__data_;
    this = (std::string *)((char *)this + 32);
    v4 = (std::string *)((char *)v4 + 32);
  }
  while (v4 != v5);
  return v5;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<quasar::Token> *,std::vector<quasar::Token> *,std::vector<quasar::Token> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    std::vector<quasar::Token>::__vdeallocate((void **)a4);
    *(_OWORD *)a4 = *(_OWORD *)v5;
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(v5 + 16);
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    a4 += 24;
    v5 += 24;
  }
  while (v5 != v6);
  return v6;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::Token>>,std::reverse_iterator<std::vector<quasar::Token>*>,std::reverse_iterator<std::vector<quasar::Token>*>,std::reverse_iterator<std::vector<quasar::Token>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::Token>>,std::reverse_iterator<std::vector<quasar::Token>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

_QWORD *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::Token>>,std::vector<quasar::Token>*,std::vector<quasar::Token>*,std::vector<quasar::Token>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  _QWORD v6[3];
  char v7;
  _QWORD *v8;
  _QWORD *v9;

  v4 = a4;
  v9 = a4;
  v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      *(_OWORD *)v4 = *(_OWORD *)a2;
      v4[2] = *(_QWORD *)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v4 += 3;
      a2 += 24;
    }
    while (a2 != a3);
    v9 = v4;
  }
  v7 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::Token>>,std::vector<quasar::Token>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::Token>>,std::reverse_iterator<std::vector<quasar::Token>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::Token>>,std::reverse_iterator<std::vector<quasar::Token>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::Token>>,std::reverse_iterator<std::vector<quasar::Token>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::Token>>,std::vector<quasar::Token>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::Token>>,std::vector<quasar::Token>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::Token>>,std::vector<quasar::Token>*>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = **(void ****)(a1 + 16);
  v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    v3 = v1;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

void **std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<quasar::Token>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<quasar::Token>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::vector<std::vector<quasar::Token>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<quasar::Token>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer(&v15);
  }
}

void sub_1AD797CAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<quasar::Token>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::Token>>,std::reverse_iterator<std::vector<quasar::Token>*>,std::reverse_iterator<std::vector<quasar::Token>*>,std::reverse_iterator<std::vector<quasar::Token>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

BOOL fst::CompatSymbols(fst *this, const fst::SymbolTable *a2, const fst::SymbolTable *a3)
{
  _BOOL8 result;
  int v6;
  unsigned __int8 v7;
  size_t v8;
  unint64_t v9;
  int v10;
  void **v11;
  uint64_t v12;
  void **p_p;
  int v14;
  int v15;
  int v16;
  _BOOL4 v17;
  fst *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23[2];
  unsigned __int8 v24;
  void *__p;
  size_t __n;
  unsigned __int8 v27;

  if (!FLAGS_fst_compat_symbols)
    return 1;
  result = 1;
  if (this && a2)
  {
    v6 = (int)a3;
    (*(void (**)(void **__return_ptr, fst *))(*(_QWORD *)this + 64))(&__p, this);
    (*(void (**)(void **__return_ptr, const fst::SymbolTable *))(*(_QWORD *)a2 + 64))(v23, a2);
    v7 = v27;
    if ((v27 & 0x80u) == 0)
      v8 = v27;
    else
      v8 = __n;
    v9 = v24;
    v10 = (char)v24;
    if ((v24 & 0x80u) != 0)
      v9 = (unint64_t)v23[1];
    if (v8 == v9)
    {
      if ((v24 & 0x80u) == 0)
        v11 = v23;
      else
        v11 = (void **)v23[0];
      if ((char)v27 < 0)
      {
        v17 = memcmp(__p, v11, __n) != 0;
        if ((v10 & 0x80000000) == 0)
          goto LABEL_22;
      }
      else if (v27)
      {
        v12 = v27 - 1;
        p_p = &__p;
        do
        {
          v15 = *(unsigned __int8 *)p_p;
          p_p = (void **)((char *)p_p + 1);
          v14 = v15;
          v16 = *(unsigned __int8 *)v11;
          v11 = (void **)((char *)v11 + 1);
          v17 = v14 != v16;
        }
        while (v14 == v16 && v12-- != 0);
        if (((char)v24 & 0x80000000) == 0)
        {
LABEL_22:
          if ((v7 & 0x80) == 0)
            goto LABEL_23;
LABEL_30:
          operator delete(__p);
LABEL_23:
          if ((v17 & v6) != 1)
            return !v17;
          std::string::basic_string[abi:ne180100]<0>(&__p, "WARNING");
          v19 = fst::LogMessage::LogMessage((fst *)v23, (uint64_t)&__p);
          v20 = (_QWORD *)fst::cerr(v19);
          v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"CompatSymbols: Symbol table check sums do not match. ", 53);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Table sizes are ", 16);
          (*(void (**)(fst *))(*(_QWORD *)this + 120))(this);
          v22 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" and ", 5);
          (*(void (**)(const fst::SymbolTable *))(*(_QWORD *)a2 + 120))(a2);
          std::ostream::operator<<();
          fst::LogMessage::~LogMessage((fst::LogMessage *)v23);
          if ((char)v27 < 0)
            operator delete(__p);
          return 0;
        }
      }
      else
      {
        v17 = 0;
        if (((char)v24 & 0x80000000) == 0)
          goto LABEL_22;
      }
    }
    else
    {
      v17 = 1;
      if (((char)v24 & 0x80000000) == 0)
        goto LABEL_22;
    }
    operator delete(v23[0]);
    if ((v27 & 0x80) == 0)
      goto LABEL_23;
    goto LABEL_30;
  }
  return result;
}

void sub_1AD797F38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(_QWORD *a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFstImpl(v2);
  *a1 = &unk_1E5D28AB0;
  a1[1] = v2;
  return a1;
}

void sub_1AD797FB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFstImpl(uint64_t a1)
{
  std::string *v2;
  std::string __str;

  *(_QWORD *)a1 = &unk_1E5D22828;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)a1 = &unk_1E5D1CF58;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x156A5A950003;
  return a1;
}

void sub_1AD79809C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  if (a15 < 0)
    operator delete(__p);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEInferenceNetConfig::Read(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  kaldi::Input *v5;
  uint64_t *v6;
  std::string::size_type v7;
  uint64_t v8;
  std::string::size_type v9;
  void **v10;
  void *v12;
  BOOL v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  BOOL v18;
  BOOL v20;
  BOOL v21;
  BOOL v23;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  BOOL v34;
  BOOL v35;
  BOOL v37;
  BOOL v39;
  BOOL v40;
  BOOL v43;
  BOOL v44;
  BOOL v47;
  BOOL v50;
  BOOL v51;
  BOOL v52;
  _BOOL4 v53;
  BOOL v54;
  _BOOL4 v55;
  BOOL v56;
  char *v57;
  BOOL v58;
  BOOL v59;
  BOOL v60;
  BOOL v61;
  _BOOL4 v62;
  _QWORD *v63;
  void **v64;
  uint64_t v65;
  _QWORD *v66;
  int v67;
  uint64_t v68;
  std::string __p[11];
  void *v70[3];
  _BYTE v71[15];
  char v72[9];

  v72[0] = 0;
  v5 = (kaldi::Input *)kaldi::Input::Input(v71, a3, v72);
  v6 = (uint64_t *)kaldi::Input::Stream(v5);
  kaldi::quasar::CreateComputeEngineConfig(a2, (uint64_t *)__p);
  v7 = __p[0].__r_.__value_.__r.__words[0];
  __p[0].__r_.__value_.__r.__words[0] = 0;
  v8 = a1[48];
  a1[48] = v7;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = __p[0].__r_.__value_.__r.__words[0];
    __p[0].__r_.__value_.__r.__words[0] = 0;
    if (v9)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v9 + 8))(v9);
  }
  while ((*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 2) == 0)
  {
    memset(v70, 0, sizeof(v70));
    kaldi::ReadToken(v6, v72[0], (uint64_t)v70);
    if (SHIBYTE(v70[2]) < 0)
    {
      v12 = v70[1];
      if (v70[1] == (void *)11
        && *(_QWORD *)v70[0] == 0x61447475706E493CLL
        && *(_QWORD *)((char *)v70[0] + 3) == 0x3E61746144747570)
      {
LABEL_100:
        kaldi::ReadToken(v6, v72[0], (uint64_t)a1);
        goto LABEL_178;
      }
      if (v70[1] == (void *)14)
      {
        v14 = *(_QWORD *)v70[0] == 0x61447475706E493CLL && *(_QWORD *)((char *)v70[0] + 6) == 0x3E6D694461746144;
        v15 = (uint64_t)(a1 + 39);
        if (v14)
        {
LABEL_177:
          kaldi::ReadBasicType<int>(v6, v72[0], v15);
          goto LABEL_178;
        }
        v12 = v70[1];
      }
      if (v12 == (void *)16)
      {
        v16 = *(_QWORD *)v70[0] == 0x61447475706E493CLL && *((_QWORD *)v70[0] + 1) == 0x3E65706168536174;
        v17 = (uint64_t)(a1 + 41);
        if (v16)
          goto LABEL_175;
        v12 = v70[1];
      }
      if (v12 == (void *)12)
      {
        v18 = *(_QWORD *)v70[0] == 0x4474757074754F3CLL && *((_DWORD *)v70[0] + 2) == 1046574177;
        v17 = (uint64_t)(a1 + 3);
        if (v18)
          goto LABEL_175;
        v12 = v70[1];
      }
      if (v12 == (void *)17)
      {
        v20 = *(_QWORD *)v70[0] == 0x676E696B73614D3CLL
           && *((_QWORD *)v70[0] + 1) == 0x7475706E49726F46
           && *((_BYTE *)v70[0] + 16) == 62;
        v17 = (uint64_t)(a1 + 18);
        if (v20)
          goto LABEL_175;
        v12 = v70[1];
      }
      if (v12 == (void *)15)
      {
        v21 = *(_QWORD *)v70[0] == 0x4474757074754F3CLL && *(_QWORD *)((char *)v70[0] + 7) == 0x3E6D694461746144;
        v15 = (uint64_t)a1 + 316;
        if (v21)
          goto LABEL_177;
        v12 = v70[1];
      }
      if (v12 == (void *)17)
      {
        v23 = *(_QWORD *)v70[0] == 0x4474757074754F3CLL
           && *((_QWORD *)v70[0] + 1) == 0x6570616853617461
           && *((_BYTE *)v70[0] + 16) == 62;
        v17 = (uint64_t)(a1 + 44);
        if (v23)
          goto LABEL_175;
        v12 = v70[1];
      }
      if (v12 == (void *)23)
      {
        if (*(_QWORD *)v70[0] == 0x496465686361433CLL
          && *((_QWORD *)v70[0] + 1) == 0x736E65547475706ELL
          && *(_QWORD *)((char *)v70[0] + 15) == 0x3E7473694C726F73)
        {
LABEL_130:
          memset(__p, 0, 24);
          kaldi::ReadToken(v6, v72[0], (uint64_t)__p);
          kaldi::SplitStringToVector(__p, ",", 1, (uint64_t)(a1 + 21));
          goto LABEL_171;
        }
        v12 = v70[1];
      }
      if (v12 != (void *)24)
        goto LABEL_97;
      if (*(_QWORD *)v70[0] == 0x4F6465686361433CLL
        && *((_QWORD *)v70[0] + 1) == 0x6E65547475707475
        && *((_QWORD *)v70[0] + 2) == 0x3E7473694C726F73)
      {
LABEL_159:
        memset(__p, 0, 24);
        kaldi::ReadToken(v6, v72[0], (uint64_t)__p);
        kaldi::SplitStringToVector(__p, ",", 1, (uint64_t)(a1 + 27));
        goto LABEL_171;
      }
      v12 = v70[1];
      if (v70[1] != (void *)24)
        goto LABEL_97;
      if (*(_QWORD *)v70[0] == 0x546465686361433CLL
        && *((_QWORD *)v70[0] + 1) == 0x616853726F736E65
        && *((_QWORD *)v70[0] + 2) == 0x3E7473694C736570)
      {
LABEL_158:
        memset(__p, 0, 24);
        kaldi::ReadToken(v6, v72[0], (uint64_t)__p);
        kaldi::SplitTensorShapesToIntVector(__p, "|", a1 + 33);
        goto LABEL_171;
      }
      if ((HIBYTE(v70[2]) & 0x80) != 0)
      {
LABEL_97:
        if (v12 == (void *)27)
        {
          v10 = (void **)v70[0];
LABEL_88:
          v30 = *v10;
          v31 = v10[1];
          v32 = v10[2];
          v33 = *(uint64_t *)((char *)v10 + 19);
          v34 = v30 == (void *)0x546465686361433CLL && v31 == (void *)0x696E49726F736E65;
          v35 = v34 && v32 == (void *)0x756C61566C616974;
          if (v35 && v33 == 0x3E7365756C61566CLL)
          {
            memset(__p, 0, 24);
            kaldi::ReadToken(v6, v72[0], (uint64_t)__p);
            kaldi::SplitStringToFloats<float>((uint64_t)__p, ",", 1, a1 + 36);
            goto LABEL_171;
          }
        }
      }
    }
    else
    {
      v10 = v70;
      switch(HIBYTE(v70[2]))
      {
        case 0xB:
          if (v70[0] != (void *)0x61447475706E493CLL || *(void **)((char *)v70 + 3) != (void *)0x3E61746144747570)
            break;
          goto LABEL_100;
        case 0xC:
          goto LABEL_136;
        case 0xE:
          v43 = v70[0] == (void *)0x61447475706E493CLL && *(void **)((char *)v70 + 6) == (void *)0x3E6D694461746144;
          v15 = (uint64_t)(a1 + 39);
          if (v43)
            goto LABEL_177;
          goto LABEL_135;
        case 0xF:
          goto LABEL_116;
        case 0x10:
          v37 = v70[0] == (void *)0x61447475706E493CLL && v70[1] == (void *)0x3E65706168536174;
          v17 = (uint64_t)(a1 + 41);
          if (v37)
            goto LABEL_175;
          if (HIBYTE(v70[2]) == 15)
            goto LABEL_116;
LABEL_135:
          if (HIBYTE(v70[2]) != 12)
            break;
LABEL_136:
          v44 = v70[0] == (void *)0x4474757074754F3CLL && LODWORD(v70[1]) == 1046574177;
          v17 = (uint64_t)(a1 + 3);
          if (!v44)
            break;
          goto LABEL_175;
        case 0x11:
          v39 = v70[0] == (void *)0x676E696B73614D3CLL && v70[1] == (void *)0x7475706E49726F46 && LOBYTE(v70[2]) == 62;
          v17 = (uint64_t)(a1 + 18);
          if (v39)
            goto LABEL_175;
          if (HIBYTE(v70[2]) == 17)
          {
            v50 = v70[0] == (void *)0x4474757074754F3CLL
               && v70[1] == (void *)0x6570616853617461
               && LOBYTE(v70[2]) == 62;
            v17 = (uint64_t)(a1 + 44);
            if (v50)
              goto LABEL_175;
          }
          else
          {
            if (HIBYTE(v70[2]) != 15)
              break;
LABEL_116:
            v40 = v70[0] == (void *)0x4474757074754F3CLL && *(void **)((char *)v70 + 7) == (void *)0x3E6D694461746144;
            v15 = (uint64_t)a1 + 316;
            if (v40)
              goto LABEL_177;
          }
          break;
        case 0x17:
          if (v70[0] != (void *)0x496465686361433CLL
            || v70[1] != (void *)0x736E65547475706ELL
            || *(void **)((char *)&v70[1] + 7) != (void *)0x3E7473694C726F73)
          {
            break;
          }
          goto LABEL_130;
        case 0x18:
          if (v70[0] == (void *)0x4F6465686361433CLL
            && v70[1] == (void *)0x6E65547475707475
            && v70[2] == (void *)0x3E7473694C726F73)
          {
            goto LABEL_159;
          }
          if (HIBYTE(v70[2]) != 24)
            break;
          v47 = v70[0] == (void *)0x546465686361433CLL && v70[1] == (void *)0x616853726F736E65;
          if (!v47 || v70[2] != (void *)0x3E7473694C736570)
            break;
          goto LABEL_158;
        case 0x1B:
          goto LABEL_88;
        default:
          break;
      }
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v70, "<InputExtraList>"))
    {
      memset(__p, 0, 24);
      kaldi::ReadToken(v6, v72[0], (uint64_t)__p);
      kaldi::SplitStringToVector(__p, ",", 1, (uint64_t)(a1 + 24));
      goto LABEL_171;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v70, "<OutputExtraList>"))
    {
      memset(__p, 0, 24);
      kaldi::ReadToken(v6, v72[0], (uint64_t)__p);
      kaldi::SplitStringToVector(__p, ",", 1, (uint64_t)(a1 + 30));
LABEL_171:
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      goto LABEL_178;
    }
    v51 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v70, "<InputPenultimate>");
    v17 = (uint64_t)(a1 + 6);
    if (v51)
      goto LABEL_175;
    v52 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v70, "<OutputPenultimate>");
    v17 = (uint64_t)(a1 + 9);
    if (v52)
      goto LABEL_175;
    v53 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v70, "<OutputPenultimateDim>");
    v15 = (uint64_t)(a1 + 40);
    if (v53)
      goto LABEL_177;
    v54 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v70, "<InputRequestedUnit>");
    v17 = (uint64_t)(a1 + 12);
    if (v54
      || (v55 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v70, "<GraphReset>"),
          v17 = (uint64_t)(a1 + 15),
          v55))
    {
LABEL_175:
      kaldi::ReadToken(v6, v72[0], v17);
      goto LABEL_178;
    }
    v56 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v70, "<IsCachedStreaming>");
    v57 = (char *)(a1 + 47);
    if (!v56)
    {
      v58 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v70, "<IsCachedTensorFp16>");
      v57 = (char *)a1 + 379;
      if (!v58)
      {
        v59 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v70, "<IsMaskingTensorFp16>");
        v57 = (char *)a1 + 380;
        if (!v59)
        {
          v60 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v70, "<IsRNN>");
          v57 = (char *)a1 + 377;
          if (!v60)
          {
            v61 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v70, "<IsFOFE>");
            v57 = (char *)a1 + 378;
            if (!v61)
            {
              v62 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v70, "<IsVecOutputReshapeToMat>");
              v57 = (char *)a1 + 381;
              if (!v62)
              {
                if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v70, "<Engine>"))
                {
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                  v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unknown token ", 14);
                  if (SHIBYTE(v70[2]) >= 0)
                    v64 = v70;
                  else
                    v64 = (void **)v70[0];
                  if (SHIBYTE(v70[2]) >= 0)
                    v65 = HIBYTE(v70[2]);
                  else
                    v65 = (uint64_t)v70[1];
                  v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)v64, v65);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)", a typo in config file?", 24);
                  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
                }
                v68 = a1[48];
                v67 = v72[0];
                std::string::basic_string[abi:ne180100]<0>(__p, "</Engine>");
                (*(void (**)(uint64_t, uint64_t *, BOOL, std::string *))(*(_QWORD *)v68 + 16))(v68, v6, v67 != 0, __p);
                goto LABEL_171;
              }
            }
          }
        }
      }
    }
    kaldi::ReadBasicType<BOOL>(v6, v72[0], v57);
LABEL_178:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(v6);
    if (SHIBYTE(v70[2]) < 0)
      operator delete(v70[0]);
  }
  kaldi::Input::~Input((kaldi::Input *)v71);
}

void sub_1AD798BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  if (*(char *)(v36 - 105) < 0)
    operator delete(*(void **)(v36 - 128));
  kaldi::Input::~Input((kaldi::Input *)(v36 - 104));
  _Unwind_Resume(a1);
}

uint64_t kaldi::ReadBasicType<int>(_QWORD *a1, int a2, uint64_t a3)
{
  int v4;
  uint64_t result;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD v10[52];

  v10[51] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v4 = std::istream::get();
    if (v4 == -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "ReadBasicType: encountered end of stream.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
    }
    if (v4 << 24 != 0x4000000)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"ReadBasicType: did not get expected integer type, ", 50);
      v7 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" vs. ", 5);
      v8 = (_QWORD *)std::ostream::operator<<();
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)".  You can change this code to successfully", 43);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, " read it later, if needed.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
    }
    result = std::istream::read();
  }
  else
  {
    result = MEMORY[0x1AF44CB18](a1, a3);
  }
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Read failure in ReadBasicType, file position is ", 48);
    std::istream::tellg();
    v6 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", next char is ", 15);
    std::istream::peek();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  return result;
}

void sub_1AD798DE8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *std::ws[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1)
{
  const std::locale::facet *v2;
  _QWORD *v3;
  _QWORD *v4;
  _BYTE *v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  std::locale v11;
  char v12;

  MEMORY[0x1AF44CADC](&v12, a1, 1);
  if (!v12)
    return a1;
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v2 = std::locale::use_facet(&v11, MEMORY[0x1E0DE4A90]);
  std::locale::~locale(&v11);
  v3 = a1 + 5;
  while (1)
  {
    v4 = *(_QWORD **)((char *)v3 + *(_QWORD *)(*a1 - 24));
    v5 = (_BYTE *)v4[3];
    if (v5 == (_BYTE *)v4[4])
      break;
    LOBYTE(v6) = *v5;
LABEL_6:
    if ((v6 & 0x80) != 0 || (*((_DWORD *)&v2[1].~facet + v6) & 0x4000) == 0)
    {
      v9 = 0;
      goto LABEL_12;
    }
    v7 = *(_QWORD **)((char *)v3 + *(_QWORD *)(*a1 - 24));
    v8 = v7[3];
    if (v8 == v7[4])
      (*(void (**)(_QWORD *))(*v7 + 80))(v7);
    else
      v7[3] = v8 + 1;
  }
  v6 = (*(uint64_t (**)(_QWORD *))(*v4 + 72))(v4);
  if (v6 != -1)
    goto LABEL_6;
  v9 = 2;
LABEL_12:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_1AD798F10(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  _QWORD *v9;
  uint64_t v11;

  std::locale::~locale(&a9);
  __cxa_begin_catch(a1);
  v11 = *v9;
  *(_DWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v9 + *(_QWORD *)(v11 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1AD798ED8);
  }
  __cxa_rethrow();
}

void sub_1AD798F6C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEInferenceNet::Shape::Init(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  void **v6;
  const std::string *v7;
  int v8;
  int v9;
  unint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void **v35[34];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  if (v2)
  {
    v36 = 0;
    v37 = 0;
    v38 = 0;
    kaldi::SplitStringToVector((const std::string *)a2, ",", 1, (uint64_t)&v36);
    v4 = v36;
    if (v37 != v36)
    {
      v5 = 0;
      v6 = (void **)(a1 + 8);
      do
      {
        v7 = (const std::string *)(v4 + 24 * v5);
        v8 = SHIBYTE(v7->__r_.__value_.__r.__words[2]);
        if (v8 < 0)
        {
          if (v7->__r_.__value_.__l.__size_ != 1)
            goto LABEL_24;
          v9 = *(unsigned __int8 *)v7->__r_.__value_.__l.__data_;
        }
        else
        {
          if (v8 != 1)
            goto LABEL_24;
          v9 = v7->__r_.__value_.__s.__data_[0];
        }
        if (v9 == 82)
        {
          *(_DWORD *)a1 = v5;
          v11 = *(char **)(a1 + 16);
          v10 = *(_QWORD *)(a1 + 24);
          if ((unint64_t)v11 >= v10)
          {
            v12 = *v6;
            v13 = (v11 - (_BYTE *)*v6) >> 3;
            v14 = v13 + 1;
            if ((unint64_t)(v13 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v15 = v10 - (_QWORD)v12;
            if (v15 >> 2 > v14)
              v14 = v15 >> 2;
            if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
              v16 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v16 = v14;
            if (v16)
            {
              v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 24, v16);
              v12 = *(_QWORD **)(a1 + 8);
              v11 = *(char **)(a1 + 16);
            }
            else
            {
              v17 = 0;
            }
            v28 = &v17[8 * v13];
            *(_QWORD *)v28 = 0;
            v24 = v28 + 8;
            while (v11 != (char *)v12)
            {
              v33 = *((_QWORD *)v11 - 1);
              v11 -= 8;
              *((_QWORD *)v28 - 1) = v33;
              v28 -= 8;
            }
LABEL_55:
            *(_QWORD *)(a1 + 8) = v28;
            *(_QWORD *)(a1 + 16) = v24;
            *(_QWORD *)(a1 + 24) = &v17[8 * v16];
            if (v12)
              operator delete(v12);
            goto LABEL_57;
          }
LABEL_23:
          *(_QWORD *)v11 = 0;
          v19 = v11 + 8;
          goto LABEL_26;
        }
        if (v9 == 67)
        {
          *(_DWORD *)(a1 + 4) = v5;
          v11 = *(char **)(a1 + 16);
          v18 = *(_QWORD *)(a1 + 24);
          if ((unint64_t)v11 >= v18)
          {
            v12 = *v6;
            v30 = (v11 - (_BYTE *)*v6) >> 3;
            v31 = v30 + 1;
            if ((unint64_t)(v30 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v32 = v18 - (_QWORD)v12;
            if (v32 >> 2 > v31)
              v31 = v32 >> 2;
            if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
              v16 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v16 = v31;
            if (v16)
            {
              v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 24, v16);
              v12 = *(_QWORD **)(a1 + 8);
              v11 = *(char **)(a1 + 16);
            }
            else
            {
              v17 = 0;
            }
            v28 = &v17[8 * v30];
            *(_QWORD *)v28 = 0;
            v24 = v28 + 8;
            while (v11 != (char *)v12)
            {
              v34 = *((_QWORD *)v11 - 1);
              v11 -= 8;
              *((_QWORD *)v28 - 1) = v34;
              v28 -= 8;
            }
            goto LABEL_55;
          }
          goto LABEL_23;
        }
LABEL_24:
        v20 = std::stoll(v7, 0, 10);
        v21 = v20;
        v23 = *(uint64_t **)(a1 + 16);
        v22 = *(_QWORD *)(a1 + 24);
        if ((unint64_t)v23 >= v22)
        {
          v12 = *v6;
          v25 = ((char *)v23 - (_BYTE *)*v6) >> 3;
          v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v27 = v22 - (_QWORD)v12;
          if (v27 >> 2 > v26)
            v26 = v27 >> 2;
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
            v16 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v16 = v26;
          if (v16)
          {
            v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 24, v16);
            v12 = *(_QWORD **)(a1 + 8);
            v23 = *(uint64_t **)(a1 + 16);
          }
          else
          {
            v17 = 0;
          }
          v28 = &v17[8 * v25];
          *(_QWORD *)v28 = v21;
          v24 = v28 + 8;
          while (v23 != v12)
          {
            v29 = *--v23;
            *((_QWORD *)v28 - 1) = v29;
            v28 -= 8;
          }
          goto LABEL_55;
        }
        *v23 = v20;
        v19 = v23 + 1;
LABEL_26:
        v24 = v19;
LABEL_57:
        *(_QWORD *)(a1 + 16) = v24;
        ++v5;
        v4 = v36;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v37 - v36) >> 3) > v5);
    }
    if ((*(_DWORD *)a1 & 0x80000000) != 0 || (*(_DWORD *)(a1 + 4) & 0x80000000) != 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"row_index >= 0 && col_index >= 0", 32);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v35);
    }
    v35[0] = (void **)&v36;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v35);
  }
}

uint64_t kaldi::quasar::CEInferenceNet::Shape::Get(kaldi::quasar::CEInferenceNet::Shape *this, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[34];

  v5 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 2);
  result = (uint64_t)this + 8;
  if (v5 == v6)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "!shape.empty()");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  v8 = *(int *)this;
  v7 = *((int *)this + 1);
  *(_QWORD *)(v5 + 8 * v8) = a2;
  *(_QWORD *)(v5 + 8 * v7) = a3;
  return result;
}

uint64_t kaldi::quasar::CEInferenceNet::CEInferenceNet(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  std::vector<std::pair<std::string, std::string>> *v10;
  uint64_t *v11;
  _BYTE *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v19;
  int v20;
  unsigned __int8 *v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  std::string *v27;
  __int128 *v28;
  std::string **v29;

  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &off_1E5D32E30;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(_OWORD *)(a1 + 72) = 0u;
  v10 = (std::vector<std::pair<std::string, std::string>> *)(a1 + 80);
  v11 = (uint64_t *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = 0u;
  kaldi::quasar::CEInferenceNetConfig::CEInferenceNetConfig((kaldi::quasar::CEInferenceNetConfig *)(a1 + 104));
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 504) = -1;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 536) = -1;
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 560) = 0;
  *(_QWORD *)(a1 + 552) = 0;
  kaldi::quasar::CEInferenceNetConfig::Read(v11, a2, a3);
  v12 = *(_BYTE **)(a1 + 488);
  v12[8] = a4;
  v12[33] = a5;
  (*(void (**)(std::string **__return_ptr))(*(_QWORD *)v12 + 24))(&v27);
  v13 = v27;
  v27 = 0;
  v14 = *(_QWORD *)(a1 + 496);
  *(_QWORD *)(a1 + 496) = v13;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = v27;
    v27 = 0;
    if (v15)
      (*(void (**)(std::string *))(v15->__r_.__value_.__r.__words[0] + 8))(v15);
  }
  kaldi::quasar::CEInferenceNet::Shape::Init(a1 + 504, a1 + 432);
  kaldi::quasar::CEInferenceNet::Shape::Init(a1 + 536, a1 + 456);
  (*(void (**)(std::string **__return_ptr))(**(_QWORD **)(a1 + 496) + 184))(&v27);
  if (v10 != (std::vector<std::pair<std::string, std::string>> *)&v27)
    std::vector<std::pair<std::string,std::string>>::__assign_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v10, v27, v28, 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)v27) >> 4));
  v29 = &v27;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v16 = *(_QWORD *)(a1 + 80);
  v17 = *(_QWORD *)(a1 + 88);
  if (v16 != v17)
  {
    if (!*(_BYTE *)(a1 + 480))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"cached IO address specified to be sharing, but cached streaming is not set", 74);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v27);
    }
    do
    {
      if (std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*(_QWORD *)(a1 + 320), *(_QWORD *)(a1 + 328), (unsigned __int8 **)v16) == *(_QWORD *)(a1 + 328))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
        v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"tensor that's sharing address between IO is not defined in output cached tensor list: ", 86);
        v20 = *(char *)(v16 + 23);
        if (v20 >= 0)
          v21 = (unsigned __int8 *)v16;
        else
          v21 = *(unsigned __int8 **)v16;
        if (v20 >= 0)
          v22 = *(unsigned __int8 *)(v16 + 23);
        else
          v22 = *(_QWORD *)(v16 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v21, v22);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v27);
      }
      if (std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*(_QWORD *)(a1 + 272), *(_QWORD *)(a1 + 280), (unsigned __int8 **)(v16 + 24)) == *(_QWORD *)(a1 + 280))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
        v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"tensor that's sharing address between IO is not defined in input cached tensor list: ", 85);
        v24 = *(char *)(v16 + 47);
        if (v24 >= 0)
          v25 = v16 + 24;
        else
          v25 = *(_QWORD *)(v16 + 24);
        if (v24 >= 0)
          v26 = *(unsigned __int8 *)(v16 + 47);
        else
          v26 = *(_QWORD *)(v16 + 32);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v27);
      }
      v16 += 48;
    }
    while (v16 != v17);
  }
  if (*(_BYTE *)(a1 + 480))
    kaldi::quasar::CEInferenceNet::InitialCachedStatesInit((kaldi::quasar::CEInferenceNet *)a1);
  return a1;
}

void sub_1AD79964C(_Unwind_Exception *a1)
{
  void **v1;
  kaldi::quasar::CEInferenceNetConfig *v2;
  uint64_t *v3;
  void **v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  _BYTE v10[376];

  v5 = v1 + 64;
  v6 = v1[68];
  if (v6)
  {
    v1[69] = v6;
    operator delete(v6);
  }
  v7 = *v5;
  if (*v5)
  {
    v1[65] = v7;
    operator delete(v7);
  }
  v8 = v1[62];
  v1[62] = 0;
  if (v8)
    (*(void (**)(void *))(*(_QWORD *)v8 + 8))(v8);
  kaldi::quasar::CEInferenceNetConfig::~CEInferenceNetConfig(v2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](v10);
  v9 = *v3;
  *v3 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v1 + 4);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](v10);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::CEInferenceNet::CEInferenceNet(uint64_t a1, uint64_t a2, char a3, char a4)
{
  size_t v8;
  void **v9;
  const void *v10;
  void *__p[2];
  char v13;

  if (*(char *)(a2 + 23) >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v8 + 7);
  if (v13 < 0)
    v9 = (void **)__p[0];
  if (v8)
  {
    if (*(char *)(a2 + 23) >= 0)
      v10 = (const void *)a2;
    else
      v10 = *(const void **)a2;
    memmove(v9, v10, v8);
  }
  strcpy((char *)v9 + v8, ".config");
  kaldi::quasar::CEInferenceNet::CEInferenceNet(a1, a2, (uint64_t)__p, a3, a4);
  if (v13 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1AD7997CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::CEInferenceNet::InitialCachedStatesInit(kaldi::quasar::CEInferenceNet *this)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  std::string *v7;
  uint64_t v8;
  unint64_t i;
  int *v10;
  int **v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  kaldi::quasar::ComputeEngineBufferItf *v20;
  uint64_t j;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  kaldi::quasar::ComputeEngineBufferItf *v25;
  __int128 *v26;
  __int128 *v27;
  char *v28;

  if (!*((_QWORD *)this + 62))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v26, "engine_ != nullptr");
    goto LABEL_34;
  }
  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 47) - *((_QWORD *)this + 46)) >> 3);
  if (v2 != (uint64_t)(*((_QWORD *)this + 50) - *((_QWORD *)this + 49)) >> 2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v26, "cfg_.cached_tensor_shapes_list.size() == cfg_.cached_tensor_initial_states.size()");
    goto LABEL_34;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 35) - *((_QWORD *)this + 34)) >> 3) != v2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v26, "cfg_.cached_input_tensor_list.size() == cfg_.cached_tensor_shapes_list.size()");
    goto LABEL_34;
  }
  v3 = *((_QWORD *)this + 1);
  v4 = (_QWORD *)((char *)this + 8);
  if (*((_QWORD *)this + 2) != v3)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(v3 + 8 * v5);
      *(_QWORD *)(v3 + 8 * v5) = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      ++v5;
      v3 = *((_QWORD *)this + 1);
    }
    while (v5 < (*((_QWORD *)this + 2) - v3) >> 3);
    v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 47) - *((_QWORD *)this + 46)) >> 3);
  }
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::resize((uint64_t)this + 8, v2);
  v8 = *((_QWORD *)this + 46);
  if (*((_QWORD *)this + 47) != v8)
  {
    for (i = 0; i < 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 47) - v8) >> 3); ++i)
    {
      v11 = (int **)(v8 + 24 * i);
      v10 = *v11;
      v12 = v11[1] - *v11;
      if (v12 == 1)
      {
        v13 = 1;
      }
      else
      {
        if (v12 != 2)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Streaming Nnet implementation does not support input shape: ", 60);
          std::ostream::operator<<();
LABEL_34:
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v26);
        }
        v14 = *v10++;
        v13 = v14;
      }
      v15 = *v10;
      if (*((_BYTE *)this + 483) && !kaldi::quasar::isDeviceFp32Compute((kaldi::quasar *)v7))
      {
        v18 = *((_QWORD *)this + 62);
        v19 = (char *)operator new(0x10uLL);
        v27 = (__int128 *)(v19 + 16);
        v28 = v19 + 16;
        *(_QWORD *)v19 = v13;
        *((_QWORD *)v19 + 1) = v15;
        v26 = (__int128 *)v19;
        (*(void (**)(kaldi::quasar::ComputeEngineBufferItf **__return_ptr, uint64_t, __int128 **))(*(_QWORD *)v18 + 64))(&v25, v18, &v26);
      }
      else
      {
        v16 = *((_QWORD *)this + 62);
        v17 = (char *)operator new(0x10uLL);
        v27 = (__int128 *)(v17 + 16);
        v28 = v17 + 16;
        *(_QWORD *)v17 = v13;
        *((_QWORD *)v17 + 1) = v15;
        v26 = (__int128 *)v17;
        (*(void (**)(kaldi::quasar::ComputeEngineBufferItf **__return_ptr, uint64_t, __int128 **))(*(_QWORD *)v16 + 56))(&v25, v16, &v26);
      }
      v20 = v25;
      v25 = 0;
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      for (j = 0; kaldi::quasar::ComputeEngineBufferItf::GetSize(v20) > j; ++j)
        (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *, uint64_t, float))(*(_QWORD *)v20 + 104))(v20, j, *(float *)(*((_QWORD *)this + 49) + 4 * i));
      kaldi::quasar::ComputeEngineBufferItf::SetName((uint64_t)v20, (const std::string *)(*((_QWORD *)this + 34) + 24 * i));
      v22 = *(_QWORD *)(*v4 + 8 * i);
      *(_QWORD *)(*v4 + 8 * i) = v20;
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      v23 = *((_QWORD *)this + 34);
      v26 = (__int128 *)(*((_QWORD *)this + 40) + 24 * i);
      v24 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (unsigned __int8 *)v26, (uint64_t)&std::piecewise_construct, &v26);
      v7 = std::string::operator=((std::string *)(v24 + 40), (const std::string *)(v23 + 24 * i));
      v8 = *((_QWORD *)this + 46);
    }
  }
  if (*((_QWORD *)this + 7) != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 41) - *((_QWORD *)this + 40)) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v26, "cached_output_input_map.size() == cfg_.cached_output_tensor_list.size()");
    goto LABEL_34;
  }
}

void sub_1AD799B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::CEInferenceNet::~CEInferenceNet(kaldi::quasar::CEInferenceNet *this)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;

  *(_QWORD *)this = &off_1E5D32E30;
  v2 = (void *)*((_QWORD *)this + 68);
  if (v2)
  {
    *((_QWORD *)this + 69) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 64);
  if (v3)
  {
    *((_QWORD *)this + 65) = v3;
    operator delete(v3);
  }
  v4 = *((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  kaldi::quasar::CEInferenceNetConfig::~CEInferenceNetConfig((kaldi::quasar::CEInferenceNet *)((char *)this + 104));
  v6 = (void **)((char *)this + 80);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v5 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 32);
  v6 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v6);
  quasar::Bitmap::~Bitmap(this);
}

{
  kaldi::quasar::CEInferenceNet::~CEInferenceNet(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::quasar::CEInferenceNet::CopyToMatrix(uint64_t a1, _QWORD *a2, unsigned int *a3, int32x2_t *a4)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[34];

  v5 = *a2;
  if (!*a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, "in != nullptr");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
  }
  v12 = 0;
  v13 = 0;
  v11[0] = &unk_1E5D341C8;
  v11[1] = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 40))(v5, v11);
  if (*(_DWORD *)(a1 + 536) == -1 || *(_DWORD *)(a1 + 540) == -1)
  {
    v9 = *a3;
    v10 = ((int)v12 / (int)v9);
    if ((int)v12 % (int)v9)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"out_vec.Dim() % row_num == 0", 28);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
    }
  }
  else
  {
    v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 160))(*a2);
    v10 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 160))(*a2, *(unsigned int *)(a1 + 540));
    if ((_DWORD)v12 != (_DWORD)v10 * (_DWORD)v9)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"out_vec.Dim() == out_numrows * out_numcols", 42);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
    }
  }
  kaldi::CuMatrix<float>::Resize(a4, v9, v10, 0, 0);
  kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)a4, (uint64_t)v11);
  v11[0] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)v11);
}

void kaldi::quasar::CEInferenceNet::Feedforward(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  if (*(_BYTE *)(a1 + 480))
    kaldi::quasar::CEInferenceNet::FeedforwardWithCachedStreaming(a1, a2, a3, a4);
  else
    kaldi::quasar::CEInferenceNet::FeedforwardWithoutCachedStreaming(a1, (void **)a2, a3, a4);
}

void kaldi::quasar::CEInferenceNet::FeedforwardWithCachedStreaming(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  _QWORD v4[3];
  void **v5;

  memset(v4, 0, sizeof(v4));
  kaldi::quasar::CEInferenceNet::MultiIOFeedforward(a1, a2, v4, a3, 0, a4);
  v5 = (void **)v4;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v5);
}

void sub_1AD799EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEInferenceNet::FeedforwardWithoutCachedStreaming(uint64_t a1, void **a2, uint64_t *a3, int a4)
{
  void *v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void **v15;
  void **v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type v23;
  uint64_t v24;
  uint64_t v25;
  void **v26[3];
  void **v27;
  void **v28;
  void **v29;
  void **v30;
  unint64_t *v31;
  std::string v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  void ***v37;
  std::string v38;
  __int128 v39;

  *(_QWORD *)&v39 = *MEMORY[0x1E0C80C00];
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v7 = *a2;
  if (*(char *)(a1 + 127) < 0)
  {
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)(a1 + 104), *(_QWORD *)(a1 + 112));
    v8 = v35;
    v9 = v36;
    v33 = v7;
    if (v35 < v36)
    {
      v10 = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
      *(_QWORD *)(v35 + 16) = *((_QWORD *)&v32.__r_.__value_.__l + 2);
      *(_OWORD *)v8 = v10;
      memset(&v32, 0, sizeof(v32));
      *(_QWORD *)(v8 + 24) = v33;
      v35 = v8 + 32;
      goto LABEL_13;
    }
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v32 = *(std::string *)(a1 + 104);
    v33 = v7;
  }
  v11 = (uint64_t)(v8 - v34) >> 5;
  v12 = v11 + 1;
  if ((unint64_t)(v11 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v13 = v9 - v34;
  if (v13 >> 4 > v12)
    v12 = v13 >> 4;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0)
    v14 = 0x7FFFFFFFFFFFFFFLL;
  else
    v14 = v12;
  v31 = &v36;
  v15 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v36, v14);
  v16 = &v15[4 * v11];
  v27 = v15;
  v28 = v16;
  v30 = &v15[4 * v17];
  v18 = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
  v16[2] = (void *)v32.__r_.__value_.__r.__words[2];
  *(_OWORD *)v16 = v18;
  memset(&v32, 0, sizeof(v32));
  v16[3] = v33;
  v29 = v16 + 4;
  std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__swap_out_circular_buffer(&v34, &v27);
  v19 = v35;
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)&v27);
  v35 = v19;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
LABEL_13:
  v20 = a1 + 176;
  v21 = 128;
  if (a4)
    v21 = 176;
  else
    v20 = a1 + 128;
  if ((*(char *)(v20 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v20 + 23))
    {
      v27 = 0;
      v28 = 0;
      v29 = 0;
      v22 = *(_QWORD *)(a1 + 496);
      v38 = *(std::string *)v20;
      goto LABEL_21;
    }
LABEL_26:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"!out_node.empty()", 17);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v27);
  }
  v23 = *(_QWORD *)(v20 + 8);
  if (!v23)
    goto LABEL_26;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v22 = *(_QWORD *)(a1 + 496);
  std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)(a1 + v21), v23);
LABEL_21:
  memset(&v32, 0, sizeof(v32));
  v32.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v32.__r_.__value_.__l.__size_ = v32.__r_.__value_.__r.__words[0];
  v32.__r_.__value_.__r.__words[2] = v32.__r_.__value_.__r.__words[0] + 24;
  v32.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v32.__r_.__value_.__r.__words[2], (__int128 *)&v38, &v39, (std::string *)v32.__r_.__value_.__l.__data_);
  memset(v26, 0, sizeof(v26));
  (*(void (**)(uint64_t, uint64_t *, std::string *, void ***, void ***))(*(_QWORD *)v22 + 128))(v22, &v34, &v32, v26, &v27);
  v37 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  v26[0] = (void **)&v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v26);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  v24 = (uint64_t)*v27;
  *v27 = 0;
  v25 = *a3;
  *a3 = v24;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  v27 = (void **)&v34;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v27);
}

void sub_1AD79A26C(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1AD79A290);
}

void kaldi::quasar::CEInferenceNet::MultiIOFeedforward(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t *a4, uint64_t *a5, int a6)
{
  _OWORD *v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 *v29;
  uint64_t v30;
  __int128 v31;
  unint64_t v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t String;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 *v52;
  uint64_t v53;
  __int128 v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  __int128 v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  unint64_t v67;
  uint64_t v68;
  kaldi::quasar::ComputeEngineBufferItf *v69;
  uint64_t Size;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  __int128 v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  __int128 v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  std::string *v88;
  const std::string::value_type **v89;
  const std::string::value_type **v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  const std::string::value_type *v94;
  uint64_t v95;
  const std::string::value_type *v96;
  const std::string::value_type *v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  std::vector<std::string>::pointer end;
  __int128 v103;
  std::string *v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  std::string::size_type v109;
  std::string::size_type v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  std::string::size_type v114;
  std::string::size_type v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t *v125;
  kaldi::quasar::ComputeEngineBufferItf **v126;
  std::vector<std::string> v127;
  void *__p[2];
  _QWORD *v129;
  char *v130;
  unint64_t *v131;
  std::string v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  void **v137[3];

  v134 = 0;
  v135 = 0;
  v136 = 0;
  v10 = (_OWORD *)(a1 + 104);
  kaldi::quasar::ComputeEngineBufferItf::SetName(*a2, (const std::string *)(a1 + 104));
  v11 = *a2;
  if (*(char *)(a1 + 127) < 0)
  {
    std::string::__init_copy_ctor_external(&v132, *(const std::string::value_type **)(a1 + 104), *(_QWORD *)(a1 + 112));
  }
  else
  {
    *(_OWORD *)&v132.__r_.__value_.__l.__data_ = *v10;
    v132.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 120);
  }
  v133 = v11;
  v12 = v135;
  v126 = (kaldi::quasar::ComputeEngineBufferItf **)a2;
  if (v135 >= v136)
  {
    v14 = (uint64_t)(v135 - v134) >> 5;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v16 = v136 - v134;
    if ((uint64_t)(v136 - v134) >> 4 > v15)
      v15 = v16 >> 4;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0)
      v17 = 0x7FFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    v131 = &v136;
    v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v136, v17);
    v19 = &v18[32 * v14];
    __p[0] = v18;
    __p[1] = v19;
    v130 = &v18[32 * v20];
    v21 = *(_OWORD *)&v132.__r_.__value_.__l.__data_;
    *((_QWORD *)v19 + 2) = *((_QWORD *)&v132.__r_.__value_.__l + 2);
    *(_OWORD *)v19 = v21;
    memset(&v132, 0, sizeof(v132));
    *((_QWORD *)v19 + 3) = v133;
    v129 = v19 + 32;
    std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__swap_out_circular_buffer(&v134, __p);
    v22 = v135;
    std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)__p);
    v135 = v22;
    if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v132.__r_.__value_.__l.__data_);
  }
  else
  {
    v13 = *(_OWORD *)&v132.__r_.__value_.__l.__data_;
    *(_QWORD *)(v135 + 16) = *((_QWORD *)&v132.__r_.__value_.__l + 2);
    *(_OWORD *)v12 = v13;
    memset(&v132, 0, sizeof(v132));
    *(_QWORD *)(v12 + 24) = v133;
    v135 = v12 + 32;
  }
  v125 = a5;
  v23 = a3[1];
  if (*a3 != v23)
  {
    v25 = *(_QWORD *)(a1 + 296);
    v24 = *(_QWORD *)(a1 + 304);
    v26 = 0xAAAAAAAAAAAAAAABLL * ((v24 - v25) >> 3);
    if (v26 != (v23 - *a3) >> 3)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"the number of input tensors ", 28);
      v119 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)" != ", 4);
      v120 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v120, (uint64_t)" , the list of input tensor names", 33);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
    }
    if (v24 != v25)
    {
      v27 = 0;
      v28 = 0;
      if (v26 <= 1)
        v26 = 1;
      do
      {
        v29 = (__int128 *)(*(_QWORD *)(a1 + 296) + v27);
        v30 = *(_QWORD *)(*a3 + 8 * v28);
        if (*((char *)v29 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v132, *(const std::string::value_type **)v29, *((_QWORD *)v29 + 1));
        }
        else
        {
          v31 = *v29;
          v132.__r_.__value_.__r.__words[2] = *((_QWORD *)v29 + 2);
          *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v31;
        }
        v133 = v30;
        v32 = v135;
        if (v135 >= v136)
        {
          v34 = (uint64_t)(v135 - v134) >> 5;
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 59)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v36 = v136 - v134;
          if ((uint64_t)(v136 - v134) >> 4 > v35)
            v35 = v36 >> 4;
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFE0)
            v37 = 0x7FFFFFFFFFFFFFFLL;
          else
            v37 = v35;
          v131 = &v136;
          v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v136, v37);
          v39 = &v38[32 * v34];
          __p[0] = v38;
          __p[1] = v39;
          v130 = &v38[32 * v40];
          v41 = *(_OWORD *)&v132.__r_.__value_.__l.__data_;
          *((_QWORD *)v39 + 2) = *((_QWORD *)&v132.__r_.__value_.__l + 2);
          *(_OWORD *)v39 = v41;
          memset(&v132, 0, sizeof(v132));
          *((_QWORD *)v39 + 3) = v133;
          v129 = v39 + 32;
          std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__swap_out_circular_buffer(&v134, __p);
          v42 = v135;
          std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)__p);
          v135 = v42;
          if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v132.__r_.__value_.__l.__data_);
        }
        else
        {
          v33 = *(_OWORD *)&v132.__r_.__value_.__l.__data_;
          *(_QWORD *)(v135 + 16) = *((_QWORD *)&v132.__r_.__value_.__l + 2);
          *(_OWORD *)v32 = v33;
          memset(&v132, 0, sizeof(v132));
          *(_QWORD *)(v32 + 24) = v133;
          v135 = v32 + 32;
        }
        ++v28;
        v27 += 24;
      }
      while (v26 != v28);
    }
  }
  if (*(_BYTE *)(a1 + 480))
  {
    v43 = *(_QWORD *)(a1 + 8);
    v44 = *(_QWORD *)(a1 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 280) - *(_QWORD *)(a1 + 272)) >> 3) != (v44 - v43) >> 3)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"the number of cached input tensors ", 35);
      v121 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v121, (uint64_t)" != ", 4);
      v122 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)" , the list of cached input tensor names", 40);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
    }
    if (v44 != v43)
    {
      v45 = 0;
      v46 = 0;
      do
      {
        String = quasar::PTree::getString(*(quasar::PTree **)(v43 + 8 * v46));
        v48 = *(unsigned __int8 *)(String + 23);
        if ((v48 & 0x80u) != 0)
          v48 = *(_QWORD *)(String + 8);
        if (v48)
        {
          v49 = quasar::PTree::getString(*(quasar::PTree **)(*(_QWORD *)(a1 + 8) + 8 * v46));
          v50 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v46);
          if (*(char *)(v49 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v132, *(const std::string::value_type **)v49, *(_QWORD *)(v49 + 8));
          }
          else
          {
            v51 = *(_OWORD *)v49;
            v132.__r_.__value_.__r.__words[2] = *(_QWORD *)(v49 + 16);
            *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v51;
          }
          v133 = v50;
          v55 = v135;
          if (v135 >= v136)
          {
            v56 = (uint64_t)(v135 - v134) >> 5;
            v57 = v56 + 1;
            if ((unint64_t)(v56 + 1) >> 59)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v58 = v136 - v134;
            if ((uint64_t)(v136 - v134) >> 4 > v57)
              v57 = v58 >> 4;
            if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFE0)
              v59 = 0x7FFFFFFFFFFFFFFLL;
            else
              v59 = v57;
LABEL_61:
            v131 = &v136;
            v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v136, v59);
            v64 = &v63[32 * v56];
            __p[0] = v63;
            __p[1] = v64;
            v130 = &v63[32 * v65];
            v66 = *(_OWORD *)&v132.__r_.__value_.__l.__data_;
            *((_QWORD *)v64 + 2) = *((_QWORD *)&v132.__r_.__value_.__l + 2);
            *(_OWORD *)v64 = v66;
            memset(&v132, 0, sizeof(v132));
            *((_QWORD *)v64 + 3) = v133;
            v129 = v64 + 32;
            std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__swap_out_circular_buffer(&v134, __p);
            v67 = v135;
            std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)__p);
            v135 = v67;
            if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v132.__r_.__value_.__l.__data_);
            goto LABEL_63;
          }
        }
        else
        {
          v52 = (__int128 *)(*(_QWORD *)(a1 + 272) + v45);
          v53 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v46);
          if (*((char *)v52 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v132, *(const std::string::value_type **)v52, *((_QWORD *)v52 + 1));
          }
          else
          {
            v54 = *v52;
            v132.__r_.__value_.__r.__words[2] = *((_QWORD *)v52 + 2);
            *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v54;
          }
          v133 = v53;
          v55 = v135;
          if (v135 >= v136)
          {
            v56 = (uint64_t)(v135 - v134) >> 5;
            v61 = v56 + 1;
            if ((unint64_t)(v56 + 1) >> 59)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v62 = v136 - v134;
            if ((uint64_t)(v136 - v134) >> 4 > v61)
              v61 = v62 >> 4;
            if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFE0)
              v59 = 0x7FFFFFFFFFFFFFFLL;
            else
              v59 = v61;
            goto LABEL_61;
          }
        }
        v60 = *(_OWORD *)&v132.__r_.__value_.__l.__data_;
        *(_QWORD *)(v55 + 16) = *((_QWORD *)&v132.__r_.__value_.__l + 2);
        *(_OWORD *)v55 = v60;
        memset(&v132, 0, sizeof(v132));
        *(_QWORD *)(v55 + 24) = v133;
        v135 = v55 + 32;
LABEL_63:
        ++v46;
        v43 = *(_QWORD *)(a1 + 8);
        v45 += 24;
      }
      while (v46 < (*(_QWORD *)(a1 + 16) - v43) >> 3);
    }
  }
  if (*(char *)(a1 + 271) < 0)
    v68 = *(_QWORD *)(a1 + 256);
  else
    v68 = *(unsigned __int8 *)(a1 + 271);
  if (v68)
  {
    v69 = *(kaldi::quasar::ComputeEngineBufferItf **)(a1 + 72);
    if (v69)
    {
      Size = kaldi::quasar::ComputeEngineBufferItf::GetSize(v69);
      kaldi::quasar::ComputeEngineBufferItf::GetShape(*v126, (char **)__p);
      v71 = *(_QWORD *)__p[0];
      __p[1] = __p[0];
      operator delete(__p[0]);
      if (Size != v71)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"maskings_->GetSize() == in->GetShape()[0]", 41);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
      }
      v72 = *(_QWORD *)(a1 + 72);
      if (*(char *)(a1 + 271) < 0)
        std::string::__init_copy_ctor_external(&v132, *(const std::string::value_type **)(a1 + 248), *(_QWORD *)(a1 + 256));
      else
        v132 = *(std::string *)(a1 + 248);
      v133 = v72;
      v73 = v135;
      if (v135 >= v136)
      {
        v75 = (uint64_t)(v135 - v134) >> 5;
        v76 = v75 + 1;
        if ((unint64_t)(v75 + 1) >> 59)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v77 = v136 - v134;
        if ((uint64_t)(v136 - v134) >> 4 > v76)
          v76 = v77 >> 4;
        if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFE0)
          v78 = 0x7FFFFFFFFFFFFFFLL;
        else
          v78 = v76;
        v131 = &v136;
        v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v136, v78);
        v80 = &v79[32 * v75];
        __p[0] = v79;
        __p[1] = v80;
        v130 = &v79[32 * v81];
        v82 = *(_OWORD *)&v132.__r_.__value_.__l.__data_;
        *((_QWORD *)v80 + 2) = *((_QWORD *)&v132.__r_.__value_.__l + 2);
        *(_OWORD *)v80 = v82;
        memset(&v132, 0, sizeof(v132));
        *((_QWORD *)v80 + 3) = v133;
        v129 = v80 + 32;
        std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__swap_out_circular_buffer(&v134, __p);
        v83 = v135;
        std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)__p);
        v135 = v83;
        if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v132.__r_.__value_.__l.__data_);
      }
      else
      {
        v74 = *(_OWORD *)&v132.__r_.__value_.__l.__data_;
        *(_QWORD *)(v135 + 16) = *((_QWORD *)&v132.__r_.__value_.__l + 2);
        *(_OWORD *)v73 = v74;
        memset(&v132, 0, sizeof(v132));
        *(_QWORD *)(v73 + 24) = v133;
        v135 = v73 + 32;
      }
    }
  }
  memset(&v132, 0, sizeof(v132));
  memset(&v127, 0, sizeof(v127));
  v84 = 24;
  if (a6)
    v84 = 72;
  v85 = a1 + v84;
  v86 = v85 + 104;
  v87 = *(char *)(v85 + 127);
  if ((v87 & 0x80000000) == 0)
  {
    if ((_BYTE)v87)
      goto LABEL_87;
LABEL_121:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"!out_node.empty()", 17);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  if (!*(_QWORD *)(v86 + 8))
    goto LABEL_121;
LABEL_87:
  v88 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)&v127, (__int128 *)v86);
  v127.__end_ = v88;
  if (*(_BYTE *)(a1 + 480))
  {
    if (*(_QWORD *)(a1 + 80) != *(_QWORD *)(a1 + 88))
    {
      v89 = *(const std::string::value_type ***)(a1 + 320);
      v90 = *(const std::string::value_type ***)(a1 + 328);
      while (1)
      {
        if (v89 == v90)
          goto LABEL_123;
        v91 = *(_QWORD *)(a1 + 80);
        v92 = *(_QWORD *)(a1 + 88);
        if (v91 == v92)
        {
LABEL_111:
          if (v91 != v92)
            goto LABEL_119;
        }
        else
        {
          v93 = *((char *)v89 + 23);
          if (v93 >= 0)
            v94 = (const std::string::value_type *)*((unsigned __int8 *)v89 + 23);
          else
            v94 = v89[1];
          do
          {
            v95 = *(unsigned __int8 *)(v91 + 23);
            if ((v95 & 0x80u) == 0)
              v96 = (const std::string::value_type *)*(unsigned __int8 *)(v91 + 23);
            else
              v96 = *(const std::string::value_type **)(v91 + 8);
            if (v96 == v94)
            {
              if (v93 >= 0)
                v97 = (const std::string::value_type *)v89;
              else
                v97 = *v89;
              if ((v95 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)v91, v97, *(_QWORD *)(v91 + 8)))
                  goto LABEL_111;
              }
              else
              {
                if (!*(_BYTE *)(v91 + 23))
                  goto LABEL_111;
                v98 = 0;
                while (*(unsigned __int8 *)(v91 + v98) == v97[v98])
                {
                  if (v95 == ++v98)
                    goto LABEL_111;
                }
              }
            }
            v91 += 48;
          }
          while (v91 != v92);
        }
        if (v88 >= v127.__end_cap_.__value_)
        {
          v88 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v127, (__int128 *)v89);
        }
        else
        {
          if (*((char *)v89 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v88, *v89, (std::string::size_type)v89[1]);
          }
          else
          {
            v99 = *(_OWORD *)v89;
            v88->__r_.__value_.__r.__words[2] = (std::string::size_type)v89[2];
            *(_OWORD *)&v88->__r_.__value_.__l.__data_ = v99;
          }
          ++v88;
        }
        v127.__end_ = v88;
LABEL_119:
        v89 += 3;
      }
    }
    std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v127, v88, *(std::string **)(a1 + 320), *(__int128 **)(a1 + 328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 328) - *(_QWORD *)(a1 + 320)) >> 3));
  }
LABEL_123:
  if (!v125 || (v100 = *(_QWORD *)(a1 + 344), v101 = *(_QWORD *)(a1 + 352), v100 == v101))
  {
    v105 = 0;
  }
  else
  {
    if (*(_BYTE *)(a1 + 480))
    {
      do
      {
        if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 32), (unsigned __int8 *)v100))
        {
          end = v127.__end_;
          if (v127.__end_ >= v127.__end_cap_.__value_)
          {
            v104 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v127, (__int128 *)v100);
          }
          else
          {
            if (*(char *)(v100 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v127.__end_, *(const std::string::value_type **)v100, *(_QWORD *)(v100 + 8));
            }
            else
            {
              v103 = *(_OWORD *)v100;
              v127.__end_->__r_.__value_.__r.__words[2] = *(_QWORD *)(v100 + 16);
              *(_OWORD *)&end->__r_.__value_.__l.__data_ = v103;
            }
            v104 = end + 1;
          }
          v127.__end_ = v104;
        }
        v100 += 24;
      }
      while (v100 != v101);
    }
    else
    {
      std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v127, v127.__end_, *(std::string **)(a1 + 344), *(__int128 **)(a1 + 352), 0xAAAAAAAAAAAAAAABLL * ((v101 - v100) >> 3));
    }
    v105 = 1;
  }
  v106 = *(_QWORD *)(a1 + 496);
  __p[0] = 0;
  __p[1] = 0;
  v129 = 0;
  (*(void (**)(uint64_t, uint64_t *, std::vector<std::string> *, void **, std::string *))(*(_QWORD *)v106
                                                                                                 + 128))(v106, &v134, &v127, __p, &v132);
  v137[0] = __p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v137);
  v107 = *(_QWORD *)v132.__r_.__value_.__l.__data_;
  *(_QWORD *)v132.__r_.__value_.__l.__data_ = 0;
  v108 = *a4;
  *a4 = v107;
  if (v108)
    (*(void (**)(uint64_t))(*(_QWORD *)v108 + 8))(v108);
  if (*(_BYTE *)(a1 + 480))
  {
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> *,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> *,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> *,0>((uint64_t *)(v132.__r_.__value_.__r.__words[0] + 8), (uint64_t *)v132.__r_.__value_.__l.__size_, (uint64_t *)v132.__r_.__value_.__l.__data_);
    v110 = v109;
    v111 = (_QWORD *)v132.__r_.__value_.__l.__size_;
    while (v111 != (_QWORD *)v110)
    {
      v113 = *--v111;
      v112 = v113;
      *v111 = 0;
      if (v113)
        (*(void (**)(uint64_t))(*(_QWORD *)v112 + 8))(v112);
    }
    v132.__r_.__value_.__l.__size_ = v110;
    if (v105 && *(_QWORD *)(a1 + 80) != *(_QWORD *)(a1 + 88))
    {
      kaldi::quasar::CEInferenceNet::GetExtraOutputFromSharedAddressCachedStates((uint64_t *)a1, &v134, (uint64_t *)__p);
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate(v125);
      *(_OWORD *)v125 = *(_OWORD *)__p;
      v125[2] = (uint64_t)v129;
      __p[1] = 0;
      v129 = 0;
      __p[0] = 0;
      v137[0] = __p;
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](v137);
    }
    kaldi::quasar::CEInferenceNet::GetAndCacheOutput((_QWORD *)a1, (uint64_t *)&v132, v125);
  }
  else if (v105)
  {
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> *,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> *,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> *,0>((uint64_t *)(v132.__r_.__value_.__r.__words[0] + 8), (uint64_t *)v132.__r_.__value_.__l.__size_, (uint64_t *)v132.__r_.__value_.__l.__data_);
    v115 = v114;
    v116 = (_QWORD *)v132.__r_.__value_.__l.__size_;
    while (v116 != (_QWORD *)v115)
    {
      v118 = *--v116;
      v117 = v118;
      *v116 = 0;
      if (v118)
        (*(void (**)(uint64_t))(*(_QWORD *)v117 + 8))(v117);
    }
    v132.__r_.__value_.__l.__size_ = v115;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate(v125);
    *(std::string *)v125 = v132;
    memset(&v132, 0, sizeof(v132));
  }
  __p[0] = &v127;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v132;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v134;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

uint64_t kaldi::quasar::CEInferenceNet::Feedforward(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t result;
  uint64_t v12;

  v8 = *(_QWORD *)(a1 + 496);
  v9 = kaldi::quasar::CEInferenceNet::Shape::Get((kaldi::quasar::CEInferenceNet::Shape *)(a1 + 504), *(int *)(a2 + 20), *(int *)(a2 + 16));
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v8 + 56))(&v12, v8, v9);
  if (*(int *)(a2 + 20) >= 1)
  {
    v10 = 0;
    do
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v12 + 88))(v12, *(_QWORD *)(a2 + 8) + 4 * *(_DWORD *)(a2 + 24) * v10, *(unsigned int *)(a2 + 16), (*(_DWORD *)(a2 + 16) * v10));
      ++v10;
    }
    while (v10 < *(_DWORD *)(a2 + 20));
  }
  kaldi::quasar::CEInferenceNet::Feedforward(a1, &v12, a3, a4);
  result = v12;
  v12 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  void *__p;
  void *v13;
  _QWORD *v14;
  uint64_t v15;

  v8 = *(_QWORD *)(a1 + 496);
  v9 = *(int *)(a2 + 16);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v13 = v10 + 1;
  v14 = v10 + 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)v8 + 56))(&v15, v8, &__p);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v15 + 88))(v15, *(_QWORD *)(a2 + 8), *(unsigned int *)(a2 + 16), 0);
  kaldi::quasar::CEInferenceNet::Feedforward(a1, &v15, a3, a4);
  result = v15;
  v15 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1AD79B0AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1AD79B1A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::CEInferenceNet::Feedforward(_BYTE *a1, uint64_t a2, int32x2_t *a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  kaldi::quasar::ComputeEngineBufferItf *v9;

  if (*(_DWORD *)(a2 + 20))
  {
    v9 = 0;
    kaldi::quasar::CEInferenceNet::Feedforward((uint64_t)a1, a2, (uint64_t *)&v9, a4);
    if (a1[485])
      kaldi::quasar::CEInferenceNet::ReshapeVectorOutputBuffToMatrix(&v9);
    v8 = *(_DWORD *)(a2 + 20);
    kaldi::quasar::CEInferenceNet::CopyToMatrix((uint64_t)a1, &v9, &v8, a3);
    if (v9)
      (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v9 + 8))(v9);
  }
  else
  {
    v7 = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 176))(a1, a4);
    kaldi::CuMatrix<float>::Resize(a3, 0, v7, 0, 0);
  }
}

void sub_1AD79B2B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::CEInferenceNet::ReshapeVectorOutputBuffToMatrix(kaldi::quasar::ComputeEngineBufferItf **a1)
{
  int64_t v2;
  kaldi::quasar::ComputeEngineBufferItf *v3;
  uint64_t Size;
  _QWORD *v5;
  kaldi::quasar::ComputeEngineBufferItf *v6;
  kaldi::quasar::ComputeEngineBufferItf *v7;
  kaldi::quasar::ComputeEngineBufferItf *v8;
  kaldi::quasar::ComputeEngineBufferItf *v9;
  void *__p;
  _BYTE *v11;
  _QWORD *v12;

  kaldi::quasar::ComputeEngineBufferItf::GetShape(*a1, (char **)&__p);
  v2 = v11 - (_BYTE *)__p;
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  if (v2 == 8)
  {
    v3 = *a1;
    Size = kaldi::quasar::ComputeEngineBufferItf::GetSize(*a1);
    v5 = operator new(0x10uLL);
    v11 = v5 + 2;
    v12 = v5 + 2;
    *v5 = 1;
    v5[1] = Size;
    __p = v5;
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf **__return_ptr, kaldi::quasar::ComputeEngineBufferItf *, void **))(*(_QWORD *)v3 + 168))(&v9, v3, &__p);
    if (__p)
    {
      v11 = __p;
      operator delete(__p);
    }
    v6 = v9;
    v9 = 0;
    v7 = *a1;
    *a1 = v6;
    if (v7)
    {
      (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v7 + 8))(v7);
      v8 = v9;
      v9 = 0;
      if (v8)
        (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v8 + 8))(v8);
    }
  }
}

void sub_1AD79B3B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::CEInferenceNet::Feedforward(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  kaldi::quasar::CEInferenceNet::Feedforward(a1, a2, &v7, a4);
  v5 = v7;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 40))(v7, a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

void sub_1AD79B428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::CEInferenceNet::Feedforward(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  void *__p;
  void *v13;
  _QWORD *v14;
  uint64_t v15;

  v7 = *(_QWORD *)(a1 + 496);
  v9 = *a2;
  v8 = a2[1];
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = (v8 - v9) >> 2;
  v13 = v10 + 1;
  v14 = v10 + 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)v7 + 56))(&v15, v7, &__p);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 80))(v15);
  kaldi::quasar::CEInferenceNet::Feedforward(a1, &v15, a3, a4);
  result = v15;
  v15 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1AD79B528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::CEInferenceNet::GetOutput()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented TODO");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::quasar::CEInferenceNet::GetUnitOutput()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented TODO");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

float kaldi::quasar::CEInferenceNet::GetUnitOutput(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  unint64_t v31;
  uint64_t v32;
  std::string::size_type v33;
  float v34;
  uint64_t v35;
  void **v37[3];
  void *__p;
  void *v39;
  _QWORD *v40;
  char *v41;
  unint64_t *v42;
  std::string v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  void ***v50;
  std::string v51;
  __int128 v52;

  *(_QWORD *)&v52 = *MEMORY[0x1E0C80C00];
  v49 = a3;
  v5 = *(_QWORD *)(a1 + 496);
  v6 = operator new(8uLL);
  __p = v6;
  *v6 = 1;
  v39 = v6 + 1;
  v40 = v6 + 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)v5 + 48))(&v48, v5, &__p);
  if (__p)
  {
    v39 = __p;
    operator delete(__p);
  }
  (*(void (**)(uint64_t, int *, uint64_t, _QWORD))(*(_QWORD *)v48 + 80))(v48, &v49, 1, 0);
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v7 = *a2;
  if (*(char *)(a1 + 175) < 0)
  {
    std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)(a1 + 152), *(_QWORD *)(a1 + 160));
    v8 = v46;
    v9 = v47;
    v44 = v7;
    if (v46 < v47)
    {
      v10 = *(_OWORD *)&v43.__r_.__value_.__l.__data_;
      *(_QWORD *)(v46 + 16) = *((_QWORD *)&v43.__r_.__value_.__l + 2);
      *(_OWORD *)v8 = v10;
      memset(&v43, 0, sizeof(v43));
      *(_QWORD *)(v8 + 24) = v44;
      v46 = v8 + 32;
      goto LABEL_15;
    }
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v43 = *(std::string *)(a1 + 152);
    v44 = v7;
  }
  v11 = (uint64_t)(v8 - v45) >> 5;
  v12 = v11 + 1;
  if ((unint64_t)(v11 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v13 = v9 - v45;
  if (v13 >> 4 > v12)
    v12 = v13 >> 4;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0)
    v14 = 0x7FFFFFFFFFFFFFFLL;
  else
    v14 = v12;
  v42 = &v47;
  v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v47, v14);
  v16 = &v15[32 * v11];
  __p = v15;
  v39 = v16;
  v41 = &v15[32 * v17];
  v18 = *(_OWORD *)&v43.__r_.__value_.__l.__data_;
  *((_QWORD *)v16 + 2) = *((_QWORD *)&v43.__r_.__value_.__l + 2);
  *(_OWORD *)v16 = v18;
  memset(&v43, 0, sizeof(v43));
  *((_QWORD *)v16 + 3) = v44;
  v40 = v16 + 32;
  std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__swap_out_circular_buffer(&v45, &__p);
  v19 = v46;
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)&__p);
  v46 = v19;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
LABEL_15:
  v20 = v48;
  if (*(char *)(a1 + 223) < 0)
    std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)(a1 + 200), *(_QWORD *)(a1 + 208));
  else
    v43 = *(std::string *)(a1 + 200);
  v44 = v20;
  v21 = v46;
  if (v46 >= v47)
  {
    v23 = (uint64_t)(v46 - v45) >> 5;
    v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v25 = v47 - v45;
    if ((uint64_t)(v47 - v45) >> 4 > v24)
      v24 = v25 >> 4;
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFE0)
      v26 = 0x7FFFFFFFFFFFFFFLL;
    else
      v26 = v24;
    v42 = &v47;
    v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v47, v26);
    v28 = &v27[32 * v23];
    __p = v27;
    v39 = v28;
    v41 = &v27[32 * v29];
    v30 = *(_OWORD *)&v43.__r_.__value_.__l.__data_;
    *((_QWORD *)v28 + 2) = *((_QWORD *)&v43.__r_.__value_.__l + 2);
    *(_OWORD *)v28 = v30;
    memset(&v43, 0, sizeof(v43));
    *((_QWORD *)v28 + 3) = v44;
    v40 = v28 + 32;
    std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__swap_out_circular_buffer(&v45, &__p);
    v31 = v46;
    std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)&__p);
    v46 = v31;
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
  }
  else
  {
    v22 = *(_OWORD *)&v43.__r_.__value_.__l.__data_;
    *(_QWORD *)(v46 + 16) = *((_QWORD *)&v43.__r_.__value_.__l + 2);
    *(_OWORD *)v21 = v22;
    memset(&v43, 0, sizeof(v43));
    *(_QWORD *)(v21 + 24) = v44;
    v46 = v21 + 32;
  }
  if ((*(char *)(a1 + 151) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 151))
    {
      __p = 0;
      v39 = 0;
      v40 = 0;
      v32 = *(_QWORD *)(a1 + 496);
      v51 = *(std::string *)(a1 + 128);
      goto LABEL_33;
    }
LABEL_38:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"!out_node.empty()", 17);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  v33 = *(_QWORD *)(a1 + 136);
  if (!v33)
    goto LABEL_38;
  __p = 0;
  v39 = 0;
  v40 = 0;
  v32 = *(_QWORD *)(a1 + 496);
  std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)(a1 + 128), v33);
LABEL_33:
  memset(&v43, 0, sizeof(v43));
  v43.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v43.__r_.__value_.__l.__size_ = v43.__r_.__value_.__r.__words[0];
  v43.__r_.__value_.__r.__words[2] = v43.__r_.__value_.__r.__words[0] + 24;
  v43.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v43.__r_.__value_.__r.__words[2], (__int128 *)&v51, &v52, (std::string *)v43.__r_.__value_.__l.__data_);
  memset(v37, 0, sizeof(v37));
  (*(void (**)(uint64_t, uint64_t *, std::string *, void ***, void **))(*(_QWORD *)v32 + 128))(v32, &v45, &v43, v37, &__p);
  v50 = v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  v37[0] = (void **)&v43;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v37);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  v34 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)__p + 112))(*(_QWORD *)__p, 0);
  v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  __p = &v45;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v35 = v48;
  v48 = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  return v34;
}

void sub_1AD79BB48(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1AD79BB84);
}

float kaldi::quasar::CEInferenceNet::GetUnitOutput(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  float UnitOutput;
  uint64_t v10;
  void *__p;
  void *v13;
  _QWORD *v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a1 + 496);
  v7 = *(int *)(a2 + 16);
  v8 = operator new(0x10uLL);
  v13 = v8 + 2;
  v14 = v8 + 2;
  *v8 = 1;
  v8[1] = v7;
  __p = v8;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)v6 + 56))(&v15, v6, &__p);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v15 + 88))(v15, *(_QWORD *)(a2 + 8), *(unsigned int *)(a2 + 16), 0);
  UnitOutput = kaldi::quasar::CEInferenceNet::GetUnitOutput(a1, &v15, a3);
  v10 = v15;
  v15 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return UnitOutput;
}

void sub_1AD79BC68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::CEInferenceNet::GetComputeEngine(kaldi::quasar::CEInferenceNet *this)
{
  return (uint64_t)this + 496;
}

uint64_t kaldi::quasar::CEInferenceNet::GetConfig(kaldi::quasar::CEInferenceNet *this)
{
  return (uint64_t)this + 104;
}

void kaldi::quasar::CEInferenceNet::ResetHistoryState(kaldi::quasar::CEInferenceNet *this)
{
  uint64_t v1;
  std::string::size_type v2;
  std::string *v3;
  std::string *v4;
  void **p_data;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void ***v12;
  char v13;
  std::string v14;
  __int128 v15;

  *(_QWORD *)&v15 = *MEMORY[0x1E0C80C00];
  if (*((char *)this + 247) < 0)
  {
    v2 = *((_QWORD *)this + 29);
    if (!v2)
      return;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v1 = *((_QWORD *)this + 62);
    v6 = 0;
    v7 = 0;
    v8 = 0;
    std::string::__init_copy_ctor_external(&v14, *((const std::string::value_type **)this + 28), v2);
  }
  else
  {
    if (!*((_BYTE *)this + 247))
      return;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v1 = *((_QWORD *)this + 62);
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v14 = *(std::string *)((char *)this + 224);
  }
  v3 = 0;
  v4 = 0;
  p_data = 0;
  v12 = (void ***)&v3;
  v13 = 0;
  v3 = (std::string *)operator new(0x18uLL);
  v4 = v3;
  p_data = (void **)&v3[1].__r_.__value_.__l.__data_;
  v4 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (__int128 *)&v14, &v15, v3);
  (*(void (**)(uint64_t, uint64_t *, void ***, std::string **, _QWORD))(*(_QWORD *)v1 + 120))(v1, &v9, &v6, &v3, 0);
  v12 = (void ***)&v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  v3 = (std::string *)&v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v3);
  v6 = (void **)&v9;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&v6);
}

void sub_1AD79BE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void ***a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, char a16)
{
  a10 = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  a13 = (void **)&a16;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEInferenceNet::GetExtraOutputFromSharedAddressCachedStates(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::string v20;

  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::vector(a3, 0xAAAAAAAAAAAAAAABLL * ((a1[35] - a1[34]) >> 3));
  v6 = *a2;
  if (a2[1] != *a2)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v20, "");
      v9 = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(a1[34], a1[35], (unsigned __int8 **)(v6 + v7));
      if (v9 != a1[35])
        std::string::operator=(&v20, (const std::string *)(a1[40] + v9 - a1[34]));
      v10 = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(a1[43], a1[44], (unsigned __int8 **)&v20);
      if (v10 != a1[44])
      {
        v11 = v10;
        v12 = a1[43];
        (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(*a2 + v7 + 24) + 16))(&v19);
        v13 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v12) >> 3);
        v14 = *a3;
        v15 = 8 * (int)v13;
        v16 = v19;
        v19 = 0;
        v17 = *(_QWORD *)(v14 + v15);
        *(_QWORD *)(v14 + v15) = v16;
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        v18 = v19;
        v19 = 0;
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        kaldi::quasar::ComputeEngineBufferItf::SetName(*(_QWORD *)(*a3 + 8 * (int)v13), &v20);
      }
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      ++v8;
      v6 = *a2;
      v7 += 32;
    }
    while (v8 < (a2[1] - *a2) >> 5);
  }
}

void sub_1AD79C004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEInferenceNet::GetAndCacheOutput(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t i;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 **String;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 **v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30[34];

  if (a3)
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::resize((uint64_t)a3, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[44] - a1[43]) >> 3));
  v6 = *a2;
  if (a2[1] != *a2)
  {
    for (i = 0; i < (a2[1] - *a2) >> 3; ++i)
    {
      if (a3)
      {
        v8 = a1[43];
        v9 = a1[44];
        String = (unsigned __int8 **)quasar::PTree::getString(*(quasar::PTree **)(v6 + 8 * i));
        v11 = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(v8, v9, String);
        v6 = *a2;
        if (v11 != a1[44])
        {
          v12 = -1431655765 * ((unint64_t)(v11 - a1[43]) >> 3);
          (*(void (**)(__int128 **__return_ptr))(**(_QWORD **)(v6 + 8 * i) + 16))(v30);
          v13 = *a3;
          v14 = 8 * v12;
          v15 = v30[0];
          v30[0] = 0;
          v16 = *(_QWORD *)(v13 + v14);
          *(_QWORD *)(v13 + v14) = v15;
          if (v16)
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          v17 = v30[0];
          v30[0] = 0;
          if (v17)
            (*(void (**)(__int128 *))(*(_QWORD *)v17 + 8))(v17);
          v6 = *a2;
        }
      }
      v18 = a1[40];
      v19 = a1[41];
      v20 = (unsigned __int8 **)quasar::PTree::getString(*(quasar::PTree **)(v6 + 8 * i));
      v21 = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(v18, v19, v20);
      if (v21 != a1[41])
      {
        v22 = v21;
        v23 = (unsigned __int8 *)quasar::PTree::getString(*(quasar::PTree **)(*a2 + 8 * i));
        if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a1 + 4, v23))
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
          std::operator<<[abi:ne180100]<std::char_traits<char>>(v30, "cached_output_input_map.find(output_name) != cached_output_input_map.end()");
          goto LABEL_22;
        }
        v30[0] = (__int128 *)v23;
        v24 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a1 + 4), v23, (uint64_t)&std::piecewise_construct, v30);
        v25 = 0xAAAAAAAAAAAAAAABLL * ((v22 - a1[40]) >> 3);
        v26 = a1[1];
        v27 = 8 * (int)v25;
        v28 = *(_QWORD *)(*a2 + 8 * i);
        *(_QWORD *)(*a2 + 8 * i) = 0;
        v29 = *(_QWORD *)(v26 + v27);
        *(_QWORD *)(v26 + v27) = v28;
        if (v29)
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
        kaldi::quasar::ComputeEngineBufferItf::SetName(*(_QWORD *)(a1[1] + 8 * (int)v25), (const std::string *)(v24 + 40));
      }
      v6 = *a2;
    }
  }
  if (a3 && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[44] - a1[43]) >> 3) != (a3[1] - *a3) >> 3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v30, "out_extras->size() == cfg_.output_extra_tensor_list.size()");
LABEL_22:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v30);
  }
}

void sub_1AD79C2B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

uint64_t kaldi::quasar::CEInferenceNet::MultiIOFeedforward(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t *a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t result;
  void *__p;
  void *v17;
  _QWORD *v18;
  uint64_t v19;

  v12 = *(_QWORD *)(a1 + 496);
  v13 = *(int *)(a2 + 16);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v17 = v14 + 1;
  v18 = v14 + 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)v12 + 56))(&v19, v12, &__p);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v19 + 88))(v19, *(_QWORD *)(a2 + 8), *(unsigned int *)(a2 + 16), 0);
  kaldi::quasar::CEInferenceNet::MultiIOFeedforward(a1, &v19, a3, a4, a5, a6);
  result = v19;
  v19 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

{
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  uint64_t v16;

  v12 = *(_QWORD *)(a1 + 496);
  v13 = kaldi::quasar::CEInferenceNet::Shape::Get((kaldi::quasar::CEInferenceNet::Shape *)(a1 + 504), *(int *)(a2 + 20), *(int *)(a2 + 16));
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v12 + 56))(&v16, v12, v13);
  if (*(int *)(a2 + 20) >= 1)
  {
    v14 = 0;
    do
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v16 + 88))(v16, *(_QWORD *)(a2 + 8) + 4 * *(_DWORD *)(a2 + 24) * v14, *(unsigned int *)(a2 + 16), (*(_DWORD *)(a2 + 16) * v14));
      ++v14;
    }
    while (v14 < *(_DWORD *)(a2 + 20));
  }
  kaldi::quasar::CEInferenceNet::MultiIOFeedforward(a1, &v16, a3, a4, a5, a6);
  result = v16;
  v16 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1AD79C3A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1AD79C4DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::CEInferenceNet::MultiIOFeedforward(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 120))(a1, a2, a3, a4, 0, 0);
}

kaldi::quasar::ComputeEngineBufferItf *kaldi::quasar::CEInferenceNet::MultiIOFeedforward(uint64_t a1, uint64_t a2, _QWORD *a3, int32x2_t *a4, uint64_t *a5, int a6)
{
  kaldi::quasar::ComputeEngineBufferItf *result;
  unsigned int v10;
  kaldi::quasar::ComputeEngineBufferItf *v11;

  v11 = 0;
  kaldi::quasar::CEInferenceNet::MultiIOFeedforward(a1, a2, a3, (uint64_t *)&v11, a5, a6);
  if (*(_BYTE *)(a1 + 485))
    kaldi::quasar::CEInferenceNet::ReshapeVectorOutputBuffToMatrix(&v11);
  v10 = *(_DWORD *)(a2 + 20);
  kaldi::quasar::CEInferenceNet::CopyToMatrix(a1, &v11, &v10, a4);
  result = v11;
  if (v11)
    return (kaldi::quasar::ComputeEngineBufferItf *)(*(uint64_t (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v11 + 8))(v11);
  return result;
}

void sub_1AD79C5A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::CEInferenceNet::MultiIOFeedforward(uint64_t a1, uint64_t a2, uint64_t **a3, int32x2_t *a4, uint64_t *a5, int a6)
{
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  void **v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  void ***v23;
  char *v24;
  void **v25;
  _QWORD *v26;
  _QWORD *v27;
  void **v28;
  int64x2_t v29;
  char *v30;
  void **v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int32x2_t *v37;
  uint64_t v38;
  kaldi::quasar::ComputeEngineBufferItf *v41;
  int64x2_t v42;
  _QWORD v43[2];
  int64x2_t *v44;
  int64x2_t v45;
  char *v46;
  _QWORD *v47;
  void ***v48;

  if (*(_DWORD *)(a2 + 20))
  {
    v42 = 0uLL;
    v43[0] = 0;
    v10 = *a3;
    v11 = a3[1];
    if (*a3 != v11)
    {
      do
      {
        v12 = *(_QWORD *)(a1 + 496);
        v13 = kaldi::quasar::CEInferenceNet::Shape::Get((kaldi::quasar::CEInferenceNet::Shape *)(a1 + 504), *(int *)(*v10 + 20), *(int *)(*v10 + 16));
        (*(void (**)(void ****__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v12 + 56))(&v48, v12, v13);
        v14 = *v10;
        if (*(int *)(*v10 + 20) >= 1)
        {
          v15 = 0;
          do
          {
            ((void (*)(void ***, uint64_t, _QWORD, _QWORD))(*v48)[11])(v48, *(_QWORD *)(v14 + 8) + 4 * *(_DWORD *)(v14 + 24) * v15, *(unsigned int *)(v14 + 16), (*(_DWORD *)(v14 + 16) * v15));
            ++v15;
            v14 = *v10;
          }
          while (v15 < *(_DWORD *)(*v10 + 20));
        }
        v16 = v42.i64[1];
        if (v42.i64[1] >= v43[0])
        {
          v19 = (v42.i64[1] - v42.i64[0]) >> 3;
          if ((unint64_t)(v19 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v20 = (v43[0] - v42.i64[0]) >> 2;
          if (v20 <= v19 + 1)
            v20 = v19 + 1;
          if (v43[0] - v42.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL)
            v21 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v21 = v20;
          v47 = v43;
          if (v21)
            v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v43, v21);
          else
            v22 = 0;
          v23 = (void ***)&v22[8 * v19];
          v24 = &v22[8 * v21];
          v46 = v24;
          v25 = (void **)v48;
          v48 = 0;
          *v23 = v25;
          v18 = v23 + 1;
          v45.i64[1] = (uint64_t)(v23 + 1);
          v26 = (_QWORD *)v42.i64[1];
          v27 = (_QWORD *)v42.i64[0];
          if (v42.i64[1] == v42.i64[0])
          {
            v29 = vdupq_n_s64(v42.u64[1]);
          }
          else
          {
            do
            {
              v28 = (void **)*--v26;
              *v26 = 0;
              *--v23 = v28;
            }
            while (v26 != v27);
            v29 = v42;
            v18 = (_QWORD *)v45.i64[1];
            v24 = v46;
          }
          v42.i64[0] = (uint64_t)v23;
          v42.i64[1] = (uint64_t)v18;
          v45 = v29;
          v30 = (char *)v43[0];
          v43[0] = v24;
          v46 = v30;
          v44 = (int64x2_t *)v29.i64[0];
          std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v44);
        }
        else
        {
          v17 = (void **)v48;
          v48 = 0;
          *(_QWORD *)v42.i64[1] = v17;
          v18 = (_QWORD *)(v16 + 8);
        }
        v42.i64[1] = (uint64_t)v18;
        v31 = (void **)v48;
        v48 = 0;
        if (v31)
          (*((void (**)(void **))*v31 + 1))(v31);
        ++v10;
      }
      while (v10 != v11);
    }
    v41 = 0;
    v44 = 0;
    v45 = 0uLL;
    if (a5 && (v32 = a5[1] - *a5) != 0)
    {
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::resize((uint64_t)&v44, v32 >> 3);
      v33 = 1;
    }
    else
    {
      v33 = 0;
    }
    kaldi::quasar::CEInferenceNet::MultiIOFeedforward(a1, a2, &v42, (uint64_t *)&v41, (uint64_t *)&v44, a6);
    if (*(_BYTE *)(a1 + 485))
      kaldi::quasar::CEInferenceNet::ReshapeVectorOutputBuffToMatrix(&v41);
    LODWORD(v48) = *(_DWORD *)(a2 + 20);
    kaldi::quasar::CEInferenceNet::CopyToMatrix(a1, &v41, (unsigned int *)&v48, a4);
    if (v33)
    {
      v34 = *a5;
      if (a5[1] != *a5)
      {
        v35 = 0;
        v36 = 0;
        do
        {
          v37 = *(int32x2_t **)(v34 + 8 * v36);
          LODWORD(v48) = *(_DWORD *)(a2 + 20);
          kaldi::quasar::CEInferenceNet::CopyToMatrix(a1, &v44->i64[v35], (unsigned int *)&v48, v37);
          ++v36;
          v34 = *a5;
          ++v35;
        }
        while (v36 < (a5[1] - *a5) >> 3);
      }
    }
    v48 = (void ***)&v44;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
    if (v41)
      (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v41 + 8))(v41);
    v44 = &v42;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
  }
  else
  {
    v38 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 176))(a1, 0);
    kaldi::CuMatrix<float>::Resize(a4, 0, v38, 0, 0);
  }
}

void sub_1AD79C920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  *(_QWORD *)(v17 - 88) = &a17;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 88));
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  *(_QWORD *)(v17 - 88) = &a13;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 88));
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::resize(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD **)(a1 + 8);
  v4 = ((uint64_t)v3 - *(_QWORD *)a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *(_QWORD *)a1 + 8 * a2;
      while (v3 != (_QWORD *)v5)
      {
        v7 = *--v3;
        v6 = v7;
        *v3 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      *(_QWORD *)(a1 + 8) = v5;
    }
  }
  else
  {
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__append((char **)a1, a2 - v4);
  }
}

uint64_t kaldi::quasar::CEInferenceNet::IsRnn(kaldi::quasar::CEInferenceNet *this)
{
  return *((unsigned __int8 *)this + 481);
}

uint64_t kaldi::quasar::CEInferenceNet::IsStreamingWithCache(kaldi::quasar::CEInferenceNet *this)
{
  return *((unsigned __int8 *)this + 480);
}

BOOL kaldi::quasar::CEInferenceNet::IsStreamingWithMasking(kaldi::quasar::CEInferenceNet *this)
{
  uint64_t v1;

  if (*((char *)this + 271) < 0)
    v1 = *((_QWORD *)this + 32);
  else
    v1 = *((unsigned __int8 *)this + 271);
  return v1 != 0;
}

uint64_t kaldi::quasar::CEInferenceNet::IsFofeNet(kaldi::quasar::CEInferenceNet *this)
{
  return *((unsigned __int8 *)this + 482);
}

uint64_t kaldi::quasar::CEInferenceNet::InputDim(kaldi::quasar::CEInferenceNet *this)
{
  return *((unsigned int *)this + 104);
}

uint64_t kaldi::quasar::CEInferenceNet::OutputDim(kaldi::quasar::CEInferenceNet *this, int a2)
{
  uint64_t v2;

  v2 = 420;
  if (a2)
    v2 = 424;
  return *(unsigned int *)((char *)this + v2);
}

BOOL kaldi::quasar::CEInferenceNet::HasMultiOutputs(kaldi::quasar::CEInferenceNet *this)
{
  return *((_QWORD *)this + 43) != *((_QWORD *)this + 44);
}

unint64_t kaldi::quasar::CEInferenceNet::SetMaskingsForInputs(kaldi::quasar::CEInferenceNet *this, int a2, int a3)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *__p;
  void *v15;
  _QWORD *v16;
  uint64_t v17;

  LODWORD(v4) = a2;
  result = (*(uint64_t (**)(kaldi::quasar::CEInferenceNet *))(*(_QWORD *)this + 80))(this);
  if ((_DWORD)result)
  {
    v7 = *((_QWORD *)this + 62);
    if (v7)
    {
      if (*((_QWORD *)this + 9))
      {
        v4 = (int)v4;
      }
      else
      {
        v4 = (int)v4;
        if (*((_BYTE *)this + 484))
        {
          v8 = operator new(0x10uLL);
          v15 = v8 + 2;
          v16 = v8 + 2;
          *v8 = 1;
          v8[1] = (int)v4;
          __p = v8;
          (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)v7 + 64))(&v17, v7, &__p);
        }
        else
        {
          v9 = operator new(0x10uLL);
          v15 = v9 + 2;
          v16 = v9 + 2;
          *v9 = 1;
          v9[1] = (int)v4;
          __p = v9;
          (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)v7 + 56))(&v17, v7, &__p);
        }
        v10 = v17;
        v17 = 0;
        v11 = *((_QWORD *)this + 9);
        *((_QWORD *)this + 9) = v10;
        if (v11)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
          v12 = v17;
          v17 = 0;
          if (v12)
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        }
        if (__p)
        {
          v15 = __p;
          operator delete(__p);
        }
      }
      if (kaldi::quasar::ComputeEngineBufferItf::GetSize(*((kaldi::quasar::ComputeEngineBufferItf **)this + 9)) != v4)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&__p, "maskings_->GetSize() == input_frames_length");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
      if (kaldi::quasar::ComputeEngineBufferItf::GetSize(*((kaldi::quasar::ComputeEngineBufferItf **)this + 9)) == a3)
      {
        v13 = 0;
      }
      else
      {
        v13 = 0;
        do
          (*(void (**)(_QWORD, uint64_t, unint64_t))(**((_QWORD **)this + 9) + 96))(*((_QWORD *)this + 9), 1, v13++);
        while (v13 < kaldi::quasar::ComputeEngineBufferItf::GetSize(*((kaldi::quasar::ComputeEngineBufferItf **)this + 9))
                    - a3);
      }
      while (1)
      {
        result = kaldi::quasar::ComputeEngineBufferItf::GetSize(*((kaldi::quasar::ComputeEngineBufferItf **)this + 9));
        if (v13 >= result)
          break;
        (*(void (**)(_QWORD, _QWORD, unint64_t))(**((_QWORD **)this + 9) + 96))(*((_QWORD *)this + 9), 0, v13++);
      }
    }
  }
  return result;
}

void sub_1AD79CC68(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void kaldi::quasar::CEInferenceNet::ResetCachedStates(kaldi::quasar::CEInferenceNet *this)
{
  _QWORD v2[34];

  if (*((_BYTE *)this + 480))
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Resetting for streaming cached stateful tensors", 47);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v2);
    }
    kaldi::quasar::CEInferenceNet::InitialCachedStatesInit(this);
  }
}

void sub_1AD79CCE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::InferenceNetItf::FeedforwardSimple(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 96))(a1, a2, a3, 0);
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 104))(a1, a2, a3, 0);
}

uint64_t kaldi::InferenceNetItf::MultiIOFeedforwardSimple(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
}

uint64_t kaldi::InferenceNetItf::OutputDim(kaldi::InferenceNetItf *this)
{
  return (*(uint64_t (**)(kaldi::InferenceNetItf *, _QWORD))(*(_QWORD *)this + 176))(this, 0);
}

kaldi::quasar::CEInferenceNetConfig *kaldi::quasar::CEInferenceNetConfig::CEInferenceNetConfig(kaldi::quasar::CEInferenceNetConfig *this)
{
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_QWORD *)this + 38) = 0;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 80) = -1;
  *((_QWORD *)this + 39) = -1;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 41, "R,C");
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 44) = 0;
  *(_QWORD *)((char *)this + 374) = 0;
  return this;
}

void sub_1AD79CDF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;

  va_start(va, a2);
  v4 = *(void **)(v2 + 288);
  if (v4)
  {
    *(_QWORD *)(v2 + 296) = v4;
    operator delete(v4);
  }
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 167) < 0)
    operator delete(*(void **)(v2 + 144));
  if (*(char *)(v2 + 143) < 0)
    operator delete(*(void **)(v2 + 120));
  if (*(char *)(v2 + 119) < 0)
    operator delete(*(void **)(v2 + 96));
  if (*(char *)(v2 + 95) < 0)
    operator delete(*(void **)(v2 + 72));
  if (*(char *)(v2 + 71) < 0)
    operator delete(*(void **)(v2 + 48));
  if (*(char *)(v2 + 47) < 0)
    operator delete(*(void **)(v2 + 24));
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEInferenceNetConfig::~CEInferenceNetConfig(kaldi::quasar::CEInferenceNetConfig *this)
{
  uint64_t v2;
  void *v3;
  void **v4;

  v2 = *((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 375) < 0)
    operator delete(*((void **)this + 44));
  if (*((char *)this + 351) < 0)
    operator delete(*((void **)this + 41));
  v3 = (void *)*((_QWORD *)this + 36);
  if (v3)
  {
    *((_QWORD *)this + 37) = v3;
    operator delete(v3);
  }
  v4 = (void **)((char *)this + 264);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 240);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 216);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 192);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 168);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 167) < 0)
    operator delete(*((void **)this + 18));
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::pair<std::string,std::string>>::__assign_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(std::vector<std::pair<std::string, std::string>> *this, std::string *__str, __int128 *a3, unint64_t a4)
{
  std::__compressed_pair<std::pair<std::string, std::string> *, std::allocator<std::pair<std::string, std::string>>> *p_end_cap;
  std::vector<std::pair<std::string, std::string>>::pointer begin;
  unint64_t v10;
  unint64_t v11;
  std::pair<std::string, std::string> *v12;
  std::string *v13;
  std::pair<std::string, std::string> *v14;
  std::pair<std::string, std::string> *v15;
  std::vector<std::pair<std::string, std::string>>::pointer end;
  char v17;
  char v18;

  p_end_cap = &this->__end_cap_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 4) < a4)
  {
    std::vector<std::pair<std::string,std::string>>::__vdeallocate(this);
    if (a4 > 0x555555555555555)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 4);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 4) >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v10;
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__vallocate[abi:ne180100](this, v11);
    v12 = (std::pair<std::string, std::string> *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((uint64_t)p_end_cap, (__int128 *)__str, a3, &this->__end_->first);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 4) < a4)
  {
    v13 = (std::string *)((char *)__str + 16 * (((char *)this->__end_ - (char *)begin) >> 4));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,std::string> *,std::pair<std::string,std::string> *,std::pair<std::string,std::string> *>((int)&v17, __str, v13, &begin->first);
    v12 = (std::pair<std::string, std::string> *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((uint64_t)p_end_cap, (__int128 *)v13, a3, &this->__end_->first);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,std::string> *,std::pair<std::string,std::string> *,std::pair<std::string,std::string> *>((int)&v18, __str, (std::string *)a3, &begin->first);
  v15 = v14;
  end = this->__end_;
  if (end != v14)
  {
    do
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)p_end_cap, (uint64_t)--end);
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_1AD79D1D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1AD79D1DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,std::string>>::__vdeallocate(std::vector<std::pair<std::string, std::string>> *this)
{
  std::pair<std::string, std::string> *begin;
  std::vector<std::pair<std::string, std::string>>::pointer end;
  std::vector<std::pair<std::string, std::string>>::pointer v4;

  begin = this->__begin_;
  if (this->__begin_)
  {
    end = this->__end_;
    v4 = this->__begin_;
    if (end != begin)
    {
      do
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)&this->__end_cap_, (uint64_t)--end);
      while (end != begin);
      v4 = this->__begin_;
    }
    this->__end_ = begin;
    operator delete(v4);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  _QWORD v8[3];
  char v9;
  std::string *v10;
  std::string *v11;

  v4 = this;
  v10 = this;
  v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::pair<std::string,std::string>::pair[abi:ne180100](v4, v6);
      v6 += 3;
      v4 = v11 + 2;
      v11 += 2;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1AD79D2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_1AD79D368(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 48;
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,std::string> *,std::pair<std::string,std::string> *,std::pair<std::string,std::string> *>(int a1, std::string *__str, std::string *a3, std::string *this)
{
  std::string *v5;
  std::string *v6;

  v5 = __str;
  if (__str == a3)
    return __str;
  v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    std::string::operator=(this + 1, v5 + 1);
    this += 2;
    v5 += 2;
  }
  while (v5 != v6);
  return v6;
}

uint64_t std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3;
  char v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *((_BYTE *)a3 + 23);
    if (v5 >= 0)
      v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    else
      v6 = a3[1];
    if (v5 >= 0)
      v7 = (unsigned __int8 *)a3;
    else
      v7 = *a3;
    do
    {
      v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0)
        v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      else
        v9 = *(unsigned __int8 **)(v3 + 8);
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(_QWORD *)(v3 + 8)))
            return v3;
        }
        else
        {
          if (!*(_BYTE *)(v3 + 23))
            return v3;
          v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10)
              return v3;
          }
        }
      }
      v3 += 24;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

uint64_t std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>,std::reverse_iterator<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>*>,std::reverse_iterator<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>*>,std::reverse_iterator<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>,std::reverse_iterator<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>*>,std::reverse_iterator<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>*>,std::reverse_iterator<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>,std::reverse_iterator<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>,std::reverse_iterator<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,std::reverse_iterator<quasar::TextTokenizer::Token*>>::operator()[abi:ne180100](a1);
  return a1;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1AD79D720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
  return v13;
}

void sub_1AD79D910(_Unwind_Exception *a1, std::__split_buffer<std::wstring> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

std::string *std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(std::vector<std::string> *a1, std::string *a2, std::string *a3, __int128 *a4, uint64_t a5)
{
  std::string *v5;
  std::allocator<std::string> *p_end_cap;
  std::string *v10;
  std::string *value;
  std::string *v12;
  std::vector<std::string>::pointer begin;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::string *v19;
  uint64_t v20;
  __int128 *v21;
  std::__split_buffer<std::string> __v;

  v5 = a2;
  if (a5 >= 1)
  {
    value = a1->__end_cap_.__value_;
    p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
    v10 = value;
    v12 = (std::string *)*((_QWORD *)p_end_cap - 1);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v12) >> 3)) >= a5)
    {
      v20 = (char *)v12 - (char *)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)a2) >> 3)) >= a5)
      {
        v21 = (__int128 *)&a3[a5];
      }
      else
      {
        v21 = (__int128 *)(&a3->__r_.__value_.__l.__data_ + (((char *)v12 - (char *)a2) >> 3));
        a1->__end_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, v21, a4, *((std::string **)p_end_cap - 1));
        if (v20 < 1)
          return v5;
      }
      std::vector<std::string>::__move_range(a1, v5, v12, &v5[a5]);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(a3, (std::string *)v21, v5);
    }
    else
    {
      begin = a1->__begin_;
      v14 = a5 - 0x5555555555555555 * (((char *)v12 - (char *)a1->__begin_) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)begin) >> 3);
      v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)begin) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x555555555555555)
        v18 = 0xAAAAAAAAAAAAAAALL;
      else
        v18 = v17;
      __v.__end_cap_.__value_ = p_end_cap;
      if (v18)
        v19 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)p_end_cap, v18);
      else
        v19 = 0;
      __v.__first_ = v19;
      __v.__begin_ = v19 + v15;
      __v.__end_ = __v.__begin_;
      __v.__end_cap_.__value_ = &v19[v18];
      std::__split_buffer<std::string>::__construct_at_end_with_size<std::__wrap_iter<std::string*>>((uint64_t)&__v, (__int128 *)a3, a5);
      v5 = std::vector<std::string>::__swap_out_circular_buffer(a1, &__v, v5);
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
    }
  }
  return v5;
}

void sub_1AD79DC2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__split_buffer<std::wstring> *a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void std::vector<std::string>::__move_range(std::vector<std::string> *this, std::vector<std::string>::pointer __from_s, std::vector<std::string>::pointer __from_e, std::vector<std::string>::pointer __to)
{
  std::vector<std::string>::pointer end;
  char *v7;
  std::vector<std::string>::pointer v8;
  unint64_t v9;
  __int128 v10;
  char v11;

  end = this->__end_;
  v7 = (char *)__from_s + (char *)end - (char *)__to;
  v8 = end;
  if (v7 < (char *)__from_e)
  {
    v9 = (unint64_t)v7;
    v8 = this->__end_;
    do
    {
      v10 = *(_OWORD *)v9;
      v8->__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 16);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
      ++v8;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)v9 = 0;
      v9 += 24;
    }
    while (v9 < (unint64_t)__from_e);
  }
  this->__end_ = v8;
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v11, (uint64_t)__from_s, (uint64_t)v7, (uint64_t)end);
}

void std::__split_buffer<std::string>::__construct_at_end_with_size<std::__wrap_iter<std::string*>>(uint64_t a1, __int128 *a2, uint64_t a3)
{
  std::string *v4;
  std::string *v6;
  uint64_t v7;
  __int128 v8;

  v4 = *(std::string **)(a1 + 16);
  if (a3)
  {
    v6 = &v4[a3];
    v7 = 24 * a3;
    do
    {
      if (*((char *)a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
      }
      else
      {
        v8 = *a2;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v8;
      }
      ++v4;
      a2 = (__int128 *)((char *)a2 + 24);
      v7 -= 24;
    }
    while (v7);
    v4 = v6;
  }
  *(_QWORD *)(a1 + 16) = v4;
}

void sub_1AD79DD40(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

std::vector<std::string>::pointer std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v, std::vector<std::string>::pointer __p)
{
  std::string *begin;
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *v8;
  std::string *v9;
  std::string *end;
  std::string *value;

  begin = __v->__begin_;
  p_end_cap = &this->__end_cap_;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)__p, (uint64_t)__p, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)begin, (uint64_t)begin);
  __v->__begin_ = v8;
  __v->__end_ = (std::__split_buffer<std::string>::pointer)std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (__int128 *)__p, (__int128 *)this->__end_, (uint64_t)__v->__end_);
  v9 = this->__begin_;
  this->__begin_ = __v->__begin_;
  __v->__begin_ = v9;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  if (a3 != a2)
  {
    v6 = a3;
    do
    {
      v7 = a4 - 24;
      if (*(char *)(a4 - 1) < 0)
        operator delete(*(void **)v7);
      v8 = *(_OWORD *)(v6 - 24);
      *(_QWORD *)(v7 + 16) = *(_QWORD *)(v6 - 8);
      *(_OWORD *)v7 = v8;
      *(_BYTE *)(v6 - 1) = 0;
      *(_BYTE *)(v6 - 24) = 0;
      a4 = v7;
      v6 -= 24;
    }
    while (v6 != a2);
  }
  return a3;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 v5;
  _QWORD v7[3];
  char v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a4;
  v10 = a4;
  v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      v5 = *a2;
      *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v4 = v5;
      v4 += 24;
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *(_QWORD *)a2 = 0;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    while (a2 != a3);
    v10 = v4;
  }
  v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
  return v13;
}

void sub_1AD79E004(_Unwind_Exception *a1, std::__split_buffer<std::wstring> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&a10);
  _Unwind_Resume(a1);
}

uint64_t *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> *,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> *,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      v6 = *v4;
      *v4 = 0;
      v7 = *a3;
      *a3 = v6;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      ++v4;
      ++a3;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v1)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v1);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  char *v23;
  uint64_t v24;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    v24 = v4;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    v23 = v16;
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    *((_QWORD *)&v22 + 1) = v17;
    if (v7 != v8)
    {
      do
      {
        v18 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *(_QWORD *)v7 = 0;
        *((_QWORD *)v15 - 1) = v18;
        v15 -= 8;
      }
      while (v7 != v8);
      v17 = (char *)*((_QWORD *)&v22 + 1);
      v16 = v23;
    }
    v19 = *(_OWORD *)a1;
    *a1 = v15;
    a1[1] = v17;
    v22 = v19;
    v20 = a1[2];
    a1[2] = v16;
    v23 = v20;
    v21 = v19;
    std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v21);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1AD79E4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1AD79E59C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

_QWORD *std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1AD79E660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::PersonalizedLmData::PersonalizedLmData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int *v11;
  uint64_t v12;
  int v14;
  int v15;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *__p[2];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  char v44;
  uint64_t v45;

  if (*(char *)(a3 + 23) < 0)
  {
    if (*(_QWORD *)(a3 + 8))
    {
      std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
      goto LABEL_7;
    }
  }
  else if (*(_BYTE *)(a3 + 23))
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    *(_QWORD *)&v24 = *(_QWORD *)(a3 + 16);
    goto LABEL_7;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "lm-personalize.data");
LABEL_7:
  v6 = *a4;
  *a4 = 0;
  v45 = v6;
  std::string::basic_string[abi:ne180100]<0>(&v43, "");
  quasar::LmData::LmData();
  if (v44 < 0)
    operator delete(v43);
  v7 = v45;
  v45 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (SBYTE7(v24) < 0)
    operator delete(__p[0]);
  *(_QWORD *)a1 = &off_1E5D36AC0;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_DWORD *)(a1 + 1080) = 1065353216;
  *(_BYTE *)(a1 + 1088) = 0;
  *(_WORD *)(a1 + 1100) = 0;
  *(_QWORD *)(a1 + 1092) = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  kaldi::SplitStringToVector((const std::string *)(a1 + 848), ",", 1, (uint64_t)&v40);
  v8 = v40;
  v9 = v41;
  while (v8 != v9)
  {
    if (*(char *)(v8 + 23) < 0)
    {
      v12 = *(_QWORD *)(v8 + 8);
      if (v12 == 5)
      {
        if (**(_DWORD **)v8 == 1701869940 && *(_BYTE *)(*(_QWORD *)v8 + 4) == 100)
          goto LABEL_41;
        v12 = *(_QWORD *)(v8 + 8);
      }
      else if (v12 == 8 && **(_QWORD **)v8 == 0x6465746174636964)
      {
        goto LABEL_51;
      }
      if (v12 != 7)
        goto LABEL_43;
      v11 = *(int **)v8;
    }
    else
    {
      v10 = *(unsigned __int8 *)(v8 + 23);
      if (v10 == 5)
      {
        if (*(_DWORD *)v8 != 1701869940 || *(_BYTE *)(v8 + 4) != 100)
        {
LABEL_43:
          if (quasar::gLogLevel >= 2)
          {
            v38 = 0u;
            v39 = 0u;
            v36 = 0u;
            v37 = 0u;
            v34 = 0u;
            v35 = 0u;
            v32 = 0u;
            v33 = 0u;
            v30 = 0u;
            v31 = 0u;
            v28 = 0u;
            v29 = 0u;
            v26 = 0u;
            v27 = 0u;
            v24 = 0u;
            v25 = 0u;
            *(_OWORD *)__p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Undefined filter document type: ", 32);
            v19 = *(char *)(v8 + 23);
            if (v19 >= 0)
              v20 = v8;
            else
              v20 = *(_QWORD *)v8;
            if (v19 >= 0)
              v21 = *(unsigned __int8 *)(v8 + 23);
            else
              v21 = *(_QWORD *)(v8 + 8);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
            quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
          }
          goto LABEL_52;
        }
LABEL_41:
        LODWORD(__p[0]) = 2;
        std::__hash_table<quasar::PersonalizedLmData::DocumentType,std::hash<quasar::PersonalizedLmData::DocumentType>,std::equal_to<quasar::PersonalizedLmData::DocumentType>,std::allocator<quasar::PersonalizedLmData::DocumentType>>::__emplace_unique_key_args<quasar::PersonalizedLmData::DocumentType,quasar::PersonalizedLmData::DocumentType>(a1 + 1048, (unsigned int *)__p, __p);
        goto LABEL_52;
      }
      if (v10 == 8)
      {
        if (*(_QWORD *)v8 != 0x6465746174636964)
          goto LABEL_43;
LABEL_51:
        LODWORD(__p[0]) = 1;
        std::__hash_table<quasar::PersonalizedLmData::DocumentType,std::hash<quasar::PersonalizedLmData::DocumentType>,std::equal_to<quasar::PersonalizedLmData::DocumentType>,std::allocator<quasar::PersonalizedLmData::DocumentType>>::__emplace_unique_key_args<quasar::PersonalizedLmData::DocumentType,quasar::PersonalizedLmData::DocumentType>(a1 + 1048, (unsigned int *)__p, __p);
        goto LABEL_52;
      }
      v11 = (int *)v8;
      if (v10 != 7)
        goto LABEL_43;
    }
    v14 = *v11;
    v15 = *(int *)((char *)v11 + 3);
    if (v14 != 1852534389 || v15 != 1853321070)
      goto LABEL_43;
    LODWORD(__p[0]) = 0;
    std::__hash_table<quasar::PersonalizedLmData::DocumentType,std::hash<quasar::PersonalizedLmData::DocumentType>,std::equal_to<quasar::PersonalizedLmData::DocumentType>,std::allocator<quasar::PersonalizedLmData::DocumentType>>::__emplace_unique_key_args<quasar::PersonalizedLmData::DocumentType,quasar::PersonalizedLmData::DocumentType>(a1 + 1048, (unsigned int *)__p, __p);
LABEL_52:
    v8 += 24;
  }
  __p[0] = &v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return a1;
}

void sub_1AD79E9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  quasar::LmData *v14;
  uint64_t v15;
  uint64_t v16;

  __p = (void *)(v16 - 144);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v15);
  quasar::LmData::~LmData(v14);
  _Unwind_Resume(a1);
}

uint64_t quasar::PersonalizedLmData::addSentence(uint64_t a1, unsigned int *a2, std::string *a3, uint64_t a4, uint64_t a5, int a6, _DWORD *a7)
{
  unsigned int v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::string::size_type size;
  uint64_t v26;
  unsigned int v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type v31;
  std::string *v32;
  uint64_t v33;
  _OWORD *v34;
  __int128 v35;
  std::string v37;
  std::string *__str;
  std::string *v39;
  uint64_t v40;
  void *__p[2];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  std::string v58;
  unsigned int v59;
  std::string v60;

  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v60 = *(std::string *)a4;
  v59 = 1;
  if (a6)
  {
    if (*(char *)(a4 + 23) < 0)
      std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
    else
      v58 = *(std::string *)a4;
    quasar::LmData::parseCountPhrase(&v58, (uint64_t)&v60, (int *)&v59);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
  }
  v14 = *a2;
  if (!*(_BYTE *)(a1 + 996))
    goto LABEL_41;
  if (quasar::gLogLevel >= 6)
  {
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"RECEIVED ", 9);
    v16 = *(char *)(a4 + 23);
    if (v16 >= 0)
      v17 = a4;
    else
      v17 = *(_QWORD *)a4;
    if (v16 >= 0)
      v18 = *(unsigned __int8 *)(a4 + 23);
    else
      v18 = *(_QWORD *)(a4 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
  }
  v19 = *(unsigned __int8 *)(a4 + 23);
  if ((v19 & 0x80u) != 0)
    v19 = *(_QWORD *)(a4 + 8);
  if (!v19 || *a2 != 3 && (v20 = *(unsigned int *)(a1 + 616), (_DWORD)v20) && v19 > v20)
  {
    if (quasar::gLogLevel >= 6)
    {
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Reject due to sentence length", 29);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
    }
LABEL_41:
    v24 = 0;
    *(_DWORD *)(a1 + 60 * v14 + 116) += v59;
    goto LABEL_76;
  }
  if ((a5 & 1) == 0)
  {
    if (!*(_BYTE *)(a1 + 1088))
      quasar::LmData::sanitize(a1, (uint64_t)&v60);
    quasar::trim(&v60);
    size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v60.__r_.__value_.__l.__size_;
    if (!size)
      goto LABEL_41;
    v26 = *(_QWORD *)(a1 + 872);
    if (v26)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26);
      (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(a1 + 872) + 16))(*(_QWORD *)(a1 + 872), &v60);
      (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 872) + 24))(__p);
      if (std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*(_QWORD *)(a1 + 360), *(_QWORD *)(a1 + 368), (unsigned __int8 **)__p) == *(_QWORD *)(a1 + 368))
      {
        *(_DWORD *)(a1 + 60 * v14 + 116) += v59;
        if (SBYTE7(v42) < 0)
          operator delete(__p[0]);
        v24 = 0;
        goto LABEL_76;
      }
      if (SBYTE7(v42) < 0)
        operator delete(__p[0]);
    }
  }
  __str = 0;
  v39 = 0;
  v40 = 0;
  v21 = quasar::LmData::tokenizeSentence(a1, (uint64_t)&v60, (uint64_t *)&__str);
  if ((v21 & 1) == 0)
  {
LABEL_74:
    v24 = 0;
    *(_DWORD *)(a1 + 60 * v14 + 116) += v59;
    goto LABEL_75;
  }
  v22 = *(unsigned int *)(a1 + 580);
  if ((_DWORD)v22)
  {
    v23 = *(unsigned int *)(a1 + 1092);
    if (v23 + (((char *)v39 - (char *)__str) >> 5) > v22)
    {
      v24 = 0;
      *(_DWORD *)(a1 + 60 * v14 + 116) += v59;
      *(_BYTE *)(a1 + 996) = 0;
      goto LABEL_75;
    }
    *(_DWORD *)(a1 + 1092) = v23 + ((unint64_t)((char *)v39 - (char *)__str) >> 5);
  }
  v27 = *a2;
  if (*a2 == 3)
  {
    v28 = __str;
    goto LABEL_53;
  }
  v29 = *(unsigned int *)(a1 + 620);
  v28 = __str;
  if ((_DWORD)v29 && __str != v39)
  {
    v30 = __str;
    while (1)
    {
      v31 = SHIBYTE(v30->__r_.__value_.__r.__words[2]) < 0
          ? v30->__r_.__value_.__l.__size_
          : HIBYTE(v30->__r_.__value_.__r.__words[2]);
      if (v31 > v29)
        break;
      v30 = (std::string *)((char *)v30 + 32);
      if (v30 == v39)
        goto LABEL_53;
    }
    if (quasar::gLogLevel >= 6)
    {
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Reject due to token length", 26);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
    }
    goto LABEL_74;
  }
LABEL_53:
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v42 = 0;
  v32 = v39;
  if (v28 == v39)
    goto LABEL_68;
  do
  {
    memset(&v37, 0, sizeof(v37));
    if (*(_BYTE *)(a1 + 1088))
    {
      std::string::operator=(&v37, v28);
    }
    else
    {
      v33 = quasar::QsrText::SingletonInstance((quasar::QsrText *)v21);
      v21 = quasar::QsrText::encodeTokenQsrTextWithMetadata(v33, v28, &v37);
      if (!(_DWORD)v21)
        goto LABEL_64;
    }
    v34 = __p[1];
    if (__p[1] >= (void *)v42)
    {
      v21 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)__p, (__int128 *)&v37);
    }
    else
    {
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p[1], v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
      }
      else
      {
        v35 = *(_OWORD *)&v37.__r_.__value_.__l.__data_;
        *((_QWORD *)__p[1] + 2) = *((_QWORD *)&v37.__r_.__value_.__l + 2);
        *v34 = v35;
      }
      v21 = (uint64_t)v34 + 24;
    }
    __p[1] = (void *)v21;
LABEL_64:
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    v28 = (std::string *)((char *)v28 + 32);
  }
  while (v28 != v32);
  v27 = *a2;
LABEL_68:
  v24 = quasar::LmData::addTokenizedSentence(a1, v27, a3, (uint64_t)__p, (_DWORD *)(a1 + 60 * v14 + 108), a5, v59, a7);
  v37.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
LABEL_75:
  __p[0] = &__str;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_76:
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  return v24;
}

void sub_1AD79EF9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char *a18, uint64_t a19)
{
  uint64_t v19;

  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&a18);
  a18 = &a15;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  if (*(char *)(v19 - 89) < 0)
    operator delete(*(void **)(v19 - 112));
  _Unwind_Resume(a1);
}

uint64_t quasar::QsrText::SingletonInstance(quasar::QsrText *this)
{
  unsigned __int8 v1;
  quasar::QsrText *v3;

  if ((v1 & 1) == 0
  {
    v3 = (quasar::QsrText *)operator new();
    quasar::QsrText::QsrText(v3);
    quasar::QsrText::SingletonInstance(void)::singletonInstance = (uint64_t)v3;
  }
  return quasar::QsrText::SingletonInstance(void)::singletonInstance;
}

void sub_1AD79F0D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10A0C408C7BA9F0);
  _Unwind_Resume(a1);
}

void quasar::PersonalizedLmData::addDocument(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int EstimatedNumTokens;
  unsigned int v13;
  uint64_t v14;
  uint64_t i;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  std::string *v22;
  std::string *v23;
  int v24;
  uint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  size_t v28;
  std::string *v29;
  const void *v30;
  std::string *v31;
  std::string::size_type size;
  std::string *v33;
  __int128 v34;
  int v35;
  _DWORD *v36;
  _DWORD *v37;
  std::string v38;
  std::string v39;
  int v40;
  std::string *v41;
  std::string *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *__p[2];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _DWORD v63[5];

  v63[0] = quasar::LmData::hash((_QWORD *)a1, a2, 0);
  v8 = v63[0];
  if (!*(_BYTE *)(a1 + 996))
    goto LABEL_13;
  if (std::__hash_table<quasar::PersonalizedLmData::DocumentType,std::hash<quasar::PersonalizedLmData::DocumentType>,std::equal_to<quasar::PersonalizedLmData::DocumentType>,std::allocator<quasar::PersonalizedLmData::DocumentType>>::find<quasar::PersonalizedLmData::DocumentType>((_QWORD *)(a1 + 1048), a4))
  {
    if (quasar::gLogLevel >= 6)
    {
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v48 = 0u;
      *(_OWORD *)__p = 0u;
      v47 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Reject due to document type", 27);
LABEL_12:
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
      goto LABEL_13;
    }
    goto LABEL_13;
  }
  v9 = *(unsigned __int8 *)(a3 + 23);
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a3 + 8);
  if (!v9 || (v10 = *(unsigned int *)(a1 + 608), (_DWORD)v10) && v9 > v10)
  {
    if (quasar::gLogLevel >= 6)
    {
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v48 = 0u;
      *(_OWORD *)__p = 0u;
      v47 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Reject due to document length", 29);
      goto LABEL_12;
    }
LABEL_13:
    ++*(_DWORD *)(a1 + 60 * v8 + 112);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\n");
  quasar::splitAndTrimNoEmpty((const std::string *)a3, (char *)__p, &v44);
  if (SBYTE7(v47) < 0)
    operator delete(__p[0]);
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v11 = *(unsigned int *)(a1 + 612);
  if ((_DWORD)v11 && 0xAAAAAAAAAAAAAAABLL * ((v45 - v44) >> 3) > v11)
  {
    if (quasar::gLogLevel >= 6)
    {
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v48 = 0u;
      *(_OWORD *)__p = 0u;
      v47 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Reject due to sentences per document", 36);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
    }
    goto LABEL_49;
  }
  if (!*(_DWORD *)(a1 + 584))
  {
LABEL_24:
    v14 = v44;
    for (i = v45; v14 != i; v14 += 24)
    {
      if (!*(_BYTE *)(a1 + 1088))
        quasar::LmData::sanitize(a1, v14);
      quasar::trim((std::string *)v14);
      if (*(char *)(v14 + 23) < 0)
      {
        if (*(_QWORD *)(v14 + 8))
        {
LABEL_29:
          v16 = v42;
          if ((unint64_t)v42 >= v43)
          {
            v18 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v41, (__int128 *)v14);
          }
          else
          {
            if ((*(_BYTE *)(v14 + 23) & 0x80) != 0)
            {
              std::string::__init_copy_ctor_external(v42, *(const std::string::value_type **)v14, *(_QWORD *)(v14 + 8));
            }
            else
            {
              v17 = *(_OWORD *)v14;
              v42->__r_.__value_.__r.__words[2] = *(_QWORD *)(v14 + 16);
              *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
            }
            v18 = v16 + 1;
          }
          v42 = v18;
          continue;
        }
      }
      else if (*(_BYTE *)(v14 + 23))
      {
        goto LABEL_29;
      }
      ++*(_DWORD *)(a1 + 60 * v8 + 116);
    }
    if (v41 == v42)
    {
LABEL_49:
      ++*(_DWORD *)(a1 + 60 * v8 + 112);
      goto LABEL_88;
    }
    v19 = *(_QWORD *)(a1 + 872);
    if (v19)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
      v20 = *(_QWORD *)(a1 + 872);
      v39.__r_.__value_.__r.__words[0] = (std::string::size_type)" ";
      v39.__r_.__value_.__l.__size_ = 1;
      quasar::join<std::vector<std::string>>((uint64_t *)&v41, (uint64_t *)&v39);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v20 + 16))(v20, __p);
      if (SBYTE7(v47) < 0)
        operator delete(__p[0]);
      (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 872) + 24))(__p);
      if (std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*(_QWORD *)(a1 + 360), *(_QWORD *)(a1 + 368), (unsigned __int8 **)__p) == *(_QWORD *)(a1 + 368))
      {
        ++*(_DWORD *)(a1 + 60 * v8 + 112);
        if (SBYTE7(v47) < 0)
          operator delete(__p[0]);
        goto LABEL_88;
      }
      if (SBYTE7(v47) < 0)
        operator delete(__p[0]);
    }
    ++*(_DWORD *)(a1 + 60 * v8 + 124);
    if (*a4 == 2)
    {
      v21 = (_DWORD *)(a1 + 60 * v8 + 152);
    }
    else
    {
      if (*a4 != 1)
      {
LABEL_52:
        v22 = v41;
        v23 = v42;
        if (v41 == v42)
          goto LABEL_88;
        v24 = 0;
        v25 = a1 + 60 * v8;
        v37 = (_DWORD *)(v25 + 160);
        v26 = (_DWORD *)(v25 + 156);
        v27 = (_DWORD *)(v25 + 116);
        while (1)
        {
          if (!*(_BYTE *)(a1 + 996))
          {
            ++*v27;
            goto LABEL_84;
          }
          v40 = 0;
          if (*(char *)(a2 + 23) >= 0)
            v28 = *(unsigned __int8 *)(a2 + 23);
          else
            v28 = *(_QWORD *)(a2 + 8);
          std::string::basic_string[abi:ne180100]((uint64_t)&v39, v28 + 1);
          if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v29 = &v39;
          else
            v29 = (std::string *)v39.__r_.__value_.__r.__words[0];
          if (v28)
          {
            if (*(char *)(a2 + 23) >= 0)
              v30 = (const void *)a2;
            else
              v30 = *(const void **)a2;
            memmove(v29, v30, v28);
          }
          *(_WORD *)((char *)&v29->__r_.__value_.__l.__data_ + v28) = 95;
          std::to_string(&v38, ++v24);
          if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v31 = &v38;
          else
            v31 = (std::string *)v38.__r_.__value_.__r.__words[0];
          if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v38.__r_.__value_.__r.__words[2]);
          else
            size = v38.__r_.__value_.__l.__size_;
          v33 = std::string::append(&v39, (const std::string::value_type *)v31, size);
          v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
          *(_QWORD *)&v47 = *((_QWORD *)&v33->__r_.__value_.__l + 2);
          *(_OWORD *)__p = v34;
          v33->__r_.__value_.__l.__size_ = 0;
          v33->__r_.__value_.__r.__words[2] = 0;
          v33->__r_.__value_.__r.__words[0] = 0;
          v35 = (*(uint64_t (**)(uint64_t, _DWORD *, void **, std::string *, uint64_t, _QWORD, int *))(*(_QWORD *)a1 + 24))(a1, v63, __p, v22, 1, 0, &v40);
          if (SBYTE7(v47) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v38.__r_.__value_.__l.__data_);
          if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v39.__r_.__value_.__l.__data_);
          if (!v35)
            goto LABEL_84;
          v36 = v26;
          if (*a4 == 1)
            goto LABEL_82;
          if (*a4 == 2)
            break;
LABEL_84:
          if (++v22 == v23)
            goto LABEL_88;
        }
        v36 = v37;
LABEL_82:
        *v36 += v40;
        goto LABEL_84;
      }
      v21 = (_DWORD *)(a1 + 60 * v8 + 148);
    }
    ++*v21;
    goto LABEL_52;
  }
  EstimatedNumTokens = quasar::PersonalizedLmData::getEstimatedNumTokens(a1, a3);
  v13 = *(_DWORD *)(a1 + 1096) + EstimatedNumTokens;
  if (v13 <= *(_DWORD *)(a1 + 584))
  {
    *(_DWORD *)(a1 + 1096) = v13;
    *(_DWORD *)(a1 + 60 * v8 + 164) += EstimatedNumTokens;
    goto LABEL_24;
  }
  ++*(_DWORD *)(a1 + 60 * v8 + 112);
  *(_BYTE *)(a1 + 996) = 0;
LABEL_88:
  __p[0] = &v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1AD79F734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&__p);
  __p = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t quasar::PersonalizedLmData::getEstimatedNumTokens(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  std::basic_string<char32_t>::size_type size;
  std::basic_string<char32_t> *p_p;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  std::basic_string<char32_t> v18;
  std::basic_string<char32_t> __p;
  _OWORD v20[3];
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  memset(&__p, 0, sizeof(__p));
  v4 = operator new();
  *(_OWORD *)(v4 + 8) = xmmword_1AE1402C0;
  *(_DWORD *)(v4 + 24) = 0;
  *(_QWORD *)v4 = &unk_1E5D40240;
  memset(v20, 0, sizeof(v20));
  v21 = v4;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = (int *)a2;
  else
    v6 = *(int **)a2;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 8);
  v30 = 0;
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes((uint64_t)v20, v6, (int *)((char *)v6 + v5), &v18);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v18;
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)v20);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::basic_string<char32_t> *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size)
  {
    v9 = 0;
    v10 = 0;
    v11 = 4 * size;
    do
    {
      v12 = p_p->__r_.__value_.__s.__data_[0];
      if (u_isWhitespace(p_p->__r_.__value_.__s.__data_[0]))
        ++v9;
      else
        v10 += quasar::isCJK(v12);
      p_p = (std::basic_string<char32_t> *)((char *)p_p + 4);
      v11 -= 4;
    }
    while (v11);
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  v13 = *(float *)(a1 + 600);
  v14 = (float)v10;
  if (v13 <= 0.0)
    v15 = v14 * 0.5;
  else
    v15 = v14 / v13;
  v16 = (float)((float)(v15 + (float)v9) + 1.0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v16;
}

void sub_1AD79FA00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24)
{
  _OWORD *v24;
  void *v27;
  void *v28;
  const char *v29;
  size_t v30;

  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)&a20);
  if (a2 == 1)
  {
    v27 = __cxa_begin_catch(a1);
    if (quasar::gLogLevel >= 1)
    {
      v28 = v27;
      v24[15] = 0u;
      v24[16] = 0u;
      v24[13] = 0u;
      v24[14] = 0u;
      v24[11] = 0u;
      v24[12] = 0u;
      v24[9] = 0u;
      v24[10] = 0u;
      v24[7] = 0u;
      v24[8] = 0u;
      v24[5] = 0u;
      v24[6] = 0u;
      a23 = 0u;
      a24 = 0u;
      a21 = 0u;
      a22 = 0u;
      a20 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a20);
      v29 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v28 + 16))(v28);
      v30 = strlen(v29);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a20, (uint64_t)v29, v30);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a20);
    }
    __cxa_end_catch();
    JUMPOUT(0x1AD79F9B4);
  }
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t quasar::join<std::vector<std::string>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[11];
  char v8;
  uint64_t v9;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  quasar::joinToStream<std::vector<std::string>>(v7, a1, a2);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v7[0] = v4;
  v7[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v8 < 0)
    operator delete((void *)v7[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v9);
}

void sub_1AD79FBC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::PersonalizedLmData::loadFromTextFile(quasar::LmData *a1, uint64_t a2, int *a3, uint64_t a4, int a5)
{
  *((_BYTE *)a1 + 1088) = 1;
  return quasar::LmData::loadFromTextFile(a1, a2, a3, a4, a5);
}

void quasar::PersonalizedLmData::~PersonalizedLmData(quasar::PersonalizedLmData *this)
{
  *(_QWORD *)this = &off_1E5D36AC0;
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 1048);
  quasar::LmData::~LmData(this);
}

{
  *(_QWORD *)this = &off_1E5D36AC0;
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 1048);
  quasar::LmData::~LmData(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::LmData::countOovLme(quasar::LmData *this)
{
  return 1;
}

void quasar::QuasarWarnMessage::~QuasarWarnMessage(quasar::QuasarWarnMessage *this)
{
  uint64_t (*v2)();
  uint64_t v3;
  uint64_t v4;
  std::runtime_error *exception;
  std::string __p;

  v2 = quasar::QuasarWarnMessage::logger;
  std::stringbuf::str();
  ((void (*)(std::string *, _QWORD))v2)(&__p, *((_QWORD *)this + 33));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (getenv("QSR_CRASH_ON_WARN"))
  {
    if (std::uncaught_exception())
      abort();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &__p);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v3 = MEMORY[0x1E0DE4F60];
  v4 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)this = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = *(_QWORD *)(v3 + 24);
  *((_QWORD *)this + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF44D094]((char *)this + 112);
}

void sub_1AD79FD90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  quasar::QuasarMessage *v15;
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      quasar::QuasarMessage::~QuasarMessage(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void quasar::QuasarTraceMessage::~QuasarTraceMessage(quasar::QuasarTraceMessage *this)
{
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  void *__p;
  char v6;

  v2 = (void (*)(uint64_t))quasar::QuasarTraceMessage::logger;
  std::stringbuf::str();
  v2((uint64_t)&__p);
  if (v6 < 0)
    operator delete(__p);
  v3 = MEMORY[0x1E0DE4F60];
  v4 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)this = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = *(_QWORD *)(v3 + 24);
  *((_QWORD *)this + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF44D094]((char *)this + 112);
}

void std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>::~codecvt_utf8[abi:ne180100](std::__shared_count *a1)
{
  std::__shared_count::~__shared_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes(uint64_t a1@<X0>, int *a2@<X1>, int *a3@<X2>, std::basic_string<char32_t> *a4@<X8>)
{
  int *v7;
  std::basic_string<char32_t>::size_type v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 v12;
  __int128 v13;
  std::basic_string<char32_t>::size_type size;
  char *v15;
  char *v16;
  int v17;
  BOOL v18;
  std::basic_string<char32_t> *v19;
  uint64_t v20;
  std::basic_string<char32_t>::size_type v21;
  char v22;
  std::basic_string<char32_t> *v23;
  const std::wstring::value_type **v24;
  char *v25;
  std::wstring::size_type v26;
  std::basic_string<char32_t> *v27;
  uint64_t v28;
  int *v29;
  _OWORD v30[8];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 184) = 0;
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_23;
  v7 = a2;
  std::basic_string<char32_t>::basic_string[abi:ne180100](a4, 2 * ((char *)a3 - (char *)a2), 0);
  if (a3 != v7)
  {
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = 4;
    else
      v8 = (a4->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    std::basic_string<char32_t>::resize(a4, v8, 0);
    v9 = *(_OWORD *)(a1 + 136);
    v30[4] = *(_OWORD *)(a1 + 120);
    v30[5] = v9;
    v10 = *(_OWORD *)(a1 + 168);
    v30[6] = *(_OWORD *)(a1 + 152);
    v30[7] = v10;
    v11 = *(_OWORD *)(a1 + 72);
    v30[0] = *(_OWORD *)(a1 + 56);
    v30[1] = v11;
    v12 = *(__n128 *)(a1 + 88);
    v13 = *(_OWORD *)(a1 + 104);
    size = HIBYTE(a4->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0)
      v15 = (char *)a4;
    else
      v15 = (char *)a4->__r_.__value_.__r.__words[0];
    if ((size & 0x80u) != 0)
      size = a4->__r_.__value_.__l.__size_;
    v16 = &v15[4 * size];
    v30[2] = *(_OWORD *)(a1 + 88);
    v30[3] = v13;
    do
    {
      v17 = (*(uint64_t (**)(_QWORD, _OWORD *, int *, int *, int **, char *, char *, uint64_t *, __n128))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48), v30, v7, a3, &v29, v15, v16, &v28, v12);
      v18 = v29 == v7;
      *(_QWORD *)(a1 + 184) += (char *)v29 - (char *)v7;
      if (v18)
        goto LABEL_34;
      if (v17 != 1)
      {
        if (v17)
        {
          if (v17 != 3)
          {
LABEL_34:
            if ((*((_BYTE *)&a4->__r_.__value_.__s + 23) & 0x80) != 0)
              goto LABEL_35;
            goto LABEL_23;
          }
          if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v25 = (char *)a4;
          else
            v25 = (char *)a4->__r_.__value_.__r.__words[0];
          std::basic_string<char32_t>::resize(a4, (v15 - v25) >> 2, 0);
          std::basic_string<char32_t>::append<char32_t const*,0>(a4, v7, a3);
        }
        else
        {
          if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v27 = a4;
          else
            v27 = (std::basic_string<char32_t> *)a4->__r_.__value_.__r.__words[0];
          std::basic_string<char32_t>::resize(a4, (v28 - (uint64_t)v27) >> 2, 0);
        }
        return;
      }
      if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = a4;
      else
        v19 = (std::basic_string<char32_t> *)a4->__r_.__value_.__r.__words[0];
      v20 = v28 - (_QWORD)v19;
      std::basic_string<char32_t>::resize(a4, (v28 - (uint64_t)v19) >> 1, 0);
      v21 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
      v22 = v21;
      v23 = (std::basic_string<char32_t> *)a4->__r_.__value_.__r.__words[0];
      if ((v21 & 0x80u) == 0)
        v23 = a4;
      v15 = (char *)v23 + v20;
      if ((v21 & 0x80u) != 0)
        v21 = a4->__r_.__value_.__l.__size_;
      v16 = (char *)v23 + 4 * v21;
      v7 = v29;
    }
    while (v29 < a3);
    if ((v22 & 0x80) == 0)
      goto LABEL_23;
LABEL_35:
    operator delete(a4->__r_.__value_.__l.__data_);
LABEL_23:
    v24 = (const std::wstring::value_type **)(a1 + 24);
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
    {
      if (*(_BYTE *)(a1 + 47))
      {
        *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)v24;
        a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 40);
        return;
      }
LABEL_41:
      std::__throw_range_error[abi:ne180100]("wstring_convert: from_bytes error");
    }
    v26 = *(_QWORD *)(a1 + 32);
    if (!v26)
      goto LABEL_41;
    std::basic_string<char32_t>::__init_copy_ctor_external((std::wstring *)a4, *v24, v26);
  }
}

void sub_1AD7A01A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::basic_string<char32_t> *std::basic_string<char32_t>::append<char32_t const*,0>(std::basic_string<char32_t> *this, int *a2, int *a3)
{
  int *v4;
  unint64_t v6;
  uint64_t v7;
  std::basic_string<char32_t>::size_type size;
  std::basic_string<char32_t>::size_type v9;
  std::basic_string<char32_t> *v10;
  unint64_t v11;
  unint64_t v12;
  void **v13;
  std::basic_string<char32_t>::size_type v14;
  std::basic_string<char32_t> *v15;
  int *v16;
  int v17;
  std::basic_string<char32_t>::size_type v18;
  void *__p[2];
  unsigned __int8 v21;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v7 = (char *)a3 - (char *)a2;
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    v7 = (char *)a3 - (char *)a2;
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 4;
    v10 = this;
  }
  v12 = v7 >> 2;
  if (v10 > (std::basic_string<char32_t> *)v4 || (char *)v10->__r_.__value_.__r.__words + 4 * size + 4 <= (char *)v4)
  {
    if (v9 - size < v12)
    {
      std::basic_string<char32_t>::__grow_by(this, v9, size - v9 + v12, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v15 = this;
    if ((v6 & 0x80) != 0)
      v15 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
    v16 = (int *)((char *)v15 + 4 * size);
    while (v4 != a3)
    {
      v17 = *v4++;
      *v16++ = v17;
    }
    *v16 = 0;
    v18 = v12 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v18;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v18 & 0x7F;
  }
  else
  {
    std::basic_string<char32_t>::__init_with_size[abi:ne180100]<char32_t const*,char32_t const*>(__p, v4, a3, v12);
    if ((v21 & 0x80u) == 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    if ((v21 & 0x80u) == 0)
      v14 = v21;
    else
      v14 = (std::basic_string<char32_t>::size_type)__p[1];
    std::basic_string<char32_t>::append(this, (const std::basic_string<char32_t>::value_type *)v13, v14);
    if ((char)v21 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_1AD7A0334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_range_error[abi:ne180100](const char *a1)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::range_error::range_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E5CFD1A8, MEMORY[0x1E0DE42B0]);
}

void sub_1AD7A038C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::basic_string<char32_t>::basic_string[abi:ne180100](_QWORD *a1, unint64_t a2, int a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a1;
  if (a2 >= 0x3FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 >= 5)
  {
    v6 = (a2 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((a2 | 1) != 5)
      v6 = a2 | 1;
    a1 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)a1, v6 + 1);
    v3[1] = a2;
    v3[2] = v7 | 0x8000000000000000;
    *v3 = a1;
  }
  else
  {
    *((_BYTE *)a1 + 23) = a2;
    if (!a2)
      goto LABEL_10;
  }
  v8 = 0;
  do
    *((_DWORD *)a1 + v8++) = a3;
  while (a2 != v8);
LABEL_10:
  *((_DWORD *)a1 + a2) = 0;
  return v3;
}

void std::basic_string<char32_t>::resize(std::basic_string<char32_t> *this, std::basic_string<char32_t>::size_type __n, std::basic_string<char32_t>::value_type __c)
{
  std::basic_string<char32_t>::size_type size;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    size = this->__r_.__value_.__l.__size_;
    if (size >= __n)
    {
      this->__r_.__value_.__l.__size_ = __n;
      this = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
      goto LABEL_7;
    }
LABEL_5:
    std::basic_string<char32_t>::append(this, __n - size, __c);
    return;
  }
  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if (size < __n)
    goto LABEL_5;
  *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
LABEL_7:
  this->__r_.__value_.__s.__data_[__n] = 0;
}

std::basic_string<char32_t> *__cdecl std::basic_string<char32_t>::append(std::basic_string<char32_t> *this, std::basic_string<char32_t>::size_type __n, std::basic_string<char32_t>::value_type __c)
{
  unint64_t v6;
  std::basic_string<char32_t>::size_type size;
  std::basic_string<char32_t>::size_type v8;
  unint64_t v9;
  std::basic_string<char32_t> *v10;
  std::basic_string<char32_t>::value_type *v11;
  std::basic_string<char32_t>::size_type v12;
  std::basic_string<char32_t>::size_type v13;

  if (__n)
  {
    LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((v6 & 0x80000000) != 0)
    {
      size = this->__r_.__value_.__l.__size_;
      v9 = this->__r_.__value_.__r.__words[2];
      v8 = (v9 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      v6 = HIBYTE(v9);
    }
    else
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v8 = 4;
    }
    if (v8 - size < __n)
    {
      std::basic_string<char32_t>::__grow_by(this, v8, __n - v8 + size, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v10 = this;
    if ((v6 & 0x80) != 0)
      v10 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
    v11 = (std::basic_string<char32_t>::value_type *)((char *)v10 + 4 * size);
    v12 = __n;
    do
    {
      *v11++ = __c;
      --v12;
    }
    while (v12);
    v13 = size + __n;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v13;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v13 & 0x7F;
    v10->__r_.__value_.__s.__data_[v13] = 0;
  }
  return this;
}

void std::basic_string<char32_t>::__grow_by(std::basic_string<char32_t> *this, std::basic_string<char32_t>::size_type __old_cap, std::basic_string<char32_t>::size_type __delta_cap, std::basic_string<char32_t>::size_type __old_sz, std::basic_string<char32_t>::size_type __n_copy, std::basic_string<char32_t>::size_type __n_del, std::basic_string<char32_t>::size_type __n_add)
{
  std::basic_string<char32_t> *v13;
  std::basic_string<char32_t>::size_type v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  std::basic_string<char32_t>::size_type v19;
  uint64_t v20;
  uint64_t v21;

  if (0x3FFFFFFFFFFFFFF7 - __old_cap < __delta_cap)
    std::string::__throw_length_error[abi:ne180100]();
  v13 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    v13 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
  v14 = __delta_cap + __old_cap;
  if (__delta_cap + __old_cap <= 2 * __old_cap)
    v14 = 2 * __old_cap;
  v15 = (v14 & 0xFFFFFFFFFFFFFFFELL) + 2;
  if ((v14 | 1) != 5)
    v15 = v14 | 1;
  if (v14 >= 5)
    v16 = v15 + 1;
  else
    v16 = 5;
  if (__old_cap <= 0x1FFFFFFFFFFFFFF2)
    v17 = v16;
  else
    v17 = 0x3FFFFFFFFFFFFFF7;
  v18 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this, v17);
  v19 = (std::basic_string<char32_t>::size_type)v18;
  v21 = v20;
  if (__n_copy)
    memmove(v18, v13, 4 * __n_copy);
  if (__old_sz != __n_del + __n_copy)
    memmove((void *)(v19 + 4 * __n_copy + 4 * __n_add), (char *)v13 + 4 * __n_copy + 4 * __n_del, 4 * (__old_sz - (__n_del + __n_copy)));
  if (__old_cap != 4)
    operator delete(v13);
  this->__r_.__value_.__r.__words[0] = v19;
  this->__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
}

std::basic_string<char32_t> *__cdecl std::basic_string<char32_t>::append(std::basic_string<char32_t> *this, const std::basic_string<char32_t>::value_type *__s, std::basic_string<char32_t>::size_type __n)
{
  std::basic_string<char32_t>::size_type v6;
  std::basic_string<char32_t>::size_type size;
  std::basic_string<char32_t> *v8;
  std::basic_string<char32_t>::size_type v9;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    size = this->__r_.__value_.__l.__size_;
    v6 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  else
  {
    v6 = 4;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  if (v6 - size >= __n)
  {
    if (__n)
    {
      v8 = this;
      if ((*((_BYTE *)&this->__r_.__value_.__s + 23) & 0x80) != 0)
        v8 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
      memmove((char *)v8 + 4 * size, __s, 4 * __n);
      v9 = size + __n;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        this->__r_.__value_.__l.__size_ = v9;
      else
        *((_BYTE *)&this->__r_.__value_.__s + 23) = v9 & 0x7F;
      v8->__r_.__value_.__s.__data_[v9] = 0;
    }
  }
  else
  {
    std::basic_string<char32_t>::__grow_by_and_replace(this, v6, __n - v6 + size, size, size, 0, __n, __s);
  }
  return this;
}

_QWORD *std::basic_string<char32_t>::__init_with_size[abi:ne180100]<char32_t const*,char32_t const*>(_QWORD *result, int *a2, int *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v4 = result;
  if (a4 >= 0x3FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a4 > 4)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((a4 | 1) != 5)
      v8 = a4 | 1;
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)result, v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_DWORD *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 4);
  }
  *(_DWORD *)v4 = 0;
  return result;
}

void std::basic_string<char32_t>::__grow_by_and_replace(std::basic_string<char32_t> *this, std::basic_string<char32_t>::size_type __old_cap, std::basic_string<char32_t>::size_type __delta_cap, std::basic_string<char32_t>::size_type __old_sz, std::basic_string<char32_t>::size_type __n_copy, std::basic_string<char32_t>::size_type __n_del, std::basic_string<char32_t>::size_type __n_add, const std::basic_string<char32_t>::value_type *__p_new_stuff)
{
  std::basic_string<char32_t> *v15;
  std::basic_string<char32_t>::size_type v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  std::basic_string<char32_t>::size_type v21;
  uint64_t v22;
  uint64_t v23;
  std::basic_string<char32_t>::size_type v24;
  std::basic_string<char32_t>::size_type v25;

  if (0x3FFFFFFFFFFFFFF6 - __old_cap < __delta_cap)
    std::string::__throw_length_error[abi:ne180100]();
  v15 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    v15 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
  v16 = __delta_cap + __old_cap;
  if (__delta_cap + __old_cap <= 2 * __old_cap)
    v16 = 2 * __old_cap;
  v17 = (v16 & 0xFFFFFFFFFFFFFFFELL) + 2;
  if ((v16 | 1) != 5)
    v17 = v16 | 1;
  if (v16 >= 5)
    v18 = v17 + 1;
  else
    v18 = 5;
  if (__old_cap > 0x1FFFFFFFFFFFFFF2)
    v19 = 0x3FFFFFFFFFFFFFF7;
  else
    v19 = v18;
  v20 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this, v19);
  v21 = (std::basic_string<char32_t>::size_type)v20;
  v23 = v22;
  if (__n_copy)
    memmove(v20, v15, 4 * __n_copy);
  if (__n_add)
    memmove((void *)(v21 + 4 * __n_copy), __p_new_stuff, 4 * __n_add);
  v24 = __old_sz - (__n_del + __n_copy);
  if (v24)
    memmove((void *)(v21 + 4 * __n_copy + 4 * __n_add), (char *)v15 + 4 * __n_copy + 4 * __n_del, 4 * v24);
  if (__old_cap != 4)
    operator delete(v15);
  v25 = __n_add + __n_copy + v24;
  this->__r_.__value_.__r.__words[0] = v21;
  this->__r_.__value_.__l.__size_ = v25;
  this->__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
  *(_DWORD *)(v21 + 4 * v25) = 0;
}

std::runtime_error *std::range_error::range_error[abi:ne180100](std::runtime_error *a1, const char *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5008] + 16);
  return result;
}

void std::basic_string<char32_t>::__init_copy_ctor_external(std::wstring *this, const std::wstring::value_type *__s, std::wstring::size_type __sz)
{
  std::wstring *v5;
  std::wstring::size_type v6;
  std::wstring *v7;
  uint64_t v8;

  v5 = this;
  if (__sz > 4)
  {
    if (__sz >= 0x3FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((__sz | 1) != 5)
      v6 = __sz | 1;
    v7 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this, v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::wstring::size_type)v7;
    v5 = v7;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, 4 * __sz + 4);
}

_QWORD *std::__hash_table<quasar::PersonalizedLmData::DocumentType,std::hash<quasar::PersonalizedLmData::DocumentType>,std::equal_to<quasar::PersonalizedLmData::DocumentType>,std::allocator<quasar::PersonalizedLmData::DocumentType>>::__emplace_unique_key_args<quasar::PersonalizedLmData::DocumentType,quasar::PersonalizedLmData::DocumentType>(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1AD7A0BD0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<quasar::PersonalizedLmData::DocumentType,std::hash<quasar::PersonalizedLmData::DocumentType>,std::equal_to<quasar::PersonalizedLmData::DocumentType>,std::allocator<quasar::PersonalizedLmData::DocumentType>>::find<quasar::PersonalizedLmData::DocumentType>(_QWORD *a1, unsigned int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

_QWORD *quasar::joinToStream<std::vector<std::string>>(_QWORD *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  char v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    v6 = result;
    v7 = 1;
    do
    {
      if ((v7 & 1) == 0)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *a3, a3[1]);
      v8 = *(char *)(v3 + 23);
      if (v8 >= 0)
        v9 = v3;
      else
        v9 = *(_QWORD *)v3;
      if (v8 >= 0)
        v10 = *(unsigned __int8 *)(v3 + 23);
      else
        v10 = *(_QWORD *)(v3 + 8);
      result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v9, v10);
      v7 = 0;
      v3 += 24;
    }
    while (v3 != v4);
  }
  return result;
}

unint64_t fst::ClosureProperties(unint64_t this, unint64_t a2, int a3)
{
  uint64_t v3;

  v3 = 0x258200010007;
  if (a3)
    v3 = 0x10200010004;
  if ((a3 & ((this & 0x10000000000) == 0)) == 0)
    v3 |= 0xA01A02A0000uLL;
  return v3 & this;
}

unint64_t fst::ComposeProperties(unint64_t this, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v2 = (a2 | this) & 4;
  v3 = a2 & this;
  v4 = a2 & this & 0x2802010000 | v2 | 0x10000000000;
  if ((a2 & this & 0x2000000) != 0)
    v4 |= a2 & this & 0x40000;
  v5 = v3 & 0x280A800000 | v2 | 0x10000010000;
  if ((v3 & 0x2000000) != 0)
    v5 |= v3 & 0x140000;
  if ((v3 & 0x10000) != 0)
    return v5;
  else
    return v4;
}

unint64_t fst::ConcatProperties(unint64_t this, uint64_t a2, int a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;

  v3 = a2 & 0x208000000000 | this & 0x20B000000003;
  if (a3)
    v3 = 0;
  v4 = (a2 | this) & 4 | this & a2 & 0xA00010000 | v3;
  if ((a3 & ((this & 0x10000000000) == 0)) != 0)
    v5 = 0;
  else
    v5 = this & 0xA05A56A0000;
  v6 = v4 | v5;
  if ((~this & 0x50000000000) != 0)
    v7 = 1;
  else
    v7 = a3;
  if (v7)
    v8 = 0;
  else
    v8 = a2 & 0xF05A56A0000;
  return v6 | v8;
}

unint64_t fst::DeterminizeProperties(unint64_t this, int a2, int a3)
{
  char v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  if ((this & 0x10000) != 0
    || ((this & 0x2000000) == 0 ? (v3 = a2 ^ 1) : (v3 = 0), (v4 = 0x10000000000, (v3 & 1) == 0) && a3))
  {
    v4 = 0x10000040000;
  }
  v5 = (this >> 25) & 1;
  v6 = this & 0x800000;
  if ((v5 & a3) == 0)
    v6 = 0;
  v7 = this & ((uint64_t)(this << 23) >> 63) & 0x405000000 | this & 0x142800010004 | this & ((int)((_DWORD)this << 15) >> 31) & 0xA000000 | v6 | v4;
  if ((v5 & a2) != 0)
    return v7 | 0x2000000;
  else
    return v7;
}

unint64_t fst::FactorWeightProperties(unint64_t this)
{
  uint64_t v1;

  v1 = 0x50CA56B0007;
  if ((this & 0x10000000000) == 0)
    v1 = 0x50800010007;
  return v1 & this;
}

unint64_t fst::InvertProperties(unint64_t this)
{
  return this & 0x3FFF00C30007 | (((this >> 18) & 3) << 20) & 0xFFFFFFFF33FFFFFFLL | (this >> 2) & 0xC0000 | (((this >> 24) & 3) << 26) & 0xFFFFFFFF3FFFFFFFLL | (this >> 2) & 0x3000000 | (((this >> 28) & 3) << 30) | (this >> 2) & 0x30000000;
}

unint64_t fst::ProjectProperties(unint64_t this, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = this & 0x3FFF00000007 | 0x10000;
  v3 = (this >> 2) & 0xC0000 | this & 0xCC300000 | v2;
  if ((this & 0x4000000) != 0)
    v3 |= 0x1400000uLL;
  if ((this & 0x8000000) != 0)
    v3 |= 0x2800000uLL;
  v4 = (this >> 2) & 0x30000000 | v3;
  v5 = this & 0x330C0000 | (((this >> 18) & 3) << 20) | v2;
  if ((this & 0x1000000) != 0)
    v5 |= 0x4400000uLL;
  if ((this & 0x2000000) != 0)
    v5 |= 0x8800000uLL;
  v6 = (4 * (_DWORD)this) & 0xC0000000 | v5;
  if (a2)
    return v6;
  else
    return v4;
}

uint64_t fst::RandGenProperties(fst *this, int a2)
{
  if (a2)
    return this & 0x5A950004 | 0x16800000000;
  else
    return this & 0x50010004 | 0x12A00000000;
}

uint64_t fst::ReplaceProperties(uint64_t **a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unint64_t *v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;

  v6 = *a1;
  v7 = a1[1];
  v8 = (char *)v7 - (char *)*a1;
  if (v7 == *a1)
    return 0x156A5A950000;
  v9 = 0;
  v10 = v8 >> 3;
  if (v10 <= 1)
    v10 = 1;
  v11 = *a1;
  v12 = v10;
  do
  {
    v13 = *v11++;
    v9 |= v13 & 4;
    --v12;
  }
  while (v12);
  v14 = 0x50000000000;
  if (!a6)
    v14 = 0;
  v15 = *a1;
  v16 = v10;
  do
  {
    v17 = *v15++;
    v14 &= v17;
    --v16;
  }
  while (v16);
  if (v14 == 0x50000000000)
  {
    v18 = 0;
    LOBYTE(v19) = 1;
    v20 = *a1;
    v21 = v10;
    do
    {
      v23 = *v20++;
      v22 = v23;
      v24 = v23 & 0x20000;
      if (!a5)
        v24 = 0;
      v18 |= v22 & 0x208505680000 | v24;
      v19 = ((v22 & 0x100000000000) != 0) & v19;
      --v21;
    }
    while (v21);
    v25 = v19 == 0;
    v26 = 0x50000000000;
    if (!v25)
      v26 = 0x150000000000;
    v9 |= v6[a2] & 0x1000000000 | v26 | v18;
  }
  v27 = (a3 | a4) ^ 1;
  v28 = a4 & ~a3;
  LOBYTE(v29) = a5 ^ 1;
  LOBYTE(v30) = 1;
  v31 = (unint64_t *)v6;
  v32 = a2;
  LOBYTE(v33) = 1;
  do
  {
    v34 = *v31++;
    v29 = BYTE2(v34) & 1 & v29;
    v35 = (v34 >> 18) & 1;
    v36 = (v34 >> 25) & 1;
    v27 &= v36;
    v33 = ((v34 & 0x800000000) != 0) & v33;
    v30 = ((v34 & 0x200000000) != 0) & v30;
    if (v32)
      v37 = v36;
    else
      v37 = 1;
    v28 &= v37 & v35;
    --v32;
    --v10;
  }
  while (v10);
  if (v29)
    v9 |= 0x10000uLL;
  if (v28)
    v9 |= 0x40000uLL;
  if (v27)
    v9 |= 0x2000000uLL;
  if (v33)
    v9 |= 0x800000000uLL;
  if (v30)
    v9 |= 0x200000000uLL;
  return v6[a2] & 0x2000000000 | v9;
}

unint64_t fst::RelabelProperties(unint64_t this)
{
  return this & 0x3FFF00000007;
}

unint64_t fst::ReverseProperties(unint64_t this, int a2)
{
  uint64_t v2;

  v2 = 0xE05430007;
  if (a2)
    v2 = 0xF05430007;
  return v2 & this;
}

unint64_t fst::ReweightProperties(unint64_t this)
{
  return this & 0x3BFCFFFF0007;
}

unint64_t fst::RmEpsilonProperties(unint64_t this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = 176160768;
  if ((this & 0x10000) == 0)
    v2 = 0x800000;
  v3 = v2 | this & 0x2800010004;
  if (!a2)
    v3 |= this & 0x4000000000 | 3;
  if ((a2 & ((this & 0x10000000000) == 0)) != 0)
    v4 = 0;
  else
    v4 = this & 0x20000;
  return v3 | v4;
}

unint64_t fst::ShortestPathProperties(unint64_t this, int a2)
{
  uint64_t v2;

  v2 = 0x52800000000;
  if (a2)
    v2 = 0x12800000000;
  return v2 | this;
}

unint64_t fst::UnionProperties(unint64_t this, uint64_t a2, int a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v3 = a2 & 0x8000000000 | this & 0x8000000003;
  if (a3)
    v3 = 0;
  v4 = a2 & this & 0x40000000000 | 0x5400000 | a2 & this & 0x10A00010000 | (a2 | this) & 4 | v3 | 0x2000000000;
  if (a3)
    v4 = a2 & this & 0x10A00010000 | (a2 | this) & 4 | v3 | 0x2000000000;
  if ((((this & 0x10000000000) == 0) & a3) != 0)
    v5 = 0;
  else
    v5 = this & 0x205A56A0000;
  if ((a3 & ((a2 & 0x10000000000) == 0)) != 0)
    v6 = 0;
  else
    v6 = a2 & 0xA05A56A0000;
  return v6 | v5 | v4;
}

uint64_t fst::CreateSuperFinal<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(uint64_t a1, uint64_t a2)
{
  int v4;
  __n128 v5;
  int v6;
  uint64_t v7;
  _BOOL4 v8;
  void *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char *v25;
  unint64_t v26;
  int32x2_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  void *__p;
  void *v33;
  _DWORD *v34;
  unint64_t v35;
  int v36;
  int32x2_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  _BYTE *v43;
  void *v44[2];
  __int128 v45;
  char *v46;
  char *v47;
  char *v48;
  float v49;
  int v50;
  float v51;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
  v46 = 0;
  v47 = 0;
  v48 = 0;
  if (v4 < 1)
  {
    v20 = 0;
    v21 = 0;
    goto LABEL_32;
  }
  v6 = v4;
  v7 = 0;
  do
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v31, a1, v7);
    v51 = *((float *)&v31 + 1);
    LODWORD(v41) = v31;
    v50 = 2139095040;
    v49 = INFINITY;
    v5.n128_u32[0] = v31;
    if (*(float *)&v31 != INFINITY)
    {
      v8 = 1;
      v9 = __p;
      if (!__p)
        goto LABEL_6;
LABEL_5:
      v33 = v9;
      operator delete(v9);
      goto LABEL_6;
    }
    v5.n128_f32[0] = v51;
    v9 = __p;
    if (v51 == v49)
    {
      v8 = v33 != __p;
      if (__p)
        goto LABEL_5;
    }
    else
    {
      v8 = 1;
      if (__p)
        goto LABEL_5;
    }
LABEL_6:
    if (v8)
    {
      v10 = v47;
      if (v47 >= v48)
      {
        v12 = v46;
        v13 = (v47 - v46) >> 2;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v15 = v48 - v46;
        if ((v48 - v46) >> 1 > v14)
          v14 = v15 >> 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
          v16 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v48, v16);
          v12 = v46;
          v10 = v47;
        }
        else
        {
          v17 = 0;
        }
        v18 = &v17[4 * v13];
        *(_DWORD *)v18 = v7;
        v11 = v18 + 4;
        while (v10 != v12)
        {
          v19 = *((_DWORD *)v10 - 1);
          v10 -= 4;
          *((_DWORD *)v18 - 1) = v19;
          v18 -= 4;
        }
        v46 = v18;
        v47 = v11;
        v48 = &v17[4 * v16];
        if (v12)
          operator delete(v12);
      }
      else
      {
        *(_DWORD *)v47 = v7;
        v11 = v10 + 4;
      }
      v47 = v11;
    }
    v7 = (v7 + 1);
  }
  while ((_DWORD)v7 != v6);
  v20 = v46;
  v21 = v47;
  if (v21 - v20 != 4)
    goto LABEL_51;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD, __n128))(*(_QWORD *)a1 + 32))(&v31, a1, *(unsigned int *)v20, v5);
  v51 = *((float *)&v31 + 1);
  LODWORD(v41) = v31;
  v50 = 0;
  v49 = 0.0;
  v5.n128_u32[0] = v31;
  v22 = *(float *)&v31 == 0.0 && (v5.n128_f32[0] = v51, v51 == v49) && v33 == __p;
  if (__p)
  {
    v33 = __p;
    operator delete(__p);
  }
  if (!(_DWORD)v22)
    goto LABEL_51;
LABEL_32:
  v23 = *(unsigned int *)v46;
  v35 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, __n128))(*(_QWORD *)a1 + 136))(a1, v23, &v31, v5);
  if (v31)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31))
      goto LABEL_42;
LABEL_44:
    v24 = 0;
  }
  else
  {
    if (v35 < (unint64_t)v33)
      goto LABEL_44;
LABEL_42:
    v22 = *(unsigned int *)v46;
    v24 = 1;
  }
  if (v31)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  else if (v34)
  {
    --*v34;
  }
  if (v24)
  {
    v25 = v46;
  }
  else
  {
LABEL_51:
    v22 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)a1 + 200))(a1, v5);
    *(_OWORD *)v44 = 0u;
    v45 = 0u;
    (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 184))(a1, v22, v44);
    if (v44[1])
    {
      *(void **)&v45 = v44[1];
      operator delete(v44[1]);
    }
    v25 = v47;
    if (v47 != v46)
    {
      v26 = 0;
      v27 = vdup_n_s32(0x7F800000u);
      v25 = v46;
      do
      {
        v28 = *(unsigned int *)&v25[4 * v26];
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v41, a1, v28);
        v37 = v27;
        v39 = 0;
        v40 = 0;
        v38 = 0;
        (*(void (**)(uint64_t, uint64_t, int32x2_t *))(*(_QWORD *)a1 + 184))(a1, v28, &v37);
        if (v38)
        {
          v39 = v38;
          operator delete(v38);
        }
        v33 = 0;
        v34 = 0;
        v35 = 0;
        v31 = 0;
        v36 = v22;
        __p = v41;
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v33, (char *)v42, (uint64_t)v43, (v43 - (_BYTE *)v42) >> 2);
        v29 = *(_QWORD *)(a2 + 24);
        if (v29)
        {
          v51 = *(float *)&v28;
          (*(void (**)(uint64_t, float *, uint64_t *))(*(_QWORD *)v29 + 48))(v29, &v51, &v31);
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 208))(a1, v28, &v31);
        }
        if (v33)
        {
          v34 = v33;
          operator delete(v33);
        }
        if (v42)
        {
          v43 = v42;
          operator delete(v42);
        }
        ++v26;
        v25 = v46;
      }
      while (v26 < (v47 - v46) >> 2);
    }
  }
  if (v25)
  {
    v47 = v25;
    operator delete(v25);
  }
  return v22;
}

void sub_1AD7A175C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  uint64_t v25;
  void *v27;

  if (a9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  }
  else if (a12)
  {
    --*a12;
  }
  v27 = *(void **)(v25 - 136);
  if (v27)
  {
    *(_QWORD *)(v25 - 128) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(exception_object);
}

int *std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(std::vector<int> *a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  int *v5;
  int *v7;
  std::allocator<int> *p_end_cap;
  int *v10;
  int *value;
  unint64_t v12;
  std::vector<int>::pointer begin;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  int *v23;
  int *v24;
  int *v25;
  int *v26;
  int v27;
  int *v28;
  uint64_t v29;
  int *v30;
  int v31;
  std::__split_buffer<int> __v;

  v5 = (int *)__dst;
  if (a5 < 1)
    return v5;
  v7 = (int *)__src;
  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<int> *)&a1->__end_cap_;
  v10 = value;
  v12 = *((_QWORD *)p_end_cap - 1);
  if (a5 > (uint64_t)((uint64_t)value - v12) >> 2)
  {
    begin = a1->__begin_;
    v14 = a5 + ((uint64_t)(v12 - (unint64_t)a1->__begin_) >> 2);
    if (v14 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)begin) >> 2;
    v16 = (char *)v10 - (char *)begin;
    if (v16 >> 1 > v14)
      v14 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v17)
      v18 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v17);
    else
      v18 = 0;
    v28 = &v18[v15];
    __v.__first_ = v18;
    __v.__begin_ = v28;
    __v.__end_cap_.__value_ = &v18[v17];
    v29 = 4 * a5;
    v30 = &v28[a5];
    do
    {
      v31 = *v7++;
      *v28++ = v31;
      v29 -= 4;
    }
    while (v29);
    __v.__end_ = v30;
    v5 = std::vector<int>::__swap_out_circular_buffer(a1, &__v, v5);
    if (__v.__end_ != __v.__begin_)
      __v.__end_ = (std::__split_buffer<int>::pointer)((char *)__v.__end_
                                                     + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_)
      operator delete(__v.__first_);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    v21 = &__src[4 * a5];
    v23 = (int *)*((_QWORD *)p_end_cap - 1);
LABEL_17:
    v24 = &v5[a5];
    v25 = &v23[-a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *v25++;
        *v26++ = v27;
      }
      while ((unint64_t)v25 < v12);
    }
    a1->__end_ = v26;
    if (v23 != v24)
      memmove(&v23[-(v23 - v24)], v5, (char *)v23 - (char *)v24);
    if (v21 != (char *)v7)
      memmove(v5, v7, v21 - (char *)v7);
    return v5;
  }
  v21 = &__src[4 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*((void **)p_end_cap - 1), &__src[4 * v20], a4 - v21);
  v23 = (int *)(v12 + v22);
  a1->__end_ = (std::vector<int>::pointer)(v12 + v22);
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_1AD7A19E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1AD7A1A7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *quasar::FilterBlockOptions::options@<X0>(quasar::FilterBlockOptions *this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *result;

  v4 = (char *)this + 320;
  v5 = *(_QWORD *)(*((_QWORD *)this + 40) - 24);
  v6 = (char *)this + 472;
  v7 = *(_QWORD *)(*((_QWORD *)this + 59) - 24);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  result = operator new(0x28uLL);
  *result = (char *)this + 16;
  result[1] = (char *)this + 160;
  a2[1] = result + 5;
  a2[2] = result + 5;
  result[2] = &v4[v5];
  result[3] = &v6[v7];
  result[4] = (char *)this + 624;
  *a2 = result;
  return result;
}

void quasar::FilterBlock::init(quasar::FilterBlock *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  void *__p[2];
  unsigned __int8 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v2 = (_QWORD *)((char *)this + 328);
  if (*(_DWORD *)quasar::OptionValue<int>::value((quasar::FilterBlock *)((char *)this
                                                                        + *(_QWORD *)(*((_QWORD *)this + 41) - 24)
                                                                        + 328)) == -1)
  {
    if (quasar::gLogLevel >= 4)
    {
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      v13 = 0u;
      v14 = 0u;
      v11 = 0u;
      v12 = 0u;
      v9 = 0u;
      v10 = 0u;
      v8 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"no limiting of nbest output size", 32);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v8);
    }
  }
  else
  {
    if ((*(_DWORD *)quasar::OptionValue<int>::value((_QWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24))) & 0x80000000) != 0)
    {
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      v13 = 0u;
      v14 = 0u;
      v11 = 0u;
      v12 = 0u;
      v9 = 0u;
      v10 = 0u;
      v8 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&v8, "invalid value for nbest option!");
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v8);
    }
    if (quasar::gLogLevel >= 5)
    {
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      v13 = 0u;
      v14 = 0u;
      v11 = 0u;
      v12 = 0u;
      v9 = 0u;
      v10 = 0u;
      v8 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
      v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"limiting n-best size to ", 24);
      quasar::OptionValue<int>::debugInfo((uint64_t)v2 + *(_QWORD *)(*v2 - 24));
      if ((v7 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v7 & 0x80u) == 0)
        v5 = v7;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
      if ((char)v7 < 0)
        operator delete(__p[0]);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v8);
    }
  }
  if (*(_BYTE *)quasar::OptionValue<BOOL>::value((quasar::FilterBlock *)((char *)this
                                                                        + *(_QWORD *)(*((_QWORD *)this + 60) - 24)
                                                                        + 480)))
  {
    if (quasar::gLogLevel < 4)
      goto LABEL_21;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v8 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"using metainfo annotation to filter nbest", 41);
  }
  else
  {
    if (quasar::gLogLevel < 4)
      goto LABEL_21;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v8 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"simple nbest size limiting", 26);
  }
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v8);
LABEL_21:
  if (*(_BYTE *)quasar::OptionValue<BOOL>::value((_QWORD *)this + 3))
  {
    if (quasar::gLogLevel < 4)
      return;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v8 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"validating source locale against metainfo locale", 48);
  }
  else
  {
    if (quasar::gLogLevel < 4)
      return;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v8 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"locale validation disabled", 26);
  }
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v8);
}

void sub_1AD7A1EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)va);
}

uint64_t quasar::OptionValue<int>::debugInfo(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  BOOL v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD v31[2];
  _QWORD v32[11];
  char v33;
  uint64_t v34;

  v2 = quasar::OptionValue<BOOL>::fallback(a1);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v31);
  v3 = *(char *)(a1 + 31);
  if (v3 >= 0)
    v4 = a1 + 8;
  else
    v4 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a1 + 31);
  else
    v5 = *(_QWORD *)(a1 + 16);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" (", 2);
  v11 = *(_QWORD *)(v2 + 32);
  v10 = v2 + 32;
  v9 = v11;
  v12 = *(char *)(v10 + 23);
  if (v12 >= 0)
    v13 = v10;
  else
    v13 = v9;
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(v10 + 23);
  else
    v14 = *(_QWORD *)(v10 + 8);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v13, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)")", 1);
  if (*(_QWORD *)(a1 + 136))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" overrides: [", 13);
    v16 = *(_QWORD **)(a1 + 120);
    v17 = (_QWORD *)(a1 + 128);
    if (v16 != (_QWORD *)(a1 + 128))
    {
      do
      {
        v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"\"", 1);
        v19 = *((char *)v16 + 55);
        if (v19 >= 0)
          v20 = (uint64_t)(v16 + 4);
        else
          v20 = v16[4];
        if (v19 >= 0)
          v21 = *((unsigned __int8 *)v16 + 55);
        else
          v21 = v16[5];
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"\": ", 3);
        std::ostream::operator<<();
        v23 = (_QWORD *)*v17;
        v24 = (_QWORD *)(a1 + 128);
        if (*v17)
        {
          do
          {
            v25 = v23;
            v23 = (_QWORD *)v23[1];
          }
          while (v23);
        }
        else
        {
          do
          {
            v25 = (_QWORD *)v24[2];
            v26 = *v25 == (_QWORD)v24;
            v24 = v25;
          }
          while (v26);
        }
        if (v16 != v25)
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)", ", 2);
        v27 = (_QWORD *)v16[1];
        if (v27)
        {
          do
          {
            v28 = v27;
            v27 = (_QWORD *)*v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            v28 = (_QWORD *)v16[2];
            v26 = *v28 == (_QWORD)v16;
            v16 = v28;
          }
          while (!v26);
        }
        v16 = v28;
      }
      while (v28 != v17);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"]", 1);
  }
  std::stringbuf::str();
  v31[0] = *MEMORY[0x1E0DE4F50];
  v29 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v31 + *(_QWORD *)(v31[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v32[0] = v29;
  v32[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v33 < 0)
    operator delete((void *)v32[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v34);
}

void sub_1AD7A2118(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void `virtual thunk to'quasar::FilterBlock::init(quasar::FilterBlock *this)
{
  quasar::FilterBlock::init((quasar::FilterBlock *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 88)));
}

uint64_t quasar::FilterBlock::getAlternatives@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v5;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *(_BYTE **)result;
  v3 = *(_BYTE **)(result + 8);
  if (*(_BYTE **)result != v3)
  {
    do
    {
      if (!v2[8])
      {
        result = quasar::MetaInfo::hasSenses((quasar::MetaInfo *)(v2 + 192));
        if ((_DWORD)result)
        {
          v5 = a2[1];
          if (v5 >= a2[2])
          {
            result = std::vector<quasar::TranslationPhraseInternal>::__push_back_slow_path<quasar::TranslationPhraseInternal const&>(a2, (const quasar::TranslationPhraseInternal *)v2);
          }
          else
          {
            quasar::TranslationPhraseInternal::TranslationPhraseInternal((std::string *)a2[1], (const quasar::TranslationPhraseInternal *)v2);
            result = v5 + 200;
            a2[1] = v5 + 200;
          }
          a2[1] = result;
        }
      }
      v2 += 200;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_1AD7A21D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  a10 = (void **)v10;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

BOOL quasar::FilterBlock::isSameLanguage(uint64_t a1, const std::string *a2, const std::string *a3)
{
  char v4;
  std::string::size_type size;
  std::string::size_type v6;
  int v7;
  std::string *v8;
  uint64_t v9;
  std::string *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;
  _BOOL8 v17;
  std::string v19;
  std::string v20;
  char v21;

  std::string::basic_string(&v20, a2, 0, 2uLL, (std::allocator<char> *)&v19);
  std::string::basic_string(&v19, a3, 0, 2uLL, (std::allocator<char> *)&v21);
  v4 = HIBYTE(v20.__r_.__value_.__r.__words[2]);
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
  else
    size = v20.__r_.__value_.__l.__size_;
  v6 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  v7 = SHIBYTE(v19.__r_.__value_.__r.__words[2]);
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v6 = v19.__r_.__value_.__l.__size_;
  if (size != v6)
  {
    v17 = 0;
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_26;
  }
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v19;
  else
    v8 = (std::string *)v19.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
  {
    v17 = memcmp(v20.__r_.__value_.__l.__data_, v8, v20.__r_.__value_.__l.__size_) == 0;
    goto LABEL_22;
  }
  if (*((_BYTE *)&v20.__r_.__value_.__s + 23))
  {
    v9 = HIBYTE(v20.__r_.__value_.__r.__words[2]) - 1;
    v10 = &v20;
    do
    {
      v12 = v10->__r_.__value_.__s.__data_[0];
      v10 = (std::string *)((char *)v10 + 1);
      v11 = v12;
      v14 = v8->__r_.__value_.__s.__data_[0];
      v8 = (std::string *)((char *)v8 + 1);
      v13 = v14;
      v16 = v9-- != 0;
      v17 = v11 == v13;
    }
    while (v11 == v13 && v16);
LABEL_22:
    if ((v7 & 0x80000000) == 0)
      goto LABEL_23;
LABEL_26:
    operator delete(v19.__r_.__value_.__l.__data_);
    if ((*((_BYTE *)&v20.__r_.__value_.__s + 23) & 0x80) == 0)
      return v17;
LABEL_27:
    operator delete(v20.__r_.__value_.__l.__data_);
    return v17;
  }
  v17 = 1;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_26;
LABEL_23:
  if (v4 < 0)
    goto LABEL_27;
  return v17;
}

void sub_1AD7A2310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::FilterBlock::hasLocaleMismatchedMetainfo(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *Senses;
  uint64_t v9;
  uint64_t v10;
  const std::string *v11;
  uint64_t v12;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  if (!*(_BYTE *)quasar::OptionValue<BOOL>::value((_QWORD *)(a1 + 24)))
    return 0;
  v4 = (_QWORD *)(a1 + 168);
  v5 = quasar::OptionValue<std::string>::value(v4);
  if ((*(char *)(v5 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v5 + 23))
      goto LABEL_4;
LABEL_13:
    if (quasar::gLogLevel >= 2)
    {
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v26 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"source-locale not set", 21);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v26);
    }
    return 0;
  }
  if (!*(_QWORD *)(v5 + 8))
    goto LABEL_13;
LABEL_4:
  v6 = *a2;
  v7 = a2[1];
  while (v6 != v7)
  {
    if (quasar::MetaInfo::hasSenses((quasar::MetaInfo *)(v6 + 192)))
    {
      Senses = (_QWORD *)quasar::MetaInfo::getSenses((quasar::MetaInfo *)(v6 + 192));
      v9 = Senses[1];
      if (*Senses != v9)
      {
        v10 = *Senses + 48;
        while (1)
        {
          v11 = (const std::string *)quasar::OptionValue<std::string>::value(v4);
          if (!quasar::FilterBlock::isSameLanguage((uint64_t)v11, v11, (const std::string *)v10))
            break;
          v12 = v10 + 248;
          v10 += 296;
          if (v12 == v9)
            goto LABEL_11;
        }
        if (quasar::gLogLevel >= 5)
        {
          v41 = 0u;
          v42 = 0u;
          v39 = 0u;
          v40 = 0u;
          v37 = 0u;
          v38 = 0u;
          v35 = 0u;
          v36 = 0u;
          v33 = 0u;
          v34 = 0u;
          v31 = 0u;
          v32 = 0u;
          v29 = 0u;
          v30 = 0u;
          v27 = 0u;
          v28 = 0u;
          v26 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
          v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"defLocale: <", 12);
          v15 = *(char *)(v10 + 23);
          if (v15 >= 0)
            v16 = v10;
          else
            v16 = *(_QWORD *)v10;
          if (v15 >= 0)
            v17 = *(unsigned __int8 *)(v10 + 23);
          else
            v17 = *(_QWORD *)(v10 + 8);
          v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
          v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)">", 1);
          v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" incompatible with srcLocale: <", 31);
          v21 = quasar::OptionValue<std::string>::value(v4);
          v22 = *(char *)(v21 + 23);
          if (v22 >= 0)
            v23 = v21;
          else
            v23 = *(_QWORD *)v21;
          if (v22 >= 0)
            v24 = *(unsigned __int8 *)(v21 + 23);
          else
            v24 = *(_QWORD *)(v21 + 8);
          v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v23, v24);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"> deleting alternatives and stripping disambig annotation from metainfo", 71);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v26);
        }
        return 1;
      }
    }
LABEL_11:
    v6 += 200;
  }
  return 0;
}

void sub_1AD7A253C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::OptionValue<BOOL>::value(_QWORD *a1)
{
  uint64_t v2;
  const void ****v3;
  std::__shared_weak_count *v4;
  const void ***v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  const void **v10;
  const void **v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  v2 = quasar::OptionValue<BOOL>::fallback((uint64_t)a1) + 104;
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 32))(a1))
  {
    v3 = (const void ****)a1[11];
    v4 = (std::__shared_weak_count *)v3[1];
    if (v4)
    {
      v5 = *v3;
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v7 = __ldxr(p_shared_weak_owners);
      while (__stxr(v7 + 1, p_shared_weak_owners));
      v8 = std::__shared_weak_count::lock(v4);
      if (!v8)
      {
        v9 = v4;
        goto LABEL_17;
      }
      v9 = v8;
      std::__shared_weak_count::__release_weak(v4);
      if (v5)
      {
        v10 = *v5;
        v11 = v5[1];
        if (*v5 != v11)
        {
          v12 = (uint64_t)(a1 + 15);
          v13 = a1 + 16;
          do
          {
            v14 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(v12, v10);
            if (v13 != (_QWORD *)v14)
              v2 = v14 + 56;
            v10 += 3;
          }
          while (v10 != v11);
        }
      }
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
LABEL_17:
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  return v2;
}

void sub_1AD7A2670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void quasar::FilterBlock::filterBasedOnNbestSizeLimit(uint64_t *a1, int a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  if (a2 == -1)
  {
    if (quasar::gLogLevel < 5)
      return;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v8 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"sending ", 8);
    v5 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" alternatives without limiting", 30);
LABEL_10:
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v8);
    return;
  }
  if (0x8F5C28F5C28F5C29 * ((a1[1] - *a1) >> 3) <= a2)
  {
    if (quasar::gLogLevel < 5)
      return;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v8 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"sending ", 8);
    v6 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" alternatives, too few to limit (limit=", 39);
    v7 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)")", 1);
    goto LABEL_10;
  }
  if (quasar::gLogLevel >= 5)
  {
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v8 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"sending ", 8);
    v4 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" alternatives, limiting from ", 29);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v8);
  }
  std::vector<quasar::TranslationPhraseInternal>::resize(a1, a2);
}

void sub_1AD7A28C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  _Unwind_Resume(a1);
}

void std::vector<quasar::TranslationPhraseInternal>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0x8F5C28F5C28F5C29 * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<quasar::TranslationPhraseInternal>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 200 * a2;
    while (v3 != v7)
      quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)(v3 - 200));
    a1[1] = v7;
  }
}

void quasar::FilterBlock::filterBasedOnAnnotations(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  const quasar::TranslationPhraseInternal *v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = *(const quasar::TranslationPhraseInternal **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5 - *(_QWORD *)a1 == 200)
  {
    if (quasar::gLogLevel < 5)
    {
      v6 = 1;
    }
    else
    {
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v26 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"only one hypothesis, sending it", 31);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v20);
      v4 = *(const quasar::TranslationPhraseInternal **)a1;
      v5 = *(_QWORD *)(a1 + 8);
      v6 = 0x8F5C28F5C28F5C29 * ((v5 - *(_QWORD *)a1) >> 3);
    }
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    std::vector<quasar::TranslationPhraseInternal>::__init_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(a2, (uint64_t)v4, v5, v6);
    return;
  }
  if (*((_BYTE *)v4 + 8))
  {
    if (quasar::gLogLevel >= 5)
    {
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v26 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"1-best hypothesis is low confidence, sending only this hypothesis", 65);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v20);
      v4 = *(const quasar::TranslationPhraseInternal **)a1;
    }
    quasar::TranslationPhraseInternal::TranslationPhraseInternal((std::string *)&v20, v4);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    v15 = a2;
    LOBYTE(v16) = 0;
    v7 = (char *)operator new(0xC8uLL);
    *a2 = (uint64_t)v7;
    a2[1] = (uint64_t)v7;
    a2[2] = (uint64_t)(v7 + 200);
    v8 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>,quasar::TranslationPhraseInternal const*,quasar::TranslationPhraseInternal const*,quasar::TranslationPhraseInternal*>((uint64_t)(a2 + 2), (uint64_t)&v20, (uint64_t)&v32 + 8, (uint64_t)v7);
LABEL_18:
    a2[1] = v8;
    quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)&v20);
    return;
  }
  if (!quasar::MetaInfo::hasSenses((const quasar::TranslationPhraseInternal *)((char *)v4 + 192)))
  {
    if (quasar::gLogLevel >= 5)
    {
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v26 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"1-best hypothesis has no ambiguity annotation, sending only this hypothesis", 75);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v20);
    }
    quasar::TranslationPhraseInternal::TranslationPhraseInternal((std::string *)&v20, *(const quasar::TranslationPhraseInternal **)a1);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    v15 = a2;
    LOBYTE(v16) = 0;
    v13 = (char *)operator new(0xC8uLL);
    *a2 = (uint64_t)v13;
    a2[1] = (uint64_t)v13;
    a2[2] = (uint64_t)(v13 + 200);
    v8 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>,quasar::TranslationPhraseInternal const*,quasar::TranslationPhraseInternal const*,quasar::TranslationPhraseInternal*>((uint64_t)(a2 + 2), (uint64_t)&v20, (uint64_t)&v32 + 8, (uint64_t)v13);
    goto LABEL_18;
  }
  quasar::FilterBlock::getAlternatives(a1, (uint64_t *)&v15);
  v10 = (uint64_t)v15;
  v9 = v16;
  if (0x8F5C28F5C28F5C29 * ((v16 - (uint64_t)v15) >> 3) > 1)
  {
    if (quasar::gLogLevel >= 5)
    {
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v26 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"ambiguity found: ", 17);
      v14 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" alternative(s)", 15);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v20);
      v10 = (uint64_t)v15;
      v9 = v16;
    }
    *a2 = v10;
    a2[1] = v9;
    a2[2] = v17;
    v16 = 0;
    v17 = 0;
    v15 = 0;
  }
  else
  {
    if (quasar::gLogLevel >= 5)
    {
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v26 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"no ambiguity found: ", 20);
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" alternative(s)", 15);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v20);
    }
    quasar::TranslationPhraseInternal::TranslationPhraseInternal((std::string *)&v20, *(const quasar::TranslationPhraseInternal **)a1);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    v18 = a2;
    v19 = 0;
    v12 = (char *)operator new(0xC8uLL);
    *a2 = (uint64_t)v12;
    a2[1] = (uint64_t)v12;
    a2[2] = (uint64_t)(v12 + 200);
    a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>,quasar::TranslationPhraseInternal const*,quasar::TranslationPhraseInternal const*,quasar::TranslationPhraseInternal*>((uint64_t)(a2 + 2), (uint64_t)&v20, (uint64_t)&v32 + 8, (uint64_t)v12);
    quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)&v20);
  }
  *(_QWORD *)&v20 = &v15;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_1AD7A2DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  a15 = (void **)&a10;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

void quasar::FilterBlock::filterBasedOnStructuredPredition(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t **v19;
  std::string *v20;
  std::string *v21;
  __int128 *v22;
  __int128 *v23;
  __int128 v24;
  int v25;
  uint64_t v26;
  std::string v28;
  std::string v29;
  std::string __p;
  int v31;
  std::string v32;
  std::string *v33;
  std::string *v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t *v53;
  _QWORD *v54[2];
  _DWORD *v55;

  v54[0] = 0;
  v54[1] = 0;
  v53 = (uint64_t *)v54;
  v2 = *a1;
  v1 = a1[1];
  if (*a1 != v1)
  {
    do
    {
      v3 = quasar::MetaInfo::structuredPrediction((uint64_t *)(v2 + 192), (uint64_t)"gender", 6);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 32);
        v5 = *(_QWORD *)(v3 + 40);
        if (v4 != v5)
        {
          v6 = (int *)(v3 + 24);
          v7 = v4 + 48;
          do
          {
            if (*(_QWORD *)(v7 + 8) == *(_QWORD *)(v7 + 16))
            {
              if (quasar::gLogLevel >= 4)
              {
                v51 = 0u;
                v52 = 0u;
                v49 = 0u;
                v50 = 0u;
                v47 = 0u;
                v48 = 0u;
                v45 = 0u;
                v46 = 0u;
                v43 = 0u;
                v44 = 0u;
                v41 = 0u;
                v42 = 0u;
                v39 = 0u;
                v40 = 0u;
                v37 = 0u;
                v38 = 0u;
                v36 = 0u;
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v36);
                v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"Source span: ", 13);
                v9 = quasar::operator<<(v8);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" in group: ", 11);
                v10 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" doesn't have any projections. Removing this span from gender_alternatives.", 75);
                quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v36);
              }
              *(_QWORD *)&v36 = v6;
              v11 = std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v53, v6, (uint64_t)&std::piecewise_construct, (_DWORD **)&v36);
              std::__tree<quasar::MetaInfo::StructuredPrediction::Span::Range>::__emplace_unique_key_args<quasar::MetaInfo::StructuredPrediction::Span::Range,quasar::MetaInfo::StructuredPrediction::Span::Range const&>(v11 + 5, (_DWORD *)v7, (uint64_t *)v7);
            }
            v12 = v7 + 32;
            v7 += 80;
          }
          while (v12 != v5);
        }
      }
      v2 += 200;
    }
    while (v2 != v1);
    v13 = *a1;
    v26 = a1[1];
    if (*a1 != v26)
    {
      do
      {
        v14 = quasar::MetaInfo::structuredPrediction((uint64_t *)(v13 + 192), (uint64_t)"gender", 6);
        v15 = v14;
        if (v14)
        {
          v33 = 0;
          v34 = 0;
          v35 = 0;
          v17 = *(_QWORD *)(v14 + 32);
          v16 = *(_QWORD *)(v14 + 40);
          if (v17 == v16)
            goto LABEL_24;
          v18 = (_DWORD *)(v14 + 24);
          do
          {
            v55 = v18;
            v19 = std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v53, (int *)(v15 + 24), (uint64_t)&std::piecewise_construct, &v55);
            if (!std::__tree<quasar::MetaInfo::StructuredPrediction::Span::Range>::__count_unique<quasar::MetaInfo::StructuredPrediction::Span::Range>((uint64_t)(v19 + 5), (_DWORD *)(v17 + 48)))
            {
              v20 = v34;
              if ((unint64_t)v34 >= v35)
              {
                v21 = (std::string *)std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__emplace_back_slow_path<quasar::MetaInfo::StructuredPrediction::Span const&>((uint64_t *)&v33, (__int128 *)v17);
              }
              else
              {
                std::allocator<quasar::MetaInfo::StructuredPrediction::Span>::construct[abi:ne180100]<quasar::MetaInfo::StructuredPrediction::Span,quasar::MetaInfo::StructuredPrediction::Span const&>((int)&v35, v34, (__int128 *)v17);
                v21 = (std::string *)((char *)v20 + 80);
              }
              v34 = v21;
            }
            v17 += 80;
          }
          while (v17 != v16);
          v22 = (__int128 *)v33;
          v23 = (__int128 *)v34;
          if (v33 == v34)
          {
LABEL_24:
            if (quasar::gLogLevel >= 4)
            {
              v51 = 0u;
              v52 = 0u;
              v49 = 0u;
              v50 = 0u;
              v47 = 0u;
              v48 = 0u;
              v45 = 0u;
              v46 = 0u;
              v43 = 0u;
              v44 = 0u;
              v41 = 0u;
              v42 = 0u;
              v39 = 0u;
              v40 = 0u;
              v37 = 0u;
              v38 = 0u;
              v36 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v36);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"All gender alternative spans are filtered out. Removing gender_alternatives entry from meta info.", 97);
              quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v36);
            }
            quasar::MetaInfo::eraseStructuredPrediction((uint64_t *)(v13 + 192), (uint64_t)"gender", 6);
            quasar::MetaInfo::eraseStructuredPredictionToSourceTokenAlignments((uint64_t *)(v13 + 192), (uint64_t)"gender", 6);
          }
          else
          {
            if (*(char *)(v15 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)v15, *(_QWORD *)(v15 + 8));
              v22 = (__int128 *)v33;
              v23 = (__int128 *)v34;
            }
            else
            {
              v24 = *(_OWORD *)v15;
              v29.__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 + 16);
              *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v24;
            }
            v25 = *v18;
            memset(&v28, 0, sizeof(v28));
            std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__init_with_size[abi:ne180100]<quasar::MetaInfo::StructuredPrediction::Span*,quasar::MetaInfo::StructuredPrediction::Span*>(&v28, v22, v23, 0xCCCCCCCCCCCCCCCDLL * (v23 - v22));
            __p = v29;
            memset(&v29, 0, sizeof(v29));
            v31 = v25;
            v32 = v28;
            memset(&v28, 0, sizeof(v28));
            quasar::MetaInfo::setStructuredPrediction((quasar::MetaInfo::Impl **)(v13 + 192), (uint64_t)&__p);
            *(_QWORD *)&v36 = &v32;
            std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            *(_QWORD *)&v36 = &v28;
            std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
            if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v29.__r_.__value_.__l.__data_);
          }
          *(_QWORD *)&v36 = &v33;
          std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
        }
        v13 += 200;
      }
      while (v13 != v26);
    }
  }
  std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::destroy((uint64_t)&v53, v54[0]);
}

void sub_1AD7A325C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char *a34)
{
  uint64_t v34;

  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a34);
  a34 = &a31;
  std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
  std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::destroy(v34 - 128, *(_QWORD **)(v34 - 120));
  _Unwind_Resume(a1);
}

void quasar::MetaInfo::StructuredPrediction::~StructuredPrediction(void **this)
{
  void **v2;

  v2 = this + 4;
  std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void quasar::FilterBlock::process(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  int *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  void **v23;

  if (*a3 == a3[1])
  {
    if (quasar::gLogLevel >= 5)
    {
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      v13 = 0u;
      v14 = 0u;
      v11 = 0u;
      v12 = 0u;
      v9 = 0u;
      v10 = 0u;
      v7 = 0u;
      v8 = 0u;
      v6 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)"no hypotheses, sending empty list of hypotheses", 47);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v6);
    }
    quasar::ProcessingBlock::send((uint64_t)a1 + *(_QWORD *)(*a1 - 24), (uint64_t)a3, 0);
  }
  else
  {
    if (*(_BYTE *)quasar::OptionValue<BOOL>::value((_QWORD *)((char *)a1 + *(_QWORD *)(a1[60] - 24) + 480)))
    {
      quasar::FilterBlock::filterBasedOnAnnotations((uint64_t)a3, (uint64_t *)&v6);
    }
    else
    {
      v6 = 0uLL;
      *(_QWORD *)&v7 = 0;
      std::vector<quasar::TranslationPhraseInternal>::__init_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(&v6, *a3, a3[1], 0x8F5C28F5C28F5C29 * ((a3[1] - *a3) >> 3));
    }
    v5 = (int *)quasar::OptionValue<int>::value((_QWORD *)((char *)a1 + *(_QWORD *)(a1[41] - 24) + 328));
    quasar::FilterBlock::filterBasedOnNbestSizeLimit((uint64_t *)&v6, *v5);
    if (quasar::FilterBlock::hasLocaleMismatchedMetainfo((uint64_t)a1, (uint64_t *)&v6))
      std::vector<quasar::TranslationPhraseInternal>::resize((uint64_t *)&v6, 1uLL);
    if (*(_BYTE *)quasar::OptionValue<BOOL>::value(a1 + 79))
      quasar::FilterBlock::filterBasedOnStructuredPredition((uint64_t *)&v6);
    if (*((_QWORD *)&v6 + 1) - (_QWORD)v6 == 200)
      quasar::MetaInfo::eraseSenses((quasar::MetaInfo::Impl **)(v6 + 192));
    quasar::ProcessingBlock::send((uint64_t)a1 + *(_QWORD *)(*a1 - 24), (uint64_t)&v6, 0);
    v23 = (void **)&v6;
    std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v23);
  }
}

void sub_1AD7A34F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  _Unwind_Resume(a1);
}

void `virtual thunk to'quasar::FilterBlock::process(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  quasar::FilterBlock::process((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 96)), a2, a3);
}

uint64_t quasar::FilterBlock::minConfigVersion(quasar::FilterBlock *this)
{
  return 163;
}

uint64_t `virtual thunk to'quasar::FilterBlock::minConfigVersion(quasar::FilterBlock *this)
{
  return 163;
}

void quasar::ConfiguredProcessingBlock<quasar::FilterBlockOptions>::setContextProvider(uint64_t a1, uint64_t *a2)
{
  void (***v3)(uint64_t **__return_ptr);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t *v15;
  uint64_t *v16;

  v3 = (void (***)(uint64_t **__return_ptr))(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  (**v3)(&v15);
  v4 = v15;
  v5 = v16;
  if (v15 != v16)
  {
    do
    {
      v6 = *v4;
      v7 = a2[1];
      v13 = *a2;
      v14 = (std::__shared_weak_count *)v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      quasar::OptionValueBase::setContextProvider(v6, &v13);
      v10 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      ++v4;
    }
    while (v4 != v5);
    v4 = v15;
  }
  if (v4)
  {
    v16 = v4;
    operator delete(v4);
  }
}

void sub_1AD7A3618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::ConfiguredProcessingBlock<quasar::FilterBlockOptions>::getOptions(uint64_t a1)
{
  return a1 + 8;
}

void `virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::FilterBlockOptions>::setContextProvider(_QWORD *a1, uint64_t *a2)
{
  quasar::ConfiguredProcessingBlock<quasar::FilterBlockOptions>::setContextProvider((uint64_t)a1 + *(_QWORD *)(*a1 - 72), a2);
}

uint64_t `virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::FilterBlockOptions>::getOptions(_QWORD *a1)
{
  return (uint64_t)a1 + *(_QWORD *)(*a1 - 104) + 8;
}

void quasar::FilterBlock::~FilterBlock(quasar::FilterBlock *this)
{
  char **v1;

  *(_QWORD *)this = off_1E5D03818;
  v1 = (char **)((char *)this + 776);
  *((_QWORD *)this + 97) = &unk_1E5D038A0;
  quasar::FilterBlockOptions::~FilterBlockOptions((quasar::FilterBlock *)((char *)this + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v1);
}

{
  char **v1;

  *(_QWORD *)this = off_1E5D03818;
  v1 = (char **)((char *)this + 776);
  *((_QWORD *)this + 97) = &unk_1E5D038A0;
  quasar::FilterBlockOptions::~FilterBlockOptions((quasar::FilterBlock *)((char *)this + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v1);
  JUMPOUT(0x1AF44D190);
}

const char *quasar::FilterBlock::blockType(quasar::FilterBlock *this)
{
  return "FilterBlock";
}

void `virtual thunk to'quasar::FilterBlock::~FilterBlock(quasar::FilterBlock *this)
{
  _QWORD *v1;
  char **v2;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  *v1 = off_1E5D03818;
  v2 = (char **)(v1 + 97);
  v1[97] = &unk_1E5D038A0;
  quasar::FilterBlockOptions::~FilterBlockOptions((quasar::FilterBlockOptions *)(v1 + 1));
  quasar::ProcessingBlock::~ProcessingBlock(v2);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = off_1E5D03818;
  *((_QWORD *)v1 + 97) = &unk_1E5D038A0;
  quasar::FilterBlockOptions::~FilterBlockOptions((quasar::FilterBlockOptions *)(v1 + 8));
  quasar::ProcessingBlock::~ProcessingBlock((char **)v1 + 97);
  JUMPOUT(0x1AF44D190);
}

const char *`virtual thunk to'quasar::FilterBlock::blockType(quasar::FilterBlock *this)
{
  return "FilterBlock";
}

std::string *quasar::TranslationPhraseInternal::TranslationPhraseInternal(std::string *this, const quasar::TranslationPhraseInternal *a2)
{
  quasar::TranslationPhrase *v4;
  __int128 v5;

  v4 = quasar::TranslationPhrase::TranslationPhrase((quasar::TranslationPhrase *)this, a2);
  *((_QWORD *)v4 + 17) = 0;
  *((_QWORD *)v4 + 18) = 0;
  *((_QWORD *)v4 + 19) = 0;
  std::vector<quasar::TranslationTokenInternal>::__init_with_size[abi:ne180100]<quasar::TranslationTokenInternal*,quasar::TranslationTokenInternal*>((std::string *)((char *)v4 + 136), *((quasar::TranslationTokenInternal **)a2 + 17), *((quasar::TranslationTokenInternal **)a2 + 18), 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*((_QWORD *)a2 + 18) - *((_QWORD *)a2 + 17)) >> 3));
  this[6].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 20);
  if (*((char *)a2 + 191) < 0)
  {
    std::string::__init_copy_ctor_external(this + 7, *((const std::string::value_type **)a2 + 21), *((_QWORD *)a2 + 22));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 168);
    this[7].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 23);
    *(_OWORD *)&this[7].__r_.__value_.__l.__data_ = v5;
  }
  quasar::MetaInfo::MetaInfo((quasar::MetaInfo *)&this[8], (const quasar::TranslationPhraseInternal *)((char *)a2 + 192));
  return this;
}

void sub_1AD7A3870(_Unwind_Exception *a1, uint64_t a2, ...)
{
  quasar::TranslationPhrase *v2;
  va_list va;

  va_start(va, a2);
  std::vector<quasar::TranslationTokenInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  quasar::TranslationPhrase::~TranslationPhrase(v2);
  _Unwind_Resume(a1);
}

quasar::TranslationPhrase *quasar::TranslationPhrase::TranslationPhrase(quasar::TranslationPhrase *this, const quasar::TranslationPhrase *a2)
{
  uint64_t v4;
  __int128 v5;

  v4 = *(_QWORD *)a2;
  *((_BYTE *)this + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)this = v4;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  std::vector<quasar::TranslationToken>::__init_with_size[abi:ne180100]<quasar::TranslationToken*,quasar::TranslationToken*>((std::string *)((char *)this + 16), *((__int128 **)a2 + 2), *((__int128 **)a2 + 3), 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2)) >> 3));
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 40), *((const std::string::value_type **)a2 + 5), *((_QWORD *)a2 + 6));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 40);
    *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
    *(_OWORD *)((char *)this + 40) = v5;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 64), (__int128 *)a2 + 4);
  std::__optional_copy_base<std::vector<quasar::AlternativeSelectionSpan>,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 96, (uint64_t)a2 + 96);
  *((_WORD *)this + 64) = *((_WORD *)a2 + 64);
  return this;
}

void sub_1AD7A3988(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<quasar::TranslationToken>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void quasar::TranslationPhrase::~TranslationPhrase(quasar::TranslationPhrase *this)
{
  void **v2;

  if (*((_BYTE *)this + 120))
  {
    v2 = (void **)((char *)this + 96);
    std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100](&v2);
  }
  if (*((_BYTE *)this + 88) && *((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  v2 = (void **)((char *)this + 16);
  std::vector<quasar::TranslationToken>::__destroy_vector::operator()[abi:ne180100](&v2);
}

std::string *std::vector<quasar::TranslationToken>::__init_with_size[abi:ne180100]<quasar::TranslationToken*,quasar::TranslationToken*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::TranslationToken>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationToken>,quasar::TranslationToken*,quasar::TranslationToken*,quasar::TranslationToken*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1AD7A3AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<quasar::TranslationToken>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<quasar::TranslationToken>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x38E38E38E38E38FLL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationToken>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationToken>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(72 * a2);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationToken>,quasar::TranslationToken*,quasar::TranslationToken*,quasar::TranslationToken*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  int v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    v7 = a1;
    do
    {
      std::allocator<quasar::TranslationToken>::construct[abi:ne180100]<quasar::TranslationToken,quasar::TranslationToken&>(v7, v4, v6);
      v6 = (__int128 *)((char *)v6 + 72);
      v4 = v12 + 3;
      v12 += 3;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationToken>,quasar::TranslationToken*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1AD7A3C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationToken>,quasar::TranslationToken*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocator<quasar::TranslationToken>::construct[abi:ne180100]<quasar::TranslationToken,quasar::TranslationToken&>(int a1, std::string *this, __int128 *a3)
{
  __int128 v5;
  __int16 v6;
  _QWORD *result;
  std::string::size_type v8;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = *((_WORD *)a3 + 12);
  this[1].__r_.__value_.__l.__size_ = 0;
  LOWORD(this[1].__r_.__value_.__l.__data_) = v6;
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__r.__words[0] = 0;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&this[1].__r_.__value_.__l.__size_, *((const void **)a3 + 4), *((_QWORD *)a3 + 5), (uint64_t)(*((_QWORD *)a3 + 5) - *((_QWORD *)a3 + 4)) >> 2);
  v8 = *((_QWORD *)a3 + 7);
  LODWORD(this[2].__r_.__value_.__r.__words[2]) = *((_DWORD *)a3 + 16);
  this[2].__r_.__value_.__l.__size_ = v8;
  return result;
}

void sub_1AD7A3C94(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationToken>,quasar::TranslationToken*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationToken>,quasar::TranslationToken*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationToken>,quasar::TranslationToken*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 72;
      std::allocator<quasar::TranslationToken>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void quasar::TranslationToken::~TranslationToken(quasar::TranslationToken *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

std::string *std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](std::string *a1, __int128 *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(a1, a2);
  return a1;
}

void sub_1AD7A3DA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](v1);
  _Unwind_Resume(exception_object);
}

void std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((_BYTE *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v3 = *a2;
      this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

uint64_t std::__optional_copy_base<std::vector<quasar::AlternativeSelectionSpan>,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  std::__optional_storage_base<std::vector<quasar::AlternativeSelectionSpan>,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::vector<quasar::AlternativeSelectionSpan>,false> const&>((_QWORD *)a1, a2);
  return a1;
}

void sub_1AD7A3E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (*(_BYTE *)(v10 + 24))
  {
    a10 = v10;
    std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__optional_storage_base<std::vector<quasar::AlternativeSelectionSpan>,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::vector<quasar::AlternativeSelectionSpan>,false> const&>(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;

  if (*(_BYTE *)(a2 + 24))
  {
    v2 = result;
    *result = 0;
    result[1] = 0;
    result[2] = 0;
    result = std::vector<quasar::AlternativeSelectionSpan>::__init_with_size[abi:ne180100]<quasar::AlternativeSelectionSpan*,quasar::AlternativeSelectionSpan*>(result, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    *((_BYTE *)v2 + 24) = 1;
  }
  return result;
}

_QWORD *std::vector<quasar::AlternativeSelectionSpan>::__init_with_size[abi:ne180100]<quasar::AlternativeSelectionSpan*,quasar::AlternativeSelectionSpan*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::AlternativeSelectionSpan>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::AlternativeSelectionSpan>,quasar::AlternativeSelectionSpan*,quasar::AlternativeSelectionSpan*,quasar::AlternativeSelectionSpan*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1AD7A3F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<quasar::AlternativeSelectionSpan>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x666666666666667)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::AlternativeSelectionSpan>,quasar::AlternativeSelectionSpan*,quasar::AlternativeSelectionSpan*,quasar::AlternativeSelectionSpan*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_OWORD *)v4 = *(_OWORD *)v6;
      *(_QWORD *)(v4 + 24) = 0;
      *(_QWORD *)(v4 + 32) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      std::vector<quasar::AlternativeSelectionSpan::Alternative>::__init_with_size[abi:ne180100]<quasar::AlternativeSelectionSpan::Alternative*,quasar::AlternativeSelectionSpan::Alternative*>((char *)(v4 + 16), *(_QWORD **)(v6 + 16), *(_QWORD **)(v6 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v6 + 24) - *(_QWORD *)(v6 + 16)) >> 3));
      v4 = v11 + 40;
      v11 += 40;
      v6 += 40;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::AlternativeSelectionSpan>,quasar::AlternativeSelectionSpan*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1AD7A4040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::AlternativeSelectionSpan>,quasar::AlternativeSelectionSpan*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *std::vector<quasar::AlternativeSelectionSpan::Alternative>::__init_with_size[abi:ne180100]<quasar::AlternativeSelectionSpan::Alternative*,quasar::AlternativeSelectionSpan::Alternative*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v7[2] = a2[2];
      a2 += 3;
      v7 += 3;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1AD7A40E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::AlternativeSelectionSpan>,quasar::AlternativeSelectionSpan*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::AlternativeSelectionSpan>,quasar::AlternativeSelectionSpan*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::AlternativeSelectionSpan>,quasar::AlternativeSelectionSpan*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    do
    {
      v3 = v1 - 40;
      v4 = (void **)(v1 - 24);
      std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100](&v4);
      v1 = v3;
    }
    while (v3 != v2);
  }
}

std::string *std::vector<quasar::TranslationTokenInternal>::__init_with_size[abi:ne180100]<quasar::TranslationTokenInternal*,quasar::TranslationTokenInternal*>(std::string *result, quasar::TranslationTokenInternal *a2, quasar::TranslationTokenInternal *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::TranslationTokenInternal>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationTokenInternal>,quasar::TranslationTokenInternal*,quasar::TranslationTokenInternal*,quasar::TranslationTokenInternal*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1AD7A41E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<quasar::TranslationTokenInternal>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<quasar::TranslationTokenInternal>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x1E1E1E1E1E1E1E2)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationTokenInternal>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[136 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationTokenInternal>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1E1E1E1E1E1E1E2)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(136 * a2);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationTokenInternal>,quasar::TranslationTokenInternal*,quasar::TranslationTokenInternal*,quasar::TranslationTokenInternal*>(uint64_t a1, quasar::TranslationTokenInternal *a2, quasar::TranslationTokenInternal *a3, std::string *this)
{
  std::string *v4;
  const quasar::TranslationTokenInternal *v6;
  _QWORD v8[3];
  char v9;
  std::string *v10;
  std::string *v11;

  v4 = this;
  v10 = this;
  v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      quasar::TranslationTokenInternal::TranslationTokenInternal(v4, v6);
      v6 = (const quasar::TranslationTokenInternal *)((char *)v6 + 136);
      v4 = (std::string *)((char *)v11 + 136);
      v11 = (std::string *)((char *)v11 + 136);
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationTokenInternal>,quasar::TranslationTokenInternal*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1AD7A4328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationTokenInternal>,quasar::TranslationTokenInternal*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *quasar::TranslationTokenInternal::TranslationTokenInternal(std::string *this, const quasar::TranslationTokenInternal *a2)
{
  __int128 v4;
  __int16 v5;
  std::string::size_type v6;
  __int128 v7;
  std::string::size_type v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *((_WORD *)a2 + 12);
  this[1].__r_.__value_.__l.__size_ = 0;
  LOWORD(this[1].__r_.__value_.__l.__data_) = v5;
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__r.__words[0] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&this[1].__r_.__value_.__l.__size_, *((const void **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
  v6 = *((_QWORD *)a2 + 7);
  LODWORD(this[2].__r_.__value_.__r.__words[2]) = *((_DWORD *)a2 + 16);
  this[2].__r_.__value_.__l.__size_ = v6;
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v7 = *(_OWORD *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 11);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v7;
  }
  v8 = *((_QWORD *)a2 + 12);
  this[4].__r_.__value_.__l.__size_ = 0;
  this[4].__r_.__value_.__r.__words[0] = v8;
  this[4].__r_.__value_.__r.__words[2] = 0;
  this[5].__r_.__value_.__r.__words[0] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&this[4].__r_.__value_.__l.__size_, *((const void **)a2 + 13), *((_QWORD *)a2 + 14), (uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 2);
  this[5].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 16);
  return this;
}

void sub_1AD7A4420(_Unwind_Exception *a1)
{
  quasar::TranslationToken *v1;

  quasar::TranslationToken::~TranslationToken(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1AD7A44C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationTokenInternal>,quasar::TranslationTokenInternal*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationTokenInternal>,quasar::TranslationTokenInternal*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationTokenInternal>,quasar::TranslationTokenInternal*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 136;
      std::allocator<quasar::TranslationTokenInternal>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

_QWORD *std::vector<quasar::TranslationPhraseInternal>::__init_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::TranslationPhraseInternal>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>,quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1AD7A45C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<quasar::TranslationPhraseInternal>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x147AE147AE147AFLL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[200 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x147AE147AE147AFLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(200 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>,quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      quasar::TranslationPhraseInternal::TranslationPhraseInternal((std::string *)(a4 + v7), (const quasar::TranslationPhraseInternal *)(a2 + v7));
      v7 += 200;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1AD7A46DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 200;
    do
    {
      quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)(v4 + v2));
      v2 -= 200;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void quasar::FilterBlockOptions::~FilterBlockOptions(quasar::FilterBlockOptions *this)
{
  *(_QWORD *)this = &off_1E5D36938;
  *((_QWORD *)this + 78) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 744, *((char **)this + 94));
  *((_QWORD *)this + 78) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 712);
  if (*((char *)this + 703) < 0)
    operator delete(*((void **)this + 85));
  if (*((char *)this + 679) < 0)
    operator delete(*((void **)this + 82));
  if (*((char *)this + 655) < 0)
    operator delete(*((void **)this + 79));
  *((_QWORD *)this + 60) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 600, *((char **)this + 76));
  *((_QWORD *)this + 60) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 568);
  if (*((char *)this + 559) < 0)
    operator delete(*((void **)this + 67));
  if (*((char *)this + 535) < 0)
    operator delete(*((void **)this + 64));
  if (*((char *)this + 511) < 0)
    operator delete(*((void **)this + 61));
  *((_QWORD *)this + 41) = &unk_1E5D348D0;
  std::__tree<std::string>::destroy((uint64_t)this + 448, *((char **)this + 57));
  *((_QWORD *)this + 41) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 416);
  if (*((char *)this + 407) < 0)
    operator delete(*((void **)this + 48));
  if (*((char *)this + 383) < 0)
    operator delete(*((void **)this + 45));
  if (*((char *)this + 359) < 0)
    operator delete(*((void **)this + 42));
  *((_QWORD *)this + 20) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 296, *((_QWORD **)this + 38));
  if (*((char *)this + 287) < 0)
    operator delete(*((void **)this + 33));
  *((_QWORD *)this + 20) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 248);
  if (*((char *)this + 239) < 0)
    operator delete(*((void **)this + 27));
  if (*((char *)this + 215) < 0)
    operator delete(*((void **)this + 24));
  if (*((char *)this + 191) < 0)
    operator delete(*((void **)this + 21));
  *((_QWORD *)this + 2) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 136, *((char **)this + 18));
  *((_QWORD *)this + 2) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

void quasar::OptionValue<BOOL>::updateOptionalFromPtree(uint64_t a1, uint64_t a2, const void **a3)
{
  const std::string::value_type *v5;
  unsigned __int16 v6;
  size_t v7;
  std::string *v8;
  const void *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  std::string v15;
  std::string __str;

  v5 = (const std::string::value_type *)(a1 + 8);
  v6 = quasar::getOptional<BOOL>(a2, a1 + 8);
  if (*((char *)a3 + 23) >= 0)
    v7 = *((unsigned __int8 *)a3 + 23);
  else
    v7 = (size_t)a3[1];
  v8 = &v15;
  std::string::basic_string[abi:ne180100]((uint64_t)&v15, v7 + 1);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v8 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if (v7)
  {
    if (*((char *)a3 + 23) >= 0)
      v9 = a3;
    else
      v9 = *a3;
    memmove(v8, v9, v7);
  }
  *(_WORD *)((char *)&v8->__r_.__value_.__l.__data_ + v7) = 46;
  v10 = *(char *)(a1 + 31);
  if (v10 >= 0)
    v11 = v5;
  else
    v11 = *(const std::string::value_type **)(a1 + 8);
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 31);
  else
    v12 = *(_QWORD *)(a1 + 16);
  v13 = std::string::append(&v15, v11, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (v6 >= 0x100u)
  {
    *(_BYTE *)(a1 + 104) = v6;
    std::string::operator=((std::string *)(a1 + 32), &__str);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
}

void sub_1AD7A4A28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OptionValue<BOOL>::debugInfo(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  BOOL v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD v31[2];
  _QWORD v32[11];
  char v33;
  uint64_t v34;

  v2 = quasar::OptionValue<BOOL>::fallback(a1);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v31);
  v3 = *(char *)(a1 + 31);
  if (v3 >= 0)
    v4 = a1 + 8;
  else
    v4 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a1 + 31);
  else
    v5 = *(_QWORD *)(a1 + 16);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" (", 2);
  v11 = *(_QWORD *)(v2 + 32);
  v10 = v2 + 32;
  v9 = v11;
  v12 = *(char *)(v10 + 23);
  if (v12 >= 0)
    v13 = v10;
  else
    v13 = v9;
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(v10 + 23);
  else
    v14 = *(_QWORD *)(v10 + 8);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v13, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)")", 1);
  if (*(_QWORD *)(a1 + 136))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" overrides: [", 13);
    v16 = *(_QWORD **)(a1 + 120);
    v17 = (_QWORD *)(a1 + 128);
    if (v16 != (_QWORD *)(a1 + 128))
    {
      do
      {
        v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"\"", 1);
        v19 = *((char *)v16 + 55);
        if (v19 >= 0)
          v20 = (uint64_t)(v16 + 4);
        else
          v20 = v16[4];
        if (v19 >= 0)
          v21 = *((unsigned __int8 *)v16 + 55);
        else
          v21 = v16[5];
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"\": ", 3);
        std::ostream::operator<<();
        v23 = (_QWORD *)*v17;
        v24 = (_QWORD *)(a1 + 128);
        if (*v17)
        {
          do
          {
            v25 = v23;
            v23 = (_QWORD *)v23[1];
          }
          while (v23);
        }
        else
        {
          do
          {
            v25 = (_QWORD *)v24[2];
            v26 = *v25 == (_QWORD)v24;
            v24 = v25;
          }
          while (v26);
        }
        if (v16 != v25)
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)", ", 2);
        v27 = (_QWORD *)v16[1];
        if (v27)
        {
          do
          {
            v28 = v27;
            v27 = (_QWORD *)*v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            v28 = (_QWORD *)v16[2];
            v26 = *v28 == (_QWORD)v16;
            v16 = v28;
          }
          while (!v26);
        }
        v16 = v28;
      }
      while (v28 != v17);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"]", 1);
  }
  std::stringbuf::str();
  v31[0] = *MEMORY[0x1E0DE4F50];
  v29 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v31 + *(_QWORD *)(v31[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v32[0] = v29;
  v32[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v33 < 0)
    operator delete((void *)v32[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v34);
}

void sub_1AD7A4CC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *quasar::OptionValue<BOOL>::addOverride(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *result;
  char v6;
  __int16 v7;
  _QWORD v8[2];

  v8[0] = a2;
  v8[1] = a3;
  result = (uint64_t *)quasar::getOptional<BOOL>(a4, a1 + 8);
  v7 = (__int16)result;
  if ((unsigned __int16)result >= 0x100u)
  {
    v6 = (char)result;
    result = (uint64_t *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string_view>(a1 + 120, (uint64_t)v8);
    if ((uint64_t *)(a1 + 128) == result)
      return std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<void>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_hint_unique_impl<std::string_view &,BOOL &>((uint64_t **)(a1 + 120), result, (uint64_t)v8, &v7);
    else
      *((_BYTE *)result + 56) = v6;
  }
  return result;
}

uint64_t quasar::OptionValue<BOOL>::isOverridable()
{
  return 0;
}

uint64_t quasar::OptionValue<BOOL>::fallback(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  int v3;
  uint64_t *v4;
  int v5;

  do
  {
    v1 = a1;
    a1 = *(_QWORD *)(a1 + 112);
    if (!a1)
      break;
    v2 = (uint64_t *)(v1 + 32);
    v3 = *(char *)(v1 + 55);
    if (v3 < 0)
    {
      if (*(_QWORD *)(v1 + 40) != 9)
        return v1;
      v2 = (uint64_t *)*v2;
    }
    else if (v3 != 9)
    {
      return v1;
    }
    v4 = (uint64_t *)*v2;
    v5 = *((unsigned __int8 *)v2 + 8);
  }
  while (v4 == (uint64_t *)0x746C75616665643CLL && v5 == 62);
  return v1;
}

uint64_t *std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<void>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_hint_unique_impl<std::string_view &,BOOL &>(uint64_t **a1, uint64_t *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t **v6;
  uint64_t *v7;
  void **v8;
  uint64_t v10;
  const void **v11;
  void *__p;
  uint64_t v13;

  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<void>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__construct_node<std::string_view &,BOOL &>((uint64_t)a1, a3, a4, (uint64_t)&__p);
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v11, &v10, (const void **)__p + 4);
  v7 = *v6;
  if (*v6)
  {
    v8 = (void **)__p;
    __p = 0;
    if (v8)
      std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100]((uint64_t)&v13, v8);
  }
  else
  {
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v11, v6, (uint64_t *)__p);
    return (uint64_t *)__p;
  }
  return v7;
}

void sub_1AD7A4E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<void>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__construct_node<std::string_view &,BOOL &>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 8;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  result = std::pair<std::string const,BOOL>::pair[abi:ne180100]<std::string_view &,BOOL &,0>(v8 + 4, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1AD7A4EF0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,BOOL>::pair[abi:ne180100]<std::string_view &,BOOL &,0>(_QWORD *__dst, uint64_t a2, _BYTE *a3)
{
  size_t v4;
  const void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = *(const void **)a2;
  if (v4 >= 0x17)
  {
    v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v8 = v4 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    __dst[1] = v4;
    __dst[2] = v9 | 0x8000000000000000;
    *__dst = v7;
  }
  else
  {
    *((_BYTE *)__dst + 23) = v4;
    v7 = __dst;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v7, v6, v4);
LABEL_9:
  *((_BYTE *)v7 + v4) = 0;
  *((_BYTE *)__dst + 24) = *a3;
  return __dst;
}

void quasar::OptionValue<int>::updateOptionalFromPtree(uint64_t a1, uint64_t a2, const void **a3)
{
  const std::string::value_type *v5;
  uint64_t v6;
  size_t v7;
  std::string *v8;
  const void *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  std::string v15;
  std::string __str;

  v5 = (const std::string::value_type *)(a1 + 8);
  v6 = quasar::getOptional<int>(a2, a1 + 8);
  if (*((char *)a3 + 23) >= 0)
    v7 = *((unsigned __int8 *)a3 + 23);
  else
    v7 = (size_t)a3[1];
  v8 = &v15;
  std::string::basic_string[abi:ne180100]((uint64_t)&v15, v7 + 1);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v8 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if (v7)
  {
    if (*((char *)a3 + 23) >= 0)
      v9 = a3;
    else
      v9 = *a3;
    memmove(v8, v9, v7);
  }
  *(_WORD *)((char *)&v8->__r_.__value_.__l.__data_ + v7) = 46;
  v10 = *(char *)(a1 + 31);
  if (v10 >= 0)
    v11 = v5;
  else
    v11 = *(const std::string::value_type **)(a1 + 8);
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 31);
  else
    v12 = *(_QWORD *)(a1 + 16);
  v13 = std::string::append(&v15, v11, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if ((v6 & 0xFF00000000) != 0)
  {
    *(_DWORD *)(a1 + 104) = v6;
    std::string::operator=((std::string *)(a1 + 32), &__str);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
}

void sub_1AD7A50DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OptionValue<int>::addOverride(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  int v6;
  uint64_t v7;
  _QWORD v8[2];

  v8[0] = a2;
  v8[1] = a3;
  result = quasar::getOptional<int>(a4, a1 + 8);
  v7 = result;
  if ((result & 0xFF00000000) != 0)
  {
    v6 = result;
    result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string_view>(a1 + 120, (uint64_t)v8);
    if (a1 + 128 == result)
      return (uint64_t)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<void>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_hint_unique_impl<std::string_view &,int &>((uint64_t **)(a1 + 120), (uint64_t *)result, (uint64_t)v8, &v7);
    else
      *(_DWORD *)(result + 56) = v6;
  }
  return result;
}

uint64_t quasar::OptionValue<int>::isOverridable()
{
  return 0;
}

uint64_t *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<void>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_hint_unique_impl<std::string_view &,int &>(uint64_t **a1, uint64_t *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t **v6;
  uint64_t *v7;
  void **v8;
  uint64_t v10;
  const void **v11;
  void *__p;
  uint64_t v13;

  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<void>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::string_view &,int &>((uint64_t)a1, a3, a4, (uint64_t)&__p);
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v11, &v10, (const void **)__p + 4);
  v7 = *v6;
  if (*v6)
  {
    v8 = (void **)__p;
    __p = 0;
    if (v8)
      std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100]((uint64_t)&v13, v8);
  }
  else
  {
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v11, v6, (uint64_t *)__p);
    return (uint64_t *)__p;
  }
  return v7;
}

void sub_1AD7A522C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<void>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::string_view &,int &>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 8;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  result = std::pair<std::string const,int>::pair[abi:ne180100]<std::string_view &,int &,0>(v8 + 4, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1AD7A52BC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,int>::pair[abi:ne180100]<std::string_view &,int &,0>(_QWORD *__dst, uint64_t a2, _DWORD *a3)
{
  size_t v4;
  const void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = *(const void **)a2;
  if (v4 >= 0x17)
  {
    v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v8 = v4 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    __dst[1] = v4;
    __dst[2] = v9 | 0x8000000000000000;
    *__dst = v7;
  }
  else
  {
    *((_BYTE *)__dst + 23) = v4;
    v7 = __dst;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v7, v6, v4);
LABEL_9:
  *((_BYTE *)v7 + v4) = 0;
  *((_DWORD *)__dst + 6) = *a3;
  return __dst;
}

void std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::allocator<quasar::MetaInfo::StructuredPrediction::Span>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::MetaInfo::StructuredPrediction::Span>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 56);
  if (v3)
  {
    *(_QWORD *)(a2 + 64) = v3;
    operator delete(v3);
  }
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t quasar::OptionValue<int>::value(_QWORD *a1)
{
  uint64_t v2;
  const void ****v3;
  std::__shared_weak_count *v4;
  const void ***v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  const void **v10;
  const void **v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  v2 = quasar::OptionValue<BOOL>::fallback((uint64_t)a1) + 104;
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 32))(a1))
  {
    v3 = (const void ****)a1[11];
    v4 = (std::__shared_weak_count *)v3[1];
    if (v4)
    {
      v5 = *v3;
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v7 = __ldxr(p_shared_weak_owners);
      while (__stxr(v7 + 1, p_shared_weak_owners));
      v8 = std::__shared_weak_count::lock(v4);
      if (!v8)
      {
        v9 = v4;
        goto LABEL_17;
      }
      v9 = v8;
      std::__shared_weak_count::__release_weak(v4);
      if (v5)
      {
        v10 = *v5;
        v11 = v5[1];
        if (*v5 != v11)
        {
          v12 = (uint64_t)(a1 + 15);
          v13 = a1 + 16;
          do
          {
            v14 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(v12, v10);
            if (v13 != (_QWORD *)v14)
              v2 = v14 + 56;
            v10 += 3;
          }
          while (v10 != v11);
        }
      }
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
LABEL_17:
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  return v2;
}

void sub_1AD7A5570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::TranslationPhraseInternal>::__push_back_slow_path<quasar::TranslationPhraseInternal const&>(uint64_t *a1, const quasar::TranslationPhraseInternal *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  std::string *v14;
  std::string::value_type *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x8F5C28F5C28F5C29 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x147AE147AE147AELL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x8F5C28F5C28F5C29 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xA3D70A3D70A3D7)
    v9 = 0x147AE147AE147AELL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (std::string *)&v10[200 * v4];
  v16 = &v10[200 * v9];
  quasar::TranslationPhraseInternal::TranslationPhraseInternal(v14, a2);
  v15 = &v14[8].__r_.__value_.__s.__data_[8];
  std::vector<quasar::TranslationPhraseInternal>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<quasar::TranslationPhraseInternal>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1AD7A568C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::TranslationPhraseInternal>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::TranslationPhraseInternal>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>,std::reverse_iterator<quasar::TranslationPhraseInternal*>,std::reverse_iterator<quasar::TranslationPhraseInternal*>,std::reverse_iterator<quasar::TranslationPhraseInternal*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>,std::reverse_iterator<quasar::TranslationPhraseInternal*>,std::reverse_iterator<quasar::TranslationPhraseInternal*>,std::reverse_iterator<quasar::TranslationPhraseInternal*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  std::string *v12;

  v10 = 0;
  v11 = a7 - 200;
  while (a3 + v10 != a5)
  {
    v12 = (std::string *)(v11 + v10);
    v10 -= 200;
    quasar::TranslationPhraseInternal::TranslationPhraseInternal(v12, (const quasar::TranslationPhraseInternal *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<quasar::TranslationPhraseInternal>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 200;
    quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)(i - 200));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>,quasar::TranslationPhraseInternal const*,quasar::TranslationPhraseInternal const*,quasar::TranslationPhraseInternal*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      quasar::TranslationPhraseInternal::TranslationPhraseInternal((std::string *)(a4 + v7), (const quasar::TranslationPhraseInternal *)(a2 + v7));
      v7 += 200;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1AD7A584C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 200;
    do
    {
      quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)(v4 + v2));
      v2 -= 200;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

quasar::TranslationPhraseInternal *std::vector<quasar::TranslationPhraseInternal>::__append(uint64_t *a1, unint64_t a2)
{
  quasar::TranslationPhraseInternal *result;
  uint64_t v5;
  uint64_t v6;
  quasar::TranslationPhraseInternal *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  quasar::TranslationPhraseInternal *v13;
  uint64_t v14;
  quasar::TranslationPhraseInternal *v15;
  uint64_t v16;
  quasar::TranslationPhraseInternal *v17;
  _QWORD v18[2];
  quasar::TranslationPhraseInternal *v19;
  char *v20;
  quasar::TranslationPhraseInternal *v21;

  v6 = a1[2];
  result = (quasar::TranslationPhraseInternal *)(a1 + 2);
  v5 = v6;
  v7 = (quasar::TranslationPhraseInternal *)*((_QWORD *)result - 1);
  if (0x8F5C28F5C28F5C29 * ((v6 - (uint64_t)v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = (quasar::TranslationPhraseInternal *)((char *)v7 + 200 * a2);
      v14 = 200 * a2;
      do
      {
        result = quasar::TranslationPhraseInternal::TranslationPhraseInternal(v7);
        v7 = (quasar::TranslationPhraseInternal *)((char *)v7 + 200);
        v14 -= 200;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    v8 = 0x8F5C28F5C28F5C29 * (((uint64_t)v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x147AE147AE147AELL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x8F5C28F5C28F5C29 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0xA3D70A3D70A3D7)
      v11 = 0x147AE147AE147AELL;
    else
      v11 = v9;
    v21 = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>>((uint64_t)result, v11);
    else
      v12 = 0;
    v15 = (quasar::TranslationPhraseInternal *)&v12[200 * v8];
    v18[0] = v12;
    v18[1] = v15;
    v19 = v15;
    v20 = &v12[200 * v11];
    v16 = 200 * a2;
    v17 = (quasar::TranslationPhraseInternal *)((char *)v15 + 200 * a2);
    do
    {
      quasar::TranslationPhraseInternal::TranslationPhraseInternal(v15);
      v15 = (quasar::TranslationPhraseInternal *)((char *)v15 + 200);
      v16 -= 200;
    }
    while (v16);
    v19 = v17;
    std::vector<quasar::TranslationPhraseInternal>::__swap_out_circular_buffer(a1, v18);
    return (quasar::TranslationPhraseInternal *)std::__split_buffer<quasar::TranslationPhraseInternal>::~__split_buffer((uint64_t)v18);
  }
  return result;
}

void sub_1AD7A59D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::TranslationPhraseInternal>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

quasar::TranslationPhraseInternal *quasar::TranslationPhraseInternal::TranslationPhraseInternal(quasar::TranslationPhraseInternal *this)
{
  *(_QWORD *)this = 0xBF80000000000000;
  *((_BYTE *)this + 8) = 0;
  *((_BYTE *)this + 88) = 0;
  *((_BYTE *)this + 96) = 0;
  *((_BYTE *)this + 120) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_BYTE *)this + 64) = 0;
  *((_WORD *)this + 64) = 1;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((_QWORD *)this + 23) = 0;
  quasar::MetaInfo::MetaInfo((quasar::TranslationPhraseInternal *)((char *)this + 192));
  return this;
}

void sub_1AD7A5A7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 191) < 0)
    operator delete(*(void **)(v2 + 168));
  std::vector<quasar::TranslationTokenInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  quasar::TranslationPhrase::~TranslationPhrase((quasar::TranslationPhrase *)v2);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::destroy(a1, a2[1]);
    std::__tree<int>::destroy((uint64_t)(a2 + 5), (_QWORD *)a2[6]);
    operator delete(a2);
  }
}

uint64_t **std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 5) = v11 + 12;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t *std::__tree<quasar::MetaInfo::StructuredPrediction::Span::Range>::__emplace_unique_key_args<quasar::MetaInfo::StructuredPrediction::Span::Range,quasar::MetaInfo::StructuredPrediction::Span::Range const&>(uint64_t **a1, _DWORD *a2, uint64_t *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (uint64_t **)std::__tree<quasar::MetaInfo::StructuredPrediction::Span::Range>::__find_equal<quasar::MetaInfo::StructuredPrediction::Span::Range>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v6 + 28) = *a3;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

_QWORD *std::__tree<quasar::MetaInfo::StructuredPrediction::Span::Range>::__find_equal<quasar::MetaInfo::StructuredPrediction::Span::Range>(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  _DWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = (_QWORD *)v4;
        v8 = (_DWORD *)(v4 + 28);
        if (!quasar::operator<(a3, (_DWORD *)(v4 + 28)))
          break;
        v4 = *v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!quasar::operator<(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t std::__tree<quasar::MetaInfo::StructuredPrediction::Span::Range>::__count_unique<quasar::MetaInfo::StructuredPrediction::Span::Range>(uint64_t a1, _DWORD *a2)
{
  uint64_t *v2;
  uint64_t v4;

  v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    v4 = 1;
    do
    {
      if (!quasar::operator<(a2, (_DWORD *)v2 + 7))
      {
        if (!quasar::operator<((_DWORD *)v2 + 7, a2))
          return v4;
        ++v2;
      }
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__emplace_back_slow_path<quasar::MetaInfo::StructuredPrediction::Span const&>(uint64_t *a1, __int128 *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  std::string *v11;
  std::string::value_type *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v6 = 0x333333333333333;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = (std::string *)&v7[80 * v3];
  v13 = &v7[80 * v6];
  std::allocator<quasar::MetaInfo::StructuredPrediction::Span>::construct[abi:ne180100]<quasar::MetaInfo::StructuredPrediction::Span,quasar::MetaInfo::StructuredPrediction::Span const&>((_DWORD)a1 + 16, v11, a2);
  v12 = &v11[3].__r_.__value_.__s.__data_[8];
  std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<quasar::MetaInfo::StructuredPrediction::Span>::~__split_buffer(&v10);
  return v8;
}

void sub_1AD7A5E34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::MetaInfo::StructuredPrediction::Span>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::allocator<quasar::MetaInfo::StructuredPrediction::Span>::construct[abi:ne180100]<quasar::MetaInfo::StructuredPrediction::Span,quasar::MetaInfo::StructuredPrediction::Span const&>(int a1, std::string *this, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  std::string::size_type v7;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a3 + 3), *((_QWORD *)a3 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a3 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  v7 = *((_QWORD *)a3 + 6);
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[0] = v7;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  return std::vector<quasar::MetaInfo::StructuredPrediction::Span::Range>::__init_with_size[abi:ne180100]<quasar::MetaInfo::StructuredPrediction::Span::Range*,quasar::MetaInfo::StructuredPrediction::Span::Range*>(&this[2].__r_.__value_.__l.__size_, *((const void **)a3 + 7), *((_QWORD *)a3 + 8), (uint64_t)(*((_QWORD *)a3 + 8) - *((_QWORD *)a3 + 7)) >> 3);
}

void sub_1AD7A5EEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<quasar::MetaInfo::StructuredPrediction::Span::Range>::__init_with_size[abi:ne180100]<quasar::MetaInfo::StructuredPrediction::Span::Range*,quasar::MetaInfo::StructuredPrediction::Span::Range*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1AD7A5F7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>,std::reverse_iterator<quasar::MetaInfo::StructuredPrediction::Span*>,std::reverse_iterator<quasar::MetaInfo::StructuredPrediction::Span*>,std::reverse_iterator<quasar::MetaInfo::StructuredPrediction::Span*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(80 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>,std::reverse_iterator<quasar::MetaInfo::StructuredPrediction::Span*>,std::reverse_iterator<quasar::MetaInfo::StructuredPrediction::Span*>,std::reverse_iterator<quasar::MetaInfo::StructuredPrediction::Span*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 80);
      *(_QWORD *)(v7 - 64) = *(_QWORD *)(a3 - 64);
      *(_OWORD *)(v7 - 80) = v8;
      *(_QWORD *)(a3 - 72) = 0;
      *(_QWORD *)(a3 - 64) = 0;
      *(_QWORD *)(a3 - 80) = 0;
      v9 = *(_OWORD *)(a3 - 56);
      *(_QWORD *)(v7 - 40) = *(_QWORD *)(a3 - 40);
      *(_OWORD *)(v7 - 56) = v9;
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 56) = 0;
      v10 = *(_QWORD *)(a3 - 32);
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_QWORD *)(v7 - 32) = v10;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      v7 = *((_QWORD *)&v16 + 1) - 80;
      *((_QWORD *)&v16 + 1) -= 80;
      a3 -= 80;
    }
    while (a3 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>,std::reverse_iterator<quasar::MetaInfo::StructuredPrediction::Span*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>,std::reverse_iterator<quasar::MetaInfo::StructuredPrediction::Span*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>,std::reverse_iterator<quasar::MetaInfo::StructuredPrediction::Span*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>,std::reverse_iterator<quasar::MetaInfo::StructuredPrediction::Span*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<quasar::MetaInfo::StructuredPrediction::Span>::destroy[abi:ne180100](v3, v1);
      v1 += 80;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::MetaInfo::StructuredPrediction::Span>::~__split_buffer(void **a1)
{
  std::__split_buffer<quasar::MetaInfo::StructuredPrediction::Span>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<quasar::MetaInfo::StructuredPrediction::Span>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 80;
    std::allocator<quasar::MetaInfo::StructuredPrediction::Span>::destroy[abi:ne180100](v4, i - 80);
  }
}

std::string *std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__init_with_size[abi:ne180100]<quasar::MetaInfo::StructuredPrediction::Span*,quasar::MetaInfo::StructuredPrediction::Span*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>,quasar::MetaInfo::StructuredPrediction::Span*,quasar::MetaInfo::StructuredPrediction::Span*,quasar::MetaInfo::StructuredPrediction::Span*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1AD7A6288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x333333333333334)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[80 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>,quasar::MetaInfo::StructuredPrediction::Span*,quasar::MetaInfo::StructuredPrediction::Span*,quasar::MetaInfo::StructuredPrediction::Span*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  int v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    v7 = a1;
    do
    {
      std::allocator<quasar::MetaInfo::StructuredPrediction::Span>::construct[abi:ne180100]<quasar::MetaInfo::StructuredPrediction::Span,quasar::MetaInfo::StructuredPrediction::Span&>(v7, v4, v6);
      v6 += 5;
      v4 = (std::string *)((char *)v12 + 80);
      v12 = (std::string *)((char *)v12 + 80);
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>,quasar::MetaInfo::StructuredPrediction::Span*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1AD7A638C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>,quasar::MetaInfo::StructuredPrediction::Span*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocator<quasar::MetaInfo::StructuredPrediction::Span>::construct[abi:ne180100]<quasar::MetaInfo::StructuredPrediction::Span,quasar::MetaInfo::StructuredPrediction::Span&>(int a1, std::string *this, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  std::string::size_type v7;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a3 + 3), *((_QWORD *)a3 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a3 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  v7 = *((_QWORD *)a3 + 6);
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[0] = v7;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  return std::vector<quasar::MetaInfo::StructuredPrediction::Span::Range>::__init_with_size[abi:ne180100]<quasar::MetaInfo::StructuredPrediction::Span::Range*,quasar::MetaInfo::StructuredPrediction::Span::Range*>(&this[2].__r_.__value_.__l.__size_, *((const void **)a3 + 7), *((_QWORD *)a3 + 8), (uint64_t)(*((_QWORD *)a3 + 8) - *((_QWORD *)a3 + 7)) >> 3);
}

void sub_1AD7A6444(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>,quasar::MetaInfo::StructuredPrediction::Span*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>,quasar::MetaInfo::StructuredPrediction::Span*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>,quasar::MetaInfo::StructuredPrediction::Span*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 80;
      std::allocator<quasar::MetaInfo::StructuredPrediction::Span>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void sub_1AD7A6910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1AD7A6D50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1AD7A7154(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1AD7A7684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18)
{
  void *v18;

  MEMORY[0x1AF44CB9C](&a16);
  std::ofstream::~ofstream(&a18);
  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1AD7A77E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1AF44D094](v1 + 416);
  _Unwind_Resume(a1);
}

void sub_1AD7A7898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)SimpleMmapBuffer;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void multiply(void *a1, float a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  double v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v5 = v3;
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v6)
    {
      v7 = *(_QWORD *)v12;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v12 != v7)
            objc_enumerationMutation(v5);
          objc_msgSend(v5, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * v8), (_QWORD)v11);
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          *(float *)&v10 = a2;
          objc_msgSend(v9, "multiply:", v10);

          ++v8;
        }
        while (v6 != v8);
        v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v6);
    }

  }
}

void sub_1AD7A7A04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

float l2norm(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t i;
  void *v8;
  float v9;
  float v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v4)
    {
      v5 = *(_QWORD *)v13;
      v6 = 0.0;
      do
      {
        for (i = 0; i != v4; ++i)
        {
          if (*(_QWORD *)v13 != v5)
            objc_enumerationMutation(v3);
          objc_msgSend(v3, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * i), (_QWORD)v12);
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "l2norm");
          v10 = v9;

          v6 = v6 + v10;
        }
        v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      }
      while (v4);
    }
    else
    {
      v6 = 0.0;
    }

  }
  else
  {
    v6 = 0.0;
  }

  return v6;
}

void sub_1AD7A7B6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x18uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1AD7A7DA4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;

  if (result[3])
  {
    v1 = result;
    result = (_QWORD *)result[2];
    if (result)
    {
      do
      {
        v2 = (_QWORD *)*result;
        operator delete(result);
        result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    v3 = v1[1];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

uint64_t quasar::corrective_reranking::FusedIntentClassifier::FusedIntentClassifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v7;

  *(_QWORD *)a1 = a4;
  v7 = (uint64_t *)(a1 + 32);
  quasar::corrective_reranking::InitFeaturizers(a2, a3, (char **)(a1 + 8));
  kaldi::quasar::LoadClassifier(a5, v7);
  return a1;
}

void sub_1AD7A7E78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

float quasar::corrective_reranking::FusedIntentClassifier::classifyIntent(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double v10;
  float v11;
  _QWORD v13[5];
  int32x2_t v14[5];

  kaldi::Matrix<float>::Matrix((uint64_t)v14);
  quasar::corrective_reranking::FusedIntentClassifier::featurizeParses((uint64_t *)a1, a2, a3, a4, a5, v14);
  v10 = kaldi::Matrix<float>::Matrix((uint64_t)v13);
  (*(void (**)(_QWORD, int32x2_t *, _QWORD *, double))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), v14, v13, v10);
  v11 = *(float *)(v13[0] + 4);
  kaldi::Matrix<float>::~Matrix((uint64_t)v13);
  kaldi::Matrix<float>::~Matrix((uint64_t)v14);
  return v11;
}

void sub_1AD7A7F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  kaldi::Matrix<float>::~Matrix((uint64_t)&a9);
  kaldi::Matrix<float>::~Matrix((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::FusedIntentClassifier::featurizeParses(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int32x2_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[6];

  kaldi::Matrix<float>::Resize(a6, 1332920885 * ((unint64_t)(a2[1] - *a2) >> 3), (unint64_t)(a1[2] - a1[1]) >> 3, 1, 0);
  v13 = *a2;
  v12 = a2[1];
  if (v12 != *a2)
  {
    v14 = 0;
    v15 = a1[1];
    v16 = a1[2];
    do
    {
      if (v16 == v15)
      {
        v16 = v15;
      }
      else
      {
        v17 = 0;
        do
        {
          v18 = *(_QWORD *)(v15 + 8 * v17);
          v19 = *a2 + 232 * v14;
          v20 = *a1;
          v21[0] = a2;
          v21[1] = v19;
          v21[2] = v20;
          v21[3] = a3;
          v21[4] = a4;
          v21[5] = a5;
          *(float *)(*(_QWORD *)a6 + 4 * (int)v14 * a6[2].i32[0] + 4 * v17++) = (*(float (**)(uint64_t, _QWORD *))(*(_QWORD *)v18 + 16))(v18, v21);
          v15 = a1[1];
          v16 = a1[2];
        }
        while (v17 < (v16 - v15) >> 3);
        v13 = *a2;
        v12 = a2[1];
      }
      ++v14;
    }
    while (0x34F72C234F72C235 * ((v12 - v13) >> 3) > v14);
  }
}

void quasar::ioutils::WriteQuasarHeader(_QWORD *a1, int a2)
{
  const char *v4;
  char *v5;
  void *__p[2];
  uint64_t v7;
  void *v8[2];
  char v9;

  std::string::basic_string[abi:ne180100]<0>(v8, "qsr");
  __p[0] = 0;
  __p[1] = 0;
  v7 = 0;
  if (a2 == 2)
  {
    v4 = "uapd";
  }
  else
  {
    if (a2 != 1)
      goto LABEL_6;
    v4 = "lme";
  }
  MEMORY[0x1AF44C914](__p, v4);
LABEL_6:
  std::ostream::put();
  std::ostream::put();
  v5 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (*((uint64_t *)v5 + 2) <= 6)
    *((_QWORD *)v5 + 2) = 7;
  kaldi::WriteToken(a1, 1, (char *)v8);
  kaldi::WriteBasicType<int>(a1, 1);
  kaldi::WriteToken(a1, 1, (char *)__p);
  kaldi::WriteBasicType<int>(a1, 1);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
}

void sub_1AD7A81B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::WriteBasicType<int>(_QWORD *a1, int a2)
{
  uint64_t result;
  _QWORD *v4;
  std::runtime_error *exception;

  if (a2)
  {
    std::ostream::put();
    result = std::ostream::write();
  }
  else
  {
    v4 = (_QWORD *)std::ostream::operator<<();
    result = (uint64_t)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" ", 1);
  }
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Write failure in WriteBasicType.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1AD7A828C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::ioutils::ReadQuasarHeader(uint64_t *a1, int a2)
{
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  void **v9;
  int v10;
  int v11;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *p_p;
  uint64_t v17;
  unsigned __int16 *v18;
  _DWORD *v19;
  int v20;
  int v21;
  std::runtime_error *v23;
  _QWORD *v24;
  uint64_t v25;
  std::runtime_error *exception;
  unsigned int v28;
  void *__p;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  unsigned __int8 v49;
  int v50;
  void **v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v50 = 0;
  v49 = 1;
  kaldi::InitKaldiInputStream((uint64_t)a1, &v49);
  kaldi::ReadToken(a1, v49, (uint64_t)&v51);
  v4 = quasar::gLogLevel;
  if (quasar::gLogLevel > 5)
  {
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v32 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"LME STREAM DUMP [Header]", 24);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v32);
    v4 = quasar::gLogLevel;
  }
  if (v4 >= 5)
  {
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v32 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"LME STREAM DUMP ", 16);
    std::istream::tellg();
    v5 = (_QWORD *)std::ostream::operator<<();
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": qsrHeader = ", 14);
    if (v53 >= 0)
      v7 = (void **)&v51;
    else
      v7 = v51;
    if (v53 >= 0)
      v8 = HIBYTE(v53);
    else
      v8 = v52;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v32);
  }
  if ((SHIBYTE(v53) & 0x80000000) == 0)
  {
    if (SHIBYTE(v53) == 3)
    {
      v9 = (void **)&v51;
      goto LABEL_16;
    }
LABEL_59:
    if (quasar::gLogLevel >= 1)
    {
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v32 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"Incorrect quasar blob header", 28);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v32);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Incorrect quasar blob header");
    goto LABEL_65;
  }
  if (v52 != 3)
    goto LABEL_59;
  v9 = v51;
LABEL_16:
  v10 = *(unsigned __int16 *)v9;
  v11 = *((unsigned __int8 *)v9 + 2);
  if (v10 != 29553 || v11 != 114)
    goto LABEL_59;
  kaldi::ReadBasicType<int>(a1, v49, (uint64_t)&v50);
  if (quasar::gLogLevel >= 5)
  {
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v32 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"LME STREAM DUMP ", 16);
    std::istream::tellg();
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": metaVersion = ", 16);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v32);
  }
  if (v50 != 1)
  {
    if (quasar::gLogLevel >= 1)
    {
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v32 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"Incorrect quasar blob version", 29);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v32);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Incorrect quasar blob version");
LABEL_65:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  __p = 0;
  v30 = 0;
  v31 = 0;
  v28 = 0;
  kaldi::ReadToken(a1, v49, (uint64_t)&__p);
  if (quasar::gLogLevel >= 5)
  {
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v32 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"LME STREAM DUMP ", 16);
    std::istream::tellg();
    v14 = (_QWORD *)std::ostream::operator<<();
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)": dataTypeStr = ", 16);
    if (v31 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    if (v31 >= 0)
      v17 = HIBYTE(v31);
    else
      v17 = v30;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)p_p, v17);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v32);
  }
  if (a2 == 2)
  {
    if (SHIBYTE(v31) < 0)
    {
      if (v30 != 4)
        goto LABEL_66;
      v19 = __p;
    }
    else
    {
      if (SHIBYTE(v31) != 4)
        goto LABEL_66;
      v19 = &__p;
    }
    if (*v19 == 1685086581)
      goto LABEL_52;
LABEL_66:
    if (quasar::gLogLevel >= 1)
    {
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v32 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"Incorrect data type for UserAcousticProfileData", 47);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v32);
    }
    v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v23, "Incorrect data type for UserAcousticProfileData");
LABEL_69:
    __cxa_throw(v23, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (a2 != 1)
    goto LABEL_52;
  if ((SHIBYTE(v31) & 0x80000000) == 0)
  {
    if (SHIBYTE(v31) == 3)
    {
      v18 = (unsigned __int16 *)&__p;
      goto LABEL_42;
    }
LABEL_46:
    if (quasar::gLogLevel >= 1)
    {
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v32 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"Incorrect data type for Lme", 27);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v32);
    }
    v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v23, "Incorrect data type for Lme");
    goto LABEL_69;
  }
  if (v30 != 3)
    goto LABEL_46;
  v18 = (unsigned __int16 *)__p;
LABEL_42:
  v20 = *v18;
  v21 = *((unsigned __int8 *)v18 + 2);
  if (v20 != 28012 || v21 != 101)
    goto LABEL_46;
LABEL_52:
  kaldi::ReadBasicType<int>(a1, v49, (uint64_t)&v28);
  if (quasar::gLogLevel >= 5)
  {
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v32 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"LME STREAM DUMP ", 16);
    std::istream::tellg();
    v24 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)": dataVersion = ", 16);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v32);
  }
  v25 = v28;
  if (SHIBYTE(v31) < 0)
    operator delete(__p);
  if (SHIBYTE(v53) < 0)
    operator delete(v51);
  return v25;
}

void sub_1AD7A8938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;

  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v17 - 193) < 0)
    operator delete(*(void **)(v16 + 280));
  _Unwind_Resume(a1);
}

uint64_t kaldi::InitKaldiInputStream(uint64_t a1, _BYTE *a2)
{
  uint64_t result;
  _QWORD *v4;
  _QWORD v5[34];

  if (std::istream::peek())
  {
    *a2 = 0;
    return 1;
  }
  else
  {
    std::istream::get();
    if (std::istream::peek() << 24 == 1107296256)
    {
      std::istream::get();
      result = 1;
      *a2 = 1;
    }
    else
    {
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Was looking for B, but got ", 27);
        v4 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"\n", 1);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
      }
      return 0;
    }
  }
  return result;
}

void sub_1AD7A8B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::OnlineLASDecodable::OnlineLASDecodable(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  *(_QWORD *)result = off_1E5D33670;
  *(_QWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = a3;
  *(_DWORD *)(result + 28) = 0;
  *(_DWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 24) = a4;
  return result;
}

void kaldi::quasar::OnlineLASDecodable::~OnlineLASDecodable(kaldi::quasar::OnlineLASDecodable *this)
{
  quasar::Bitmap::~Bitmap(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::quasar::OnlineLASDecodable::Compute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  unsigned __int8 *v8;
  void *v9;
  unsigned __int8 *v10;
  void *v11;
  void *__p[2];
  char v14;
  void *v15[2];
  uint64_t v16;
  void *v17[2];
  uint64_t v18;
  void **v19;

  v17[0] = 0;
  v17[1] = 0;
  v18 = 0;
  v15[0] = 0;
  v15[1] = 0;
  v16 = 0;
  v7 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, void **, void **))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), a3, a4, v17, v15);
  if ((_DWORD)v7)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "loglikes");
    v19 = __p;
    v8 = std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a5, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v19);
    v9 = (void *)*((_QWORD *)v8 + 5);
    if (v9)
    {
      *((_QWORD *)v8 + 6) = v9;
      operator delete(v9);
      *((_QWORD *)v8 + 5) = 0;
      *((_QWORD *)v8 + 6) = 0;
      *((_QWORD *)v8 + 7) = 0;
    }
    *(_OWORD *)(v8 + 40) = *(_OWORD *)v17;
    *((_QWORD *)v8 + 7) = v18;
    v17[1] = 0;
    v18 = 0;
    v17[0] = 0;
    if (v14 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "att_probs");
    v19 = __p;
    v10 = std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a5, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v19);
    v11 = (void *)*((_QWORD *)v10 + 5);
    if (v11)
    {
      *((_QWORD *)v10 + 6) = v11;
      operator delete(v11);
      *((_QWORD *)v10 + 5) = 0;
      *((_QWORD *)v10 + 6) = 0;
      *((_QWORD *)v10 + 7) = 0;
    }
    *(_OWORD *)(v10 + 40) = *(_OWORD *)v15;
    *((_QWORD *)v10 + 7) = v16;
    v15[1] = 0;
    v16 = 0;
    v15[0] = 0;
    if (v14 < 0)
      operator delete(__p[0]);
    ++*(_DWORD *)(a1 + 32);
  }
  else
  {
    kaldi::quasar::OnlineLASDecodable::TryEncode((kaldi::quasar::OnlineLASDecodable *)a1);
  }
  if (v15[0])
  {
    v15[1] = v15[0];
    operator delete(v15[0]);
  }
  if (v17[0])
  {
    v17[1] = v17[0];
    operator delete(v17[0]);
  }
  return v7;
}

void sub_1AD7A8D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::OnlineLASDecodable::TryEncode(kaldi::quasar::OnlineLASDecodable *this)
{
  uint64_t v2;
  signed int v3;
  int v4;
  uint64_t v6[3];
  _QWORD v7[4];
  int32x2_t v8[2];
  unsigned int v9;
  int v10;
  uint64_t v11;

  kaldi::CuMatrix<float>::CuMatrix(v8, *((unsigned int *)this + 6), *(unsigned int *)(*((_QWORD *)this + 2) + 24), 1, 0, 0);
  if (*((int *)this + 6) >= 1)
  {
    v2 = 0;
    v3 = *((_DWORD *)this + 7);
    while (kaldi::OnlineFeatureMatrix::IsValidFrame(*((int32x2_t **)this + 2), v3, 1))
    {
      v7[0] = &unk_1E5D29D70;
      v7[1] = *(_QWORD *)&v8[1] + 4 * v10 * (int)v2;
      v7[3] = v11;
      v7[2] = v9;
      kaldi::OnlineFeatureMatrix::GetFrame(*((kaldi::OnlineFeatureMatrix **)this + 2), *((_DWORD *)this + 7), v6);
      kaldi::CuVectorBase<float>::CopyFromVec<float>(v7, (uint64_t)v6);
      v2 = (v2 + 1);
      v4 = *((_DWORD *)this + 6);
      v3 = *((_DWORD *)this + 7) + 1;
      *((_DWORD *)this + 7) = v3;
      if ((int)v2 >= v4)
        goto LABEL_7;
    }
    if (!(_DWORD)v2)
      goto LABEL_10;
LABEL_7:
    if ((int)v2 < *((_DWORD *)this + 6))
      kaldi::CuMatrix<float>::Resize(v8, v2, *(unsigned int *)(*((_QWORD *)this + 2) + 24), 2, 0);
    (*(void (**)(_QWORD, int32x2_t *))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), v8);
  }
LABEL_10:
  if (!kaldi::OnlineFeatureMatrix::IsValidFrame(*((int32x2_t **)this + 2), *((_DWORD *)this + 7), 1))
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v8);
}

void sub_1AD7A8EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::OnlineLASDecodable::Compute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned __int8 *v7;
  void *v8;
  void *__p[2];
  char v11;
  void *v12[2];
  uint64_t v13;
  void **v14;

  v12[0] = 0;
  v12[1] = 0;
  v13 = 0;
  v6 = (*(uint64_t (**)(_QWORD, uint64_t, void **))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8), a3, v12);
  if ((_DWORD)v6)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "loglikes");
    v14 = __p;
    v7 = std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a4, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v14);
    v8 = (void *)*((_QWORD *)v7 + 5);
    if (v8)
    {
      *((_QWORD *)v7 + 6) = v8;
      operator delete(v8);
      *((_QWORD *)v7 + 5) = 0;
      *((_QWORD *)v7 + 6) = 0;
      *((_QWORD *)v7 + 7) = 0;
    }
    *(_OWORD *)(v7 + 40) = *(_OWORD *)v12;
    *((_QWORD *)v7 + 7) = v13;
    v12[1] = 0;
    v13 = 0;
    v12[0] = 0;
    if (v11 < 0)
      operator delete(__p[0]);
    ++*(_DWORD *)(a1 + 32);
  }
  else
  {
    kaldi::quasar::OnlineLASDecodable::TryEncode((kaldi::quasar::OnlineLASDecodable *)a1);
  }
  if (v12[0])
  {
    v12[1] = v12[0];
    operator delete(v12[0]);
  }
  return v6;
}

void sub_1AD7A8FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17)
{
  if (a15 < 0)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::CuSubVector<float>::~CuSubVector(uint64_t result)
{
  *(_QWORD *)result = &unk_1E5D29D70;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t kaldi::quasar::OnlineLASDecodable::BOSIndex(kaldi::quasar::OnlineLASDecodable *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
}

uint64_t kaldi::quasar::OnlineLASDecodable::EOSIndex(kaldi::quasar::OnlineLASDecodable *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 112))(*((_QWORD *)this + 1));
}

uint64_t kaldi::quasar::OnlineLASDecodable::SilIndex(kaldi::quasar::OnlineLASDecodable *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 120))(*((_QWORD *)this + 1));
}

uint64_t kaldi::quasar::OnlineLASDecodable::FrameOffset(kaldi::quasar::OnlineLASDecodable *this)
{
  return *((unsigned int *)this + 7);
}

uint64_t kaldi::quasar::OnlineLASAttentionChecker::OnlineLASAttentionChecker(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t result;

  result = std::unordered_set<int>::unordered_set(a1, a5);
  *(_QWORD *)(result + 40) = a2;
  *(_QWORD *)(result + 48) = a3;
  *(_DWORD *)(result + 56) = a4;
  return result;
}

void kaldi::quasar::OnlineLASAttentionChecker::Check(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, _QWORD *a6@<X8>)
{
  unint64_t v11;
  float *v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  float *v19;
  float *v20;
  float *v21;
  float v22;
  float *v23;
  float v24;
  float v25;
  BOOL v26;
  uint64_t v27;
  int v28;
  int v29;
  char v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  int v49;
  _QWORD v50[35];
  float *v51;
  int v52;
  float *v53;

  v11 = a4;
  LOBYTE(v50[0]) = 0;
  std::vector<BOOL>::vector(a6, a4, (unsigned __int8 *)v50);
  v45 = a5;
  if (*(_DWORD *)(a1 + 44) < a5)
  {
    v12 = *(float **)a2;
    v13 = *(_QWORD *)(a2 + 8);
    v15 = *(float **)a3;
    v14 = *(_QWORD *)(a3 + 8);
    v53 = *(float **)a3;
    v49 = a4;
    if (a4 >= 1)
    {
      v16 = 0;
      v17 = ((v13 - (uint64_t)v12) >> 2) / v11;
      v47 = (int)v17;
      v46 = (unint64_t)v17 >> 1;
      v18 = ((v14 - (uint64_t)v15) >> 2) / v11 / v45;
      while (1)
      {
        v19 = &v12[v47];
        v20 = v12;
        if (v46)
        {
          v21 = v12 + 1;
          v22 = *v12;
          v20 = v12;
          v23 = v12 + 1;
          do
          {
            v24 = *v23++;
            v25 = v24;
            if (v22 < v24)
            {
              v22 = v25;
              v20 = v21;
            }
            v21 = v23;
          }
          while (v23 != v19);
        }
        v26 = *(_DWORD *)(a1 + 56) == ((unint64_t)((char *)v20 - (char *)v12) >> 2);
        v27 = 44;
        if (v26)
          v27 = 48;
        v28 = *(_DWORD *)(a1 + v27);
        v52 = 0;
        if ((int)v18 <= 0)
          break;
        v29 = v45 - v28;
        v30 = 1;
        do
        {
          if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)a1, &v52))
          {
            v15 += v45;
            v51 = v15;
            v31 = kaldi::quasar::OnlineLASAttentionChecker::AttentionLocation(a1, &v53, &v51);
            if (*(float *)(a1 + 40) > *(float *)&v31)
            {
              if (kaldi::g_kaldi_verbose_level >= 3)
              {
                kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v50, 3);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"beam ", 5);
                v32 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" of ", 4);
                v33 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", head ", 7);
                v34 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" of ", 4);
                v35 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)": alignment too low: ", 21);
                v36 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" < ", 3);
                std::ostream::operator<<();
                kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v50);
              }
              v30 = 0;
            }
            if (v29 < SHIDWORD(v31))
            {
              if (kaldi::g_kaldi_verbose_level >= 3)
              {
                kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v50, 3);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"beam ", 5);
                v37 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" of ", 4);
                v38 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)": head ", 7);
                v39 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" of ", 4);
                v40 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)": location was ", 15);
                v41 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" > ", 3);
                std::ostream::operator<<();
                kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v50);
              }
              v30 = 0;
            }
            v53 = v15;
          }
          ++v52;
        }
        while (v52 < (int)v18);
        v42 = (uint64_t *)(*a6 + 8 * (v16 >> 6));
        v43 = 1 << v16;
        if ((v30 & 1) != 0)
          goto LABEL_27;
        v44 = *v42 & ~v43;
LABEL_28:
        *v42 = v44;
        ++v16;
        v12 = v19;
        if (v16 == v49)
          return;
      }
      v42 = (uint64_t *)(*a6 + 8 * (v16 >> 6));
      v43 = 1 << v16;
LABEL_27:
      v44 = *v42 | v43;
      goto LABEL_28;
    }
  }
}

void sub_1AD7A9448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, char a16)
{
  if (*a14)
    operator delete(*a14);
  _Unwind_Resume(exception_object);
}

unint64_t kaldi::quasar::OnlineLASAttentionChecker::AttentionLocation(uint64_t a1, float **a2, float **a3)
{
  uint64_t v6;
  unint64_t v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float v12;
  float v13;
  float *v14;
  float v15;
  uint64_t v16;
  float *v17;
  float *v19;
  uint64_t v20;
  float *v21;
  char *v22;
  float v23;
  float *v24;
  float v25;
  float v26;
  unsigned int v27;
  void *__p;
  float *v30;

  v6 = (char *)*a3 - (char *)*a2;
  v7 = (unint64_t)v6 >> 2;
  std::vector<float>::vector(&__p, (int)(v6 >> 2));
  v8 = *a2;
  v9 = *a3;
  v10 = (float *)__p;
  if (*a2 != v9)
  {
    v12 = *v8;
    v11 = v8 + 1;
    v13 = v12;
    *(float *)__p = v12;
    if (v11 != v9)
    {
      v14 = v10 + 1;
      do
      {
        v15 = *v11++;
        v13 = v13 + v15;
        *v14++ = v13;
      }
      while (v11 != v9);
    }
  }
  v16 = *(int *)(a1 + 52);
  v17 = v30;
  if ((int)v16 < (int)v7 && &v30[-v16] != v10)
  {
    v19 = v30 - 1;
    v20 = -1 * v16;
    do
    {
      *v19 = *v19 - v19[v20];
      --v19;
    }
    while (&v19[v20 + 1] != v10);
  }
  if (v10 == v17)
  {
    v22 = (char *)v10;
  }
  else
  {
    v21 = v10 + 1;
    v22 = (char *)v10;
    if (v10 + 1 != v17)
    {
      v23 = *v10;
      v22 = (char *)v10;
      v24 = v10 + 1;
      do
      {
        v25 = *v24++;
        v26 = v25;
        if (v23 < v25)
        {
          v23 = v26;
          v22 = (char *)v21;
        }
        v21 = v24;
      }
      while (v24 != v17);
    }
  }
  v27 = *(_DWORD *)v22;
  if (v10)
  {
    v30 = v10;
    operator delete(v10);
  }
  return v27 | ((unint64_t)((unint64_t)(v22 - (char *)v10) >> 2) << 32);
}

kaldi::quasar::OnlineLASSpeculativeDecodable *kaldi::quasar::OnlineLASSpeculativeDecodable::OnlineLASSpeculativeDecodable(kaldi::quasar::OnlineLASSpeculativeDecodable *this, kaldi::quasar::CEStatelessEncoderNet *a2, kaldi::quasar::CEStatelessDecoderNet *a3, kaldi::OnlineFeatureMatrix *a4, const kaldi::quasar::OnlineLASAttentionChecker *a5, int a6, int a7, int a8, BOOL a9)
{
  _QWORD *v10;
  _QWORD *v11;
  __int128 v13;
  uint64_t v14;
  void **v15;

  *(_QWORD *)this = &off_1E5D33F20;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = a3;
  *((_QWORD *)this + 3) = a4;
  *((_QWORD *)this + 4) = a5;
  *((_DWORD *)this + 10) = a6;
  *((_DWORD *)this + 11) = a7;
  *((_DWORD *)this + 12) = a8;
  *((_BYTE *)this + 52) = a9;
  v10 = (_QWORD *)((char *)this + 64);
  *(_OWORD *)((char *)this + 88) = 0u;
  v11 = (_QWORD *)((char *)this + 88);
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 180) = 0u;
  *((_WORD *)this + 98) = 257;
  *((_DWORD *)this + 50) = 0;
  *((_BYTE *)this + 204) = 0;
  kaldi::quasar::CEStatelessEncoderNet::InitialStates(a2, &v13);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate(v10);
  *((_OWORD *)this + 4) = v13;
  *((_QWORD *)this + 10) = v14;
  v14 = 0;
  v13 = 0uLL;
  v15 = (void **)&v13;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v15);
  kaldi::quasar::CEStatelessDecoderNet::InitialStates(*((kaldi::quasar::CEStatelessDecoderNet **)this + 2), &v13);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate(v11);
  *(_OWORD *)((char *)this + 88) = v13;
  *((_QWORD *)this + 13) = v14;
  v14 = 0;
  v13 = 0uLL;
  v15 = (void **)&v13;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v15);
  return this;
}

{
  return kaldi::quasar::OnlineLASSpeculativeDecodable::OnlineLASSpeculativeDecodable(this, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_1AD7A96C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  quasar::Bitmap *v9;
  uint64_t v11;
  void *v12;

  v11 = *((_QWORD *)v9 + 23);
  *((_QWORD *)v9 + 23) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (void *)*((_QWORD *)v9 + 20);
  if (v12)
  {
    *((_QWORD *)v9 + 21) = v12;
    operator delete(v12);
  }
  std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~deque[abi:ne180100]((_QWORD *)v9 + 14);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&a9);
  quasar::Bitmap::~Bitmap(v9);
  _Unwind_Resume(a1);
}

void kaldi::quasar::OnlineLASSpeculativeDecodable::~OnlineLASSpeculativeDecodable(kaldi::quasar::OnlineLASSpeculativeDecodable *this)
{
  uint64_t v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = &off_1E5D33F20;
  v2 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 20);
  if (v3)
  {
    *((_QWORD *)this + 21) = v3;
    operator delete(v3);
  }
  std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~deque[abi:ne180100]((_QWORD *)this + 14);
  v4 = (void **)((char *)this + 88);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 64);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v4);
  quasar::Bitmap::~Bitmap(this);
}

{
  kaldi::quasar::OnlineLASSpeculativeDecodable::~OnlineLASSpeculativeDecodable(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::quasar::OnlineLASSpeculativeDecodable::Compute(uint64_t (***a1)(_QWORD, uint64_t, void **, void **, uint64_t, uint64_t), uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  void *__p;
  void *v15;
  _DWORD *v16;
  void *v17;
  void *v18;
  _DWORD *v19;

  v10 = operator new(4uLL);
  v17 = v10;
  *v10 = 0;
  v18 = v10 + 1;
  v19 = v10 + 1;
  v11 = operator new(4uLL);
  __p = v11;
  *v11 = a3;
  v15 = v11 + 1;
  v16 = v11 + 1;
  v12 = (**a1)(a1, a2, &v17, &__p, a4, a5);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  if (v17)
  {
    v18 = v17;
    operator delete(v17);
  }
  return v12;
}

void sub_1AD7A9898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::OnlineLASSpeculativeDecodable::CheckDecoderSuccess(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  int v3;
  int v6;
  _QWORD *v7;
  int v9;
  unint64_t v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD v16[36];

  v2 = *(_QWORD *)(a2 + 8);
  v3 = v2 & 0x3F;
  if (v2 <= 0x3F && v3 == 0)
  {
LABEL_12:
    *(_DWORD *)(a1 + 192) = 0;
    return 1;
  }
  else
  {
    v6 = 0;
    v7 = *(_QWORD **)a2;
    while (((*v7 >> v6) & 1) != 0)
    {
      v7 += v6 == 63;
      if (v6 == 63)
        v6 = 0;
      else
        ++v6;
      if (v6 == v3 && v7 == (_QWORD *)(*(_QWORD *)a2 + 8 * (v2 >> 6)))
        goto LABEL_12;
    }
    v9 = *(_DWORD *)(a1 + 192);
    *(_DWORD *)(a1 + 192) = v9 + 1;
    if (v9 >= 7 && (int)v2 >= 1)
    {
      v11 = 0;
      v12 = kaldi::g_kaldi_verbose_level;
      do
      {
        if (((*(_QWORD *)(*(_QWORD *)a2 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11) & 1) != 0 || v12 <= 2)
        {
          ++v11;
        }
        else
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v16, 3);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Beam ", 5);
          ++v11;
          v13 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" of ", 4);
          v14 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" has failed decoder checks ", 27);
          v15 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" times; could num-forbidden-frames[-silence] be too low?",
            56);
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v16);
          v12 = kaldi::g_kaldi_verbose_level;
        }
      }
      while (v11 != v2);
    }
    return 0;
  }
}

void sub_1AD7A9A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::OnlineLASSpeculativeDecodable::Compute(kaldi::quasar::OnlineLASSpeculativeDecodable *this, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, _QWORD *a6)
{
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  void **v15;
  void **v16;
  _QWORD *v17;
  unint64_t v18;
  void **v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  void *v28;
  unsigned __int8 *v29;
  void *v30;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  float *v36;
  char *v37;
  float v38;
  float *v39;
  float v40;
  float v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  int v58;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  _DWORD *v64;
  float *v65;
  char *v66;
  float v67;
  float *v68;
  float v69;
  float v70;
  unint64_t v71;
  _DWORD *v72;
  _DWORD *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  _DWORD *v87;
  unint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _DWORD *v92;
  _DWORD *v93;
  _BOOL8 v94;
  float *v95;
  char *v96;
  float v97;
  float *v98;
  float v99;
  float v100;
  unint64_t v101;
  _DWORD *v102;
  _DWORD *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  _QWORD *v115;
  char *v116;
  char **v117;
  uint64_t *v118;
  void *v119;
  void *v120;
  _DWORD *v121;
  void *__p[2];
  _DWORD *v123;
  void *v124[2];
  _DWORD *v125;
  void *v126[2];
  uint64_t v127;
  __int128 v128;
  uint64_t v129;

  if (*((_BYTE *)this + 196))
  {
    *((_BYTE *)this + 196) = 0;
    kaldi::quasar::OnlineLASSpeculativeDecodable::Encode((uint64_t)this);
  }
  if (!*((_QWORD *)this + 23))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::clear(a5);
    return 1;
  }
  v128 = 0uLL;
  v129 = 0;
  v126[0] = 0;
  v126[1] = 0;
  v127 = 0;
  v124[0] = 0;
  v124[1] = 0;
  v125 = 0;
  v118 = (uint64_t *)((char *)this + 88);
  kaldi::quasar::CEStatelessDecoderNet::Decode(*((_QWORD *)this + 2), (_QWORD *)this + 11, (uint64_t *)this + 23, a3, (uint64_t)a4, *((unsigned __int8 *)this + 197), &v128, (uint64_t)v126, (uint64_t)v124);
  v11 = *((_DWORD *)this + 14);
  v12 = (a4[1] - *a4) >> 2;
  v13 = v11
      / (int)kaldi::quasar::CEStatelessEncoderNet::FrameSubsamplingFactor(*((kaldi::quasar::CEStatelessEncoderNet **)this
                                                                          + 1));
  if (*((_BYTE *)this + 204)
    || !kaldi::OnlineFeatureMatrix::IsValidFrame(*((int32x2_t **)this + 3), *((_DWORD *)this + 14), 1))
  {
    goto LABEL_9;
  }
  kaldi::quasar::OnlineLASAttentionChecker::Check(*((_QWORD *)this + 4), (uint64_t)v126, (uint64_t)v124, v12, v13, __p);
  v14 = kaldi::quasar::OnlineLASSpeculativeDecodable::CheckDecoderSuccess((uint64_t)this, (uint64_t)__p);
  if (__p[0])
    operator delete(__p[0]);
  if (v14)
  {
LABEL_9:
    ++*((_DWORD *)this + 15);
    *((_BYTE *)this + 197) = 1;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate(v118);
    *(_OWORD *)((char *)this + 88) = v128;
    *((_QWORD *)this + 13) = v129;
    v129 = 0;
    v128 = 0uLL;
    v15 = (void **)*((_QWORD *)this + 15);
    v16 = (void **)*((_QWORD *)this + 16);
    if (v16 == v15)
    {
      v17 = (_QWORD *)((char *)this + 152);
      v16 = (void **)*((_QWORD *)this + 15);
    }
    else
    {
      v17 = (_QWORD *)((char *)this + 152);
      v18 = *((_QWORD *)this + 18);
      v19 = &v15[v18 / 0xAA];
      v20 = (char *)*v19 + 24 * (v18 % 0xAA);
      v21 = (unint64_t)v15[(*((_QWORD *)this + 19) + v18) / 0xAA] + 24 * ((*((_QWORD *)this + 19) + v18) % 0xAA);
      if (v20 != (char *)v21)
      {
        do
        {
          __p[0] = v20;
          std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          v20 += 24;
          if (v20 - (_BYTE *)*v19 == 4080)
          {
            v22 = (char *)v19[1];
            ++v19;
            v20 = v22;
          }
        }
        while (v20 != (char *)v21);
        v15 = (void **)*((_QWORD *)this + 15);
        v16 = (void **)*((_QWORD *)this + 16);
      }
    }
    *v17 = 0;
    v24 = (char *)v16 - (char *)v15;
    if (v24 >= 0x11)
    {
      do
      {
        operator delete(*v15);
        v25 = *((_QWORD *)this + 16);
        v15 = (void **)(*((_QWORD *)this + 15) + 8);
        *((_QWORD *)this + 15) = v15;
        v24 = v25 - (_QWORD)v15;
      }
      while (v24 > 0x10);
    }
    if (v24 >> 3 == 1)
    {
      v26 = 85;
    }
    else
    {
      if (v24 >> 3 != 2)
      {
LABEL_24:
        *((_QWORD *)this + 21) = *((_QWORD *)this + 20);
        kaldi::quasar::OnlineLASSpeculativeDecodable::AccumulateAlignments((uint64_t *)v124, v12, v13, __p);
        if (v124[0])
        {
          v124[1] = v124[0];
          operator delete(v124[0]);
        }
        *(_OWORD *)v124 = *(_OWORD *)__p;
        v125 = v123;
        std::string::basic_string[abi:ne180100]<0>(__p, "loglikes");
        v119 = __p;
        v27 = std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a5, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v119);
        v28 = (void *)*((_QWORD *)v27 + 5);
        if (v28)
        {
          *((_QWORD *)v27 + 6) = v28;
          operator delete(v28);
          *((_QWORD *)v27 + 5) = 0;
          *((_QWORD *)v27 + 6) = 0;
          *((_QWORD *)v27 + 7) = 0;
        }
        *(_OWORD *)(v27 + 40) = *(_OWORD *)v126;
        *((_QWORD *)v27 + 7) = v127;
        v126[1] = 0;
        v127 = 0;
        v126[0] = 0;
        if (SHIBYTE(v123) < 0)
          operator delete(__p[0]);
        std::string::basic_string[abi:ne180100]<0>(__p, "att_probs");
        v119 = __p;
        v29 = std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a5, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v119);
        v30 = (void *)*((_QWORD *)v29 + 5);
        if (v30)
        {
          *((_QWORD *)v29 + 6) = v30;
          operator delete(v30);
          *((_QWORD *)v29 + 5) = 0;
          *((_QWORD *)v29 + 6) = 0;
          *((_QWORD *)v29 + 7) = 0;
        }
        *(_OWORD *)(v29 + 40) = *(_OWORD *)v124;
        *((_QWORD *)v29 + 7) = v125;
        v124[1] = 0;
        v125 = 0;
        v124[0] = 0;
        if (SHIBYTE(v123) < 0)
          operator delete(__p[0]);
        v23 = 1;
        goto LABEL_35;
      }
      v26 = 170;
    }
    *((_QWORD *)this + 18) = v26;
    goto LABEL_24;
  }
  *((_BYTE *)this + 196) = 1;
  if (*((_BYTE *)this + 197)
    && kaldi::quasar::CEStatelessDecoderNet::CopyCellOutputs(*((_QWORD **)this + 2), &v128, v118))
  {
    *((_BYTE *)this + 197) = 0;
  }
  if (*((int *)this + 11) < 1)
    goto LABEL_114;
  v117 = (char **)((char *)this + 160);
  v115 = a6;
  if (*((int *)this + 12) < 1)
  {
    v34 = *((_QWORD *)this + 19);
    v33 = *((_QWORD *)this + 21);
LABEL_54:
    if (v34)
    {
      v35 = 0;
      goto LABEL_78;
    }
  }
  else
  {
    v32 = 0;
    while (*((_QWORD *)this + 19))
    {
      std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::pop_back((_QWORD *)this + 14);
      v33 = *((_QWORD *)this + 21) - 8;
      *((_QWORD *)this + 21) = v33;
      if (++v32 >= *((_DWORD *)this + 12))
      {
        v34 = *((_QWORD *)this + 19);
        goto LABEL_54;
      }
    }
  }
  std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::emplace_back<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>((_QWORD *)this + 14, (uint64_t)&v128);
  std::vector<float>::resize((uint64_t)v126, (((char *)v126[1] - (char *)v126[0]) >> 2) / (unint64_t)((uint64_t)(a4[1] - *a4) >> 2));
  if (v126[0] == v126[1])
  {
    v37 = (char *)v126[0];
  }
  else
  {
    v36 = (float *)((char *)v126[0] + 4);
    v37 = (char *)v126[0];
    if ((char *)v126[0] + 4 != v126[1])
    {
      v38 = *(float *)v126[0];
      v37 = (char *)v126[0];
      v39 = (float *)((char *)v126[0] + 4);
      do
      {
        v40 = *v39++;
        v41 = v40;
        if (v38 < v40)
        {
          v38 = v41;
          v37 = (char *)v36;
        }
        v36 = v39;
      }
      while (v39 != v126[1]);
    }
  }
  v42 = (unint64_t)(v37 - (char *)v126[0]) >> 2;
  v43 = *((_QWORD *)this + 22);
  v44 = (char *)*((_QWORD *)this + 21);
  if ((unint64_t)v44 >= v43)
  {
    v45 = (v44 - *v117) >> 3;
    v46 = v45 + 1;
    if ((unint64_t)(v45 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v47 = v43 - (_QWORD)*v117;
    if (v47 >> 2 > v46)
      v46 = v47 >> 2;
    if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
      v48 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v48 = v46;
    v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)this + 176, v48);
    v50 = &v49[8 * v45];
    v52 = &v49[8 * v51];
    *(_DWORD *)v50 = v42;
    *((_DWORD *)v50 + 1) = *(_DWORD *)v37;
    v33 = (uint64_t)(v50 + 8);
    v54 = (char *)*((_QWORD *)this + 20);
    v53 = (char *)*((_QWORD *)this + 21);
    if (v53 != v54)
    {
      do
      {
        v55 = *((_QWORD *)v53 - 1);
        v53 -= 8;
        *((_QWORD *)v50 - 1) = v55;
        v50 -= 8;
      }
      while (v53 != v54);
      v53 = *v117;
    }
    *((_QWORD *)this + 20) = v50;
    *((_QWORD *)this + 21) = v33;
    *((_QWORD *)this + 22) = v52;
    if (v53)
      operator delete(v53);
  }
  else
  {
    *(_DWORD *)v44 = v42;
    *((_DWORD *)v44 + 1) = *(_DWORD *)v37;
    v33 = (uint64_t)(v44 + 8);
  }
  *((_QWORD *)this + 21) = v33;
  v35 = 1;
LABEL_78:
  v116 = (char *)this + 176;
  LODWORD(v56) = *(_DWORD *)(v33 - 8);
  while (1)
  {
    v57 = (*(uint64_t (**)(kaldi::quasar::OnlineLASSpeculativeDecodable *))(*(_QWORD *)this + 24))(this);
    v58 = *((_DWORD *)this + 11);
    if ((_DWORD)v56 == v57 || v35 >= v58)
      break;
    v60 = *((_QWORD *)this + 2);
    v61 = *((_QWORD *)this + 19) + *((_QWORD *)this + 18) - 1;
    v62 = *(_QWORD *)(*((_QWORD *)this + 15) + 8 * (v61 / 0xAA));
    v63 = operator new(4uLL);
    __p[0] = v63;
    *v63 = 0;
    __p[1] = v63 + 1;
    v123 = v63 + 1;
    v64 = operator new(4uLL);
    v119 = v64;
    *v64 = v56;
    v120 = v64 + 1;
    v121 = v64 + 1;
    kaldi::quasar::CEStatelessDecoderNet::Decode(v60, (_QWORD *)(v62 + 24 * (v61 % 0xAA)), (uint64_t *)this + 23, (uint64_t)__p, (uint64_t)&v119, 1, &v128, (uint64_t)v126, (uint64_t)v124);
    if (v119)
    {
      v120 = v119;
      operator delete(v119);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::emplace_back<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>((_QWORD *)this + 14, (uint64_t)&v128);
    if (v126[0] == v126[1])
    {
      v66 = (char *)v126[0];
    }
    else
    {
      v65 = (float *)((char *)v126[0] + 4);
      v66 = (char *)v126[0];
      if ((char *)v126[0] + 4 != v126[1])
      {
        v67 = *(float *)v126[0];
        v66 = (char *)v126[0];
        v68 = (float *)((char *)v126[0] + 4);
        do
        {
          v69 = *v68++;
          v70 = v69;
          if (v67 < v69)
          {
            v67 = v70;
            v66 = (char *)v65;
          }
          v65 = v68;
        }
        while (v68 != v126[1]);
      }
    }
    v56 = (unint64_t)(v66 - (char *)v126[0]) >> 2;
    v72 = (_DWORD *)*((_QWORD *)this + 21);
    v71 = *((_QWORD *)this + 22);
    if ((unint64_t)v72 >= v71)
    {
      v74 = ((char *)v72 - *v117) >> 3;
      v75 = v74 + 1;
      if ((unint64_t)(v74 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v76 = v71 - (_QWORD)*v117;
      if (v76 >> 2 > v75)
        v75 = v76 >> 2;
      if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8)
        v77 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v77 = v75;
      v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v116, v77);
      v80 = &v78[8 * v74];
      *(_DWORD *)v80 = v56;
      *((_DWORD *)v80 + 1) = *(_DWORD *)v66;
      v82 = (char *)*((_QWORD *)this + 20);
      v81 = (char *)*((_QWORD *)this + 21);
      v83 = v80;
      if (v81 != v82)
      {
        do
        {
          v84 = *((_QWORD *)v81 - 1);
          v81 -= 8;
          *((_QWORD *)v83 - 1) = v84;
          v83 -= 8;
        }
        while (v81 != v82);
        v81 = *v117;
      }
      v73 = v80 + 8;
      *((_QWORD *)this + 20) = v83;
      *((_QWORD *)this + 21) = v80 + 8;
      *((_QWORD *)this + 22) = &v78[8 * v79];
      if (v81)
        operator delete(v81);
    }
    else
    {
      *v72 = v56;
      v72[1] = *(_DWORD *)v66;
      v73 = v72 + 2;
    }
    *((_QWORD *)this + 21) = v73;
    ++v35;
  }
  if (v58 >= 1)
  {
    a6 = v115;
    if (*((_BYTE *)this + 52)
      && (*((_BYTE *)this + 204)
       || !kaldi::OnlineFeatureMatrix::IsValidFrame(*((int32x2_t **)this + 3), *((_DWORD *)this + 14), 1)))
    {
      if (*((int *)this + 12) >= 1)
      {
        v85 = 0;
        do
        {
          if (!*((_QWORD *)this + 19))
            break;
          std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::pop_back((_QWORD *)this + 14);
          *((_QWORD *)this + 21) -= 8;
          ++v85;
        }
        while (v85 < *((_DWORD *)this + 12));
      }
      v86 = *((_QWORD *)this + 21);
      if (*((_QWORD *)this + 20) == v86)
        v87 = (_DWORD *)*a4;
      else
        v87 = (_DWORD *)(v86 - 8);
      LODWORD(v88) = *v87;
      while ((_DWORD)v88 != (*(unsigned int (**)(kaldi::quasar::OnlineLASSpeculativeDecodable *))(*(_QWORD *)this + 24))(this))
      {
        v89 = *((_QWORD *)this + 19);
        v90 = (_QWORD *)((char *)this + 88);
        if (v89)
          v90 = (_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 15) + 8 * ((v89 + *((_QWORD *)this + 18) - 1) / 0xAAuLL))
                         + 24 * ((v89 + *((_QWORD *)this + 18) - 1) % 0xAAuLL));
        v91 = *((_QWORD *)this + 2);
        v92 = operator new(4uLL);
        __p[0] = v92;
        *v92 = 0;
        __p[1] = v92 + 1;
        v123 = v92 + 1;
        v93 = operator new(4uLL);
        v119 = v93;
        *v93 = v88;
        v120 = v93 + 1;
        v121 = v93 + 1;
        if (v89)
          v94 = 1;
        else
          v94 = *((_BYTE *)this + 197) != 0;
        kaldi::quasar::CEStatelessDecoderNet::Decode(v91, v90, (uint64_t *)this + 23, (uint64_t)__p, (uint64_t)&v119, v94, &v128, (uint64_t)v126, (uint64_t)v124);
        if (v119)
        {
          v120 = v119;
          operator delete(v119);
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::emplace_back<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>((_QWORD *)this + 14, (uint64_t)&v128);
        if (v126[0] == v126[1])
        {
          v96 = (char *)v126[0];
        }
        else
        {
          v95 = (float *)((char *)v126[0] + 4);
          v96 = (char *)v126[0];
          if ((char *)v126[0] + 4 != v126[1])
          {
            v97 = *(float *)v126[0];
            v96 = (char *)v126[0];
            v98 = (float *)((char *)v126[0] + 4);
            do
            {
              v99 = *v98++;
              v100 = v99;
              if (v97 < v99)
              {
                v97 = v100;
                v96 = (char *)v95;
              }
              v95 = v98;
            }
            while (v98 != v126[1]);
          }
        }
        v88 = (unint64_t)(v96 - (char *)v126[0]) >> 2;
        v102 = (_DWORD *)*((_QWORD *)this + 21);
        v101 = *((_QWORD *)this + 22);
        if ((unint64_t)v102 >= v101)
        {
          v104 = ((char *)v102 - *v117) >> 3;
          v105 = v104 + 1;
          if ((unint64_t)(v104 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v106 = v101 - (_QWORD)*v117;
          if (v106 >> 2 > v105)
            v105 = v106 >> 2;
          if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFF8)
            v107 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v107 = v105;
          v108 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v116, v107);
          v110 = &v108[8 * v104];
          *(_DWORD *)v110 = v88;
          *((_DWORD *)v110 + 1) = *(_DWORD *)v96;
          v112 = (char *)*((_QWORD *)this + 20);
          v111 = (char *)*((_QWORD *)this + 21);
          v113 = v110;
          if (v111 != v112)
          {
            do
            {
              v114 = *((_QWORD *)v111 - 1);
              v111 -= 8;
              *((_QWORD *)v113 - 1) = v114;
              v113 -= 8;
            }
            while (v111 != v112);
            v111 = *v117;
          }
          v103 = v110 + 8;
          *((_QWORD *)this + 20) = v113;
          *((_QWORD *)this + 21) = v110 + 8;
          *((_QWORD *)this + 22) = &v108[8 * v109];
          if (v111)
            operator delete(v111);
        }
        else
        {
          *v102 = v88;
          v102[1] = *(_DWORD *)v96;
          v103 = v102 + 2;
        }
        *((_QWORD *)this + 21) = v103;
      }
      v23 = 0;
      goto LABEL_35;
    }
LABEL_114:
    v23 = 0;
    goto LABEL_35;
  }
  v23 = 0;
  a6 = v115;
LABEL_35:
  if (a6 && (_QWORD *)((char *)this + 160) != a6)
    std::vector<std::pair<int,float>>::__assign_with_size[abi:ne180100]<std::pair<int,float>*,std::pair<int,float>*>(a6, *((uint64_t **)this + 20), *((uint64_t **)this + 21), (uint64_t)(*((_QWORD *)this + 21) - *((_QWORD *)this + 20)) >> 3);
  if (v124[0])
  {
    v124[1] = v124[0];
    operator delete(v124[0]);
  }
  if (v126[0])
  {
    v126[1] = v126[0];
    operator delete(v126[0]);
  }
  v126[0] = &v128;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)v126);
  return v23;
}

void sub_1AD7AA504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  uint64_t v29;

  if (__p)
    operator delete(__p);
  if (a28)
  {
    a29 = (uint64_t)a28;
    operator delete(a28);
  }
  a28 = (void *)(v29 - 128);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::OnlineLASSpeculativeDecodable::Encode(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  signed int v3;
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  void **v21;
  char *v22;
  int32x2_t v23[2];
  unsigned int v24;
  int v25;
  uint64_t v26;

  if (!*(_BYTE *)(this + 204))
  {
    v1 = this;
    kaldi::CuMatrix<float>::CuMatrix(v23, *(unsigned int *)(this + 40), *(unsigned int *)(*(_QWORD *)(this + 24) + 24), 1, 0, 0);
    if (*(int *)(v1 + 40) >= 1)
    {
      v2 = 0;
      v3 = *(_DWORD *)(v1 + 56);
      while (kaldi::OnlineFeatureMatrix::IsValidFrame(*(int32x2_t **)(v1 + 24), v3, 1))
      {
        *(_QWORD *)&v17 = &unk_1E5D29D70;
        *((_QWORD *)&v17 + 1) = *(_QWORD *)&v23[1] + 4 * v25 * (int)v2;
        v19 = v26;
        v18 = v24;
        kaldi::OnlineFeatureMatrix::GetFrame(*(kaldi::OnlineFeatureMatrix **)(v1 + 24), *(_DWORD *)(v1 + 56), (uint64_t *)&v20);
        kaldi::CuVectorBase<float>::CopyFromVec<float>(&v17, (uint64_t)&v20);
        v2 = (v2 + 1);
        v3 = *(_DWORD *)(v1 + 56) + 1;
        *(_DWORD *)(v1 + 56) = v3;
        if ((int)v2 >= *(_DWORD *)(v1 + 40))
          goto LABEL_8;
      }
      if (!(_DWORD)v2)
        return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v23);
LABEL_8:
      if ((int)v2 < *(_DWORD *)(v1 + 40))
      {
        if (!*(_BYTE *)(v1 + 204)
          && kaldi::OnlineFeatureMatrix::IsValidFrame(*(int32x2_t **)(v1 + 24), *(_DWORD *)(v1 + 56), 1))
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v17);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"EncodingFinished()", 18);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v17);
        }
        if ((int)v2 < (int)kaldi::quasar::CEStatelessEncoderNet::FrameSubsamplingFactor(*(kaldi::quasar::CEStatelessEncoderNet **)(v1 + 8)))
          return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v23);
        kaldi::CuMatrix<float>::Resize(v23, v2, *(unsigned int *)(*(_QWORD *)(v1 + 24) + 24), 2, 0);
      }
      v17 = 0uLL;
      v18 = 0;
      v16 = 0;
      v4 = *(_QWORD *)(v1 + 8);
      if (*(_BYTE *)(v1 + 204))
        v5 = 1;
      else
        v5 = !kaldi::OnlineFeatureMatrix::IsValidFrame(*(int32x2_t **)(v1 + 24), *(_DWORD *)(v1 + 56), 1);
      kaldi::quasar::CEStatelessEncoderNet::Encode(v4, (_QWORD *)(v1 + 64), (uint64_t)v23, v5, &v17, &v16);
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate((_QWORD *)(v1 + 64));
      *(_OWORD *)(v1 + 64) = v17;
      *(_QWORD *)(v1 + 80) = v18;
      v18 = 0;
      v17 = 0uLL;
      v6 = *(_QWORD *)(v1 + 184);
      if (v6)
      {
        v7 = v16;
        v8 = (char *)operator new(0x10uLL);
        v21 = (void **)(v8 + 16);
        v22 = v8 + 16;
        *(_QWORD *)v8 = v6;
        *((_QWORD *)v8 + 1) = v7;
        v20 = (void **)v8;
        v9 = (_QWORD *)kaldi::quasar::CEStatelessEncoderNet::Engine(*(kaldi::quasar::CEStatelessEncoderNet **)(v1 + 8));
        (*(void (**)(uint64_t *__return_ptr, _QWORD, void ***, _QWORD))(*(_QWORD *)*v9 + 96))(&v15, *v9, &v20, 0);
        v10 = v15;
        v15 = 0;
        v11 = *(_QWORD *)(v1 + 184);
        *(_QWORD *)(v1 + 184) = v10;
        if (v11)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
          v12 = v15;
          v15 = 0;
          if (v12)
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        }
        if (v20)
        {
          v21 = v20;
          operator delete(v20);
        }
      }
      else
      {
        v13 = v16;
        v16 = 0;
        *(_QWORD *)(v1 + 184) = v13;
      }
      kaldi::quasar::OnlineLASSpeculativeDecodable::ClipEncodedStateIfNeeded(v1);
      v14 = v16;
      v16 = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      v20 = (void **)&v17;
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v20);
    }
    return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v23);
  }
  return this;
}

BOOL kaldi::quasar::OnlineLASSpeculativeDecodable::EncodingFinished(kaldi::quasar::OnlineLASSpeculativeDecodable *this)
{
  return *((_BYTE *)this + 204)
      || !kaldi::OnlineFeatureMatrix::IsValidFrame(*((int32x2_t **)this + 3), *((_DWORD *)this + 14), 1);
}

uint64_t *kaldi::quasar::OnlineLASSpeculativeDecodable::AccumulateAlignments@<X0>(uint64_t *a1@<X1>, int a2@<W2>, int a3@<W3>, _QWORD *a4@<X8>)
{
  uint64_t *result;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  int v15;

  v15 = 0;
  result = std::vector<float>::vector(a4, a3 * a2, &v15);
  if (a2 >= 1)
  {
    v8 = 0;
    v9 = *a1;
    v10 = *result;
    v11 = 4 * a3;
    v12 = ((a1[1] - *a1) >> 2) / (unint64_t)a2 / a3;
    do
    {
      if ((int)v12 >= 1)
      {
        v13 = 0;
        do
        {
          if (a3)
          {
            v14 = 0;
            do
            {
              *(float *)(v10 + v14) = *(float *)(v9 + v14) + *(float *)(v10 + v14);
              v14 += 4;
            }
            while (v11 != v14);
          }
          v9 += v11;
          ++v13;
        }
        while (v13 != (_DWORD)v12);
      }
      ++v8;
      v10 += v11;
    }
    while (v8 != a2);
  }
  return result;
}

uint64_t std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::pop_back(_QWORD *a1)
{
  unint64_t v2;
  void **v4;

  v2 = a1[5] + a1[4] - 1;
  v4 = (void **)(*(_QWORD *)(a1[1] + 8 * (v2 / 0xAA)) + 24 * (v2 % 0xAA));
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v4);
  --a1[5];
  return std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

uint64_t std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::emplace_back<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (_QWORD *)(*(_QWORD *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  *v8 = 0;
  v8[1] = 0;
  v8[2] = 0;
  *(_OWORD *)v8 = *(_OWORD *)a2;
  v8[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v9 = a1[4];
  v10 = a1[5] + 1;
  a1[5] = v10;
  v11 = v9 + v10;
  v12 = a1[1];
  v13 = (_QWORD *)(v12 + 8 * (v11 / 0xAA));
  v14 = *v13 + 24 * (v11 % 0xAA);
  if (a1[2] == v12)
    v14 = 0;
  if (v14 == *v13)
    v14 = *(v13 - 1) + 4080;
  return v14 - 24;
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    std::vector<float>::__append((char **)a1, a2 - v2);
  }
}

uint64_t kaldi::quasar::OnlineLASSpeculativeDecodable::ClipEncodedStateIfNeeded(uint64_t this)
{
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  if (!*(_BYTE *)(this + 204))
  {
    v1 = this;
    this = kaldi::OnlineFeatureMatrix::IsValidFrame(*(int32x2_t **)(this + 24), *(_DWORD *)(this + 56), 1);
    if ((_DWORD)this)
    {
      if (*(_DWORD *)(v1 + 200))
      {
        if (*(_QWORD *)(v1 + 184))
        {
          v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v1 + 24) + 16) + 24))(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 16));
          v3 = *(_DWORD *)(v1 + 200);
          v4 = (v3
                            / (int)(kaldi::quasar::CEStatelessEncoderNet::FrameSubsamplingFactor(*(kaldi::quasar::CEStatelessEncoderNet **)(v1 + 8))
                                  * v2));
          this = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v1 + 184) + 160))(*(_QWORD *)(v1 + 184), 0);
          if ((int)this >= (int)v4)
          {
            v5 = (_QWORD *)kaldi::quasar::CEStatelessEncoderNet::Engine(*(kaldi::quasar::CEStatelessEncoderNet **)(v1 + 8));
            (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)*v5 + 112))(&v7, *v5, *(_QWORD *)(v1 + 184), 0, v4);
            v6 = v7;
            v7 = 0;
            this = *(_QWORD *)(v1 + 184);
            *(_QWORD *)(v1 + 184) = v6;
            if (this)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)this + 8))(this);
              this = v7;
              v7 = 0;
              if (this)
                this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
            }
            *(_BYTE *)(v1 + 204) = 1;
          }
        }
      }
    }
  }
  return this;
}

uint64_t kaldi::quasar::OnlineLASSpeculativeDecodable::SetAudioEndMilliseconds(uint64_t this, int a2)
{
  *(_DWORD *)(this + 200) = a2;
  return kaldi::quasar::OnlineLASSpeculativeDecodable::ClipEncodedStateIfNeeded(this);
}

uint64_t kaldi::quasar::OnlineLASSpeculativeDecodable::BOSIndex(kaldi::quasar::CEStatelessDecoderNet **this)
{
  return kaldi::quasar::CEStatelessDecoderNet::BOSIndex(this[2]);
}

uint64_t kaldi::quasar::OnlineLASSpeculativeDecodable::EOSIndex(kaldi::quasar::CEStatelessDecoderNet **this)
{
  return kaldi::quasar::CEStatelessDecoderNet::EOSIndex(this[2]);
}

uint64_t kaldi::quasar::OnlineLASSpeculativeDecodable::SilIndex(kaldi::quasar::CEStatelessDecoderNet **this)
{
  return kaldi::quasar::CEStatelessDecoderNet::SilIndex(this[2]);
}

uint64_t kaldi::quasar::OnlineLASSpeculativeDecodable::FrameOffset(kaldi::quasar::OnlineLASSpeculativeDecodable *this)
{
  return *((unsigned int *)this + 14);
}

void kaldi::CuSubVector<float>::Read()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Function is not implemented for this class");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::CuSubVector<float>::~CuSubVector(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E5D29D70;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  JUMPOUT(0x1AF44D190);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD v29[2];
  char v30;

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = operator new(0x40uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  *v17 = 0;
  v17[1] = v10;
  v18 = *a4;
  v19 = **a4;
  v17[4] = *((_QWORD *)*a4 + 2);
  *((_OWORD *)v17 + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  v17[6] = 0;
  v17[7] = 0;
  v17[5] = 0;
  v30 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v26)
  {
    *(_QWORD *)v29[0] = *v26;
    *v26 = v29[0];
  }
  else
  {
    *(_QWORD *)v29[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v29[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v29[0])
    {
      v27 = *(_QWORD *)(*(_QWORD *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v27 >= v11)
          v27 %= v11;
      }
      else
      {
        v27 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v29[0];
    }
  }
  i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<float>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return i;
}

void sub_1AD7AAFE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<float>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<float>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<float>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<float>>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::unordered_set<int>::unordered_set(uint64_t a1, uint64_t a2)
{
  int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(int **)(a2 + 16); i; i = *(int **)i)
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(a1, i + 4, i + 4);
  return a1;
}

void sub_1AD7AB0DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_1AD7AB14C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  void **v7;
  unint64_t v8;
  void **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  void **v15;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0xAA];
    v7 = (void **)((char *)*v6 + 24 * (v5 % 0xAA));
    v8 = (unint64_t)v2[(a1[5] + v5) / 0xAA] + 24 * ((a1[5] + v5) % 0xAA);
    if (v7 != (void **)v8)
    {
      do
      {
        v15 = v7;
        std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v15);
        v7 += 3;
        if ((char *)v7 - (_BYTE *)*v6 == 4080)
        {
          v9 = (void **)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != (void **)v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 85;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 170;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    v13 = *v2++;
    operator delete(v13);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<float>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 170 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0xAA)
    a2 = 1;
  if (v5 < 0x154)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1AD7AB67C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<int,float>>::__assign_with_size[abi:ne180100]<std::pair<int,float>*,std::pair<int,float>*>(_QWORD *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 3)
  {
    v18 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v18;
    v19 = (v18 - result) >> 3;
    if (v19 >= a4)
    {
      v24 = result;
      if (a2 != a3)
      {
        v25 = result;
        do
        {
          *(_DWORD *)v25 = *(_DWORD *)v6;
          *((_DWORD *)v25 + 1) = *((_DWORD *)v6 + 1);
          v24 += 8;
          ++v6;
          v25 += 8;
        }
        while (v6 != a3);
      }
      v17 = (char *)(v24 - result);
      v12 = result;
    }
    else
    {
      v20 = &a2[v19];
      if (v12 != result)
      {
        do
        {
          *(_DWORD *)result = *(_DWORD *)v6;
          *((_DWORD *)result + 1) = *((_DWORD *)v6++ + 1);
          result += 8;
        }
        while (v6 != v20);
      }
      v21 = v12;
      if (v20 != a3)
      {
        v22 = v12;
        do
        {
          v23 = *v20++;
          *(_QWORD *)v22 = v23;
          v22 += 8;
          v21 += 8;
        }
        while (v20 != a3);
      }
      v17 = (char *)(v21 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, v11);
    v14 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v14;
    v15 = v14;
    if (v6 != a3)
    {
      v15 = v12;
      do
      {
        v16 = *v6++;
        *(_QWORD *)v15 = v16;
        v15 += 8;
      }
      while (v6 != a3);
    }
    v17 = (char *)(v15 - v12);
  }
  *v13 = &v17[(_QWORD)v12];
  return result;
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1AD7AB898(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::SelectLags(float *a1, void **a2)
{
  float v3;
  float v4;
  float *v5;
  float *v6;
  float *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  float *v14;
  float *v15;
  int v16;
  float *v17;
  float *__p;
  float *v19;
  float *v20;

  v3 = 1.0 / a1[5];
  v4 = 1.0 / a1[4];
  __p = 0;
  v19 = 0;
  v20 = 0;
  if (v3 <= v4)
  {
    v6 = 0;
    do
    {
      if (v6 >= v20)
      {
        v8 = __p;
        v9 = v6 - __p;
        v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v11 = (char *)v20 - (char *)__p;
        if (((char *)v20 - (char *)__p) >> 1 > v10)
          v10 = v11 >> 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
          v12 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v12 = v10;
        if (v12)
        {
          v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v20, v12);
          v8 = __p;
          v6 = v19;
        }
        else
        {
          v13 = 0;
        }
        v14 = (float *)&v13[4 * v9];
        *v14 = v3;
        v15 = v14 + 1;
        while (v6 != v8)
        {
          v16 = *((_DWORD *)v6-- - 1);
          *((_DWORD *)v14-- - 1) = v16;
        }
        __p = v14;
        v20 = (float *)&v13[4 * v12];
        if (v8)
          operator delete(v8);
        v6 = v15;
      }
      else
      {
        *v6++ = v3;
      }
      v19 = v6;
      v3 = (a1[10] + 1.0) * v3;
    }
    while (v4 >= v3);
    v5 = __p;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  kaldi::Vector<float>::Resize(a2, (unint64_t)((char *)v6 - (char *)v5) >> 2, 0);
  v17 = __p;
  if (v19 != __p)
  {
    memmove(*a2, __p, (char *)v19 - (char *)__p);
    v17 = __p;
  }
  if (v17)
    operator delete(v17);
}

{
  float v3;
  float v4;
  float *v5;
  float *v6;
  float *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  float *v14;
  float *v15;
  int v16;
  float *v17;
  float *__p;
  float *v19;
  float *v20;

  v3 = 1.0 / a1[5];
  v4 = 1.0 / a1[4];
  __p = 0;
  v19 = 0;
  v20 = 0;
  if (v3 <= v4)
  {
    v6 = 0;
    do
    {
      if (v6 >= v20)
      {
        v8 = __p;
        v9 = v6 - __p;
        v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v11 = (char *)v20 - (char *)__p;
        if (((char *)v20 - (char *)__p) >> 1 > v10)
          v10 = v11 >> 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
          v12 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v12 = v10;
        if (v12)
        {
          v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v20, v12);
          v8 = __p;
          v6 = v19;
        }
        else
        {
          v13 = 0;
        }
        v14 = (float *)&v13[4 * v9];
        *v14 = v3;
        v15 = v14 + 1;
        while (v6 != v8)
        {
          v16 = *((_DWORD *)v6-- - 1);
          *((_DWORD *)v14-- - 1) = v16;
        }
        __p = v14;
        v20 = (float *)&v13[4 * v12];
        if (v8)
          operator delete(v8);
        v6 = v15;
      }
      else
      {
        *v6++ = v3;
      }
      v19 = v6;
      v3 = (a1[10] + 1.0) * v3;
    }
    while (v4 >= v3);
    v5 = __p;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  kaldi::Vector<float>::Resize(a2, (unint64_t)((char *)v6 - (char *)v5) >> 2, 0);
  v17 = __p;
  if (v19 != __p)
  {
    memmove(*a2, __p, (char *)v19 - (char *)__p);
    v17 = __p;
  }
  if (v17)
    operator delete(v17);
}

void sub_1AD7ABA48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::ComputeLocalCost(const float **a1, const float **a2, uint64_t a3, uint64_t a4)
{
  kaldi::VectorBase<float>::Set(a4, 1.0);
  kaldi::VectorBase<float>::AddVec<float>(a4, a1, -1.0);
  kaldi::VectorBase<float>::AddVecVec(a4, a2, a1, *(float *)(a3 + 24), 1.0);
}

void kaldi::PitchFrameInfo::ComputeBacktraces(uint64_t *a1, uint64_t a2, uint64_t a3, const float **a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v14;
  double v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  float v26;
  float v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  float v35;
  int v36;
  uint64_t v37;
  float v38;
  _DWORD *v39;
  int v40;
  uint64_t v41;
  char v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  int *v50;
  int v51;
  int v52;
  int *v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  int v57;
  int v58;
  float v59;
  uint64_t v60;
  char v61;
  int v62;
  int v63;
  int v64;
  int *v65;
  int v66;
  int v67;
  uint64_t v68;
  int v69;
  float v70;
  uint64_t v71;
  int v72;
  int v73;
  float v74;
  const float *v75[3];

  v14 = *(unsigned int *)(a3 + 8);
  memset(v75, 0, sizeof(v75));
  kaldi::Vector<float>::Resize((void **)v75, v14, 1);
  kaldi::ComputeLocalCost((const float **)a3, a4, a2, (uint64_t)v75);
  v15 = log(*(float *)(a2 + 40) + 1.0);
  v16 = *(float *)(a2 + 28);
  v17 = *a5;
  v18 = *a7;
  if (*a6 == a6[1])
    std::vector<std::pair<int,int>>::resize((uint64_t)a6, (int)v14);
  v19 = v15 * v15;
  v20 = v16 * v19;
  if (kaldi::pitch_use_naive_search)
  {
    if ((int)v14 >= 1)
    {
      v21 = 0;
      v22 = 0;
      v23 = *a1;
      do
      {
        v24 = 0;
        v25 = -1;
        v26 = INFINITY;
        do
        {
          v27 = *(float *)(v17 + 4 * v24);
          if ((float)(v27 + (float)((float)((v21 + v24) * (v21 + v24)) * v20)) < v26)
          {
            v26 = v27 + (float)((float)((v21 + v24) * (v21 + v24)) * v20);
            v25 = v24;
          }
          ++v24;
        }
        while (v14 != v24);
        *(float *)(v18 + 4 * v22) = v26;
        *(_DWORD *)(v23 + 8 * v22++) = v25;
        --v21;
      }
      while (v22 != v14);
    }
  }
  else if ((int)v14 >= 1)
  {
    v28 = 0;
    v29 = 0;
    v30 = *a1;
    v31 = *a6;
    v32 = 1;
    while (1)
    {
      v33 = v29;
      v34 = v29;
      v35 = *(float *)(v17 + 4 * v29) + (float)((float)((v29 - v28) * (v29 - v28)) * v20);
      if ((int)v14 <= v29 + 1)
        v36 = v29 + 1;
      else
        v36 = v14;
      v29 = v36 - 1;
      v37 = v34 + 1;
      do
      {
        v38 = v35;
        if (v37 >= v14)
          goto LABEL_21;
        v35 = *(float *)(v17 + 4 * v37) + (float)((float)((v32 + v33) * (v32 + v33)) * v20);
        ++v33;
        ++v37;
      }
      while (v35 < v38);
      v29 = v33 - 1;
LABEL_21:
      *(_DWORD *)(v30 + 8 * v28) = v29;
      *(float *)(v18 + 4 * v28) = v38;
      v39 = (_DWORD *)(v31 + 8 * v28);
      *v39 = v29;
      v39[1] = v14 - 1;
      ++v28;
      --v32;
      if (v28 == v14)
      {
        v40 = 0;
        v41 = *a6;
        while (1)
        {
          if ((v40 & 1) != 0)
          {
            v60 = 0;
            v61 = 0;
            v62 = 0;
LABEL_45:
            v63 = -(int)v60;
            v64 = v62;
            do
            {
              v65 = (int *)(v41 + 8 * v60);
              v66 = v65[1];
              if (v64 <= *v65)
                v67 = *v65;
              else
                v67 = v64;
              if (v66 == v67)
              {
                v64 = v67;
              }
              else
              {
                v68 = *a1;
                v69 = *(_DWORD *)(*a1 + 8 * v60);
                v64 = v67;
                if (v69 != v67)
                {
                  v64 = *(_DWORD *)(*a1 + 8 * v60);
                  if (v67 >= v66 - 1)
                  {
                    *v65 = v69;
                  }
                  else
                  {
                    v70 = *(float *)(v18 + 4 * v60);
                    v71 = v67;
                    v72 = ~v67 + v66;
                    v62 = *(_DWORD *)(*a1 + 8 * v60);
                    do
                    {
                      v73 = (v63 + v71) * (v63 + v71);
                      v74 = *(float *)(v17 + 4 * v71);
                      if ((float)(v74 + (float)((float)v73 * v20)) >= v70)
                      {
                        if (v71 > v62)
                          break;
                      }
                      else
                      {
                        v70 = v74 + (float)((float)v73 * v20);
                        v62 = v71;
                      }
                      ++v71;
                      --v72;
                    }
                    while (v72);
                    *v65 = v62;
                    if (v62 != v69)
                    {
                      *(float *)(v18 + 4 * v60) = v70;
                      *(_DWORD *)(v68 + 8 * v60++) = v62;
                      v61 = 1;
                      if (v60 != v14)
                        goto LABEL_45;
                      goto LABEL_66;
                    }
                  }
                }
              }
              ++v60;
              --v63;
            }
            while (v60 != v14);
            if ((v61 & 1) == 0)
              goto LABEL_67;
          }
          else
          {
            v42 = 0;
            v43 = 1 - v14;
            v44 = v14;
            v45 = v14 - 1;
            do
            {
              v46 = v44--;
              v47 = *(_DWORD *)(v41 + 8 * v44);
              v48 = v41 + 8 * v44;
              v51 = *(_DWORD *)(v48 + 4);
              v50 = (int *)(v48 + 4);
              v49 = v51;
              if (v51 >= v45)
                v52 = v45;
              else
                v52 = v49;
              if (v52 == v47)
              {
                v45 = *(_DWORD *)(v41 + 8 * v44);
              }
              else
              {
                v53 = (int *)(*a1 + 8 * v44);
                v45 = *v53;
                if (*v53 == v52)
                {
                  v45 = v52;
                }
                else
                {
                  v54 = v47 + 1;
                  if (v52 <= (int)v54)
                  {
                    *v50 = v45;
                  }
                  else
                  {
                    v55 = *(float *)(v18 + 4 * v44);
                    v56 = v52;
                    v57 = *v53;
                    do
                    {
                      v58 = (v43 + v56) * (v43 + v56);
                      v59 = *(float *)(v17 + 4 * v56);
                      if ((float)(v59 + (float)((float)v58 * v20)) >= v55)
                      {
                        if (v56 < v57)
                          break;
                      }
                      else
                      {
                        v55 = v59 + (float)((float)v58 * v20);
                        v57 = v56;
                      }
                      --v56;
                    }
                    while (v56 > v54);
                    *v50 = v57;
                    if (v57 != v45)
                    {
                      *(float *)(v18 + 4 * v44) = v55;
                      *v53 = v57;
                      v42 = 1;
                      v45 = v57;
                    }
                  }
                }
              }
              ++v43;
            }
            while (v46 > 1);
            if ((v42 & 1) == 0)
              goto LABEL_67;
          }
LABEL_66:
          if (++v40 == (_DWORD)v14)
            goto LABEL_67;
        }
      }
    }
  }
LABEL_67:
  *((_DWORD *)a1 + 7) = -1;
  kaldi::VectorBase<float>::AddVec<float>((uint64_t)a7, v75, 1.0);
  kaldi::Vector<float>::Destroy((uint64_t)v75);
}

void sub_1AD7ABEE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<int,int>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<std::pair<int,int>>::__append((char **)a1, a2 - v2);
  }
}

uint64_t *kaldi::PitchFrameInfo::SetBestState(uint64_t *result, int a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  int *v8;

  if (result)
  {
    v3 = (_DWORD *)result + 7;
    if (*((_DWORD *)result + 7) != a2)
    {
      v4 = (_DWORD *)(a3 + 4);
      do
      {
        v5 = (uint64_t *)result[4];
        if (v5)
          *(v4 - 1) = a2;
        v6 = *((_DWORD *)result + 6);
        v7 = *result;
        *v3 = a2;
        if (!v5)
          break;
        v8 = (int *)(v7 + 8 * (a2 - v6));
        *v4 = v8[1];
        v4 -= 2;
        a2 = *v8;
        v3 = (_DWORD *)v5 + 7;
        result = v5;
      }
      while (a2 != *((_DWORD *)v5 + 7));
    }
  }
  return result;
}

uint64_t kaldi::PitchFrameInfo::ComputeLatency(kaldi::PitchFrameInfo *this, int a2)
{
  int v3;
  uint64_t result;
  int v5;
  int v6;

  if (a2 < 1)
    return 0;
  v3 = 0;
  result = 0;
  v5 = ((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3) - 1;
  do
  {
    v6 = *((_DWORD *)this + 6);
    v3 = *(_DWORD *)(*(_QWORD *)this + 8 * (v3 - v6));
    v5 = *(_DWORD *)(*(_QWORD *)this + 8 * (v5 - v6));
    if (v3 == v5)
      break;
    this = (kaldi::PitchFrameInfo *)*((_QWORD *)this + 4);
    result = this ? (result + 1) : result;
  }
  while (this && (int)result < a2);
  return result;
}

uint64_t kaldi::OnlinePitchFeatureImpl::OnlinePitchFeatureImpl(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  void **v7;
  char **v8;
  void **v9;
  kaldi::LinearResample *v10;
  double v11;
  double v12;
  unsigned int v13;
  float v14;
  int v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void *v33[3];

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 88) = 0;
  v7 = (void **)(a1 + 88);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  v8 = (char **)(a1 + 128);
  *(_OWORD *)(a1 + 184) = 0u;
  v9 = (void **)(a1 + 184);
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 225) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  v10 = (kaldi::LinearResample *)operator new();
  kaldi::LinearResample::LinearResample(v10, (int)*(float *)a2, (int)*(float *)(a2 + 36), *(float *)(a2 + 32), *(_DWORD *)(a2 + 48));
  *(_QWORD *)(a1 + 120) = v10;
  v11 = *(float *)(a2 + 36);
  v12 = (double)*(int *)(a2 + 52) / (v11 + v11);
  v13 = vcvtmd_s64_f64((1.0 / *(float *)(a2 + 16) + v12) * v11);
  *(_DWORD *)(a1 + 76) = vcvtpd_s64_f64((1.0 / *(float *)(a2 + 20) - v12) * v11);
  *(_DWORD *)(a1 + 80) = v13;
  *(_DWORD *)(a1 + 176) = 0;
  kaldi::SelectLags((float *)a2, v7);
  v14 = *(float *)(a2 + 36);
  memset(v33, 0, sizeof(v33));
  kaldi::Vector<float>::Resize(v33, *(unsigned int *)(a1 + 96), 1);
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)v33, (const void **)v7);
  kaldi::VectorBase<float>::Add((uint64_t)v33, (float)-*(_DWORD *)(a1 + 76) / *(float *)(a2 + 36));
  v16 = *(_DWORD *)(a1 + 76);
  v15 = *(_DWORD *)(a1 + 80);
  v17 = operator new();
  kaldi::ArbitraryResample::ArbitraryResample(v17, (v15 - v16 + 1), v33, *(unsigned int *)(a2 + 52), *(float *)(a2 + 36), v14 * 0.5);
  *(_QWORD *)(a1 + 112) = v17;
  v18 = (_QWORD *)operator new();
  std::vector<kaldi::PitchFrameInfo::StateInfo>::vector(v18, *(int *)(a1 + 96));
  v18[3] = 0xFFFFFFFF00000000;
  v18[4] = 0;
  v19 = *(_QWORD *)(a1 + 144);
  v20 = *(_QWORD **)(a1 + 136);
  if ((unint64_t)v20 >= v19)
  {
    v22 = ((char *)v20 - *v8) >> 3;
    if ((unint64_t)(v22 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v23 = v19 - (_QWORD)*v8;
    v24 = v23 >> 2;
    if (v23 >> 2 <= (unint64_t)(v22 + 1))
      v24 = v22 + 1;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
      v25 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v25 = v24;
    if (v25)
      v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 144, v25);
    else
      v26 = 0;
    v27 = &v26[8 * v22];
    v28 = &v26[8 * v25];
    *(_QWORD *)v27 = v18;
    v21 = v27 + 8;
    v30 = *(char **)(a1 + 128);
    v29 = *(char **)(a1 + 136);
    if (v29 != v30)
    {
      do
      {
        v31 = *((_QWORD *)v29 - 1);
        v29 -= 8;
        *((_QWORD *)v27 - 1) = v31;
        v27 -= 8;
      }
      while (v29 != v30);
      v29 = *v8;
    }
    *(_QWORD *)(a1 + 128) = v27;
    *(_QWORD *)(a1 + 136) = v21;
    *(_QWORD *)(a1 + 144) = v28;
    if (v29)
      operator delete(v29);
  }
  else
  {
    *v20 = v18;
    v21 = v20 + 1;
  }
  *(_QWORD *)(a1 + 136) = v21;
  kaldi::Vector<float>::Resize(v9, *(unsigned int *)(a1 + 96), 0);
  kaldi::Vector<float>::Destroy((uint64_t)v33);
  return a1;
}

void sub_1AD7AC2D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v9;
  void *v10;
  void *v11;
  va_list va;

  va_start(va, a2);
  v7 = v6;
  MEMORY[0x1AF44D190](v7, 0x1020C403D3F9D26);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  kaldi::Vector<float>::Destroy((uint64_t)(v2 + 34));
  v9 = (void *)v2[27];
  if (v9)
  {
    v2[28] = v9;
    operator delete(v9);
  }
  kaldi::Vector<float>::Destroy(v5);
  v10 = (void *)v2[19];
  if (v10)
  {
    v2[20] = v10;
    operator delete(v10);
  }
  v11 = *v4;
  if (*v4)
  {
    v2[17] = v11;
    operator delete(v11);
  }
  kaldi::Vector<float>::Destroy(v3);
  _Unwind_Resume(a1);
}

void kaldi::OnlinePitchFeatureImpl::Compute(kaldi::OnlinePitchFeatureImpl *this, uint64_t a2, int32x2_t *a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *((_DWORD *)this + 15);
  if (v6)
  {
    v7 = *(_DWORD *)(a2 + 8);
    if (v7 >= 1)
    {
      v8 = 0;
      v9 = (int)((float)(*(float *)this * (float)v6) * 0.001 * *((float *)this + 1));
      do
      {
        v10 = v7 - v8;
        if (v10 >= v9)
          v10 = v9;
        v20 = 0;
        v21 = 0;
        v11 = v10 + v8;
        v19 = *(_QWORD *)a2 + 4 * v8;
        LODWORD(v20) = v10;
        kaldi::OnlinePitchFeatureImpl::AcceptWaveform((uint64_t)this, (uint64_t)&v19);
        v7 = *(_DWORD *)(a2 + 8);
        v8 = v11;
      }
      while (v11 < v7);
    }
  }
  else
  {
    kaldi::OnlinePitchFeatureImpl::AcceptWaveform((uint64_t)this, a2);
  }
  kaldi::OnlinePitchFeatureImpl::InputFinished(this);
  v12 = (*((_QWORD *)this + 28) - *((_QWORD *)this + 27)) >> 3;
  v13 = *((_DWORD *)this + 44);
  v14 = (v12 - v13);
  if ((_DWORD)v12 == v13)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"No frames output in pitch extraction", 36);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v19);
    }
    kaldi::Matrix<float>::Resize(a3, 0, 0, 0, 0);
  }
  else
  {
    kaldi::Matrix<float>::Resize(a3, (v12 - v13), 2, 0, 0);
    if ((int)v14 >= 1)
    {
      v15 = 0;
      v16 = 4;
      do
      {
        v17 = *(_QWORD *)a3 + 4 * a3[2].i32[0] * (int)v15;
        kaldi::MatrixBase<float>::NumCols((uint64_t)a3);
        v18 = (_DWORD *)(*((_QWORD *)this + 27) + v16);
        *(_DWORD *)v17 = *v18;
        *(float *)(v17 + 4) = 1.0 / *(float *)(*((_QWORD *)this + 11) + 4 * (int)*(v18 - 1));
        ++v15;
        v16 += 8;
      }
      while (v14 != v15);
    }
  }
}

void sub_1AD7AC584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

void kaldi::OnlinePitchFeatureImpl::AcceptWaveform(uint64_t a1, uint64_t a2)
{
  char v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  double v15;
  float v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  int v25;
  double v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  unint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  _DWORD *v51;
  int *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  float v57;
  unint64_t v58;
  uint64_t **v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t **v66;
  char *v67;
  char *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void **v74;
  unsigned int v75;
  int v76;
  char **v77;
  char **v78;
  int v79;
  int v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  void *__p;
  void *v86;
  uint64_t v87;
  _QWORD v88[2];
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93[3];
  int32x2_t v94[2];
  int v95;
  int32x2_t v96[2];
  int v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  void *v101[3];
  void *v102[3];
  char *v103;
  uint64_t v104;
  uint64_t v105;

  v3 = *(_BYTE *)(a1 + 240);
  v103 = 0;
  v104 = 0;
  v105 = 0;
  kaldi::LinearResample::Resample(*(_QWORD *)(a1 + 120), a2, v3, (void **)&v103);
  v4 = *(double *)(a1 + 248);
  v5 = *(double *)(a1 + 256);
  v6 = *(_QWORD *)(a1 + 264);
  if (*(_BYTE *)(a1 + 72))
  {
    v7 = (int)v104;
    v8 = *(_QWORD *)(a1 + 264);
  }
  else
  {
    v4 = v4 + kaldi::VecVec<float>((uint64_t)&v103, (const float **)&v103);
    v5 = v5 + kaldi::VectorBase<float>::Sum((uint64_t)&v103);
    v7 = (int)v104;
    v8 = v6 + (int)v104;
    v6 = *(_QWORD *)(a1 + 264);
  }
  v9 = kaldi::OnlinePitchFeatureImpl::NumFramesAvailable((kaldi::OnlinePitchFeatureImpl *)a1, v6 + v7, *(_BYTE *)(a1 + 73));
  v78 = (char **)(a1 + 128);
  v10 = ((*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 3) - 1;
  v80 = v9;
  v11 = (v9 - v10);
  if (v9 == v10)
  {
    kaldi::OnlinePitchFeatureImpl::UpdateRemainder(a1, (uint64_t)&v103);
  }
  else
  {
    v13 = *(_DWORD *)(a1 + 76);
    v12 = *(_DWORD *)(a1 + 80);
    v14 = *(unsigned int *)(a1 + 96);
    v15 = *(float *)(a1 + 36) * 0.001;
    v16 = *(float *)(a1 + 4);
    v79 = (int)(v15 * *(float *)(a1 + 8));
    v17 = v12 + v79;
    memset(v102, 0, sizeof(v102));
    kaldi::Vector<float>::Resize(v102, (v12 + v79), 0);
    v18 = (v12 - v13 + 1);
    memset(v101, 0, sizeof(v101));
    kaldi::Vector<float>::Resize(v101, v18, 0);
    v98 = 0;
    v99 = 0;
    v100 = 0;
    kaldi::Vector<float>::Resize(&v98, v18, 0);
    kaldi::Matrix<float>::Matrix((uint64_t)v96, v11, v18, 0, 0);
    kaldi::Matrix<float>::Matrix((uint64_t)v94, v11, v18, 0, 0);
    v75 = v14;
    memset(v93, 0, sizeof(v93));
    kaldi::Vector<float>::Resize(v93, v14, 0);
    v76 = v10;
    if (v80 > v10)
    {
      v19 = 0;
      v20 = (int)(v15 * v16);
      v77 = (char **)(a1 + 152);
      v21 = v76;
      do
      {
        kaldi::OnlinePitchFeatureImpl::ExtractFrame(a1, (uint64_t)&v103, v21 * v20, (uint64_t)v102);
        if (*(_BYTE *)(a1 + 72))
        {
          if (v21 * v20 + v17 - *(_QWORD *)(a1 + 264) >= (int)v104)
            LODWORD(v22) = v104;
          else
            v22 = v21 * v20 + v17 - *(_QWORD *)(a1 + 264);
          v83 = 0;
          v81 = &v103[4 * v19];
          v82 = (v22 - v19);
          v8 += (int)v22 - v19;
          v4 = v4 + kaldi::VecVec<float>((uint64_t)&v81, (const float **)&v81);
          v5 = v5 + kaldi::VectorBase<float>::Sum((uint64_t)&v81);
          v19 = v22;
        }
        kaldi::ComputeCorrelation((uint64_t)v102, *(_DWORD *)(a1 + 76), *(_DWORD *)(a1 + 80), v79, v101, &v98);
        v23 = *(float *)(a1 + 44);
        v24 = kaldi::VectorBase<float>::Sum((uint64_t)&v98);
        v25 = v99;
        v82 = 0;
        v83 = 0;
        v81 = (char *)(*(_QWORD *)v96 + 4 * (v21 - v76) * v97);
        v26 = v4 / (double)v8 - v5 / (double)v8 * (v5 / (double)v8);
        LODWORD(v82) = kaldi::MatrixBase<float>::NumCols((uint64_t)v96);
        v27 = v26 * (double)v79 * (v26 * (double)v79) * v23;
        kaldi::ComputeNccf((uint64_t *)v101, (uint64_t *)&v98, (uint64_t *)&v81, v27);
        v91 = 0;
        v92 = 0;
        v90 = *(_QWORD *)v94 + 4 * (v21 - v76) * v95;
        LODWORD(v91) = kaldi::MatrixBase<float>::NumCols((uint64_t)v94);
        kaldi::ComputeNccf((uint64_t *)v101, (uint64_t *)&v98, &v90, 0.0);
        if (v21 < *(int *)(a1 + 68))
        {
          v28 = operator new();
          v29 = v28;
          v30 = v26;
          *(_QWORD *)v28 = 0;
          *(_QWORD *)(v28 + 8) = 0;
          *(_QWORD *)(v28 + 16) = 0;
          *(float *)(v28 + 24) = v24 / (float)v25;
          *(float *)(v28 + 28) = v30;
          v32 = *(uint64_t **)(a1 + 160);
          v31 = *(_QWORD *)(a1 + 168);
          if ((unint64_t)v32 >= v31)
          {
            v34 = ((char *)v32 - *v77) >> 3;
            if ((unint64_t)(v34 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v35 = v31 - (_QWORD)*v77;
            v36 = v35 >> 2;
            if (v35 >> 2 <= (unint64_t)(v34 + 1))
              v36 = v34 + 1;
            if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
              v37 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v37 = v36;
            if (v37)
              v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 168, v37);
            else
              v38 = 0;
            v39 = (uint64_t *)&v38[8 * v34];
            *v39 = v29;
            v33 = v39 + 1;
            v41 = *(char **)(a1 + 152);
            v40 = *(char **)(a1 + 160);
            if (v40 != v41)
            {
              do
              {
                v42 = *((_QWORD *)v40 - 1);
                v40 -= 8;
                *--v39 = v42;
              }
              while (v40 != v41);
              v40 = *v77;
            }
            *(_QWORD *)(a1 + 152) = v39;
            *(_QWORD *)(a1 + 160) = v33;
            *(_QWORD *)(a1 + 168) = &v38[8 * v37];
            if (v40)
              operator delete(v40);
          }
          else
          {
            *v32 = v28;
            v33 = v32 + 1;
          }
          *(_QWORD *)(a1 + 160) = v33;
        }
        ++v21;
      }
      while (v80 != (_DWORD)v21);
    }
    kaldi::Matrix<float>::Matrix((uint64_t)&v90, v11, v75, 0, 0);
    kaldi::ArbitraryResample::Resample(*(_QWORD **)(a1 + 112), (uint64_t)v96, (uint64_t)&v90);
    kaldi::Matrix<float>::Resize(v96, 0, 0, 0, 0);
    kaldi::Matrix<float>::Matrix((uint64_t)v88, v11, v75, 0, 0);
    kaldi::ArbitraryResample::Resample(*(_QWORD **)(a1 + 112), (uint64_t)v94, (uint64_t)v88);
    kaldi::Matrix<float>::Resize(v94, 0, 0, 0, 0);
    kaldi::OnlinePitchFeatureImpl::UpdateRemainder(a1, (uint64_t)&v103);
    __p = 0;
    v86 = 0;
    v87 = 0;
    if (v80 > v76)
    {
      v43 = 0;
      v44 = v76;
      do
      {
        v45 = *(_QWORD **)(*(_QWORD *)(a1 + 136) - 8);
        v46 = (uint64_t *)operator new();
        std::vector<kaldi::PitchFrameInfo::StateInfo>::vector(v46, (uint64_t)(v45[1] - *v45) >> 3);
        v46[3] = 0xFFFFFFFF00000000;
        v46[4] = (uint64_t)v45;
        v47 = v88[0];
        v48 = v89;
        v49 = kaldi::MatrixBase<float>::NumCols((uint64_t)v88);
        if (v49 >= 1)
        {
          v50 = v49;
          v51 = (_DWORD *)(*v46 + 4);
          v52 = (int *)(v47 + v43 * v48);
          do
          {
            v53 = *v52++;
            *v51 = v53;
            v51 += 2;
            --v50;
          }
          while (v50);
        }
        v54 = v90;
        v55 = (int)v92;
        v56 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v90);
        v83 = 0;
        v81 = (char *)(v54 + 4 * (v44 - v76) * v55);
        v82 = v56;
        kaldi::PitchFrameInfo::ComputeBacktraces(v46, a1, (uint64_t)&v81, (const float **)(a1 + 88), (uint64_t *)(a1 + 184), (uint64_t *)&__p, (uint64_t *)v93);
        kaldi::Vector<float>::Swap((uint64_t *)(a1 + 184), (uint64_t *)v93);
        kaldi::VectorBase<float>::Min((uint64_t *)(a1 + 184));
        *(double *)(a1 + 208) = *(double *)(a1 + 208) + v57;
        kaldi::VectorBase<float>::Add(a1 + 184, -v57);
        v59 = *(uint64_t ***)(a1 + 136);
        v58 = *(_QWORD *)(a1 + 144);
        if ((unint64_t)v59 >= v58)
        {
          v61 = ((char *)v59 - *v78) >> 3;
          if ((unint64_t)(v61 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v62 = v58 - (_QWORD)*v78;
          v63 = v62 >> 2;
          if (v62 >> 2 <= (unint64_t)(v61 + 1))
            v63 = v61 + 1;
          if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
            v64 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v64 = v63;
          if (v64)
            v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 144, v64);
          else
            v65 = 0;
          v66 = (uint64_t **)&v65[8 * v61];
          *v66 = v46;
          v60 = v66 + 1;
          v68 = *(char **)(a1 + 128);
          v67 = *(char **)(a1 + 136);
          if (v67 != v68)
          {
            do
            {
              v69 = (uint64_t *)*((_QWORD *)v67 - 1);
              v67 -= 8;
              *--v66 = v69;
            }
            while (v67 != v68);
            v67 = *v78;
          }
          *(_QWORD *)(a1 + 128) = v66;
          *(_QWORD *)(a1 + 136) = v60;
          *(_QWORD *)(a1 + 144) = &v65[8 * v64];
          if (v67)
            operator delete(v67);
        }
        else
        {
          *v59 = v46;
          v60 = v59 + 1;
        }
        *(_QWORD *)(a1 + 136) = v60;
        v70 = *(int *)(a1 + 68);
        if (v44 < v70)
        {
          v71 = v90;
          v72 = (int)v92;
          v73 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v90);
          v83 = 0;
          v81 = (char *)(v71 + 4 * (v44 - v76) * v72);
          v82 = v73;
          v74 = *(void ***)(*(_QWORD *)(a1 + 152) + 8 * v44);
          kaldi::Vector<float>::Resize(v74, v73, 1);
          kaldi::VectorBase<float>::CopyFromVec((uint64_t)v74, (const void **)&v81);
          LODWORD(v70) = *(_DWORD *)(a1 + 68);
        }
        if ((_DWORD)v70 - 1 == (_DWORD)v44 && !*(_BYTE *)(a1 + 72))
          kaldi::OnlinePitchFeatureImpl::RecomputeBacktraces((kaldi::OnlinePitchFeatureImpl *)a1);
        ++v44;
        v43 += 4;
      }
      while (v80 != (_DWORD)v44);
    }
    v84 = 0;
    kaldi::VectorBase<float>::Min((uint64_t *)(a1 + 184), &v84);
    std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize(a1 + 216, ((uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 3) - 1);
    kaldi::PitchFrameInfo::SetBestState(*(uint64_t **)(*(_QWORD *)(a1 + 136) - 8), v84, *(_QWORD *)(a1 + 224) - 8);
    *(_DWORD *)(a1 + 176) = kaldi::PitchFrameInfo::ComputeLatency(*(kaldi::PitchFrameInfo **)(*(_QWORD *)(a1 + 136) - 8), *(_DWORD *)(a1 + 56));
    if (kaldi::g_kaldi_verbose_level >= 4)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v81, 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"Latency is ", 11);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v81);
    }
    if (__p)
    {
      v86 = __p;
      operator delete(__p);
    }
    kaldi::Matrix<float>::~Matrix((uint64_t)v88);
    kaldi::Matrix<float>::~Matrix((uint64_t)&v90);
    kaldi::Vector<float>::Destroy((uint64_t)v93);
    kaldi::Matrix<float>::~Matrix((uint64_t)v94);
    kaldi::Matrix<float>::~Matrix((uint64_t)v96);
    kaldi::Vector<float>::Destroy((uint64_t)&v98);
    kaldi::Vector<float>::Destroy((uint64_t)v101);
    kaldi::Vector<float>::Destroy((uint64_t)v102);
  }
  kaldi::Vector<float>::Destroy((uint64_t)&v103);
}

void sub_1AD7ACE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  char a67;
  char a70;
  uint64_t v70;

  if (__p)
    operator delete(__p);
  kaldi::Matrix<float>::~Matrix((uint64_t)&a57);
  kaldi::Matrix<float>::~Matrix((uint64_t)&a62);
  kaldi::Vector<float>::Destroy((uint64_t)&a67);
  kaldi::Matrix<float>::~Matrix((uint64_t)&a70);
  kaldi::Matrix<float>::~Matrix((uint64_t)&STACK[0x210]);
  kaldi::Vector<float>::Destroy(v70 - 248);
  kaldi::Vector<float>::Destroy(v70 - 224);
  kaldi::Vector<float>::Destroy(v70 - 200);
  kaldi::Vector<float>::Destroy(v70 - 176);
  _Unwind_Resume(a1);
}

void kaldi::OnlinePitchFeatureImpl::InputFinished(kaldi::OnlinePitchFeatureImpl *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD v4[35];

  *((_BYTE *)this + 240) = 1;
  memset(v4, 0, 24);
  kaldi::OnlinePitchFeatureImpl::AcceptWaveform((uint64_t)this, (uint64_t)v4);
  kaldi::Vector<float>::Destroy((uint64_t)v4);
  if ((signed int)(((*((_QWORD *)this + 17) - *((_QWORD *)this + 16)) >> 3) - 1) < *((_DWORD *)this + 17)
    && !*((_BYTE *)this + 72))
  {
    kaldi::OnlinePitchFeatureImpl::RecomputeBacktraces(this);
  }
  *((_DWORD *)this + 44) = 0;
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v4, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Pitch-tracking Viterbi cost is ", 31);
    v2 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" per frame, over ", 17);
    v3 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" frames.", 8);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v4);
  }
}

void sub_1AD7AD07C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlinePitchFeatureImpl::NumFramesAvailable(kaldi::OnlinePitchFeatureImpl *this, uint64_t a2, char a3)
{
  double v3;
  int v4;
  int v6;

  v3 = *((float *)this + 9) * 0.001;
  v4 = (int)(v3 * *((float *)this + 2));
  if (!*((_BYTE *)this + 240))
    v4 += *((_DWORD *)this + 20);
  if (a2 < v4)
    return 0;
  v6 = (int)(v3 * *((float *)this + 1));
  if (!*((_BYTE *)this + 240) || (a3 & 1) != 0)
    return ((a2 - v4) / v6) + 1;
  else
    return (int)(float)((float)((float)a2 / (float)v6) + 0.5);
}

void kaldi::OnlinePitchFeatureImpl::UpdateRemainder(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const float *v12;
  char *v13;
  _DWORD *v14;
  void *v15[3];

  v4 = *(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128);
  v5 = (v4 >> 3) - 1;
  v6 = (int)(*(float *)(a1 + 36) * 0.001 * *(float *)(a1 + 4));
  v7 = v5 * v6;
  *(double *)(a1 + 248) = *(double *)(a1 + 248) + kaldi::VecVec<float>(a2, (const float **)a2);
  *(double *)(a1 + 256) = *(double *)(a1 + 256) + kaldi::VectorBase<float>::Sum(a2);
  v8 = *(_QWORD *)(a1 + 264) + *(int *)(a2 + 8);
  if (v8 >= v5 * v6)
  {
    memset(v15, 0, sizeof(v15));
    kaldi::Vector<float>::Resize(v15, (v8 - v7), 0);
    if (v8 > v7)
    {
      v9 = 0;
      v10 = 0;
      v11 = *(_QWORD *)(a1 + 264);
      v12 = *(const float **)a2;
      v13 = (char *)v15[0];
      do
      {
        if (v7 + v10 >= v11)
          v14 = (_DWORD *)((char *)v12
                         + ((uint64_t)(((unint64_t)(v5 * v6) << 32) - (v11 << 32) + v9) >> 30));
        else
          v14 = (_DWORD *)(*(_QWORD *)(a1 + 272)
                         + 4 * (int)(v6 * (((unint64_t)v4 >> 3) - 1) - v11 + v10 + *(_DWORD *)(a1 + 280)));
        *(_DWORD *)&v13[v9 >> 30] = *v14;
        ++v10;
        v9 += 0x100000000;
      }
      while (v7 + v10 < v8);
    }
    kaldi::Vector<float>::Swap((uint64_t *)(a1 + 272), (uint64_t *)v15);
    kaldi::Vector<float>::Destroy((uint64_t)v15);
  }
  else
  {
    kaldi::Vector<float>::Resize((void **)(a1 + 272), 0, 0);
  }
  *(_QWORD *)(a1 + 264) = v8;
}

void sub_1AD7AD2C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

float kaldi::OnlinePitchFeatureImpl::ExtractFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v12;
  float result;
  uint64_t *v14;
  uint64_t *v15;
  unsigned int v16;
  unsigned int v17;
  float *v18;
  uint64_t v19;
  float v20;
  double v21;
  unint64_t v22;
  float *v23;
  float v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v7 = *(_DWORD *)(a4 + 8);
  v8 = a3 - *(_QWORD *)(a1 + 264);
  v9 = v7 + v8;
  v10 = *(_DWORD *)(a2 + 8);
  if (v7 + (int)v8 <= v10)
  {
    if ((v8 & 0x80000000) != 0)
    {
      v16 = *(_DWORD *)(a1 + 280) + v8;
      v17 = *(_DWORD *)(a1 + 264) - a3;
      v30 = 0;
      v31 = 0;
      v18 = *(float **)a4;
      v28 = 0;
      v29 = (uint64_t)v18;
      LODWORD(v30) = v17;
      v26 = *(_QWORD *)(a1 + 272) + 4 * v16;
      v27 = v17;
      kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v29, (const void **)&v26);
      v30 = 0;
      v31 = 0;
      v19 = *(_QWORD *)a4 + 4 * v17;
      v28 = 0;
      v29 = v19;
      LODWORD(v30) = v9;
      v26 = *(_QWORD *)a2;
      v27 = v9;
      v15 = &v29;
      v14 = &v26;
    }
    else
    {
      v30 = 0;
      v31 = 0;
      v29 = *(_QWORD *)a2 + 4 * v8;
      LODWORD(v30) = v7;
      v14 = &v29;
      v15 = (uint64_t *)a4;
    }
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)v15, (const void **)v14);
    v20 = *(float *)(a1 + 12);
    if (v20 != 0.0)
    {
      v21 = v20;
      v22 = *(unsigned int *)(a4 + 8);
      if ((int)v22 >= 2)
      {
        v23 = *(float **)a4;
        v24 = -v20;
        do
          v23[(v22 - 1)] = v23[(v22 - 1)] + (float)(v24 * v23[(v22 - 2)]);
        while (v22-- > 2);
      }
      result = (1.0 - v21) * **(float **)a4;
      **(float **)a4 = result;
    }
  }
  else
  {
    v12 = v10 - v8;
    kaldi::VectorBase<float>::SetZero(a4);
    v30 = 0;
    v31 = 0;
    v29 = *(_QWORD *)a4;
    LODWORD(v30) = v12;
    kaldi::OnlinePitchFeatureImpl::ExtractFrame(a1, a2, a3, &v29);
  }
  return result;
}

void kaldi::OnlinePitchFeatureImpl::RecomputeBacktraces(kaldi::OnlinePitchFeatureImpl *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  uint64_t v17;
  float v18;
  float v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  BOOL v26;
  float v27;
  float v28;
  float v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD v38[35];
  void *v39;
  void *v40;
  uint64_t v41;
  void *v42[3];
  void *v43;
  uint64_t v44;
  uint64_t v45;

  v1 = (*((_QWORD *)this + 17) - *((_QWORD *)this + 16)) >> 3;
  v2 = (v1 - 1);
  if ((_DWORD)v1 != 1)
  {
    v5 = *((_QWORD *)this + 19);
    v4 = *((_QWORD *)this + 20);
    if ((int)v1 < 2)
      goto LABEL_24;
    v6 = 0;
    v7 = (v4 - v5) >> 3;
    v8 = *((double *)this + 31) / (double)*((uint64_t *)this + 33)
       - *((double *)this + 32)
       / (double)*((uint64_t *)this + 33)
       * (*((double *)this + 32)
        / (double)*((uint64_t *)this + 33));
    v9 = fabsf(v8);
    v10 = v2;
    v11 = *((_QWORD *)this + 19);
    do
    {
      v12 = *(float *)(*(_QWORD *)v11 + 28);
      if (v12 != v8
        && (COERCE_INT(fabs(v12 - v8)) > 2139095039 || fabsf(v12 - v8) > (float)((float)(v9 + fabsf(v12)) * 0.01)))
      {
        v6 = 1;
      }
      v11 += 8;
      --v10;
    }
    while (v10);
    if ((v6 & 1) != 0)
    {
      v13 = *((unsigned int *)this + 48);
      v14 = *((float *)this + 9);
      v15 = *((float *)this + 2);
      v16 = *((float *)this + 11);
      v43 = 0;
      v44 = 0;
      v45 = 0;
      kaldi::Vector<float>::Resize(&v43, v13, 0);
      memset(v42, 0, sizeof(v42));
      kaldi::Vector<float>::Resize(v42, v44, 1);
      kaldi::VectorBase<float>::CopyFromVec((uint64_t)v42, (const void **)&v43);
      v17 = 0;
      v18 = (float)(int)(v14 * 0.001 * v15);
      v19 = (float)(v8 * v18) * (float)(v8 * v18) * v16;
      v39 = 0;
      v40 = 0;
      v41 = 0;
      v20 = 0.0;
      do
      {
        v21 = *((_QWORD *)this + 19);
        v22 = *(_QWORD *)(v21 + v17);
        v23 = (float)(*(float *)(v22 + 28) * v18) * (float)(*(float *)(v22 + 28) * v18) * *((float *)this + 11);
        v24 = (float)(*(float *)(v22 + 24) + v23) / (float)(*(float *)(v22 + 24) + v19);
        v25 = fabsf(sqrtf(v24));
        v26 = v24 == -INFINITY;
        v27 = INFINITY;
        if (!v26)
          v27 = v25;
        kaldi::VectorBase<float>::Scale(*(_QWORD *)(v21 + v17), v27);
        kaldi::PitchFrameInfo::ComputeBacktraces(*(uint64_t **)(*((_QWORD *)this + 16) + v17 + 8), (uint64_t)this, v22, (const float **)this + 11, (uint64_t *)&v43, (uint64_t *)&v39, (uint64_t *)v42);
        kaldi::Vector<float>::Swap((uint64_t *)&v43, (uint64_t *)v42);
        kaldi::VectorBase<float>::Min((uint64_t *)&v43);
        v29 = v28;
        kaldi::VectorBase<float>::Add((uint64_t)&v43, -v28);
        v20 = v20 + v29;
        v17 += 8;
      }
      while (8 * v2 != v17);
      if (kaldi::g_kaldi_verbose_level > 2)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v38, 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Forward-cost per frame changed from ", 36);
        v30 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" to ", 4);
        std::ostream::operator<<();
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v38);
      }
      *((double *)this + 26) = v20;
      kaldi::Vector<float>::Swap((uint64_t *)this + 23, (uint64_t *)&v43);
      LODWORD(v38[0]) = 0;
      kaldi::VectorBase<float>::Min((uint64_t *)this + 23, (int *)v38);
      v31 = *((_QWORD *)this + 28);
      if (v7 != (v31 - *((_QWORD *)this + 27)) >> 3)
      {
        std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)this + 216, v7);
        v31 = *((_QWORD *)this + 28);
      }
      kaldi::PitchFrameInfo::SetBestState(*(uint64_t **)(*((_QWORD *)this + 17) - 8), v38[0], v31 - 8);
      *((_DWORD *)this + 44) = kaldi::PitchFrameInfo::ComputeLatency(*(kaldi::PitchFrameInfo **)(*((_QWORD *)this + 17) - 8), *((_DWORD *)this + 14));
      v33 = *((_QWORD *)this + 19);
      v32 = *((_QWORD *)this + 20);
      if (v32 == v33)
      {
        v33 = *((_QWORD *)this + 20);
      }
      else
      {
        v34 = 0;
        do
        {
          v35 = *(_QWORD *)(v33 + 8 * v34);
          if (v35)
          {
            kaldi::Vector<float>::Destroy(*(_QWORD *)(v33 + 8 * v34));
            MEMORY[0x1AF44D190](v35, 0x1080C4066DFD6F0);
            v33 = *((_QWORD *)this + 19);
            v32 = *((_QWORD *)this + 20);
          }
          ++v34;
        }
        while (v34 < (v32 - v33) >> 3);
      }
      *((_QWORD *)this + 20) = v33;
      if (v39)
      {
        v40 = v39;
        operator delete(v39);
      }
      kaldi::Vector<float>::Destroy((uint64_t)v42);
      kaldi::Vector<float>::Destroy((uint64_t)&v43);
    }
    else
    {
LABEL_24:
      if (v4 == v5)
      {
        v5 = *((_QWORD *)this + 20);
      }
      else
      {
        v36 = 0;
        do
        {
          v37 = *(_QWORD *)(v5 + 8 * v36);
          if (v37)
          {
            kaldi::Vector<float>::Destroy(*(_QWORD *)(v5 + 8 * v36));
            MEMORY[0x1AF44D190](v37, 0x1080C4066DFD6F0);
            v5 = *((_QWORD *)this + 19);
            v4 = *((_QWORD *)this + 20);
          }
          ++v36;
        }
        while (v36 < (v4 - v5) >> 3);
      }
      *((_QWORD *)this + 20) = v5;
    }
  }
}

void sub_1AD7AD854(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 192);
  if (v3)
  {
    *(_QWORD *)(v1 - 184) = v3;
    operator delete(v3);
  }
  kaldi::Vector<float>::Destroy(v1 - 168);
  kaldi::Vector<float>::Destroy(v1 - 144);
  _Unwind_Resume(a1);
}

void kaldi::OnlinePitchFeatureImpl::~OnlinePitchFeatureImpl(kaldi::OnlinePitchFeatureImpl *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void **v18;

  v2 = *((_QWORD *)this + 14);
  if (v2)
  {
    v18 = (void **)(v2 + 40);
    std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&v18);
    v3 = *(void **)(v2 + 16);
    if (v3)
    {
      *(_QWORD *)(v2 + 24) = v3;
      operator delete(v3);
    }
    MEMORY[0x1AF44D190](v2, 0x1030C40864D17A3);
  }
  v4 = *((_QWORD *)this + 15);
  if (v4)
  {
    kaldi::Vector<float>::Destroy(v4 + 88);
    v18 = (void **)(v4 + 48);
    std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&v18);
    v5 = *(void **)(v4 + 24);
    if (v5)
    {
      *(_QWORD *)(v4 + 32) = v5;
      operator delete(v5);
    }
    MEMORY[0x1AF44D190](v4, 0x10B0C40587FD9DDLL);
  }
  v7 = *((_QWORD *)this + 16);
  v6 = *((_QWORD *)this + 17);
  if (v6 != v7)
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(v7 + 8 * v8);
      if (v9)
      {
        v10 = *(void **)v9;
        if (*(_QWORD *)v9)
        {
          *(_QWORD *)(v9 + 8) = v10;
          operator delete(v10);
        }
        MEMORY[0x1AF44D190](v9, 0x1020C403D3F9D26);
        v7 = *((_QWORD *)this + 16);
        v6 = *((_QWORD *)this + 17);
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
  }
  v12 = *((_QWORD *)this + 19);
  v11 = *((_QWORD *)this + 20);
  if (v11 != v12)
  {
    v13 = 0;
    do
    {
      v14 = *(_QWORD *)(v12 + 8 * v13);
      if (v14)
      {
        kaldi::Vector<float>::Destroy(*(_QWORD *)(v12 + 8 * v13));
        MEMORY[0x1AF44D190](v14, 0x1080C4066DFD6F0);
        v12 = *((_QWORD *)this + 19);
        v11 = *((_QWORD *)this + 20);
      }
      ++v13;
    }
    while (v13 < (v11 - v12) >> 3);
  }
  kaldi::Vector<float>::Destroy((uint64_t)this + 272);
  v15 = (void *)*((_QWORD *)this + 27);
  if (v15)
  {
    *((_QWORD *)this + 28) = v15;
    operator delete(v15);
  }
  kaldi::Vector<float>::Destroy((uint64_t)this + 184);
  v16 = (void *)*((_QWORD *)this + 19);
  if (v16)
  {
    *((_QWORD *)this + 20) = v16;
    operator delete(v16);
  }
  v17 = (void *)*((_QWORD *)this + 16);
  if (v17)
  {
    *((_QWORD *)this + 17) = v17;
    operator delete(v17);
  }
  kaldi::Vector<float>::Destroy((uint64_t)this + 88);
}

uint64_t kaldi::OnlinePitchFeature::NumFramesReady(kaldi::OnlinePitchFeature *this)
{
  return ((*(_QWORD *)(*((_QWORD *)this + 1) + 224) - *(_QWORD *)(*((_QWORD *)this + 1) + 216)) >> 3)
       - *(_DWORD *)(*((_QWORD *)this + 1) + 176);
}

_QWORD *kaldi::OnlinePitchFeature::OnlinePitchFeature(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = off_1E5D2A710;
  v4 = operator new();
  kaldi::OnlinePitchFeatureImpl::OnlinePitchFeatureImpl(v4, a2);
  a1[1] = v4;
  return a1;
}

void sub_1AD7ADAF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10A0C40F69C32FELL);
  _Unwind_Resume(a1);
}

BOOL kaldi::OnlinePitchFeature::IsLastFrame(kaldi::OnlinePitchFeature *this, int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  return *(_BYTE *)(v2 + 240)
      && a2 + 1 == ((*(_QWORD *)(v2 + 224) - *(_QWORD *)(v2 + 216)) >> 3) - *(_DWORD *)(v2 + 176);
}

float kaldi::OnlinePitchFeature::GetFrame(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v3;
  int *v4;
  uint64_t v5;
  float result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = (int *)(*(_QWORD *)(v3 + 216) + 8 * a2);
  v5 = *a3;
  *(_DWORD *)v5 = v4[1];
  result = 1.0 / *(float *)(*(_QWORD *)(v3 + 88) + 4 * *v4);
  *(float *)(v5 + 4) = result;
  return result;
}

void kaldi::OnlinePitchFeature::AcceptWaveform(uint64_t a1, uint64_t a2)
{
  kaldi::OnlinePitchFeatureImpl::AcceptWaveform(*(_QWORD *)(a1 + 8), a2);
}

void kaldi::OnlinePitchFeature::InputFinished(kaldi::OnlinePitchFeatureImpl **this)
{
  kaldi::OnlinePitchFeatureImpl::InputFinished(this[1]);
}

void kaldi::OnlinePitchFeature::Compute(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  kaldi::OnlinePitchFeatureImpl::Compute(*(kaldi::OnlinePitchFeatureImpl **)(a1 + 8), a2, a3);
}

void kaldi::OnlinePitchFeature::~OnlinePitchFeature(kaldi::OnlinePitchFeature *this)
{
  kaldi::OnlinePitchFeatureImpl *v1;

  *(_QWORD *)this = off_1E5D2A710;
  v1 = (kaldi::OnlinePitchFeatureImpl *)*((_QWORD *)this + 1);
  if (v1)
  {
    kaldi::OnlinePitchFeatureImpl::~OnlinePitchFeatureImpl(v1);
    MEMORY[0x1AF44D190]();
  }
}

{
  kaldi::OnlinePitchFeature::~OnlinePitchFeature(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::OnlineProcessPitch::OnlineProcessPitch(uint64_t a1, __int128 *a2, void (***a3)(_QWORD))
{
  __int128 v4;
  __int128 v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  v4 = *a2;
  v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  v6 = *((unsigned __int8 *)a2 + 40);
  v7 = *((unsigned __int8 *)a2 + 41);
  v8 = *((unsigned __int8 *)a2 + 42);
  v9 = *((unsigned __int8 *)a2 + 43);
  v10 = *((unsigned __int8 *)a2 + 44);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 48) = a3;
  *(_DWORD *)(a1 + 56) = v7 + v6 + v8 + v9 + v10;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  (**a3)(a3);
  return a1;
}

void sub_1AD7ADC8C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = (void *)v1[11];
  if (v4)
  {
    v1[12] = v4;
    operator delete(v4);
  }
  v5 = *v2;
  if (*v2)
  {
    v1[9] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::OnlineProcessPitch::NumFramesReady(kaldi::OnlineProcessPitch *this)
{
  uint64_t result;
  int v3;
  int v4;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 8))(*((_QWORD *)this + 6));
  if ((_DWORD)result)
  {
    v3 = result;
    if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6), (result - 1)))
    {
      return (*((_DWORD *)this + 9) + v3);
    }
    else
    {
      v4 = v3 - *((_DWORD *)this + 7) + *((_DWORD *)this + 9);
      return v4 & ~(v4 >> 31);
    }
  }
  return result;
}

void kaldi::OnlineProcessPitch::GetFrame(uint64_t a1, int a2, float **a3)
{
  int v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  kaldi *v9;
  float v10;
  float v11;
  float v12;
  unsigned int v13;
  float v14;
  float v15;
  uint64_t v16;
  float v17;
  float v18;
  float *v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *(_DWORD *)(a1 + 36);
  v6 = __OFSUB__(a2, v5);
  v7 = a2 - v5;
  if (v7 < 0 != v6)
    v8 = 0;
  else
    v8 = v7;
  kaldi::OnlineProcessPitch::NumFramesReady((kaldi::OnlineProcessPitch *)a1);
  if (*(_BYTE *)(a1 + 40))
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    kaldi::Vector<float>::Resize((void **)&v19, 2, 0);
    v9 = (kaldi *)(*(uint64_t (**)(_QWORD, uint64_t, float **))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48), v8, &v19);
    v10 = *(float *)(a1 + 4);
    v11 = kaldi::NccfToPovFeature(v9, *v19);
    v12 = *(float *)(a1 + 8);
    kaldi::Vector<float>::Destroy((uint64_t)&v19);
    **a3 = v12 + (float)(v10 * v11);
    v13 = 1;
  }
  else
  {
    v13 = 0;
  }
  if (*(_BYTE *)(a1 + 41))
  {
    kaldi::OnlineProcessPitch::UpdateNormalizationStats((kaldi::OnlineProcessPitch *)a1, v8);
    v19 = 0;
    v20 = 0;
    v21 = 0;
    kaldi::Vector<float>::Resize((void **)&v19, 2, 0);
    (*(void (**)(_QWORD, uint64_t, float **))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48), v8, &v19);
    v14 = v19[1];
    kaldi::Vector<float>::Destroy((uint64_t)&v19);
    v15 = logf(v14);
    v16 = *(_QWORD *)(a1 + 88) + 24 * (int)v8;
    v17 = *(double *)(v16 + 16) / *(double *)(v16 + 8);
    (*a3)[v13++] = *(float *)a1 * (float)(v15 - v17);
  }
  if (*(_BYTE *)(a1 + 42))
    (*a3)[v13++] = kaldi::OnlineProcessPitch::GetDeltaPitchFeature((kaldi::OnlineProcessPitch *)a1, v8, 1u);
  if (*(_BYTE *)(a1 + 43))
    (*a3)[v13++] = kaldi::OnlineProcessPitch::GetDeltaPitchFeature((kaldi::OnlineProcessPitch *)a1, v8, 2u);
  if (*(_BYTE *)(a1 + 44))
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    kaldi::Vector<float>::Resize((void **)&v19, 2, 0);
    (*(void (**)(_QWORD, uint64_t, float **))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48), v8, &v19);
    v18 = v19[1];
    kaldi::Vector<float>::Destroy((uint64_t)&v19);
    (*a3)[v13] = logf(v18);
  }
}

void sub_1AD7ADF18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

float kaldi::OnlineProcessPitch::GetDeltaPitchFeature(kaldi::OnlineProcessPitch *this, int a2, unsigned int a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  float v15;
  uint64_t v16;
  void **v17;
  int v18;
  int v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  unint64_t v25;
  float *v26;
  float *v27;
  float *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  float *v34;
  int v35;
  int v36;
  float v37;
  unsigned int v39;
  int32x2_t v40[2];
  int v41;
  _QWORD v42[2];
  int v43;
  void *v44[4];

  v6 = *((_DWORD *)this + 8);
  v7 = (a2 - v6) & ~((a2 - v6) >> 31);
  v8 = a2 + v6;
  v9 = a2 + v6 + 1;
  v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 8))(*((_QWORD *)this + 6));
  if (v10 >= v9)
    v11 = v8 + 1;
  else
    v11 = v10;
  kaldi::Matrix<float>::Matrix((uint64_t)v42, (v11 - v7), 1, 0, 0);
  kaldi::Matrix<float>::Matrix((uint64_t)v40);
  v12 = __OFSUB__(v11, v7);
  v13 = v11 - v7;
  if (!((v13 < 0) ^ v12 | (v13 == 0)))
  {
    v14 = 0;
    do
    {
      memset(v44, 0, 24);
      kaldi::Vector<float>::Resize(v44, 2, 0);
      (*(void (**)(_QWORD, _QWORD, void **))(**((_QWORD **)this + 6) + 24))(*((_QWORD *)this + 6), (v7 + v14), v44);
      v15 = *((float *)v44[0] + 1);
      kaldi::Vector<float>::Destroy((uint64_t)v44);
      *(float *)(v42[0] + 4 * v43 * v14++) = logf(v15);
    }
    while (v13 != v14);
  }
  v44[0] = (void *)__PAIR64__(*((_DWORD *)this + 8), a3);
  kaldi::ComputeDeltas((unsigned int *)v44, (uint64_t)v42, v40);
  v16 = *((_QWORD *)this + 8);
  v17 = (void **)((char *)this + 64);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 9) - v16) >> 2))
  {
    v39 = a3;
    do
    {
      v18 = kaldi::Rand(0);
      v19 = kaldi::Rand(0);
      v20 = ((double)v18 + 1.0) / 2147483650.0;
      v21 = sqrtf(logf(v20) * -2.0);
      v22 = ((double)v19 + 1.0) / 2147483650.0;
      v23 = v22 * 6.28318531;
      v24 = (float)(v21 * cosf(v23)) * *((float *)this + 5);
      v26 = (float *)*((_QWORD *)this + 9);
      v25 = *((_QWORD *)this + 10);
      if ((unint64_t)v26 >= v25)
      {
        v28 = (float *)*v17;
        v29 = ((char *)v26 - (_BYTE *)*v17) >> 2;
        v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v31 = v25 - (_QWORD)v28;
        if (v31 >> 1 > v30)
          v30 = v31 >> 1;
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
          v32 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v32 = v30;
        if (v32)
        {
          v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 80, v32);
          v28 = (float *)*((_QWORD *)this + 8);
          v26 = (float *)*((_QWORD *)this + 9);
        }
        else
        {
          v33 = 0;
        }
        v34 = (float *)&v33[4 * v29];
        *v34 = v24;
        v27 = v34 + 1;
        while (v26 != v28)
        {
          v35 = *((_DWORD *)v26-- - 1);
          *((_DWORD *)v34-- - 1) = v35;
        }
        *((_QWORD *)this + 8) = v34;
        *((_QWORD *)this + 9) = v27;
        *((_QWORD *)this + 10) = &v33[4 * v32];
        if (v28)
          operator delete(v28);
      }
      else
      {
        *v26 = v24;
        v27 = v26 + 1;
      }
      *((_QWORD *)this + 9) = v27;
      v16 = *((_QWORD *)this + 8);
    }
    while (a2 >= (unint64_t)(((uint64_t)v27 - v16) >> 2));
    a3 = v39;
  }
  if (a2 >= v6)
    v36 = v6;
  else
    v36 = a2;
  if (a3 == 1)
    v37 = (float)(*(float *)(*(_QWORD *)v40 + 4 * v41 * v36 + 4) + *(float *)(v16 + 4 * a2)) * *((float *)this + 3);
  else
    v37 = (*(float *)(*(_QWORD *)v40 + 4 * v41 * v36 + 4 * (int)a3) + *(float *)(v16 + 4 * a2) * 0.1)
        * *((float *)this + 4);
  kaldi::Matrix<float>::~Matrix((uint64_t)v40);
  kaldi::Matrix<float>::~Matrix((uint64_t)v42);
  return v37;
}

void sub_1AD7AE280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  kaldi::Matrix<float>::~Matrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlinePitchFeature::Dim(kaldi::OnlinePitchFeature *this)
{
  return 2;
}

void std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<kaldi::Vector<float>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

void std::vector<kaldi::Vector<float>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 8); i != a2; kaldi::Vector<float>::Destroy(i))
    i -= 24;
  *(_QWORD *)(a1 + 8) = a2;
}

void kaldi::OnlineProcessPitch::UpdateNormalizationStats(kaldi::OnlineProcessPitch *this, unsigned int a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  kaldi *v20;
  float v21;
  float32x2_t v22;
  kaldi *v23;
  float v24;
  float32x2_t v25;
  uint64_t v26;
  uint64_t v27;
  kaldi *v28;
  float v29;
  float32x2_t v30;
  float v31;
  float v32;
  float v33;
  float *v34;
  uint64_t v35;
  uint64_t v36;

  v5 = *((_QWORD *)this + 11);
  v6 = *((_QWORD *)this + 12);
  v4 = (char *)this + 88;
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 3) <= a2)
    std::vector<kaldi::OnlineProcessPitch::NormalizationStats>::resize((uint64_t)v4, a2 + 1);
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 8))(*((_QWORD *)this + 6));
  v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6), (v8 - 1));
  v10 = *((_QWORD *)this + 11);
  v11 = v10 + 24 * a2;
  if (*(_DWORD *)v11 != v8 || *(unsigned __int8 *)(v10 + 24 * a2 + 4) != v9)
  {
    v12 = (a2 - *((_DWORD *)this + 6)) & ~((int)(a2 - *((_DWORD *)this + 6)) >> 31);
    v13 = a2 + *((_DWORD *)this + 7);
    if ((int)(v13 + 1) < v8)
      v14 = v13 + 1;
    else
      v14 = v8;
    if (a2
      && (v15 = a2 - 1, v16 = v10 + 24 * (a2 - 1), *(_DWORD *)v16 == v8)
      && *(unsigned __int8 *)(v10 + 24 * v15 + 4) == v9)
    {
      *(_OWORD *)v11 = *(_OWORD *)v16;
      *(_QWORD *)(v11 + 16) = *(_QWORD *)(v16 + 16);
      v17 = (v15 - *((_DWORD *)this + 6)) & ~((int)(v15 - *((_DWORD *)this + 6)) >> 31);
      v18 = *((_DWORD *)this + 7) + a2;
      if (v18 >= v8)
        v19 = v8;
      else
        v19 = v18;
      if ((_DWORD)v12 != (_DWORD)v17)
      {
        v34 = 0;
        v35 = 0;
        v36 = 0;
        kaldi::Vector<float>::Resize((void **)&v34, 2, 0);
        v20 = (kaldi *)(*(uint64_t (**)(_QWORD, uint64_t, float **))(**((_QWORD **)this + 6) + 24))(*((_QWORD *)this + 6), v17, &v34);
        v31 = kaldi::NccfToPov(v20, *v34);
        v21 = logf(v34[1]);
        v22.f32[0] = v31;
        v22.f32[1] = v31 * v21;
        *(float64x2_t *)(v10 + 24 * a2 + 8) = vsubq_f64(*(float64x2_t *)(v10 + 24 * a2 + 8), vcvtq_f64_f32(v22));
        kaldi::Vector<float>::Destroy((uint64_t)&v34);
      }
      if (v14 != (_DWORD)v19)
      {
        v34 = 0;
        v35 = 0;
        v36 = 0;
        kaldi::Vector<float>::Resize((void **)&v34, 2, 0);
        v23 = (kaldi *)(*(uint64_t (**)(_QWORD, uint64_t, float **))(**((_QWORD **)this + 6) + 24))(*((_QWORD *)this + 6), v19, &v34);
        v32 = kaldi::NccfToPov(v23, *v34);
        v24 = logf(v34[1]);
        v25.f32[0] = v32;
        v25.f32[1] = v32 * v24;
        *(float64x2_t *)(v10 + 24 * a2 + 8) = vaddq_f64(*(float64x2_t *)(v10 + 24 * a2 + 8), vcvtq_f64_f32(v25));
        kaldi::Vector<float>::Destroy((uint64_t)&v34);
      }
    }
    else
    {
      v26 = v10 + 24 * a2;
      *(_QWORD *)(v26 + 8) = 0;
      v27 = v26 + 8;
      *(_DWORD *)v11 = v8;
      *(_BYTE *)(v27 - 4) = v9;
      *(_QWORD *)(v27 + 8) = 0;
      v34 = 0;
      v35 = 0;
      v36 = 0;
      kaldi::Vector<float>::Resize((void **)&v34, 2, 0);
      if ((int)v12 < v14)
      {
        do
        {
          v28 = (kaldi *)(*(uint64_t (**)(_QWORD, uint64_t, float **))(**((_QWORD **)this + 6) + 24))(*((_QWORD *)this + 6), v12, &v34);
          v33 = kaldi::NccfToPov(v28, *v34);
          v29 = logf(v34[1]);
          v30.f32[0] = v33;
          v30.f32[1] = v33 * v29;
          *(float64x2_t *)v27 = vaddq_f64(*(float64x2_t *)v27, vcvtq_f64_f32(v30));
          v12 = (v12 + 1);
        }
        while (v14 != (_DWORD)v12);
      }
      kaldi::Vector<float>::Destroy((uint64_t)&v34);
    }
  }
}

void sub_1AD7AE634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<kaldi::OnlineProcessPitch::NormalizationStats>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<kaldi::OnlineProcessPitch::NormalizationStats>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 24 * a2;
  }
}

void std::vector<kaldi::OnlineProcessPitch::NormalizationStats>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = &v7[24 * a2];
      do
      {
        *(_DWORD *)v7 = -1;
        v7[4] = 0;
        *((_QWORD *)v7 + 1) = 0;
        *((_QWORD *)v7 + 2) = 0;
        v7 += 24;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    else
      v12 = 0;
    v14 = &v12[24 * v8];
    v15 = &v14[24 * a2];
    v16 = v14;
    do
    {
      *(_DWORD *)v16 = -1;
      v16[4] = 0;
      *((_QWORD *)v16 + 1) = 0;
      *((_QWORD *)v16 + 2) = 0;
      v16 += 24;
    }
    while (v16 != v15);
    v17 = &v12[24 * v11];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_OWORD *)(v18 - 24);
        *((_QWORD *)v14 - 1) = *((_QWORD *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v20;
        v14 -= 24;
        v18 -= 24;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = v17;
    if (v18)
      operator delete(v18);
  }
}

void kaldi::OnlineProcessPitch::~OnlineProcessPitch(kaldi::OnlineProcessPitch *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 11);
  if (v2)
  {
    *((_QWORD *)this + 12) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 8);
  if (v3)
  {
    *((_QWORD *)this + 9) = v3;
    operator delete(v3);
  }
}

_QWORD *std::vector<kaldi::PitchFrameInfo::StateInfo>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1AD7AE8C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<int,int>>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    if (v7 != v8)
    {
      do
      {
        v18 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *((_QWORD *)v15 - 1) = v18;
        v15 -= 8;
      }
      while (v7 != v8);
      v8 = *a1;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void std::vector<std::vector<int>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<int>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void kaldi::ReadIntegerVector<int>(_QWORD *a1, int a2, std::vector<int> *a3, uint64_t a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  int v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  int v17;
  _QWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  int v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *__p;
  _DWORD *v33;
  unint64_t v34;
  std::vector<unsigned int>::size_type __sz;
  _QWORD v36[16];
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (a5)
    *a5 = 0;
  if (a2)
  {
    if (std::istream::peek() != 4)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"ReadIntegerVector: expected to see type of size ", 48);
      v29 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)", saw instead ", 14);
      v30 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)", at file position ", 19);
      std::istream::tellg();
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v36);
    }
    std::istream::get();
    LODWORD(__sz) = 0;
    std::istream::read();
    if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) == 0)
    {
      v13 = __sz;
      v14 = __sz;
      if (a7)
        *a7 = (int)__sz;
      if (a4 && (a5 ? (v15 = v13 < 0) : (v15 = 0), !v15 ? (v16 = 0) : (v16 = 1), a6 || v16))
      {
        if (v16)
        {
          std::istream::tellg();
          *a5 = a4 + v37;
        }
        else if (a6)
        {
          std::istream::tellg();
          *a6 = a4 + v37;
        }
        std::istream::seekg();
        a3->__end_ = a3->__begin_;
        std::vector<int>::shrink_to_fit(a3);
      }
      else
      {
        std::vector<int>::resize((std::vector<unsigned int> *)a3, v14);
        if ((int)__sz >= 1)
          std::istream::read();
      }
      goto LABEL_53;
    }
LABEL_56:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"ReadIntegerVector: read failure at file position ", 49);
    std::istream::tellg();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v36);
  }
  __p = 0;
  v33 = 0;
  v34 = 0;
  std::ws[abi:ne180100]<char,std::char_traits<char>>(a1);
  if (std::istream::peek() != 91)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"ReadIntegerVector: expected to see [, saw ", 42);
    std::istream::peek();
    v31 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)", at file position ", 19);
    std::istream::tellg();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v36);
  }
  std::istream::get();
  std::ws[abi:ne180100]<char,std::char_traits<char>>(a1);
  while (1)
  {
    v17 = std::istream::peek();
    if (v17 == 93)
      break;
    LODWORD(v36[0]) = 0;
    v18 = (_QWORD *)MEMORY[0x1AF44CB18](a1, v36);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(v18);
    if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
      goto LABEL_44;
    v19 = v33;
    if ((unint64_t)v33 >= v34)
    {
      v21 = __p;
      v22 = ((char *)v33 - (_BYTE *)__p) >> 2;
      v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v24 = v34 - (_QWORD)__p;
      if ((uint64_t)(v34 - (_QWORD)__p) >> 1 > v23)
        v23 = v24 >> 1;
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
        v25 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v25 = v23;
      if (v25)
      {
        v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v34, v25);
        v21 = __p;
        v19 = v33;
      }
      else
      {
        v26 = 0;
      }
      v27 = &v26[4 * v22];
      *(_DWORD *)v27 = v36[0];
      v20 = v27 + 4;
      while (v19 != v21)
      {
        v28 = *--v19;
        *((_DWORD *)v27 - 1) = v28;
        v27 -= 4;
      }
      __p = v27;
      v33 = v20;
      v34 = (unint64_t)&v26[4 * v25];
      if (v21)
        operator delete(v21);
    }
    else
    {
      *v33 = v36[0];
      v20 = v19 + 1;
    }
    v33 = v20;
  }
  std::istream::get();
  if (&__p != (void **)a3)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a3, (char *)__p, (uint64_t)v33, ((char *)v33 - (_BYTE *)__p) >> 2);
  if (a7)
    *a7 = a3->__end_ - a3->__begin_;
LABEL_44:
  if (__p)
  {
    v33 = __p;
    operator delete(__p);
  }
  if (v17 != 93)
    goto LABEL_56;
LABEL_53:
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
    goto LABEL_56;
}

void sub_1AD7AEF28(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1AD7AEF60);
}

void sub_1AD7AEF3C()
{
  JUMPOUT(0x1AD7AEF60);
}

void sub_1AD7AEF4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<int>>::__assign_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  char v20;
  char v21;

  v8 = a1 + 16;
  v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<std::vector<int>>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int>*,std::vector<int>*,std::vector<int>*>(v8, a2, a3, *(_QWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<int> *,std::vector<int> *,std::vector<int> *>((int)&v20, a2, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int>*,std::vector<int>*,std::vector<int>*>(v8, v13, a3, *(_QWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<int> *,std::vector<int> *,std::vector<int> *>((int)&v21, a2, a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    v17 = *(_QWORD *)(a1 + 8);
    do
    {
      v19 = *(void **)(v17 - 24);
      v17 -= 24;
      v18 = v19;
      if (v19)
      {
        *(_QWORD *)(v16 - 16) = v18;
        operator delete(v18);
      }
      v16 = v17;
    }
    while (v17 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1AD7AF0E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1AD7AF0E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::vector<int>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::vector<int>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int>*,std::vector<int>*,std::vector<int>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1AD7AF1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    v3 = **(_QWORD **)(a1 + 16);
    do
    {
      v5 = *(void **)(v3 - 24);
      v3 -= 24;
      v4 = v5;
      if (v5)
      {
        *(_QWORD *)(v1 - 16) = v4;
        operator delete(v4);
      }
      v1 = v3;
    }
    while (v3 != v2);
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<int> *,std::vector<int> *,std::vector<int> *>(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((char *)v5 != a4)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a4, *(char **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 2);
      v5 += 24;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t kaldi::WriteIntegerByteArray<int>(_QWORD *a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  int v9;
  uint64_t result;
  _QWORD *v11;
  std::runtime_error *exception;
  _QWORD v13[34];
  int v14;
  char v15;

  if (a2)
  {
    v15 = 4;
    std::ostream::write();
    if (a3)
      v9 = -(int)a4;
    else
      v9 = a4;
    v14 = v9;
    result = std::ostream::write();
    if ((_DWORD)a4)
    {
      if (a3 && !fst::AlignOutput(a1))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "Could not align output");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
      }
      result = std::ostream::write();
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[ ", 2);
    for (; a4; --a4)
    {
      a5 += 4;
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" ", 1);
    }
    result = (uint64_t)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"]\n", 2);
  }
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Write failure in WriteIntegerType.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1AD7AF434(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<int>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<int>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1AD7AF598(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<int>::shrink_to_fit(std::vector<int> *this)
{
  std::__compressed_pair<int *> *p_end_cap;
  int *value;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  unint64_t v6;
  char *v7;
  int *v8;
  int *v9;
  uint64_t v10;
  int *v11;
  int *v12;
  int v13;

  p_end_cap = &this->__end_cap_;
  value = this->__end_cap_.__value_;
  begin = this->__begin_;
  end = this->__end_;
  v6 = end - begin;
  if (v6 < value - begin)
  {
    if (end == begin)
    {
      v11 = 0;
      v9 = (int *)(4 * v6);
    }
    else
    {
      v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v6);
      begin = this->__begin_;
      v8 = this->__end_;
      v9 = (int *)&v7[4 * v6];
      v11 = (int *)&v7[4 * v10];
      if (v8 != this->__begin_)
      {
        v12 = v9;
        do
        {
          v13 = *--v8;
          *--v12 = v13;
        }
        while (v8 != begin);
        goto LABEL_9;
      }
    }
    v12 = v9;
LABEL_9:
    this->__begin_ = v12;
    this->__end_ = v9;
    this->__end_cap_.__value_ = v11;
    if (begin)
      operator delete(begin);
  }
}

int *std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<int *>,std::__wrap_iter<int *>,std::__equal_to &>(int *a1, int *a2)
{
  int *result;
  int *v4;
  int v5;
  int v6;
  int *v7;
  int v8;

  result = a2;
  if (a1 != a2)
  {
    v4 = a1 + 1;
    do
    {
      if (v4 == a2)
        return a2;
      v5 = *(v4 - 1);
      v6 = *v4++;
    }
    while (v5 != v6);
    v7 = v4 - 2;
    while (v4 != a2)
    {
      v8 = v5;
      v5 = *v4;
      if (v8 != *v4)
      {
        v7[1] = v5;
        ++v7;
      }
      ++v4;
    }
    return v7 + 1;
  }
  return result;
}

__n128 std::vector<int>::__move_assign(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t quasar::OnlineLatticeWordAlignmentDecoder::OnlineLatticeWordAlignmentDecoder(uint64_t a1, __int128 *a2)
{
  char *v3;

  *(_QWORD *)quasar::Decoder::Decoder(a1, a2) = &off_1E5D3AEB0;
  v3 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v3 + 2) = 0;
  *(_QWORD *)v3 = &unk_1E5D43328;
  *((_QWORD *)v3 + 1) = 0;
  *((_QWORD *)v3 + 19) = 0;
  *((_QWORD *)v3 + 20) = 0;
  *((_QWORD *)v3 + 18) = 0;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 24) = 0u;
  *((_DWORD *)v3 + 34) = 0;
  *(_QWORD *)(a1 + 448) = v3 + 24;
  *(_QWORD *)(a1 + 456) = v3;
  *(_QWORD *)(a1 + 464) = 0;
  *(_BYTE *)(a1 + 472) = 1;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  return a1;
}

void sub_1AD7AF7A8(_Unwind_Exception *a1)
{
  void **v1;

  quasar::Decoder::~Decoder(v1);
  _Unwind_Resume(a1);
}

void quasar::OnlineLatticeWordAlignmentDecoder::finishInit(quasar::OnlineLatticeWordAlignmentDecoder *this)
{
  const quasar::SystemConfig::Version *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11[17];

  v2 = (quasar::OnlineLatticeWordAlignmentDecoder *)((char *)this + 32);
  quasar::SystemConfig::Version::Version(v11, 16, 1);
  if (quasar::SystemConfig::Version::operator>=(v2, v11))
  {
    quasar::QsrTextSymbolTable::init(*((const std::string **)this + 56), v2, 0, *((unsigned __int8 *)this + 441), 1);
    v3 = quasar::QsrTextSymbolTable::Find(*((quasar::QsrTextSymbolTable **)this + 56), "<?>");
    if (v3 != -1)
    {
      v4 = v3;
      v5 = *((int *)this + 116);
      if ((_DWORD)v5 && v3 != v5 && quasar::gLogLevel >= 5)
      {
        memset(v11, 0, sizeof(v11));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Silence label is set to ", 24);
        v6 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" but does not match the auto-determined silence label ", 54);
        v7 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)". Will use latter.", 18);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v11);
      }
      *((_DWORD *)this + 116) = v4;
    }
  }
  quasar::ModelLoader::readWordBoundaryInfo(*((_QWORD **)this + 46), (unsigned int *)this + 116, (uint64_t)this + 496, (uint64_t)this + 520, (uint64_t *)v11);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 480, v11);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v11[0] + 1);
  if (*((_QWORD *)&v11[0] + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v11[0] + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1AD7AF944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineLatticeWordAlignmentDecoder::runImpl(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  clockid_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v20;
  int v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  _QWORD v45[3];
  char v46;
  uint64_t v47;

  v46 = 1;
  kaldi::Timer::Reset((kaldi::Timer *)v45, (clockid_t)a2);
  v47 = 0;
  _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_23CompactLatticeWeightTplINS1_16LatticeWeightTplIfEEiEEiEENS1_11VectorStateIS8_NS_9allocatorIS8_EEEEEENSA_ISD_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v43);
  v8 = *(float *)(a1 + 544);
  if (v8 <= 0.0)
    v9 = 0;
  else
    v9 = (int)(float)((float)(v8
                            * (float)(*(int (**)(_QWORD))(**(_QWORD **)(*a3 + 152) + 160))(*(_QWORD *)(*a3 + 152)))
                    + 1000.0);
  v10 = *(_QWORD *)(*a3 + 152);
  v11 = quasar::PTree::begin(*(quasar::PTree **)(a2 + 32));
  if (!kaldi::WordAlignLattice(v10, v11, *(_QWORD *)(a1 + 480), v9, v43))
  {
    if (quasar::gLogLevel >= 4)
    {
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v26 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Word alignment for MBR decoding failed.", 39);
LABEL_16:
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v26);
    }
LABEL_17:
    v13 = 2;
    goto LABEL_18;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43) == -1)
  {
    if (quasar::gLogLevel >= 4)
    {
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v26 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Empty aligned lattice. MBR decoding failed.", 43);
      goto LABEL_16;
    }
    goto LABEL_17;
  }
  kaldi::TopSortCompactLatticeIfNeeded(v43);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(*a3 + 152), &v43);
  *(_BYTE *)(*a3 + 145) = 1;
  fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(&v24);
  kaldi::CompactLatticeShortestPath(*(_QWORD **)(*a3 + 152), (uint64_t)&v24, 0, (uint64_t *)(*a3 + 448));
  if (*(_DWORD *)(v25 + 88) == -1)
  {
    if (quasar::gLogLevel >= 2)
    {
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v26 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Best-path failed", 16);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v26);
    }
    v13 = 2;
  }
  else
  {
    fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v22);
    fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>((uint64_t)&v24, (uint64_t)&v22, 1);
    if (quasar::gLogLevel >= 5)
    {
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v26 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Lattice word alignment time: ", 29);
      kaldi::Timer::GetSeconds((kaldi::Timer *)5, v12);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v26);
    }
    v13 = quasar::Decoder::reportResults((uint64_t)&v22, a3, a4, a2);
    v22 = &unk_1E5D25580;
    v14 = v23;
    if (v23)
    {
      v15 = *(_DWORD *)(v23 + 56) - 1;
      *(_DWORD *)(v23 + 56) = v15;
      if (!v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    }
  }
  v24 = &unk_1E5D25800;
  v20 = v25;
  if (v25)
  {
    v21 = *(_DWORD *)(v25 + 56) - 1;
    *(_DWORD *)(v25 + 56) = v21;
    if (!v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
LABEL_18:
  v16 = v44;
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v13;
}

void sub_1AD7AFD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, ...)
{
  uint64_t v5;
  int v7;
  va_list va;

  va_start(va, a5);
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)va);
  if (a5)
  {
    v7 = a5[14] - 1;
    a5[14] = v7;
    if (!v7)
      (*(void (**)(_DWORD *))(*(_QWORD *)a5 + 8))(a5);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v5 - 136);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineLatticeWordAlignmentDecoder::supportsEager(quasar::OnlineLatticeWordAlignmentDecoder *this)
{
  return 1;
}

uint64_t quasar::OnlineLatticeWordAlignmentDecoder::registerParams(quasar::QsrTextSymbolTable **this, quasar::SystemConfig *a2)
{
  char *v4;
  _DWORD *v5;
  uint64_t result;
  void *__p[2];
  char v8;
  void *v9[2];
  char v10;

  quasar::QsrTextSymbolTable::Register(this[56], a2, 16, 1, 0x7FFFFFFF, 0x7FFFFFFF);
  kaldi::WordBoundaryInfoNewOpts::Register((uint64_t)(this + 58), (uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(v9, "word-boundary-int-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Word boundary file with format <integer-phone-id> [begin|end|singleton|internal|nonword]");
  v4 = (char *)(this + 62);
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v9, (uint64_t)(this + 62), (uint64_t)__p, 1, 1, 1, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v8 < 0)
    operator delete(__p[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  std::string::basic_string[abi:ne180100]<0>(v9, "unpronounced-word-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "File containing newline-separated list of words with no pronunciation.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v9, (uint64_t)(this + 65), (uint64_t)__p, 0, 20, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v8 < 0)
    operator delete(__p[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  std::string::basic_string[abi:ne180100]<0>(v9, "max-expand");
  std::string::basic_string[abi:ne180100]<0>(__p, "If >0, the max amount by which lattices will be expanded.");
  v5 = this + 68;
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v9, (uint64_t)v5, (uint64_t)__p, 0, 1, 1, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v8 < 0)
    operator delete(__p[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  result = MEMORY[0x1AF44C914](v4, "");
  *v5 = 0;
  return result;
}

void sub_1AD7AFFB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void kaldi::WordBoundaryInfoNewOpts::Register(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "silence-label");
  std::string::basic_string[abi:ne180100]<0>(__p, "Numeric id of word symbol that is to be used for silence arcs in the word-aligned lattice (zero is OK)");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "partial-word-label");
  std::string::basic_string[abi:ne180100]<0>(__p, "Numeric id of word symbol that is to be used for arcs in the word-aligned lattice corresponding to partial words at the end of \"forced-out\" utterances (zero is OK)");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 4, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "reorder");
  std::string::basic_string[abi:ne180100]<0>(__p, "True if the lattices were generated from graphs that had the --reorder option true, relating to reordering self-loops (typically true)");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 8, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1AD7B0134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void quasar::OnlineLatticeWordAlignmentDecoder::~OnlineLatticeWordAlignmentDecoder(void **this)
{
  *this = &off_1E5D3AEB0;
  if (*((char *)this + 543) < 0)
    operator delete(this[65]);
  if (*((char *)this + 519) < 0)
    operator delete(this[62]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 60));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 56));
  quasar::Decoder::~Decoder(this);
}

{
  *this = &off_1E5D3AEB0;
  if (*((char *)this + 543) < 0)
    operator delete(this[65]);
  if (*((char *)this + 519) < 0)
    operator delete(this[62]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 60));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 56));
  quasar::Decoder::~Decoder(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::Timer::Reset(kaldi::Timer *this, clockid_t a2)
{
  clockid_t v3;

  *(double *)this = kaldi::Timer::GetSeconds((kaldi::Timer *)5, a2);
  if (*((_BYTE *)this + 24))
    *((double *)this + 1) = kaldi::Timer::GetSeconds((kaldi::Timer *)0xC, v3);
  *((double *)this + 2) = kaldi::Timer::GetSeconds((kaldi::Timer *)0x10, v3);
}

double kaldi::Timer::GetSeconds(kaldi::Timer *this, clockid_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  int *v4;
  char *v5;
  size_t v6;
  _QWORD v8[34];
  timespec __tp;

  if (clock_gettime((clockid_t)this, &__tp) && kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Could not read clock ", 21);
    v2 = (_QWORD *)std::ostream::operator<<();
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)": ", 2);
    v4 = __error();
    v5 = strerror(*v4);
    v6 = strlen(v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v5, v6);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
  }
  return (double)__tp.tv_nsec / 1000000000.0 + (double)__tp.tv_sec;
}

void sub_1AD7B0358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::QsrTextSymbolTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43328;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::QsrTextSymbolTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43328;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::QsrTextSymbolTable>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<quasar::QsrTextSymbolTable>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<quasar::QsrTextSymbolTable>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2 + 128);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2 + 96);
  if (*(char *)(a2 + 95) < 0)
    operator delete(*(void **)(a2 + 72));
  if (*(char *)(a2 + 71) < 0)
    operator delete(*(void **)(a2 + 48));
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_23CompactLatticeWeightTplINS1_16LatticeWeightTplIfEEiEEiEENS1_11VectorStateIS8_NS_9allocatorIS8_EEEEEENSA_ISD_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x28uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN3fst9VectorFstINS1_6ArcTplINS1_23CompactLatticeWeightTplINS1_16LatticeWeightTplIfEEiEEiEENS1_11VectorStateIS8_NS_9allocatorIS8_EEEEEENSA_ISD_EEEC2B8ne180100IJESE_Li0EEESE_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD7B0488(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN3fst9VectorFstINS1_6ArcTplINS1_23CompactLatticeWeightTplINS1_16LatticeWeightTplIfEEiEEiEENS1_11VectorStateIS8_NS_9allocatorIS8_EEEEEENSA_ISD_EEEC2B8ne180100IJESE_Li0EEESE_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D413E0;
  a1[1] = 0;
  fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(a1 + 3);
  return a1;
}

void sub_1AD7B04D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D413E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D413E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

id EARVoiceCommandRecognizeText(void *a1, quasar *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  int v7;
  void *__p;
  void *v10;
  uint64_t v11;
  std::string v12;
  std::string v13;
  void *v14;
  uint64_t *v15;
  std::string v16;
  quasar::VoiceCommandInterpretation *v17;
  quasar::VoiceCommandInterpretation *v18;
  std::string v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22[3];
  _QWORD *v23[3];
  uint64_t v24;
  _QWORD *v25[3];
  std::string *v26;

  v3 = a1;
  quasar::makeVoiceCommandActiveSetCompilation(a2, &v20);
  v4 = objc_retainAutorelease(v3);
  std::string::basic_string[abi:ne180100]<0>(&v19, (char *)objc_msgSend(v4, "UTF8String"));
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v16, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
  else
    v16 = v19;
  quasar::VoiceCommandRecognize((uint64_t)&v16, (uint64_t)&v20, (uint64_t *)&v17);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (v17 == v18)
  {
    v5 = (void *)MEMORY[0x1E0C9AA60];
  }
  else
  {
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v13, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
    else
      v13 = v19;
    EARHelpers::StdStringUTF8ToUTF16IndexMap((uint64_t *)&v13, &v14);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    memset(&v12, 0, sizeof(v12));
    std::vector<quasar::VoiceCommandInterpretation>::__init_with_size[abi:ne180100]<quasar::VoiceCommandInterpretation*,quasar::VoiceCommandInterpretation*>(&v12, v17, v18, 0x6DB6DB6DB6DB6DB7 * ((v18 - v17) >> 4));
    __p = 0;
    v10 = 0;
    v11 = 0;
    std::vector<std::pair<int,int>>::__init_with_size[abi:ne180100]<std::pair<int,int>*,std::pair<int,int>*>((char *)&__p, (uint64_t *)v14, v15, ((char *)v15 - (_BYTE *)v14) >> 3);
    EARHelpers::EARVoiceCommandInterpretationFromQuasarInterpretations((uint64_t **)&v12, (uint64_t **)&__p);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (__p)
    {
      v10 = __p;
      operator delete(__p);
    }
    v26 = &v12;
    std::vector<quasar::VoiceCommandInterpretation>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
    if (v14)
    {
      v15 = (uint64_t *)v14;
      operator delete(v14);
    }
  }
  v14 = &v17;
  std::vector<quasar::VoiceCommandInterpretation>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  std::__tree<int>::destroy((uint64_t)v25, v25[1]);
  std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::~__hash_table((uint64_t)&v24);
  std::__tree<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__map_value_compare<int,std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>>>::destroy((uint64_t)v23, v23[1]);
  std::__tree<int>::destroy((uint64_t)v22, v22[1]);
  v20 = &unk_1E5D25F80;
  v6 = v21;
  if (v21)
  {
    v7 = *(_DWORD *)(v21 + 56) - 1;
    *(_DWORD *)(v21 + 56) = v7;
    if (!v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }

  return v5;
}

void sub_1AD7B075C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39)
{
  void *v39;

  a21 = &a30;
  std::vector<quasar::VoiceCommandInterpretation>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  if (a38 < 0)
    operator delete(__p);
  quasar::VoiceCommandActiveSetCompilation::~VoiceCommandActiveSetCompilation((quasar::VoiceCommandActiveSetCompilation *)&a39);

  _Unwind_Resume(a1);
}

void quasar::VoiceCommandActiveSetCompilation::~VoiceCommandActiveSetCompilation(quasar::VoiceCommandActiveSetCompilation *this)
{
  _DWORD *v2;
  int v3;

  std::__tree<int>::destroy((uint64_t)this + 104, *((_QWORD **)this + 14));
  std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::~__hash_table((uint64_t)this + 64);
  std::__tree<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__map_value_compare<int,std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>>>::destroy((uint64_t)this + 40, *((_QWORD **)this + 6));
  std::__tree<int>::destroy((uint64_t)this + 16, *((_QWORD **)this + 3));
  *(_QWORD *)this = &unk_1E5D25F80;
  v2 = (_DWORD *)*((_QWORD *)this + 1);
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
}

uint64_t EARVoiceCommandRecognizeAnyText(void *a1, quasar *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  std::string __p;
  std::string v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13[3];
  _QWORD *v14[3];
  uint64_t v15;
  _QWORD *v16[3];

  v3 = a1;
  quasar::makeVoiceCommandActiveSetCompilation(a2, &v11);
  v4 = objc_retainAutorelease(v3);
  std::string::basic_string[abi:ne180100]<0>(&v10, (char *)objc_msgSend(v4, "UTF8String"));
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
  else
    __p = v10;
  v5 = quasar::VoiceCommandRecognizeAny((uint64_t)&__p, (uint64_t)&v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  std::__tree<int>::destroy((uint64_t)v16, v16[1]);
  std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::~__hash_table((uint64_t)&v15);
  std::__tree<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__map_value_compare<int,std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>>>::destroy((uint64_t)v14, v14[1]);
  std::__tree<int>::destroy((uint64_t)v13, v13[1]);
  v11 = &unk_1E5D25F80;
  v6 = v12;
  if (v12)
  {
    v7 = *(_DWORD *)(v12 + 56) - 1;
    *(_DWORD *)(v12 + 56) = v7;
    if (!v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }

  return v5;
}

void sub_1AD7B09C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  void *v21;

  if (a20 < 0)
    operator delete(__p);
  quasar::VoiceCommandActiveSetCompilation::~VoiceCommandActiveSetCompilation((quasar::VoiceCommandActiveSetCompilation *)&a21);

  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<quasar::VoiceCommandActiveSetCompilation::CommandSpec const,quasar::VoiceCommandActiveSetCompilation::Suite>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<quasar::VoiceCommandActiveSetCompilation::CommandSpec const,quasar::VoiceCommandActiveSetCompilation::Suite>,0>(uint64_t a1)
{
  std::__hash_table<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::~__hash_table(a1 + 120);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 56);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__hash_table<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<quasar::VoiceCommandActiveSetCompilation::CommandSpec,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<quasar::VoiceCommandActiveSetCompilation::CommandSpec,0>(uint64_t a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 56);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__map_value_compare<int,std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__map_value_compare<int,std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__map_value_compare<int,std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<int const,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<int const,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,0>(uint64_t a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 64);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::Start(*(_QWORD *)(a1 + 8));
}

float fst::ImplToFst<fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  return fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::Final(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::NumArcs(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::NumInputEpsilons(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::NumOutputEpsilons(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

void fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetFromFst<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a3, a1, a2, a4, 2);
}

uint64_t fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Write(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1AD7B0DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1AD7B0EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::IsMemoryMapped()
{
  return 0;
}

uint64_t fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::Start(uint64_t a1)
{
  int v2;

  if (!*(_BYTE *)(a1 + 60))
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 4))
    {
      *(_BYTE *)(a1 + 60) = 1;
    }
    else if (!*(_BYTE *)(a1 + 60))
    {
      v2 = *(_DWORD *)(*(_QWORD *)(a1 + 152) + 56);
      *(_DWORD *)(a1 + 64) = v2;
      *(_BYTE *)(a1 + 60) = 1;
      if (*(_DWORD *)(a1 + 68) <= v2)
        *(_DWORD *)(a1 + 68) = v2 + 1;
    }
  }
  return *(unsigned int *)(a1 + 64);
}

float fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::Final(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  float result;

  if (fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal(a1, a2))
  {
    v4 = *(_QWORD *)(a1 + 120);
    if (*(_DWORD *)(v4 + 76) == a2)
      v5 = v4 + 80;
    else
      v5 = *(_QWORD *)(v4 + 8) + 8 * a2 + 8;
    return **(float **)v5;
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 152);
    v7 = (unsigned int *)(*(_QWORD *)(v6 + 16) + 4 * a2);
    if (*v7 == v7[1])
      return INFINITY;
    result = 0.0;
    if (*(_DWORD *)(*(_QWORD *)(v6 + 24) + 12 * *v7) != -1)
      return INFINITY;
  }
  return result;
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v2 + 76) == a2)
  {
    v3 = (uint64_t *)(v2 + 80);
  }
  else
  {
    v4 = a2 + 1;
    v6 = v2 + 8;
    v5 = *(_QWORD *)(v2 + 8);
    if (v4 >= (*(_QWORD *)(v6 + 8) - v5) >> 3)
      return 0;
    v3 = (uint64_t *)(v5 + 8 * v4);
  }
  v7 = *v3;
  if (!v7)
    return 0;
  v8 = *(_DWORD *)(v7 + 48);
  if ((v8 & 1) == 0)
    return 0;
  *(_DWORD *)(v7 + 48) = v8 | 8;
  return 1;
}

uint64_t fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::NumArcs(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  if (fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2))
  {
    v4 = *(_QWORD *)(a1 + 120);
    if (*(_DWORD *)(v4 + 76) == a2)
      v5 = v4 + 80;
    else
      v5 = *(_QWORD *)(v4 + 8) + 8 * a2 + 8;
    return (uint64_t)(*(_QWORD *)(*(_QWORD *)v5 + 32) - *(_QWORD *)(*(_QWORD *)v5 + 24)) >> 4;
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 152);
    v7 = (unsigned int *)(*(_QWORD *)(v6 + 16) + 4 * a2);
    v8 = *v7;
    v9 = v7[1];
    if (v9 == v8)
      return 0;
    else
      return v9 - v8 - (*(_DWORD *)(*(_QWORD *)(v6 + 24) + 12 * v8) == -1);
  }
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v2 + 76) == a2)
  {
    v3 = (uint64_t *)(v2 + 80);
  }
  else
  {
    v4 = a2 + 1;
    v6 = v2 + 8;
    v5 = *(_QWORD *)(v2 + 8);
    if (v4 >= (*(_QWORD *)(v6 + 8) - v5) >> 3)
      return 0;
    v3 = (uint64_t *)(v5 + 8 * v4);
  }
  v7 = *v3;
  if (!v7)
    return 0;
  v8 = *(_DWORD *)(v7 + 48);
  if ((v8 & 2) == 0)
    return 0;
  *(_DWORD *)(v7 + 48) = v8 | 8;
  return 1;
}

uint64_t fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::NumInputEpsilons(_QWORD *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs((uint64_t)a1, a2) & 1) == 0&& !(*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 32))(a1, 0x10000000))
  {
    fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::Expand((uint64_t)a1, a2);
  }
  if (!fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs((uint64_t)a1, a2))return fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::CountEpsilons((uint64_t)a1, a2, 0);
  v4 = a1[15];
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 8);
}

void fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::Expand(uint64_t a1, int a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *MutableState;
  char *v11;
  __int128 v12;

  v4 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 152) + 16) + 4 * a2);
  v5 = *v4;
  v6 = v4[1];
  if (v5 < v6)
  {
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 152) + 24) + 12 * v5;
      v8 = *(_QWORD *)v7;
      v9 = (unint64_t)*(unsigned int *)(v7 + 8) << 32;
      *(_QWORD *)&v12 = v8;
      *((_QWORD *)&v12 + 1) = v9;
      MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
      if ((_DWORD)v8 == -1)
      {
        *(_DWORD *)MutableState = 0;
        *((_DWORD *)MutableState + 12) |= 9u;
      }
      else
      {
        fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(MutableState, &v12);
      }
      ++v5;
    }
    while (v6 != v5);
  }
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal(a1, a2) & 1) == 0)
  {
    v11 = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
    *(_DWORD *)v11 = 2139095040;
    *((_DWORD *)v11 + 12) |= 9u;
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

uint64_t fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::CountEpsilons(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int *v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a1 + 152);
  v4 = (unsigned int *)(*(_QWORD *)(v3 + 16) + 4 * a2);
  v5 = *v4;
  v6 = v4[1];
  if (v5 >= v6)
    return 0;
  result = 0;
  v8 = *(_QWORD *)(v3 + 24);
  do
  {
    v9 = (int *)(v8 + 12 * v5);
    v11 = *v9;
    v10 = v9[1];
    if (!a3)
      v10 = v11;
    v12 = 2 * (v10 > 0);
    if (v10 == -1)
      v12 = 4;
    v13 = v10 < 1 && v10 != -1;
    result += v13;
    ++v5;
  }
  while ((v12 | 4) == 4 && v6 != v5);
  return result;
}

void fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(uint64_t a1, int a2)
{
  char *MutableState;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int *v9;
  int v10;
  int v11;

  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::SetArcs(*(_QWORD *)(a1 + 120), (uint64_t)MutableState);
  v5 = *((_QWORD *)MutableState + 3);
  v6 = *((_QWORD *)MutableState + 4) - v5;
  if (v6)
  {
    v7 = v6 >> 4;
    v8 = *(_DWORD *)(a1 + 68);
    if (v7 <= 1)
      v7 = 1;
    v9 = (int *)(v5 + 12);
    do
    {
      v11 = *v9;
      v9 += 4;
      v10 = v11;
      if (v11 >= v8)
      {
        v8 = v10 + 1;
        *(_DWORD *)(a1 + 68) = v10 + 1;
      }
      --v7;
    }
    while (v7);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(a1, a2);
  *((_DWORD *)MutableState + 12) |= 0xAu;
}

char *fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  char *MutableState;
  char *v4;
  int v5;
  unint64_t v6;

  MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::GetMutableState(a1, a2);
  v4 = MutableState;
  if (*(_BYTE *)(a1 + 88))
  {
    v5 = *((_DWORD *)MutableState + 12);
    if ((v5 & 4) == 0)
    {
      *((_DWORD *)MutableState + 12) = v5 | 4;
      v6 = *((_QWORD *)MutableState + 4) - *((_QWORD *)MutableState + 3) + *(_QWORD *)(a1 + 112) + 56;
      *(_QWORD *)(a1 + 112) = v6;
      *(_BYTE *)(a1 + 104) = 1;
      if (v6 > *(_QWORD *)(a1 + 96))
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GC(a1, MutableState, 0, 0.666);
    }
  }
  return v4;
}

char *fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::GetMutableState(uint64_t a1, int a2)
{
  int v3;
  char *result;
  uint64_t v5;
  char *MutableState;

  v3 = *(_DWORD *)(a1 + 76);
  if (v3 == a2)
    return *(char **)(a1 + 80);
  if (!*(_BYTE *)(a1 + 72))
    return fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetMutableState(a1, a2 + 1);
  if (v3 == -1)
  {
    *(_DWORD *)(a1 + 76) = a2;
    MutableState = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetMutableState(a1, 0);
    *(_QWORD *)(a1 + 80) = MutableState;
    *((_DWORD *)MutableState + 12) |= 4u;
    std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::reserve((void **)MutableState + 3, 0x80uLL);
    return *(char **)(a1 + 80);
  }
  v5 = *(_QWORD *)(a1 + 80);
  if (*(_DWORD *)(v5 + 52))
  {
    *(_DWORD *)(v5 + 48) &= ~4u;
    *(_BYTE *)(a1 + 72) = 0;
    return fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetMutableState(a1, a2 + 1);
  }
  *(_DWORD *)(a1 + 76) = a2;
  *(_DWORD *)v5 = 2139095040;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(v5 + 24);
  result = *(char **)(a1 + 80);
  *((_DWORD *)result + 12) |= 4u;
  return result;
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GC(uint64_t a1, char *a2, char a3, float a4)
{
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  char *MutableState;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  fst *v27;
  _QWORD *v28;
  fst *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37[2];
  char v38;
  char v39;
  char v40;
  void *__p[2];
  char v42;

  if (*(_BYTE *)(a1 + 104))
  {
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v8 = fst::LogMessage::LogMessage((fst *)v37, (uint64_t)__p);
      v9 = (_QWORD *)fst::cerr(v8);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GCCacheStore: Enter GC: object = ", 33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"), free recently cached = ", 26);
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", cache size = ", 15);
      v13 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", cache frac = ", 15);
      v14 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", cache limit = ", 16);
      v15 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)v37);
      if (v42 < 0)
        operator delete(__p[0]);
    }
    v16 = (unint64_t)(float)((float)*(unint64_t *)(a1 + 96) * a4);
    v17 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 56) = v17;
    while (v17 != a1 + 32)
    {
      v18 = *(_DWORD *)(v17 + 16);
      if (v18)
        v19 = v18 - 1;
      else
        v19 = *(_DWORD *)(a1 + 76);
      MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::GetMutableState(a1, v19);
      v21 = *(_QWORD *)(a1 + 112);
      if (v21 > v16 && !*((_DWORD *)MutableState + 13))
      {
        if ((a3 & 1) != 0)
        {
          if (MutableState != a2)
          {
            v22 = *((_DWORD *)MutableState + 12);
LABEL_19:
            if ((v22 & 4) != 0)
            {
              v23 = *((_QWORD *)MutableState + 4) - *((_QWORD *)MutableState + 3) + 56;
              FstCheck(v23 <= v21, "(size) <= (cache_size_)", "../libquasar/libkaldi/tools/openfst/src/include/fst/cache.h");
              *(_QWORD *)(a1 + 112) -= v23;
            }
            fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Delete((_QWORD *)a1);
            v17 = *(_QWORD *)(a1 + 56);
            continue;
          }
        }
        else
        {
          v22 = *((_DWORD *)MutableState + 12);
          if ((v22 & 8) == 0 && MutableState != a2)
            goto LABEL_19;
        }
      }
      *((_DWORD *)MutableState + 12) &= ~8u;
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      *(_QWORD *)(a1 + 56) = v17;
    }
    if ((a3 & 1) != 0 || *(_QWORD *)(a1 + 112) <= v16)
    {
      v24 = *(_QWORD *)(a1 + 112);
      if (v16)
      {
        if (v24 > v16)
        {
          v25 = *(_QWORD *)(a1 + 96);
          do
          {
            v25 *= 2;
            v26 = v24 > 2 * v16;
            v16 *= 2;
          }
          while (v26);
          *(_QWORD *)(a1 + 96) = v25;
        }
      }
      else if (v24)
      {
        if (FLAGS_fst_error_fatal)
          std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
        else
          std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        v27 = fst::LogMessage::LogMessage((fst *)&v40, (uint64_t)__p);
        v28 = (_QWORD *)fst::cerr(v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"GCCacheStore:GC: Unable to free all cached states", 49);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v40);
        if (v42 < 0)
          operator delete(__p[0]);
      }
    }
    else
    {
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GC(a1, a2, 1, a4);
    }
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v37, "INFO");
      v29 = fst::LogMessage::LogMessage((fst *)&v39, (uint64_t)v37);
      v30 = (_QWORD *)fst::cerr(v29);
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"GCCacheStore: Exit GC: object = ", 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"(", 1);
      v32 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"), free recently cached = ", 26);
      v33 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", cache size = ", 15);
      v34 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", cache frac = ", 15);
      v35 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", cache limit = ", 16);
      v36 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v39);
      if (v38 < 0)
        operator delete(v37[0]);
    }
  }
}

void sub_1AD7B1950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a19);
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

char *fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetMutableState(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _DWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;

  v4 = a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v5 = a1 + 8;
  if (a2 >= (unint64_t)((v7 - v6) >> 3))
  {
    v13 = 0;
    std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize(v5, a2 + 1, &v13);
  }
  else
  {
    v8 = *(char **)(v6 + 8 * a2);
    if (v8)
      return v8;
  }
  v8 = (char *)operator new(0x38uLL);
  *(_DWORD *)v8 = 2139095040;
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v4) = v8;
  if (*(_BYTE *)a1)
  {
    v9 = operator new(0x18uLL);
    v9[4] = a2;
    v11 = *(_QWORD *)(a1 + 32);
    v10 = (_QWORD *)(a1 + 32);
    *(_QWORD *)v9 = v11;
    *((_QWORD *)v9 + 1) = v10;
    *(_QWORD *)(v11 + 8) = v9;
    *v10 = v9;
    ++v10[2];
  }
  return v8;
}

void std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Delete(_QWORD *a1)
{
  int v1;

  v1 = *(_DWORD *)(a1[7] + 16);
  if (!v1 || v1 - 1 == *((_DWORD *)a1 + 19))
  {
    *((_DWORD *)a1 + 19) = -1;
    a1[10] = 0;
  }
  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Delete(a1);
}

void fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Delete(_QWORD *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Destroy(*(_QWORD **)(a1[1] + 8 * *(int *)(a1[7] + 16)));
  v2 = a1[6];
  *(_QWORD *)(a1[1] + 8 * *(int *)(a1[7] + 16)) = 0;
  v3 = (uint64_t *)a1[7];
  v5 = *v3;
  v4 = v3[1];
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)v3[1] = v5;
  a1[6] = v2 - 1;
  a1[7] = v4;
  operator delete(v3);
}

void fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;

  v6 = a1[5];
  v4 = (uint64_t)(a1 + 5);
  v5 = v6;
  v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = (void **)(v4 - 16);
    v10 = *(_QWORD *)(v4 - 16);
    v11 = ((uint64_t)v7 - v10) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v13 = v5 - v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v4, v14);
    else
      v15 = 0;
    v16 = &v15[16 * v11];
    v17 = &v15[16 * v14];
    *(_OWORD *)v16 = *a2;
    v8 = v16 + 16;
    v19 = (char *)a1[3];
    v18 = (char *)a1[4];
    if (v18 != v19)
    {
      do
      {
        *((_OWORD *)v16 - 1) = *((_OWORD *)v18 - 1);
        v16 -= 16;
        v18 -= 16;
      }
      while (v18 != v19);
      v18 = (char *)*v9;
    }
    a1[3] = v16;
    a1[4] = v8;
    a1[5] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v7 = *a2;
    v8 = v7 + 1;
  }
  a1[4] = v8;
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::SetArcs(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs((_QWORD *)a2);
  if (*(_BYTE *)(a1 + 104) && (*(_BYTE *)(a2 + 48) & 4) != 0)
  {
    v4 = *(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24) + *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = v4;
    if (v4 > *(_QWORD *)(a1 + 96))
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GC(a1, (char *)a2, 0, 0.666);
  }
}

_QWORD *fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _DWORD *v4;

  v1 = result[3];
  v2 = result[4] - v1;
  if (v2)
  {
    v3 = v2 >> 4;
    if (v3 <= 1)
      v3 = 1;
    v4 = (_DWORD *)(v1 + 4);
    do
    {
      if (!*(v4 - 1))
        ++result[1];
      if (!*v4)
        ++result[2];
      v4 += 4;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::NumOutputEpsilons(_QWORD *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs((uint64_t)a1, a2) & 1) == 0&& !(*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 32))(a1, 0x40000000))
  {
    fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::Expand((uint64_t)a1, a2);
  }
  if (!fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs((uint64_t)a1, a2))return fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::CountEpsilons((uint64_t)a1, a2, 1);
  v4 = a1[15];
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 16);
}

unint64_t fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *__p[2];
  char v13;
  char v14;

  if (!FLAGS_fst_verify_properties)
    return fst::ComputeProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, a3, 1);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v7 = fst::ComputeProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, a3, 0);
  if (!fst::CompatProperties(v6, v7))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
    v9 = (_QWORD *)fst::cerr(v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  return v7;
}

void sub_1AD7B1F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::vector<unsigned int>::size_type v18;
  char v19;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  float v24;
  int v25;
  std::vector<unsigned int>::pointer end;
  unsigned int *v27;
  std::vector<unsigned int>::pointer begin;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  char *v33;
  unsigned int *v34;
  unsigned int v35;
  std::vector<unsigned int>::pointer v36;
  unsigned int *v37;
  std::vector<unsigned int>::pointer v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  unint64_t v42;
  char *v43;
  unsigned int *v44;
  unsigned int v45;
  unint64_t v46;
  std::vector<unsigned int>::pointer v47;
  unsigned int v48;
  unint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t v52;
  std::vector<unsigned int>::pointer v53;
  unsigned int v54;
  unint64_t v55;
  unsigned int v56;
  unsigned int v57;
  float v58;
  int v59;
  uint64_t *v61;
  uint64_t v63;
  int v64;
  unsigned int v65;
  std::vector<unsigned int> v66;
  std::vector<unsigned int> v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  int v74;
  int v75;

  v7 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v8 = v7;
  if (!a4
    || (v9 = v7 & 0x3FFFFFFF0000 | (2 * v7) & 0x2AAAAAAA0000 | (v7 >> 1) & 0x155555550000 | 7, (a2 & ~v9) != 0))
  {
    v8 = v7 & 7;
    v73 = v8;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    if ((a2 & 0xF3C00000000) != 0 && v10)
    {
      v68 = 0;
      v69 = 0;
      v70 = 0;
      v71 = &v73;
      fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, &v68, 0);
      v8 = v73;
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) != 0)
    {
      v61 = a3;
      v11 = a2 & 0xC0000;
      v12 = 0x10425A810000;
      if ((a2 & 0xC0000) != 0)
        v12 = 0x10425A850000;
      v13 = v8 | v12;
      v14 = a2 & 0x300000;
      if ((a2 & 0x300000) != 0)
        v13 |= 0x100000uLL;
      v73 = v13;
      memset(&v67, 0, sizeof(v67));
      memset(&v66, 0, sizeof(v66));
      v65 = 0;
      v15 = a1;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v63);
      v16 = 0;
LABEL_12:
      if (v63)
      {
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v63 + 16))(v63))
        {
          if (v63)
          {
            v17 = (*(uint64_t (**)(void))(*(_QWORD *)v63 + 24))();
LABEL_18:
            v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 40))(v15, v17);
            v67.__end_ = v67.__begin_;
            v66.__end_ = v66.__begin_;
            if (v11)
              std::vector<int>::reserve(&v67, v18);
            if (v14)
              std::vector<int>::reserve(&v66, v18);
            v72 = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v15 + 136))(v15, v17, &v68);
            v19 = 1;
            while (1)
            {
              if (v68)
              {
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v68 + 24))(v68))
                {
                  if (v68)
                  {
                    (*(void (**)(void))(*(_QWORD *)v68 + 8))();
                  }
                  else
                  {
LABEL_92:
                    if (v71)
                      --*(_DWORD *)v71;
                  }
                  v15 = a1;
                  if (v11
                    && (std::__sort<std::__less<int,int> &,int *>(),
                        (std::vector<unsigned int>::pointer)((char *)v67.__end_ - (char *)v67.__begin_) >= (std::vector<unsigned int>::pointer)5))
                  {
                    v46 = v67.__end_ - v67.__begin_;
                    if (v46 <= 2)
                      v46 = 2;
                    v47 = v67.__begin_ + 1;
                    v48 = *v67.__begin_;
                    v49 = v46 - 1;
                    while (1)
                    {
                      v51 = *v47++;
                      v50 = v51;
                      if (v51 == v48)
                        break;
                      v48 = v50;
                      if (!--v49)
                        goto LABEL_101;
                    }
                    v73 = v73 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
                    if (!v14)
                    {
LABEL_112:
                      if (v16 >= 1)
                        v73 = v73 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                      v58 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v17);
                      *(float *)&v68 = v58;
                      v75 = 2139095040;
                      if (v58 == INFINITY)
                      {
                        if ((*(uint64_t (**)(uint64_t, uint64_t, float, float))(*(_QWORD *)a1 + 40))(a1, v17, INFINITY, v58) != 1)v73 = v73 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                      }
                      else
                      {
                        *(float *)&v68 = v58;
                        v75 = 0;
                        if (v58 != 0.0)
                          v73 = v73 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                        ++v16;
                      }
                      if (v63)
                        (*(void (**)(uint64_t))(*(_QWORD *)v63 + 32))(v63);
                      else
                        ++v65;
                      goto LABEL_12;
                    }
                  }
                  else
                  {
LABEL_101:
                    if (!v14)
                      goto LABEL_112;
                  }
                  std::__sort<std::__less<int,int> &,int *>();
                  if ((std::vector<unsigned int>::pointer)((char *)v66.__end_ - (char *)v66.__begin_) >= (std::vector<unsigned int>::pointer)5)
                  {
                    v52 = v66.__end_ - v66.__begin_;
                    if (v52 <= 2)
                      v52 = 2;
                    v53 = v66.__begin_ + 1;
                    v54 = *v66.__begin_;
                    v55 = v52 - 1;
                    while (1)
                    {
                      v57 = *v53++;
                      v56 = v57;
                      if (v57 == v54)
                        break;
                      v54 = v56;
                      if (!--v55)
                        goto LABEL_112;
                    }
                    v73 = v73 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                  }
                  goto LABEL_112;
                }
                if (v68)
                {
                  v20 = (*(uint64_t (**)(void))(*(_QWORD *)v68 + 32))();
                  goto LABEL_29;
                }
              }
              else if (v72 >= v70)
              {
                goto LABEL_92;
              }
              v20 = v69 + 16 * v72;
LABEL_29:
              v21 = *(_DWORD *)v20;
              v22 = *(_DWORD *)v20;
              if (*(_DWORD *)v20 != *(_DWORD *)(v20 + 4))
              {
                v73 = v73 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
                v22 = *(_DWORD *)(v20 + 4);
              }
              if (v21 | v22)
              {
                if (v21)
                {
                  if (!v22)
                    goto LABEL_39;
                  goto LABEL_35;
                }
                v23 = v73;
              }
              else
              {
                v23 = v73 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
              }
              v73 = v23 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
              if (!v22)
              {
LABEL_39:
                v73 = v73 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
                if ((v19 & 1) != 0)
                  goto LABEL_44;
                goto LABEL_40;
              }
LABEL_35:
              if ((v19 & 1) != 0)
                goto LABEL_44;
LABEL_40:
              if (v21 < (int)v8)
                v73 = v73 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
              if (v22 < (int)a2)
                v73 = v73 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
LABEL_44:
              v75 = 0;
              v24 = *(float *)(v20 + 8);
              v75 = LODWORD(v24);
              v74 = 0;
              if (v24 != 0.0)
              {
                v75 = LODWORD(v24);
                v74 = 2139095040;
                if (v24 != INFINITY)
                  v73 = v73 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
              }
              v25 = *(_DWORD *)(v20 + 12);
              if (v25 <= (int)v17)
                v73 = v73 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
              if (v25 != (_DWORD)v17 + 1)
                v73 = v73 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              LODWORD(v8) = *(_DWORD *)v20;
              LODWORD(a2) = *(_DWORD *)(v20 + 4);
              if (v11)
              {
                end = v67.__end_;
                if (v67.__end_ >= v67.__end_cap_.__value_)
                {
                  begin = v67.__begin_;
                  v29 = v67.__end_ - v67.__begin_;
                  v30 = v29 + 1;
                  if ((unint64_t)(v29 + 1) >> 62)
                    goto LABEL_135;
                  v31 = (char *)v67.__end_cap_.__value_ - (char *)v67.__begin_;
                  if (((char *)v67.__end_cap_.__value_ - (char *)v67.__begin_) >> 1 > v30)
                    v30 = v31 >> 1;
                  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
                    v32 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v32 = v30;
                  if (v32)
                  {
                    v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v67.__end_cap_, v32);
                    begin = v67.__begin_;
                    end = v67.__end_;
                  }
                  else
                  {
                    v33 = 0;
                  }
                  v34 = (unsigned int *)&v33[4 * v29];
                  *v34 = *(_DWORD *)v20;
                  v27 = v34 + 1;
                  while (end != begin)
                  {
                    v35 = *--end;
                    *--v34 = v35;
                  }
                  v67.__begin_ = v34;
                  v67.__end_ = v27;
                  v67.__end_cap_.__value_ = (unsigned int *)&v33[4 * v32];
                  if (begin)
                    operator delete(begin);
                }
                else
                {
                  *v67.__end_ = v8;
                  v27 = end + 1;
                }
                v67.__end_ = v27;
              }
              if (v14)
              {
                v36 = v66.__end_;
                if (v66.__end_ >= v66.__end_cap_.__value_)
                {
                  v38 = v66.__begin_;
                  v39 = v66.__end_ - v66.__begin_;
                  v40 = v39 + 1;
                  if ((unint64_t)(v39 + 1) >> 62)
LABEL_135:
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v41 = (char *)v66.__end_cap_.__value_ - (char *)v66.__begin_;
                  if (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 1 > v40)
                    v40 = v41 >> 1;
                  if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
                    v42 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v42 = v40;
                  if (v42)
                  {
                    v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v66.__end_cap_, v42);
                    v38 = v66.__begin_;
                    v36 = v66.__end_;
                  }
                  else
                  {
                    v43 = 0;
                  }
                  v44 = (unsigned int *)&v43[4 * v39];
                  *v44 = *(_DWORD *)(v20 + 4);
                  v37 = v44 + 1;
                  while (v36 != v38)
                  {
                    v45 = *--v36;
                    *--v44 = v45;
                  }
                  v66.__begin_ = v44;
                  v66.__end_ = v37;
                  v66.__end_cap_.__value_ = (unsigned int *)&v43[4 * v42];
                  if (v38)
                    operator delete(v38);
                }
                else
                {
                  *v66.__end_ = *(_DWORD *)(v20 + 4);
                  v37 = v36 + 1;
                }
                v66.__end_ = v37;
              }
              if (v68)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v68 + 40))(v68);
                v19 = 0;
              }
              else
              {
                v19 = 0;
                ++v72;
              }
            }
          }
LABEL_17:
          v17 = v65;
          goto LABEL_18;
        }
        if (v63)
          (*(void (**)(void))(*(_QWORD *)v63 + 8))();
      }
      else if ((int)v65 < v64)
      {
        goto LABEL_17;
      }
      v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
      a3 = v61;
      if (v59 != -1 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
        v73 = v73 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
      if (v66.__begin_)
      {
        v66.__end_ = v66.__begin_;
        operator delete(v66.__begin_);
      }
      if (v67.__begin_)
      {
        v67.__end_ = v67.__begin_;
        operator delete(v67.__begin_);
      }
      v8 = v73;
    }
    v9 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v9;
  return v8;
}

void sub_1AD7B2704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char inited;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::vector<char>::pointer begin;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int v31;
  std::vector<char>::pointer end;
  char *v33;
  std::vector<char>::pointer v34;
  int64_t v35;
  int64_t v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char v43;
  char v44;
  uint64_t v45;
  int v46;
  std::vector<char>::value_type v47[8];
  std::vector<char>::value_type __x[8];
  int v49;
  int v50;
  void *v51;
  _QWORD v52[6];
  _QWORD *v53;
  _OWORD v54[2];
  __int128 v55;
  std::vector<char> v56;

  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitVisit((uint64_t)a2, a1);
  v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v46 == -1)
  {
    fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
    return;
  }
  memset(&v56, 0, sizeof(v56));
  v55 = 0u;
  memset(v54, 0, sizeof(v54));
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MemoryPool(&v51, 64);
  v45 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v45)
    v6 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v6 = (v46 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v6 <= (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v6 < (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
      v56.__end_ = &v56.__begin_[(int)v6];
  }
  else
  {
    std::vector<char>::__append(&v56, (int)v6 - (unint64_t)(v56.__end_ - v56.__begin_), __x);
  }
  v50 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v46 >= (int)v6)
    goto LABEL_97;
  v7 = v46;
  v44 = a3;
  do
  {
    v56.__begin_[(int)v7] = 1;
    v8 = (uint64_t)v53;
    if (v53)
    {
      v53 = (_QWORD *)v53[6];
    }
    else
    {
      v8 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v52, 1);
      *(_QWORD *)(v8 + 48) = 0;
    }
    *(_DWORD *)v8 = v7;
    *(_QWORD *)(v8 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v7, v8 + 8);
    *(_QWORD *)v47 = v8;
    std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>::push_back(v54, v47);
    inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, v7, v7);
LABEL_16:
    v10 = inited;
    while (*((_QWORD *)&v55 + 1))
    {
      v11 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                   + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
      v12 = *(int *)v11;
      v13 = v56.__end_ - v56.__begin_;
      if (v56.__end_ - v56.__begin_ <= v12)
      {
        v6 = v12 + 1;
        v47[0] = 0;
        if (v12 + 1 <= v13)
        {
          if (v12 + 1 < v13)
            v56.__end_ = &v56.__begin_[v6];
        }
        else
        {
          std::vector<char>::__append(&v56, v12 + 1 - v13, v47);
        }
      }
      if ((v10 & 1) == 0)
        goto LABEL_33;
      v14 = v11[1];
      if (v14)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
          goto LABEL_33;
        v15 = v11[1];
        if (!v15)
          goto LABEL_29;
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
LABEL_30:
        v17 = *(int *)(v16 + 12);
        begin = v56.__begin_;
        v19 = v56.__end_ - v56.__begin_;
        if (v56.__end_ - v56.__begin_ <= v17)
        {
          v6 = (v17 + 1);
          v47[0] = 0;
          if ((int)v6 <= v19)
          {
            if ((int)v6 < v19)
              v56.__end_ = &v56.__begin_[(int)v6];
          }
          else
          {
            std::vector<char>::__append(&v56, (int)v6 - v19, v47);
            v17 = *(int *)(v16 + 12);
            begin = v56.__begin_;
          }
        }
        v26 = begin[v17];
        if (v26 == 1)
        {
          v10 = fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::BackArc((uint64_t)a2, v12, v16);
          v25 = v11[1];
          if (v25)
            goto LABEL_50;
LABEL_51:
          ++v11[5];
        }
        else
        {
          if (v26 != 2)
          {
            begin[v17] = 1;
            v27 = (uint64_t)v53;
            if (v53)
            {
              v53 = (_QWORD *)v53[6];
            }
            else
            {
              v27 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v52, 1);
              *(_QWORD *)(v27 + 48) = 0;
            }
            *(_DWORD *)v27 = *(_DWORD *)(v16 + 12);
            *(_QWORD *)(v27 + 40) = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
            *(_QWORD *)v47 = v27;
            std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>::push_back(v54, v47);
            inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, *(_DWORD *)(v16 + 12), v7);
            goto LABEL_16;
          }
          v10 = fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ForwardOrCrossArc((_QWORD **)a2, v12, v16);
          v25 = v11[1];
          if (!v25)
            goto LABEL_51;
LABEL_50:
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        }
      }
      else
      {
        if (v11[5] < v11[3])
        {
LABEL_29:
          v16 = v11[2] + 16 * v11[5];
          goto LABEL_30;
        }
LABEL_33:
        v56.__begin_[v12] = 2;
        v20 = v11[1];
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        }
        else
        {
          v21 = (_DWORD *)v11[4];
          if (v21)
            --*v21;
        }
        v11[6] = v53;
        v53 = v11;
        --*((_QWORD *)&v55 + 1);
        std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v54, 1);
        if (*((_QWORD *)&v55 + 1))
        {
          v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                      + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
          v23 = *(_DWORD *)v22;
          v24 = *(_QWORD *)(v22 + 8);
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
          fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::FinishState((uint64_t)a2, v12, v23);
          v25 = *(_QWORD *)(v22 + 8);
          if (v25)
            goto LABEL_50;
          ++*(_QWORD *)(v22 + 40);
        }
        else
        {
          fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::FinishState((uint64_t)a2, v12, -1);
        }
      }
    }
    if ((a3 & 1) != 0)
      break;
    if ((_DWORD)v7 == v46)
      v7 = 0;
    else
      v7 = (v7 + 1);
    if ((int)v7 < (int)v6)
    {
      v28 = &v56.__begin_[(int)v7];
      v29 = (int)v6 - (uint64_t)(int)v7;
      while (*v28++)
      {
        v7 = (v7 + 1);
        if (!--v29)
        {
          v7 = v6;
          break;
        }
      }
    }
    if (v45 || (_DWORD)v7 != (_DWORD)v6)
      continue;
LABEL_67:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_73;
      }
    }
    else if (v50 >= v49)
    {
      continue;
    }
    v31 = v50;
LABEL_73:
    if (v31 != (_DWORD)v6)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v50;
      goto LABEL_67;
    }
    end = v56.__end_;
    if (v56.__end_ >= v56.__end_cap_.__value_)
    {
      v34 = v56.__begin_;
      v35 = v56.__end_ - v56.__begin_;
      v36 = v56.__end_ - v56.__begin_ + 1;
      if (v36 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v37 = v56.__end_cap_.__value_ - v56.__begin_;
      if (2 * (v56.__end_cap_.__value_ - v56.__begin_) > (unint64_t)v36)
        v36 = 2 * v37;
      if (v37 >= 0x3FFFFFFFFFFFFFFFLL)
        v38 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (v38)
        v39 = (char *)operator new(v38);
      else
        v39 = 0;
      v40 = &v39[v35];
      v41 = &v39[v35];
      *v41 = 0;
      v33 = v41 + 1;
      if (end != v34)
      {
        v42 = &end[~(unint64_t)v34];
        do
        {
          v43 = *--end;
          (v42--)[(_QWORD)v39] = v43;
        }
        while (end != v34);
        end = v56.__begin_;
        v40 = v39;
      }
      v56.__begin_ = v40;
      v56.__end_ = v33;
      v56.__end_cap_.__value_ = &v39[v38];
      a3 = v44;
      if (end)
        operator delete(end);
    }
    else
    {
      *v56.__end_ = 0;
      v33 = end + 1;
    }
    v56.__end_ = v33;
    v6 = (v6 + 1);
  }
  while ((v10 & 1) != 0 && (int)v7 < (int)v6);
LABEL_97:
  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v51 = &unk_1E5D198C8;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Link>::~MemoryArena(v52);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v51);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v54);
  if (v56.__begin_)
  {
    v56.__end_ = v56.__begin_;
    operator delete(v56.__begin_);
  }
}

void sub_1AD7B2E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D198C8;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::FinishState(uint64_t a1, int a2, int a3)
{
  unint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int *i;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  if ((*(float (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32)) == INFINITY)
  {
    v6 = a2;
  }
  else
  {
    v6 = a2;
    *(_QWORD *)(**(_QWORD **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  }
  v7 = **(_QWORD **)(a1 + 64);
  if (*(_DWORD *)(**(_QWORD **)(a1 + 56) + 4 * v6) != *(_DWORD *)(v7 + 4 * v6))
    goto LABEL_17;
  v8 = 0;
  v9 = *(_QWORD **)(a1 + 80);
  v10 = v9[1];
  v11 = **(_QWORD **)(a1 + 16);
  v12 = (int *)(((v10 - *v9) & 0xFFFFFFFFFFFFFFFCLL) + *v9 - 4);
  do
  {
    v13 = *v12--;
    v8 |= *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13;
  }
  while ((_DWORD)v13 != a2);
  v14 = *(_QWORD **)a1;
  v15 = **(_QWORD **)(a1 + 72);
  for (i = (int *)(v10 - 4); ; --i)
  {
    v17 = *i;
    if (v14)
      *(_DWORD *)(*v14 + 4 * v17) = *(_DWORD *)(a1 + 48);
    v18 = v17 >> 6;
    v19 = 1 << v17;
    if ((v8 & 1) == 0)
      break;
    *(_QWORD *)(v11 + 8 * v18) |= v19;
    *(_QWORD *)(v15 + 8 * v18) &= ~v19;
    if ((_DWORD)v17 == a2)
    {
      v9[1] = i;
      goto LABEL_16;
    }
LABEL_14:
    ;
  }
  *(_QWORD *)(v15 + 8 * v18) &= ~v19;
  if ((_DWORD)v17 != a2)
    goto LABEL_14;
  v9[1] = i;
  **(_QWORD **)(a1 + 24) = **(_QWORD **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
LABEL_16:
  ++*(_DWORD *)(a1 + 48);
LABEL_17:
  if (a3 != -1)
  {
    v20 = **(_QWORD **)(a1 + 16);
    if (((*(_QWORD *)(v20 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
      *(_QWORD *)(v20 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    v21 = *(_DWORD *)(v7 + 4 * v6);
    if (v21 < *(_DWORD *)(v7 + 4 * a3))
      *(_DWORD *)(v7 + 4 * a3) = v21;
  }
}

uint64_t fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::BackArc(uint64_t a1, int a2, uint64_t a3)
{
  unint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(int *)(a3 + 12);
  v4 = *(_DWORD *)(**(_QWORD **)(a1 + 56) + 4 * v3);
  v5 = **(_QWORD **)(a1 + 64);
  if (v4 < *(_DWORD *)(v5 + 4 * a2))
    *(_DWORD *)(v5 + 4 * a2) = v4;
  v6 = **(_QWORD **)(a1 + 16);
  if (((*(_QWORD *)(v6 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    *(_QWORD *)(v6 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  v7 = *(unint64_t **)(a1 + 24);
  v8 = *v7 & 0xFFFFFFF3FFFFFFFFLL | 0x400000000;
  *v7 = v8;
  if (*(_DWORD *)(a3 + 12) == *(_DWORD *)(a1 + 40))
    *v7 = v8 & 0xFFFFFFC7FFFFFFFFLL | 0x1000000000;
  return 1;
}

uint64_t fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ForwardOrCrossArc(_QWORD **a1, int a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(int *)(a3 + 12);
  v4 = *a1[7];
  v5 = *(_DWORD *)(v4 + 4 * v3);
  if (v5 >= *(_DWORD *)(v4 + 4 * a2))
  {
    v6 = v3 >> 6;
    v7 = 1 << v3;
  }
  else
  {
    v6 = v3 >> 6;
    v7 = 1 << v3;
    if ((*(_QWORD *)(*a1[9] + 8 * v6) & v7) != 0)
    {
      v8 = *a1[8];
      if (v5 < *(_DWORD *)(v8 + 4 * a2))
        *(_DWORD *)(v8 + 4 * a2) = v5;
    }
  }
  v9 = *a1[2];
  if ((*(_QWORD *)(v9 + 8 * v6) & v7) != 0)
    *(_QWORD *)(v9 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  return 1;
}

void fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(_QWORD *)a1 = &unk_1E5D198C8;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  *(_QWORD *)a1 = &unk_1E5D198C8;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MemoryPool(_QWORD *a1, uint64_t a2)
{
  *a1 = &unk_1E5D198C8;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Link>::MemoryArena(a1 + 1, a2);
  a1[7] = 0;
  return a1;
}

void sub_1AD7B32A8(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Size()
{
  return 48;
}

_QWORD *fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Link>::MemoryArena(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &unk_1E5D1A880;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_1AD7B3390(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1AF44D190);
}

{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;

  *a1 = &unk_1E5D1A880;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1AF44D160](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Link>::Size()
{
  return 56;
}

void std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1AD7B379C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetFromFst<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  _DWORD *v27;

  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(_QWORD *)a2 + 136))(a2, a3, &v24);
  if (v24 || (a4 & 1) != 0)
  {
    v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a3);
    v12 = a5;
    if (!a4)
      v12 = 0;
    v13 = v11 + v12;
    if (*(_QWORD *)(a1 + 8) < (unint64_t)(v11 + v12))
    {
      if (*(_QWORD *)a1)
        free(*(void **)a1);
      v23 = 0x4000;
      if (v13 > 0x4000)
        v23 = v13;
      *(_QWORD *)(a1 + 8) = v23;
      v15 = malloc_type_malloc(16 * v23, 0x1000040451B5BE8uLL);
      *(_QWORD *)a1 = v15;
      *(_QWORD *)(a1 + 16) = v15;
      v14 = v15;
    }
    else
    {
      v14 = *(_OWORD **)(a1 + 16);
      v15 = *(_OWORD **)a1;
    }
    *(_QWORD *)(a1 + 24) = &v14[v13];
    v16 = v24;
    v17 = v25;
    v19 = v26;
    v18 = v27;
    if (v27)
      ++*v27;
    v20 = 0;
    if (!v16)
      goto LABEL_15;
    while (1)
    {
      v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
      v22 = *v16;
      if (v21)
        break;
      *v15 = *(_OWORD *)(*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
      (*(void (**)(uint64_t *))(*v16 + 40))(v16);
      while (1)
      {
        ++v15;
        if (v16)
          break;
LABEL_15:
        if (v20 >= v19)
        {
          if (v18)
            --*v18;
          return;
        }
        *v15 = *(_OWORD *)(v17 + 16 * v20++);
      }
    }
    (*(void (**)(uint64_t *))(v22 + 8))(v16);
  }
  else
  {
    v10 = v25 + 16 * v26;
    *(_QWORD *)(a1 + 16) = v25;
    *(_QWORD *)(a1 + 24) = v10;
    if (*(_QWORD *)a1)
    {
      free(*(void **)a1);
      *(_QWORD *)a1 = 0;
    }
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void sub_1AD7B399C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::vector<quasar::VoiceCommandInterpretation>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 112;
        std::allocator<quasar::VoiceCommandInterpretation>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::VoiceCommandInterpretation>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void **v3;

  v3 = (void **)(a2 + 88);
  std::vector<quasar::VoiceCommandArgument>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__tree<int>::destroy(a2 + 64, *(_QWORD **)(a2 + 72));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a2 + 24);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void std::vector<quasar::VoiceCommandArgument>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<quasar::VoiceCommandArgument>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

void std::vector<quasar::VoiceCommandArgument>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 != a2)
  {
    v5 = v4 - 24;
    do
    {
      std::__tree<int>::destroy(v5, *(_QWORD **)(v5 + 8));
      std::__tree<int>::destroy(v5 - 24, *(_QWORD **)(v5 - 16));
      v6 = v5 - 32;
      v5 -= 56;
    }
    while (v6 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

std::string *std::vector<quasar::VoiceCommandInterpretation>::__init_with_size[abi:ne180100]<quasar::VoiceCommandInterpretation*,quasar::VoiceCommandInterpretation*>(std::string *result, quasar::VoiceCommandInterpretation *a2, quasar::VoiceCommandInterpretation *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::VoiceCommandInterpretation>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::VoiceCommandInterpretation>,quasar::VoiceCommandInterpretation*,quasar::VoiceCommandInterpretation*,quasar::VoiceCommandInterpretation*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1AD7B3B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<quasar::VoiceCommandInterpretation>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<quasar::VoiceCommandInterpretation>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x24924924924924ALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandInterpretation>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[112 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandInterpretation>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x24924924924924ALL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(112 * a2);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::VoiceCommandInterpretation>,quasar::VoiceCommandInterpretation*,quasar::VoiceCommandInterpretation*,quasar::VoiceCommandInterpretation*>(uint64_t a1, quasar::VoiceCommandInterpretation *a2, quasar::VoiceCommandInterpretation *a3, std::string *this)
{
  std::string *v4;
  const quasar::VoiceCommandInterpretation *v6;
  _QWORD v8[3];
  char v9;
  std::string *v10;
  std::string *v11;

  v4 = this;
  v10 = this;
  v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      quasar::VoiceCommandInterpretation::VoiceCommandInterpretation(v4, v6);
      v6 = (const quasar::VoiceCommandInterpretation *)((char *)v6 + 112);
      v4 = (std::string *)((char *)v11 + 112);
      v11 = (std::string *)((char *)v11 + 112);
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::VoiceCommandInterpretation>,quasar::VoiceCommandInterpretation*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1AD7B3CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::VoiceCommandInterpretation>,quasar::VoiceCommandInterpretation*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *quasar::VoiceCommandInterpretation::VoiceCommandInterpretation(std::string *this, const quasar::VoiceCommandInterpretation *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::unordered_set<std::string>::unordered_set((uint64_t)&this[1], (uint64_t)a2 + 24);
  std::set<int>::set[abi:ne180100]((uint64_t *)&this[2].__r_.__value_.__r.__words[2], (uint64_t)a2 + 64);
  this[3].__r_.__value_.__r.__words[2] = 0;
  this[4].__r_.__value_.__r.__words[0] = 0;
  this[4].__r_.__value_.__l.__size_ = 0;
  std::vector<quasar::VoiceCommandArgument>::__init_with_size[abi:ne180100]<quasar::VoiceCommandArgument*,quasar::VoiceCommandArgument*>(&this[3].__r_.__value_.__r.__words[2], *((_DWORD **)a2 + 11), *((_DWORD **)a2 + 12), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 3));
  return this;
}

void sub_1AD7B3D9C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::__tree<int>::destroy(v3, *(_QWORD **)(v1 + 72));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t *std::set<int>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<int>::insert[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1AD7B3E64(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<int>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<int>::insert[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(uint64_t *result, int *a2, int *a3)
{
  int *v4;
  uint64_t **v5;
  uint64_t *v6;
  int *v7;
  int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<int>::__emplace_hint_unique_key_args<int,int const&>(v5, v6, v4 + 7, v4 + 7);
      v7 = (int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<int>::__emplace_hint_unique_key_args<int,int const&>(uint64_t **a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<std::__value_type<quasar::PronType,int>,std::__map_value_compare<quasar::PronType,std::__value_type<quasar::PronType,int>,std::less<quasar::PronType>,true>,std::allocator<std::__value_type<quasar::PronType,int>>>::__find_equal<quasar::PronType>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

_QWORD *std::vector<quasar::VoiceCommandArgument>::__init_with_size[abi:ne180100]<quasar::VoiceCommandArgument*,quasar::VoiceCommandArgument*>(_QWORD *result, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::VoiceCommandArgument>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>,quasar::VoiceCommandArgument*,quasar::VoiceCommandArgument*,quasar::VoiceCommandArgument*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1AD7B3FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<quasar::VoiceCommandArgument>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<quasar::VoiceCommandArgument>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x492492492492493)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[56 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(56 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>,quasar::VoiceCommandArgument*,quasar::VoiceCommandArgument*,quasar::VoiceCommandArgument*>(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4;
  _DWORD *v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::allocator<quasar::VoiceCommandArgument>::construct[abi:ne180100]<quasar::VoiceCommandArgument,quasar::VoiceCommandArgument&>(a1, v4, v6);
      v6 += 14;
      v4 = v12 + 56;
      v12 += 56;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::VoiceCommandArgument>,quasar::VoiceCommandArgument*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1AD7B4138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::VoiceCommandArgument>,quasar::VoiceCommandArgument*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::allocator<quasar::VoiceCommandArgument>::construct[abi:ne180100]<quasar::VoiceCommandArgument,quasar::VoiceCommandArgument&>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v4;

  v4 = (uint64_t)(a3 + 8);
  *(_DWORD *)a2 = *a3;
  std::set<int>::set[abi:ne180100]((uint64_t *)(a2 + 8), (uint64_t)(a3 + 2));
  return std::set<int>::set[abi:ne180100]((uint64_t *)(a2 + 32), v4);
}

void sub_1AD7B419C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__tree<int>::destroy(v2, *(_QWORD **)(v1 + 16));
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::VoiceCommandArgument>,quasar::VoiceCommandArgument*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::__allocator_destroy[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>,std::reverse_iterator<quasar::VoiceCommandArgument*>,std::reverse_iterator<quasar::VoiceCommandArgument*>>(*(_QWORD *)a1, **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 8), **(_QWORD **)(a1 + 8));
  return a1;
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>,std::reverse_iterator<quasar::VoiceCommandArgument*>,std::reverse_iterator<quasar::VoiceCommandArgument*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;

  if (a3 != a5)
  {
    v6 = a3 - 24;
    do
    {
      std::__tree<int>::destroy(v6, *(_QWORD **)(v6 + 8));
      std::__tree<int>::destroy(v6 - 24, *(_QWORD **)(v6 - 16));
      v7 = v6 - 32;
      v6 -= 56;
    }
    while (v7 != a5);
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::VoiceCommandInterpretation>,quasar::VoiceCommandInterpretation*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::VoiceCommandInterpretation>,quasar::VoiceCommandInterpretation*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::VoiceCommandInterpretation>,quasar::VoiceCommandInterpretation*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 112;
      std::allocator<quasar::VoiceCommandInterpretation>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

char *std::vector<std::pair<int,int>>::__init_with_size[abi:ne180100]<std::pair<int,int>*,std::pair<int,int>*>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1AD7B4324(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

id EARHelpers::getAbsolutePath(uint64_t *a1)
{
  uint64_t *v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;

  if (*((char *)a1 + 23) >= 0)
    v1 = a1;
  else
    v1 = (uint64_t *)*a1;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringByStandardizingPath");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v4 = (void *)MEMORY[0x1E0C99E98];
  v5 = objc_retainAutorelease(v3);
  objc_msgSend(v4, "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:", objc_msgSend(v5, "fileSystemRepresentation"), 1, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void sub_1AD7B43D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id EARHelpers::getValueFromLeaf(EARHelpers *this, const quasar::PTree *a2)
{
  int DataType;
  void *v4;
  void *v5;
  uint64_t String;
  uint64_t v7;

  DataType = quasar::PTree::getDataType(this);
  switch(DataType)
  {
    case 3:
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", quasar::PTree::getBool(this));
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    case 2:
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", quasar::PTree::getInt<int>((uint64_t)this));
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    case 1:
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", quasar::PTree::getDouble(this));
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v5 = (void *)MEMORY[0x1E0CB3940];
      String = quasar::PTree::getString(this);
      if (*(char *)(String + 23) >= 0)
        v7 = String;
      else
        v7 = *(_QWORD *)String;
      objc_msgSend(v5, "stringWithUTF8String:", v7);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      break;
  }
  return v4;
}

id EARHelpers::dictFromPTreeHelper(EARHelpers *this, const quasar::PTree *a2)
{
  const quasar::PTree *v4;
  void *v5;
  BOOL v6;

  if (quasar::PTree::isLeaf(this))
  {
    EARHelpers::getValueFromLeaf(this, v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (quasar::PTree::isList(this))
      EARHelpers::arrayFromPTree(this, a2, v6);
    else
      EARHelpers::dictFromPTree(this, a2);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v5;
}

id EARHelpers::arrayFromPTree(EARHelpers *this, const quasar::PTree *a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v5 = quasar::PTree::begin(this);
  v6 = quasar::PTree::end(this);
  while (v5 != v6)
  {
    EARHelpers::dictFromPTreeHelper((EARHelpers *)(v5 + 24), a2);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addObject:", v7);

    v5 += 88;
  }
  return v4;
}

void sub_1AD7B45AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id EARHelpers::dictFromPTree(EARHelpers *this, const quasar::PTree *a2)
{
  int v2;
  id v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  BOOL v8;
  void *v9;
  EARHelpers *v10;
  void *v11;

  v2 = (int)a2;
  v4 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v5 = quasar::PTree::begin(this);
  for (i = quasar::PTree::end(this); v5 != i; v5 += 88)
  {
    v7 = v5;
    if (*(char *)(v5 + 23) < 0)
      v7 = *(_QWORD *)v5;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (EARHelpers *)(v5 + 24);
    if (v2)
    {
      EARHelpers::dictFromPTreeHelper(v10, (const quasar::PTree *)1, v8);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "setValue:forKey:", v11, v9);
    }
    else
    {
      EARHelpers::dictFromPTreeHelper(v10, 0, v8);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "setValue:forKeyPath:", v11, v9);
    }

  }
  return v4;
}

void sub_1AD7B46C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id EARHelpers::createDirectoryInLibrary(EARHelpers *this, NSString *a2)
{
  EARHelpers *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  char v7;
  id v8;

  v2 = this;
  if (-[EARHelpers length](v2, "length"))
  {
    NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 1uLL, 1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "firstObject");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (v4)
    {
      objc_msgSend(v4, "stringByAppendingPathComponent:", v2);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v6, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v5, 1, 0, 0);

      if ((v7 & 1) != 0)
        v8 = v5;
      else
        v8 = 0;

    }
    else
    {
      v8 = 0;
    }

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

void sub_1AD7B47D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

__CFString *EARHelpers::serialize(uint64_t *a1)
{
  id v2;
  double v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void *v7;
  __CFString *v8;

  if (*a1)
  {
    v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    objc_msgSend(v2, "addObject:", CFSTR("["));
    v4 = *a1;
    if (*(int *)(*a1 + 20) >= 1)
    {
      v5 = 0;
      do
      {
        if (*(int *)(v4 + 16) >= 1)
        {
          v6 = 0;
          do
          {
            LODWORD(v3) = *(_DWORD *)(*(_QWORD *)(v4 + 8) + 4 * v5 * *(_DWORD *)(v4 + 24) + 4 * v6);
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v3);
            v7 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v2, "addObject:", v7);

            ++v6;
            v4 = *a1;
          }
          while (v6 < *(int *)(*a1 + 16));
        }
        ++v5;
      }
      while (v5 < *(_DWORD *)(v4 + 20));
    }
    objc_msgSend(v2, "addObject:", CFSTR("]"));
    objc_msgSend(v2, "componentsJoinedByString:", CFSTR(" "));
    v8 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v8 = &stru_1E5D49530;
  }

  return v8;
}

void sub_1AD7B492C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id EARHelpers::EARSpeechRecognitionTokensFromQuasarTokens(const quasar::Token **a1)
{
  void *v2;
  const quasar::Token *v3;
  const quasar::Token *v4;
  id v5;
  void *v6;
  std::string v8;
  void *v9;
  char v10;
  uint64_t v11;
  void *v12;
  char v13;
  uint64_t v14;
  void *v15;
  char v16;
  void *__p;
  char v18;
  std::string v19;
  void *v20;
  char v21;
  uint64_t v22;
  void *v23;
  char v24;
  uint64_t v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  void **v30;

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      quasar::Token::Token(&v19, v3);
      quasar::Token::Token(&v8, (const quasar::Token *)&v19);
      v5 = -[_EARSpeechRecognitionToken _initWithQuasarToken:]([_EARSpeechRecognitionToken alloc], "_initWithQuasarToken:", &v8);
      objc_msgSend(v2, "addObject:", v5);

      if (v18 < 0)
        operator delete(__p);
      if (v16 < 0)
        operator delete(v15);
      v30 = (void **)&v14;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v30);
      if (v13 < 0)
        operator delete(v12);
      v30 = (void **)&v11;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v30);
      if (v10 < 0)
        operator delete(v9);
      if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v8.__r_.__value_.__l.__data_);
      if (v29 < 0)
        operator delete(v28);
      if (v27 < 0)
        operator delete(v26);
      v30 = (void **)&v25;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v30);
      if (v24 < 0)
        operator delete(v23);
      v30 = (void **)&v22;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v30);
      if (v21 < 0)
        operator delete(v20);
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
      v3 = (const quasar::Token *)((char *)v3 + 224);
    }
    while (v3 != v4);
  }
  v6 = (void *)objc_msgSend(v2, "copy");

  return v6;
}

void sub_1AD7B4AF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void EARHelpers::QuasarResultFromEARSpeechRecognitionTokens(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  uint64_t v4;
  uint64_t i;
  id v6;
  void *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  id obj;
  uint64_t v19;
  void *v20[2];
  _OWORD v21[2];
  void *v22[2];
  _OWORD v23[2];
  void *v24[2];
  _OWORD v25[2];
  void *v26[2];
  __int128 v27;
  void *__p[2];
  _OWORD v29[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  void **v34;
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  obj = v3;
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
  if (v4)
  {
    v19 = *(_QWORD *)v31;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v31 != v19)
          objc_enumerationMutation(obj);
        v6 = *(id *)(*((_QWORD *)&v30 + 1) + 8 * i);
        v7 = v6;
        if (v6)
        {
          objc_msgSend(v6, "quasarToken");
        }
        else
        {
          memset(v29, 0, sizeof(v29));
          v27 = 0u;
          *(_OWORD *)__p = 0u;
          *(_OWORD *)v26 = 0u;
          *(_OWORD *)v24 = 0u;
          memset(v25, 0, sizeof(v25));
          memset(v23, 0, sizeof(v23));
          *(_OWORD *)v22 = 0u;
          *(_OWORD *)v20 = 0u;
          memset(v21, 0, sizeof(v21));
        }

        v8 = a2[1];
        if (v8 >= a2[2])
        {
          v16 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token>(a2, (__int128 *)v20);
          v17 = SBYTE7(v29[0]);
          a2[1] = v16;
          if (v17 < 0)
            operator delete(__p[0]);
        }
        else
        {
          v9 = *(_OWORD *)v20;
          *(_QWORD *)(v8 + 16) = *(_QWORD *)&v21[0];
          *(_OWORD *)v8 = v9;
          v20[1] = 0;
          *(_QWORD *)&v21[0] = 0;
          v20[0] = 0;
          v10 = *(_QWORD *)((char *)&v21[1] + 6);
          *(_OWORD *)(v8 + 24) = *(_OWORD *)((char *)v21 + 8);
          *(_QWORD *)(v8 + 38) = v10;
          v11 = *(_QWORD *)&v23[0];
          *(_OWORD *)(v8 + 48) = *(_OWORD *)v22;
          *(_QWORD *)(v8 + 64) = v11;
          *(_QWORD *)(v8 + 72) = 0;
          v22[1] = 0;
          *(_QWORD *)&v23[0] = 0;
          v22[0] = 0;
          *(_QWORD *)(v8 + 80) = 0;
          *(_QWORD *)(v8 + 88) = 0;
          *(_OWORD *)(v8 + 72) = *(_OWORD *)((char *)v23 + 8);
          *(_QWORD *)(v8 + 88) = *((_QWORD *)&v23[1] + 1);
          memset((char *)v23 + 8, 0, 24);
          v12 = *(_OWORD *)v24;
          *(_QWORD *)(v8 + 112) = *(_QWORD *)&v25[0];
          *(_QWORD *)(v8 + 120) = 0;
          *(_OWORD *)(v8 + 96) = v12;
          v24[1] = 0;
          *(_QWORD *)&v25[0] = 0;
          v24[0] = 0;
          *(_QWORD *)(v8 + 128) = 0;
          *(_QWORD *)(v8 + 136) = 0;
          *(_OWORD *)(v8 + 120) = *(_OWORD *)((char *)v25 + 8);
          *(_QWORD *)(v8 + 136) = *((_QWORD *)&v25[1] + 1);
          memset((char *)v25 + 8, 0, 24);
          v13 = *(_OWORD *)v26;
          *(_QWORD *)(v8 + 160) = v27;
          *(_OWORD *)(v8 + 144) = v13;
          v26[1] = 0;
          *(_QWORD *)&v27 = 0;
          v26[0] = 0;
          LODWORD(v11) = DWORD2(v27);
          *(_WORD *)(v8 + 172) = WORD6(v27);
          *(_DWORD *)(v8 + 168) = v11;
          v14 = *(_OWORD *)__p;
          *(_QWORD *)(v8 + 192) = *(_QWORD *)&v29[0];
          *(_OWORD *)(v8 + 176) = v14;
          __p[1] = 0;
          *(_QWORD *)&v29[0] = 0;
          __p[0] = 0;
          v15 = *(_OWORD *)((char *)v29 + 8);
          *(_DWORD *)(v8 + 216) = DWORD2(v29[1]);
          *(_OWORD *)(v8 + 200) = v15;
          a2[1] = v8 + 224;
        }
        if (SBYTE7(v27) < 0)
          operator delete(v26[0]);
        v34 = (void **)v25 + 1;
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v34);
        if (SBYTE7(v25[0]) < 0)
          operator delete(v24[0]);
        v34 = (void **)v23 + 1;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v34);
        if (SBYTE7(v23[0]) < 0)
          operator delete(v22[0]);
        if (SBYTE7(v21[0]) < 0)
          operator delete(v20[0]);

      }
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
    }
    while (v4);
  }

}

void sub_1AD7B4F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);

  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void EARHelpers::QuasarPreItnNbestFromEARNBest(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  id v8;
  void *v9;
  _QWORD v10[3];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  void **v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v4 = v3;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v16, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v12;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v4);
        v8 = *(id *)(*((_QWORD *)&v11 + 1) + 8 * i);
        v9 = v8;
        if (v8)
          objc_msgSend(v8, "quasarPreItnTokens");
        else
          memset(v10, 0, sizeof(v10));

        std::vector<std::vector<quasar::Token>>::push_back[abi:ne180100](a2, (uint64_t)v10);
        v15 = (void **)v10;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v15);

      }
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v16, 16);
    }
    while (v5);
  }

}

void sub_1AD7B50BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

id EARHelpers::NSArrayOfStringFromVectorOfString(__int128 **a1)
{
  void *v2;
  __int128 *v3;
  __int128 *v4;
  __int128 v5;
  std::string *p_p;
  void *v7;
  void *v8;
  std::string __p;
  std::string v11;

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      if (*((char *)v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
      }
      else
      {
        v5 = *v3;
        v11.__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
        *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v5;
      }
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
      else
        __p = v11;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", p_p, *(_OWORD *)&__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__r.__words[2]);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "addObject:", v7);

      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v11.__r_.__value_.__l.__data_);
      v3 = (__int128 *)((char *)v3 + 24);
    }
    while (v3 != v4);
  }
  v8 = (void *)objc_msgSend(v2, "copy");

  return v8;
}

void sub_1AD7B5234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;

  _Unwind_Resume(a1);
}

void EARHelpers::StdSetOfStringsFromNSSet(EARHelpers *this@<X0>, uint64_t a2@<X8>)
{
  EARHelpers *v4;
  EARHelpers *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  id v9;
  void *v10;
  void *__p[2];
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = this;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v5 = v4;
  v6 = -[EARHelpers countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v14 != v7)
          objc_enumerationMutation(v5);
        v9 = *(id *)(*((_QWORD *)&v13 + 1) + 8 * i);
        v10 = v9;
        if (v9)
        {
          objc_msgSend(v9, "ear_toString");
        }
        else
        {
          __p[0] = 0;
          __p[1] = 0;
          v12 = 0;
        }

        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)a2, (const void **)__p, (uint64_t)__p);
        if (SHIBYTE(v12) < 0)
          operator delete(__p[0]);

      }
      v6 = -[EARHelpers countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v6);
  }

}

void sub_1AD7B53E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  uint64_t v16;

  std::__tree<std::string>::destroy(v16, *(char **)(v16 + 8));
  _Unwind_Resume(a1);
}

id EARHelpers::EARCommandTaggingResultFromQuasarVector(uint64_t *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  id v6;
  void *v7;
  id v8;
  void *v10[3];
  std::string v11;
  std::string v12;
  void *v13[3];
  std::string v14;
  std::string v15;

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      std::map<std::string,std::vector<quasar::Token>>::map[abi:ne180100]((uint64_t *)v13, (const void ***)v3);
      memset(&v14, 0, sizeof(v14));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, *(__int128 **)(v3 + 24), *(__int128 **)(v3 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v3 + 32) - *(_QWORD *)(v3 + 24)) >> 3));
      if (*(char *)(v3 + 71) < 0)
      {
        std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)(v3 + 48), *(_QWORD *)(v3 + 56));
      }
      else
      {
        v5 = *(_OWORD *)(v3 + 48);
        v15.__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 64);
        *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v5;
      }
      std::map<std::string,std::vector<quasar::Token>>::map[abi:ne180100]((uint64_t *)v10, (const void ***)v13);
      memset(&v11, 0, sizeof(v11));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, (__int128 *)v14.__r_.__value_.__l.__data_, (__int128 *)v14.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14.__r_.__value_.__l.__size_ - v14.__r_.__value_.__r.__words[0]) >> 3));
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v12, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
      else
        v12 = v15;
      v6 = -[_EARCommandTagging _initWithQuasarCommandTagging:]([_EARCommandTagging alloc], "_initWithQuasarCommandTagging:", v10);
      objc_msgSend(v2, "addObject:", v6);

      quasar::CommandTagging::~CommandTagging(v10);
      quasar::CommandTagging::~CommandTagging(v13);
      v3 += 72;
    }
    while (v3 != v4);
  }
  v7 = (void *)objc_msgSend(v2, "copy");

  v8 = -[_EARCommandTaggingResult _initWithCommandTaggings:]([_EARCommandTaggingResult alloc], "_initWithCommandTaggings:", v7);
  return v8;
}

void sub_1AD7B55E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id EARHelpers::EARCommandTaggingResultArrayFromQuasarResults(uint64_t **a1)
{
  void *v2;
  uint64_t *v3;
  uint64_t *v4;
  void *v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14[3];
  void ***v15;

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      std::vector<quasar::CommandTagging>::__init_with_size[abi:ne180100]<quasar::CommandTagging*,quasar::CommandTagging*>(&v11, *v3, v3[1], 0x8E38E38E38E38E39 * ((v3[1] - *v3) >> 3));
      v8 = 0;
      v9 = 0;
      v10 = 0;
      std::vector<quasar::CommandTagging>::__init_with_size[abi:ne180100]<quasar::CommandTagging*,quasar::CommandTagging*>(&v8, v11, v12, 0x8E38E38E38E38E39 * ((v12 - v11) >> 3));
      memset(v14, 0, sizeof(v14));
      std::vector<quasar::CommandTagging>::__init_with_size[abi:ne180100]<quasar::CommandTagging*,quasar::CommandTagging*>(v14, v8, v9, 0x8E38E38E38E38E39 * ((v9 - v8) >> 3));
      EARHelpers::EARCommandTaggingResultFromQuasarVector((uint64_t *)v14);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = v14;
      std::vector<quasar::CommandTagging>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
      objc_msgSend(v2, "addObject:", v5);

      v14[0] = (void **)&v8;
      std::vector<quasar::CommandTagging>::__destroy_vector::operator()[abi:ne180100](v14);
      v14[0] = (void **)&v11;
      std::vector<quasar::CommandTagging>::__destroy_vector::operator()[abi:ne180100](v14);
      v3 += 3;
    }
    while (v3 != v4);
  }
  v6 = (void *)objc_msgSend(v2, "copy");

  return v6;
}

void sub_1AD7B57BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void EARHelpers::QuasarPersonalizedInputFromEARPersonalizedInput(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  _OWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *__p;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  void **p_p;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v4 = v3;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v20, v25, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v21;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v21 != v6)
          objc_enumerationMutation(v4);
        v8 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * i);
        applesauce::CF::convert_to<std::map<std::string,int>,0>((const void *)objc_msgSend(v4, "objectForKey:", v8, __p, v15, v16), (uint64_t)&v17);
        if (v8)
        {
          objc_msgSend(v8, "ear_toString");
        }
        else
        {
          __p = 0;
          v15 = 0;
          v16 = 0;
        }
        p_p = &__p;
        v9 = std::__tree<std::__value_type<std::string,std::map<std::string,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
        v10 = v9 + 4;
        v11 = (_QWORD *)v9 + 7;
        std::__tree<std::string>::destroy((uint64_t)v9 + 56, *((char **)v9 + 8));
        v12 = v18;
        *(v10 - 1) = v17;
        *v10 = v12;
        v13 = v19;
        v10[1] = v19;
        if (v13)
        {
          *(_QWORD *)(v12 + 16) = v10;
          v17 = &v18;
          v18 = 0;
          v19 = 0;
          v12 = 0;
        }
        else
        {
          *v11 = v10;
        }
        if (SHIBYTE(v16) < 0)
        {
          operator delete(__p);
          v12 = v18;
        }
        std::__tree<std::string>::destroy((uint64_t)&v17, (char *)v12);
      }
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v20, v25, 16);
    }
    while (v5);
  }

}

void sub_1AD7B59F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16)
{
  uint64_t v16;
  void *v17;

  std::__tree<std::__value_type<std::string,std::map<std::string,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,int>>>>::destroy(v16, *(_QWORD **)(v16 + 8));
  _Unwind_Resume(a1);
}

void applesauce::CF::convert_to<std::map<std::string,int>,0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeID TypeID;
  std::runtime_error *exception;

  if (!a1 || (TypeID = CFDictionaryGetTypeID(), TypeID != CFGetTypeID(a1)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::CFDictionary_get_value_to<std::map<std::string,int>>((const __CFDictionary *)a1, a2);
}

void sub_1AD7B5ACC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

id EARHelpers::EARVoiceCommandInterpretationFromQuasarInterpretations(uint64_t **a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t *v5;
  void *v6;
  unsigned int *v7;
  unsigned int *v8;
  void *v9;
  void *v10;
  unsigned int v11;
  EARVoiceCommandArgument *v12;
  char v13;
  EARVoiceCommandArgument *v14;
  EARVoiceCommandInterpretation *v15;
  uint64_t *v16;
  void *v17;
  EARVoiceCommandInterpretation *v18;
  uint64_t *v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27[3];
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31[3];
  void *__p;
  void *v33;
  uint64_t v34;
  uint64_t v35[4];

  v4 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 0x6DB6DB6DB6DB6DB7 * (((char *)a1[1] - (char *)*a1) >> 4));
  v5 = *a1;
  v20 = a1[1];
  v21 = (id)v4;
  if (*a1 != v20)
  {
    do
    {
      EARHelpers::ContainerToNSSet<std::unordered_set<std::string>>((uint64_t)(v5 + 3));
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      std::set<int>::set[abi:ne180100](v35, (uint64_t)(v5 + 8));
      __p = 0;
      v33 = 0;
      v34 = 0;
      std::vector<std::pair<int,int>>::__init_with_size[abi:ne180100]<std::pair<int,int>*,std::pair<int,int>*>((char *)&__p, *a2, a2[1], a2[1] - *a2);
      EARHelpers::StdSetOfIntToNSIndexSet(v35, &__p);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      if (__p)
      {
        v33 = __p;
        operator delete(__p);
      }
      std::__tree<int>::destroy((uint64_t)v35, (_QWORD *)v35[1]);
      v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 0x6DB6DB6DB6DB6DB7 * ((v5[12] - v5[11]) >> 3));
      v7 = (unsigned int *)v5[11];
      v8 = (unsigned int *)v5[12];
      while (v7 != v8)
      {
        std::set<int>::set[abi:ne180100](v31, (uint64_t)(v7 + 2));
        v28 = 0;
        v29 = 0;
        v30 = 0;
        std::vector<std::pair<int,int>>::__init_with_size[abi:ne180100]<std::pair<int,int>*,std::pair<int,int>*>((char *)&v28, *a2, a2[1], a2[1] - *a2);
        EARHelpers::StdSetOfIntToNSIndexSet(v31, &v28);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        if (v28)
        {
          v29 = v28;
          operator delete(v28);
        }
        std::__tree<int>::destroy((uint64_t)v31, (_QWORD *)v31[1]);
        std::set<int>::set[abi:ne180100](v27, (uint64_t)(v7 + 8));
        v24 = 0;
        v25 = 0;
        v26 = 0;
        std::vector<std::pair<int,int>>::__init_with_size[abi:ne180100]<std::pair<int,int>*,std::pair<int,int>*>((char *)&v24, *a2, a2[1], a2[1] - *a2);
        EARHelpers::StdSetOfIntToNSIndexSet(v27, &v24);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        if (v24)
        {
          v25 = v24;
          operator delete(v24);
        }
        std::__tree<int>::destroy((uint64_t)v27, (_QWORD *)v27[1]);
        v11 = *v7;
        v12 = [EARVoiceCommandArgument alloc];
        if (v11 >= 4)
          v13 = 3;
        else
          v13 = v11;
        v14 = -[EARVoiceCommandArgument initWithPresence:indexes:adpositionIndexes:](v12, "initWithPresence:indexes:adpositionIndexes:", v13, v9, v10);
        objc_msgSend(v6, "addObject:", v14);

        v7 += 14;
      }
      v15 = [EARVoiceCommandInterpretation alloc];
      v16 = v5;
      if (*((char *)v5 + 23) < 0)
        v16 = (uint64_t *)*v5;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = -[EARVoiceCommandInterpretation initWithCommandIdentifier:suiteIdentifiers:verbIndexes:arguments:](v15, "initWithCommandIdentifier:suiteIdentifiers:verbIndexes:arguments:", v17, v23, v22, v6);

      objc_msgSend(v21, "addObject:", v18);
      v5 += 14;
    }
    while (v5 != v20);
  }
  return v21;
}

void sub_1AD7B5D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  void *v27;
  void *v28;

  _Unwind_Resume(a1);
}

id EARHelpers::ContainerToNSSet<std::unordered_set<std::string>>(uint64_t a1)
{
  void *v2;
  uint64_t **i;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;

  objc_msgSend(MEMORY[0x1E0C99E20], "setWithCapacity:", *(_QWORD *)(a1 + 24));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  for (i = *(uint64_t ***)(a1 + 16); i; i = (uint64_t **)*i)
  {
    if (*((char *)i + 39) < 0)
    {
      v4 = (uint64_t)i[2];
      v5 = (uint64_t)i[3];
    }
    else
    {
      v4 = (uint64_t)(i + 2);
      v5 = *((unsigned __int8 *)i + 39);
    }
    objc_msgSend(MEMORY[0x1E0CB3940], "ear_stringWithStringView:", v4, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addObject:", v6);

  }
  v7 = (void *)objc_msgSend(v2, "copy");

  return v7;
}

void sub_1AD7B5F30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id EARHelpers::StdSetOfIntToNSIndexSet(_QWORD *a1, _QWORD *a2)
{
  id v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  void *v14;

  v4 = objc_alloc_init(MEMORY[0x1E0CB3788]);
  v7 = (_QWORD *)*a1;
  v5 = a1 + 1;
  v6 = v7;
  if (v7 != v5)
  {
    do
    {
      v8 = *((int *)v6 + 7);
      if (v8 >= (uint64_t)(a2[1] - *a2) >> 3)
        std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
      v9 = (int *)(*a2 + 8 * v8);
      v10 = v9[1];
      objc_msgSend(v4, "addIndex:", *v9);
      objc_msgSend(v4, "addIndex:", v10);
      v11 = (_QWORD *)v6[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v6[2];
          v13 = *v12 == (_QWORD)v6;
          v6 = v12;
        }
        while (!v13);
      }
      v6 = v12;
    }
    while (v12 != v5);
  }
  v14 = (void *)objc_msgSend(v4, "copy");

  return v14;
}

void sub_1AD7B6024(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id EARHelpers::EARVoiceCommandInterpretationFromQuasarCorrectiveRerankingParserStackOutput(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  id v5;
  EARVoiceCommandArgument *v6;
  EARVoiceCommandArgument *v7;
  void *v8;
  std::string *v9;
  void *v10;
  EARVoiceCommandArgument *v11;
  EARVoiceCommandInterpretation *v12;
  void *v13;
  void *v14;
  void *v15;
  EARVoiceCommandInterpretation *v16;
  quasar::corrective_reranking::Parse *v18;
  _BOOL4 v22;
  const quasar::corrective_reranking::Parse *v23;
  const quasar::corrective_reranking::Parse *v24;
  id v25;
  char v26;
  std::string::size_type size;
  std::string *v31;
  int v32;
  std::string::size_type v33;
  int v34;
  BOOL v35;
  std::string::size_type v36;
  EARVoiceCommandArgument *v37;
  std::string *v38;
  void *v39;
  EARVoiceCommandArgument *v40;
  std::string::size_type v41;
  EARVoiceCommandArgument *v42;
  std::string *p_p;
  void *v44;
  EARVoiceCommandArgument *v45;
  std::string::size_type v46;
  EARVoiceCommandArgument *v47;
  std::string::size_type v48;
  std::string::size_type v49;
  std::string *v50;
  void *v51;
  std::string::size_type v52;
  std::string::size_type v53;
  EARVoiceCommandArgument *v54;
  std::string *v55;
  void *v56;
  EARVoiceCommandInterpretation *v57;
  std::string *v58;
  void *v59;
  void *v60;
  void *v61;
  EARVoiceCommandInterpretation *v62;
  uint64_t *v63;
  std::string v64;
  std::string __p;
  std::string v66;
  std::string v67;
  void *v68;
  void *v69;
  char v70;
  std::string v71;
  uint64_t v72;
  uint64_t v73;

  v4 = 0x1E0C99000uLL;
  v5 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if (!*(_BYTE *)(a2 + 4))
  {
    if (!*(_BYTE *)(a2 + 33))
      return v5;
    v18 = *(quasar::corrective_reranking::Parse **)(a2 + 8);
    if (*(quasar::corrective_reranking::Parse **)(a2 + 16) == v18 || *(_BYTE *)(a2 + 32) == 0)
      return v5;
    quasar::corrective_reranking::Parse::getIntent(v18, (uint64_t)&v67);
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v67.__r_.__value_.__l.__size_ == 7)
      {
        v22 = *(_DWORD *)v67.__r_.__value_.__l.__data_ != 1952672100
           || *(_DWORD *)(v67.__r_.__value_.__r.__words[0] + 3) != 1702125940;
        operator delete(v67.__r_.__value_.__l.__data_);
        if (!v22)
          return v5;
      }
      else
      {
        operator delete(v67.__r_.__value_.__l.__data_);
      }
    }
    else if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) == 7
           && LODWORD(v67.__r_.__value_.__l.__data_) == 1952672100
           && *(_DWORD *)((char *)v67.__r_.__value_.__r.__words + 3) == 1702125940)
    {
      return v5;
    }
    v23 = *(const quasar::corrective_reranking::Parse **)(a2 + 8);
    v24 = *(const quasar::corrective_reranking::Parse **)(a2 + 16);
    if (v23 == v24)
      return v5;
    v63 = &v72;
    while (1)
    {
      quasar::corrective_reranking::TextEdit::TextEdit((quasar::corrective_reranking::TextEdit *)&v67, v23);
      v25 = objc_alloc_init(*(Class *)(v4 + 3560));
      quasar::corrective_reranking::intentToCommandIdentifier((uint64_t *)&v67, &v66);
      v26 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        break;
      if (HIBYTE(v66.__r_.__value_.__r.__words[2]) == 11)
      {
        v35 = v66.__r_.__value_.__r.__words[0] == 0x6641747265736E69
           && *(std::string::size_type *)((char *)v66.__r_.__value_.__r.__words + 3) == 0x7265746641747265;
        goto LABEL_67;
      }
      if (HIBYTE(v66.__r_.__value_.__r.__words[2]) == 12)
      {
        v31 = &v66;
        goto LABEL_61;
      }
      if (HIBYTE(v66.__r_.__value_.__r.__words[2]) != 13)
        goto LABEL_59;
      if (v66.__r_.__value_.__r.__words[0] != 0x6542747265736E69
        || *(std::string::size_type *)((char *)v66.__r_.__value_.__r.__words + 5) != 0x6E65657774654274)
      {
        goto LABEL_59;
      }
LABEL_115:

      v66.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
      v66.__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v71.__r_.__value_.__l.__data_);
      if (v70 && v68)
      {
        v69 = v68;
        operator delete(v68);
      }
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      v23 = (const quasar::corrective_reranking::Parse *)((char *)v23 + 232);
      if (v23 == v24)
        return v5;
    }
    size = v66.__r_.__value_.__l.__size_;
    if (v66.__r_.__value_.__l.__size_ == 11)
    {
      if (*(_QWORD *)v66.__r_.__value_.__l.__data_ == 0x6641747265736E69
        && *(_QWORD *)(v66.__r_.__value_.__r.__words[0] + 3) == 0x7265746641747265)
      {
        v32 = 1;
        goto LABEL_70;
      }
      size = v66.__r_.__value_.__l.__size_;
    }
    else if (v66.__r_.__value_.__l.__size_ == 13
           && *(_QWORD *)v66.__r_.__value_.__l.__data_ == 0x6542747265736E69
           && *(_QWORD *)(v66.__r_.__value_.__r.__words[0] + 5) == 0x6E65657774654274)
    {
LABEL_113:
      if (v26 < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      goto LABEL_115;
    }
    if (size == 12)
    {
      v31 = (std::string *)v66.__r_.__value_.__r.__words[0];
LABEL_61:
      v33 = v31->__r_.__value_.__r.__words[0];
      v34 = v31->__r_.__value_.__r.__words[1];
      v35 = v33 == 0x6542747265736E69 && v34 == 1701998438;
LABEL_67:
      v32 = v35;
    }
    else
    {
LABEL_59:
      v32 = 0;
    }
LABEL_70:
    quasar::corrective_reranking::TextEdit::targetIn((uint64_t)&v67, a1, &__p);
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v64, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
    else
      v64 = v71;
    if (v32)
    {
      v36 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
      if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v36 = v64.__r_.__value_.__l.__size_;
      if (!v36)
        goto LABEL_105;
      v37 = [EARVoiceCommandArgument alloc];
      if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v38 = &v64;
      else
        v38 = (std::string *)v64.__r_.__value_.__r.__words[0];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v38, v63);
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      v40 = -[EARVoiceCommandArgument initWithPresence:text:](v37, "initWithPresence:text:", 1, v39);

      objc_msgSend(v25, "addObject:", v40);
      v41 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v41 = __p.__r_.__value_.__l.__size_;
      if (!v41)
      {
LABEL_104:

LABEL_105:
        v57 = [EARVoiceCommandInterpretation alloc];
        if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v58 = &v66;
        else
          v58 = (std::string *)v66.__r_.__value_.__r.__words[0];
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v58, v63);
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0C99E60], "set");
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB36B8], "indexSet");
        v61 = (void *)objc_claimAutoreleasedReturnValue();
        v62 = -[EARVoiceCommandInterpretation initWithCommandIdentifier:suiteIdentifiers:verbIndexes:arguments:](v57, "initWithCommandIdentifier:suiteIdentifiers:verbIndexes:arguments:", v59, v60, v61, v25);

        objc_msgSend(v5, "addObject:", v62);
        v4 = 0x1E0C99000;
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v64.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v26 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
        goto LABEL_113;
      }
      v42 = [EARVoiceCommandArgument alloc];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", p_p);
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      v45 = -[EARVoiceCommandArgument initWithPresence:text:](v42, "initWithPresence:text:", 0, v44);

      objc_msgSend(v25, "addObject:", v45);
    }
    else
    {
      v46 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v46 = __p.__r_.__value_.__l.__size_;
      if (!v46)
        goto LABEL_105;
      v47 = [EARVoiceCommandArgument alloc];
      v48 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
      v49 = v64.__r_.__value_.__l.__size_;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v50 = &__p;
      else
        v50 = (std::string *)__p.__r_.__value_.__r.__words[0];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v50, v63);
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      if ((v48 & 0x80u) == 0)
        v52 = v48;
      else
        v52 = v49;
      v40 = -[EARVoiceCommandArgument initWithPresence:text:](v47, "initWithPresence:text:", v52 == 0, v51);

      objc_msgSend(v25, "addObject:", v40);
      v53 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
      if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v53 = v64.__r_.__value_.__l.__size_;
      if (!v53)
        goto LABEL_104;
      v54 = [EARVoiceCommandArgument alloc];
      if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v55 = &v64;
      else
        v55 = (std::string *)v64.__r_.__value_.__r.__words[0];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v55);
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      v45 = -[EARVoiceCommandArgument initWithPresence:text:](v54, "initWithPresence:text:", 1, v56);

      objc_msgSend(v25, "addObject:", v45);
    }

    goto LABEL_104;
  }
  v6 = [EARVoiceCommandArgument alloc];
  if (!*(_BYTE *)(a2 + 4))
    std::__throw_bad_optional_access[abi:ne180100]();
  v7 = v6;
  v8 = (void *)MEMORY[0x1E0CB3940];
  std::to_string(&v67, *(_DWORD *)a2);
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v67;
  else
    v9 = (std::string *)v67.__r_.__value_.__r.__words[0];
  objc_msgSend(v8, "stringWithUTF8String:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = -[EARVoiceCommandArgument initWithPresence:text:](v7, "initWithPresence:text:", 0, v10);

  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  v12 = [EARVoiceCommandInterpretation alloc];
  objc_msgSend(MEMORY[0x1E0C99E60], "set");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB36B8], "indexSet");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", v11);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = -[EARVoiceCommandInterpretation initWithCommandIdentifier:suiteIdentifiers:verbIndexes:arguments:](v12, "initWithCommandIdentifier:suiteIdentifiers:verbIndexes:arguments:", CFSTR("disambiguation"), v13, v14, v15);

  objc_msgSend(v5, "addObject:", v16);
  return v5;
}

void sub_1AD7B6768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  void *v34;

  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::TextEdit::~TextEdit(void **this)
{
  void *v2;
  void **v3;

  v3 = this + 13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = this + 10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((_BYTE *)this + 48))
  {
    v2 = this[3];
    if (v2)
    {
      this[4] = v2;
      operator delete(v2);
    }
  }
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

id EARHelpers::EARVoiceCommandInterpretationsFromQuasarCommandData(uint64_t a1)
{
  id v2;
  _QWORD *v3;
  int v4;
  uint64_t *v5;
  uint64_t v7;
  EARVoiceCommandArgument *v9;
  _QWORD *v10;
  void *v11;
  EARVoiceCommandArgument *v12;
  EARVoiceCommandInterpretation *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  EARVoiceCommandInterpretation *v19;
  uint64_t v20;
  uint64_t v21;
  EARVoiceCommandArgument *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v29;
  EARVoiceCommandArgument *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  void *v34;
  uint64_t v35;
  EARVoiceCommandArgument *v36;
  uint64_t v37;
  EARVoiceCommandArgument *v38;
  _QWORD *v39;
  void *v40;
  EARVoiceCommandArgument *v41;
  uint64_t v43;
  EARVoiceCommandArgument *v44;
  _QWORD *v45;
  void *v46;
  uint64_t v47;
  EARVoiceCommandArgument *v48;
  _QWORD *v49;
  void *v50;
  EARVoiceCommandInterpretation *v51;
  _QWORD *v52;
  EARVoiceCommandArgument *v55;

  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v3 = *(_QWORD **)(a1 + 152);
  if (v3 != *(_QWORD **)(a1 + 160))
  {
    if (*((char *)v3 + 23) < 0)
    {
      v7 = v3[1];
      if (!v7)
        goto LABEL_36;
      if (v7 != 13)
      {
        if (v7 == 14 && *(_QWORD *)*v3 == 0x6769626D61736964 && *(_QWORD *)(*v3 + 6) == 0x6E6F697461756769)
          goto LABEL_20;
LABEL_32:
        v23 = (EARVoiceCommandArgument *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
        v12 = v23;
        if (*((char *)v3 + 23) < 0)
        {
          v25 = v3[1];
          if (v25 == 11)
          {
            if (*(_QWORD *)*v3 != 0x6641747265736E69 || *(_QWORD *)(*v3 + 3) != 0x7265746641747265)
              goto LABEL_44;
            goto LABEL_65;
          }
          if (v25 != 12)
          {
LABEL_44:
            v29 = *((unsigned __int8 *)v3 + 47);
            if ((v29 & 0x80u) != 0)
              v29 = v3[4];
            if (!v29)
              goto LABEL_80;
            v55 = v23;
            v30 = [EARVoiceCommandArgument alloc];
            v31 = *((unsigned __int8 *)v3 + 71);
            v32 = v3[7];
            if (*((char *)v3 + 47) >= 0)
              v33 = v3 + 3;
            else
              v33 = (_QWORD *)v3[3];
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v33);
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            if ((v31 & 0x80u) == 0)
              v35 = v31;
            else
              v35 = v32;
            v36 = -[EARVoiceCommandArgument initWithPresence:text:](v30, "initWithPresence:text:", v35 == 0, v34);

            v12 = v55;
            -[EARVoiceCommandArgument addObject:](v55, "addObject:", v36);
            v37 = *((unsigned __int8 *)v3 + 71);
            if ((v37 & 0x80u) != 0)
              v37 = v3[7];
            if (!v37)
            {
LABEL_79:

LABEL_80:
              v51 = [EARVoiceCommandInterpretation alloc];
              if (*((char *)v3 + 23) >= 0)
                v52 = v3;
              else
                v52 = (_QWORD *)*v3;
              objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v52);
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(MEMORY[0x1E0C99E60], "set");
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(MEMORY[0x1E0CB36B8], "indexSet");
              v17 = (void *)objc_claimAutoreleasedReturnValue();
              v19 = -[EARVoiceCommandInterpretation initWithCommandIdentifier:suiteIdentifiers:verbIndexes:arguments:](v51, "initWithCommandIdentifier:suiteIdentifiers:verbIndexes:arguments:", v15, v16, v17, v12);
LABEL_84:

              if (v19)
                objc_msgSend(v2, "addObject:", v19);
              goto LABEL_86;
            }
            v38 = [EARVoiceCommandArgument alloc];
            if (*((char *)v3 + 71) >= 0)
              v39 = v3 + 6;
            else
              v39 = (_QWORD *)v3[6];
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v39);
            v40 = (void *)objc_claimAutoreleasedReturnValue();
            v41 = -[EARVoiceCommandArgument initWithPresence:text:](v38, "initWithPresence:text:", 1, v40);

            -[EARVoiceCommandArgument addObject:](v55, "addObject:", v41);
LABEL_78:

            goto LABEL_79;
          }
          v24 = (_QWORD *)*v3;
        }
        else
        {
          if (*((_BYTE *)v3 + 23) == 11)
          {
            if (*v3 != 0x6641747265736E69 || *(_QWORD *)((char *)v3 + 3) != 0x7265746641747265)
              goto LABEL_44;
            goto LABEL_65;
          }
          v24 = v3;
          if (*((_BYTE *)v3 + 23) != 12)
            goto LABEL_44;
        }
        v26 = *v24;
        v27 = *((_DWORD *)v24 + 2);
        if (v26 != 0x6542747265736E69 || v27 != 1701998438)
          goto LABEL_44;
LABEL_65:
        v43 = *((unsigned __int8 *)v3 + 71);
        if ((v43 & 0x80u) != 0)
          v43 = v3[7];
        if (!v43)
          goto LABEL_80;
        v44 = [EARVoiceCommandArgument alloc];
        if (*((char *)v3 + 71) >= 0)
          v45 = v3 + 6;
        else
          v45 = (_QWORD *)v3[6];
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v45);
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        v36 = -[EARVoiceCommandArgument initWithPresence:text:](v44, "initWithPresence:text:", 1, v46);

        -[EARVoiceCommandArgument addObject:](v12, "addObject:", v36);
        v47 = *((unsigned __int8 *)v3 + 47);
        if ((v47 & 0x80u) != 0)
          v47 = v3[4];
        if (!v47)
          goto LABEL_79;
        v48 = [EARVoiceCommandArgument alloc];
        if (*((char *)v3 + 47) >= 0)
          v49 = v3 + 3;
        else
          v49 = (_QWORD *)v3[3];
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v49);
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        v41 = -[EARVoiceCommandArgument initWithPresence:text:](v48, "initWithPresence:text:", 0, v50);

        -[EARVoiceCommandArgument addObject:](v12, "addObject:", v41);
        goto LABEL_78;
      }
      v5 = (uint64_t *)*v3;
    }
    else
    {
      v4 = *((unsigned __int8 *)v3 + 23);
      if (!*((_BYTE *)v3 + 23))
        goto LABEL_36;
      v5 = *(uint64_t **)(a1 + 152);
      if (v4 != 13)
      {
        if (v4 != 14)
          goto LABEL_32;
        if (*v3 != 0x6769626D61736964 || *(_QWORD *)((char *)v3 + 6) != 0x6E6F697461756769)
          goto LABEL_32;
LABEL_20:
        v9 = [EARVoiceCommandArgument alloc];
        if (*((char *)v3 + 47) >= 0)
          v10 = v3 + 3;
        else
          v10 = (_QWORD *)v3[3];
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v10);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = -[EARVoiceCommandArgument initWithPresence:text:](v9, "initWithPresence:text:", 0, v11);

        v13 = [EARVoiceCommandInterpretation alloc];
        if (*((char *)v3 + 23) >= 0)
          v14 = v3;
        else
          v14 = (_QWORD *)*v3;
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v14);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0C99E60], "set");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB36B8], "indexSet");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", v12);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = -[EARVoiceCommandInterpretation initWithCommandIdentifier:suiteIdentifiers:verbIndexes:arguments:](v13, "initWithCommandIdentifier:suiteIdentifiers:verbIndexes:arguments:", v15, v16, v17, v18);

        goto LABEL_84;
      }
    }
    v20 = *v5;
    v21 = *(uint64_t *)((char *)v5 + 5);
    if (v20 != 0x6542747265736E69 || v21 != 0x6E65657774654274)
      goto LABEL_32;
LABEL_36:
    v19 = 0;
LABEL_86:

  }
  return v2;
}

void sub_1AD7B6ECC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id EARHelpers::EarTokensToNSString(void *a1)
{
  id v1;
  id v2;
  _QWORD v4[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  void (*v9)(uint64_t);
  id v10;

  v1 = a1;
  v5 = 0;
  v6 = &v5;
  v7 = 0x3032000000;
  v8 = __Block_byref_object_copy_;
  v9 = __Block_byref_object_dispose_;
  objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___ZN10EARHelpers19EarTokensToNSStringEP7NSArrayIP26_EARSpeechRecognitionTokenE_block_invoke;
  v4[3] = &unk_1E5D46C50;
  v4[4] = &v5;
  objc_msgSend(v1, "enumerateObjectsUsingBlock:", v4);
  v2 = (id)v6[5];
  _Block_object_dispose(&v5, 8);

  return v2;
}

void sub_1AD7B706C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;

  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void ___ZN10EARHelpers19EarTokensToNSStringEP7NSArrayIP26_EARSpeechRecognitionTokenE_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v5 = a2;
  if (objc_msgSend(v5, "hasSpaceBefore"))
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "appendString:", CFSTR(" "));
  v3 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  objc_msgSend(v5, "tokenName");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "appendString:", v4);

  if (objc_msgSend(v5, "hasSpaceAfter"))
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "appendString:", CFSTR(" "));

}

void sub_1AD7B7158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

std::string *EARHelpers::QuasarTokensToStdString@<X0>(std::string *result@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v2;
  std::string::size_type size;
  int v5;
  const std::string::value_type *v6;
  std::string::size_type v7;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v2 = result->__r_.__value_.__r.__words[0];
  size = result->__r_.__value_.__l.__size_;
  if (result->__r_.__value_.__r.__words[0] != size)
  {
    do
    {
      if (*(_BYTE *)(v2 + 45))
        std::string::append(a2, " ");
      v5 = *(char *)(v2 + 23);
      if (v5 >= 0)
        v6 = (const std::string::value_type *)v2;
      else
        v6 = *(const std::string::value_type **)v2;
      if (v5 >= 0)
        v7 = *(unsigned __int8 *)(v2 + 23);
      else
        v7 = *(_QWORD *)(v2 + 8);
      result = std::string::append(a2, v6, v7);
      if (*(_BYTE *)(v2 + 44))
        result = std::string::append(a2, " ");
      v2 += 224;
    }
    while (v2 != size);
  }
  return result;
}

void sub_1AD7B720C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void EARHelpers::QuasarNbestFromEARSpeechRecognition(EARHelpers *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  id obj;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24[2];
  _OWORD v25[2];
  void *v26[2];
  _OWORD v27[2];
  void *v28[2];
  _OWORD v29[2];
  void *v30[2];
  __int128 v31;
  void *__p[2];
  _OWORD v33[2];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  void **v45;
  _BYTE v46[128];
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  -[EARHelpers nBest](this, "nBest");
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v41, v47, 16);
  if (v3)
  {
    v19 = *(_QWORD *)v42;
    do
    {
      v4 = 0;
      v21 = v3;
      do
      {
        if (*(_QWORD *)v42 != v19)
          objc_enumerationMutation(obj);
        v5 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * v4);
        v38 = 0;
        v39 = 0;
        v40 = 0;
        v34 = 0u;
        v35 = 0u;
        v36 = 0u;
        v37 = 0u;
        v23 = v5;
        v6 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v34, v46, 16);
        v22 = v4;
        if (v6)
        {
          v7 = *(_QWORD *)v35;
          do
          {
            for (i = 0; i != v6; ++i)
            {
              if (*(_QWORD *)v35 != v7)
                objc_enumerationMutation(v23);
              v9 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * i);
              if (v9)
              {
                objc_msgSend(v9, "quasarToken");
              }
              else
              {
                memset(v33, 0, sizeof(v33));
                v31 = 0u;
                *(_OWORD *)__p = 0u;
                *(_OWORD *)v30 = 0u;
                *(_OWORD *)v28 = 0u;
                memset(v29, 0, sizeof(v29));
                memset(v27, 0, sizeof(v27));
                *(_OWORD *)v26 = 0u;
                *(_OWORD *)v24 = 0u;
                memset(v25, 0, sizeof(v25));
              }
              v10 = v39;
              if (v39 >= v40)
              {
                v39 = std::vector<quasar::Token>::__emplace_back_slow_path<quasar::Token>(&v38, (__int128 *)v24);
                if (SBYTE7(v33[0]) < 0)
                  operator delete(__p[0]);
              }
              else
              {
                v11 = *(_OWORD *)v24;
                *(_QWORD *)(v39 + 16) = *(_QWORD *)&v25[0];
                *(_OWORD *)v10 = v11;
                v24[1] = 0;
                *(_QWORD *)&v25[0] = 0;
                v24[0] = 0;
                v12 = *(_QWORD *)((char *)&v25[1] + 6);
                *(_OWORD *)(v10 + 24) = *(_OWORD *)((char *)v25 + 8);
                *(_QWORD *)(v10 + 38) = v12;
                v13 = *(_QWORD *)&v27[0];
                *(_OWORD *)(v10 + 48) = *(_OWORD *)v26;
                *(_QWORD *)(v10 + 64) = v13;
                *(_QWORD *)(v10 + 72) = 0;
                v26[1] = 0;
                *(_QWORD *)&v27[0] = 0;
                v26[0] = 0;
                *(_QWORD *)(v10 + 80) = 0;
                *(_QWORD *)(v10 + 88) = 0;
                *(_OWORD *)(v10 + 72) = *(_OWORD *)((char *)v27 + 8);
                *(_QWORD *)(v10 + 88) = *((_QWORD *)&v27[1] + 1);
                memset((char *)v27 + 8, 0, 24);
                v14 = *(_OWORD *)v28;
                *(_QWORD *)(v10 + 112) = *(_QWORD *)&v29[0];
                *(_QWORD *)(v10 + 120) = 0;
                *(_OWORD *)(v10 + 96) = v14;
                v28[1] = 0;
                *(_QWORD *)&v29[0] = 0;
                v28[0] = 0;
                *(_QWORD *)(v10 + 128) = 0;
                *(_QWORD *)(v10 + 136) = 0;
                *(_OWORD *)(v10 + 120) = *(_OWORD *)((char *)v29 + 8);
                *(_QWORD *)(v10 + 136) = *((_QWORD *)&v29[1] + 1);
                memset((char *)v29 + 8, 0, 24);
                v15 = *(_OWORD *)v30;
                *(_QWORD *)(v10 + 160) = v31;
                *(_OWORD *)(v10 + 144) = v15;
                v30[1] = 0;
                *(_QWORD *)&v31 = 0;
                v30[0] = 0;
                LODWORD(v13) = DWORD2(v31);
                *(_WORD *)(v10 + 172) = WORD6(v31);
                *(_DWORD *)(v10 + 168) = v13;
                v16 = *(_OWORD *)__p;
                *(_QWORD *)(v10 + 192) = *(_QWORD *)&v33[0];
                *(_OWORD *)(v10 + 176) = v16;
                __p[1] = 0;
                *(_QWORD *)&v33[0] = 0;
                __p[0] = 0;
                v17 = *(_OWORD *)((char *)v33 + 8);
                *(_DWORD *)(v10 + 216) = DWORD2(v33[1]);
                *(_OWORD *)(v10 + 200) = v17;
                v39 = v10 + 224;
              }
              if (SBYTE7(v31) < 0)
                operator delete(v30[0]);
              v45 = (void **)v29 + 1;
              std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v45);
              if (SBYTE7(v29[0]) < 0)
                operator delete(v28[0]);
              v45 = (void **)v27 + 1;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v45);
              if (SBYTE7(v27[0]) < 0)
                operator delete(v26[0]);
              if (SBYTE7(v25[0]) < 0)
                operator delete(v24[0]);
            }
            v6 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v34, v46, 16);
          }
          while (v6);
        }

        std::vector<std::vector<quasar::Token>>::emplace_back<std::vector<quasar::Token>>(a2, (uint64_t)&v38);
        v24[0] = &v38;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v24);
        v4 = v22 + 1;
      }
      while (v22 + 1 != v21);
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v41, v47, 16);
    }
    while (v3);
  }

}

void sub_1AD7B75CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{

  a17 = a11;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<quasar::Token>>::emplace_back<std::vector<quasar::Token>>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v17[5];

  v6 = a1[2];
  v4 = a1 + 2;
  v5 = v6;
  v7 = (_QWORD *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v17[4] = v4;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v4, v12);
    v14 = &v13[24 * v9];
    v17[0] = v13;
    v17[1] = v14;
    v17[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v17[2] = v14 + 24;
    std::vector<std::vector<quasar::Token>>::__swap_out_circular_buffer(a1, v17);
    v8 = (_QWORD *)a1[1];
    std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer(v17);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return v8 - 3;
}

void sub_1AD7B7780(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void EARHelpers::StdStringUTF8ToUTF16IndexMap(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;

  v2 = a1;
  if (*((char *)a1 + 23) < 0)
  {
    v2 = (uint64_t *)*a1;
    v4 = a1[1];
  }
  else
  {
    v4 = *((unsigned __int8 *)a1 + 23);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = v5 + 1;
      v8 = *((char *)v2 + v5);
      v9 = *((unsigned __int8 *)v2 + v5);
      if (v8 < 0)
      {
        if (v7 == v4)
          goto LABEL_8;
        if (v9 < 0xE0)
        {
          if (v9 < 0xC2)
            goto LABEL_25;
          v12 = v9 & 0x1F;
        }
        else
        {
          if (v9 > 0xEF)
          {
            if (v9 > 0xF4
              || (v15 = *((unsigned __int8 *)v2 + v7), ((byte_1AE1405A8[v15 >> 4] >> (v9 + 16)) & 1) == 0))
            {
LABEL_25:
              v9 = -1;
              goto LABEL_26;
            }
            v7 = v5 + 2;
            if (v5 + 2 == v4)
            {
LABEL_8:
              v9 = -1;
              v7 = v4;
              goto LABEL_26;
            }
            v11 = *((unsigned __int8 *)v2 + v7) ^ 0x80;
            if (v11 > 0x3F)
              goto LABEL_25;
            v10 = v15 & 0x3F | ((v9 - 240) << 6);
          }
          else
          {
            v10 = v8 & 0xF;
            if (((a00000000000000[*((_BYTE *)v2 + v5) & 0xF] >> (*((_BYTE *)v2 + v7) >> 5)) & 1) == 0)
              goto LABEL_25;
            v11 = *((_BYTE *)v2 + v7) & 0x3F;
          }
          if (++v7 == v4)
            goto LABEL_8;
          v12 = v11 | (v10 << 6);
        }
        v13 = *((unsigned __int8 *)v2 + v7) ^ 0x80;
        v14 = v13 | (v12 << 6);
        if (v13 > 0x3F)
        {
          v9 = -1;
        }
        else
        {
          ++v7;
          v9 = v14;
        }
      }
LABEL_26:
      if (v9 < 0x10000)
        v16 = v6;
      else
        v16 = v6 + 1;
      v17 = __PAIR64__(v16, v6);
      std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize((uint64_t)a2, v7 - v5 + ((uint64_t)(a2[1] - *a2) >> 3), &v17);
      if (v9 >= 0x10000)
        v6 += 2;
      else
        ++v6;
      v5 = v7;
    }
    while (v7 < v4);
  }
}

void sub_1AD7B7934(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

id EARHelpers::shuffledArray(EARHelpers *this, NSArray *a2)
{
  EARHelpers *v2;
  void *v3;
  uint64_t v4;
  unint64_t i;
  void *v6;

  v2 = this;
  v3 = (void *)-[EARHelpers mutableCopy](v2, "mutableCopy");
  v4 = 0;
  for (i = 0; i < objc_msgSend(v3, "count"); ++i)
  {
    objc_msgSend(v3, "exchangeObjectAtIndex:withObjectAtIndex:", i, arc4random() % (unint64_t)(v4 + objc_msgSend(v3, "count")) + i);
    --v4;
  }
  v6 = (void *)objc_msgSend(v3, "copy");

  return v6;
}

void sub_1AD7B79F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id EARHelpers::ContainerToNSSet<std::set<std::string>>(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  void *v11;

  objc_msgSend(MEMORY[0x1E0C99E20], "setWithCapacity:", a1[2]);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (_QWORD *)*a1;
  v4 = a1 + 1;
  if ((_QWORD *)*a1 != a1 + 1)
  {
    do
    {
      if (*((char *)v3 + 55) < 0)
      {
        v5 = (_QWORD *)v3[4];
        v6 = v3[5];
      }
      else
      {
        v5 = v3 + 4;
        v6 = *((unsigned __int8 *)v3 + 55);
      }
      objc_msgSend(MEMORY[0x1E0CB3940], "ear_stringWithStringView:", v5, v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "addObject:", v7);

      v8 = (_QWORD *)v3[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v3[2];
          v10 = *v9 == (_QWORD)v3;
          v3 = v9;
        }
        while (!v10);
      }
      v3 = v9;
    }
    while (v9 != v4);
  }
  v11 = (void *)objc_msgSend(v2, "copy");

  return v11;
}

void sub_1AD7B7AF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id EARHelpers::VectorToArray<std::string>(__int128 **a1)
{
  void *v2;
  __int128 *v3;
  __int128 *v4;
  __int128 v5;
  std::string *p_p;
  std::string::size_type size;
  void *v8;
  void *v9;
  std::string __p;

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      if (*((char *)v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
      }
      else
      {
        v5 = *v3;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v5;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      objc_msgSend(MEMORY[0x1E0CB3940], "ear_stringWithStringView:", p_p, size, __p.__r_.__value_.__r.__words[0]);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "addObject:", v8);

      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v3 = (__int128 *)((char *)v3 + 24);
    }
    while (v3 != v4);
  }
  v9 = (void *)objc_msgSend(v2, "copy");

  return v9;
}

void sub_1AD7B7C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void EARHelpers::createNSDataInputStream(EARHelpers *this@<X0>, EARHelpers::NSDataInputStream **a2@<X8>)
{
  EARHelpers *v4;
  void *v5;
  void *v6;
  NSData *v7;
  EARHelpers::NSDataInputStream *v8;
  EARHelpers *v9;

  v4 = this;
  v9 = v4;
  if (v4)
  {
    v5 = (void *)-[EARHelpers copy](v4, "copy");
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99D50], "data");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v6 = v5;
  v7 = v5;
  v8 = (EARHelpers::NSDataInputStream *)operator new();
  EARHelpers::NSDataInputStream::NSDataInputStream(v8, v7);
  *a2 = v8;

}

void sub_1AD7B7CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE5048] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E90], MEMORY[0x1E0DE4380]);
}

uint64_t std::vector<quasar::Token>::__push_back_slow_path<quasar::Token>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x124924924924924)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5) > v4)
    v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 5)) >= 0x92492492492492)
    v6 = 0x124924924924924;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[224 * v3];
  v13 = &v7[224 * v6];
  std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,quasar::Token>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 224;
  std::vector<quasar::Token>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)&v10);
  return v8;
}

void sub_1AD7B7E78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,quasar::Token>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;
  __int128 v9;
  __n128 result;

  v3 = *a3;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  v4 = *(__int128 *)((char *)a3 + 24);
  *(_QWORD *)(a2 + 38) = *(_QWORD *)((char *)a3 + 38);
  *(_OWORD *)(a2 + 24) = v4;
  v5 = a3[3];
  *(_QWORD *)(a2 + 64) = *((_QWORD *)a3 + 8);
  *(_OWORD *)(a2 + 48) = v5;
  *((_QWORD *)a3 + 7) = 0;
  *((_QWORD *)a3 + 8) = 0;
  *((_QWORD *)a3 + 6) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 72) = *(__int128 *)((char *)a3 + 72);
  *(_QWORD *)(a2 + 88) = *((_QWORD *)a3 + 11);
  *((_QWORD *)a3 + 9) = 0;
  *((_QWORD *)a3 + 10) = 0;
  *((_QWORD *)a3 + 11) = 0;
  v6 = a3[6];
  *(_QWORD *)(a2 + 112) = *((_QWORD *)a3 + 14);
  *(_OWORD *)(a2 + 96) = v6;
  *((_QWORD *)a3 + 13) = 0;
  *((_QWORD *)a3 + 14) = 0;
  *((_QWORD *)a3 + 12) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_OWORD *)(a2 + 120) = *(__int128 *)((char *)a3 + 120);
  *(_QWORD *)(a2 + 136) = *((_QWORD *)a3 + 17);
  *((_QWORD *)a3 + 15) = 0;
  *((_QWORD *)a3 + 16) = 0;
  *((_QWORD *)a3 + 17) = 0;
  v7 = a3[9];
  *(_QWORD *)(a2 + 160) = *((_QWORD *)a3 + 20);
  *(_OWORD *)(a2 + 144) = v7;
  *((_QWORD *)a3 + 19) = 0;
  *((_QWORD *)a3 + 20) = 0;
  *((_QWORD *)a3 + 18) = 0;
  v8 = *((_DWORD *)a3 + 42);
  *(_WORD *)(a2 + 172) = *((_WORD *)a3 + 86);
  *(_DWORD *)(a2 + 168) = v8;
  v9 = a3[11];
  *(_QWORD *)(a2 + 192) = *((_QWORD *)a3 + 24);
  *(_OWORD *)(a2 + 176) = v9;
  *((_QWORD *)a3 + 23) = 0;
  *((_QWORD *)a3 + 24) = 0;
  *((_QWORD *)a3 + 22) = 0;
  result = *(__n128 *)((char *)a3 + 200);
  *(_DWORD *)(a2 + 216) = *((_DWORD *)a3 + 54);
  *(__n128 *)(a2 + 200) = result;
  return result;
}

void std::vector<quasar::Token>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (__int128 *)*a1;
  v4 = (__int128 *)a1[1];
  v6 = a2[1];
  if (v4 != (__int128 *)*a1)
  {
    do
    {
      v6 -= 224;
      v4 -= 14;
      std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,quasar::Token>((uint64_t)(a1 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

uint64_t std::__split_buffer<quasar::Token>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 224;
    quasar::Token::~Token((void **)(i - 224));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void **std::vector<std::vector<quasar::Token>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  void **result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v16[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<quasar::Token>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer(v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1AD7B8188(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::vector<quasar::Token>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::vector<quasar::Token>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::vector<quasar::Token>>,std::__tree_node<std::__value_type<std::string,std::vector<quasar::Token>>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1AD7B81D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::vector<quasar::Token>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::Token>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::Token>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::vector<quasar::Token>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::vector<quasar::Token>>,std::__tree_node<std::__value_type<std::string,std::vector<quasar::Token>>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,std::vector<quasar::Token>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::Token>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::Token>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<quasar::Token>> const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<quasar::Token>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::Token>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::Token>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<quasar::Token>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::vector<quasar::Token>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::Token>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::Token>>>>::__construct_node<std::pair<std::string const,std::vector<quasar::Token>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<quasar::Token>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<quasar::Token>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::vector<quasar::Token>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::Token>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::Token>>>>::__construct_node<std::pair<std::string const,std::vector<quasar::Token>> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,std::vector<quasar::Token>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1AD7B8358(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<quasar::Token>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<quasar::Token>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::vector<quasar::Token>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(this[1].__r_.__value_.__r.__words, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 5));
  return this;
}

void sub_1AD7B83EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<quasar::Token>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<quasar::Token>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<quasar::Token>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<quasar::Token>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string,std::vector<quasar::Token>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::Token>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::Token>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<quasar::Token>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::Token>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::Token>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<quasar::Token>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::Token>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::Token>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<quasar::Token>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void quasar::CommandTagging::~CommandTagging(void **this)
{
  void **v2;

  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  v2 = this + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<std::string,std::vector<quasar::Token>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::Token>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::Token>>>>::destroy((uint64_t)this, this[1]);
}

_QWORD *std::vector<quasar::CommandTagging>::__init_with_size[abi:ne180100]<quasar::CommandTagging*,quasar::CommandTagging*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::TranslationToken>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::CommandTagging>,quasar::CommandTagging*,quasar::CommandTagging*,quasar::CommandTagging*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1AD7B8590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<quasar::CommandTagging>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::CommandTagging>,quasar::CommandTagging*,quasar::CommandTagging*,quasar::CommandTagging*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  if (a2 != a3)
  {
    v8 = 0;
    do
    {
      std::allocator<quasar::CommandTagging>::construct[abi:ne180100]<quasar::CommandTagging,quasar::CommandTagging&>(a1, (std::string *)(a4 + v8), a2 + v8);
      v8 += 72;
    }
    while (a2 + v8 != a3);
    a4 += v8;
  }
  return a4;
}

void sub_1AD7B861C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 72;
    do
    {
      quasar::CommandTagging::~CommandTagging((void **)(v4 + v2));
      v2 -= 72;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::allocator<quasar::CommandTagging>::construct[abi:ne180100]<quasar::CommandTagging,quasar::CommandTagging&>(uint64_t a1, std::string *a2, uint64_t a3)
{
  std::string *v5;
  __int128 v6;

  std::map<std::string,std::vector<quasar::Token>>::map[abi:ne180100]((uint64_t *)a2, (const void ***)a3);
  a2[1].__r_.__value_.__r.__words[0] = 0;
  a2[1].__r_.__value_.__l.__size_ = 0;
  a2[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2 + 1, *(__int128 **)(a3 + 24), *(__int128 **)(a3 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 3));
  v5 = a2 + 2;
  if (*(char *)(a3 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 48), *(_QWORD *)(a3 + 56));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 48);
    a2[2].__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 64);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_1AD7B86D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<std::string,std::vector<quasar::Token>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::Token>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::Token>>>>::destroy(v2, *(_QWORD **)(v2 + 8));
  _Unwind_Resume(a1);
}

void std::vector<quasar::CommandTagging>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        quasar::CommandTagging::~CommandTagging(v4 - 9);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<std::string,std::map<std::string,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,int>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::map<std::string,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,int>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::map<std::string,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,int>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::string>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

_OWORD *std::__tree<std::__value_type<std::string,std::map<std::string,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v6 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 9) = 0;
    *((_QWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 7) = v7 + 4;
    v13 = 1;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

std::runtime_error *applesauce::CF::convert_error@<X0>(std::runtime_error *a1@<X8>)
{
  return std::runtime_error::runtime_error(a1, "Could not convert");
}

void applesauce::CF::details::CFDictionary_get_value_to<std::map<std::string,int>>(const __CFDictionary *a1@<X0>, uint64_t a2@<X8>)
{
  CFIndex Count;
  uint64_t i;
  int v6;
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  int v11;
  void **values[3];
  void *v13[3];

  Count = CFDictionaryGetCount(a1);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  std::vector<void const*>::vector(v13, Count);
  std::vector<void const*>::vector(values, Count);
  CFDictionaryGetKeysAndValues(a1, (const void **)v13[0], (const void **)values[0]);
  if (Count)
  {
    for (i = 0; i != Count; ++i)
    {
      applesauce::CF::convert_to<std::string,0>(*((const __CFString **)v13[0] + i), (uint64_t)v7);
      v6 = applesauce::CF::convert_to<int,0>((const __CFNumber *)values[0][i]);
      *(_OWORD *)__p = *(_OWORD *)v7;
      v10 = v8;
      v7[1] = 0;
      v8 = 0;
      v7[0] = 0;
      v11 = v6;
      std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,int>>((uint64_t **)a2, (const void **)__p, (uint64_t)__p);
      if (SHIBYTE(v10) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7[0]);
    }
  }
  if (values[0])
  {
    values[1] = values[0];
    operator delete(values[0]);
  }
  if (v13[0])
  {
    v13[1] = v13[0];
    operator delete(v13[0]);
  }
}

void sub_1AD7B89A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  void *v27;

  if (__p)
    operator delete(__p);
  v27 = *(void **)(v25 - 56);
  if (v27)
  {
    *(_QWORD *)(v25 - 48) = v27;
    operator delete(v27);
  }
  std::__tree<std::string>::destroy(v24, *(char **)(v24 + 8));
  _Unwind_Resume(a1);
}

_QWORD *std::vector<void const*>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1AD7B8A74(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,int>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::pair<std::string const,int> const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

_QWORD *applesauce::CF::convert_to<std::string,0>@<X0>(const __CFString *a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeID TypeID;
  std::runtime_error *exception;

  if (!a1 || (TypeID = CFStringGetTypeID(), TypeID != CFGetTypeID(a1)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return applesauce::CF::details::CFString_get_value<true>(a1, a2);
}

void sub_1AD7B8B84(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::convert_to<int,0>(const __CFNumber *a1)
{
  uint64_t result;
  std::runtime_error *exception;

  result = applesauce::CF::convert_as<int,0>(a1);
  if ((result & 0xFF00000000) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1AD7B8BE8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::convert_as<int,0>(const __CFNumber *a1)
{
  CFTypeID TypeID;

  if (a1 && (TypeID = CFNumberGetTypeID(), TypeID == CFGetTypeID(a1)))
    return applesauce::CF::details::number_convert_as<int>(a1);
  else
    return applesauce::CF::details::treat_as_BOOL_for_convert_as<int>(a1);
}

uint64_t applesauce::CF::details::treat_as_BOOL_for_convert_as<int>(const __CFBoolean *a1)
{
  CFTypeID TypeID;
  uint64_t Value;
  uint64_t v4;

  if (a1 && (TypeID = CFBooleanGetTypeID(), TypeID == CFGetTypeID(a1)))
  {
    Value = CFBooleanGetValue(a1);
    v4 = 0x100000000;
  }
  else
  {
    Value = 0;
    v4 = 0;
  }
  return v4 | Value;
}

uint64_t applesauce::CF::details::number_convert_as<int>(const __CFNumber *a1)
{
  const __CFNumber *v2;
  CFNumberType v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  const __CFNumber *v7;
  CFNumberType v8;
  const __CFNumber *v9;
  CFNumberType v10;
  const __CFNumber *v11;
  CFNumberType v12;
  const __CFNumber *v13;
  CFNumberType v14;
  int Value;
  uint64_t v16;
  unsigned __int8 v17;
  int v18;
  int v19;
  uint64_t v20;
  double valuePtr;

  switch(CFNumberGetType(a1))
  {
    case kCFNumberSInt8Type:
      LOBYTE(valuePtr) = 0;
      v2 = a1;
      v3 = kCFNumberSInt8Type;
      goto LABEL_10;
    case kCFNumberSInt16Type:
      LOWORD(valuePtr) = 0;
      v7 = a1;
      v8 = kCFNumberSInt16Type;
      goto LABEL_17;
    case kCFNumberSInt32Type:
      LODWORD(valuePtr) = 0;
      v9 = a1;
      v10 = kCFNumberSInt32Type;
      goto LABEL_28;
    case kCFNumberSInt64Type:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberSInt64Type;
      goto LABEL_28;
    case kCFNumberFloat32Type:
      LODWORD(valuePtr) = 0;
      v11 = a1;
      v12 = kCFNumberFloat32Type;
      goto LABEL_24;
    case kCFNumberFloat64Type:
      valuePtr = 0.0;
      v13 = a1;
      v14 = kCFNumberFloat64Type;
      goto LABEL_30;
    case kCFNumberCharType:
      LOBYTE(valuePtr) = 0;
      v2 = a1;
      v3 = kCFNumberCharType;
LABEL_10:
      Value = CFNumberGetValue(v2, v3, &valuePtr);
      v16 = Value != 0;
      if (Value)
        v17 = LOBYTE(valuePtr);
      else
        v17 = 0;
      v18 = -256;
      if ((v16 & (SLOBYTE(valuePtr) < 0)) == 0)
        v18 = 0;
      v5 = v16 << 32;
      LODWORD(v6) = v18 & 0xFFFFFF00 | v17;
      v4 = v6 & 0xFFFFFF00;
      return v5 | v4 & 0xFFFFFF00 | v6;
    case kCFNumberShortType:
      LOWORD(valuePtr) = 0;
      v7 = a1;
      v8 = kCFNumberShortType;
LABEL_17:
      if (CFNumberGetValue(v7, v8, &valuePtr))
        v6 = SLOWORD(valuePtr) & 0xFFFFFFFFLL | 0x100000000;
      else
        v6 = 0;
      goto LABEL_33;
    case kCFNumberIntType:
      LODWORD(valuePtr) = 0;
      v9 = a1;
      v10 = kCFNumberIntType;
      goto LABEL_28;
    case kCFNumberLongType:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberLongType;
      goto LABEL_28;
    case kCFNumberLongLongType:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberLongLongType;
      goto LABEL_28;
    case kCFNumberFloatType:
      LODWORD(valuePtr) = 0;
      v11 = a1;
      v12 = kCFNumberFloatType;
LABEL_24:
      v19 = CFNumberGetValue(v11, v12, &valuePtr);
      v20 = (int)*(float *)&valuePtr;
      goto LABEL_31;
    case kCFNumberDoubleType:
      valuePtr = 0.0;
      v13 = a1;
      v14 = kCFNumberDoubleType;
      goto LABEL_30;
    case kCFNumberCFIndexType:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberCFIndexType;
      goto LABEL_28;
    case kCFNumberNSIntegerType:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberNSIntegerType;
LABEL_28:
      v19 = CFNumberGetValue(v9, v10, &valuePtr);
      v20 = LODWORD(valuePtr);
      goto LABEL_31;
    case kCFNumberCGFloatType:
      valuePtr = 0.0;
      v13 = a1;
      v14 = kCFNumberCGFloatType;
LABEL_30:
      v19 = CFNumberGetValue(v13, v14, &valuePtr);
      v20 = (int)valuePtr;
LABEL_31:
      v6 = v20 | 0x100000000;
      if (!v19)
        v6 = 0;
LABEL_33:
      v4 = v6 & 0xFFFFFF00;
      v5 = v6 & 0x100000000;
      break;
    default:
      v4 = 0;
      v5 = 0;
      LOBYTE(v6) = 0;
      break;
  }
  return v5 | v4 & 0xFFFFFF00 | v6;
}

uint64_t std::vector<quasar::Token>::__emplace_back_slow_path<quasar::Token>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x124924924924924)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5) > v4)
    v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 5)) >= 0x92492492492492)
    v6 = 0x124924924924924;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[224 * v3];
  v13 = &v7[224 * v6];
  std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,quasar::Token>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 224;
  std::vector<quasar::Token>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)&v10);
  return v8;
}

void sub_1AD7B8FE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

EARHelpers::NSDataInputStream *EARHelpers::NSDataInputStream::NSDataInputStream(EARHelpers::NSDataInputStream *this, NSData *a2)
{
  NSData *v3;
  NSData *v4;
  NSUInteger v6;
  const void *v7;

  v3 = a2;
  *((_QWORD *)this + 20) = MEMORY[0x1E0DE4FF8] + 16;
  v4 = objc_retainAutorelease(v3);
  v7 = -[NSData bytes](v4, "bytes");
  v6 = -[NSData length](v4, "length");
  boost::iostreams::stream<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>>::stream<char const*,unsigned long>((uint64_t)this, (uint64_t *)&off_1E5D14CC8, (uint64_t *)&v7, (uint64_t *)&v6);
  *(_QWORD *)this = &off_1E5D18420;
  *((_QWORD *)this + 19) = v4;
  *((_QWORD *)this + 20) = off_1E5D18448;
  return this;
}

void sub_1AD7B9094(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1AF44D094](v2);

  _Unwind_Resume(a1);
}

uint64_t boost::iostreams::stream<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>>::stream<char const*,unsigned long>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;

  v8 = (_QWORD *)boost::iostreams::detail::stream_base<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,std::istream>::stream_base(a1, a2 + 1);
  v9 = *a2;
  *v8 = *a2;
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v9 - 24)) = a2[5];
  v10 = *a3;
  v11 = *a4;
  std::ios_base::clear((std::ios_base *)((char *)v8 + *(_QWORD *)(*v8 - 24)), 0);
  *(_QWORD *)&v13 = v10;
  *((_QWORD *)&v13 + 1) = v10 + v11;
  boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::open_impl(a1 + 16, &v13);
  return a1;
}

void sub_1AD7B9140(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(v1 + 16);
  _Unwind_Resume(a1);
}

uint64_t boost::iostreams::stream<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>>::~stream(uint64_t a1)
{
  uint64_t v2;

  v2 = std::istream::~istream();
  boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(v2 + 16);
  MEMORY[0x1AF44D094](a1 + 152);
  return a1;
}

void boost::iostreams::stream<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>>::~stream(uint64_t a1)
{
  uint64_t v2;

  v2 = std::istream::~istream();
  boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(v2 + 16);
  MEMORY[0x1AF44D094](a1 + 152);
  JUMPOUT(0x1AF44D190);
}

void `virtual thunk to'boost::iostreams::stream<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>>::~stream(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  std::istream::~istream();
  boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)(v1 + 16));
  JUMPOUT(0x1AF44D094);
}

{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  std::istream::~istream();
  boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)(v1 + 16));
  MEMORY[0x1AF44D094](v1 + 152);
  JUMPOUT(0x1AF44D190);
}

uint64_t boost::iostreams::detail::stream_base<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,std::istream>::~stream_base(uint64_t a1)
{
  uint64_t v2;

  v2 = std::istream::~istream();
  boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(v2 + 16);
  MEMORY[0x1AF44D094](a1 + 152);
  return a1;
}

void boost::iostreams::detail::stream_base<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,std::istream>::~stream_base(uint64_t a1)
{
  uint64_t v2;

  v2 = std::istream::~istream();
  boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(v2 + 16);
  MEMORY[0x1AF44D094](a1 + 152);
  JUMPOUT(0x1AF44D190);
}

void `virtual thunk to'boost::iostreams::detail::stream_base<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,std::istream>::~stream_base(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  std::istream::~istream();
  boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)(v1 + 16));
  JUMPOUT(0x1AF44D094);
}

{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  std::istream::~istream();
  boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)(v1 + 16));
  MEMORY[0x1AF44D094](v1 + 152);
  JUMPOUT(0x1AF44D190);
}

void EARHelpers::NSDataInputStream::~NSDataInputStream(id *this)
{

  std::istream::~istream();
  boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)(this + 2));
  MEMORY[0x1AF44D094](this + 20);
}

{

  std::istream::~istream();
  boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)(this + 2));
  MEMORY[0x1AF44D094](this + 20);
  JUMPOUT(0x1AF44D190);
}

void `virtual thunk to'EARHelpers::NSDataInputStream::~NSDataInputStream(EARHelpers::NSDataInputStream *this)
{
  id *v1;

  v1 = (id *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));

  std::istream::~istream();
  boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)(v1 + 2));
  JUMPOUT(0x1AF44D094);
}

{
  id *v1;

  v1 = (id *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));

  std::istream::~istream();
  boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)(v1 + 2));
  MEMORY[0x1AF44D094](v1 + 20);
  JUMPOUT(0x1AF44D190);
}

uint64_t boost::iostreams::detail::stream_base<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,std::istream>::stream_base(uint64_t a1, uint64_t *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;

  v4 = (void *)(a1 + 16);
  std::streambuf::basic_streambuf();
  *(_BYTE *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_BYTE *)(a1 + 144) = 1;
  *(_DWORD *)(a1 + 80) = 1;
  *(_QWORD *)(a1 + 16) = &unk_1E5D29B00;
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + *(_QWORD *)(v5 - 24)) = a2[3];
  v6 = a2[1];
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = a2[2];
  *(_QWORD *)(a1 + 8) = 0;
  v7 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v7, v4);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  v8 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + *(_QWORD *)(v8 - 24)) = a2[3];
  return a1;
}

void sub_1AD7B95DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(v1);
  _Unwind_Resume(a1);
}

void boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(uint64_t a1)
{
  boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(a1);
  JUMPOUT(0x1AF44D190);
}

double boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::seekpos@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  return boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::seek_impl(a1, *(_QWORD *)(a2 + 128), 0, a3, a4);
}

uint64_t boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::underflow(_QWORD *a1)
{
  unsigned __int8 *v2;
  std::ios_base::failure v4;

  if (!a1[12])
  {
    boost::iostreams::detail::cant_read(&v4);
    boost::throw_exception<std::ios_base::failure>((uint64_t)&v4);
  }
  v2 = (unsigned __int8 *)a1[3];
  if (!v2)
  {
    boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::init_get_area((uint64_t)a1);
    v2 = (unsigned __int8 *)a1[3];
  }
  if (v2 == (unsigned __int8 *)a1[13])
    return 0xFFFFFFFFLL;
  else
    return *v2;
}

void sub_1AD7B9698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

boost::iostreams::detail *boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::pbackfail(uint64_t a1, boost::iostreams::detail *this)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  std::ios_base::failure v6;

  v2 = *(_QWORD *)(a1 + 96);
  if (!v2)
  {
    boost::iostreams::detail::cant_read(&v6);
    boost::throw_exception<std::ios_base::failure>((uint64_t)&v6);
  }
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
    v4 = v3 == v2;
  else
    v4 = 1;
  if (v4)
  {
    boost::iostreams::detail::bad_putback(&v6);
    boost::throw_exception<std::ios_base::failure>((uint64_t)&v6);
  }
  *(_QWORD *)(a1 + 24) = v3 - 1;
  if ((_DWORD)this == -1)
    return 0;
  *(_BYTE *)(v3 - 1) = (_BYTE)this;
  return this;
}

void sub_1AD7B972C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::overflow(_QWORD *a1, uint64_t a2)
{
  _BYTE *v4;
  std::error_code v6;
  std::ios_base::failure v7;

  if (!a1[14])
  {
    *(_QWORD *)&v6.__val_ = 1;
    v6.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(&v7, "no write access", &v6);
    boost::throw_exception<std::ios_base::failure>((uint64_t)&v7);
  }
  if (!a1[6])
    boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::init_put_area((uint64_t)a1);
  if ((_DWORD)a2 == -1)
    return 0;
  v4 = (_BYTE *)a1[6];
  if (v4 == (_BYTE *)a1[15])
  {
    *(_QWORD *)&v6.__val_ = 1;
    v6.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(&v7, "write area exhausted", &v6);
    boost::throw_exception<std::ios_base::failure>((uint64_t)&v7);
  }
  *v4 = a2;
  ++a1[6];
  return a2;
}

void sub_1AD7B9810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11)
{
  std::runtime_error::~runtime_error(&a11);
  _Unwind_Resume(a1);
}

_QWORD *boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::close_impl(_QWORD *result, int a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2 == 16)
  {
    v2 = result + 14;
    if (!result[14])
      return result;
    v3 = result + 5;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 48))(result);
    goto LABEL_7;
  }
  if (a2 == 8)
  {
    v2 = result + 12;
    if (result[12])
    {
      v3 = result + 2;
LABEL_7:
      *v3 = 0;
      v3[1] = 0;
      v3[2] = 0;
      *v2 = 0;
      v2[1] = 0;
    }
  }
  return result;
}

uint64_t boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::auto_close(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 128);
}

uint64_t boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::set_auto_close(uint64_t result, char a2)
{
  *(_BYTE *)(result + 128) = a2;
  return result;
}

uint64_t boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::strict_sync()
{
  return 1;
}

void *boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::component_type()
{
}

uint64_t boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::component_impl(uint64_t a1)
{
  return a1 + 72;
}

uint64_t boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::~direct_streambuf(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E5D29C08;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  return std::streambuf::~streambuf();
}

void boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::~direct_streambuf(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E5D29C08;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  std::streambuf::~streambuf();
  JUMPOUT(0x1AF44D190);
}

uint64_t boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E5D29B00;
  if ((*(_QWORD *)(a1 + 96) || *(_QWORD *)(a1 + 112)) && *(_BYTE *)(a1 + 128))
    boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::basic_array_source<char>>>>((_DWORD *)a1, 8, (_DWORD *)a1, 16, a1 + 72);
  *(_QWORD *)a1 = &unk_1E5D29C08;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  return std::streambuf::~streambuf();
}

void sub_1AD7B9998(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1AD7B996CLL);
}

uint64_t boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::basic_array_source<char>>>>(_DWORD *a1, int a2, _DWORD *a3, int a4, uint64_t a5)
{
  uint64_t result;

  result = boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>>(a1, a2, a3, a4);
  if (*(_BYTE *)(a5 + 16))
    *(_BYTE *)(a5 + 16) = 0;
  return result;
}

void sub_1AD7B99D4(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (*(_BYTE *)(v1 + 16))
    *(_BYTE *)(v1 + 16) = 0;
  __cxa_rethrow();
}

void sub_1AD7B99EC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>>(_DWORD *a1, int a2, _DWORD *a3, int a4)
{
  boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>::close(a1, a2);
  boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>::close(a3, a4);
  return 0;
}

void sub_1AD7B9A34(void *a1)
{
  int v1;
  _DWORD *v2;

  __cxa_begin_catch(a1);
  boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>::close(v2, v1);
  __cxa_rethrow();
}

void sub_1AD7B9A58(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_DWORD *boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>::close(_DWORD *result, int a2)
{
  int v2;
  int v3;
  int v4;

  if (a2 == 16)
  {
    v4 = result[16];
    if ((v4 & 4) != 0)
      return result;
    v3 = v4 | 4;
    goto LABEL_7;
  }
  if (a2 == 8)
  {
    v2 = result[16];
    if ((v2 & 2) == 0)
    {
      v3 = v2 | 2;
LABEL_7:
      result[16] = v3;
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 120))(result);
    }
  }
  return result;
}

double boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::seek_impl@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  BOOL v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double result;
  std::ios_base::failure v25;

  v10 = a1[12];
  if (!v10)
  {
LABEL_21:
    v15 = 0;
    v16 = -1;
    if ((a4 & 0x10) == 0)
      goto LABEL_50;
    goto LABEL_36;
  }
  v11 = a1[14];
  if (v10 != v11 && (a4 & 0x18) == 24 && v11 != 0)
  {
    boost::iostreams::detail::bad_seek(&v25);
    boost::throw_exception<std::ios_base::failure>((uint64_t)&v25);
  }
  if (v11)
    v14 = v10 == v11;
  else
    v14 = 0;
  v15 = v14;
  if (v14)
  {
    if (a1[6] || !a1[3])
      boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::init_get_area((uint64_t)a1);
  }
  else if ((a4 & 8) == 0)
  {
    goto LABEL_21;
  }
  v17 = a1[3];
  if (!v17)
  {
    v18 = *((_OWORD *)a1 + 6);
    a1[2] = v18;
    *(_OWORD *)(a1 + 3) = v18;
    v17 = v18;
  }
  v16 = a2;
  if (a3)
  {
    if (a3 != 1)
    {
      if (a3 != 2)
      {
        v16 = 0;
        goto LABEL_34;
      }
      v17 = a1[13];
    }
    v16 = v17 + a2 - a1[12];
  }
  if (v16 < 0)
  {
LABEL_51:
    boost::iostreams::detail::bad_seek(&v25);
    boost::throw_exception<std::ios_base::failure>((uint64_t)&v25);
  }
LABEL_34:
  v20 = a1[12];
  v19 = a1[13];
  if (v16 > v19 - v20)
    goto LABEL_51;
  a1[2] = v20;
  a1[3] = v20 + v16;
  a1[4] = v19;
  if ((a4 & 0x10) == 0)
    goto LABEL_50;
LABEL_36:
  if ((v15 & 1) != 0)
    goto LABEL_50;
  v21 = a1[14];
  if (!v21)
    goto LABEL_50;
  v22 = a1[6];
  if (!v22)
  {
    v23 = a1[15];
    a1[5] = v21;
    a1[6] = v21;
    a1[7] = v23;
    v22 = v21;
  }
  switch(a3)
  {
    case 0:
      goto LABEL_45;
    case 2:
      a2 = a2 - v21 + a1[15];
LABEL_45:
      v16 = a2;
      if (a2 < 0)
      {
LABEL_52:
        boost::iostreams::detail::bad_seek(&v25);
        boost::throw_exception<std::ios_base::failure>((uint64_t)&v25);
      }
      goto LABEL_48;
    case 1:
      a2 = a2 - v21 + v22;
      goto LABEL_45;
  }
  v16 = 0;
LABEL_48:
  if (v16 > a1[15] - v21)
    goto LABEL_52;
  a1[6] = v22 + (int)v16 + (int)v21 - (int)v22;
LABEL_50:
  result = 0.0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_QWORD *)(a5 + 128) = v16;
  return result;
}

void sub_1AD7B9C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

void boost::throw_exception<std::ios_base::failure>(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x50uLL);
  boost::wrapexcept<std::ios_base::failure>::wrapexcept((uint64_t)exception, a1);
}

void sub_1AD7B9CE8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::ios_base::failure *boost::iostreams::detail::bad_seek@<X0>(std::ios_base::failure *a1@<X8>)
{
  std::error_code v4;

  *(_QWORD *)&v4.__val_ = 1;
  v4.__cat_ = std::iostream_category();
  return std::ios_base::failure::failure(a1, "bad seek", &v4);
}

uint64_t boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::init_get_area(uint64_t result)
{
  __int128 v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  v1 = *(_OWORD *)(result + 96);
  *(_QWORD *)(result + 16) = v1;
  *(_OWORD *)(result + 24) = v1;
  if ((_QWORD)v1)
  {
    v2 = *(_QWORD *)(result + 112);
    if (v2)
      v3 = (_QWORD)v1 == v2;
    else
      v3 = 0;
    if (v3)
    {
      v4 = *(_QWORD *)(result + 48);
      if (v4)
      {
        *(_QWORD *)(result + 24) = v1 + (int)v4 - (int)v1;
        *(_QWORD *)(result + 48) = 0;
        *(_QWORD *)(result + 56) = 0;
        *(_QWORD *)(result + 40) = 0;
      }
    }
  }
  return result;
}

uint64_t boost::wrapexcept<std::ios_base::failure>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &unk_1E5D29898;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)a2);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4F90] + 16;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = -1;
  *(_QWORD *)a1 = &unk_1E5D296B8;
  *(_QWORD *)(a1 + 8) = &unk_1E5D296E8;
  *(_QWORD *)(a1 + 40) = &unk_1E5D29710;
  *(_QWORD *)(a1 + 48) = 0;
  return a1;
}

{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_1E5D29898;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4F90] + 16;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FF0] + 16;
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = &unk_1E5D29AE0;
  *(_QWORD *)(a1 + 48) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)a1 = &unk_1E5D296B8;
  *(_QWORD *)(a1 + 8) = &unk_1E5D296E8;
  *(_QWORD *)(a1 + 40) = &unk_1E5D29710;
  return a1;
}

uint64_t boost::wrapexcept<std::ios_base::failure>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 40) = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 48));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

uint64_t boost::wrapexcept<std::ios_base::failure>::clone(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_1E5D29898;
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 8), (const std::runtime_error *)(a1 + 8));
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(v2 + 8) = MEMORY[0x1E0DE4FF0] + 16;
  *(_QWORD *)(v2 + 40) = &unk_1E5D29AE0;
  v3 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(v2 + 48) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_DWORD *)(v2 + 72) = *(_DWORD *)(a1 + 72);
  *(_QWORD *)v2 = &unk_1E5D296B8;
  *(_QWORD *)(v2 + 8) = &unk_1E5D296E8;
  *(_QWORD *)(v2 + 40) = &unk_1E5D29710;
  boost::exception_detail::copy_boost_exception(v2 + 40, a1 + 40);
  return v2;
}

void sub_1AD7B9F1C(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::runtime_error *v2;

  std::runtime_error::~runtime_error(v2);
  MEMORY[0x1AF44D190](v1, 0x10F1C40C009A862);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<std::ios_base::failure>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x50uLL);
  boost::wrapexcept<std::ios_base::failure>::wrapexcept((uint64_t)exception, a1);
}

void sub_1AD7B9F9C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<std::ios_base::failure>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 40) = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 48));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  JUMPOUT(0x1AF44D190);
}

void `non-virtual thunk to'boost::wrapexcept<std::ios_base::failure>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  *(_QWORD *)(a1 + 32) = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x1AF44D190);
}

void `non-virtual thunk to'boost::wrapexcept<std::ios_base::failure>::~wrapexcept(_QWORD *a1)
{
  *a1 = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 2);
}

{
  *a1 = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 2);
  JUMPOUT(0x1AF44D190);
}

uint64_t *boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *a1 = 0;
  return a1;
}

void sub_1AD7BA21C(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::copy_boost_exception(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 40))(&v7);
    v5 = v7;
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    }
  }
  else
  {
    v5 = 0;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  }
  return result;
}

void sub_1AD7BA2FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 32))(a10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  _Unwind_Resume(exception_object);
}

std::ios_base::failure *boost::iostreams::detail::cant_read@<X0>(std::ios_base::failure *a1@<X8>)
{
  std::error_code v4;

  *(_QWORD *)&v4.__val_ = 1;
  v4.__cat_ = std::iostream_category();
  return std::ios_base::failure::failure(a1, "no read access", &v4);
}

std::ios_base::failure *boost::iostreams::detail::bad_putback@<X0>(std::ios_base::failure *a1@<X8>)
{
  std::error_code v4;

  *(_QWORD *)&v4.__val_ = 1;
  v4.__cat_ = std::iostream_category();
  return std::ios_base::failure::failure(a1, "putback buffer full", &v4);
}

uint64_t boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::init_put_area(uint64_t result)
{
  __int128 v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v5;

  v1 = *(_OWORD *)(result + 112);
  *(_QWORD *)(result + 40) = v1;
  *(_OWORD *)(result + 48) = v1;
  v2 = *(_QWORD *)(result + 96);
  if (v2)
    v3 = (_QWORD)v1 == 0;
  else
    v3 = 1;
  if (!v3 && v2 == (_QWORD)v1)
  {
    v5 = *(_QWORD *)(result + 24);
    if (v5)
    {
      *(_QWORD *)(result + 48) = v1 + (int)v5 - (int)v1;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 16) = 0;
    }
  }
  return result;
}

double boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::open_impl(uint64_t a1, _OWORD *a2)
{
  double result;
  std::error_code v3;
  std::ios_base::failure v4;

  if (*(_QWORD *)(a1 + 96) || *(_QWORD *)(a1 + 112))
  {
    *(_QWORD *)&v3.__val_ = 1;
    v3.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(&v4, "already open", &v3);
    boost::throw_exception<std::ios_base::failure>((uint64_t)&v4);
  }
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = *a2;
  *(_BYTE *)(a1 + 88) = 1;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 72);
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) &= 0xFFFFFFF9;
  return result;
}

void sub_1AD7BA4B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11)
{
  std::runtime_error::~runtime_error(&a11);
  _Unwind_Resume(a1);
}

void sub_1AD7BA850(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id EarPmLogger(void)
{
  unsigned __int8 v0;
  id *v1;
  int v3;

  v1 = (id *)&unk_1EED8B000;
  if ((v0 & 1) == 0)
  {
    v1 = (id *)&unk_1EED8B000;
    if (v3)
    {
      EarPmLogger(void)::logger = (uint64_t)os_log_create("com.apple.siri", "quasar.pm");
      v1 = (id *)&unk_1EED8B000;
    }
  }
  return v1[152];
}

void sub_1AD7BA950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1AD7BAB30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _QWORD *a20)
{
  void *v20;
  uint64_t v21;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v21, a20);

  _Unwind_Resume(a1);
}

void sub_1AD7BAFA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,__int128 buf,int a30,__int16 a31,char a32,char a33)
{
  void *v35;
  NSObject *v36;
  _BOOL4 v37;
  uint64_t v38;

  if (a2)
  {
    *(_QWORD *)&buf = &a14;
    std::vector<quasar::DataFeed>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    v35 = __cxa_begin_catch(exception_object);
    EarPmLogger();
    v36 = objc_claimAutoreleasedReturnValue();
    v37 = os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v37)
      {
        v38 = (*(uint64_t (**)(void *))(*(_QWORD *)v35 + 16))(v35);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v38;
        _os_log_impl(&dword_1AD756000, v36, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }
    }
    else if (v37)
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1AD756000, v36, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1AD7BAF44);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::shared_ptr<quasar::TextTokenizer>::operator=[abi:ne180100]<quasar::TextTokenizer,std::default_delete<quasar::TextTokenizer>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_1E5D46000;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void sub_1AD7BB464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, __int128 buf,int a21,__int16 a22,char a23,char a24)
{
  void *v25;
  NSObject *v26;
  _BOOL4 v27;
  uint64_t v28;

  if (a2)
  {
    v25 = __cxa_begin_catch(exception_object);
    EarPmLogger();
    v26 = objc_claimAutoreleasedReturnValue();
    v27 = os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v27)
      {
        v28 = (*(uint64_t (**)(void *))(*(_QWORD *)v25 + 16))(v25);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v28;
        _os_log_impl(&dword_1AD756000, v26, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }
    }
    else if (v27)
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1AD756000, v26, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1AD7BB414);
  }
  _Unwind_Resume(exception_object);
}

void sub_1AD7BB648(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1AD7BB6DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1AD7BB72C(void *a1, int a2)
{
  void *v3;
  NSObject *v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = __cxa_begin_catch(a1);
  EarPmLogger();
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (a2 == 2)
    -[_EARPhoneticMatchBuilder buildGFsts].cold.1(v5, (uint64_t)v3);
  else
    -[_EARPhoneticMatchBuilder buildGFsts].cold.2(v5, v4, v6, v7, v8, v9, v10, v11);

  __cxa_end_catch();
  JUMPOUT(0x1AD7BB71CLL);
}

void sub_1AD7BB7A4(void *a1, int a2)
{
  void *v3;
  NSObject *v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = __cxa_begin_catch(a1);
  EarPmLogger();
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (a2 == 2)
    -[_EARPhoneticMatchBuilder buildGFsts].cold.1(v5, (uint64_t)v3);
  else
    -[_EARPhoneticMatchBuilder buildGFsts].cold.2(v5, v4, v6, v7, v8, v9, v10, v11);

  __cxa_end_catch();
  JUMPOUT(0x1AD7BB794);
}

void sub_1AD7BB81C(void *a1, int a2)
{
  void *v3;
  NSObject *v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = __cxa_begin_catch(a1);
  EarPmLogger();
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (a2 == 2)
    -[_EARPhoneticMatchBuilder buildGFsts].cold.1(v5, (uint64_t)v3);
  else
    -[_EARPhoneticMatchBuilder buildGFsts].cold.2(v5, v4, v6, v7, v8, v9, v10, v11);

  __cxa_end_catch();
  JUMPOUT(0x1AD7BB80CLL);
}

void sub_1AD7BB894(void *a1, int a2)
{
  void *v3;
  NSObject *v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = __cxa_begin_catch(a1);
  EarPmLogger();
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (a2 == 2)
    -[_EARPhoneticMatchBuilder buildGFsts].cold.1(v5, (uint64_t)v3);
  else
    -[_EARPhoneticMatchBuilder buildGFsts].cold.2(v5, v4, v6, v7, v8, v9, v10, v11);

  __cxa_end_catch();
  JUMPOUT(0x1AD7BB884);
}

void sub_1AD7BB90C(void *a1, int a2)
{
  void *v3;
  NSObject *v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = __cxa_begin_catch(a1);
  EarPmLogger();
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (a2 == 2)
    -[_EARPhoneticMatchBuilder buildGFsts].cold.1(v5, (uint64_t)v3);
  else
    -[_EARPhoneticMatchBuilder buildGFsts].cold.2(v5, v4, v6, v7, v8, v9, v10, v11);

  __cxa_end_catch();
  JUMPOUT(0x1AD7BB8FCLL);
}

void sub_1AD7BBA0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 __p, int a10, __int16 a11, char a12, char a13)
{
  void *v14;
  NSObject *v15;
  _BOOL4 v16;
  uint64_t v17;

  if (a2)
  {
    v14 = __cxa_begin_catch(exception_object);
    EarPmLogger();
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v16)
      {
        v17 = (*(uint64_t (**)(void *))(*(_QWORD *)v14 + 16))(v14);
        LODWORD(__p) = 136315138;
        *(_QWORD *)((char *)&__p + 4) = v17;
        _os_log_impl(&dword_1AD756000, v15, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v16)
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_1AD756000, v15, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1AD7BB9D4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1AD7BBBB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 __p, int a10, __int16 a11, char a12, char a13)
{
  void *v14;
  NSObject *v15;
  _BOOL4 v16;
  uint64_t v17;

  if (a2)
  {
    v14 = __cxa_begin_catch(exception_object);
    EarPmLogger();
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v16)
      {
        v17 = (*(uint64_t (**)(void *))(*(_QWORD *)v14 + 16))(v14);
        LODWORD(__p) = 136315138;
        *(_QWORD *)((char *)&__p + 4) = v17;
        _os_log_impl(&dword_1AD756000, v15, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v16)
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_1AD756000, v15, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1AD7BBB7CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1AD7BBE24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, __int128 buf, int a17, __int16 a18, char a19, char a20)
{
  void *v22;
  NSObject *v23;
  _BOOL4 v24;
  uint64_t v25;

  if (a2)
  {
    fst::SymbolTable::~SymbolTable((fst::SymbolTable *)&__p);
    v22 = __cxa_begin_catch(exception_object);
    EarPmLogger();
    v23 = objc_claimAutoreleasedReturnValue();
    v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v24)
      {
        v25 = (*(uint64_t (**)(void *))(*(_QWORD *)v22 + 16))(v22);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v25;
        _os_log_impl(&dword_1AD756000, v23, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v24)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1AD756000, v23, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1AD7BBDE8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::SymbolTable::WriteText(uint64_t a1, uint64_t a2)
{
  fst *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *__p[2];
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  _BYTE v17[408];
  _QWORD v18[20];

  v18[19] = *MEMORY[0x1E0C80C00];
  std::ofstream::basic_ofstream(&v16);
  if (*(_DWORD *)&v17[*(_QWORD *)(v16 - 24) + 24])
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v4 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    v5 = (_QWORD *)fst::cerr(v4);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"SymbolTable::WriteText: Can't open file ", 40);
    v7 = *(char *)(a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *(_QWORD *)a2;
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(a2 + 23);
    else
      v9 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v13 < 0)
      operator delete(__p[0]);
    v10 = 0;
  }
  else
  {
    fst::SymbolTableTextOptions::SymbolTableTextOptions((fst::SymbolTableTextOptions *)__p);
    v10 = (*(uint64_t (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)a1 + 80))(a1, &v16, __p);
    if (v14 < 0)
      operator delete(__p[1]);
  }
  v16 = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)&v17[*(_QWORD *)(v16 - 24) - 8] = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
  MEMORY[0x1AF44CA70](v17);
  std::ostream::~ostream();
  MEMORY[0x1AF44D094](v18);
  return v10;
}

void sub_1AD7BC10C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  if (a19 < 0)
    operator delete(__p);
  std::ofstream::~ofstream(&a24);
  _Unwind_Resume(a1);
}

void sub_1AD7BC254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 __p, int a10, __int16 a11, char a12, char a13)
{
  void *v14;
  NSObject *v15;
  _BOOL4 v16;
  uint64_t v17;

  if (a2)
  {
    v14 = __cxa_begin_catch(exception_object);
    EarPmLogger();
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v16)
      {
        v17 = (*(uint64_t (**)(void *))(*(_QWORD *)v14 + 16))(v14);
        LODWORD(__p) = 136315138;
        *(_QWORD *)((char *)&__p + 4) = v17;
        _os_log_impl(&dword_1AD756000, v15, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v16)
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_1AD756000, v15, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1AD7BC21CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::SymbolTable::Write(uint64_t a1, uint64_t a2)
{
  fst *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *__p[2];
  char v13;
  char v14;
  uint64_t v15;
  _BYTE v16[408];
  _QWORD v17[20];

  v17[19] = *MEMORY[0x1E0C80C00];
  std::ofstream::basic_ofstream(&v15);
  if (*(_DWORD *)&v16[*(_QWORD *)(v15 - 24) + 24])
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v4 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
    v5 = (_QWORD *)fst::cerr(v4);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"SymbolTable::Write: Can't open file ", 36);
    v7 = *(char *)(a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *(_QWORD *)a2;
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(a2 + 23);
    else
      v9 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
    if (v13 < 0)
      operator delete(__p[0]);
    v10 = 0;
  }
  else
  {
    v10 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 72))(a1, &v15);
  }
  v15 = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)&v16[*(_QWORD *)(v15 - 24) - 8] = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
  MEMORY[0x1AF44CA70](v16);
  std::ostream::~ostream();
  MEMORY[0x1AF44D094](v17);
  return v10;
}

void sub_1AD7BC4C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  std::ofstream::~ofstream(&a19);
  _Unwind_Resume(a1);
}

void sub_1AD7BC668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 buf, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v18;
  NSObject *v19;
  _BOOL4 v20;
  uint64_t v21;

  if (a2)
  {

    v18 = __cxa_begin_catch(exception_object);
    EarPmLogger();
    v19 = objc_claimAutoreleasedReturnValue();
    v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v20)
      {
        v21 = (*(uint64_t (**)(void *))(*(_QWORD *)v18 + 16))(v18);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v21;
        _os_log_impl(&dword_1AD756000, v19, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v20)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1AD756000, v19, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1AD7BC624);
  }
  _Unwind_Resume(exception_object);
}

void sub_1AD7BC874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 __p, int a10, __int16 a11, char a12, char a13)
{
  void *v14;
  NSObject *v15;
  _BOOL4 v16;
  uint64_t v17;

  if (a2)
  {
    v14 = __cxa_begin_catch(exception_object);
    EarPmLogger();
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v16)
      {
        v17 = (*(uint64_t (**)(void *))(*(_QWORD *)v14 + 16))(v14);
        LODWORD(__p) = 136315138;
        *(_QWORD *)((char *)&__p + 4) = v17;
        _os_log_impl(&dword_1AD756000, v15, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v16)
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_1AD756000, v15, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1AD7BC83CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1AD7BCAE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 buf, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v18;
  NSObject *v19;
  _BOOL4 v20;
  uint64_t v21;

  if (a2)
  {

    v18 = __cxa_begin_catch(exception_object);
    EarPmLogger();
    v19 = objc_claimAutoreleasedReturnValue();
    v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v20)
      {
        v21 = (*(uint64_t (**)(void *))(*(_QWORD *)v18 + 16))(v18);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v21;
        _os_log_impl(&dword_1AD756000, v19, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v20)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1AD756000, v19, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1AD7BCAA0);
  }
  _Unwind_Resume(exception_object);
}

void sub_1AD7BCCE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 __p, int a10, __int16 a11, char a12, char a13)
{
  void *v14;
  NSObject *v15;
  _BOOL4 v16;
  uint64_t v17;

  if (a2)
  {
    v14 = __cxa_begin_catch(exception_object);
    EarPmLogger();
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v16)
      {
        v17 = (*(uint64_t (**)(void *))(*(_QWORD *)v14 + 16))(v14);
        LODWORD(__p) = 136315138;
        *(_QWORD *)((char *)&__p + 4) = v17;
        _os_log_impl(&dword_1AD756000, v15, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v16)
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_1AD756000, v15, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1AD7BCCA8);
  }
  _Unwind_Resume(exception_object);
}

void sub_1AD7BCF4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12, __int128 buf, int a14, __int16 a15, char a16, char a17)
{
  int v19;
  void *v20;
  NSObject *v21;
  _BOOL4 v22;
  uint64_t v23;

  if (a2)
  {
    if (a12)
    {
      v19 = a12[14] - 1;
      a12[14] = v19;
      if (!v19)
        (*(void (**)(_DWORD *))(*(_QWORD *)a12 + 8))(a12);
    }
    v20 = __cxa_begin_catch(exception_object);
    EarPmLogger();
    v21 = objc_claimAutoreleasedReturnValue();
    v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v22)
      {
        v23 = (*(uint64_t (**)(void *))(*(_QWORD *)v20 + 16))(v20);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v23;
        _os_log_impl(&dword_1AD756000, v21, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v22)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1AD756000, v21, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1AD7BCF14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddState(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
  v2 = *(_QWORD **)(a1 + 8);
  v3 = fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2) & 0x2AFFFFFF0007;
  return v3;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetFinal(uint64_t a1, int a2, float a3)
{
  _QWORD *v6;
  float *v7;
  float v8;
  unint64_t v9;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  v7 = *(float **)(v6[8] + 8 * a2);
  v8 = *v7;
  *v7 = a3;
  v9 = (*(uint64_t (**)(_QWORD *))(*v6 + 24))(v6);
  result = fst::SetFinalProperties<fst::TropicalWeightTpl<float>>(v9, v8, a3);
  v6[1] = v6[1] & 4 | result;
  return result;
}

void sub_1AD7BD2C8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, __int128 buf)
{
  void *v17;
  NSObject *v18;
  _BOOL4 v19;
  uint64_t v20;

  if (a2)
  {
    fst::SymbolTable::~SymbolTable((fst::SymbolTable *)&a13);
    v17 = __cxa_begin_catch(a1);
    EarPmLogger();
    v18 = objc_claimAutoreleasedReturnValue();
    v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v19)
      {
        v20 = (*(uint64_t (**)(void *))(*(_QWORD *)v17 + 16))(v17);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v20;
        _os_log_impl(&dword_1AD756000, v18, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v19)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1AD756000, v18, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1AD7BD28CLL);
  }
  _Unwind_Resume(a1);
}

void fst::SymbolTable::~SymbolTable(fst::SymbolTable *this)
{
  uint64_t v1;
  int v2;
  void *v3;

  *(_QWORD *)this = &off_1E5D1AD68;
  v1 = *((_QWORD *)this + 1);
  v2 = *(_DWORD *)(v1 + 168) - 1;
  *(_DWORD *)(v1 + 168) = v2;
  if (!v2)
  {
    if (*(char *)(v1 + 223) < 0)
      operator delete(*(void **)(v1 + 200));
    if (*(char *)(v1 + 199) < 0)
      operator delete(*(void **)(v1 + 176));
    std::__tree<int>::destroy(v1 + 144, *(_QWORD **)(v1 + 152));
    v3 = *(void **)(v1 + 120);
    if (v3)
    {
      *(_QWORD *)(v1 + 128) = v3;
      operator delete(v3);
    }
    fst::internal::DenseSymbolMap::~DenseSymbolMap((fst::internal::DenseSymbolMap *)(v1 + 40));
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    MEMORY[0x1AF44D190](v1, 0x10B2C404FCE5648);
  }
}

{
  fst::SymbolTable::~SymbolTable(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 88);
}

float fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  return **(float **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return (uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 32)
                 - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 24)) >> 4;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 8);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 16);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::operator=(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  void *__p[2];
  char v6;
  char v7;

  if (FLAGS_fst_error_fatal)
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  else
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ImplToFst: Assignment operator disallowed", 41);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) |= 4uLL;
  return a1;
}

void sub_1AD7BD7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

fst::SymbolTable *fst::SymbolTable::SymbolTable(fst::SymbolTable *this)
{
  std::string *v2;
  void *__p[2];
  char v5;

  *(_QWORD *)this = &off_1E5D1AD68;
  v2 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, "<unspecified>");
  fst::SymbolTableImpl::SymbolTableImpl(v2, (__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  *((_QWORD *)this + 1) = v2;
  return this;
}

void sub_1AD7BD874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1AF44D190](v15, 0x10B2C404FCE5648);
  _Unwind_Resume(a1);
}

std::string *fst::SymbolTableImpl::SymbolTableImpl(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  fst::internal::DenseSymbolMap::DenseSymbolMap((fst::internal::DenseSymbolMap *)&this[1].__r_.__value_.__r.__words[2]);
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__l.__size_ = 0;
  this[6].__r_.__value_.__r.__words[2] = 0;
  this[6].__r_.__value_.__l.__size_ = 0;
  this[5].__r_.__value_.__r.__words[2] = 0;
  this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)&this[6].__r_.__value_.__l.__size_;
  LODWORD(this[7].__r_.__value_.__l.__data_) = 1;
  this[7].__r_.__value_.__s.__data_[4] = 0;
  *(_OWORD *)&this[7].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[8].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[8].__r_.__value_.__r.__words[2] = 0u;
  return this;
}

void sub_1AD7BD934(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::DataFeed,std::allocator<quasar::DataFeed>,quasar::DataFeedType,quasar::SystemConfig &,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0xB8uLL);
  result = std::__shared_ptr_emplace<quasar::DataFeed>::__shared_ptr_emplace[abi:ne180100]<quasar::DataFeedType,quasar::SystemConfig &,std::allocator<quasar::DataFeed>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD7BD99C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::DataFeed>::__shared_ptr_emplace[abi:ne180100]<quasar::DataFeedType,quasar::SystemConfig &,std::allocator<quasar::DataFeed>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D450B0;
  a1[1] = 0;
  quasar::DataFeed::DataFeed(a1 + 3);
  return a1;
}

void sub_1AD7BD9E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::DataFeed>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D450B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::DataFeed>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D450B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::DataFeed>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<quasar::DataFeed>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<quasar::DataFeed>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void **v3;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(a2 + 112);
  if (*(char *)(a2 + 111) < 0)
    operator delete(*(void **)(a2 + 88));
  v3 = (void **)(a2 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  v3 = (void **)a2;
  std::vector<quasar::DataFeedItem>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void quasar::DataFeed::~DataFeed(void **this)
{
  void **v2;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)(this + 14));
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  v2 = this + 6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  v2 = this;
  std::vector<quasar::DataFeedItem>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<void>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::vector<quasar::DataFeedItem>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 32;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v4 - 24), *((_QWORD **)v4 - 2));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__shared_ptr_pointer<quasar::TextTokenizer  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<quasar::TextTokenizer  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::TextTokenizer  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

uint64_t std::vector<quasar::DataFeed>::__push_back_slow_path<quasar::DataFeed>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 5);
  v4 = v3 + 1;
  if (v3 + 1 > 0x199999999999999)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 5) > v4)
    v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 5);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 5) >= 0xCCCCCCCCCCCCCCLL)
    v6 = 0x199999999999999;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::DataFeed>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[160 * v3];
  v13 = &v7[160 * v6];
  std::allocator<quasar::DataFeed>::construct[abi:ne180100]<quasar::DataFeed,quasar::DataFeed>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 160;
  std::vector<quasar::DataFeed>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<quasar::DataFeed>::~__split_buffer(&v10);
  return v8;
}

void sub_1AD7BDDA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::DataFeed>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<quasar::DataFeed>::construct[abi:ne180100]<quasar::DataFeed,quasar::DataFeed>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  uint64_t result;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v5 = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a3 + 40);
  *(_OWORD *)(a2 + 24) = v5;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a3 + 64);
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a3 + 72);
  v6 = *(_OWORD *)(a3 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(_OWORD *)(a2 + 88) = v6;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  result = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__hash_table(a2 + 112, (uint64_t *)(a3 + 112));
  *(_BYTE *)(a2 + 152) = *(_BYTE *)(a3 + 152);
  return result;
}

uint64_t std::vector<quasar::DataFeed>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::DataFeed>,std::reverse_iterator<quasar::DataFeed*>,std::reverse_iterator<quasar::DataFeed*>,std::reverse_iterator<quasar::DataFeed*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::DataFeed>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x19999999999999ALL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(160 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::DataFeed>,std::reverse_iterator<quasar::DataFeed*>,std::reverse_iterator<quasar::DataFeed*>,std::reverse_iterator<quasar::DataFeed*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 160;
      std::allocator<quasar::DataFeed>::construct[abi:ne180100]<quasar::DataFeed,quasar::DataFeed>(a1, v7 - 160, v9);
      v7 = *((_QWORD *)&v16 + 1) - 160;
      *((_QWORD *)&v16 + 1) -= 160;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DataFeed>,std::reverse_iterator<quasar::DataFeed*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DataFeed>,std::reverse_iterator<quasar::DataFeed*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DataFeed>,std::reverse_iterator<quasar::DataFeed*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DataFeed>,std::reverse_iterator<quasar::DataFeed*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<quasar::DataFeed>::destroy[abi:ne180100](v3, v1);
      v1 += 160;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::DataFeed>::~__split_buffer(void **a1)
{
  std::__split_buffer<quasar::DataFeed>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<quasar::DataFeed>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 160;
    std::allocator<quasar::DataFeed>::destroy[abi:ne180100](v4, i - 160);
  }
}

quasar::DataFeed *quasar::DataFeed::DataFeed(quasar::DataFeed *this, const quasar::DataFeed *a2)
{
  __int128 v4;
  __int128 v5;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  std::vector<quasar::DataFeedItem>::__init_with_size[abi:ne180100]<quasar::DataFeedItem*,quasar::DataFeedItem*>(this, *(_QWORD *)a2, *((_QWORD *)a2 + 1), (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 5);
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 24);
    *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)((char *)this + 24) = v4;
  }
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((__int128 **)a2 + 6), *((__int128 **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3));
  *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 88), *((const std::string::value_type **)a2 + 11), *((_QWORD *)a2 + 12));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 88);
    *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
    *(_OWORD *)((char *)this + 88) = v5;
  }
  std::unordered_map<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>::unordered_map((uint64_t)this + 112, (uint64_t)a2 + 112);
  *((_BYTE *)this + 152) = *((_BYTE *)a2 + 152);
  return this;
}

void sub_1AD7BE1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 47) < 0)
    operator delete(*v11);
  a10 = (void **)v10;
  std::vector<quasar::DataFeedItem>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<quasar::DataFeedItem>::__init_with_size[abi:ne180100]<quasar::DataFeedItem*,quasar::DataFeedItem*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::DataFeedItem>,quasar::DataFeedItem*,quasar::DataFeedItem*,quasar::DataFeedItem*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1AD7BE284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<quasar::DataFeedItem>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::DataFeedItem>,quasar::DataFeedItem*,quasar::DataFeedItem*,quasar::DataFeedItem*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_DWORD *)v4 = *(_DWORD *)v6;
      std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)(v4 + 8), (const void ***)(v6 + 8));
      v6 += 32;
      v4 = v11 + 32;
      v11 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DataFeedItem>,quasar::DataFeedItem*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1AD7BE338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DataFeedItem>,quasar::DataFeedItem*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::string>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::string>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::string>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1AD7BE388(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::string>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1AD7BE508(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_1AD7BE598(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DataFeedItem>,quasar::DataFeedItem*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DataFeedItem>,quasar::DataFeedItem*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DataFeedItem>,quasar::DataFeedItem*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    do
    {
      v3 = v1 - 32;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1 - 24, *(_QWORD **)(v1 - 16));
      v1 = v3;
    }
    while (v3 != v2);
  }
}

uint64_t std::unordered_map<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<quasar::PMRegexEnumerator>> const&>(a1, i + 16, (__int128 *)i + 1);
  return a1;
}

void sub_1AD7BE68C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<quasar::PMRegexEnumerator>> const&>(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<quasar::PMRegexEnumerator>> const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1AD7BE90C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<quasar::PMRegexEnumerator>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,std::shared_ptr<quasar::PMRegexEnumerator>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1AD7BE980(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::shared_ptr<quasar::PMRegexEnumerator>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string::size_type v5;
  unint64_t *v6;
  unint64_t v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *((_QWORD *)a2 + 4);
  this[1].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 3);
  this[1].__r_.__value_.__l.__size_ = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return this;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<void>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void std::vector<quasar::DataFeed>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 160;
        std::allocator<quasar::DataFeed>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::PMBuilder,std::allocator<quasar::PMBuilder>,std::string,std::shared_ptr<quasar::TextTokenizer> &,std::vector<quasar::DataFeed> &,void>@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x258uLL);
  result = std::__shared_ptr_emplace<quasar::PMBuilder>::__shared_ptr_emplace[abi:ne180100]<std::string,std::shared_ptr<quasar::TextTokenizer> &,std::vector<quasar::DataFeed> &,std::allocator<quasar::PMBuilder>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1AD7BEB28(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::PMBuilder>::__shared_ptr_emplace[abi:ne180100]<std::string,std::shared_ptr<quasar::TextTokenizer> &,std::vector<quasar::DataFeed> &,std::allocator<quasar::PMBuilder>,0>(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  char v6;

  a1[2] = 0;
  *a1 = &unk_1E5D453F8;
  a1[1] = 0;
  std::allocator<quasar::PMBuilder>::construct[abi:ne180100]<quasar::PMBuilder,std::string,std::shared_ptr<quasar::TextTokenizer> &,std::vector<quasar::DataFeed> &>((uint64_t)&v6, (uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_1AD7BEB90(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::PMBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D453F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::PMBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D453F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::PMBuilder>::__on_zero_shared(uint64_t a1)
{
  quasar::PMBuilder::~PMBuilder((quasar::PMBuilder *)(a1 + 24));
}

void std::allocator<quasar::PMBuilder>::construct[abi:ne180100]<quasar::PMBuilder,std::string,std::shared_ptr<quasar::TextTokenizer> &,std::vector<quasar::DataFeed> &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v5 = (std::__shared_weak_count *)a4[1];
  v11 = *a4;
  v12 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  quasar::PMBuilder::PMBuilder(a2, a3, &v11, a5);
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1AD7BEC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void quasar::PMBuilder::~PMBuilder(quasar::PMBuilder *this)
{
  _DWORD *v2;
  int v3;
  _DWORD *v4;
  int v5;
  _DWORD *v6;
  int v7;
  void **v8;

  std::__tree<std::string>::destroy((uint64_t)this + 552, *((char **)this + 70));
  if (*((char *)this + 551) < 0)
    operator delete(*((void **)this + 66));
  if (*((char *)this + 527) < 0)
    operator delete(*((void **)this + 63));
  if (*((char *)this + 503) < 0)
    operator delete(*((void **)this + 60));
  if (*((char *)this + 479) < 0)
    operator delete(*((void **)this + 57));
  if (*((char *)this + 455) < 0)
    operator delete(*((void **)this + 54));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 408);
  if (*((char *)this + 407) < 0)
    operator delete(*((void **)this + 48));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 368);
  v8 = (void **)((char *)this + 344);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)((char *)this + 320);
  std::vector<quasar::RegexReplacementRule>::__destroy_vector::operator()[abi:ne180100](&v8);
  if (*((char *)this + 319) < 0)
    operator delete(*((void **)this + 37));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 280);
  if (*((char *)this + 279) < 0)
    operator delete(*((void **)this + 32));
  if (*((char *)this + 255) < 0)
    operator delete(*((void **)this + 29));
  if (*((char *)this + 231) < 0)
    operator delete(*((void **)this + 26));
  v8 = (void **)((char *)this + 184);
  std::vector<quasar::DataFeed>::__destroy_vector::operator()[abi:ne180100](&v8);
  std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::~__hash_table((uint64_t)this + 144);
  fst::SymbolTable::~SymbolTable((quasar::PMBuilder *)((char *)this + 128));
  fst::SymbolTable::~SymbolTable((quasar::PMBuilder *)((char *)this + 112));
  fst::SymbolTable::~SymbolTable((quasar::PMBuilder *)((char *)this + 96));
  *((_QWORD *)this + 10) = &unk_1E5D256C0;
  v2 = (_DWORD *)*((_QWORD *)this + 11);
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  *((_QWORD *)this + 8) = &unk_1E5D256C0;
  v4 = (_DWORD *)*((_QWORD *)this + 9);
  if (v4)
  {
    v5 = v4[14] - 1;
    v4[14] = v5;
    if (!v5)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  }
  v8 = (void **)((char *)this + 40);
  std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  *((_QWORD *)this + 3) = &unk_1E5D256C0;
  v6 = (_DWORD *)*((_QWORD *)this + 4);
  if (v6)
  {
    v7 = v6[14] - 1;
    v6[14] = v7;
    if (!v7)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
  }
  v8 = (void **)this;
  std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100](&v8);
}

void std::vector<quasar::RegexReplacementRule>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        std::allocator<quasar::RegexReplacementRule>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::RegexReplacementRule>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 87) < 0)
    operator delete(*(void **)(a2 + 64));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2 + 40);
  std::locale::~locale((std::locale *)a2);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::SpokenFormSection>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::SpokenFormSection>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 48);
  std::vector<quasar::SpokenFormLine>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::vector<quasar::SpokenFormLine>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 112;
        std::allocator<quasar::SpokenFormLine>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::SpokenFormLine>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void **v3;

  v3 = (void **)(a2 + 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 87) < 0)
    operator delete(*(void **)(a2 + 64));
  if (*(char *)(a2 + 55) < 0)
    operator delete(*(void **)(a2 + 32));
  if (*(char *)(a2 + 31) < 0)
    operator delete(*(void **)(a2 + 8));
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::PMBuilder,std::allocator<quasar::PMBuilder>,std::string,std::shared_ptr<quasar::TextTokenizer> &,std::string,void>@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x258uLL);
  result = std::__shared_ptr_emplace<quasar::PMBuilder>::__shared_ptr_emplace[abi:ne180100]<std::string,std::shared_ptr<quasar::TextTokenizer> &,std::string,std::allocator<quasar::PMBuilder>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1AD7BF14C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::PMBuilder>::__shared_ptr_emplace[abi:ne180100]<std::string,std::shared_ptr<quasar::TextTokenizer> &,std::string,std::allocator<quasar::PMBuilder>,0>(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  char v6;

  a1[2] = 0;
  *a1 = &unk_1E5D453F8;
  a1[1] = 0;
  std::allocator<quasar::PMBuilder>::construct[abi:ne180100]<quasar::PMBuilder,std::string,std::shared_ptr<quasar::TextTokenizer> &,std::string>((uint64_t)&v6, (uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_1AD7BF1B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::PMBuilder>::construct[abi:ne180100]<quasar::PMBuilder,std::string,std::shared_ptr<quasar::TextTokenizer> &,std::string>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v5 = (std::__shared_weak_count *)a4[1];
  v11 = *a4;
  v12 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  quasar::PMBuilder::PMBuilder(a2, a3, &v11, a5);
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1AD7BF258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WriteFile(fst *a1, uint64_t a2)
{
  fst *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  const std::string::value_type *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  std::string __p;
  __int16 v16;
  char v17;
  char v18;
  char v19;
  std::string v20;
  __int16 v21;
  char v22;
  char v23;
  _BYTE v24[384];
  _QWORD v25[20];

  v25[19] = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(_QWORD *)(a2 + 8))
    {
LABEL_5:
      std::ofstream::basic_ofstream(&v20);
      if ((v24[*(_QWORD *)(v20.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        v4 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
        v5 = (_QWORD *)fst::cerr(v4);
        v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fst::Write: Can't open file: ", 29);
        v7 = *(char *)(a2 + 23);
        if (v7 >= 0)
          v8 = (const std::string::value_type *)a2;
        else
          v8 = *(const std::string::value_type **)a2;
        if (v7 >= 0)
          v9 = *(unsigned __int8 *)(a2 + 23);
        else
          v9 = *(_QWORD *)(a2 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v10 = 0;
      }
      else
      {
        v13 = FLAGS_fst_align;
        if (*(char *)(a2 + 23) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          __p = *(std::string *)a2;
        v16 = 257;
        v17 = 1;
        v18 = v13;
        v10 = (*(uint64_t (**)(fst *, std::string *, std::string *))(*(_QWORD *)a1 + 96))(a1, &v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v20.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F48];
      *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words
                                + *(_QWORD *)(v20.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48]
                                                                                                  + 24);
      MEMORY[0x1AF44CA70](&v20.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x1AF44D094](v25);
      return v10;
    }
  }
  else if (*(_BYTE *)(a2 + 23))
  {
    goto LABEL_5;
  }
  v11 = fst::cout(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  v12 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v20 = __p;
  v21 = 257;
  v22 = 1;
  v23 = v12;
  v10 = (*(uint64_t (**)(fst *, uint64_t, std::string *))(*(_QWORD *)a1 + 96))(a1, v11, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v10;
}

void sub_1AD7BF4D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::ofstream::~ofstream(&a21);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  _QWORD **v2;
  unint64_t v3;

  *a1 = &unk_1E5D1FD20;
  v2 = (_QWORD **)a1[9];
  if (v2 != (_QWORD **)a1[8])
  {
    v3 = 0;
    v2 = (_QWORD **)a1[8];
    do
    {
      fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Destroy(v2[v3++]);
      v2 = (_QWORD **)a1[8];
    }
    while (v3 < (uint64_t)(a1[9] - (_QWORD)v2) >> 3);
  }
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
}

void fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~VectorFstImpl(_QWORD *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Properties(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) & a2;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

void fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E5D227F0;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  if (*(int *)(*(_QWORD *)(result + 8) + 56) >= 2)
  {
    v1 = result;
    v2 = operator new();
    fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFstImpl(v2, v1);
    result = *(_QWORD *)(v1 + 8);
    if (result)
    {
      v3 = *(_DWORD *)(result + 56) - 1;
      *(_DWORD *)(result + 56) = v3;
      if (!v3)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    *(_QWORD *)(v1 + 8) = v2;
  }
  return result;
}

void sub_1AD7BF744(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  std::string __p;
  _DWORD *v19;
  std::string::size_type v20;
  uint64_t v21;
  int v22;
  unsigned int v23;

  *(_QWORD *)a1 = &unk_1E5D227F0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  v5 = (uint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 64) = 0;
  v6 = (_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)a1 = &unk_1E5D1CF20;
  std::string::basic_string[abi:ne180100]<0>(&__p, "vector");
  std::string::operator=(v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v8 = *v5;
  if (*v5 != v7)
  {
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v7)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    else
      v9 = 0;
    *v5 = v9;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v11 = *(_QWORD *)(a1 + 48);
  if (v11 != v10)
  {
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (v10)
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    else
      v12 = 0;
    *(_QWORD *)(a1 + 48) = v12;
  }
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 1, 0))
  {
    v13 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2);
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 64), v13);
  }
  v23 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v21);
  while (1)
  {
    if (!v21)
    {
      if ((int)v23 >= v22)
        goto LABEL_45;
LABEL_25:
      v14 = v23;
      goto LABEL_26;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21))
      break;
    if (!v21)
      goto LABEL_25;
    v14 = (*(uint64_t (**)(void))(*(_QWORD *)v21 + 24))();
LABEL_26:
    fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddState((_QWORD *)a1);
    **(float **)(*v6 + 8 * (int)v14) = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v14);
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v14);
    std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::reserve((void **)(*(_QWORD *)(*v6 + 8 * (int)v14) + 24), v15);
    v20 = 0;
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)a2 + 136))(a2, v14, &__p);
    while (1)
    {
      if (!__p.__r_.__value_.__r.__words[0])
      {
        if (v20 >= __p.__r_.__value_.__r.__words[2])
          goto LABEL_38;
LABEL_32:
        v16 = (_DWORD *)(__p.__r_.__value_.__l.__size_ + 16 * v20);
        goto LABEL_33;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 24))(__p.__r_.__value_.__r.__words[0]))
        break;
      if (!__p.__r_.__value_.__r.__words[0])
        goto LABEL_32;
      v16 = (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 32))();
LABEL_33:
      fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddArc(*(_QWORD **)(*v6 + 8 * (int)v14), v16);
      if (__p.__r_.__value_.__r.__words[0])
        (*(void (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 40))(__p.__r_.__value_.__r.__words[0]);
      else
        ++v20;
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_40;
    }
LABEL_38:
    if (v19)
      --*v19;
LABEL_40:
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 32))(v21);
    else
      ++v23;
  }
  if (v21)
    (*(void (**)(void))(*(_QWORD *)v21 + 8))();
LABEL_45:
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0004, 0) | *(_QWORD *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_1AD7BFAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  _QWORD *v17;

  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~VectorFstBaseImpl(v17);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddState(_QWORD *a1)
{
  char *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v2 = (char *)operator new(0x30uLL);
  v3 = a1[10];
  *(_DWORD *)v2 = 2139095040;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((_QWORD *)v2 + 5) = 0;
  v4 = (_QWORD *)a1[9];
  if ((unint64_t)v4 >= v3)
  {
    v6 = a1[8];
    v7 = ((uint64_t)v4 - v6) >> 3;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v8 = v3 - v6;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    if (v10)
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 10), v10);
    else
      v11 = 0;
    v12 = &v11[8 * v7];
    v13 = &v11[8 * v10];
    *(_QWORD *)v12 = v2;
    v5 = v12 + 8;
    v15 = (char *)a1[8];
    v14 = (char *)a1[9];
    if (v14 != v15)
    {
      do
      {
        v16 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *((_QWORD *)v12 - 1) = v16;
        v12 -= 8;
      }
      while (v14 != v15);
      v14 = (char *)a1[8];
    }
    a1[8] = v12;
    a1[9] = v5;
    a1[10] = v13;
    if (v14)
      operator delete(v14);
  }
  else
  {
    *v4 = v2;
    v5 = v4 + 1;
  }
  a1[9] = v5;
  return (((unint64_t)v5 - a1[8]) >> 3) - 1;
}

void fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddArc(_QWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;

  if (!*a2)
    ++a1[1];
  if (!a2[1])
    ++a1[2];
  v4 = (uint64_t)(a1 + 5);
  v5 = a1[5];
  v6 = (_OWORD *)a1[4];
  if ((unint64_t)v6 >= v5)
  {
    v8 = a1[3];
    v9 = ((uint64_t)v6 - v8) >> 4;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v5 - v8;
    if (v11 >> 3 > v10)
      v10 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v9];
    v15 = &v13[16 * v12];
    *(_OWORD *)v14 = *(_OWORD *)a2;
    v7 = v14 + 16;
    v17 = (char *)a1[3];
    v16 = (char *)a1[4];
    if (v16 != v17)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v16 - 1);
        v14 -= 16;
        v16 -= 16;
      }
      while (v16 != v17);
      v16 = (char *)a1[3];
    }
    a1[3] = v14;
    a1[4] = v7;
    a1[5] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = *(_OWORD *)a2;
    v7 = v6 + 1;
  }
  a1[4] = v7;
}

uint64_t fst::SetFinalProperties<fst::TropicalWeightTpl<float>>(unint64_t a1, float a2, float a3)
{
  if (a2 != INFINITY && a2 != 0.0)
    a1 &= ~0x100000000uLL;
  if (a3 != INFINITY && a3 != 0.0)
    a1 = a1 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  return a1 & 0x3FFFFFF0007;
}

void fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(_QWORD *a1, int a2, float *a3)
{
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;

  v6 = *(_QWORD *)(*(_QWORD *)(a1[8] + 8 * a2) + 32);
  if (v6 == *(_QWORD *)(*(_QWORD *)(a1[8] + 8 * a2) + 24))
    v7 = 0;
  else
    v7 = (_DWORD *)(v6 - 16);
  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | fst::AddArcProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(v8, a2, a3, v7);
  fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddArc(*(_QWORD **)(a1[8] + 8 * a2), a3);
}

uint64_t fst::AddArcProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(unint64_t a1, int a2, float *a3, _DWORD *a4)
{
  float v4;
  int v5;
  unint64_t v6;
  unint64_t v7;

  v4 = *a3;
  v5 = *((_DWORD *)a3 + 1);
  v6 = a1 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (*(_DWORD *)a3 == v5)
    v6 = a1;
  v7 = v6 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
  if (!v5)
    v7 = v6 & 0xFFFFFFFFFC3FFFFFLL | 0x1400000;
  if (v4 == 0.0)
    v6 = v7;
  if (!v5)
    v6 = v6 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
  if (a4)
  {
    if (*a4 > SLODWORD(v4))
      v6 = v6 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
    if (a4[1] > v5)
      v6 = v6 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
  }
  if (a3[2] != INFINITY && a3[2] != 0.0)
    v6 = v6 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  if (*((_DWORD *)a3 + 3) <= a2)
    v6 = v6 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
  if ((v6 & 0x4000000000) != 0)
    return v6 & 0x5D7FFEB0007 | 0x2800000000;
  else
    return v6 & 0x5D7FFEB0007;
}

uint64_t TVertex::getInEdge(uint64_t this)
{
  do
    this = *(_QWORD *)this;
  while (this && *(_BYTE *)(this + 32));
  return this;
}

uint64_t TVertex::getInEdgeCount(uint64_t **this)
{
  uint64_t *v1;
  uint64_t result;

  v1 = *this;
  if (!*this)
    return 0;
  while (*((_BYTE *)v1 + 32))
  {
    v1 = (uint64_t *)*v1;
    if (!v1)
      return 0;
  }
  result = 0;
LABEL_7:
  ++result;
  while (1)
  {
    v1 = (uint64_t *)*v1;
    if (!v1)
      return result;
    if (!*((_BYTE *)v1 + 32))
      goto LABEL_7;
  }
}

uint64_t TVertex::getOutEdge(uint64_t this)
{
  do
    this = *(_QWORD *)(this + 8);
  while (this && *(_BYTE *)(this + 32));
  return this;
}

uint64_t TVertex::getOutEdgeCount(TVertex *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  while (*(_BYTE *)(v1 + 32))
  {
    v1 = *(_QWORD *)(v1 + 8);
    if (!v1)
      return 0;
  }
  result = 0;
LABEL_7:
  ++result;
  while (1)
  {
    v1 = *(_QWORD *)(v1 + 8);
    if (!v1)
      return result;
    if (!*(_BYTE *)(v1 + 32))
      goto LABEL_7;
  }
}

void TGraph::TGraph(TGraph *this, char *a2, TSegmenter *a3, char a4)
{
  *(_QWORD *)this = a3;
  *((_BYTE *)this + 8) = a4;
  TAllocator::TAllocator((TGraph *)((char *)this + 16), 2048);
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 18) = 0;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_QWORD *)this + 7) = a2;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 8) = TGraph::addVertex(this, a2);
}

void sub_1AD7C00F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  TAllocator *v2;
  void **v3;
  void **v4;
  void *v6;

  v6 = *(void **)(v1 + 128);
  if (v6)
  {
    *(_QWORD *)(v1 + 136) = v6;
    operator delete(v6);
  }
  TGraph::TGraph(v4, v3, v1);
  TAllocator::clear(v2);
  _Unwind_Resume(a1);
}

_QWORD *TGraph::addVertex(TGraph *this, char *a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t Segment;
  char *v8;
  uint64_t v9;
  char **v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  char **v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  int v28;
  unsigned __int8 v29;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  TLocaleInfo *v44;

  if (a2)
  {
    v4 = (unint64_t)&a2[-*((_QWORD *)this + 7)];
    v5 = *((_QWORD *)this + 16);
    if (v4 < (*((_QWORD *)this + 17) - v5) >> 3)
    {
      v6 = *(_QWORD **)(v5 + 8 * v4);
      if (v6)
      {
        *((_BYTE *)v6 + 32) = 0;
        return v6;
      }
    }
    Segment = TSegmenter::getSegment(*(TSegmenter **)this, a2);
    v8 = a2;
    if (!Segment || (v9 = Segment, v8 = a2, *(_DWORD *)(Segment + 24)))
    {
LABEL_7:
      v6 = TAllocator::allocate((TGraph *)((char *)this + 16), 48);
      v10 = (char **)((char *)this + 80);
      v6[5] = (uint64_t)(*((_QWORD *)this + 11) - *((_QWORD *)this + 10)) >> 3;
      v6[2] = v8;
      v6[3] = a2;
      *((_BYTE *)v6 + 32) = 0;
      *v6 = 0;
      v6[1] = 0;
      v11 = (_QWORD *)*((_QWORD *)this + 11);
      v12 = *((_QWORD *)this + 12);
      if ((unint64_t)v11 >= v12)
      {
        v18 = ((char *)v11 - *v10) >> 3;
        if ((unint64_t)(v18 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v19 = v12 - (_QWORD)*v10;
        v20 = v19 >> 2;
        if (v19 >> 2 <= (unint64_t)(v18 + 1))
          v20 = v18 + 1;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
          v21 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v21 = v20;
        if (v21)
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)this + 96, v21);
        else
          v22 = 0;
        v32 = &v22[8 * v18];
        v33 = &v22[8 * v21];
        *(_QWORD *)v32 = v6;
        v13 = v32 + 8;
        v35 = (char *)*((_QWORD *)this + 10);
        v34 = (char *)*((_QWORD *)this + 11);
        if (v34 != v35)
        {
          do
          {
            v36 = *((_QWORD *)v34 - 1);
            v34 -= 8;
            *((_QWORD *)v32 - 1) = v36;
            v32 -= 8;
          }
          while (v34 != v35);
          v34 = *v10;
        }
        *((_QWORD *)this + 10) = v32;
        *((_QWORD *)this + 11) = v13;
        *((_QWORD *)this + 12) = v33;
        if (v34)
          operator delete(v34);
      }
      else
      {
        *v11 = v6;
        v13 = v11 + 1;
      }
      *((_QWORD *)this + 11) = v13;
      TGraph::setMap(this, (TVertex *)v6);
      v37 = *((_QWORD *)this + 9);
      if (!v37 || *(_QWORD *)(v37 + 24) < (unint64_t)a2)
        *((_QWORD *)this + 9) = v6;
      return v6;
    }
    v8 = a2;
    while (1)
    {
      v28 = **(_DWORD **)v9;
      if ((v29 & 1) == 0
      {
        v44 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v44);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v44;
      }
      if (v28 <= 8202)
      {
        if (v28 != 32 && v28 != 160)
          goto LABEL_38;
      }
      else if (v28 != 8203 && v28 != 12288 && v28 != 65279)
      {
LABEL_38:
        if (*((_BYTE *)this + 8))
          goto LABEL_7;
      }
      v8 = *(char **)(v9 + 8);
      v31 = TSegmenter::getSegment(*(TSegmenter **)this, v8);
      if (v31)
      {
        v9 = v31;
        if (!*(_DWORD *)(v31 + 24))
          continue;
      }
      goto LABEL_7;
    }
  }
  v6 = TAllocator::allocate((TGraph *)((char *)this + 16), 48);
  v14 = (char **)((char *)this + 80);
  v6[5] = (uint64_t)(*((_QWORD *)this + 11) - *((_QWORD *)this + 10)) >> 3;
  *(_OWORD *)v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  *((_BYTE *)v6 + 32) = 0;
  v15 = (_QWORD *)*((_QWORD *)this + 11);
  v16 = *((_QWORD *)this + 12);
  if ((unint64_t)v15 >= v16)
  {
    v23 = ((char *)v15 - *v14) >> 3;
    if ((unint64_t)(v23 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v24 = v16 - (_QWORD)*v14;
    v25 = v24 >> 2;
    if (v24 >> 2 <= (unint64_t)(v23 + 1))
      v25 = v23 + 1;
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
      v26 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v26 = v25;
    if (v26)
      v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)this + 96, v26);
    else
      v27 = 0;
    v38 = &v27[8 * v23];
    v39 = &v27[8 * v26];
    *(_QWORD *)v38 = v6;
    v17 = v38 + 8;
    v41 = (char *)*((_QWORD *)this + 10);
    v40 = (char *)*((_QWORD *)this + 11);
    if (v40 != v41)
    {
      do
      {
        v42 = *((_QWORD *)v40 - 1);
        v40 -= 8;
        *((_QWORD *)v38 - 1) = v42;
        v38 -= 8;
      }
      while (v40 != v41);
      v40 = *v14;
    }
    *((_QWORD *)this + 10) = v38;
    *((_QWORD *)this + 11) = v17;
    *((_QWORD *)this + 12) = v39;
    if (v40)
      operator delete(v40);
  }
  else
  {
    *v15 = v6;
    v17 = v15 + 1;
  }
  *((_QWORD *)this + 11) = v17;
  return v6;
}

void sub_1AD7C0484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  MEMORY[0x1AF44D190](a10, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

void TGraph::~TGraph(TGraph *this)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 16);
  if (v2)
  {
    *((_QWORD *)this + 17) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 13);
  if (v3)
  {
    *((_QWORD *)this + 14) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 10);
  if (v4)
  {
    *((_QWORD *)this + 11) = v4;
    operator delete(v4);
  }
  TAllocator::clear((TGraph *)((char *)this + 16));
}

uint64_t TGraph::getVertex(TGraph *this, const char *a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = (unint64_t)&a2[-*((_QWORD *)this + 7)];
  v3 = *((_QWORD *)this + 16);
  if (v2 >= (*((_QWORD *)this + 17) - v3) >> 3)
    return 0;
  else
    return *(_QWORD *)(v3 + 8 * v2);
}

void TGraph::setMap(TGraph *this, TVertex *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = (uint64_t *)((char *)this + 128);
  v3 = *((_QWORD *)this + 16);
  v5 = *((_QWORD *)a2 + 3) - *((_QWORD *)this + 7);
  if (v5 >= (*((_QWORD *)this + 17) - v3) >> 3)
  {
    if (2 * v5 <= 0x100)
      v6 = 256;
    else
      v6 = 2 * v5;
    v7 = 0;
    std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize((uint64_t)this + 128, v6, &v7);
    v3 = *v4;
  }
  *(_QWORD *)(v3 + 8 * v5) = a2;
}

void TGraph::deleteVertex(TGraph *this, TVertex *a2)
{
  uint64_t v2;
  uint64_t *v3;

  v2 = *((_QWORD *)a2 + 1);
  if (v2)
  {
    while (*(_BYTE *)(v2 + 32))
    {
      v2 = *(_QWORD *)(v2 + 8);
      if (!v2)
        goto LABEL_4;
    }
LABEL_8:
    *(_BYTE *)(v2 + 32) = 1;
    while (1)
    {
      v2 = *(_QWORD *)(v2 + 8);
      if (!v2)
        break;
      if (!*(_BYTE *)(v2 + 32))
        goto LABEL_8;
    }
  }
LABEL_4:
  v3 = *(uint64_t **)a2;
  if (*(_QWORD *)a2)
  {
    while (*((_BYTE *)v3 + 32))
    {
      v3 = (uint64_t *)*v3;
      if (!v3)
        goto LABEL_7;
    }
LABEL_12:
    *((_BYTE *)v3 + 32) = 1;
    while (1)
    {
      v3 = (uint64_t *)*v3;
      if (!v3)
        break;
      if (!*((_BYTE *)v3 + 32))
        goto LABEL_12;
    }
  }
LABEL_7:
  *((_BYTE *)a2 + 32) = 1;
}

void TGraph::deleteEdge(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 32) = 1;
}

uint64_t TGraph::getNextVertex(TGraph *this, unint64_t a2)
{
  unint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t *i;

  v2 = *((_QWORD *)this + 7);
  if (v2 > a2)
    return *((_QWORD *)this + 8);
  v4 = *(_QWORD *)(*((_QWORD *)this + 9) + 24);
  if (v4 < a2)
    return 0;
  for (i = (uint64_t *)(*((_QWORD *)this + 16) - 8 * v2 + 8 * a2); ; ++i)
  {
    result = *i;
    if (*i)
      break;
    if (++a2 > v4)
      return 0;
  }
  return result;
}

uint64_t TGraph::getPrevVertex(TGraph *this, unint64_t a2)
{
  unint64_t v2;
  uint64_t result;
  uint64_t *i;

  v2 = *((_QWORD *)this + 7);
  if (v2 > a2)
    return 0;
  result = *((_QWORD *)this + 9);
  if (*(_QWORD *)(result + 24) >= a2)
  {
    for (i = (uint64_t *)(*((_QWORD *)this + 16) - 8 * v2 + 8 * a2); ; --i)
    {
      result = *i;
      if (*i)
        break;
      if (--a2 < v2)
        return 0;
    }
  }
  return result;
}

_QWORD *TGraph::addEdge(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *i;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  int v14;
  char **v15;
  uint64_t v16;
  __int128 v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;

  v9 = (_QWORD *)(a2 + 8);
  for (i = *(_QWORD **)(a2 + 8); i; i = (_QWORD *)i[1])
  {
    if (!*((_BYTE *)i + 32))
      break;
  }
  if (*(_DWORD *)a4 != 5)
  {
    v10 = 0;
    if (!i || *(_DWORD *)a4 == 2)
      goto LABEL_22;
    v10 = 0;
LABEL_9:
    v11 = i;
    v12 = *((_DWORD *)i + 12);
    if (v12 != 2 && v12 != 5)
    {
      v14 = wcscmp(**(const __int32 ***)(a4 + 8), *(const __int32 **)v11[7]);
      if (v14 < 0)
        goto LABEL_22;
      if (!v14 && (_QWORD *)v11[3] == a3 && *(unsigned __int8 *)(a4 + 24) == *((unsigned __int8 *)v11 + 72))
        return v11;
    }
    i = v11;
    while (1)
    {
      i = (_QWORD *)i[1];
      if (!i)
        break;
      if (!*((_BYTE *)i + 32))
      {
        v10 = v11;
        goto LABEL_9;
      }
    }
    v10 = v11;
    goto LABEL_22;
  }
  v10 = 0;
LABEL_22:
  v11 = TAllocator::allocate((TAllocator *)(a1 + 2), 80);
  v15 = (char **)(a1 + 13);
  v16 = (uint64_t)(a1[14] - a1[13]) >> 3;
  *((_DWORD *)v11 + 12) = 3;
  v11[7] = 0;
  v11[8] = 0;
  *((_BYTE *)v11 + 72) = 0;
  v11[5] = v16;
  v11[2] = a2;
  v11[3] = a3;
  *((_BYTE *)v11 + 32) = 0;
  *v11 = 0;
  v11[1] = 0;
  v17 = *(_OWORD *)(a4 + 16);
  *((_OWORD *)v11 + 3) = *(_OWORD *)a4;
  *((_OWORD *)v11 + 4) = v17;
  v18 = (_QWORD *)a1[14];
  v19 = a1[15];
  if ((unint64_t)v18 >= v19)
  {
    v21 = ((char *)v18 - *v15) >> 3;
    if ((unint64_t)(v21 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v22 = v19 - (_QWORD)*v15;
    v23 = v22 >> 2;
    if (v22 >> 2 <= (unint64_t)(v21 + 1))
      v23 = v21 + 1;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
      v24 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v24 = v23;
    if (v24)
      v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 15), v24);
    else
      v25 = 0;
    v26 = &v25[8 * v21];
    v27 = &v25[8 * v24];
    *(_QWORD *)v26 = v11;
    v20 = v26 + 8;
    v29 = (char *)a1[13];
    v28 = (char *)a1[14];
    if (v28 != v29)
    {
      do
      {
        v30 = *((_QWORD *)v28 - 1);
        v28 -= 8;
        *((_QWORD *)v26 - 1) = v30;
        v26 -= 8;
      }
      while (v28 != v29);
      v28 = *v15;
    }
    a1[13] = v26;
    a1[14] = v20;
    a1[15] = v27;
    if (v28)
      operator delete(v28);
  }
  else
  {
    *v18 = v11;
    v20 = v18 + 1;
  }
  a1[14] = v20;
  v31 = v10 + 1;
  if (!v10)
    v31 = v9;
  v11[1] = *v31;
  *v31 = v11;
  *v11 = *a3;
  *a3 = v11;
  return v11;
}

void TGraph::topologicalSort(_QWORD *a1, void **a2, uint64_t a3)
{
  uint64_t ***v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  void *__p[3];

  std::vector<unsigned long>::vector(__p, (uint64_t)(a1[11] - a1[10]) >> 3);
  v6 = (uint64_t ***)a1[10];
  v7 = 0;
  v8 = a1[11] - (_QWORD)v6;
  if (v8)
  {
    v9 = v8 >> 3;
    v10 = (uint64_t *)__p[0];
    if (v9 <= 1)
      v11 = 1;
    else
      v11 = v9;
    do
    {
      if (!*((_BYTE *)*v6 + 32))
      {
        ++v7;
        *v10 = TVertex::getInEdgeCount(*v6);
      }
      ++v6;
      ++v10;
      --v11;
    }
    while (v11);
  }
  a2[1] = *a2;
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve(a2, v7);
  v12 = (unint64_t)a2[2];
  v13 = (char *)a2[1];
  if ((unint64_t)v13 >= v12)
  {
    v15 = (v13 - (_BYTE *)*a2) >> 3;
    if ((unint64_t)(v15 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v16 = v12 - (_QWORD)*a2;
    v17 = v16 >> 2;
    if (v16 >> 2 <= (unint64_t)(v15 + 1))
      v17 = v15 + 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v17;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a2 + 2), v18);
    else
      v19 = 0;
    v20 = &v19[8 * v15];
    v21 = &v19[8 * v18];
    *(_QWORD *)v20 = a1[8];
    v14 = v20 + 8;
    v23 = (char *)*a2;
    v22 = (char *)a2[1];
    if (v22 != *a2)
    {
      do
      {
        v24 = *((_QWORD *)v22 - 1);
        v22 -= 8;
        *((_QWORD *)v20 - 1) = v24;
        v20 -= 8;
      }
      while (v22 != v23);
      v22 = (char *)*a2;
    }
    *a2 = v20;
    a2[1] = v14;
    a2[2] = v21;
    if (v22)
      operator delete(v22);
  }
  else
  {
    *(_QWORD *)v13 = a1[8];
    v14 = v13 + 8;
  }
  a2[1] = v14;
  v25 = *a2;
  if (v14 != *a2)
  {
    v26 = 0;
    do
    {
      v27 = v25[v26];
      if (a3)
        (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a3 + 24))(a3, v27, a1);
      while (1)
      {
        v27 = *(_QWORD *)(v27 + 8);
        if (!v27)
          break;
        if (!*(_BYTE *)(v27 + 32))
        {
LABEL_47:
          if (a3)
            (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a3 + 16))(a3, v27, a1);
          v37 = *(_QWORD *)(v27 + 24);
          v38 = __p[0];
          --*((_QWORD *)__p[0] + *(_QWORD *)(v37 + 40));
          if (!v38[*(_QWORD *)(v37 + 40)])
          {
            v40 = (char *)a2[1];
            v39 = (unint64_t)a2[2];
            if ((unint64_t)v40 >= v39)
            {
              v41 = (v40 - (_BYTE *)*a2) >> 3;
              if ((unint64_t)(v41 + 1) >> 61)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v28 = v39 - (_QWORD)*a2;
              v29 = v28 >> 2;
              if (v28 >> 2 <= (unint64_t)(v41 + 1))
                v29 = v41 + 1;
              if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
                v30 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v30 = v29;
              if (v30)
                v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a2 + 2), v30);
              else
                v31 = 0;
              v32 = &v31[8 * v41];
              *(_QWORD *)v32 = v37;
              v33 = v32 + 8;
              v35 = (char *)*a2;
              v34 = (char *)a2[1];
              if (v34 != *a2)
              {
                do
                {
                  v36 = *((_QWORD *)v34 - 1);
                  v34 -= 8;
                  *((_QWORD *)v32 - 1) = v36;
                  v32 -= 8;
                }
                while (v34 != v35);
                v34 = (char *)*a2;
              }
              *a2 = v32;
              a2[1] = v33;
              a2[2] = &v31[8 * v30];
              if (v34)
                operator delete(v34);
            }
            else
            {
              *(_QWORD *)v40 = v37;
              v33 = v40 + 8;
            }
            a2[1] = v33;
          }
          while (1)
          {
            v27 = *(_QWORD *)(v27 + 8);
            if (!v27)
              goto LABEL_54;
            if (!*(_BYTE *)(v27 + 32))
              goto LABEL_47;
          }
        }
      }
LABEL_54:
      ++v26;
      v25 = *a2;
    }
    while (v26 < ((_BYTE *)a2[1] - (_BYTE *)*a2) >> 3);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1AD7C0BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void TGraph::minimize(TGraph *this)
{
  _QWORD *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  TGraph *v14;
  uint64_t v15;
  _QWORD *v16;
  _BYTE *v17;
  uint64_t v18;

  v16 = 0;
  v17 = 0;
  v18 = 0;
  TGraph::topologicalSort(this, (void **)&v16, 0);
  v2 = v16;
  v3 = v17;
  if (v17 == (_BYTE *)v16)
  {
    v2 = v17;
    if (!v17)
      return;
    goto LABEL_42;
  }
  v4 = 0;
  do
  {
    v5 = v2[v4];
    if (!*(_BYTE *)(v5 + 32))
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        while (*(_BYTE *)(v6 + 32))
        {
          v6 = *(_QWORD *)(v6 + 8);
          if (!v6)
            goto LABEL_40;
        }
LABEL_8:
        v7 = *(_DWORD *)(v6 + 48);
        if (v7 != 2 && v7 != 5)
        {
          v9 = v6;
          do
          {
            v9 = *(_QWORD *)(v9 + 8);
            if (!v9)
              goto LABEL_13;
          }
          while (*(_BYTE *)(v9 + 32));
          while (1)
          {
            v10 = *(_DWORD *)(v9 + 48);
            v11 = v10 == 2 || v10 == 5;
            if (!v11 && !wcscmp(**(const __int32 ***)(v6 + 56), **(const __int32 ***)(v9 + 56)))
            {
              v12 = *(_QWORD *)(v6 + 24);
              v13 = *(_QWORD *)(v9 + 24);
              if (v12 == v13)
              {
                *(_BYTE *)(v9 + 32) = 1;
              }
              else if (*(_QWORD *)(v12 + 16) == *(_QWORD *)(v13 + 16) && TVertex::getInEdgeCount((uint64_t **)v12) == 1)
              {
                v14 = (TGraph *)TVertex::getInEdgeCount((uint64_t **)v13);
                if (v14 == (TGraph *)1)
                {
                  v15 = *(_QWORD *)(v13 + 8);
                  if (v15)
                  {
                    while (*(_BYTE *)(v15 + 32))
                    {
                      v15 = *(_QWORD *)(v15 + 8);
                      if (!v15)
                        goto LABEL_33;
                    }
LABEL_35:
                    v14 = (TGraph *)TGraph::addEdge(this, *(_QWORD *)(v6 + 24), *(_QWORD **)(v15 + 24), v15 + 48);
                    while (1)
                    {
                      v15 = *(_QWORD *)(v15 + 8);
                      if (!v15)
                        break;
                      if (!*(_BYTE *)(v15 + 32))
                        goto LABEL_35;
                    }
                  }
LABEL_33:
                  TGraph::deleteVertex(v14, (TVertex *)v13);
                }
              }
            }
            do
            {
              v9 = *(_QWORD *)(v9 + 8);
              if (!v9)
                goto LABEL_13;
            }
            while (*(_BYTE *)(v9 + 32));
          }
        }
LABEL_13:
        while (1)
        {
          v6 = *(_QWORD *)(v6 + 8);
          if (!v6)
            break;
          if (!*(_BYTE *)(v6 + 32))
            goto LABEL_8;
        }
        v2 = v16;
        v3 = v17;
      }
    }
LABEL_40:
    ++v4;
  }
  while (v4 < (v3 - (_BYTE *)v2) >> 3);
  if (v2)
  {
LABEL_42:
    v17 = v2;
    operator delete(v2);
  }
}

void sub_1AD7C0DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void TLocaleInfo::TLocaleInfo(TLocaleInfo *this)
{
  TCollation::TCollation((TLocaleInfo *)((char *)this + 16));
  *(_QWORD *)this = "e";
  *((_BYTE *)this + 80) = wcscmp((const __int32 *)"e", (const __int32 *)"t") == 0;
  *((_QWORD *)this + 1) = "U";
  *((_DWORD *)this + 16) = 2;
  *((_QWORD *)this + 9) = 4;
}

void sub_1AD7C0E5C(_Unwind_Exception *a1)
{
  TCollation *v1;

  TCollation::~TCollation(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  int v11;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + a2;
    a1[1] = v4 + a2;
    if (v4)
    {
      v6 = v5 - 1;
      if (((v5 - 1) ^ (v4 - 1)) < 0x40)
      {
LABEL_10:
        v10 = *a1 + 8 * (v4 >> 6);
        v11 = v4 & 0x3F;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v10, a2);
        return a1;
      }
    }
    else
    {
      v6 = v5 - 1;
    }
    v7 = v6 >> 6;
    if (v5 >= 0x41)
      v8 = v7;
    else
      v8 = 0;
    *(_QWORD *)(*a1 + 8 * v8) = 0;
    goto LABEL_10;
  }
  return a1;
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1AD7C0F6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double kaldi::nnet1::BidirectionalRecurrentComponent::BidirectionalRecurrentComponent(kaldi::nnet1::BidirectionalRecurrentComponent *this, int a2, int a3)
{
  double result;

  *((_DWORD *)this + 94) = a2;
  *((_DWORD *)this + 95) = a3;
  *((_WORD *)this + 192) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = &off_1E5D2D150;
  *(_OWORD *)((char *)this + 424) = xmmword_1AE13F660;
  *((_QWORD *)this + 55) = 0x3BF800000;
  *((_DWORD *)this + 112) = 1;
  *((_WORD *)this + 226) = 0;
  *((_BYTE *)this + 454) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = &unk_1E5D2C5B0;
  *((_DWORD *)this + 10) = 1;
  *(_OWORD *)((char *)this + 56) = xmmword_1AE13F660;
  *((_DWORD *)this + 18) = -1082130432;
  *(_QWORD *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 42) = 0;
  *((_BYTE *)this + 86) = 0;
  *((_QWORD *)this + 6) = &off_1E5D305B8;
  *((_QWORD *)this + 11) = &unk_1E5D305D8;
  *((_QWORD *)this + 12) = 0x100000001;
  result = 0.0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_QWORD *)this = &off_1E5D31008;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 46) = &off_1E5D312C8;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = &off_1E5D31168;
  *((_QWORD *)this + 21) = &unk_1E5D31190;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *(_OWORD *)((char *)this + 345) = 0u;
  return result;
}

kaldi::nnet1::BidirectionalRecurrentComponent *kaldi::nnet1::BidirectionalRecurrentComponent::BidirectionalRecurrentComponent(kaldi::nnet1::BidirectionalRecurrentComponent *this, const std::string *a2)
{
  std::string::size_type v4;
  void *v5;
  std::string::size_type v6;
  void *v7;

  *((_QWORD *)this + 47) = *(std::string::size_type *)((char *)&a2->__r_.__value_.__l.__size_
                                                     + *(_QWORD *)(a2->__r_.__value_.__r.__words[0] - 24));
  *((_WORD *)this + 192) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = &off_1E5D2D150;
  *(_OWORD *)((char *)this + 424) = xmmword_1AE13F660;
  *((_DWORD *)this + 110) = -1082130432;
  *(_QWORD *)((char *)this + 444) = 0x100000003;
  *((_WORD *)this + 226) = 0;
  *((_BYTE *)this + 454) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = &unk_1E5D2C5B0;
  *((_DWORD *)this + 10) = 1;
  *(_OWORD *)((char *)this + 56) = xmmword_1AE13F660;
  *((_DWORD *)this + 18) = -1082130432;
  *(_QWORD *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 42) = 0;
  *((_BYTE *)this + 86) = 0;
  *((_QWORD *)this + 6) = &off_1E5D305B8;
  *((_QWORD *)this + 11) = &unk_1E5D305D8;
  *((_QWORD *)this + 12) = 0x100000001;
  *((_QWORD *)this + 19) = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_QWORD *)this = &off_1E5D31008;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 20) = &off_1E5D31168;
  *((_QWORD *)this + 21) = &unk_1E5D31190;
  *((_OWORD *)this + 15) = 0u;
  *((_QWORD *)this + 46) = &off_1E5D312C8;
  *((_OWORD *)this + 12) = 0u;
  *((_QWORD *)this + 44) = 0;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  std::string::operator=((std::string *)this + 8, a2 + 8);
  v4 = a2[7].__r_.__value_.__l.__size_ + *(_QWORD *)(*(_QWORD *)a2[7].__r_.__value_.__l.__size_ - 24);
  v5 = (void *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v4 + 16))(v4);
  if (v5)
  *((_QWORD *)this + 22) = v5;
  v6 = a2[7].__r_.__value_.__r.__words[2] + *(_QWORD *)(*(_QWORD *)a2[7].__r_.__value_.__r.__words[2] - 24);
  v7 = (void *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v6 + 16))(v6);
  if (v7)
  *((_QWORD *)this + 23) = v7;
  *((_BYTE *)this + 360) = 0;
  return this;
}

void sub_1AD7C128C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, kaldi::nnet1::UpdatableComponent *a11, uint64_t a12)
{
  char *v12;
  quasar::Bitmap *v13;
  quasar::Bitmap *v14;
  void **v15;

  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  a12 = a10;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  if (v12[215] < 0)
    operator delete(*v15);
  quasar::Bitmap::~Bitmap(v14);
  quasar::Bitmap::~Bitmap(v13);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)v12, (uint64_t *)&off_1E5D15090);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(a11);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::CopyQuantized<kaldi::nnet1::Quantizable8BitComponentItf>(const std::string *a1)
{
  const void *size;
  kaldi::nnet1::Quantizable8BitComponentItf *v3;
  const void *v4;
  kaldi::nnet1::Quantizable8BitComponentItf *v5;
  kaldi::nnet1::Quantizable8BitComponentItf *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  kaldi::nnet1::Component *v13;
  void **v14;
  const void *v16;
  std::string v17[11];

  size = (const void *)a1[7].__r_.__value_.__l.__size_;
  if (!size)
  {
    v16 = (const void *)a1[7].__r_.__value_.__r.__words[2];
    if (v16)
    goto LABEL_19;
  }
  v4 = (const void *)a1[7].__r_.__value_.__r.__words[2];
  if (!v4)
  {
    if (v3)
      goto LABEL_20;
LABEL_19:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "Forward RNN is not quantizable");
    goto LABEL_21;
  }
  if (!v3)
    goto LABEL_19;
  v6 = v5;
  if (!v5)
  {
LABEL_20:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "Backward RNN is not quantizable");
LABEL_21:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  v7 = operator new();
  kaldi::nnet1::BidirectionalRecurrentComponent::BidirectionalRecurrentComponent((kaldi::nnet1::BidirectionalRecurrentComponent *)v7, a1);
  v8 = *(_QWORD *)(v7 + 176);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = (void *)kaldi::nnet1::Quantizable8BitComponentItf::CopyQuantized(v3);
  if (v9)
  *(_QWORD *)(v7 + 176) = v9;
  v10 = *(_QWORD *)(v7 + 184);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = (void *)kaldi::nnet1::Quantizable8BitComponentItf::CopyQuantized(v6);
  if (v11)
  *(_QWORD *)(v7 + 184) = v11;
  v12 = *(_QWORD *)(v7 + 176) + *(_QWORD *)(**(_QWORD **)(v7 + 176) - 24);
  v13 = (kaldi::nnet1::Component *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  kaldi::nnet1::Component::TypeToMarker(v13, v17);
  v14 = (void **)(v7 + 192);
  if (*(char *)(v7 + 215) < 0)
    operator delete(*v14);
  *(_OWORD *)v14 = *(_OWORD *)&v17[0].__r_.__value_.__l.__data_;
  *(_QWORD *)(v7 + 208) = *((_QWORD *)&v17[0].__r_.__value_.__l + 2);
  return v7 + *(_QWORD *)(*(_QWORD *)v7 - 24);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::CopyQuantized8Bit(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  return kaldi::nnet1::BidirectionalRecurrentComponent::CopyQuantized<kaldi::nnet1::Quantizable8BitComponentItf>((const std::string *)((char *)this - 160));
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::CopyQuantized<kaldi::nnet1::Quantizable16BitComponentItf>(const std::string *a1)
{
  const void *size;
  kaldi::nnet1::Quantizable8BitComponentItf *v3;
  const void *v4;
  kaldi::nnet1::Quantizable8BitComponentItf *v5;
  kaldi::nnet1::Quantizable8BitComponentItf *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  kaldi::nnet1::Component *v13;
  void **v14;
  const void *v16;
  std::string v17[11];

  size = (const void *)a1[7].__r_.__value_.__l.__size_;
  if (!size)
  {
    v16 = (const void *)a1[7].__r_.__value_.__r.__words[2];
    if (v16)
    goto LABEL_19;
  }
  v4 = (const void *)a1[7].__r_.__value_.__r.__words[2];
  if (!v4)
  {
    if (v3)
      goto LABEL_20;
LABEL_19:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "Forward RNN is not quantizable");
    goto LABEL_21;
  }
  if (!v3)
    goto LABEL_19;
  v6 = v5;
  if (!v5)
  {
LABEL_20:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "Backward RNN is not quantizable");
LABEL_21:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  v7 = operator new();
  kaldi::nnet1::BidirectionalRecurrentComponent::BidirectionalRecurrentComponent((kaldi::nnet1::BidirectionalRecurrentComponent *)v7, a1);
  v8 = *(_QWORD *)(v7 + 176);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = (void *)kaldi::nnet1::Quantizable8BitComponentItf::CopyQuantized(v3);
  if (v9)
  *(_QWORD *)(v7 + 176) = v9;
  v10 = *(_QWORD *)(v7 + 184);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = (void *)kaldi::nnet1::Quantizable8BitComponentItf::CopyQuantized(v6);
  if (v11)
  *(_QWORD *)(v7 + 184) = v11;
  v12 = *(_QWORD *)(v7 + 176) + *(_QWORD *)(**(_QWORD **)(v7 + 176) - 24);
  v13 = (kaldi::nnet1::Component *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  kaldi::nnet1::Component::TypeToMarker(v13, v17);
  v14 = (void **)(v7 + 192);
  if (*(char *)(v7 + 215) < 0)
    operator delete(*v14);
  *(_OWORD *)v14 = *(_OWORD *)&v17[0].__r_.__value_.__l.__data_;
  *(_QWORD *)(v7 + 208) = *((_QWORD *)&v17[0].__r_.__value_.__l + 2);
  return v7 + *(_QWORD *)(*(_QWORD *)v7 - 24);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::CopyQuantized16Bit(const std::string *this)
{
  return kaldi::nnet1::BidirectionalRecurrentComponent::CopyQuantized<kaldi::nnet1::Quantizable16BitComponentItf>(this - 7);
}

void kaldi::nnet1::BidirectionalRecurrentComponent::InitData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v6;
  std::string::size_type *v7;
  BOOL v10;
  BOOL v11;
  _QWORD **v12;
  uint64_t v13;
  int v14;
  kaldi::nnet1::Component *v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  int v20;
  unsigned __int8 *v21;
  void **v22;
  const void *v23;
  char *v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  int v28;
  unsigned __int8 *v29;
  void **v30;
  const void *v31;
  char *v32;
  _QWORD *v33;
  _QWORD **v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  void *p_s1;
  size_t v45;
  _QWORD *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  void *v52;
  size_t v53;
  _QWORD *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *__s1;
  size_t __n;
  uint64_t v65;
  _QWORD v66[34];
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;

  v67 = 0;
  v68 = 0;
  v69 = 0;
  v6 = a2 + 4;
  v7 = (std::string::size_type *)(a1 + 192);
  while (1)
  {
    if ((*((_BYTE *)v6 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
      goto LABEL_32;
    kaldi::ReadToken(a2, 0, (uint64_t)&v67);
    if ((SHIBYTE(v69) & 0x80000000) == 0)
      break;
    if (v68 != 24
      || (*v67 == 0x657272756365523CLL ? (v10 = v67[1] == 0x6E6F706D6F43746ELL) : (v10 = 0),
          v10 ? (v11 = v67[2] == 0x3E65707954746E65) : (v11 = 0),
          !v11))
    {
      if (v68 == 12)
      {
        v12 = (_QWORD **)v67;
        goto LABEL_27;
      }
LABEL_73:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
      v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"Unknown token ", 14);
      if (v69 >= 0)
        v34 = &v67;
      else
        v34 = (_QWORD **)v67;
      if (v69 >= 0)
        v35 = HIBYTE(v69);
      else
        v35 = v68;
      v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v34, v35);
      v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)", a typo in config?", 19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" (RecurrentComponentType)", 25);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v66);
    }
LABEL_22:
    kaldi::ReadToken(a2, 0, (uint64_t)v7);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  if (HIBYTE(v69) == 24)
  {
    if (v67 != (_QWORD *)0x657272756365523CLL || v68 != 0x6E6F706D6F43746ELL || v69 != 0x3E65707954746E65)
      goto LABEL_73;
    goto LABEL_22;
  }
  if (HIBYTE(v69) != 12)
    goto LABEL_73;
  v12 = &v67;
LABEL_27:
  v13 = (uint64_t)*v12;
  v14 = *((_DWORD *)v12 + 2);
  if (v13 != 0x6E6F706D6F432F3CLL || v14 != 1047817829)
    goto LABEL_73;
LABEL_32:
  v16 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType(v7);
  __s1 = 0;
  __n = 0;
  v65 = 0;
  kaldi::ReadToken(a2, 0, (uint64_t)&__s1);
  v62 = 0;
  v17 = HIBYTE(v65);
  if (v65 >= 0)
    v18 = HIBYTE(v65);
  else
    v18 = __n;
  v19 = *(unsigned __int8 *)(a1 + 215);
  v20 = (char)v19;
  if ((v19 & 0x80u) != 0)
    v19 = *(_QWORD *)(a1 + 200);
  if (v18 != v19)
  {
LABEL_80:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
    v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"you defined two different recurrent component types ", 52);
    v39 = *(char *)(a1 + 215);
    if (v39 >= 0)
      v40 = (uint64_t)v7;
    else
      v40 = *(_QWORD *)(a1 + 192);
    if (v39 >= 0)
      v41 = *(unsigned __int8 *)(a1 + 215);
    else
      v41 = *(_QWORD *)(a1 + 200);
    v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, v40, v41);
    v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" vs ", 4);
    if (v65 >= 0)
      p_s1 = &__s1;
    else
      p_s1 = __s1;
    if (v65 >= 0)
      v45 = HIBYTE(v65);
    else
      v45 = __n;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)p_s1, v45);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v66);
  }
  if (v20 >= 0)
    v21 = (unsigned __int8 *)v7;
  else
    v21 = (unsigned __int8 *)*v7;
  if (v65 < 0)
  {
    if (memcmp(__s1, v21, __n))
      goto LABEL_80;
  }
  else if (HIBYTE(v65))
  {
    v22 = &__s1;
    while (*(unsigned __int8 *)v22 == *v21)
    {
      v22 = (void **)((char *)v22 + 1);
      ++v21;
      if (!--v17)
        goto LABEL_48;
    }
    goto LABEL_80;
  }
LABEL_48:
  kaldi::ExpectToken(a2, 0, "<InputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v62 + 4);
  kaldi::ExpectToken(a2, 0, "<OutputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v62);
  v23 = (const void *)kaldi::nnet1::Component::NewComponentOfType(v16, HIDWORD(v62), v62);
  if (!v23)
  {
    *(_QWORD *)(a1 + 176) = 0;
LABEL_107:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
    v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"this is not a recurrent component, initialization failed, you used ", 67);
    v55 = *(char *)(a1 + 215);
    if (v55 >= 0)
      v56 = (uint64_t)v7;
    else
      v56 = *(_QWORD *)(a1 + 192);
    if (v55 >= 0)
      v57 = *(unsigned __int8 *)(a1 + 215);
    else
      v57 = *(_QWORD *)(a1 + 200);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, v56, v57);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v66);
  }
  *(_QWORD *)(a1 + 176) = v24;
  if (!v24)
    goto LABEL_107;
  (*(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)&v24[*(_QWORD *)(*(_QWORD *)v24 - 24)] + 96))(&v24[*(_QWORD *)(*(_QWORD *)v24 - 24)], a2, a3);
  kaldi::ReadToken(a2, 0, (uint64_t)&__s1);
  v25 = HIBYTE(v65);
  if (v65 >= 0)
    v26 = HIBYTE(v65);
  else
    v26 = __n;
  v27 = *(unsigned __int8 *)(a1 + 215);
  v28 = (char)v27;
  if ((v27 & 0x80u) != 0)
    v27 = *(_QWORD *)(a1 + 200);
  if (v26 != v27)
    goto LABEL_93;
  if (v28 >= 0)
    v29 = (unsigned __int8 *)v7;
  else
    v29 = (unsigned __int8 *)*v7;
  if (v65 < 0)
  {
    if (memcmp(__s1, v29, __n))
      goto LABEL_93;
  }
  else if (HIBYTE(v65))
  {
    v30 = &__s1;
    while (*(unsigned __int8 *)v30 == *v29)
    {
      v30 = (void **)((char *)v30 + 1);
      ++v29;
      if (!--v25)
        goto LABEL_66;
    }
LABEL_93:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
    v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"you defined two different recurrent component types ", 52);
    v47 = *(char *)(a1 + 215);
    if (v47 >= 0)
      v48 = (uint64_t)v7;
    else
      v48 = *(_QWORD *)(a1 + 192);
    if (v47 >= 0)
      v49 = *(unsigned __int8 *)(a1 + 215);
    else
      v49 = *(_QWORD *)(a1 + 200);
    v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, v48, v49);
    v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" vs ", 4);
    if (v65 >= 0)
      v52 = &__s1;
    else
      v52 = __s1;
    if (v65 >= 0)
      v53 = HIBYTE(v65);
    else
      v53 = __n;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v52, v53);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v66);
  }
LABEL_66:
  kaldi::ExpectToken(a2, 0, "<InputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v62 + 4);
  kaldi::ExpectToken(a2, 0, "<OutputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v62);
  v31 = (const void *)kaldi::nnet1::Component::NewComponentOfType(v16, HIDWORD(v62), v62);
  if (!v31)
  {
    *(_QWORD *)(a1 + 184) = 0;
LABEL_115:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
    v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"this is not a recurrent component, initialization failed, you used ", 67);
    v59 = *(char *)(a1 + 215);
    if (v59 >= 0)
      v60 = (uint64_t)v7;
    else
      v60 = *(_QWORD *)(a1 + 192);
    if (v59 >= 0)
      v61 = *(unsigned __int8 *)(a1 + 215);
    else
      v61 = *(_QWORD *)(a1 + 200);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, v60, v61);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v66);
  }
  *(_QWORD *)(a1 + 184) = v32;
  if (!v32)
    goto LABEL_115;
  (*(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)&v32[*(_QWORD *)(*(_QWORD *)v32 - 24)] + 96))(&v32[*(_QWORD *)(*(_QWORD *)v32 - 24)], a2, a3);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
  if (SHIBYTE(v65) < 0)
    operator delete(__s1);
  if (SHIBYTE(v69) < 0)
    operator delete(v67);
}

void sub_1AD7C1D78(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 81) < 0)
    operator delete(*(void **)(v1 - 104));
  _Unwind_Resume(exception_object);
}

void `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::InitData(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  kaldi::nnet1::BidirectionalRecurrentComponent::InitData((uint64_t)a1 + *(_QWORD *)(*a1 - 112), a2, a3);
}

void kaldi::nnet1::BidirectionalRecurrentComponent::ReadData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t i;
  BOOL v11;
  BOOL v12;
  _QWORD **v13;
  uint64_t v14;
  int v15;
  const void *v17;
  void *v18;
  const void *v19;
  void *v20;
  _QWORD *v21;
  _QWORD **v22;
  uint64_t v23;
  _QWORD v24[34];
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;

  v25 = 0;
  v26 = 0;
  v27 = 0;
  for (i = (uint64_t)(a1 + 24); ; kaldi::ReadToken(a2, a3, i))
  {
    if (kaldi::Peek(a2, a3) != 60)
      goto LABEL_32;
    kaldi::ReadToken(a2, a3, (uint64_t)&v25);
    if ((SHIBYTE(v27) & 0x80000000) == 0)
      break;
    if (v26 != 24
      || (*v25 == 0x657272756365523CLL ? (v11 = v25[1] == 0x6E6F706D6F43746ELL) : (v11 = 0),
          v11 ? (v12 = v25[2] == 0x3E65707954746E65) : (v12 = 0),
          !v12))
    {
      if (v26 == 12)
      {
        v13 = (_QWORD **)v25;
        goto LABEL_27;
      }
LABEL_39:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Unrecognized token ", 19);
      if (v27 >= 0)
        v22 = &v25;
      else
        v22 = (_QWORD **)v25;
      if (v27 >= 0)
        v23 = HIBYTE(v27);
      else
        v23 = v26;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24);
    }
LABEL_22:
    ;
  }
  if (HIBYTE(v27) == 24)
  {
    if (v25 != (_QWORD *)0x657272756365523CLL || v26 != 0x6E6F706D6F43746ELL || v27 != 0x3E65707954746E65)
      goto LABEL_39;
    goto LABEL_22;
  }
  if (HIBYTE(v27) != 12)
    goto LABEL_39;
  v13 = &v25;
LABEL_27:
  v14 = (uint64_t)*v13;
  v15 = *((_DWORD *)v13 + 2);
  if (v14 != 0x6E6F706D6F432F3CLL || v15 != 1047817829)
    goto LABEL_39;
LABEL_32:
  v17 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (!v17)
  {
    a1[22] = 0;
LABEL_47:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"forward component is not an RNN", 31);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24);
  }
  a1[22] = v18;
  if (!v18)
    goto LABEL_47;
  kaldi::ExpectToken(a2, a3, "</Component>");
  v19 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (!v19)
  {
    a1[23] = 0;
LABEL_49:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"backward component is not an RNN", 32);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24);
  }
  a1[23] = v20;
  if (!v20)
    goto LABEL_49;
  (*(void (**)(_QWORD *))(*a1 + 128))(a1);
  if (SHIBYTE(v27) < 0)
    operator delete(v25);
}

void sub_1AD7C2068(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 81) < 0)
    operator delete(*(void **)(v1 - 104));
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::ReadData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::BidirectionalRecurrentComponent::ReadData((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 176)), a2, a3, a4);
}

_QWORD *kaldi::nnet1::BidirectionalRecurrentComponent::WriteConfig(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  kaldi::WriteToken(a2, a3, "<RecurrentComponentType>");
  kaldi::WriteToken(a2, a3, (char *)(a1 + 192));
  return kaldi::WriteToken(a2, a3, "</Component>");
}

_QWORD *`virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::WriteConfig(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  return kaldi::nnet1::BidirectionalRecurrentComponent::WriteConfig((uint64_t)a1 + *(_QWORD *)(*a1 - 184), a2, a3);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::WriteData(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(_QWORD *))(*a1 + 184))(a1);
  kaldi::nnet1::Component::Write(a1[22] + *(_QWORD *)(*(_QWORD *)a1[22] - 24), a2, a3, a4);
  kaldi::WriteToken(a2, a3, "</Component>");
  return kaldi::nnet1::Component::Write(a1[23] + *(_QWORD *)(*(_QWORD *)a1[23] - 24), a2, a3, a4);
}

uint64_t `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::WriteData(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::BidirectionalRecurrentComponent::WriteData((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 120)), a2, a3, a4);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::NumParams(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 22) + *(_QWORD *)(**((_QWORD **)this + 22) - 24);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 176))(v2);
  v4 = *((_QWORD *)this + 23) + *(_QWORD *)(**((_QWORD **)this + 23) - 24);
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 176))(v4) + v3;
}

uint64_t `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::NumParams(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  char *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 192);
  v2 = *((_QWORD *)v1 + 22) + *(_QWORD *)(**((_QWORD **)v1 + 22) - 24);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 176))(v2);
  v4 = *((_QWORD *)v1 + 23) + *(_QWORD *)(**((_QWORD **)v1 + 23) - 24);
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 176))(v4) + v3;
}

void kaldi::nnet1::BidirectionalRecurrentComponent::GetParams(uint64_t a1, void **a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13[3];

  v4 = *(_QWORD *)(a1 + 176) + *(_QWORD *)(**(_QWORD **)(a1 + 176) - 24);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 176))(v4);
  v6 = *(_QWORD *)(a1 + 184) + *(_QWORD *)(**(_QWORD **)(a1 + 184) - 24);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 176))(v6);
  kaldi::Vector<float>::Resize(a2, (v7 + v5), 1);
  memset(v13, 0, sizeof(v13));
  v8 = *(_QWORD *)(a1 + 176) + *(_QWORD *)(**(_QWORD **)(a1 + 176) - 24);
  (*(void (**)(uint64_t, const void **))(*(_QWORD *)v8 + 184))(v8, v13);
  v11 = 0;
  v12 = 0;
  v10 = (char *)*a2;
  LODWORD(v11) = v5;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v10, v13);
  v9 = *(_QWORD *)(a1 + 184) + *(_QWORD *)(**(_QWORD **)(a1 + 184) - 24);
  (*(void (**)(uint64_t, const void **))(*(_QWORD *)v9 + 184))(v9, v13);
  v11 = 0;
  v12 = 0;
  v10 = (char *)*a2 + 4 * v5;
  LODWORD(v11) = v7;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v10, v13);
  kaldi::Vector<float>::Destroy((uint64_t)v13);
}

void sub_1AD7C2374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::GetParams(_QWORD *a1, void **a2)
{
  kaldi::nnet1::BidirectionalRecurrentComponent::GetParams((uint64_t)a1 + *(_QWORD *)(*a1 - 200), a2);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::SetParams(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a1 + 176) + *(_QWORD *)(**(_QWORD **)(a1 + 176) - 24);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 176))(v4);
  v6 = *(_QWORD *)(a1 + 184) + *(_QWORD *)(**(_QWORD **)(a1 + 184) - 24);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 176))(v6);
  v8 = *(_QWORD *)(a1 + 176) + *(_QWORD *)(**(_QWORD **)(a1 + 176) - 24);
  v12 = 0;
  v13 = 0;
  v11 = *a2;
  LODWORD(v12) = v5;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 192))(v8, &v11);
  v9 = *(_QWORD *)(a1 + 184) + *(_QWORD *)(**(_QWORD **)(a1 + 184) - 24);
  v12 = 0;
  v13 = 0;
  v11 = *a2 + 4 * v5;
  LODWORD(v12) = v7;
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 192))(v9, &v11);
}

uint64_t `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::SetParams(_QWORD *a1, uint64_t *a2)
{
  return kaldi::nnet1::BidirectionalRecurrentComponent::SetParams((uint64_t)a1 + *(_QWORD *)(*a1 - 208), a2);
}

float kaldi::nnet1::BidirectionalRecurrentComponent::SumParams(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  uint64_t v2;
  float v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 22) + *(_QWORD *)(**((_QWORD **)this + 22) - 24);
  v3 = (*(float (**)(uint64_t))(*(_QWORD *)v2 + 208))(v2);
  v4 = *((_QWORD *)this + 23) + *(_QWORD *)(**((_QWORD **)this + 23) - 24);
  return v3 + (*(float (**)(uint64_t))(*(_QWORD *)v4 + 208))(v4);
}

float `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::SumParams(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  char *v1;
  uint64_t v2;
  float v3;
  uint64_t v4;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 224);
  v2 = *((_QWORD *)v1 + 22) + *(_QWORD *)(**((_QWORD **)v1 + 22) - 24);
  v3 = (*(float (**)(uint64_t))(*(_QWORD *)v2 + 208))(v2);
  v4 = *((_QWORD *)v1 + 23) + *(_QWORD *)(**((_QWORD **)v1 + 23) - 24);
  return v3 + (*(float (**)(uint64_t))(*(_QWORD *)v4 + 208))(v4);
}

void kaldi::nnet1::BidirectionalRecurrentComponent::GetGradient(_QWORD *a1, uint64_t a2, uint64_t a3, void **a4)
{
  const void *v8;
  std::vector<unsigned int> **v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  std::vector<unsigned int>::size_type v14;
  uint64_t v15;
  std::vector<unsigned int>::pointer begin;
  uint64x2_t v17;
  int64x2_t v18;
  unsigned int v19;
  int64x2_t v20;
  int32x2_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27[3];

  v8 = (const void *)(*(uint64_t (**)(_QWORD *))(*a1 + 136))(a1);
  if (v8)
  else
    v9 = 0;
  v10 = a1[22] + *(_QWORD *)(*(_QWORD *)a1[22] - 24);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 176))(v10);
  v12 = a1[23] + *(_QWORD *)(*(_QWORD *)a1[23] - 24);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 176))(v12);
  v14 = *(int *)(a2 + 20);
  kaldi::Vector<float>::Resize(a4, (v13 + v11), 1);
  memset(v27, 0, sizeof(v27));
  ((void (*)(std::vector<unsigned int> **))(*v9)[3].__end_cap_.__value_)(v9);
  std::vector<int>::resize(v9[27], v14);
  if ((int)v14 >= 1)
  {
    v15 = 0;
    begin = v9[27]->__begin_;
    v17 = (uint64x2_t)vdupq_n_s64((unint64_t)v14 - 1);
    v18 = (int64x2_t)xmmword_1AE140A90;
    v19 = v14 - 1;
    v20 = vdupq_n_s64(2uLL);
    do
    {
      v21 = vmovn_s64((int64x2_t)vcgeq_u64(v17, (uint64x2_t)v18));
      if ((v21.i8[0] & 1) != 0)
        begin[v15] = v19;
      if ((v21.i8[4] & 1) != 0)
        begin[v15 + 1] = v14 + (v15 ^ 0xFFFFFFFE);
      v15 += 2;
      v18 = vaddq_s64(v18, v20);
      v19 -= 2;
    }
    while (((v14 + 1) & 0x1FFFFFFFELL) != v15);
  }
  kaldi::CuMatrix<float>::Resize((int32x2_t *)v9[30], v14, *(unsigned int *)(a2 + 16), 1, 0);
  kaldi::CuMatrixBase<float>::CopyRows((uint64_t)v9[30], a2, v9[27]);
  v22 = (char *)v9[22] + *((_QWORD *)v9[22]->__begin_ - 3);
  (*(void (**)(char *, uint64_t, uint64_t, const void **))(*(_QWORD *)v22 + 224))(v22, a2, a3, v27);
  v25 = 0;
  v26 = 0;
  v24 = (char *)*a4;
  LODWORD(v25) = v11;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v24, v27);
  v23 = (char *)v9[23] + *((_QWORD *)v9[23]->__begin_ - 3);
  (*(void (**)(char *, std::vector<unsigned int> *, uint64_t, const void **))(*(_QWORD *)v23 + 224))(v23, v9[30], a3, v27);
  v25 = 0;
  v26 = 0;
  v24 = (char *)*a4 + 4 * v11;
  LODWORD(v25) = v13;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v24, v27);
  ((void (*)(std::vector<unsigned int> **))(*v9)->__end_)(v9);
  kaldi::Vector<float>::Destroy((uint64_t)v27);
}

void sub_1AD7C2798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::GetGradient(_QWORD *a1, uint64_t a2, uint64_t a3, void **a4)
{
  kaldi::nnet1::BidirectionalRecurrentComponent::GetGradient((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 240)), a2, a3, a4);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::PerturbParams(kaldi::nnet1::BidirectionalRecurrentComponent *this, float a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *((_QWORD *)this + 22) + *(_QWORD *)(**((_QWORD **)this + 22) - 24);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 216))(v4);
  v5 = *((_QWORD *)this + 23) + *(_QWORD *)(**((_QWORD **)this + 23) - 24);
  return (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v5 + 216))(v5, a2);
}

uint64_t `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::PerturbParams(kaldi::nnet1::BidirectionalRecurrentComponent *this, float a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 232);
  v4 = *((_QWORD *)v3 + 22) + *(_QWORD *)(**((_QWORD **)v3 + 22) - 24);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 216))(v4);
  v5 = *((_QWORD *)v3 + 23) + *(_QWORD *)(**((_QWORD **)v3 + 23) - 24);
  return (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v5 + 216))(v5, a2);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::Info(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  unsigned __int8 v17;
  _QWORD v18[11];
  char v19;
  uint64_t v20;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
  (*(void (**)(kaldi::nnet1::BidirectionalRecurrentComponent *, _QWORD *, _QWORD))(*(_QWORD *)this + 184))(this, v18, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n## Forward RNN: input-dim ", 27);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", output-dim ", 13);
  v3 = (_QWORD *)std::ostream::operator<<();
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"\n", 1);
  (*(void (**)(void **__return_ptr))(*(_QWORD *)(*((_QWORD *)this + 22)
                                                          + *(_QWORD *)(**((_QWORD **)this + 22) - 24))
                                              + 64))(v16);
  if ((v17 & 0x80u) == 0)
    v5 = v16;
  else
    v5 = (void **)v16[0];
  if ((v17 & 0x80u) == 0)
    v6 = v17;
  else
    v6 = (uint64_t)v16[1];
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\n## Backward RNN: input-dim ", 28);
  v8 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", output-dim ", 13);
  v9 = (_QWORD *)std::ostream::operator<<();
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n", 1);
  (*(void (**)(void **__return_ptr))(*(_QWORD *)(*((_QWORD *)this + 23)
                                                          + *(_QWORD *)(**((_QWORD **)this + 23) - 24))
                                              + 64))(__p);
  if ((v15 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v15 & 0x80u) == 0)
    v12 = v15;
  else
    v12 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
  if ((char)v15 < 0)
    operator delete(__p[0]);
  if ((char)v17 < 0)
    operator delete(v16[0]);
  std::stringbuf::str();
  v18[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v18 + *(_QWORD *)(v18[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v18[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v19 < 0)
    operator delete((void *)v18[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v20);
}

void sub_1AD7C2ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  std::ostringstream::~ostringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::Info(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  return kaldi::nnet1::BidirectionalRecurrentComponent::Info((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 80)));
}

void kaldi::nnet1::BidirectionalRecurrentComponent::InfoGradient(kaldi::nnet1::BidirectionalRecurrentComponent *this@<X0>, std::string *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  void *__p[2];
  unsigned __int8 v12;
  std::string v13;
  void *v14[2];
  int64_t v15;

  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)(*((_QWORD *)this + 22)
                                                                + *(_QWORD *)(**((_QWORD **)this + 22) - 24))
                                                    + 72))(&v13);
  (*(void (**)(void **__return_ptr))(*(_QWORD *)(*((_QWORD *)this + 23)
                                                          + *(_QWORD *)(**((_QWORD **)this + 23) - 24))
                                              + 72))(__p);
  if ((v12 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v12 & 0x80u) == 0)
    v5 = v12;
  else
    v5 = (std::string::size_type)__p[1];
  v6 = std::string::append(&v13, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v15 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)v14 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((char)v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v13, "\n");
  if (v15 >= 0)
    v8 = v14;
  else
    v8 = (void **)v14[0];
  if (v15 >= 0)
    v9 = HIBYTE(v15);
  else
    v9 = (std::string::size_type)v14[1];
  v10 = std::string::insert(&v13, 0, (const std::string::value_type *)v8, v9);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
}

void sub_1AD7C2C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

void `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::InfoGradient(kaldi::nnet1::BidirectionalRecurrentComponent *this@<X0>, std::string *a2@<X8>)
{
  kaldi::nnet1::BidirectionalRecurrentComponent::InfoGradient((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 88)), a2);
}

void kaldi::nnet1::BidirectionalRecurrentComponent::InfoPropagate(kaldi::nnet1::BidirectionalRecurrentComponent *this@<X0>, std::string *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  void *__p[2];
  unsigned __int8 v12;
  std::string v13;
  void *v14[2];
  int64_t v15;

  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)(*((_QWORD *)this + 22)
                                                                + *(_QWORD *)(**((_QWORD **)this + 22) - 24))
                                                    + 80))(&v13);
  (*(void (**)(void **__return_ptr))(*(_QWORD *)(*((_QWORD *)this + 23)
                                                          + *(_QWORD *)(**((_QWORD **)this + 23) - 24))
                                              + 80))(__p);
  if ((v12 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v12 & 0x80u) == 0)
    v5 = v12;
  else
    v5 = (std::string::size_type)__p[1];
  v6 = std::string::append(&v13, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v15 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)v14 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((char)v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v13, "\n");
  if (v15 >= 0)
    v8 = v14;
  else
    v8 = (void **)v14[0];
  if (v15 >= 0)
    v9 = HIBYTE(v15);
  else
    v9 = (std::string::size_type)v14[1];
  v10 = std::string::insert(&v13, 0, (const std::string::value_type *)v8, v9);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
}

void sub_1AD7C2E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

void `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::InfoPropagate(kaldi::nnet1::BidirectionalRecurrentComponent *this@<X0>, std::string *a2@<X8>)
{
  kaldi::nnet1::BidirectionalRecurrentComponent::InfoPropagate((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 96)), a2);
}

void kaldi::nnet1::BidirectionalRecurrentComponent::InfoBackPropagate(kaldi::nnet1::BidirectionalRecurrentComponent *this@<X0>, std::string *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  void *__p[2];
  unsigned __int8 v12;
  std::string v13;
  void *v14[2];
  int64_t v15;

  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)(*((_QWORD *)this + 22)
                                                                + *(_QWORD *)(**((_QWORD **)this + 22) - 24))
                                                    + 88))(&v13);
  (*(void (**)(void **__return_ptr))(*(_QWORD *)(*((_QWORD *)this + 23)
                                                          + *(_QWORD *)(**((_QWORD **)this + 23) - 24))
                                              + 88))(__p);
  if ((v12 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v12 & 0x80u) == 0)
    v5 = v12;
  else
    v5 = (std::string::size_type)__p[1];
  v6 = std::string::append(&v13, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v15 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)v14 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((char)v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v13, "\n");
  if (v15 >= 0)
    v8 = v14;
  else
    v8 = (void **)v14[0];
  if (v15 >= 0)
    v9 = HIBYTE(v15);
  else
    v9 = (std::string::size_type)v14[1];
  v10 = std::string::insert(&v13, 0, (const std::string::value_type *)v8, v9);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
}

void sub_1AD7C2FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

void `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::InfoBackPropagate(kaldi::nnet1::BidirectionalRecurrentComponent *this@<X0>, std::string *a2@<X8>)
{
  kaldi::nnet1::BidirectionalRecurrentComponent::InfoBackPropagate((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 104)), a2);
}

void kaldi::nnet1::BidirectionalRecurrentComponent::GetInternalMemory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64x2_t v14;
  int64x2_t v15;
  int v16;
  int64x2_t v17;
  int32x2_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[5];
  _QWORD v23[5];

  v6 = *(uint64_t **)(a1 + 176);
  v7 = *v6;
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_DWORD *)(a2 + 28);
  v10 = *(_QWORD *)(a2 + 32);
  LODWORD(v23[2]) = *(_DWORD *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 12);
  *(_QWORD *)((char *)&v23[2] + 4) = *(_QWORD *)(a2 + 20);
  HIDWORD(v23[3]) = v9;
  v23[4] = v10;
  v23[0] = &unk_1E5D29D40;
  v23[1] = v8;
  (*(void (**)(uint64_t *, _QWORD *))(v7 + 112))(v6, v23);
  v11 = *(_DWORD *)(a2 + 20);
  std::vector<int>::resize((std::vector<unsigned int> *)(*(_QWORD *)(a1 + 216) + 24 * (int)a3), v11);
  if (v11 >= 1)
  {
    v12 = 0;
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 216) + 24 * (int)a3);
    v14 = (uint64x2_t)vdupq_n_s64((unint64_t)v11 - 1);
    v15 = (int64x2_t)xmmword_1AE140A90;
    v16 = v11 - 1;
    v17 = vdupq_n_s64(2uLL);
    do
    {
      v18 = vmovn_s64((int64x2_t)vcgeq_u64(v14, (uint64x2_t)v15));
      if ((v18.i8[0] & 1) != 0)
        *(_DWORD *)(v13 + 4 * v12) = v16;
      if ((v18.i8[4] & 1) != 0)
        *(_DWORD *)(v13 + 4 * v12 + 4) = v11 + (v12 ^ 0xFFFFFFFE);
      v12 += 2;
      v15 = vaddq_s64(v15, v17);
      v16 -= 2;
    }
    while (((v11 + 1) & 0x1FFFFFFFELL) != v12);
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 184) + 112))(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 264) + 48 * (int)a3, a3);
  v19 = *(int *)(*(_QWORD *)(a1 + 176) + *(_QWORD *)(**(_QWORD **)(a1 + 176) - 24) + 12);
  v20 = *(_QWORD *)(a2 + 8) + 4 * v19;
  LODWORD(v19) = *(_DWORD *)(a2 + 28) - v19;
  v21 = *(_QWORD *)(a2 + 32);
  LODWORD(v22[2]) = *(_DWORD *)(*(_QWORD *)(a1 + 184) + *(_QWORD *)(**(_QWORD **)(a1 + 184) - 24) + 12);
  *(_QWORD *)((char *)&v22[2] + 4) = *(_QWORD *)(a2 + 20);
  HIDWORD(v22[3]) = v19;
  v22[4] = v21;
  v22[0] = &unk_1E5D29D40;
  v22[1] = v20;
  kaldi::CuMatrixBase<float>::CopyRows((uint64_t)v22, *(_QWORD *)(a1 + 264) + 48 * (int)a3, (_QWORD *)(*(_QWORD *)(a1 + 216) + 24 * (int)a3));
  v22[0] = &unk_1E5D29D40;
  memset(&v22[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v22);
  v23[0] = &unk_1E5D29D40;
  memset(&v23[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v23);
}

