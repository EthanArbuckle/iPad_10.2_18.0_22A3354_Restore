quasar::result_handler::Package *quasar::result_handler::VoiceEditingRecoveryHandler::handlePartial(uint64_t a1, uint64_t a2, quasar::result_handler::Package **a3)
{
  uint64_t v3;
  quasar::result_handler::Package *v4;
  quasar::result_handler::Package *result;
  quasar::result_handler::Package *v6;

  *(_BYTE *)(a1 + 48) = 0;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *a3;
  *a3 = 0;
  v6 = v4;
  (*(void (**)(uint64_t, uint64_t, quasar::result_handler::Package **))(*(_QWORD *)v3 + 24))(v3, a2, &v6);
  result = v6;
  v6 = 0;
  if (result)
  {
    quasar::result_handler::Package::~Package(result);
    return (quasar::result_handler::Package *)MEMORY[0x1AF44D190]();
  }
  return result;
}

void sub_1AD91E778(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100]((quasar::result_handler::Package **)va, 0);
  _Unwind_Resume(a1);
}

quasar::result_handler::Package *quasar::result_handler::VoiceEditingRecoveryHandler::handleCommandCandidate(quasar::result_handler::Package *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v36;
  quasar::result_handler::Package *v38;
  uint64_t v39;
  quasar::result_handler::Package *v40;
  quasar::result_handler::Package *v41;
  void *__p[2];
  unsigned __int8 v43;
  void *v44[2];
  unsigned __int8 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;

  if (*a3)
  {
    v5 = (uint64_t)result;
    if (quasar::gLogLevel >= 5)
    {
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v46 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"VoiceEditingRecoveryHandler: ", 29);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(now=", 5);
      v7 = (_QWORD *)std::ostream::operator<<();
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") recv commandCandidate: ", 25);
      quasar::getTopChoice(*a3 + 48, 1, v44);
      if ((v45 & 0x80u) == 0)
        v9 = v44;
      else
        v9 = (void **)v44[0];
      if ((v45 & 0x80u) == 0)
        v10 = v45;
      else
        v10 = (uint64_t)v44[1];
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" ::::: ", 7);
      quasar::topChoiceWithTimes((uint64_t **)(*a3 + 48), __p);
      if ((v43 & 0x80u) == 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      if ((v43 & 0x80u) == 0)
        v14 = v43;
      else
        v14 = (uint64_t)__p[1];
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" utteranceStartMs=", 18);
      std::ostream::operator<<();
      if ((char)v43 < 0)
        operator delete(__p[0]);
      if ((char)v45 < 0)
        operator delete(v44[0]);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v46);
      if (quasar::gLogLevel >= 5)
      {
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v46 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
        v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"VoiceEditingRecoveryHandler: ", 29);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"(now=", 5);
        v17 = (_QWORD *)std::ostream::operator<<();
        v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)") handleCommandCandidate: maybeCompleteCommand ", 47);
        if (*(_BYTE *)(*a3 + 368))
          quasar::result_handler::operator<<(v18, *a3 + 184);
        else
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"null", 4);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v46);
      }
    }
    if (!*(_BYTE *)(*a3 + 368) || *(_QWORD *)(*a3 + 344) == *(_QWORD *)(*a3 + 336))
      goto LABEL_60;
    v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 32) + 40))(*(_QWORD *)(v5 + 32));
    if (quasar::gLogLevel >= 5)
    {
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v46 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"VoiceEditingRecoveryHandler: ", 29);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"(now=", 5);
      v21 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)") handleCommandCandidate: undoEvent ", 36);
      v22 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" precedingUtterance size ", 25);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v46);
    }
    if (*(_QWORD *)(v5 + 24))
      v23 = v19;
    else
      v23 = 0;
    v24 = *a3;
    if (v23 == 1 && *(_QWORD *)(v24 + 192) == *(_QWORD *)(v24 + 184))
    {
      if (quasar::result_handler::VoiceEditingRecoveryHandler::isMaybeCompleteCommandPackageExecutionIntentionSame(v5, a3, (uint64_t *)(v5 + 24)))
      {
        if (quasar::gLogLevel >= 5)
        {
          v61 = 0u;
          v62 = 0u;
          v59 = 0u;
          v60 = 0u;
          v57 = 0u;
          v58 = 0u;
          v55 = 0u;
          v56 = 0u;
          v53 = 0u;
          v54 = 0u;
          v51 = 0u;
          v52 = 0u;
          v49 = 0u;
          v50 = 0u;
          v47 = 0u;
          v48 = 0u;
          v46 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
          v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"VoiceEditingRecoveryHandler: ", 29);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"(now=", 5);
          v26 = (_QWORD *)std::ostream::operator<<();
          v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)") handleCommandCandidate: recovery for respeak ", 47);
          v44[0] = (void *)(*a3 + 184);
          quasar::operator<<<std::optional<quasar::result_handler::CommandData>>(v27, (uint64_t *)v44);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v46);
        }
        std::__optional_destruct_base<quasar::result_handler::CommandData,false>::reset[abi:ne180100](*a3 + 184);
        v28 = *a3;
        v30 = *(_QWORD *)(*a3 + 160);
        for (i = *(_QWORD *)(*a3 + 168);
              i != v30;
              std::allocator<quasar::result_handler::CommandData>::destroy[abi:ne180100](v28 + 176, i))
        {
          i -= 184;
        }
        *(_QWORD *)(v28 + 168) = v30;
        goto LABEL_60;
      }
      v24 = *a3;
    }
    if (!*(_BYTE *)(v24 + 368))
      std::__throw_bad_optional_access[abi:ne180100]();
    v31 = *(uint64_t **)(v24 + 336);
    if (*((char *)v31 + 23) < 0)
    {
      v36 = v31[1];
      if (v36 != 4)
      {
        if (v36 == 14 && *(_QWORD *)*v31 == 0x6769626D61736964 && *(_QWORD *)(*v31 + 6) == 0x6E6F697461756769)
          goto LABEL_60;
LABEL_59:
        v38 = (quasar::result_handler::Package *)operator new();
        *(_OWORD *)v38 = 0u;
        *((_OWORD *)v38 + 1) = 0u;
        *((_OWORD *)v38 + 2) = 0u;
        *((_OWORD *)v38 + 3) = 0u;
        *((_OWORD *)v38 + 4) = 0u;
        *((_OWORD *)v38 + 5) = 0u;
        *((_OWORD *)v38 + 6) = 0u;
        *((_OWORD *)v38 + 7) = 0u;
        *((_OWORD *)v38 + 8) = 0u;
        *((_OWORD *)v38 + 9) = 0u;
        *((_OWORD *)v38 + 10) = 0u;
        *((_OWORD *)v38 + 11) = 0u;
        *((_OWORD *)v38 + 12) = 0u;
        *((_OWORD *)v38 + 13) = 0u;
        *((_OWORD *)v38 + 14) = 0u;
        *((_OWORD *)v38 + 15) = 0u;
        *((_OWORD *)v38 + 16) = 0u;
        *((_OWORD *)v38 + 17) = 0u;
        *((_OWORD *)v38 + 18) = 0u;
        *((_OWORD *)v38 + 19) = 0u;
        *((_OWORD *)v38 + 20) = 0u;
        *((_OWORD *)v38 + 21) = 0u;
        *((_OWORD *)v38 + 22) = 0u;
        *((_OWORD *)v38 + 23) = 0u;
        *((_OWORD *)v38 + 24) = 0u;
        *((_OWORD *)v38 + 25) = 0u;
        *((_OWORD *)v38 + 26) = 0u;
        *((_OWORD *)v38 + 27) = 0u;
        *((_OWORD *)v38 + 28) = 0u;
        *((_OWORD *)v38 + 29) = 0u;
        *((_OWORD *)v38 + 30) = 0u;
        std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100]((quasar::result_handler::Package **)(v5 + 24), v38);
        std::__optional_storage_base<quasar::result_handler::CommandData,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<quasar::result_handler::CommandData,false> const&>(*(_QWORD *)(v5 + 24) + 184, *a3 + 184);
LABEL_60:
        *(_BYTE *)(v5 + 48) = 0;
        v39 = *(_QWORD *)(v5 + 16);
        v40 = (quasar::result_handler::Package *)*a3;
        *a3 = 0;
        v41 = v40;
        (*(void (**)(uint64_t, uint64_t, quasar::result_handler::Package **))(*(_QWORD *)v39 + 32))(v39, a2, &v41);
        result = v41;
        v41 = 0;
        if (result)
        {
          quasar::result_handler::Package::~Package(result);
          return (quasar::result_handler::Package *)MEMORY[0x1AF44D190]();
        }
        return result;
      }
      v31 = (uint64_t *)*v31;
    }
    else
    {
      v32 = *((unsigned __int8 *)v31 + 23);
      if (v32 != 4)
      {
        if (v32 == 14)
        {
          v33 = (uint64_t *)*v31;
          v34 = *(uint64_t *)((char *)v31 + 6);
          if (v33 == (uint64_t *)0x6769626D61736964 && v34 == 0x6E6F697461756769)
            goto LABEL_60;
        }
        goto LABEL_59;
      }
    }
    if (*(_DWORD *)v31 == 1868852853)
      goto LABEL_60;
    goto LABEL_59;
  }
  return result;
}

void sub_1AD91ED60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a23);
  _Unwind_Resume(a1);
}

_QWORD *quasar::operator<<<std::optional<quasar::result_handler::CommandData>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  if (*(_BYTE *)(v3 + 184))
    quasar::result_handler::operator<<(a1, v3);
  else
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"null", 4);
  return a1;
}

quasar::result_handler::Package *quasar::result_handler::VoiceEditingRecoveryHandler::handleFinalCandidate(_QWORD *a1, unsigned int a2, quasar::result_handler::Package **a3)
{
  uint64_t v5;
  uint64_t v6;
  quasar::result_handler::Package *v7;
  quasar::result_handler::Package *result;
  uint64_t v9;
  quasar::result_handler::Package *v10;
  unsigned int v11;

  v11 = a2;
  (*(void (**)(_QWORD *, unsigned int *))(*a1 + 72))(a1, &v11);
  v5 = a1[2];
  v6 = v11;
  v7 = *a3;
  *a3 = 0;
  v10 = v7;
  (*(void (**)(uint64_t, uint64_t, quasar::result_handler::Package **))(*(_QWORD *)v5 + 40))(v5, v6, &v10);
  result = v10;
  v10 = 0;
  if (result)
  {
    quasar::result_handler::Package::~Package(result);
    return (quasar::result_handler::Package *)MEMORY[0x1AF44D190](v9);
  }
  return result;
}

void sub_1AD91EEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, quasar::result_handler::Package *a9)
{
  std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0);
  _Unwind_Resume(a1);
}

quasar::result_handler::Package *quasar::result_handler::VoiceEditingRecoveryHandler::handleFinal(uint64_t a1, uint64_t a2, quasar::result_handler::Package **a3)
{
  quasar::result_handler::Package *v6;
  uint64_t v7;
  quasar::result_handler::Package *result;
  quasar::result_handler::Package *v9;

  v6 = *a3;
  if (!*((_BYTE *)*a3 + 80))
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32));
    v6 = *a3;
  }
  *(_BYTE *)(a1 + 48) = 0;
  v7 = *(_QWORD *)(a1 + 16);
  *a3 = 0;
  v9 = v6;
  (*(void (**)(uint64_t, uint64_t, quasar::result_handler::Package **))(*(_QWORD *)v7 + 48))(v7, a2, &v9);
  result = v9;
  v9 = 0;
  if (result)
  {
    quasar::result_handler::Package::~Package(result);
    return (quasar::result_handler::Package *)MEMORY[0x1AF44D190]();
  }
  return result;
}

void sub_1AD91EF58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100]((quasar::result_handler::Package **)va, 0);
  _Unwind_Resume(a1);
}

void quasar::result_handler::VoiceEditingRecoveryHandler::handlePause(quasar::result_handler::VoiceEditingRecoveryHandler *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _OWORD v4[17];

  if (quasar::gLogLevel >= 5)
  {
    memset(v4, 0, sizeof(v4));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"VoiceEditingRecoveryHandler: ", 29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"(now=", 5);
    v3 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)") handlePause", 13);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v4);
  }
  if (!*((_BYTE *)this + 48))
    (*(void (**)(_QWORD))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4));
  *((_BYTE *)this + 48) = 0;
}

void sub_1AD91F038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  _Unwind_Resume(a1);
}

void quasar::result_handler::VoiceEditingRecoveryHandler::handleResume(quasar::result_handler::VoiceEditingRecoveryHandler *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _OWORD v4[17];

  if (quasar::gLogLevel >= 5)
  {
    memset(v4, 0, sizeof(v4));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"VoiceEditingRecoveryHandler: ", 29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"(now=", 5);
    v3 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)") handleResume", 14);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v4);
  }
  *((_BYTE *)this + 48) = 1;
}

void sub_1AD91F100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t tl::detail::expected_storage_base<std::vector<unsigned short>,std::string,false,false>::~expected_storage_base(uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 24))
  {
    v2 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v2;
LABEL_6:
      operator delete(v2);
    }
  }
  else if (*(char *)(a1 + 23) < 0)
  {
    v2 = *(void **)a1;
    goto LABEL_6;
  }
  return a1;
}

void std::__optional_storage_base<quasar::result_handler::CommandData,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<quasar::result_handler::CommandData,false> const&>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 184) == *(unsigned __int8 *)(a2 + 184))
  {
    if (*(_BYTE *)(a1 + 184))
      quasar::result_handler::CommandData::operator=(a1, a2);
  }
  else if (*(_BYTE *)(a1 + 184))
  {
    std::__optional_destruct_base<quasar::result_handler::CommandData,false>::reset[abi:ne180100](a1);
  }
  else
  {
    *(_BYTE *)(quasar::result_handler::CommandData::CommandData(a1, a2) + 184) = 1;
  }
}

uint64_t quasar::result_handler::CommandData::operator=(uint64_t a1, uint64_t a2)
{
  int v4;

  if (a1 == a2)
  {
    std::string::operator=((std::string *)(a1 + 96), (const std::string *)(a2 + 96));
    *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
    std::string::operator=((std::string *)(a1 + 128), (const std::string *)(a2 + 128));
  }
  else
  {
    std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(a1, *(uint64_t **)a2, *(uint64_t **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(a1 + 24, *(uint64_t **)(a2 + 24), *(uint64_t **)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3));
    std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(a1 + 48, *(uint64_t **)(a2 + 48), *(uint64_t **)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3));
    std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(a1 + 72, *(uint64_t **)(a2 + 72), *(uint64_t **)(a2 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 3));
    std::string::operator=((std::string *)(a1 + 96), (const std::string *)(a2 + 96));
    *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
    std::string::operator=((std::string *)(a1 + 128), (const std::string *)(a2 + 128));
    std::vector<quasar::result_handler::CommandInterpretation>::__assign_with_size[abi:ne180100]<quasar::result_handler::CommandInterpretation*,quasar::result_handler::CommandInterpretation*>(a1 + 152, *(std::string **)(a2 + 152), *(quasar::result_handler::CommandInterpretation **)(a2 + 160), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 3));
  }
  v4 = *(_DWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 180) = *(_BYTE *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = v4;
  return a1;
}

{
  void **v4;
  __int128 v5;
  void **v6;
  __int128 v7;
  int v8;

  std::vector<std::vector<quasar::Token>>::__vdeallocate((void ***)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  std::vector<std::vector<quasar::Token>>::__vdeallocate((void ***)(a1 + 24));
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  std::vector<std::vector<quasar::Token>>::__vdeallocate((void ***)(a1 + 48));
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  std::vector<std::vector<quasar::Token>>::__vdeallocate((void ***)(a1 + 72));
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  v4 = (void **)(a1 + 96);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*v4);
  v5 = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_OWORD *)v4 = v5;
  *(_BYTE *)(a2 + 119) = 0;
  *(_BYTE *)(a2 + 96) = 0;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  v6 = (void **)(a1 + 128);
  if (*(char *)(a1 + 151) < 0)
    operator delete(*v6);
  v7 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)v6 = v7;
  *(_BYTE *)(a2 + 151) = 0;
  *(_BYTE *)(a2 + 128) = 0;
  std::vector<quasar::result_handler::CommandInterpretation>::__vdeallocate((void **)(a1 + 152));
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  v8 = *(_DWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 180) = *(_BYTE *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = v8;
  return a1;
}

void std::__optional_destruct_base<quasar::result_handler::CommandData,false>::reset[abi:ne180100](uint64_t a1)
{
  void **v2;

  if (*(_BYTE *)(a1 + 184))
  {
    v2 = (void **)(a1 + 152);
    std::vector<quasar::result_handler::CommandInterpretation>::__destroy_vector::operator()[abi:ne180100](&v2);
    if (*(char *)(a1 + 151) < 0)
      operator delete(*(void **)(a1 + 128));
    if (*(char *)(a1 + 119) < 0)
      operator delete(*(void **)(a1 + 96));
    v2 = (void **)(a1 + 72);
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v2);
    v2 = (void **)(a1 + 48);
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v2);
    v2 = (void **)(a1 + 24);
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v2);
    v2 = (void **)a1;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v2);
    *(_BYTE *)(a1 + 184) = 0;
  }
}

void std::vector<quasar::result_handler::CommandInterpretation>::__assign_with_size[abi:ne180100]<quasar::result_handler::CommandInterpretation*,quasar::result_handler::CommandInterpretation*>(uint64_t a1, std::string *__str, quasar::result_handler::CommandInterpretation *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<quasar::result_handler::CommandInterpretation>::__vdeallocate((void **)a1);
    if (a4 > 0x186186186186186)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x9E79E79E79E79E7ALL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0xC30C30C30C30C3)
      v11 = 0x186186186186186;
    else
      v11 = v10;
    std::vector<quasar::result_handler::CommandInterpretation>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::result_handler::CommandInterpretation>,quasar::result_handler::CommandInterpretation*,quasar::result_handler::CommandInterpretation*,quasar::result_handler::CommandInterpretation*>(v8, (quasar::result_handler::CommandInterpretation *)__str, a3, *(std::string **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::result_handler::CommandInterpretation *,quasar::result_handler::CommandInterpretation *,quasar::result_handler::CommandInterpretation *>((int)&v17, __str, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::result_handler::CommandInterpretation>,quasar::result_handler::CommandInterpretation*,quasar::result_handler::CommandInterpretation*,quasar::result_handler::CommandInterpretation*>(v8, (quasar::result_handler::CommandInterpretation *)v13, a3, *(std::string **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::result_handler::CommandInterpretation *,quasar::result_handler::CommandInterpretation *,quasar::result_handler::CommandInterpretation *>((int)&v18, __str, (std::string *)a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 168;
      std::allocator<quasar::result_handler::CommandInterpretation>::destroy[abi:ne180100](v8, v16);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1AD91F4E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1AD91F4EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<quasar::result_handler::CommandInterpretation>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 168;
        std::allocator<quasar::result_handler::CommandInterpretation>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<quasar::result_handler::CommandInterpretation>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x186186186186187)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::result_handler::CommandInterpretation>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[168 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::result_handler::CommandInterpretation>,quasar::result_handler::CommandInterpretation*,quasar::result_handler::CommandInterpretation*,quasar::result_handler::CommandInterpretation*>(uint64_t a1, quasar::result_handler::CommandInterpretation *a2, quasar::result_handler::CommandInterpretation *a3, std::string *this)
{
  std::string *v4;
  const quasar::result_handler::CommandInterpretation *v6;
  _QWORD v8[3];
  char v9;
  std::string *v10;
  std::string *v11;

  v4 = this;
  v10 = this;
  v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      quasar::result_handler::CommandInterpretation::CommandInterpretation(v4, v6);
      v6 = (const quasar::result_handler::CommandInterpretation *)((char *)v6 + 168);
      v4 = v11 + 7;
      v11 += 7;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::result_handler::CommandInterpretation>,quasar::result_handler::CommandInterpretation*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1AD91F640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::result_handler::CommandInterpretation>,quasar::result_handler::CommandInterpretation*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *quasar::result_handler::CommandInterpretation::CommandInterpretation(std::string *this, const quasar::result_handler::CommandInterpretation *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  std::string::size_type v7;
  __int16 v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  v7 = *((_QWORD *)a2 + 9);
  v8 = *((_WORD *)a2 + 40);
  this[3].__r_.__value_.__r.__words[2] = 0;
  LOWORD(this[3].__r_.__value_.__r.__words[1]) = v8;
  this[3].__r_.__value_.__r.__words[0] = v7;
  this[4].__r_.__value_.__r.__words[0] = 0;
  this[4].__r_.__value_.__l.__size_ = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 88), *((__int128 **)a2 + 11), *((__int128 **)a2 + 12), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 3));
  this[4].__r_.__value_.__r.__words[2] = 0;
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__l.__size_ = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 112), *((__int128 **)a2 + 14), *((__int128 **)a2 + 15), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 15) - *((_QWORD *)a2 + 14)) >> 3));
  this[5].__r_.__value_.__r.__words[2] = 0;
  this[6].__r_.__value_.__r.__words[0] = 0;
  this[6].__r_.__value_.__l.__size_ = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 136), *((__int128 **)a2 + 17), *((__int128 **)a2 + 18), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 18) - *((_QWORD *)a2 + 17)) >> 3));
  this[6].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 20);
  return this;
}

void sub_1AD91F7B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  void **v11;

  if (*(char *)(v10 + 47) < 0)
    operator delete(*v11);
  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::result_handler::CommandInterpretation>,quasar::result_handler::CommandInterpretation*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::result_handler::CommandInterpretation>,quasar::result_handler::CommandInterpretation*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::result_handler::CommandInterpretation>,quasar::result_handler::CommandInterpretation*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 168;
      std::allocator<quasar::result_handler::CommandInterpretation>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::result_handler::CommandInterpretation *,quasar::result_handler::CommandInterpretation *,quasar::result_handler::CommandInterpretation *>(int a1, std::string *__str, std::string *a3, std::string *this)
{
  std::string *v5;
  std::string *v6;
  __int16 v7;

  v5 = __str;
  if (__str == a3)
    return __str;
  v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    std::string::operator=(this + 1, v5 + 1);
    std::string::operator=(this + 2, v5 + 2);
    v7 = v5[3].__r_.__value_.__r.__words[1];
    this[3].__r_.__value_.__r.__words[0] = v5[3].__r_.__value_.__r.__words[0];
    LOWORD(this[3].__r_.__value_.__r.__words[1]) = v7;
    if (this != v5)
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)&this[3].__r_.__value_.__r.__words[2], (std::string *)v5[3].__r_.__value_.__r.__words[2], (__int128 *)v5[4].__r_.__value_.__l.__data_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[4].__r_.__value_.__r.__words[0] - v5[3].__r_.__value_.__r.__words[2]) >> 3));
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)&this[4].__r_.__value_.__r.__words[2], (std::string *)v5[4].__r_.__value_.__r.__words[2], (__int128 *)v5[5].__r_.__value_.__l.__data_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[5].__r_.__value_.__r.__words[0] - v5[4].__r_.__value_.__r.__words[2]) >> 3));
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)&this[5].__r_.__value_.__r.__words[2], (std::string *)v5[5].__r_.__value_.__r.__words[2], (__int128 *)v5[6].__r_.__value_.__l.__data_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[6].__r_.__value_.__r.__words[0] - v5[5].__r_.__value_.__r.__words[2]) >> 3));
    }
    this[6].__r_.__value_.__r.__words[2] = v5[6].__r_.__value_.__r.__words[2];
    this += 7;
    v5 += 7;
  }
  while (v5 != v6);
  return v6;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::result_handler::CommandInterpretation>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x186186186186187)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(168 * a2);
}

uint64_t quasar::result_handler::CommandData::CommandData(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  int v6;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>((_QWORD *)a1, *(uint64_t **)a2, *(uint64_t **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>((_QWORD *)(a1 + 24), *(uint64_t **)(a2 + 24), *(uint64_t **)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3));
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>((_QWORD *)(a1 + 48), *(uint64_t **)(a2 + 48), *(uint64_t **)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3));
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>((_QWORD *)(a1 + 72), *(uint64_t **)(a2 + 72), *(uint64_t **)(a2 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 3));
  if (*(char *)(a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 96), *(const std::string::value_type **)(a2 + 96), *(_QWORD *)(a2 + 104));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = v4;
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  if (*(char *)(a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 128), *(const std::string::value_type **)(a2 + 128), *(_QWORD *)(a2 + 136));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = v5;
  }
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  std::vector<quasar::result_handler::CommandInterpretation>::__init_with_size[abi:ne180100]<quasar::result_handler::CommandInterpretation*,quasar::result_handler::CommandInterpretation*>((std::string *)(a1 + 152), *(quasar::result_handler::CommandInterpretation **)(a2 + 152), *(quasar::result_handler::CommandInterpretation **)(a2 + 160), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 3));
  v6 = *(_DWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 180) = *(_BYTE *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = v6;
  return a1;
}

void sub_1AD91FB60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;

  if (*(char *)(v10 + 119) < 0)
    operator delete(*v11);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)v10;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

std::string *std::vector<quasar::result_handler::CommandInterpretation>::__init_with_size[abi:ne180100]<quasar::result_handler::CommandInterpretation*,quasar::result_handler::CommandInterpretation*>(std::string *result, quasar::result_handler::CommandInterpretation *a2, quasar::result_handler::CommandInterpretation *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::result_handler::CommandInterpretation>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::result_handler::CommandInterpretation>,quasar::result_handler::CommandInterpretation*,quasar::result_handler::CommandInterpretation*,quasar::result_handler::CommandInterpretation*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1AD91FC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<quasar::result_handler::CommandInterpretation>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *quasar::SpeakerCodeTraining::SpeakerCodeTraining(std::string *this, __int128 *a2, __int128 *a3, int a4, unsigned int a5, unsigned int a6, int a7, std::string::value_type a8, float a9, char a10, int a11, int a12, __int128 *a13)
{
  __int128 v21;
  std::string *v22;
  __int128 v23;
  __int128 v24;
  _QWORD v26[35];

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v21 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v21;
  }
  v22 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v23 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
  }
  *(_OWORD *)&this[4].__r_.__value_.__r.__words[2] = 0u;
  LODWORD(this[2].__r_.__value_.__l.__data_) = a4;
  HIDWORD(this[2].__r_.__value_.__r.__words[0]) = a5;
  LODWORD(this[2].__r_.__value_.__r.__words[1]) = a6;
  HIDWORD(this[2].__r_.__value_.__r.__words[1]) = a7;
  *(float *)&this[2].__r_.__value_.__r.__words[2] = a9;
  this[3].__r_.__value_.__l.__size_ = 0;
  this[3].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  this[4].__r_.__value_.__s.__data_[0] = a8;
  this[4].__r_.__value_.__s.__data_[1] = a10;
  *(_OWORD *)&this[5].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[6].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[6].__r_.__value_.__r.__words[2] = 0u;
  HIDWORD(this[4].__r_.__value_.__r.__words[0]) = a11;
  LODWORD(this[4].__r_.__value_.__r.__words[1]) = a12;
  *(_OWORD *)&this[7].__r_.__value_.__r.__words[1] = 0u;
  if (*((char *)a13 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 8, *(const std::string::value_type **)a13, *((_QWORD *)a13 + 1));
  }
  else
  {
    v24 = *a13;
    this[8].__r_.__value_.__r.__words[2] = *((_QWORD *)a13 + 2);
    *(_OWORD *)&this[8].__r_.__value_.__l.__data_ = v24;
  }
  this[9].__r_.__value_.__r.__words[0] = 850045863;
  *(_OWORD *)&this[9].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[10].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[10].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)((char *)&this[11].__r_.__value_.__l.__data_ + 1) = 0u;
  if (!a7 || a9 <= 0.0 || !a5 || !a6 || (a11 - 1) >= 2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"batchSize > 0 && updateInterval > 0 && learningRate > 0 && initializeOption > 0 && initializeOption < 3 && recognitionInterval > 0 && \"Bad configuration\"", 153);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v26);
  }
  if (a6 % a5)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"updateInterval % batchSize == 0 && \"Bad configuration\"", 54);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v26);
  }
  return this;
}

{
  return quasar::SpeakerCodeTraining::SpeakerCodeTraining(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

void sub_1AD91FE78(_Unwind_Exception *a1)
{
  std::mutex *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  void **v8;
  uint64_t v9;
  uint64_t v10;

  std::mutex::~mutex(v1);
  if (*(char *)(v3 + 215) < 0)
    operator delete(*v6);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v5);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v4);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v10);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v2);
  if (*(char *)(v3 + 47) < 0)
    operator delete(*v8);
  if (*(char *)(v3 + 23) < 0)
    operator delete(*(void **)v3);
  _Unwind_Resume(a1);
}

void quasar::SpeakerCodeTraining::load(quasar::SpeakerCodeTraining *this)
{
  unsigned __int8 v1;
  char *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned __int8 *v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v1 = atomic_load((unsigned __int8 *)this + 280);
  if ((v1 & 1) == 0)
  {
    v3 = (char *)this + 112;
    if (!*((_QWORD *)this + 14))
    {
      if (*((char *)this + 23) < 0)
        v4 = *((_QWORD *)this + 1);
      else
        v4 = *((unsigned __int8 *)this + 23);
      if (!v4 && (quasar::gLogLevel & 0x80000000) == 0)
      {
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        v29 = 0u;
        v30 = 0u;
        v27 = 0u;
        v28 = 0u;
        v25 = 0u;
        v26 = 0u;
        v23 = 0u;
        v24 = 0u;
        v21 = 0u;
        v22 = 0u;
        v19 = 0u;
        v20 = 0u;
        v18 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v18);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"Training network path must be specified.", 40);
        quasar::QuasarFatalMessage::~QuasarFatalMessage((quasar::QuasarFatalMessage *)&v18);
      }
      _ZNSt3__115allocate_sharedB8ne180100IN6quasar11ModelLoaderENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v16);
      v14 = 0;
      v15 = 0;
      quasar::ModelLoader::readNeuralNetwork(v16, (uint64_t)this, 1u, 0, 0, &v14, (uint64_t *)&v18);
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)v3, &v18);
      v5 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
      if (*((_QWORD *)&v18 + 1))
      {
        v6 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      v8 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      if (quasar::gLogLevel >= 4)
      {
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        v29 = 0u;
        v30 = 0u;
        v27 = 0u;
        v28 = 0u;
        v25 = 0u;
        v26 = 0u;
        v23 = 0u;
        v24 = 0u;
        v21 = 0u;
        v22 = 0u;
        v19 = 0u;
        v20 = 0u;
        v18 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v18);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"Training model loading done.", 28);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v18);
      }
      v11 = v17;
      if (v17)
      {
        v12 = (unint64_t *)&v17->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
  }
}

void sub_1AD920104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)va1);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::SpeakerCodeTraining::init(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unsigned int v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  void (***v34)(_QWORD, _QWORD, _QWORD, _QWORD);
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  BOOL v38;
  BOOL v39;
  int v40;
  void (***v41)(_QWORD, _QWORD, _QWORD, _QWORD);
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  void (***v45)(_QWORD, _QWORD, _QWORD, _QWORD);
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;

  v8 = *(_DWORD *)(a1 + 100);
  if ((v8 - 1) >= 2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v60);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v60, "initializeOption > 0 && initializeOption < 3 && \"Unrecognized initialize option\"");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v60);
  }
  if (v8 == 2 && !*(_DWORD *)(a1 + 104) && (quasar::gLogLevel & 0x80000000) == 0)
  {
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v68 = 0u;
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v60);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v60, (uint64_t)"Initial size must be set if initialize option is 2(aka. all-zeros)", 66);
    quasar::QuasarFatalMessage::~QuasarFatalMessage((quasar::QuasarFatalMessage *)&v60);
  }
  v57 = a5;
  v54 = a6;
  v55 = a7;
  v56 = a8;
  v17 = operator new(0x48uLL);
  v17[2] = 0;
  *v17 = &unk_1E5D422F8;
  v17[1] = 0;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_BYTE *)v17 + 64) = 0;
  *((_QWORD *)&v60 + 1) = v17;
  v17[3] = &unk_1E5D34170;
  *(_QWORD *)&v60 = v17 + 3;
  v18 = a1 + 144;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 144, &v60);
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
  if (*((_QWORD *)&v60 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = operator new(0x48uLL);
  v22[1] = 0;
  v22[2] = 0;
  *v22 = &unk_1E5D422F8;
  *((_OWORD *)v22 + 2) = 0u;
  *((_OWORD *)v22 + 3) = 0u;
  *((_BYTE *)v22 + 64) = 0;
  *((_QWORD *)&v60 + 1) = v22;
  v22[3] = &unk_1E5D34170;
  *(_QWORD *)&v60 = v22 + 3;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 160, &v60);
  v23 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
  if (*((_QWORD *)&v60 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = *(_DWORD *)(*(_QWORD *)(a1 + 144) + 20);
  v58 = *(_DWORD *)(*(_QWORD *)(a1 + 144) + 16);
  v59 = v26;
  std::allocate_shared[abi:ne180100]<kaldi::CuMatrix<float>,std::allocator<kaldi::CuMatrix<float>>,int,int,void>(&v59, &v58, &v60);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 128, &v60);
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
  if (*((_QWORD *)&v60 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v30 = operator new(0x48uLL);
  v30[1] = 0;
  v30[2] = 0;
  *v30 = &unk_1E5D422F8;
  *((_OWORD *)v30 + 2) = 0u;
  *((_OWORD *)v30 + 3) = 0u;
  *((_BYTE *)v30 + 64) = 0;
  *((_QWORD *)&v60 + 1) = v30;
  v30[3] = &unk_1E5D34170;
  *(_QWORD *)&v60 = v30 + 3;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 176, &v60);
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
  if (*((_QWORD *)&v60 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = *(void (****)(_QWORD, _QWORD, _QWORD, _QWORD))(a1 + 176);
  std::allocate_shared[abi:ne180100]<std::istringstream,std::allocator<std::istringstream>,std::string &,void>((const std::string *)(a1 + 24), &v60);
  (**v34)(v34, v60, 0, 0);
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
  if (*((_QWORD *)&v60 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (*a2)
    v38 = *a3 == 0;
  else
    v38 = 1;
  v39 = v38 || *a4 == 0;
  if (v39 || *(_DWORD *)(a1 + 48) != v57)
  {
    v40 = *(_DWORD *)(a1 + 100);
    if (v40 == 2)
    {
      kaldi::CuMatrix<float>::Resize(*(int32x2_t **)(a1 + 144), 1, *(unsigned int *)(a1 + 104), 0, 0);
    }
    else if (v40 == 1)
    {
      v41 = *(void (****)(_QWORD, _QWORD, _QWORD, _QWORD))v18;
      std::allocate_shared[abi:ne180100]<std::istringstream,std::allocator<std::istringstream>,std::string &,void>((const std::string *)(a1 + 24), &v60);
      (**v41)(v41, v60, 0, 0);
      v42 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
      if (*((_QWORD *)&v60 + 1))
      {
        v43 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
    }
    v45 = *(void (****)(_QWORD, _QWORD, _QWORD, _QWORD))(a1 + 160);
    std::allocate_shared[abi:ne180100]<std::istringstream,std::allocator<std::istringstream>,std::string &,void>((const std::string *)(a1 + 24), &v60);
    (**v45)(v45, v60, 0, 0);
    v46 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
    if (*((_QWORD *)&v60 + 1))
    {
      v47 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    kaldi::CuMatrix<float>::Resize(*(int32x2_t **)(a1 + 128), *(unsigned int *)(*(_QWORD *)v18 + 20), *(unsigned int *)(*(_QWORD *)v18 + 16), 0, 0);
  }
  else
  {
    (***(void (****)(_QWORD))(a1 + 144))(*(_QWORD *)(a1 + 144));
    (***(void (****)(_QWORD, _QWORD, _QWORD, _QWORD))(a1 + 160))(*(_QWORD *)(a1 + 160), *a3, 0, 0);
    (***(void (****)(_QWORD, _QWORD, _QWORD, _QWORD))(a1 + 128))(*(_QWORD *)(a1 + 128), *a4, 0, 0);
    *(_QWORD *)(a1 + 72) = v54;
    *(_QWORD *)(a1 + 80) = v55;
    *(_QWORD *)(a1 + 88) = v56;
  }
  if (quasar::gLogLevel >= 4)
  {
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v68 = 0u;
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v60);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v60, (uint64_t)"Training variables are initialized, training speaker code: ", 59);
    v49 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)", inference speaker code: ", 26);
    v50 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)", accumulated gradient: ", 24);
    v51 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)", processed samples: ", 21);
    v52 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)", training offset: ", 19);
    v53 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)", recognition offset: ", 22);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v60);
  }
}

void sub_1AD9207A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void quasar::SpeakerCodeTraining::resetTraining(quasar::SpeakerCodeTraining *this)
{
  _QWORD *v2;
  int v3;
  unsigned int v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  if (*((_BYTE *)this + 97))
  {
    if (quasar::gLogLevel >= 4)
    {
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v17 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"Training is continuous, speaker code: ", 38);
      v2 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", processed samples: ", 21);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v17);
    }
  }
  else
  {
    std::allocate_shared[abi:ne180100]<std::istringstream,std::allocator<std::istringstream>,std::string &,void>((const std::string *)this + 1, &v15);
    v3 = *((_DWORD *)this + 25);
    if (v3 == 2)
    {
      kaldi::CuMatrix<float>::Resize(*((int32x2_t **)this + 18), 1, *((unsigned int *)this + 26), 0, 0);
    }
    else if (v3 == 1)
    {
      (***((void (****)(_QWORD, uint64_t, _QWORD, _QWORD))this + 18))(*((_QWORD *)this + 18), v15, 0, 0);
    }
    v4 = *(_DWORD *)(*((_QWORD *)this + 18) + 20);
    v13 = *(_DWORD *)(*((_QWORD *)this + 18) + 16);
    v14 = v4;
    std::allocate_shared[abi:ne180100]<kaldi::CuMatrix<float>,std::allocator<kaldi::CuMatrix<float>>,int,int,void>(&v14, &v13, &v17);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 128, &v17);
    v5 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
    if (*((_QWORD *)&v17 + 1))
    {
      v6 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    *((_QWORD *)this + 9) = 0;
    *((_QWORD *)this + 10) = 0;
    *((_QWORD *)this + 11) = 0;
    if (quasar::gLogLevel >= 4)
    {
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v17 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"Training speaker code is reset, speaker code: ", 46);
      v8 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", processed samples: ", 21);
      v9 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", recognition offset: ", 22);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v17);
    }
    v10 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_1AD920A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)va1);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::SpeakerCodeTraining::getSpeakerCodeForInference(quasar::SpeakerCodeTraining *this@<X0>, _QWORD *a2@<X8>)
{
  std::mutex *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v4 = (std::mutex *)((char *)this + 216);
  std::mutex::lock((std::mutex *)((char *)this + 216));
  if (*((_BYTE *)this + 96))
  {
    v6 = *((_QWORD *)this + 20);
    v5 = *((_QWORD *)this + 21);
  }
  else
  {
    v6 = *((_QWORD *)this + 22);
    v5 = *((_QWORD *)this + 23);
  }
  *a2 = v6;
  a2[1] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  std::mutex::unlock(v4);
}

void quasar::SpeakerCodeTraining::getInferenceSpeakerCode(quasar::SpeakerCodeTraining *this@<X0>, _QWORD *a2@<X8>)
{
  std::mutex *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v4 = (std::mutex *)((char *)this + 216);
  std::mutex::lock((std::mutex *)((char *)this + 216));
  v5 = *((_QWORD *)this + 21);
  *a2 = *((_QWORD *)this + 20);
  a2[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  std::mutex::unlock(v4);
}

uint64_t quasar::SpeakerCodeTraining::train(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  std::vector<int>::size_type v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int32x2_t v13;
  int v14;
  int32x2_t v15;
  int v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  int32x2_t v27[3];
  int v28;
  void *__p;
  void *v30;
  _QWORD *v31;
  std::vector<int> v32;
  int32x2_t v33[6];
  void *v34[2];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;

  v3 = atomic_load((unsigned __int8 *)(result + 280));
  if ((v3 & 1) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 128);
    if (!v5 || !*(_QWORD *)(result + 144))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v34, "gradBuffer && updatedSpeakerCode && \"Speaker code container or gradient container does not exist\"");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v34);
    }
    if (*(_QWORD *)(result + 112))
    {
      kaldi::CuMatrix<float>::CuMatrix(v33, *(unsigned int *)(v5 + 20), *(unsigned int *)(v5 + 16), 0, 0, 0);
      v8 = *(unsigned int *)(a2 + 20);
      v9 = (int)v8;
      if ((int)v8 < 2)
      {
        v19 = *(_QWORD *)(v4 + 144);
        v20 = operator new(0x10uLL);
        v34[1] = v20 + 2;
        *(_QWORD *)&v35 = v20 + 2;
        *v20 = v19;
        v20[1] = a3;
        v34[0] = v20;
        (*(void (**)(_QWORD, uint64_t, void **, int32x2_t *))(**(_QWORD **)(v4 + 112) + 32))(*(_QWORD *)(v4 + 112), a2, v34, v33);
        if (v34[0])
        {
          v34[1] = v34[0];
          operator delete(v34[0]);
        }
      }
      else
      {
        v10 = *(int *)(*(_QWORD *)(v4 + 128) + 16);
        kaldi::CuMatrix<float>::CuMatrix((int32x2_t *)v34, (int)v8, v10, 0, 0, 0);
        v27[0].i32[0] = 0;
        std::vector<int>::vector(&v32, v8, (const std::vector<int>::value_type *)v27);
        kaldi::CuMatrixBase<float>::CopyRows((uint64_t)v34, *(_QWORD *)(v4 + 144), &v32);
        v11 = operator new(0x10uLL);
        v30 = v11 + 2;
        v31 = v11 + 2;
        *v11 = v34;
        v11[1] = a3;
        __p = v11;
        kaldi::CuMatrix<float>::CuMatrix(v27, v8, v10, 0, 0, 0);
        (*(void (**)(_QWORD, uint64_t, void **, int32x2_t *))(**(_QWORD **)(v4 + 112) + 32))(*(_QWORD *)(v4 + 112), a2, &__p, v27);
        if ((_DWORD)v10)
        {
          v12 = 0;
          v13 = v27[1];
          v14 = v28;
          v15 = v33[1];
          do
          {
            v16 = 0;
            v17 = 0;
            v18 = *(float *)(*(_QWORD *)&v15 + 4 * (int)v12);
            do
            {
              v18 = *(float *)(*(_QWORD *)&v13 + 4 * (int)v12 + 4 * v16) + v18;
              *(float *)(*(_QWORD *)&v15 + 4 * (int)v12) = v18;
              ++v17;
              v16 += v14;
            }
            while (v8 != v17);
            ++v12;
          }
          while (v12 != v10);
        }
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v27);
        if (__p)
        {
          v30 = __p;
          operator delete(__p);
        }
        if (v32.__begin_)
        {
          v32.__end_ = v32.__begin_;
          operator delete(v32.__begin_);
        }
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v34);
      }
      *(int64x2_t *)(v4 + 72) = vaddq_s64(*(int64x2_t *)(v4 + 72), vdupq_n_s64(v9));
      *(_QWORD *)(v4 + 88) += v9;
      if (quasar::gLogLevel >= 5)
      {
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        *(_OWORD *)v34 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Iteration:[", 11);
        v21 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"] done, calculated gradient: ", 29);
        std::ostream::operator<<();
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v34);
      }
      kaldi::CuMatrixBase<float>::AddMat(*(_QWORD *)(v4 + 128), (uint64_t)v33, 111, (float)(int)v9, 1.0);
      if (*(_QWORD *)(v4 + 80) >= (unint64_t)*(int *)(v4 + 56))
      {
        kaldi::CuMatrixBase<float>::AddMat(*(_QWORD *)(v4 + 144), *(_QWORD *)(v4 + 128), 111, -*(float *)(v4 + 64), 1.0);
        if (quasar::gLogLevel >= 4)
        {
          v49 = 0u;
          v50 = 0u;
          v47 = 0u;
          v48 = 0u;
          v45 = 0u;
          v46 = 0u;
          v43 = 0u;
          v44 = 0u;
          v41 = 0u;
          v42 = 0u;
          v39 = 0u;
          v40 = 0u;
          v37 = 0u;
          v38 = 0u;
          v35 = 0u;
          v36 = 0u;
          *(_OWORD *)v34 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Speaker code is updated: ", 25);
          v22 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", processed samples: ", 21);
          v23 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)", accumulated gradient: ", 24);
          std::ostream::operator<<();
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v34);
        }
        *(_QWORD *)(v4 + 80) -= *(int *)(v4 + 56);
        kaldi::CuMatrixBase<float>::SetZero(*(_QWORD *)(v4 + 128));
      }
      v24 = *(_QWORD *)(v4 + 88);
      v25 = *(unsigned int *)(v4 + 60);
      if (v24 >= v25)
      {
        if (quasar::gLogLevel >= 4)
        {
          v49 = 0u;
          v50 = 0u;
          v47 = 0u;
          v48 = 0u;
          v45 = 0u;
          v46 = 0u;
          v43 = 0u;
          v44 = 0u;
          v41 = 0u;
          v42 = 0u;
          v39 = 0u;
          v40 = 0u;
          v37 = 0u;
          v38 = 0u;
          v35 = 0u;
          v36 = 0u;
          *(_OWORD *)v34 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Reaches recognition interval, going to reset training and inference speaker code, processed samples: ", 101);
          v26 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)", speaker code: ", 16);
          std::ostream::operator<<();
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v34);
          v25 = *(unsigned int *)(v4 + 60);
          v24 = *(_QWORD *)(v4 + 88);
        }
        *(_QWORD *)(v4 + 88) = v24 - v25;
        std::mutex::lock((std::mutex *)(v4 + 216));
        kaldi::CuMatrixBase<float>::CopyFromMat<float>(*(int **)(v4 + 160), *(_QWORD *)(v4 + 144), 111);
        std::mutex::unlock((std::mutex *)(v4 + 216));
        quasar::SpeakerCodeTraining::resetTraining((quasar::SpeakerCodeTraining *)v4);
      }
      return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v33);
    }
  }
  return result;
}

void sub_1AD921090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a27);
}

void quasar::SpeakerCodeTraining::end(quasar::SpeakerCodeTraining *this)
{
  unsigned __int8 v1;
  _OWORD v3[17];

  v1 = atomic_load((unsigned __int8 *)this + 280);
  if ((v1 & 1) == 0)
  {
    if (quasar::gLogLevel >= 4)
    {
      memset(v3, 0, sizeof(v3));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Training is still running, going to set end to true and end training", 68);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v3);
    }
    atomic_store(1u, (unsigned __int8 *)this + 280);
  }
}

void sub_1AD92113C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a9);
  _Unwind_Resume(a1);
}

void quasar::SpeakerCodeTraining::start(quasar::SpeakerCodeTraining *this)
{
  unsigned __int8 v1;
  _OWORD v3[17];

  v1 = atomic_load((unsigned __int8 *)this + 280);
  if ((v1 & 1) != 0)
  {
    if (quasar::gLogLevel >= 4)
    {
      memset(v3, 0, sizeof(v3));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Training is ended, going to set end to false and resume training.", 65);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v3);
    }
    atomic_store(0, (unsigned __int8 *)this + 280);
  }
}

void sub_1AD9211E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::SpeakerCodeTraining::getSpeakerCode@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 152);
  *a2 = *(_QWORD *)(this + 144);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t quasar::SpeakerCodeTraining::getProcessedSamples(quasar::SpeakerCodeTraining *this)
{
  return *((_QWORD *)this + 9);
}

uint64_t quasar::SpeakerCodeTraining::getNnetVersion(quasar::SpeakerCodeTraining *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t quasar::SpeakerCodeTraining::getAccumulatedGradient@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 136);
  *a2 = *(_QWORD *)(this + 128);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t quasar::SpeakerCodeTraining::getTrainingOffset(quasar::SpeakerCodeTraining *this)
{
  return *((_QWORD *)this + 10);
}

uint64_t quasar::SpeakerCodeTraining::getRecognitionOffset(quasar::SpeakerCodeTraining *this)
{
  return *((_QWORD *)this + 11);
}

uint64_t quasar::SpeakerCodeTraining::getIsSpeakerCodeUsed(quasar::SpeakerCodeTraining *this)
{
  return *((unsigned __int8 *)this + 96);
}

BOOL quasar::SpeakerCodeTraining::isTaskSupported(const std::string *a1, unsigned __int8 *a2)
{
  _BOOL8 v3;
  void **v5[5];
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  kaldi::SplitStringToVector(a1 + 8, ",", 1, (uint64_t)&v6);
  std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string*>>((uint64_t)v5, v6, v7);
  v3 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v5, a2) != 0;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v5);
  v5[0] = (void **)&v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v5);
  return v3;
}

void sub_1AD9212EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  a9 = (void **)&a14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

int32x2_t *quasar::SpeakerCodeTraining::batchInput(int32x2_t *result, uint64_t a2)
{
  unint64_t v3;
  int32x2_t *v4;
  uint64_t v5;
  int32x2_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[34];
  int32x2_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v37;

  v3 = result[6].u32[1];
  if ((_DWORD)v3 != 1)
  {
    v4 = result;
    v5 = (int)v3;
    v7 = *(_QWORD *)a2;
    v6 = *(int32x2_t **)(a2 + 8);
    v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *(_QWORD *)a2) >> 4);
    v9 = v8 / (int)v3;
    if (v8 >= (int)v3)
    {
      v11 = 0;
      do
      {
        kaldi::CuMatrix<float>::CuMatrix(&v33, v3, *(unsigned int *)(v7 + 48 * (int)v3 * (int)v11 + 16), 0, 0, 0);
        v12 = v36;
        v13 = *(_QWORD *)a2;
        if (v36 >= 1)
        {
          v14 = 0;
          v15 = v4[6].i32[1] * (uint64_t)(int)v11;
          v16 = v34;
          v17 = v35;
          v18 = 4 * v37;
          do
          {
            v19 = v13 + 48 * (v14 + v15);
            if (*(_DWORD *)(v19 + 20) != 1)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"refMat.NumRows() == 1", 21);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
            }
            if ((int)v17 >= 1)
            {
              v20 = 0;
              v21 = *(_QWORD *)(v19 + 8);
              do
              {
                *(_DWORD *)(v16 + 4 * v20) = *(_DWORD *)(v21 + 4 * v20);
                ++v20;
              }
              while (v17 != v20);
            }
            ++v14;
            v16 += v18;
          }
          while (v14 != v12);
        }
        kaldi::CuMatrix<float>::operator=((int32x2_t *)(v13 + 48 * v11), &v33);
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v33);
        ++v11;
        v7 = *(_QWORD *)a2;
        v6 = *(int32x2_t **)(a2 + 8);
        v3 = v4[6].i32[1];
        v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *(_QWORD *)a2) >> 4) / v3;
      }
      while (v10 > v11);
    }
    else
    {
      v10 = v8 / (int)v3;
    }
    v22 = v8 - v9 * v5;
    if (v22)
    {
      kaldi::CuMatrix<float>::CuMatrix(&v33, v22, *(unsigned int *)(v7 + 48 * v10 + 16), 0, 0, 0);
      v23 = 0;
      v24 = *(_QWORD *)a2;
      v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
      v26 = v34;
      v27 = v35;
      v28 = 4 * v37;
      do
      {
        v29 = v24 + 48 * (v23 - v22 + v25);
        if (*(_DWORD *)(v29 + 20) != 1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"refMat.NumRows() == 1", 21);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
        }
        if ((int)v27 >= 1)
        {
          v30 = 0;
          v31 = *(_QWORD *)(v29 + 8);
          do
          {
            *(_DWORD *)(v26 + 4 * v30) = *(_DWORD *)(v31 + 4 * v30);
            ++v30;
          }
          while (v27 != v30);
        }
        ++v23;
        v26 += v28;
      }
      while (v22 > v23);
      kaldi::CuMatrix<float>::operator=((int32x2_t *)(v24 + 48 * (v25 / v4[6].i32[1])), &v33);
      std::vector<kaldi::CuMatrix<float>>::erase(a2, (int32x2_t *)(*(_QWORD *)a2+ 48 * (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4) / v4[6].i32[1])+ 48), *(int32x2_t **)(a2 + 8));
      return (int32x2_t *)kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v33);
    }
    else
    {
      return std::vector<kaldi::CuMatrix<float>>::erase(a2, (int32x2_t *)(v7 + 48 * v10), v6);
    }
  }
  return result;
}

int32x2_t *std::vector<kaldi::CuMatrix<float>>::erase(uint64_t a1, int32x2_t *a2, int32x2_t *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL v11;

  if (a2 != a3)
  {
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,kaldi::CuMatrix<float> *,kaldi::CuMatrix<float> *,kaldi::CuMatrix<float> *,0>(a3, *(int32x2_t **)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_QWORD **)(a1 + 8);
    if (v7 != v5)
    {
      v8 = v7 - 6;
      v9 = v7 - 6;
      do
      {
        v10 = *v9;
        v9 -= 6;
        (*(void (**)(_QWORD *))(v10 + 16))(v8);
        v11 = v8 == v6;
        v8 = v9;
      }
      while (!v11);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

void quasar::QuasarFatalMessage::~QuasarFatalMessage(quasar::QuasarFatalMessage *this)
{
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  void *__p;
  char v6;

  v2 = (void (*)(uint64_t))quasar::QuasarFatalMessage::logger;
  std::stringbuf::str();
  v2((uint64_t)&__p);
  if (v6 < 0)
    operator delete(__p);
  v3 = MEMORY[0x1E0DE4F60];
  v4 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)this = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = *(_QWORD *)(v3 + 24);
  *((_QWORD *)this + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF44D094]((char *)this + 112);
}

void std::__shared_ptr_emplace<kaldi::CuMatrix<float>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D422F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::CuMatrix<float>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D422F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::CuMatrix<float>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

int32x2_t *std::allocate_shared[abi:ne180100]<kaldi::CuMatrix<float>,std::allocator<kaldi::CuMatrix<float>>,int,int,void>@<X0>(unsigned int *a1@<X1>, unsigned int *a2@<X2>, _QWORD *a3@<X8>)
{
  int32x2_t *v6;
  int32x2_t *result;

  v6 = (int32x2_t *)operator new(0x48uLL);
  result = std::__shared_ptr_emplace<kaldi::CuMatrix<float>>::__shared_ptr_emplace[abi:ne180100]<int,int,std::allocator<kaldi::CuMatrix<float>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1AD9217E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

int32x2_t *std::__shared_ptr_emplace<kaldi::CuMatrix<float>>::__shared_ptr_emplace[abi:ne180100]<int,int,std::allocator<kaldi::CuMatrix<float>>,0>(int32x2_t *a1, unsigned int *a2, unsigned int *a3)
{
  a1[2] = 0;
  *a1 = (int32x2_t)&unk_1E5D422F8;
  a1[1] = 0;
  kaldi::CuMatrix<float>::CuMatrix(a1 + 3, *a2, *a3, 0, 0, 0);
  return a1;
}

void sub_1AD921848(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<std::istringstream,std::allocator<std::istringstream>,std::string &,void>@<X0>(const std::string *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x128uLL);
  result = std::__shared_ptr_emplace<std::istringstream>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<std::istringstream>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1AD9218A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<std::istringstream>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<std::istringstream>,0>(_QWORD *a1, const std::string *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D45580;
  a1[1] = 0;
  std::istringstream::basic_istringstream[abi:ne180100](a1 + 3, a2, 8);
  return a1;
}

void sub_1AD9218F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, v5, (uint64_t)v5);
      v5 += 24;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_1AD921968(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

int32x2_t *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,kaldi::CuMatrix<float> *,kaldi::CuMatrix<float> *,kaldi::CuMatrix<float> *,0>(int32x2_t *a1, int32x2_t *a2, int32x2_t *a3)
{
  int32x2_t *v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      kaldi::CuMatrix<float>::operator=(a3, v4);
      v4 += 6;
      a3 += 6;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

BOOL Vocab::isNonEvent(Vocab *this, unsigned int a2)
{
  int v3;

  if (!*((_BYTE *)this + 80) && *((_DWORD *)this + 16) == a2)
    return 1;
  v3 = 0;
  return LHash<unsigned int,float>::locate((_DWORD **)this + 6, a2, &v3) != 0;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned long>> &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  char v18;
  BOOL v19;
  unsigned int v20;

  v8 = (unsigned int *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * *(a2 - 1) + 16), *(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * *v9 + 16));
        if ((result & 0x80000000) != 0)
        {
          v20 = *v9;
          *v9 = *(a2 - 1);
          *(a2 - 1) = v20;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v9, v9 + 1, a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v9, v9 + 1, v9 + 2, a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, a3);
      default:
        if (v12 <= 95)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>((uint64_t)v9, a2, a3);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>((uint64_t)v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(&v9[v13 >> 1], v9, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v9, &v9[v13 >> 1], a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v9 + 1, v15 - 1, a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v9 + 2, &v9[v14 + 1], a2 - 3, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v15 - 1, v15, &v9[v14 + 1], a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * *(v9 - 1) + 16), *(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * *v9 + 16)) & 0x80000000) == 0)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &>(v9, a2, a3);
            v9 = (unsigned int *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &>(v9, a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned long>> &,unsigned int *>(v9, v17, a3);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned long>> &,unsigned int *>(v17 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned long>> &,unsigned int *,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *,unsigned int *>(v9, a2, a2, a3);
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned long>> &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int *v16;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * *(a2 - 1) + 16), *(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * *a1 + 16)) & 0x80000000) != 0)
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v9 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(a1, a1 + 1, a1 + 2, a3);
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * *v10 + 16), *(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * *v9 + 16)) & 0x80000000) != 0)
    {
      v13 = *v10;
      v14 = v11;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v14 + 12) = *(unsigned int *)((char *)a1 + v14 + 8);
        if (v14 == -8)
          break;
        v15 = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * v13 + 16), *(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * *(unsigned int *)((char *)a1 + v14 + 4) + 16));
        v14 -= 4;
        if ((v15 & 0x80000000) == 0)
        {
          v16 = (unsigned int *)((char *)a1 + v14 + 12);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v13;
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v9 = v10;
    v11 += 4;
    if (++v10 == a2)
      return 1;
  }
}

void kaldi::SnrTracker::add_frame_energy(uint64_t a1, char **a2)
{
  std::mutex::lock((std::mutex *)a1);
  std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(a1 + 64, *(_QWORD *)(a1 + 72), *a2, a2[1], (a2[1] - *a2) >> 2);
  std::mutex::unlock((std::mutex *)a1);
}

void sub_1AD921FD4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void kaldi::SnrTracker::label_noise_or_speech_frames(std::mutex *this, int64_t a2, int64_t a3, int a4)
{
  int v5;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[34];

  if (a2 < 0 || (v5 = a2, a2 > a3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "Invalid frame range. Coding error.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  std::mutex::lock(this);
  std::vector<BOOL>::resize((uint64_t)&this[1].__m_.__opaque[24], a3, 0);
  v8 = v5;
  if (v5 < a3)
  {
    v9 = *(_QWORD *)&this[1].__m_.__opaque[24];
    do
    {
      v10 = (unint64_t)v8 >> 6;
      v11 = 1 << v8;
      if (a4)
        v12 = *(_QWORD *)(v9 + 8 * v10) | v11;
      else
        v12 = *(_QWORD *)(v9 + 8 * v10) & ~v11;
      *(_QWORD *)(v9 + 8 * v10) = v12;
      ++v8;
    }
    while (v8 < a3);
  }
  std::mutex::unlock(this);
}

void sub_1AD9220C4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void kaldi::SnrTracker::label_noise_or_speech_ms(std::mutex *this, uint64_t a2, uint64_t a3, int a4, int a5)
{
  kaldi::SnrTracker::label_noise_or_speech_frames(this, a2 / *(int *)&this[1].__m_.__opaque[16] + a4, a3 / *(int *)&this[1].__m_.__opaque[16] + a4, a5);
}

double kaldi::SnrTracker::get_snr(std::mutex *this, int a2, int a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  _QWORD *v22;
  double v23;
  unint64_t v24;
  _QWORD v26[34];

  std::mutex::lock(this);
  if (a3 < 0)
  {
    v7 = (*(_QWORD *)this[1].__m_.__opaque - this[1].__m_.__sig) >> 2;
    v6 = v7;
  }
  else
  {
    v6 = a3 / *(_DWORD *)&this[1].__m_.__opaque[16] + a2;
    v7 = (*(_QWORD *)this[1].__m_.__opaque - this[1].__m_.__sig) >> 2;
  }
  if (v7 >= v6)
    v8 = v6;
  else
    v8 = v7;
  if (v8 > *(_QWORD *)&this[1].__m_.__opaque[32])
    std::vector<BOOL>::resize((uint64_t)&this[1].__m_.__opaque[24], v8, 0);
  if (!v8)
    goto LABEL_27;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0.0;
  v13 = 0.0;
  do
  {
    v14 = *(float *)(this[1].__m_.__sig + 4 * v9);
    v15 = *(_QWORD *)(*(_QWORD *)&this[1].__m_.__opaque[24] + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v9;
    v16 = v13 + v14;
    v17 = v12 + v14;
    if ((v15 & 1) != 0)
      v12 = v17;
    else
      v13 = v16;
    if ((v15 & 1) != 0)
      ++v10;
    else
      ++v11;
    ++v9;
  }
  while (v8 != v9);
  if (!v11)
  {
LABEL_27:
    v24 = 0xC059000000000000;
LABEL_28:
    v23 = *(double *)&v24;
    goto LABEL_29;
  }
  if (!v10)
  {
    v24 = 0x4059000000000000;
    goto LABEL_28;
  }
  v18 = v13 / (double)v11;
  if (v18 < 2.22507386e-308)
    v18 = 2.22507386e-308;
  v19 = log10(v18) * 10.0;
  v20 = v12 / (double)v10;
  if (v20 < 2.22507386e-308)
    v20 = 2.22507386e-308;
  v21 = log10(v20) * 10.0;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"signal energy (dB) = ", 21);
    v22 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" noise energy (dB) = ", 21);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v26);
  }
  v23 = v19 - v21;
LABEL_29:
  std::mutex::unlock(this);
  return v23;
}

void sub_1AD9222B0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

char *std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  char *v28;
  uint64_t v29;
  char *v30;
  int v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 2)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 2);
    if (v14 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)v13) >> 2;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 1 > v14)
      v14 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v9, v17);
    else
      v18 = 0;
    v28 = &v18[4 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[4 * v17];
    v29 = 4 * a5;
    v30 = &v28[4 * a5];
    do
    {
      v31 = *(_DWORD *)v7;
      v7 += 4;
      *(_DWORD *)v28 = v31;
      v28 += 4;
      v29 -= 4;
    }
    while (v29);
    v35 = v30;
    v5 = std::vector<float>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    v21 = &__src[4 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[4 * a5];
    v25 = &v23[-4 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_DWORD *)v25;
        v25 += 4;
        *(_DWORD *)v26 = v27;
        v26 += 4;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-4 * ((v23 - v24) >> 2)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[4 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[4 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_1AD9224AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v7 - 1) = v9;
      v7 -= 4;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

void *std::get_temporary_buffer[abi:ne180100]<int>(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0x1FFFFFFFFFFFFFFFLL)
    v1 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  while (1)
  {
    result = operator new(4 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

char *std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<int *>,std::__wrap_iter<int *>>(char *__src, char *a2, char *a3)
{
  char *v4;
  int v6;
  int64_t v7;
  int v8;
  size_t v9;

  v4 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 4 == a2)
    {
      v6 = *(_DWORD *)__src;
      v7 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      v4 = &__src[v7];
      *(_DWORD *)v4 = v6;
    }
    else if (a2 + 4 == a3)
    {
      v8 = *((_DWORD *)a3 - 1);
      v4 = __src + 4;
      v9 = a3 - 4 - __src;
      if (a3 - 4 != __src)
        memmove(__src + 4, __src, v9);
      *(_DWORD *)__src = v8;
    }
    else
    {
      return (char *)std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<int *>>(__src, a2, a3);
    }
  }
  return v4;
}

_DWORD *std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<int *>>(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  int v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  BOOL v18;
  char v19;
  uint64_t v20;

  v3 = a2 - a1;
  if (v3 == a3 - a2)
  {
    if (a1 != a2 && a2 != a3)
    {
      v4 = a1 + 1;
      v5 = a2 + 1;
      do
      {
        v6 = *(v4 - 1);
        *(v4 - 1) = *(v5 - 1);
        *(v5 - 1) = v6;
        if (v4 == a2)
          break;
        ++v4;
      }
      while (v5++ != a3);
    }
  }
  else
  {
    v8 = a3 - a2;
    v9 = a2 - a1;
    do
    {
      v10 = v9;
      v9 = v8;
      v8 = v10 % v8;
    }
    while (v8);
    if (v9)
    {
      v11 = &a1[v9];
      do
      {
        v13 = *--v11;
        v12 = v13;
        v14 = &v11[v3];
        v15 = v11;
        do
        {
          v16 = v14;
          *v15 = *v14;
          v17 = &v14[v3];
          v18 = __OFSUB__(v3, a3 - v14);
          v20 = v3 - (a3 - v14);
          v19 = (v20 < 0) ^ v18;
          v14 = &a1[v20];
          if (v19)
            v14 = v17;
          v15 = v16;
        }
        while (v14 != v11);
        *v16 = v12;
      }
      while (v11 != a1);
    }
    return &a1[a3 - a2];
  }
  return a2;
}

void std::__shared_ptr_emplace<quasar::PDecTranslator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42A68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::PDecTranslator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42A68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::PDecTranslator>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *kaldi::quasar::AbstractAttribute::ToString@<X0>(kaldi::quasar::AbstractAttribute *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD v4[34];

  if (this >= 8)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Invalid Category given ", 23);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, off_1E5D474A0[(int)this]);
}

_QWORD *kaldi::quasar::AbstractAttribute::ToString@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  _QWORD v3[34];

  if (a1 >= 4)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Invalid level given ", 20);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, off_1E5D474E0[a1]);
}

{
  _QWORD v3[34];

  if (a1 >= 9)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Invalid info given ", 19);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, off_1E5D47500[a1]);
}

{
  _QWORD v3[34];

  if (a1 >= 3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Invalid source given ", 21);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, off_1E5D47548[a1]);
}

BOOL kaldi::quasar::MajorError::operator==(uint64_t a1, _DWORD *a2)
{
  return !(*(unsigned int (**)(_DWORD *))(*(_QWORD *)a2 + 40))(a2) && *(_DWORD *)(a1 + 16) == a2[4];
}

uint64_t kaldi::quasar::StringAttribute::ToString(kaldi::quasar::StringAttribute *this)
{
  void **v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  unsigned __int8 v16;
  _QWORD v17[2];
  _QWORD v18[11];
  char v19;
  uint64_t v20;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v17);
  kaldi::quasar::AbstractAttribute::ToString(*((_DWORD *)this + 2), __p);
  if ((v16 & 0x80u) == 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  if ((v16 & 0x80u) == 0)
    v3 = v16;
  else
    v3 = (uint64_t)__p[1];
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"_", 1);
  v5 = (_QWORD *)std::ostream::operator<<();
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"_", 1);
  v9 = *((_QWORD *)this + 2);
  v8 = (char *)this + 16;
  v7 = v9;
  v10 = v8[23];
  if (v10 >= 0)
    v11 = (uint64_t)v8;
  else
    v11 = v7;
  if (v10 >= 0)
    v12 = v8[23];
  else
    v12 = *((_QWORD *)v8 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v11, v12);
  if ((char)v16 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v17[0] = *MEMORY[0x1E0DE4F50];
  v13 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v17 + *(_QWORD *)(v17[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v18[0] = v13;
  v18[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v19 < 0)
    operator delete((void *)v18[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v20);
}

void sub_1AD922B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::StringAttribute::Hash(kaldi::quasar::StringAttribute *this)
{
  char *v1;
  char *v2;
  char *v3;
  uint64_t v4;
  int v5;
  uint64_t result;
  uint64_t v7;

  v3 = (char *)*((_QWORD *)this + 2);
  v1 = (char *)this + 16;
  v2 = v3;
  v4 = v1[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)v1 + 1);
  if (v5 >= 0)
    v2 = v1;
  for (result = 0; v4; --v4)
  {
    v7 = *v2++;
    result = v7 + 7853 * result;
  }
  return result;
}

uint64_t kaldi::quasar::StringAttribute::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  const void **v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  BOOL v19;
  uint64_t result;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2) != 3
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12))
  {
    return 0;
  }
  v4 = *(unsigned __int8 *)(a1 + 39);
  if ((v4 & 0x80u) == 0)
    v5 = *(unsigned __int8 *)(a1 + 39);
  else
    v5 = *(_QWORD *)(a1 + 24);
  v6 = *(unsigned __int8 *)(a2 + 39);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 24);
  if (v5 != v6)
    return 0;
  v8 = (const void **)(a1 + 16);
  v11 = *(unsigned __int8 **)(a2 + 16);
  v10 = (unsigned __int8 *)(a2 + 16);
  v9 = v11;
  if (v7 >= 0)
    v12 = v10;
  else
    v12 = v9;
  if ((v4 & 0x80) != 0)
    return memcmp(*v8, v12, *(_QWORD *)(a1 + 24)) == 0;
  if (!*(_BYTE *)(a1 + 39))
    return 1;
  v13 = v4 - 1;
  do
  {
    v15 = *(unsigned __int8 *)v8;
    v8 = (const void **)((char *)v8 + 1);
    v14 = v15;
    v17 = *v12++;
    v16 = v17;
    v19 = v13-- != 0;
    result = v14 == v16;
  }
  while (v14 == v16 && v19);
  return result;
}

uint64_t kaldi::quasar::FloatAttribute::ToString(kaldi::quasar::FloatAttribute *this)
{
  void **v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  void *__p[2];
  unsigned __int8 v11;
  _QWORD v12[2];
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
  kaldi::quasar::AbstractAttribute::ToString(*((_DWORD *)this + 2), __p);
  if ((v11 & 0x80u) == 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  if ((v11 & 0x80u) == 0)
    v3 = v11;
  else
    v3 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v2, v3);
  if ((char)v11 < 0)
    operator delete(__p[0]);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"_", 1);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"_", 1);
  std::ostream::operator<<();
  v5 = *((_QWORD *)this + 3);
  if (v5)
  {
    kaldi::quasar::MinEntropyPartitioning::GetRange(v5, *((_DWORD *)this + 4));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"_[", 2);
    v6 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"--", 2);
    v7 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)")", 1);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"_", 1);
    std::ostream::operator<<();
  }
  std::stringbuf::str();
  v12[0] = *MEMORY[0x1E0DE4F50];
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v13[0] = v8;
  v13[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v15);
}

void sub_1AD922E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::FloatAttribute::Hash(kaldi::quasar::FloatAttribute *this)
{
  return *((int *)this + 3);
}

BOOL kaldi::quasar::FloatAttribute::operator==(uint64_t a1, _DWORD *a2)
{
  return (*(unsigned int (**)(_DWORD *))(*(_QWORD *)a2 + 40))(a2) == 4
      && *(_DWORD *)(a1 + 12) == a2[3]
      && *(_DWORD *)(a1 + 16) == a2[4];
}

uint64_t kaldi::quasar::BaseAttribute::ToString(kaldi::quasar::BaseAttribute *this)
{
  void *p_p;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *__p;
  uint64_t v13;
  unsigned __int8 v14;
  _QWORD v15[2];
  _QWORD v16[11];
  char v17;
  uint64_t v18;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v15);
  kaldi::quasar::AbstractAttribute::ToString(*((_DWORD *)this + 5), &__p);
  if ((v14 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v14 & 0x80u) == 0)
    v3 = v14;
  else
    v3 = v13;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)p_p, v3);
  if ((char)v14 < 0)
    operator delete(__p);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"_", 1);
  kaldi::quasar::AbstractAttribute::ToString(*((_DWORD *)this + 2), &__p);
  if ((v14 & 0x80u) == 0)
    v5 = &__p;
  else
    v5 = __p;
  if ((v14 & 0x80u) == 0)
    v6 = v14;
  else
    v6 = v13;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
  if ((char)v14 < 0)
    operator delete(__p);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"_", 1);
  kaldi::quasar::AbstractAttribute::ToString(*((_DWORD *)this + 4), &__p);
  if ((v14 & 0x80u) == 0)
    v8 = &__p;
  else
    v8 = __p;
  if ((v14 & 0x80u) == 0)
    v9 = v14;
  else
    v9 = v13;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
  if ((char)v14 < 0)
    operator delete(__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"_", 1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v15[0] = *MEMORY[0x1E0DE4F50];
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v15 + *(_QWORD *)(v15[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v16[0] = v10;
  v16[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v17 < 0)
    operator delete((void *)v16[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v18);
}

void sub_1AD9230B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::BaseAttribute::ToString(kaldi::quasar::BaseAttribute *this, const kaldi::quasar::ErrorProfile *a2)
{
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v6;
  std::string *v7;
  std::string::size_type v8;
  _QWORD *v9;
  std::string *v10;
  std::string::size_type v11;
  int v12;
  _QWORD *v13;
  std::string *v14;
  std::string::size_type v15;
  uint64_t v16;
  std::string __p;
  _QWORD v19[2];
  _QWORD v20[11];
  char v21;
  uint64_t v22;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v19);
  kaldi::quasar::AbstractAttribute::ToString(*((_DWORD *)this + 5), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"_", 1);
  kaldi::quasar::AbstractAttribute::ToString(*((_DWORD *)this + 2), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &__p;
  else
    v7 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v8 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"_", 1);
  kaldi::quasar::AbstractAttribute::ToString(*((_DWORD *)this + 4), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &__p;
  else
    v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v11 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v12 = *((_DWORD *)this + 4);
  if (v12 == 2)
  {
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"_", 1);
    kaldi::quasar::ErrorProfile::ToPhoneString(a2, *((_DWORD *)this + 3), &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &__p;
    else
      v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v15 = __p.__r_.__value_.__l.__size_;
  }
  else
  {
    if (v12 != 3)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"_", 1);
      std::ostream::operator<<();
      goto LABEL_42;
    }
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"_", 1);
    kaldi::quasar::ErrorProfile::ToWordString(a2, *((_DWORD *)this + 3), &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &__p;
    else
      v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v15 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_42:
  std::stringbuf::str();
  v19[0] = *MEMORY[0x1E0DE4F50];
  v16 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v19 + *(_QWORD *)(v19[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v20[0] = v16;
  v20[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v21 < 0)
    operator delete((void *)v20[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v22);
}

void sub_1AD923384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

BOOL kaldi::quasar::BaseAttribute::operator==(_DWORD *a1, _DWORD *a2)
{
  return (*(unsigned int (**)(_DWORD *))(*(_QWORD *)a2 + 40))(a2) == 1
      && a1[2] == a2[2]
      && a1[3] == a2[3]
      && a1[4] == a2[4]
      && a1[5] == a2[5];
}

uint64_t kaldi::quasar::ContextAttribute::ToString(kaldi::quasar::ContextAttribute *this)
{
  void *p_p;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *__p;
  uint64_t v10;
  unsigned __int8 v11;
  _QWORD v12[2];
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
  kaldi::quasar::AbstractAttribute::ToString(*((_DWORD *)this + 2), &__p);
  if ((v11 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v11 & 0x80u) == 0)
    v3 = v11;
  else
    v3 = v10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)p_p, v3);
  if ((char)v11 < 0)
    operator delete(__p);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"_", 1);
  (***((void (****)(void **__return_ptr))this + 2))(&__p);
  if ((v11 & 0x80u) == 0)
    v5 = &__p;
  else
    v5 = __p;
  if ((v11 & 0x80u) == 0)
    v6 = v11;
  else
    v6 = v10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
  if ((char)v11 < 0)
    operator delete(__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"_", 1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v12[0] = *MEMORY[0x1E0DE4F50];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v13[0] = v7;
  v13[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v15);
}

void sub_1AD9235C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::ContextAttribute::ToString(kaldi::quasar::ContextAttribute *this, const kaldi::quasar::ErrorProfile *a2)
{
  void *p_p;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *__p;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD v14[2];
  _QWORD v15[11];
  char v16;
  uint64_t v17;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
  kaldi::quasar::AbstractAttribute::ToString(*((_DWORD *)this + 2), &__p);
  if ((v13 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v13 & 0x80u) == 0)
    v5 = v13;
  else
    v5 = v12;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)p_p, v5);
  if ((char)v13 < 0)
    operator delete(__p);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"_", 1);
  (*(void (**)(void **__return_ptr, _QWORD, const kaldi::quasar::ErrorProfile *))(**((_QWORD **)this + 2)
                                                                                           + 8))(&__p, *((_QWORD *)this + 2), a2);
  if ((v13 & 0x80u) == 0)
    v7 = &__p;
  else
    v7 = __p;
  if ((v13 & 0x80u) == 0)
    v8 = v13;
  else
    v8 = v12;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
  if ((char)v13 < 0)
    operator delete(__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"_", 1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v14[0] = *MEMORY[0x1E0DE4F50];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v15[0] = v9;
  v15[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v16 < 0)
    operator delete((void *)v15[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v17);
}

void sub_1AD923784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

BOOL kaldi::quasar::ContextAttribute::operator==(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2) == 2
      && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
      && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
}

uint64_t kaldi::quasar::WordConfusion::ToString(kaldi::quasar::WordConfusion *this)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *__p[2];
  unsigned __int8 v9;
  _QWORD v10[2];
  _QWORD v11[11];
  char v12;
  uint64_t v13;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v10);
  kaldi::quasar::AbstractAttribute::ToString(*((_DWORD *)this + 2), __p);
  if ((v9 & 0x80u) == 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  if ((v9 & 0x80u) == 0)
    v3 = v9;
  else
    v3 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v2, v3);
  if ((char)v9 < 0)
    operator delete(__p[0]);
  if (*((_QWORD *)this + 6) != *((_QWORD *)this + 5))
  {
    v4 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"_", 1);
      std::ostream::operator<<();
      ++v4;
    }
    while (v4 < (uint64_t)(*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 2);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"--", 2);
  if (*((_QWORD *)this + 3) != *((_QWORD *)this + 2))
  {
    v5 = 0;
    do
    {
      if (v5)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"_", 1);
      std::ostream::operator<<();
      ++v5;
    }
    while (v5 < (uint64_t)(*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 2);
  }
  std::stringbuf::str();
  v10[0] = *MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v11[0] = v6;
  v11[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v12 < 0)
    operator delete((void *)v11[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v13);
}

void sub_1AD9239C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::WordConfusion::ToString(kaldi::quasar::WordConfusion *this, const kaldi::quasar::ErrorProfile *a2)
{
  std::string *p_p;
  std::string::size_type size;
  unint64_t v6;
  _QWORD *v7;
  std::string *v8;
  std::string::size_type v9;
  uint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string::size_type v13;
  uint64_t v14;
  std::string __p;
  _QWORD v17[2];
  _QWORD v18[11];
  char v19;
  uint64_t v20;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v17);
  kaldi::quasar::AbstractAttribute::ToString(*((_DWORD *)this + 2), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*((_QWORD *)this + 6) != *((_QWORD *)this + 5))
  {
    v6 = 0;
    do
    {
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"_", 1);
      kaldi::quasar::ErrorProfile::ToWordString(a2, *(_DWORD *)(*((_QWORD *)this + 5) + 4 * v6), &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v8 = &__p;
      else
        v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v9 = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v6;
    }
    while (v6 < (uint64_t)(*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 2);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"--", 2);
  v10 = *((_QWORD *)this + 2);
  if (*((_QWORD *)this + 3) != v10)
  {
    v11 = 0;
    do
    {
      if (v11)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"_", 1);
        v10 = *((_QWORD *)this + 2);
      }
      kaldi::quasar::ErrorProfile::ToWordString(a2, *(_DWORD *)(v10 + 4 * v11), &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &__p;
      else
        v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v13 = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v12, v13);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v11;
      v10 = *((_QWORD *)this + 2);
    }
    while (v11 < (*((_QWORD *)this + 3) - v10) >> 2);
  }
  std::stringbuf::str();
  v17[0] = *MEMORY[0x1E0DE4F50];
  v14 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v17 + *(_QWORD *)(v17[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v18[0] = v14;
  v18[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v19 < 0)
    operator delete((void *)v18[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v20);
}

void sub_1AD923C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::WordConfusion::Hash(kaldi::quasar::WordConfusion *this)
{
  int *v1;
  int *v2;
  uint64_t result;
  uint64_t v4;

  v1 = (int *)*((_QWORD *)this + 5);
  v2 = (int *)*((_QWORD *)this + 6);
  if (v1 == v2)
    return 0;
  result = 0;
  do
  {
    v4 = *v1++;
    result = v4 + 7853 * result;
  }
  while (v1 != v2);
  return result;
}

BOOL kaldi::quasar::WordConfusion::operator==(uint64_t a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  const void *v6;
  const void *v7;
  size_t v8;
  const void *v9;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2) == 6
    && (v4 = *(const void **)(a1 + 16),
        v5 = *(_QWORD *)(a1 + 24) - (_QWORD)v4,
        v6 = *(const void **)(a2 + 16),
        v5 == *(_QWORD *)(a2 + 24) - (_QWORD)v6)
    && (v7 = *(const void **)(a1 + 40),
        v8 = *(_QWORD *)(a1 + 48) - (_QWORD)v7,
        v9 = *(const void **)(a2 + 40),
        v8 == *(_QWORD *)(a2 + 48) - (_QWORD)v9)
    && *(_DWORD *)(a1 + 64) == *(_DWORD *)(a2 + 64)
    && !memcmp(v4, v6, v5))
  {
    return memcmp(v7, v9, v8) == 0;
  }
  else
  {
    return 0;
  }
}

void kaldi::quasar::AttributeWrapper::~AttributeWrapper(kaldi::quasar::AttributeWrapper *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E5D33350;
  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2)) & 1) == 0)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
  }
}

{
  kaldi::quasar::AttributeWrapper::~AttributeWrapper(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t *kaldi::quasar::AttributeFactory::CreateStringAttribute(kaldi::quasar::AttributeFactory *this, int a2, uint64_t a3)
{
  uint64_t *Attribute;
  uint64_t (**v6)(kaldi::quasar::StringAttribute *__hidden);
  int v7;
  int v8;
  std::string __p;

  v7 = 1;
  v8 = a2;
  v6 = &off_1E5D332D0;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  Attribute = kaldi::quasar::AttributeFactory::GetAttribute(this, (kaldi::quasar::AbstractAttribute *)&v6);
  v6 = &off_1E5D332D0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return Attribute;
}

void sub_1AD923E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *kaldi::quasar::AttributeFactory::GetAttribute(kaldi::quasar::AttributeFactory *this, kaldi::quasar::AbstractAttribute *a2)
{
  uint64_t **v3;
  kaldi::quasar::AbstractAttribute *v5;
  kaldi::quasar::AbstractAttribute *v6;

  v6 = a2;
  v3 = std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::find<kaldi::quasar::AbstractAttribute *>((_QWORD *)this + 1, &v6);
  if (v3)
    return v3[3];
  v5 = (kaldi::quasar::AbstractAttribute *)(*(uint64_t (**)(kaldi::quasar::AbstractAttribute *))(*(_QWORD *)v6 + 32))(v6);
  return (uint64_t *)kaldi::quasar::AttributeFactory::AddAttribute(this, v5);
}

void kaldi::quasar::StringAttribute::~StringAttribute(void **this)
{
  *this = &off_1E5D332D0;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

{
  *this = &off_1E5D332D0;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
  JUMPOUT(0x1AF44D190);
}

uint64_t *kaldi::quasar::AttributeFactory::CreateBaseAttribute(kaldi::quasar::AttributeFactory *a1, int a2, int a3, int a4, int a5)
{
  uint64_t (**v6)(kaldi::quasar::BaseAttribute *__hidden);
  int v7;
  int v8;
  int v9;
  int v10;

  v7 = a4;
  v8 = a2;
  v6 = &off_1E5D32CA0;
  v9 = a3;
  v10 = a5;
  return kaldi::quasar::AttributeFactory::GetAttribute(a1, (kaldi::quasar::AbstractAttribute *)&v6);
}

uint64_t *kaldi::quasar::AttributeFactory::CreateContextAttribute(kaldi::quasar::AttributeFactory *a1, int a2, int a3, unsigned int a4, unsigned int a5)
{
  uint64_t *Attribute;
  uint64_t (**v9)(kaldi::quasar::BaseAttribute *__hidden);
  int v10;
  int v11;
  unint64_t v12;

  v10 = 0;
  v11 = a2;
  v9 = &off_1E5D32CA0;
  v12 = __PAIR64__(a5, a4);
  Attribute = kaldi::quasar::AttributeFactory::GetAttribute(a1, (kaldi::quasar::AbstractAttribute *)&v9);
  v9 = &off_1E5D333B0;
  v10 = 2;
  v11 = a3;
  v12 = (unint64_t)Attribute;
  return kaldi::quasar::AttributeFactory::GetAttribute(a1, (kaldi::quasar::AbstractAttribute *)&v9);
}

uint64_t *kaldi::quasar::AttributeFactory::CreateWordConfusionAttribute(kaldi::quasar::AttributeFactory *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t *Attribute;
  _BYTE v7[72];

  kaldi::quasar::WordConfusion::WordConfusion((uint64_t)v7, a2, a3, a4);
  Attribute = kaldi::quasar::AttributeFactory::GetAttribute(a1, (kaldi::quasar::AbstractAttribute *)v7);
  kaldi::quasar::WordConfusion::~WordConfusion((kaldi::quasar::WordConfusion *)v7);
  return Attribute;
}

void sub_1AD924004(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::quasar::WordConfusion::~WordConfusion((kaldi::quasar::WordConfusion *)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::AttributeFactory::~AttributeFactory(kaldi::quasar::AttributeFactory *this)
{
  _QWORD *i;
  uint64_t v3;

  *(_QWORD *)this = &off_1E5D33330;
  for (i = (_QWORD *)*((_QWORD *)this + 3); i; i = (_QWORD *)*i)
  {
    v3 = i[3];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 8);
}

{
  kaldi::quasar::AttributeFactory::~AttributeFactory(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::quasar::AttributeFactory::AddAttribute(kaldi::quasar::AttributeFactory *this, kaldi::quasar::AbstractAttribute *a2)
{
  uint64_t v4;
  kaldi::quasar::AbstractAttribute *v6;
  kaldi::quasar::AbstractAttribute **v7;

  v6 = a2;
  v4 = operator new();
  *(_DWORD *)(v4 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)v4 = &off_1E5D33350;
  *(_QWORD *)(v4 + 16) = a2;
  v7 = &v6;
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeWrapper *>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeWrapper *>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeWrapper *>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeWrapper *>>>::__emplace_unique_key_args<kaldi::quasar::AbstractAttribute *,std::piecewise_construct_t const&,std::tuple<kaldi::quasar::AbstractAttribute * const&>,std::tuple<>>((uint64_t)this + 8, &v6, (uint64_t)&std::piecewise_construct, &v7)[3] = v4;
  return v4;
}

uint64_t kaldi::quasar::AbstractAttribute::ToString(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

float kaldi::quasar::AbstractAttribute::GetWeight(kaldi::quasar::AbstractAttribute *this)
{
  return 1.0;
}

uint64_t kaldi::quasar::AbstractAttribute::Owned(kaldi::quasar::AbstractAttribute *this)
{
  return 0;
}

_QWORD *kaldi::quasar::MajorError::ToString@<X0>(kaldi::quasar::MajorError *this@<X0>, _QWORD *a2@<X8>)
{
  return kaldi::quasar::AbstractAttribute::ToString((kaldi::quasar::AbstractAttribute *)*((unsigned int *)this + 4), a2);
}

uint64_t kaldi::quasar::MajorError::Hash(kaldi::quasar::MajorError *this)
{
  return *((unsigned int *)this + 4);
}

float kaldi::quasar::MajorError::Copy(kaldi::quasar::MajorError *this)
{
  uint64_t v2;
  float result;
  int v4;

  v2 = operator new();
  result = *((float *)this + 3);
  v4 = *((_DWORD *)this + 4);
  *(_DWORD *)(v2 + 8) = 0;
  *(_QWORD *)v2 = &off_1E5D32A08;
  *(float *)(v2 + 12) = result;
  *(_DWORD *)(v2 + 16) = v4;
  return result;
}

uint64_t kaldi::quasar::MajorError::GetClass(kaldi::quasar::MajorError *this)
{
  return 0;
}

float kaldi::quasar::MajorError::GetWeight(kaldi::quasar::MajorError *this)
{
  return *((float *)this + 3);
}

void kaldi::quasar::MajorError::~MajorError(kaldi::quasar::MajorError *this)
{
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::quasar::MajorError::GetCategory(kaldi::quasar::MajorError *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t kaldi::quasar::StringAttribute::Copy(kaldi::quasar::StringAttribute *this)
{
  uint64_t v2;
  int v3;
  std::string *v4;

  v2 = operator new();
  v3 = *((_DWORD *)this + 3);
  *(_DWORD *)(v2 + 8) = 1;
  *(_DWORD *)(v2 + 12) = v3;
  *(_QWORD *)v2 = &off_1E5D332D0;
  v4 = (std::string *)(v2 + 16);
  if (*((char *)this + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 2), *((_QWORD *)this + 3));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *((_OWORD *)this + 1);
    *(_QWORD *)(v2 + 32) = *((_QWORD *)this + 4);
  }
  return v2;
}

void sub_1AD92425C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1093C401FB1DE5ELL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::StringAttribute::GetClass(kaldi::quasar::StringAttribute *this)
{
  return 3;
}

float kaldi::quasar::FloatAttribute::Copy(kaldi::quasar::FloatAttribute *this)
{
  uint64_t v2;
  float result;
  uint64_t v4;

  v2 = operator new();
  result = *((float *)this + 5);
  v4 = *((_QWORD *)this + 3);
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = &off_1E5D33010;
  *(_QWORD *)(v2 + 12) = *(_QWORD *)((char *)this + 12);
  *(float *)(v2 + 20) = result;
  *(_QWORD *)(v2 + 24) = v4;
  return result;
}

uint64_t kaldi::quasar::FloatAttribute::GetClass(kaldi::quasar::FloatAttribute *this)
{
  return 4;
}

void kaldi::quasar::FloatAttribute::~FloatAttribute(kaldi::quasar::FloatAttribute *this)
{
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::quasar::BaseAttribute::Hash(kaldi::quasar::BaseAttribute *this)
{
  return *((int *)this + 3);
}

__n128 kaldi::quasar::BaseAttribute::Copy(kaldi::quasar::BaseAttribute *this)
{
  uint64_t v2;
  __n128 result;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E5D32CA0;
  result = *(__n128 *)((char *)this + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

uint64_t kaldi::quasar::BaseAttribute::GetClass(kaldi::quasar::BaseAttribute *this)
{
  return 1;
}

void kaldi::quasar::BaseAttribute::~BaseAttribute(kaldi::quasar::BaseAttribute *this)
{
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::quasar::AttributeWrapper::ToString(kaldi::quasar::AttributeWrapper *this)
{
  return (***((uint64_t (****)(_QWORD))this + 2))(*((_QWORD *)this + 2));
}

uint64_t kaldi::quasar::AttributeWrapper::ToString(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 8))(*(_QWORD *)(a1 + 16));
}

BOOL kaldi::quasar::AttributeWrapper::operator==(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t kaldi::quasar::AttributeWrapper::GetClass(kaldi::quasar::AttributeWrapper *this)
{
  return 7;
}

uint64_t kaldi::quasar::AttributeWrapper::GetWeight(kaldi::quasar::AttributeWrapper *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 48))(*((_QWORD *)this + 2));
}

uint64_t kaldi::quasar::AttributeWrapper::Owned(kaldi::quasar::AttributeWrapper *this)
{
  return 1;
}

uint64_t kaldi::quasar::ContextAttribute::Hash(kaldi::quasar::ContextAttribute *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2));
}

uint64_t kaldi::quasar::ContextAttribute::Copy(kaldi::quasar::ContextAttribute *this)
{
  uint64_t result;
  int v3;
  uint64_t v4;

  result = operator new();
  v3 = *((_DWORD *)this + 3);
  v4 = *((_QWORD *)this + 2);
  *(_QWORD *)result = &off_1E5D333B0;
  *(_DWORD *)(result + 8) = 2;
  *(_DWORD *)(result + 12) = v3;
  *(_QWORD *)(result + 16) = v4;
  return result;
}

uint64_t kaldi::quasar::ContextAttribute::GetClass(kaldi::quasar::ContextAttribute *this)
{
  return 2;
}

void kaldi::quasar::ContextAttribute::~ContextAttribute(kaldi::quasar::ContextAttribute *this)
{
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::quasar::WordConfusion::Copy(kaldi::quasar::WordConfusion *this)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::quasar::WordConfusion::WordConfusion(v2, *((_DWORD *)this + 16), (uint64_t)this + 16, (uint64_t)this + 40);
  return v2;
}

void sub_1AD9244DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1091C40BDD2178ELL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::WordConfusion::GetClass(kaldi::quasar::WordConfusion *this)
{
  return 6;
}

void kaldi::quasar::WordConfusion::~WordConfusion(kaldi::quasar::WordConfusion *this)
{
  kaldi::quasar::WordConfusion::~WordConfusion(this);
  JUMPOUT(0x1AF44D190);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E5D32DD0;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 3) = v3;
    operator delete(v3);
  }
}

uint64_t kaldi::quasar::WordConfusion::WordConfusion(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)(a1 + 8) = 8;
  *(_QWORD *)a1 = &off_1E5D32DD0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 16), *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 40), *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  *(_DWORD *)(a1 + 64) = a2;
  return a1;
}

void sub_1AD9245B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeWrapper *>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeWrapper *>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeWrapper *>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeWrapper *>>>::__emplace_unique_key_args<kaldi::quasar::AbstractAttribute *,std::piecewise_construct_t const&,std::tuple<kaldi::quasar::AbstractAttribute * const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  _QWORD *v14;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v10)
        v4 = v8 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if (((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v14[2] + 24))(v14[2], *a2) & 1) != 0)
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  v14 = operator new(0x20uLL);
  *v14 = 0;
  v14[1] = v9;
  v14[2] = **a4;
  v14[3] = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *v14 = *v23;
LABEL_38:
    *v23 = v14;
    goto LABEL_39;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v22 + 8 * v4) = a1 + 16;
  if (*v14)
  {
    v24 = *(_QWORD *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10)
        v24 %= v10;
    }
    else
    {
      v24 &= v10 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_1AD924850(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void QuasarITNImpl::formatWords(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, std::string *a9@<X8>)
{
  uint64_t v17;
  uint64_t v18;
  std::string::size_type size;
  uint64_t v20;
  char v21;
  void *__p[2];
  char v24;
  std::string v25;
  void *v26[2];
  char v27;
  void *v28[2];
  char v29;

  v17 = *(_QWORD *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(v28, "");
  std::string::basic_string[abi:ne180100]<0>(v26, "");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v21 = 0;
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, void **, void **, uint64_t, void **, uint64_t, uint64_t, char, uint64_t))(*(_QWORD *)v17 + 16))(&v25, v17, a2, v28, v26, a5, __p, a4, a7, v21, a6);
  if (v24 < 0)
    operator delete(__p[0]);
  if (v27 < 0)
    operator delete(v26[0]);
  if (v29 < 0)
    operator delete(v28[0]);
  if (&v25 != a3)
    std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)a3, (uint64_t)v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v25.__r_.__value_.__l.__size_ - v25.__r_.__value_.__r.__words[0]) >> 5));
  v18 = *(_QWORD *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(v28, "");
  (*(void (**)(uint64_t, std::string *, uint64_t, void **, _QWORD, uint64_t))(*(_QWORD *)v18 + 48))(v18, &v25, a5, v28, 0, a8);
  if (v29 < 0)
    operator delete(v28[0]);
  v20 = a9->__r_.__value_.__r.__words[0];
  size = a9->__r_.__value_.__l.__size_;
  if (a9->__r_.__value_.__r.__words[0] != size)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v28, "\x1F");
      std::string::basic_string[abi:ne180100]<0>(v26, "");
      quasar::replaceAll(v20, (uint64_t)v28, (char *)v26);
      if (v27 < 0)
        operator delete(v26[0]);
      if (v29 < 0)
        operator delete(v28[0]);
      v20 += 224;
    }
    while (v20 != size);
  }
  if ((_DWORD)a8)
    quasar::QuasarTextProc::updateHammeredItnWithEmojiAlternativeName(*(_QWORD *)(a1 + 8), &v25, a9);
  v28[0] = &v25;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v28);
}

void sub_1AD924A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,char *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  a22 = a12;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  a22 = &a19;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  _Unwind_Resume(a1);
}

uint64_t QuasarITNImpl::isEnableAutoPunctuation(uint64_t a1, uint64_t a2, const void **a3, char a4)
{
  return quasar::QuasarTextProc::isEnableAutoPunctuation(*(_QWORD *)(a1 + 8), a2, a3, a4);
}

void QuasarITNImpl::emojiPhraseWithoutKeyword(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  quasar::QuasarTextProc::emojiPhraseWithoutKeyword(*(_QWORD *)(a1 + 8), a2, a3);
}

void QuasarITNImpl::getEndsOfSentencePunctuations(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  quasar::QuasarTextProc::getEndsOfSentencePunctuations(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t SpeechITN::quasarItnExists(uint64_t a1)
{
  const quasar::SystemConfig *v2;
  uint64_t v3;
  _OWORD v5[2];
  int v6;
  uint64_t v7[3];
  _BYTE v8[1544];

  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)v8);
  memset(v7, 0, sizeof(v7));
  memset(v5, 0, sizeof(v5));
  v6 = 1065353216;
  quasar::SystemConfig::readJsonFile((uint64_t)v8, a1, v7, (uint64_t)v5, 0, 0);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v5);
  *(_QWORD *)&v5[0] = v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v5);
  v3 = quasar::QuasarTextProc::qsrTextProcExists((quasar::QuasarTextProc *)v8, v2);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)v8);
  return v3;
}

void sub_1AD924C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)va);
  _Unwind_Resume(a1);
}

void SpeechITN::createQuasarITN(uint64_t a1@<X0>, const quasar::SystemConfig *a2@<X1>, uint64_t *a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  _OWORD v10[2];
  int v11;
  _BYTE v12[1544];

  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)v12);
  memset(v10, 0, sizeof(v10));
  v11 = 1065353216;
  quasar::SystemConfig::readJsonFile((uint64_t)v12, a1, a3, (uint64_t)v10, a4, 0);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v10);
  SpeechITN::createQuasarITN((quasar::QuasarTextProc *)v12, a2, a5);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)v12);
}

void sub_1AD924CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)va);
  _Unwind_Resume(a1);
}

_QWORD *SpeechITN::createQuasarITN@<X0>(quasar::QuasarTextProc *a1@<X0>, const quasar::SystemConfig *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  _QWORD *v7;

  result = (_QWORD *)quasar::QuasarTextProc::qsrTextProcExists(a1, a2);
  if ((_DWORD)result)
  {
    v7 = (_QWORD *)operator new();
    result = QuasarITNImpl::QuasarITNImpl(v7, (uint64_t)a1, (uint64_t)a2);
  }
  else
  {
    v7 = 0;
  }
  *a3 = v7;
  return result;
}

void sub_1AD924D58(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t SpeechITN::isEnableAutoPunctuation()
{
  return 0;
}

void SpeechITN::emojiPhraseWithoutKeyword(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

double SpeechITN::getEndsOfSentencePunctuations@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  return result;
}

void QuasarITNImpl::~QuasarITNImpl(QuasarITNImpl *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E5D164B8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E5D164B8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x1AF44D190);
}

_QWORD *QuasarITNImpl::QuasarITNImpl(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  *a1 = &off_1E5D164B8;
  a1[1] = 0;
  v6 = operator new();
  v12 = 0;
  v13 = 0;
  quasar::QuasarTextProc::QuasarTextProc(v6, a2, &v12, a3);
  v7 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = a1[1];
  a1[1] = v6;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return a1;
}

void sub_1AD924F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  MEMORY[0x1AF44D190](v12, 0x10B3C40B4CC8D0ALL);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  v14 = *(_QWORD *)(v11 + 8);
  *(_QWORD *)(v11 + 8) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

uint64_t quasar::DecoderPassData::DecoderPassData(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, char a8, char a9, _QWORD **a10, _QWORD *a11, uint64_t a12, _QWORD *a13, _QWORD *a14, uint64_t a15, char a16, __int128 **a17, __int128 **a18, __int128 **a19, char a20,char a21,uint64_t **a22)
{
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;

  *(_QWORD *)a1 = *a4;
  v26 = a4[1];
  *(_QWORD *)(a1 + 8) = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  *(_QWORD *)(a1 + 16) = *a5;
  v29 = a5[1];
  *(_QWORD *)(a1 + 24) = v29;
  if (v29)
  {
    v30 = (unint64_t *)(v29 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  *(_QWORD *)(a1 + 32) = *a6;
  v32 = a6[1];
  *(_QWORD *)(a1 + 40) = v32;
  if (v32)
  {
    v33 = (unint64_t *)(v32 + 8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  *(_QWORD *)(a1 + 48) = *a7;
  v35 = a7[1];
  *(_QWORD *)(a1 + 56) = v35;
  if (v35)
  {
    v36 = (unint64_t *)(v35 + 8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  *(_QWORD *)(a1 + 64) = *a14;
  v38 = a14[1];
  *(_QWORD *)(a1 + 72) = v38;
  if (v38)
  {
    v39 = (unint64_t *)(v38 + 8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  v41 = *a6;
  if (*a6)
  {
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(v41 + 32);
    v42 = *(_QWORD *)(v41 + 40);
    *(_QWORD *)(a1 + 88) = v42;
    if (v42)
    {
      v43 = (unint64_t *)(v42 + 8);
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
  }
  else
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  kaldi::SilencePhoneSet::SilencePhoneSet((kaldi::SilencePhoneSet *)(a1 + 96));
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 208) = 1;
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 232) = quasar::Location::UNDEFINED_COORDINATES;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = a1 + 376;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_DWORD *)(a1 + 440) = 1065353216;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_QWORD *)(a1 + 520) = *a3;
  v45 = a3[1];
  *(_QWORD *)(a1 + 528) = v45;
  if (v45)
  {
    v46 = (unint64_t *)(v45 + 8);
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  *(_QWORD *)(a1 + 536) = *a2;
  v48 = a2[1];
  *(_QWORD *)(a1 + 544) = v48;
  if (v48)
  {
    v49 = (unint64_t *)(v48 + 8);
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
  *(_WORD *)(a1 + 552) = 0;
  *(_DWORD *)(a1 + 556) = 0;
  *(_BYTE *)(a1 + 560) = 0;
  *(_BYTE *)(a1 + 561) = a8;
  *(_BYTE *)(a1 + 562) = a9;
  *(_QWORD *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 576) = 0;
  std::vector<std::weak_ptr<quasar::Decoder>>::__init_with_size[abi:ne180100]<std::weak_ptr<quasar::Decoder>*,std::weak_ptr<quasar::Decoder>*>((_QWORD *)(a1 + 568), *a10, a10[1], ((char *)a10[1] - (char *)*a10) >> 4);
  *(_QWORD *)(a1 + 592) = *a11;
  v51 = a11[1];
  *(_QWORD *)(a1 + 600) = v51;
  if (v51)
  {
    v52 = (unint64_t *)(v51 + 8);
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
  quasar::PhonesetMapping::PhonesetMapping((std::string *)(a1 + 608), (__int128 *)a12);
  if (*(char *)(a12 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 632), *(const std::string::value_type **)a12, *(_QWORD *)(a12 + 8));
  }
  else
  {
    v54 = *(_OWORD *)a12;
    *(_QWORD *)(a1 + 648) = *(_QWORD *)(a12 + 16);
    *(_OWORD *)(a1 + 632) = v54;
  }
  *(_BYTE *)(a1 + 656) = 0;
  *(_DWORD *)(a1 + 660) = 0;
  *(_WORD *)(a1 + 664) = 0;
  *(_QWORD *)(a1 + 672) = *a13;
  v55 = a13[1];
  *(_QWORD *)(a1 + 680) = v55;
  if (v55)
  {
    v56 = (unint64_t *)(v55 + 8);
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }
  *(_QWORD *)(a1 + 688) = a15;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_DWORD *)(a1 + 728) = 1065353216;
  *(_BYTE *)(a1 + 736) = a16;
  *(_QWORD *)(a1 + 744) = 0;
  *(_QWORD *)(a1 + 760) = 0;
  *(_QWORD *)(a1 + 752) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 744), *a17, a17[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a17[1] - (char *)*a17) >> 3));
  *(_QWORD *)(a1 + 784) = 0;
  *(_OWORD *)(a1 + 768) = 0u;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 768), *a18, a18[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a18[1] - (char *)*a18) >> 3));
  *(_QWORD *)(a1 + 808) = 0;
  *(_OWORD *)(a1 + 792) = 0u;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 792), *a19, a19[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a19[1] - (char *)*a19) >> 3));
  *(_BYTE *)(a1 + 816) = a20;
  *(_BYTE *)(a1 + 817) = a21;
  *(_QWORD *)(a1 + 824) = 0;
  *(_QWORD *)(a1 + 840) = 0;
  *(_QWORD *)(a1 + 832) = 0;
  std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>((_QWORD *)(a1 + 824), *a22, a22[1], 0xAAAAAAAAAAAAAAABLL * (a22[1] - *a22));
  *(_DWORD *)(a1 + 848) = -1;
  *(_BYTE *)(a1 + 852) = 0;
  return a1;
}

{
  return quasar::DecoderPassData::DecoderPassData(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22);
}

void sub_1AD9253D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, kaldi::SilencePhoneSet *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  void *v25;
  void *v26;

  if (*(char *)(v21 + 631) < 0)
    operator delete(*v24);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v21 + 592);
  a21 = a11;
  std::vector<std::weak_ptr<quasar::Decoder>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v21 + 536);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v23 + 352);
  a21 = v23 + 328;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  a21 = v23 + 304;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v23 + 288);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v22);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v23 + 224);
  std::__tree<int>::destroy(v23 + 200, *(_QWORD **)(v21 + 376));
  v25 = *(void **)(v21 + 344);
  if (v25)
  {
    *(_QWORD *)(v21 + 352) = v25;
    operator delete(v25);
  }
  a21 = v23 + 152;
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  v26 = *(void **)(v21 + 296);
  if (v26)
  {
    *(_QWORD *)(v21 + 304) = v26;
    operator delete(v26);
  }
  a21 = v23 + 104;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  a21 = a12;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a13);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a14);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v23);
  kaldi::SilencePhoneSet::~SilencePhoneSet(a15);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a16);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a17);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a18);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a19);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a20);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v21);
  _Unwind_Resume(a1);
}

void sub_1AD925580()
{
  JUMPOUT(0x1AD92546CLL);
}

void sub_1AD925588()
{
  JUMPOUT(0x1AD925548);
}

void quasar::DecoderPassData::getLeftContextLabels(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, char **a5@<X8>)
{
  unsigned __int8 *v6;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  uint64_t *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  int v27;
  char *v28;
  char *v29;
  char *v30;
  unint64_t v32;
  int v33;
  BOOL v34;
  _OWORD v35[18];

  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v6 = *(unsigned __int8 **)(a1 + 752);
  if (v6 != *(unsigned __int8 **)(a1 + 744))
  {
    v10 = (_QWORD *)(a4 + 8);
    while (1)
    {
      v6 -= 24;
      v11 = quasar::SymbolTableList::strToSymbolId(a2, (uint64_t)v6);
      if (v11 == -1
        || std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a3, v6))
      {
        break;
      }
      v12 = *v10;
      if (*v10)
      {
        v13 = v10;
        do
        {
          v14 = *(_DWORD *)(v12 + 28);
          v15 = v14 < v11;
          if (v14 >= v11)
            v16 = (uint64_t *)v12;
          else
            v16 = (uint64_t *)(v12 + 8);
          if (!v15)
            v13 = (_QWORD *)v12;
          v12 = *v16;
        }
        while (*v16);
        if (v13 != v10 && *((_DWORD *)v13 + 7) <= v11)
          break;
      }
      v18 = a5[1];
      v17 = (unint64_t)a5[2];
      if ((unint64_t)v18 >= v17)
      {
        v20 = *a5;
        v21 = (v18 - *a5) >> 2;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v23 = v17 - (_QWORD)v20;
        if (v23 >> 1 > v22)
          v22 = v23 >> 1;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
          v24 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        if (v24)
        {
          v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a5 + 2), v24);
          v20 = *a5;
          v18 = a5[1];
        }
        else
        {
          v25 = 0;
        }
        v26 = &v25[4 * v21];
        *(_DWORD *)v26 = v11;
        v19 = v26 + 4;
        while (v18 != v20)
        {
          v27 = *((_DWORD *)v18 - 1);
          v18 -= 4;
          *((_DWORD *)v26 - 1) = v27;
          v26 -= 4;
        }
        *a5 = v26;
        a5[1] = v19;
        a5[2] = &v25[4 * v24];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *(_DWORD *)v18 = v11;
        v19 = v18 + 4;
      }
      a5[1] = v19;
      if (v6 == *(unsigned __int8 **)(a1 + 744))
        goto LABEL_35;
    }
    if (quasar::gLogLevel >= 4)
    {
      memset(v35, 0, 272);
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Clipping left context because of unknown or rejected word", 57);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v35);
    }
  }
LABEL_35:
  v28 = *a5;
  v29 = a5[1];
  v30 = v29 - 4;
  if (*a5 != v29 && v30 > v28)
  {
    v32 = (unint64_t)(v28 + 4);
    do
    {
      v33 = *(_DWORD *)(v32 - 4);
      *(_DWORD *)(v32 - 4) = *(_DWORD *)v30;
      *(_DWORD *)v30 = v33;
      v30 -= 4;
      v34 = v32 >= (unint64_t)v30;
      v32 += 4;
    }
    while (!v34);
  }
}

void sub_1AD92581C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a9);
  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::Decoder::Decoder(uint64_t a1, __int128 *a2)
{
  __int128 v3;

  *(_QWORD *)a1 = &off_1E5D3B9B0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v3;
  }
  quasar::SystemConfig::Version::Version((quasar::SystemConfig::Version *)(a1 + 32));
  *(_QWORD *)(a1 + 40) = 0xC800000190;
  *(_QWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 56) = 256;
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = a1 + 120;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = a1 + 144;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = a1 + 168;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = a1 + 264;
  *(_QWORD *)(a1 + 280) = a1 + 288;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = a1 + 312;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_DWORD *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_WORD *)(a1 + 440) = 0;
  *(_DWORD *)(a1 + 444) = 100;
  return a1;
}

void sub_1AD925960(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

BOOL quasar::Decoder::isInitialized(quasar::Decoder *this)
{
  return *((_DWORD *)this + 100) == 1;
}

uint64_t quasar::Decoder::init(uint64_t a1, quasar::SystemConfig *this, uint64_t *a3, uint64_t *a4, uint64_t *a5, _WORD *a6)
{
  uint64_t SpeechModelInfo;
  const quasar::SystemConfig *v13;
  uint64_t *ModelLoaderPtr;
  size_t v15;
  void **v16;
  const void *v17;
  uint64_t result;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *__p[2];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  if (*(_DWORD *)(a1 + 400))
  {
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Parameters for ", 15);
    v22 = *(_QWORD *)(a1 + 8);
    v21 = a1 + 8;
    v20 = v22;
    v23 = *(char *)(v21 + 23);
    if (v23 >= 0)
      v24 = v21;
    else
      v24 = v20;
    if (v23 >= 0)
      v25 = *(unsigned __int8 *)(v21 + 23);
    else
      v25 = *(_QWORD *)(v21 + 8);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v24, v25);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v26, " have already been registered.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  *(_QWORD *)(a1 + 32) = quasar::SystemConfig::getConfigFileVersion(this);
  SpeechModelInfo = quasar::SystemConfig::getSpeechModelInfo(this);
  quasar::SpeechModelInfo::operator=(a1 + 64, SpeechModelInfo);
  quasar::SystemConfig::getLmeAssetPath(this, (std::string *)__p);
  std::string::operator=((std::string *)(a1 + 336), (const std::string *)__p);
  if (SBYTE7(v28) < 0)
    operator delete(__p[0]);
  *(_BYTE *)(a1 + 360) = quasar::QuasarG2PFactory::isPronGuesserWordpiece(this, v13);
  ModelLoaderPtr = (uint64_t *)quasar::SystemConfig::getModelLoaderPtr(this);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(a1 + 368), ModelLoaderPtr);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(a1 + 384), a3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(a1 + 408), a4);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(a1 + 424), a5);
  *(_WORD *)(a1 + 440) = *a6;
  if (*(char *)(a1 + 31) >= 0)
    v15 = *(unsigned __int8 *)(a1 + 31);
  else
    v15 = *(_QWORD *)(a1 + 16);
  v16 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v15 + 1);
  if (SBYTE7(v28) < 0)
    v16 = (void **)__p[0];
  if (v15)
  {
    if (*(char *)(a1 + 31) >= 0)
      v17 = (const void *)(a1 + 8);
    else
      v17 = *(const void **)(a1 + 8);
    memmove(v16, v17, v15);
  }
  *(_WORD *)((char *)v16 + v15) = 46;
  quasar::SystemConfig::setPrefix((std::string *)this, (const std::string *)__p);
  if (SBYTE7(v28) < 0)
    operator delete(__p[0]);
  (**(void (***)(uint64_t, quasar::SystemConfig *))a1)(a1, this);
  quasar::SystemConfig::readPtree((uint64_t)this, a1 + 8, 0, 1);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  *(_DWORD *)(a1 + 400) = 1;
  return result;
}

void sub_1AD925BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL quasar::Decoder::exceedsMaxArcs(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  _QWORD *v5;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v8;
  _QWORD *v9;
  std::string __p;
  _OWORD v12[17];

  if (*(int *)(a1 + 52) < 1)
    return 0;
  if (!*(_QWORD *)a2)
    return 0;
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 152);
  if (!v3)
    return 0;
  v4 = fst::NumArcs<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(v3);
  if (quasar::gLogLevel >= 4)
  {
    memset(v12, 0, sizeof(v12));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Decoder: ", 9);
    if (*(char *)(a1 + 31) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
    else
      __p = *(std::string *)(a1 + 8);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)p_p, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" inputArcs=", 11);
    v9 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" maxArcs=", 9);
    std::ostream::operator<<();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v12);
  }
  return v4 > *(_DWORD *)(a1 + 52);
}

void sub_1AD925D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a16);
  _Unwind_Resume(a1);
}

uint64_t fst::NumArcs<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1) < 1)
    return 0;
  v2 = 0;
  LODWORD(v3) = 0;
  do
  {
    v3 = v3 + (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v2);
    v2 = (v2 + 1);
  }
  while ((int)v2 < (*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1));
  return v3;
}

uint64_t quasar::Decoder::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, int a6, uint64_t a7)
{
  double *v14;
  clockid_t v15;
  double Seconds;
  double v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  double *v21;
  clockid_t v22;
  double v23;
  double v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  BOOL v30;
  _QWORD *v31;
  _QWORD *v32;
  std::string *p_p;
  std::string::size_type size;
  uint64_t v35;
  std::string *v36;
  std::string::size_type v37;
  std::string *v38;
  std::string::size_type v39;
  std::string *v40;
  std::string::size_type v41;
  double *v42;
  clockid_t v43;
  double v44;
  double v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  double v49;
  _QWORD *v50;
  _QWORD *v51;
  std::string *v52;
  std::string::size_type v53;
  _QWORD *v54;
  std::string *v55;
  std::string::size_type v56;
  _QWORD *v57;
  uint64_t v58;
  std::string *v59;
  __int128 v60;
  double *v61;
  clockid_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  std::string __p;
  void *v77[2];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;

  if (*(_DWORD *)(a1 + 400) != 1)
  {
    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    *(_OWORD *)v77 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v77);
    v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"Must call init() for ", 21);
    v71 = *(_QWORD *)(a1 + 8);
    v70 = a1 + 8;
    v69 = v71;
    v72 = *(char *)(v70 + 23);
    if (v72 >= 0)
      v73 = v70;
    else
      v73 = v69;
    if (v72 >= 0)
      v74 = *(unsigned __int8 *)(v70 + 23);
    else
      v74 = *(_QWORD *)(v70 + 8);
    v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, v73, v74);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v75, " before calling run().");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v77);
  }
  quasar::SpeechRequestData::getRecogRequestTimer(*a4, v77);
  v14 = (double *)v77[0];
  Seconds = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v15);
  v17 = *v14;
  v18 = (std::__shared_weak_count *)v77[1];
  if (v77[1])
  {
    v19 = (unint64_t *)((char *)v77[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  quasar::SpeechRequestData::getRecogRequestTimer(*a4, v77);
  v21 = (double *)v77[0];
  v23 = kaldi::Timer::GetSeconds((kaldi::Timer *)0x10, v22);
  v24 = v21[2];
  v25 = (std::__shared_weak_count *)v77[1];
  if (v77[1])
  {
    v26 = (unint64_t *)((char *)v77[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 176))(a1, a3))
  {
    if (quasar::gLogLevel >= 4)
    {
      v92 = 0u;
      v93 = 0u;
      v90 = 0u;
      v91 = 0u;
      v88 = 0u;
      v89 = 0u;
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      *(_OWORD *)v77 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v77);
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"Skipping Decoder: ", 18);
      if (*(char *)(a1 + 31) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
      else
        __p = *(std::string *)(a1 + 8);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v77);
    }
    v35 = 2 * *(unsigned __int8 *)(a1 + 56);
  }
  else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1)
         && *(_BYTE *)(*(_QWORD *)(*a4 + 24) + 53))
  {
    if (quasar::gLogLevel >= 4)
    {
      v92 = 0u;
      v93 = 0u;
      v90 = 0u;
      v91 = 0u;
      v88 = 0u;
      v89 = 0u;
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      *(_OWORD *)v77 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v77);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"Audio analytics are unneeded. Skipping Decoder: ", 48);
      if (*(char *)(a1 + 31) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
      else
        __p = *(std::string *)(a1 + 8);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v40 = &__p;
      else
        v40 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v41 = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v40, v41);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v77);
    }
    v35 = 0;
  }
  else
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1))
      v30 = *(_QWORD *)(a2 + 536) == 0;
    else
      v30 = 0;
    if (v30)
    {
      if (quasar::gLogLevel >= 1)
      {
        v92 = 0u;
        v93 = 0u;
        v90 = 0u;
        v91 = 0u;
        v88 = 0u;
        v89 = 0u;
        v86 = 0u;
        v87 = 0u;
        v84 = 0u;
        v85 = 0u;
        v82 = 0u;
        v83 = 0u;
        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        *(_OWORD *)v77 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v77);
        v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"Error: Utterance features were improperly cached. Failing Decoder: ", 67);
        if (*(char *)(a1 + 31) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
        else
          __p = *(std::string *)(a1 + 8);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v36 = &__p;
        else
          v36 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v37 = __p.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v36, v37);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v77);
      }
      v35 = 2;
    }
    else
    {
      if (quasar::gLogLevel >= 4)
      {
        v92 = 0u;
        v93 = 0u;
        v90 = 0u;
        v91 = 0u;
        v88 = 0u;
        v89 = 0u;
        v86 = 0u;
        v87 = 0u;
        v84 = 0u;
        v85 = 0u;
        v82 = 0u;
        v83 = 0u;
        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        *(_OWORD *)v77 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v77);
        v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"Running Decoder: ", 17);
        if (*(char *)(a1 + 31) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
        else
          __p = *(std::string *)(a1 + 8);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = &__p;
        else
          v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v39 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v39 = __p.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v38, v39);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v77);
      }
      v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2, a3, a4, a5, a7);
    }
  }
  quasar::SpeechRequestData::getRecogRequestTimer(*a4, v77);
  v42 = (double *)v77[0];
  v44 = Seconds - v17;
  v45 = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v43) - *v42;
  v46 = (std::__shared_weak_count *)v77[1];
  if (v77[1])
  {
    v47 = (unint64_t *)((char *)v77[1] + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = v45 - v44;
  if ((_DWORD)v35 == 2)
  {
    if (quasar::gLogLevel < 4)
      goto LABEL_106;
    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    *(_OWORD *)v77 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v77);
    v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"Decoder ", 8);
    if (*(char *)(a1 + 31) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
    else
      __p = *(std::string *)(a1 + 8);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v52 = &__p;
    else
      v52 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v53 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v53 = __p.__r_.__value_.__l.__size_;
    v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)v52, v53);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)" failed. decoderDuration: ", 26);
    std::ostream::operator<<();
  }
  else
  {
    if (quasar::gLogLevel < 4)
      goto LABEL_106;
    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    *(_OWORD *)v77 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v77);
    v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"Decoder ", 8);
    if (*(char *)(a1 + 31) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
    else
      __p = *(std::string *)(a1 + 8);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v55 = &__p;
    else
      v55 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v56 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v56 = __p.__r_.__value_.__l.__size_;
    v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v55, v56);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)" succeeded. decoderDuration: ", 29);
    std::ostream::operator<<();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v77);
LABEL_106:
  v58 = *(_QWORD *)(*(_QWORD *)a3 + 424);
  if (*(char *)(a1 + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  else
    __p = *(std::string *)(a1 + 8);
  v59 = std::string::append(&__p, "Time");
  v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
  *(_QWORD *)&v78 = *((_QWORD *)&v59->__r_.__value_.__l + 2);
  *(_OWORD *)v77 = v60;
  v59->__r_.__value_.__l.__size_ = 0;
  v59->__r_.__value_.__r.__words[2] = 0;
  v59->__r_.__value_.__r.__words[0] = 0;
  quasar::SpeechRequestResultData::addDump(v58, (__int128 *)v77, v49);
  if (SBYTE7(v78) < 0)
    operator delete(v77[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!a6)
      return v35;
  }
  else if (!a6)
  {
    return v35;
  }
  quasar::SpeechRequestData::getRecogRequestTimer(*a4, v77);
  v61 = (double *)v77[0];
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 424) + 80) = (int)((double)*(int *)(*(_QWORD *)(*(_QWORD *)a3 + 424)
                                                                                + 80)
                                                               + (kaldi::Timer::GetSeconds((kaldi::Timer *)0x10, v62)
                                                                - v61[2]
                                                                - (v23
                                                                 - v24))
                                                               * 1000.0);
  v63 = (std::__shared_weak_count *)v77[1];
  if (v77[1])
  {
    v64 = (unint64_t *)((char *)v77[1] + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = *(_QWORD *)(*(_QWORD *)a3 + 424);
  std::string::basic_string[abi:ne180100]<0>(v77, "FirstPassCpuMs");
  *(double *)&__p.__r_.__value_.__l.__data_ = (double)*(int *)(*(_QWORD *)(*(_QWORD *)a3 + 424) + 80);
  quasar::SpeechRequestResultData::addAA(v66, (__int128 *)v77, (double *)&__p, 1);
  if (SBYTE7(v78) < 0)
    operator delete(v77[0]);
  return v35;
}

uint64_t quasar::Decoder::setUpParams(quasar::Decoder *this, quasar::SystemConfig *a2)
{
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(v7, "stabilizer-averaging-period-ms");
  std::string::basic_string[abi:ne180100]<0>(__p, "Duration in milliseconds over which to stabilize partial results");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 40, (uint64_t)__p, 0, 28, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "stabilizer-minimum-word-seen-ms");
  std::string::basic_string[abi:ne180100]<0>(__p, "Minimum duration in milliseconds that word must be recognized before it is considered stable");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 44, (uint64_t)__p, 0, 28, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "dfst-cache-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "The maximum number of items cached by each deterministic FST. Has no effect if the decoder doesn't use deterministic FST.");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 48, (uint64_t)__p, 0, 183, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "max-arcs");
  std::string::basic_string[abi:ne180100]<0>(__p, "If > 0, decoder does nothing and returns Decoder::Success if the number of input lattice arcs exceeds this value. Decoders can customize behavior related to max-arcs. For example, rescoring decoder scales the lattice before checking max-arcs and keeps checks max-arcs while it runs.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 52, (uint64_t)__p, 0, 221, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "max-arcs-fail-decoder");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, return Decoder::Failed instead of Decoder::Success when exceeding max-arcs. This stops execution of subsequent decoders in the decoder chain but does not stop or fail the request. Decoders can customize behavior related to max-arcs-fail-decoder");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v7, (uint64_t)this + 56, (uint64_t)__p, 0, 221, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "double-partial-silence-interval-ms");
  std::string::basic_string[abi:ne180100]<0>(__p, "if > 0, write a second partial result with a delay of trailing silence duration milliseconds");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 444, (uint64_t)__p, 0, 221, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  return (*(uint64_t (**)(quasar::Decoder *, quasar::SystemConfig *))(*(_QWORD *)this + 168))(this, a2);
}

void sub_1AD926A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::Decoder::runAsyncTasks()
{
  return 0;
}

uint64_t quasar::Decoder::isLikelyWithPhoeticName(const std::string *a1)
{
  const std::string *v2;
  char *i;
  int64_t v4;
  const std::string *v5;
  int64_t size;
  char *v7;
  std::string *v8;
  char *v9;
  const std::string *v10;
  char *v11;
  std::string *v12;
  char *v13;
  std::string::size_type v14;
  int v15;
  void *v16;
  int64_t v17;
  std::string *p_p;
  _BYTE *v19;
  std::string *v20;
  _BYTE *v21;
  BOOL v22;
  BOOL v23;
  uint64_t v24;
  std::string __p;
  const std::string *v27;
  char *v28;
  char v29;

  std::string::basic_string[abi:ne180100]<0>(&__p, "~w00");
  quasar::splitAndTrimNoEmpty(a1, (char *)&__p, &v27);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v2 = v27;
  for (i = v28; v2 != (const std::string *)i; ++v2)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
    {
      v5 = (const std::string *)v2->__r_.__value_.__r.__words[0];
      size = v2->__r_.__value_.__l.__size_;
    }
    else
    {
      v5 = v2;
      size = HIBYTE(v2->__r_.__value_.__r.__words[2]);
    }
    if (size >= 1)
    {
      v7 = (char *)v5 + size;
      v8 = (std::string *)v5;
      do
      {
        v9 = (char *)memchr(v8, 92, size);
        if (!v9)
          break;
        if (*v9 == 92)
        {
          if (v9 != v7 && v9 - (char *)v5 != -1)
          {
            if ((v4 & 0x80) != 0)
            {
              v10 = (const std::string *)v2->__r_.__value_.__r.__words[0];
              v4 = v2->__r_.__value_.__l.__size_;
            }
            else
            {
              v10 = v2;
            }
            v11 = (char *)v10 + v4;
            if (v4 >= 1)
            {
              v12 = (std::string *)v10;
              do
              {
                v13 = (char *)memchr(v12, 92, v4);
                if (!v13)
                  break;
                if (*v13 == 92)
                  goto LABEL_24;
                v12 = (std::string *)(v13 + 1);
                v4 = v11 - (char *)v12;
              }
              while (v11 - (char *)v12 > 0);
            }
            v13 = v11;
LABEL_24:
            if (v13 == v11)
              v14 = 0;
            else
              v14 = v13 - (char *)v10 + 1;
            std::string::basic_string(&__p, v2, v14, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v29);
            v15 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
            v16 = (void *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              v17 = __p.__r_.__value_.__l.__size_;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_p = &__p;
            else
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            v19 = (char *)p_p + v17;
            if (v17 >= 1)
            {
              v20 = p_p;
              do
              {
                v21 = memchr(v20, 92, v17);
                if (!v21)
                  break;
                if (*v21 == 92)
                  goto LABEL_39;
                v20 = (std::string *)(v21 + 1);
                v17 = v19 - (_BYTE *)v20;
              }
              while (v19 - (_BYTE *)v20 > 0);
            }
            v21 = v19;
LABEL_39:
            v22 = v21 == v19 || v21 - (_BYTE *)p_p == -1;
            v23 = v22;
            if (v15 < 0)
              operator delete(v16);
            if (!v23)
            {
              v24 = 1;
              goto LABEL_50;
            }
          }
          break;
        }
        v8 = (std::string *)(v9 + 1);
        size = v7 - (char *)v8;
      }
      while (v7 - (char *)v8 >= 1);
    }
  }
  v24 = 0;
LABEL_50:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return v24;
}

void sub_1AD926CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::Decoder::splitLmePartialResult(std::vector<std::wstring> *a1, uint64_t **a2)
{
  uint64_t begin;
  int v3;
  std::string::size_type v4;
  const std::string::value_type *v5;
  int64_t v6;
  const std::string::value_type *v7;
  void *v8;
  char *v9;
  int64_t v10;
  void *v11;
  char *v12;
  int64_t v14;
  void *v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t isLikelyWithPhoeticName;
  char v20;
  std::vector<std::string>::pointer v21;
  __int128 v22;
  std::string *v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  std::string *v31;
  std::vector<std::wstring>::pointer v32;
  std::string *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  std::wstring *v37;
  std::wstring::size_type v38;
  std::wstring *v39;
  std::wstring::size_type size;
  int v41;
  unsigned __int8 *v42;
  std::wstring *v43;
  char *v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  int v47;
  std::wstring *v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  int v54;
  std::string::size_type v55;
  std::string::size_type v56;
  std::wstring *v57;
  std::wstring::size_type v58;
  std::wstring *v59;
  unsigned __int8 *v60;
  std::wstring *v61;
  std::wstring *v62;
  std::wstring *v63;
  unsigned __int8 *v64;
  int v65;
  std::string::size_type v66;
  std::string::size_type v67;
  std::wstring *v68;
  __int128 v69;
  quasar::QsrText *v70;
  __int128 v71;
  quasar::QsrText *v72;
  char *v73;
  unint64_t v74;
  __int128 v75;
  std::__split_buffer<std::wstring>::pointer v76;
  uint64_t v77;
  BOOL v78;
  std::vector<std::wstring>::pointer v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  std::vector<std::string>::pointer v83;
  __int128 v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  std::wstring *v88;
  std::wstring *v89;
  __int128 v90;
  std::string *v91;
  std::wstring *end;
  void *v95[2];
  std::string::size_type v96;
  std::vector<std::wstring> __p;
  void *v98[2];
  std::__split_buffer<std::wstring>::pointer v99;
  unint64_t v100;
  quasar::QsrText *v101;
  unint64_t v102;
  std::vector<std::wstring> v103;
  std::vector<std::string> v104;
  std::vector<std::wstring> *p_p;
  std::__split_buffer<std::wstring> __str;

  memset(&v104, 0, sizeof(v104));
  begin = (uint64_t)a1->__begin_;
  end = a1->__end_;
  if (a1->__begin_ != end)
  {
    do
    {
      v3 = *(char *)(begin + 23);
      v5 = *(const std::string::value_type **)begin;
      v4 = *(_QWORD *)(begin + 8);
      if (v3 >= 0)
        v6 = *(unsigned __int8 *)(begin + 23);
      else
        v6 = *(_QWORD *)(begin + 8);
      if (v3 >= 0)
        v7 = (const std::string::value_type *)begin;
      else
        v7 = *(const std::string::value_type **)begin;
      if (v6 >= 9)
      {
        v8 = (void *)v7;
        v9 = (char *)&v7[v6];
        v10 = v6;
        v11 = (void *)v7;
        do
        {
          v12 = (char *)memchr(v11, 92, v10 - 8);
          if (!v12)
            break;
          if (*(_QWORD *)v12 == 0x746361746E6F635CLL && v12[8] == 45)
          {
            if (v12 != v9 && v12 - v7 != -1)
            {
              v14 = v6;
              v15 = (void *)v7;
              do
              {
                if (v14 == 3)
                  break;
                v16 = (char *)memchr(v15, 126, v14 - 3);
                if (!v16)
                  break;
                if (*(_DWORD *)v16 == 808482686)
                {
                  if (v16 == v9 || v16 - v7 == -1)
                    break;
LABEL_33:
                  if (v3 < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)&__str, v5, v4);
                  }
                  else
                  {
                    v18 = *(_OWORD *)begin;
                    __str.__end_ = *(std::__split_buffer<std::wstring>::pointer *)(begin + 16);
                    *(_OWORD *)&__str.__first_ = v18;
                  }
                  isLikelyWithPhoeticName = quasar::Decoder::isLikelyWithPhoeticName((const std::string *)&__str);
                  v20 = isLikelyWithPhoeticName;
                  if (SHIBYTE(__str.__end_) < 0)
                  {
                    operator delete(__str.__first_);
                    if ((v20 & 1) != 0)
                      goto LABEL_38;
                  }
                  else if ((isLikelyWithPhoeticName & 1) != 0)
                  {
                    goto LABEL_38;
                  }
                  memset(&v103, 0, sizeof(v103));
                  v100 = 0;
                  v101 = 0;
                  v102 = 0;
                  v98[0] = 0;
                  v98[1] = 0;
                  v99 = 0;
                  v24 = (uint64_t *)a2;
                  v25 = *((char *)a2 + 23);
                  if (v25 < 0)
                  {
                    if (a2[1] != (uint64_t *)17)
                      goto LABEL_60;
                    v24 = *a2;
                  }
                  else if (v25 != 17)
                  {
                    goto LABEL_60;
                  }
                  v26 = *v24;
                  v27 = v24[1];
                  v28 = *((unsigned __int8 *)v24 + 16);
                  if (v26 == 0x724F686372616553 && v27 == 0x6E6967617373654DLL && v28 == 103)
                  {
                    memset(&__str, 0, 24);
                    v35 = quasar::QsrText::SingletonInstance((quasar::QsrText *)isLikelyWithPhoeticName);
                    quasar::QsrText::decodeQsrText(v35, begin, (uint64_t)&__str);
                    std::string::basic_string[abi:ne180100]<0>(v95, " ");
                    quasar::splitAndTrimNoEmpty((const std::string *)&__str, (char *)v95, &__p);
                    std::vector<std::string>::__vdeallocate(&v103);
                    v103 = __p;
                    memset(&__p, 0, sizeof(__p));
                    p_p = &__p;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
                    if (SHIBYTE(v96) < 0)
                      operator delete(v95[0]);
                    if (SHIBYTE(__str.__end_) < 0)
                      operator delete(__str.__first_);
                  }
                  else
                  {
LABEL_60:
                    std::string::basic_string[abi:ne180100]<0>(&__p, "~w00");
                    quasar::splitAndTrimNoEmpty((const std::string *)begin, (char *)&__p, &__str);
                    std::vector<std::string>::__vdeallocate(&v103);
                    *(_OWORD *)&v103.__begin_ = *(_OWORD *)&__str.__first_;
                    v103.__end_cap_.__value_ = __str.__end_;
                    memset(&__str, 0, 24);
                    v95[0] = &__str;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v95);
                    if (SHIBYTE(__p.__end_cap_.__value_) < 0)
                      operator delete(__p.__begin_);
                    v33 = (std::string *)v103.__begin_;
                    v32 = v103.__end_;
                    while (v33 != (std::string *)v32)
                    {
                      memset(&__str, 0, 24);
                      v34 = quasar::QsrText::SingletonInstance((quasar::QsrText *)v31);
                      quasar::QsrText::decodeQsrText(v34, (uint64_t)v33, (uint64_t)&__str);
                      v31 = std::string::operator=(v33, (const std::string *)&__str);
                      if (SHIBYTE(__str.__end_) < 0)
                        operator delete(__str.__first_);
                      ++v33;
                    }
                  }
                  v36 = -1 - 1431655765 * ((unint64_t)((char *)v103.__end_ - (char *)v103.__begin_) >> 3);
                  if (v36 < 0)
                  {
                    v72 = v101;
                  }
                  else
                  {
                    do
                    {
                      v37 = &v103.__begin_[v36];
                      v38 = HIBYTE(v37->__r_.__value_.__r.__words[2]);
                      if (SHIBYTE(v37->__r_.__value_.__r.__words[2]) < 0)
                      {
                        v39 = (std::wstring *)v37->__r_.__value_.__r.__words[0];
                        size = v37->__r_.__value_.__l.__size_;
                      }
                      else
                      {
                        v39 = &v103.__begin_[v36];
                        size = HIBYTE(v37->__r_.__value_.__r.__words[2]);
                      }
                      v41 = v36;
                      if (size)
                      {
                        v42 = (unsigned __int8 *)v39 + size;
                        v43 = v39;
                        v44 = (char *)v39 + size;
                        do
                        {
                          v45 = (unsigned __int8 *)v43;
                          v46 = (unsigned __int8 *)v43;
                          while (1)
                          {
                            v47 = *v46++;
                            if (v47 == 92)
                              break;
                            v45 = v46;
                            if (v46 == v42)
                            {
                              v45 = (unsigned __int8 *)v44;
                              goto LABEL_82;
                            }
                          }
                          v43 = (std::wstring *)(v45 + 1);
                          v44 = (char *)v45;
                        }
                        while (v46 != v42);
LABEL_82:
                        if (v45 != v42 && v45 - (unsigned __int8 *)v39 != -1)
                        {
                          if ((v38 & 0x80) != 0)
                          {
                            v48 = (std::wstring *)v37->__r_.__value_.__r.__words[0];
                            v38 = v37->__r_.__value_.__l.__size_;
                          }
                          else
                          {
                            v48 = v37;
                          }
                          v49 = (unsigned __int8 *)v48 + v38;
                          if (v38)
                          {
                            v50 = (unsigned __int8 *)v48;
                            v51 = (unsigned __int8 *)v48 + v38;
                            do
                            {
                              v52 = v50;
                              v53 = v50;
                              while (1)
                              {
                                v54 = *v53++;
                                if (v54 == 92)
                                  break;
                                v52 = v53;
                                if (v53 == v49)
                                {
                                  v52 = v51;
                                  goto LABEL_96;
                                }
                              }
                              v50 = v52 + 1;
                              v51 = v52;
                            }
                            while (v53 != v49);
                          }
                          else
                          {
                            v52 = (unsigned __int8 *)v48;
                          }
LABEL_96:
                          v55 = v52 - (unsigned __int8 *)v48;
                          if (v52 == v49)
                            v56 = -1;
                          else
                            v56 = v55;
                          std::string::basic_string((std::string *)&__str, (const std::string *)v37, v56, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__p);
                          if (SHIBYTE(v99) < 0)
                            operator delete(v98[0]);
                          *(_OWORD *)v98 = *(_OWORD *)&__str.__first_;
                          v99 = __str.__end_;
                          v57 = &v103.__begin_[v41];
                          if (SHIBYTE(v57->__r_.__value_.__r.__words[2]) < 0)
                          {
                            v59 = (std::wstring *)v57->__r_.__value_.__r.__words[0];
                            v58 = v57->__r_.__value_.__l.__size_;
                          }
                          else
                          {
                            v58 = HIBYTE(v57->__r_.__value_.__r.__words[2]);
                            v59 = &v103.__begin_[v41];
                          }
                          v60 = (unsigned __int8 *)v59 + v58;
                          if (v58)
                          {
                            v61 = v59;
                            v62 = (std::wstring *)((char *)v59 + v58);
                            do
                            {
                              v63 = v61;
                              v64 = (unsigned __int8 *)v61;
                              while (1)
                              {
                                v65 = *v64++;
                                if (v65 == 92)
                                  break;
                                v63 = (std::wstring *)v64;
                                if (v64 == v60)
                                {
                                  v63 = v62;
                                  goto LABEL_113;
                                }
                              }
                              v61 = (std::wstring *)((char *)&v63->__r_.__value_.__l.__data_ + 1);
                              v62 = v63;
                            }
                            while (v64 != v60);
                          }
                          else
                          {
                            v63 = v59;
                          }
LABEL_113:
                          v66 = (char *)v63 - (char *)v59;
                          if (v63 == (std::wstring *)v60)
                            v67 = -1;
                          else
                            v67 = v66;
                          std::string::basic_string((std::string *)&__str, (const std::string *)v57, 0, v67, (std::allocator<char> *)&__p);
                          v68 = &v103.__begin_[v41];
                          if (SHIBYTE(v68->__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v68->__r_.__value_.__l.__data_);
                          v69 = *(_OWORD *)&__str.__first_;
                          v68->__r_.__value_.__r.__words[2] = (std::wstring::size_type)__str.__end_;
                          *(_OWORD *)&v68->__r_.__value_.__l.__data_ = v69;
                        }
                      }
                      v70 = v101;
                      if ((unint64_t)v101 >= v102)
                      {
                        v72 = (quasar::QsrText *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v100, (__int128 *)v98);
                      }
                      else
                      {
                        if (SHIBYTE(v99) < 0)
                        {
                          std::string::__init_copy_ctor_external((std::string *)v101, (const std::string::value_type *)v98[0], (std::string::size_type)v98[1]);
                        }
                        else
                        {
                          v71 = *(_OWORD *)v98;
                          *((_QWORD *)v101 + 2) = v99;
                          *(_OWORD *)v70 = v71;
                        }
                        v72 = (quasar::QsrText *)((char *)v70 + 24);
                      }
                      v101 = v72;
                      v36 = v41 - 1;
                    }
                    while (v41 > 0);
                  }
                  if ((quasar::QsrText *)v100 != v72)
                  {
                    v73 = (char *)v72 - 24;
                    if ((unint64_t)v72 - 24 > v100)
                    {
                      v74 = v100 + 24;
                      do
                      {
                        *(_OWORD *)&__str.__first_ = *(_OWORD *)(v74 - 24);
                        v75 = *(_OWORD *)&__str.__first_;
                        __str.__end_ = *(std::__split_buffer<std::wstring>::pointer *)(v74 - 8);
                        v76 = __str.__end_;
                        v77 = *((_QWORD *)v73 + 2);
                        *(_OWORD *)(v74 - 24) = *(_OWORD *)v73;
                        *(_QWORD *)(v74 - 8) = v77;
                        *((_QWORD *)v73 + 2) = v76;
                        *(_OWORD *)v73 = v75;
                        v73 -= 24;
                        v78 = v74 >= (unint64_t)v73;
                        v74 += 24;
                      }
                      while (!v78);
                    }
                  }
                  v79 = v103.__begin_;
                  if (v103.__end_ != v103.__begin_)
                  {
                    v80 = 0;
                    v81 = 0;
                    do
                    {
                      memset(&__p, 0, sizeof(__p));
                      v82 = quasar::QsrText::SingletonInstance(v72);
                      quasar::QsrText::encodeTokenQsrText(v82, (uint64_t)&v79[v80], (uint64_t)&__p);
                      v72 = (quasar::QsrText *)std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__p.__begin_, (const void **)(v100 + v80 * 24), (uint64_t)v95);
                      v83 = v104.__end_;
                      if (v104.__end_ >= v104.__end_cap_.__value_)
                      {
                        v85 = 0xAAAAAAAAAAAAAAABLL * (((char *)v104.__end_ - (char *)v104.__begin_) >> 3);
                        v86 = v85 + 1;
                        if (v85 + 1 > 0xAAAAAAAAAAAAAAALL)
                          std::vector<int>::__throw_length_error[abi:ne180100]();
                        if (0x5555555555555556 * (((char *)v104.__end_cap_.__value_ - (char *)v104.__begin_) >> 3) > v86)
                          v86 = 0x5555555555555556 * (((char *)v104.__end_cap_.__value_ - (char *)v104.__begin_) >> 3);
                        if (0xAAAAAAAAAAAAAAABLL * (((char *)v104.__end_cap_.__value_ - (char *)v104.__begin_) >> 3) >= 0x555555555555555)
                          v87 = 0xAAAAAAAAAAAAAAALL;
                        else
                          v87 = v86;
                        __str.__end_cap_.__value_ = (std::allocator<std::wstring> *)&v104.__end_cap_;
                        if (v87)
                          v88 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v104.__end_cap_, v87);
                        else
                          v88 = 0;
                        v89 = v88 + v85;
                        __str.__first_ = v88;
                        __str.__begin_ = v89;
                        __str.__end_cap_.__value_ = &v88[v87];
                        v90 = *(_OWORD *)v95;
                        v89->__r_.__value_.__r.__words[2] = v96;
                        *(_OWORD *)&v89->__r_.__value_.__l.__data_ = v90;
                        v95[1] = 0;
                        v96 = 0;
                        v95[0] = 0;
                        __str.__end_ = v89 + 1;
                        std::vector<std::string>::__swap_out_circular_buffer(&v104, (std::__split_buffer<std::string> *)&__str);
                        v91 = v104.__end_;
                        std::__split_buffer<std::string>::~__split_buffer(&__str);
                        v104.__end_ = v91;
                        if (SHIBYTE(v96) < 0)
                          operator delete(v95[0]);
                      }
                      else
                      {
                        v84 = *(_OWORD *)v95;
                        v104.__end_->__r_.__value_.__r.__words[2] = v96;
                        *(_OWORD *)&v83->__r_.__value_.__l.__data_ = v84;
                        v104.__end_ = v83 + 1;
                      }
                      if (SHIBYTE(__p.__end_cap_.__value_) < 0)
                        operator delete(__p.__begin_);
                      ++v81;
                      v79 = v103.__begin_;
                      ++v80;
                    }
                    while (v81 != 0xAAAAAAAAAAAAAAABLL * (((char *)v103.__end_ - (char *)v103.__begin_) >> 3));
                  }
                  if (SHIBYTE(v99) < 0)
                    operator delete(v98[0]);
                  __str.__first_ = (std::__split_buffer<std::wstring>::pointer)&v100;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
                  __str.__first_ = (std::__split_buffer<std::wstring>::pointer)&v103;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
                  goto LABEL_45;
                }
                v15 = v16 + 1;
                v14 = v9 - (_BYTE *)v15;
              }
              while (v9 - (_BYTE *)v15 >= 4);
              while (1)
              {
                v17 = (char *)memchr(v8, 95, v6);
                if (!v17)
                  break;
                if (*v17 == 95)
                {
                  if (v17 == v9 || v17 - v7 == -1)
                    goto LABEL_38;
                  goto LABEL_33;
                }
                v8 = v17 + 1;
                v6 = v9 - (v17 + 1);
                if (v6 < 1)
                  goto LABEL_38;
              }
            }
            break;
          }
          v11 = v12 + 1;
          v10 = v9 - (_BYTE *)v11;
        }
        while (v9 - (_BYTE *)v11 >= 9);
      }
LABEL_38:
      v21 = v104.__end_;
      if (v104.__end_ >= v104.__end_cap_.__value_)
      {
        v23 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v104, (__int128 *)begin);
      }
      else
      {
        if (*(char *)(begin + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v104.__end_, *(const std::string::value_type **)begin, *(_QWORD *)(begin + 8));
        }
        else
        {
          v22 = *(_OWORD *)begin;
          v104.__end_->__r_.__value_.__r.__words[2] = *(_QWORD *)(begin + 16);
          *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
        }
        v23 = v21 + 1;
      }
      v104.__end_ = v23;
LABEL_45:
      begin += 24;
    }
    while ((std::wstring *)begin != end);
  }
  if (&v104 != (std::vector<std::string> *)a1)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(a1, v104.__begin_, (__int128 *)v104.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v104.__end_ - (char *)v104.__begin_) >> 3));
  __str.__first_ = (std::__split_buffer<std::wstring>::pointer)&v104;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
}

void sub_1AD927584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char ***a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char **a33,uint64_t a34,uint64_t a35,char *a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41)
{
  uint64_t v41;

  if (a19 < 0)
    operator delete(__p);
  if (*(char *)(v41 - 121) < 0)
    operator delete(*(void **)(v41 - 144));
  if (a32 < 0)
    operator delete(a27);
  a27 = &a33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  a33 = &a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  a36 = &a40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);
  _Unwind_Resume(a1);
}

uint64_t quasar::Decoder::reportResults(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int *v11;
  int v12;
  int v13;
  float v14;
  __int128 v15;
  uint64_t v16;
  _BOOL4 isPrintable;
  int v18;
  int *v19;
  int *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v30;
  void *__p[2];
  char v32;
  void **v33[3];
  __int128 v34;
  uint64_t v35;
  std::string v36;
  __int128 v37;
  uint64_t v38;
  void *v39[2];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[32];
  __int128 v44;
  _BYTE v45[32];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  char v54;
  int *v55;
  int *v56;
  uint64_t v57;

  v55 = 0;
  v56 = 0;
  v57 = 0;
  v54 = 0;
  if ((quasar::Decoder::getLinearOutputSymbolSequenceWithDuration<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,int>(a1, (uint64_t *)&v55, 0, (_QWORD *)a4, &v54, 0, 0, 0, (char **)(*a2 + 1008)) & 1) != 0)
  {
    v7 = *a2;
    *(_BYTE *)(v7 + 144) = *(_BYTE *)(*a2 + 144) | v54;
    quasar::SymbolTableList::lookup(*(uint64_t **)(v7 + 472), &v55, (uint64_t *)(v7 + 48), (char **)(v7 + 72), 1);
    v8 = *a2;
    if (!*(_DWORD *)(*a2 + 624))
    {
      v9 = *(_QWORD *)(v8 + 56);
      v10 = v9 - *(_QWORD *)(v8 + 48);
      if (v10)
      {
        v11 = &v55[12 * (int)(-1431655765 * (v10 >> 3) - 1)];
        v12 = v11[1];
        v13 = v11[2];
        v14 = *((float *)v11 + 3);
        v37 = 0uLL;
        v38 = 0;
        if (*(char *)(v9 - 1) < 0)
        {
          std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)(v9 - 24), *(_QWORD *)(v9 - 16));
        }
        else
        {
          v15 = *(_OWORD *)(v9 - 24);
          v36.__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 - 8);
          *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v15;
        }
        std::string::basic_string[abi:ne180100]<0>(&v34, "");
        memset(v33, 0, sizeof(v33));
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        quasar::Token::Token((std::string *)v39, (__int128 *)&v36, 0, v12, v13, 1, 0, &v37, v14, &v34, (__int128 **)v33, 0, (__int128 *)__p, 0, 0);
        if (v32 < 0)
          operator delete(__p[0]);
        __p[0] = v33;
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (SHIBYTE(v35) < 0)
          operator delete((void *)v34);
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v36.__r_.__value_.__l.__data_);
        isPrintable = quasar::Token::isPrintable((quasar::Token *)v39);
        v18 = DWORD1(v41);
        if (!isPrintable)
          v18 = 0;
        *(_DWORD *)(*a2 + 624) = v18;
        if (SBYTE7(v49) < 0)
          operator delete((void *)v48);
        if (SBYTE7(v47) < 0)
          operator delete((void *)v46);
        *(_QWORD *)&v34 = &v45[8];
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
        if ((v45[7] & 0x80000000) != 0)
          operator delete((void *)v44);
        *(_QWORD *)&v34 = &v43[8];
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
        if ((v43[7] & 0x80000000) != 0)
          operator delete((void *)v42);
        if (SBYTE7(v40) < 0)
          operator delete(v39[0]);
        if (SHIBYTE(v38) < 0)
          operator delete((void *)v37);
        v8 = *a2;
      }
    }
    if (*(_BYTE *)(v8 + 1096))
    {
      v20 = v55;
      v19 = v56;
      if (v56 != v55)
      {
        v21 = 0;
        v22 = *(_DWORD *)(v8 + 1100);
        v23 = *(_DWORD *)(v8 + 1104);
        do
        {
          *(_OWORD *)v39 = *(_OWORD *)v20;
          *(_QWORD *)&v41 = 0;
          v40 = 0uLL;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v40, *((const void **)v20 + 2), *((_QWORD *)v20 + 3), (uint64_t)(*((_QWORD *)v20 + 3) - *((_QWORD *)v20 + 2)) >> 2);
          *((_QWORD *)&v41 + 1) = *((_QWORD *)v20 + 5);
          v24 = HIDWORD(v39[0]);
          if ((_QWORD)v40)
          {
            *((_QWORD *)&v40 + 1) = v40;
            operator delete((void *)v40);
          }
          v21 += v24;
          v20 += 12;
        }
        while (v20 != v19);
        v8 = *a2;
        v25 = (char *)v55 + 2 * (*(_QWORD *)(*a2 + 56) - *(_QWORD *)(*a2 + 48));
        *((_DWORD *)v25 - 11) += v23 - v22 - v21;
      }
    }
    if (*(_BYTE *)(v8 + 1088))
      quasar::Decoder::splitLmePartialResult((std::vector<std::wstring> *)(v8 + 48), (uint64_t **)(*(_QWORD *)(*(_QWORD *)a3 + 24) + 80));
    if (*(_BYTE *)(a4 + 561))
    {
      v26 = *a2;
      if (!*(_BYTE *)(*a2 + 1089))
      {
        v27 = *(_QWORD *)(v26 + 560);
        v28 = *(unsigned int *)(*(_QWORD *)a3 + 12);
        v39[0] = 0;
        v39[1] = 0;
        *(_QWORD *)&v40 = 0;
        v37 = 0uLL;
        v38 = 0;
        v34 = 0uLL;
        v35 = 0;
        LOWORD(v30) = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, void **, __int128 *, __int128 *, int, uint64_t))(*(_QWORD *)v27 + 24))(v27, v26 + 48, v28, 1, 0, 0, v39, &v37, &v34, v30, v26 + 1136);
        v33[0] = (void **)&v34;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v33);
        *(_QWORD *)&v34 = &v37;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
        *(_QWORD *)&v37 = v39;
        std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
      }
    }
    v16 = 0;
  }
  else
  {
    if (quasar::gLogLevel >= 5)
    {
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      memset(v45, 0, sizeof(v45));
      v44 = 0u;
      v42 = 0u;
      memset(v43, 0, sizeof(v43));
      v40 = 0u;
      v41 = 0u;
      *(_OWORD *)v39 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Linear Output Failed", 20);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v39);
    }
    v16 = 2;
  }
  v39[0] = &v55;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v39);
  return v16;
}

void sub_1AD927AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41)
{
  uint64_t v41;

  if (a40 < 0)
    operator delete(__p);
  a41 = v41 - 136;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a41);
  _Unwind_Resume(a1);
}

uint64_t quasar::Decoder::getLinearOutputSymbolSequenceWithDuration<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,int>(uint64_t a1, uint64_t *a2, int32x2_t *a3, _QWORD *a4, _BYTE *a5, void **a6, kaldi::LatticeScoreCache *a7, int a8, char **a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  char v20;
  int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  unint64_t v28;
  __n128 v29;
  float *v30;
  float v31;
  float v32;
  int v33;
  BOOL v34;
  float v35;
  int v36;
  float v37;
  int v38;
  int v39;
  uint64_t *v40;
  uint64_t *v41;
  kaldi::TransitionModel *v42;
  _BOOL4 isSilencePhone;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  int v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  int v64;
  int v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  float Score;
  float v81;
  float v82;
  int v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t v86;
  unsigned int *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  BOOL v95;
  uint64_t *v96;
  unint64_t v97;
  unsigned int *v98;
  _DWORD *v99;
  unsigned int *v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  char *v105;
  unsigned int *v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t *i;
  int v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t j;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t k;
  _BYTE *v120;
  float *v121;
  uint64_t *v122;
  int v123;
  char v124;
  int v127;
  int v128;
  float v129;
  int v130;
  int v131[4];
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  int v149;
  float v150;
  int v151;
  _QWORD v152[3];
  _DWORD *v153;
  uint64_t v154;
  unint64_t v155;
  void *__p;
  char *v157;
  char *v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  void *v163;
  _BYTE *v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t *v167;
  uint64_t *v168;
  unint64_t v169;
  float v170;
  int v171;

  *a5 = 0;
  if (a9)
    a9[1] = *a9;
  v167 = 0;
  v168 = 0;
  v169 = 0;
  v164 = 0;
  v165 = 0;
  v163 = 0;
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)v15 != -1)
  {
    v16 = a4[27];
    if (v16)
      v130 = *(_DWORD *)(v16 + 24);
    else
      v130 = 0;
    v120 = a5;
    v121 = (float *)a3;
    v127 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a4 + 16) + 32))(*(_QWORD *)(*a4 + 16));
    v128 = 0;
    v18 = 0;
    v19 = 0;
    v160 = 0u;
    v161 = 0u;
    v159 = 0u;
    __p = 0;
    v157 = 0;
    v158 = 0;
    if (a6)
      v20 = 1;
    else
      v20 = a8;
    if (a7)
      v21 = a8;
    else
      v21 = 0;
    v123 = v21;
    v124 = v20;
    v22 = 1.0;
    v23 = 0.0;
    v24 = 0.0;
    v129 = 0.0;
    v25 = 0.0;
    while (1)
    {
      (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v155, a1, v15);
      v26 = *((float *)&v155 + 1);
      v28 = v155;
      LODWORD(v152[0]) = HIDWORD(v28);
      LODWORD(v27) = v28;
      v131[0] = v155;
      v171 = 2139095040;
      v170 = INFINITY;
      v29.n128_u32[0] = v155;
      if (*(float *)&v155 != INFINITY)
        break;
      v29.n128_u32[0] = v152[0];
      if (*(float *)v152 != v170)
        break;
      if ((*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a1 + 40))(a1, v15, *(float *)v152) != 1)
        goto LABEL_130;
      v154 = 0;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 136))(a1, v15, v152);
      if (v152[0])
        v30 = (float *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v152[0] + 32))(v152[0]);
      else
        v30 = (float *)(v152[1] + 20 * v154);
      v31 = v30[2];
      v32 = v30[3];
      v33 = *((_DWORD *)v30 + 1);
      if (v33)
        v34 = v33 == v130;
      else
        v34 = 1;
      if (v34)
      {
        v35 = v30[3];
        v36 = *((_DWORD *)v30 + 2);
      }
      else
      {
        if (v19)
        {
          v37 = 0.001;
          if (v22 != 0.0)
            v37 = v22;
          if (!*((_BYTE *)a4 + 552))
            v37 = 0.0;
          *((float *)&v162 + 3) = v37;
          v38 = v19;
          LODWORD(v162) = v128;
          DWORD1(v162) = (v19 - v18) * v127;
          if (v19 > v18)
          {
            while (*((_QWORD *)&v161 + 1))
            {
              v39 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)&v159 + 1)
                                          + (((unint64_t)(v161 + *((_QWORD *)&v161 + 1) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                              + 4 * ((v161 + *((_QWORD *)&v161 + 1) - 1) & 0x3FF));
              --*((_QWORD *)&v161 + 1);
              std::deque<int>::__maybe_remove_back_spare[abi:ne180100](&v159, 1);
              if (!kaldi::SilencePhoneSet::isSilencePhone((kaldi::SilencePhoneSet *)(a4 + 12), v39))
                break;
              if (--v38 <= v18)
              {
                v38 = v18;
                break;
              }
            }
          }
          DWORD2(v162) = v38 * v127;
          *(_OWORD *)v131 = v159;
          v132 = v160;
          v159 = 0u;
          v160 = 0u;
          v133 = v161;
          v161 = 0u;
          v166 = __PAIR64__(LODWORD(v25), LODWORD(v129));
          v40 = v168;
          if ((unint64_t)v168 >= v169)
          {
            v41 = (uint64_t *)std::vector<fst::symbol_outT<int>>::__push_back_slow_path<fst::symbol_outT<int> const&>((uint64_t *)&v167, (uint64_t)&v162);
          }
          else
          {
            *(_OWORD *)v168 = v162;
            v40[3] = 0;
            v40[4] = 0;
            v40[2] = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v40 + 2, v163, (uint64_t)v164, (v164 - (_BYTE *)v163) >> 2);
            v40[5] = v166;
            v41 = v40 + 6;
          }
          v168 = v41;
          std::deque<int>::~deque[abi:ne180100](v131);
          v128 = *((_DWORD *)v30 + 1);
          v129 = 0.0;
          v25 = 0.0;
          v36 = *((_DWORD *)v30 + 2);
          v35 = v30[3];
        }
        else
        {
          v36 = *((_DWORD *)v30 + 2);
          v35 = v30[3];
          v128 = *((_DWORD *)v30 + 1);
        }
        v22 = round(exp(-v35) * 1000.0);
        v18 = v19;
      }
      v148 = *(_QWORD *)v30;
      v149 = v36;
      v150 = v35;
      v151 = *((_DWORD *)v30 + 4);
      v19 += quasar::arcConsumesAFrame<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(&v148, (uint64_t)a4);
      if (a4[4])
      {
        v42 = (kaldi::TransitionModel *)a4[10];
        if (v42)
        {
          if (*(_DWORD *)v30)
          {
            v131[0] = 0;
            v131[0] = kaldi::TransitionModel::TransitionIdToPhone(v42, *(_DWORD *)v30);
            std::deque<int>::push_back(&v159, v131);
            isSilencePhone = kaldi::SilencePhoneSet::isSilencePhone((kaldi::SilencePhoneSet *)(a4 + 12), v131[0]);
            if (kaldi::TransitionModel::IsFinal((kaldi::TransitionModel *)a4[10], *(_DWORD *)v30) && !isSilencePhone)
            {
              v44 = v157;
              if (v157 >= v158)
              {
                v46 = (char *)__p;
                v47 = (v157 - (_BYTE *)__p) >> 2;
                v48 = v47 + 1;
                if ((unint64_t)(v47 + 1) >> 62)
                  goto LABEL_202;
                v49 = v158 - (_BYTE *)__p;
                if ((v158 - (_BYTE *)__p) >> 1 > v48)
                  v48 = v49 >> 1;
                if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
                  v50 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v50 = v48;
                if (v50)
                {
                  v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v158, v50);
                  v46 = (char *)__p;
                  v44 = v157;
                }
                else
                {
                  v51 = 0;
                }
                v52 = &v51[4 * v47];
                *(_DWORD *)v52 = v131[0];
                v45 = v52 + 4;
                while (v44 != v46)
                {
                  v53 = *((_DWORD *)v44 - 1);
                  v44 -= 4;
                  *((_DWORD *)v52 - 1) = v53;
                  v52 -= 4;
                }
                __p = v52;
                v157 = v45;
                v158 = &v51[4 * v50];
                if (v46)
                  operator delete(v46);
              }
              else
              {
                *(_DWORD *)v157 = v131[0];
                v45 = v44 + 4;
              }
              v157 = v45;
            }
            if (a9)
            {
              v55 = a9[1];
              v54 = (unint64_t)a9[2];
              if ((unint64_t)v55 >= v54)
              {
                v57 = *a9;
                v58 = (v55 - *a9) >> 2;
                v59 = v58 + 1;
                if ((unint64_t)(v58 + 1) >> 62)
LABEL_202:
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v60 = v54 - (_QWORD)v57;
                if (v60 >> 1 > v59)
                  v59 = v60 >> 1;
                if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL)
                  v61 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v61 = v59;
                if (v61)
                {
                  v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a9 + 2), v61);
                  v57 = *a9;
                  v55 = a9[1];
                }
                else
                {
                  v62 = 0;
                }
                v63 = &v62[4 * v58];
                *(_DWORD *)v63 = v131[0];
                v56 = v63 + 4;
                while (v55 != v57)
                {
                  v64 = *((_DWORD *)v55 - 1);
                  v55 -= 4;
                  *((_DWORD *)v63 - 1) = v64;
                  v63 -= 4;
                }
                *a9 = v63;
                a9[1] = v56;
                a9[2] = &v62[4 * v61];
                if (v57)
                  operator delete(v57);
              }
              else
              {
                *(_DWORD *)v55 = v131[0];
                v56 = v55 + 4;
              }
              a9[1] = v56;
            }
            if ((v124 & 1) != 0)
            {
              v65 = *(_DWORD *)(*(_QWORD *)(a4[10] + 96) + 4 * *(int *)v30);
              if (a6)
              {
                v122 = a2;
                v67 = (char *)a6[1];
                v66 = (char *)a6[2];
                if (v67 >= v66)
                {
                  v69 = (v67 - (_BYTE *)*a6) >> 3;
                  v70 = v69 + 1;
                  if ((unint64_t)(v69 + 1) >> 61)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v71 = v66 - (_BYTE *)*a6;
                  if (v71 >> 2 > v70)
                    v70 = v71 >> 2;
                  if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8)
                    v72 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v72 = v70;
                  v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a6 + 2), v72);
                  v75 = &v73[8 * v69];
                  *(_DWORD *)v75 = v65;
                  v75[4] = isSilencePhone;
                  v77 = (char *)*a6;
                  v76 = (char *)a6[1];
                  v78 = v75;
                  if (v76 != *a6)
                  {
                    do
                    {
                      v79 = *((_QWORD *)v76 - 1);
                      v76 -= 8;
                      *((_QWORD *)v78 - 1) = v79;
                      v78 -= 8;
                    }
                    while (v76 != v77);
                    v76 = (char *)*a6;
                  }
                  v68 = v75 + 8;
                  *a6 = v78;
                  a6[1] = v75 + 8;
                  a6[2] = &v73[8 * v74];
                  if (v76)
                    operator delete(v76);
                }
                else
                {
                  *(_DWORD *)v67 = v65;
                  v67[4] = isSilencePhone;
                  v68 = v67 + 8;
                }
                a6[1] = v68;
                a2 = v122;
              }
            }
            else
            {
              v65 = -1;
            }
            if (v123)
            {
              Score = kaldi::LatticeScoreCache::GetScore(a7, v19 - 1, v65);
              if (isSilencePhone)
                v81 = -0.0;
              else
                v81 = Score;
              v129 = v129 + v81;
              if (!isSilencePhone)
                Score = -0.0;
              v25 = v25 + Score;
            }
          }
        }
      }
      v15 = *((unsigned int *)v30 + 4);
      if (v152[0])
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v152[0] + 8))(v152[0]);
      }
      else if (v153)
      {
        --*v153;
      }
      v23 = v23 + v31;
      v24 = v24 + v32;
    }
    if (v19)
    {
      v82 = 0.001;
      if (v22 != 0.0)
        v82 = v22;
      if (!*((_BYTE *)a4 + 552))
        v82 = 0.0;
      *((float *)&v162 + 3) = v82;
      LODWORD(v162) = v128;
      DWORD1(v162) = (v19 - v18) * v127;
      if (v19 > v18)
      {
        while (*((_QWORD *)&v161 + 1))
        {
          v83 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)&v159 + 1)
                                      + (((unint64_t)(v161 + *((_QWORD *)&v161 + 1) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                          + 4 * ((v161 + *((_QWORD *)&v161 + 1) - 1) & 0x3FF));
          --*((_QWORD *)&v161 + 1);
          std::deque<int>::__maybe_remove_back_spare[abi:ne180100](&v159, 1);
          if (!kaldi::SilencePhoneSet::isSilencePhone((kaldi::SilencePhoneSet *)(a4 + 12), v83))
            break;
          if (--v19 <= v18)
          {
            v19 = v18;
            break;
          }
        }
      }
      DWORD2(v162) = v19 * v127;
      *(_OWORD *)v131 = v159;
      v132 = v160;
      v159 = 0u;
      v160 = 0u;
      v133 = v161;
      v161 = 0u;
      v166 = __PAIR64__(LODWORD(v25), LODWORD(v129));
      v84 = v168;
      if ((unint64_t)v168 >= v169)
      {
        v85 = (uint64_t *)std::vector<fst::symbol_outT<int>>::__push_back_slow_path<fst::symbol_outT<int> const&>((uint64_t *)&v167, (uint64_t)&v162);
      }
      else
      {
        *(_OWORD *)v168 = v162;
        v84[3] = 0;
        v84[4] = 0;
        v84[2] = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v84 + 2, v163, (uint64_t)v164, (v164 - (_BYTE *)v163) >> 2);
        v84[5] = v166;
        v85 = v84 + 6;
      }
      v168 = v85;
      std::deque<int>::~deque[abi:ne180100](v131);
    }
    if ((*(uint64_t (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)a1 + 40))(a1, v15, v29))
    {
LABEL_130:
      v17 = 0;
    }
    else
    {
      if (a2 && &v167 != (uint64_t **)a2)
        std::vector<fst::symbol_outT<int>>::__assign_with_size[abi:ne180100]<fst::symbol_outT<int>*,fst::symbol_outT<int>*>(a2, v167, v168, 0xAAAAAAAAAAAAAAABLL * (((char *)v168 - (char *)v167) >> 4));
      if (v121)
      {
        *v121 = v23 + v27;
        v121[1] = v24 + v26;
      }
      if (a4[27])
      {
        v86 = *a2;
        v87 = (unsigned int *)__p;
        if (__p == v157)
        {
LABEL_172:
          v108 = a2[1];
          if (v86 != v108)
          {
            v109 = a4[27];
            v17 = 1;
            while (1)
            {
              v110 = *(_DWORD *)v86;
              if (*(_DWORD *)v86)
              {
                if (v110 != *(_DWORD *)(v109 + 24))
                  break;
              }
LABEL_176:
              v86 += 48;
              if (v86 == v108)
                goto LABEL_191;
            }
            for (i = *(uint64_t **)(v109 + 40); i; i = (uint64_t *)*i)
            {
              v112 = *((_DWORD *)i + 7);
              if (v110 >= v112)
              {
                if (v112 >= v110)
                  goto LABEL_176;
                ++i;
              }
            }
            if (quasar::gLogLevel >= 4)
            {
              v146 = 0u;
              v147 = 0u;
              v144 = 0u;
              v145 = 0u;
              v142 = 0u;
              v143 = 0u;
              v140 = 0u;
              v141 = 0u;
              v138 = 0u;
              v139 = 0u;
              v136 = 0u;
              v137 = 0u;
              v134 = 0u;
              v135 = 0u;
              v132 = 0u;
              v133 = 0u;
              *(_OWORD *)v131 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v131);
              v113 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)"Phone sequencing failed; Ran out of phones, probably because ",
                       61);
              v114 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v113, (uint64_t)"the last word got clipped in the audio. ", 40);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114, (uint64_t)"Lattice word alignment and confidence computation will also fail.", 65);
              quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v131);
              v108 = a2[1];
            }
            v17 = 1;
            *v120 = 1;
            for (j = *a2; j != v108; j += 48)
              *(_QWORD *)(j + 24) = *(_QWORD *)(j + 16);
            goto LABEL_191;
          }
        }
        else
        {
          while (1)
          {
            v88 = a2[1];
            if (v86 != v88)
            {
              v89 = a4[27];
              v90 = (uint64_t *)(v89 + 40);
              while (1)
              {
                v91 = *(_DWORD *)v86;
                if (*(_DWORD *)v86 && v91 != *(_DWORD *)(v89 + 24))
                {
                  v92 = *v90;
                  if (!*v90)
                    break;
                  v93 = v89 + 40;
                  do
                  {
                    v94 = *(_DWORD *)(v92 + 28);
                    v95 = v94 < v91;
                    if (v94 >= v91)
                      v96 = (uint64_t *)v92;
                    else
                      v96 = (uint64_t *)(v92 + 8);
                    if (!v95)
                      v93 = v92;
                    v92 = *v96;
                  }
                  while (*v96);
                  if ((uint64_t *)v93 == v90 || v91 < *(_DWORD *)(v93 + 28))
                    break;
                }
                v86 += 48;
                if (v86 == v88)
                  goto LABEL_197;
              }
            }
            if (v86 == v88)
              break;
            v97 = *(_QWORD *)(v86 + 32);
            v98 = *(unsigned int **)(v86 + 24);
            if ((unint64_t)v98 >= v97)
            {
              v100 = *(unsigned int **)(v86 + 16);
              v101 = v98 - v100;
              if ((unint64_t)(v101 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v102 = v97 - (_QWORD)v100;
              v103 = (uint64_t)(v97 - (_QWORD)v100) >> 1;
              if (v103 <= v101 + 1)
                v103 = v101 + 1;
              if (v102 >= 0x7FFFFFFFFFFFFFFCLL)
                v104 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v104 = v103;
              if (v104)
              {
                v105 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v86 + 32, v104);
                v100 = *(unsigned int **)(v86 + 16);
                v98 = *(unsigned int **)(v86 + 24);
              }
              else
              {
                v105 = 0;
              }
              v106 = (unsigned int *)&v105[4 * v101];
              *v106 = *v87;
              v99 = v106 + 1;
              while (v98 != v100)
              {
                v107 = *--v98;
                *--v106 = v107;
              }
              *(_QWORD *)(v86 + 16) = v106;
              *(_QWORD *)(v86 + 24) = v99;
              *(_QWORD *)(v86 + 32) = &v105[4 * v104];
              if (v100)
                operator delete(v100);
            }
            else
            {
              *v98 = *v87;
              v99 = v98 + 1;
            }
            *(_QWORD *)(v86 + 24) = v99;
            v86 += 48
                 * ((kaldi::WordBoundaryInfo::TypeOfPhone((kaldi::WordBoundaryInfo *)a4[27], *v87++) & 0xFFFFFFFE) == 2);
            if (v87 == (unsigned int *)v157)
              goto LABEL_172;
          }
LABEL_197:
          if (quasar::gLogLevel >= 4)
          {
            v146 = 0u;
            v147 = 0u;
            v144 = 0u;
            v145 = 0u;
            v142 = 0u;
            v143 = 0u;
            v140 = 0u;
            v141 = 0u;
            v138 = 0u;
            v139 = 0u;
            v136 = 0u;
            v137 = 0u;
            v134 = 0u;
            v135 = 0u;
            v132 = 0u;
            v133 = 0u;
            *(_OWORD *)v131 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v131);
            v117 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)"Phone sequencing failed; ran out of words for unknown reasons. ",
                     63);
            v118 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v117, (uint64_t)"Lattice word alignment and confidence computation will also fail. ", 66);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v118, (uint64_t)"PLEASE FILE A RADAR", 19);
            quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v131);
            v88 = a2[1];
          }
          for (k = *a2; k != v88; k += 48)
            *(_QWORD *)(k + 24) = *(_QWORD *)(k + 16);
        }
      }
      else if (quasar::gLogLevel >= 4)
      {
        v146 = 0u;
        v147 = 0u;
        v144 = 0u;
        v145 = 0u;
        v142 = 0u;
        v143 = 0u;
        v140 = 0u;
        v141 = 0u;
        v138 = 0u;
        v139 = 0u;
        v136 = 0u;
        v137 = 0u;
        v134 = 0u;
        v135 = 0u;
        v132 = 0u;
        v133 = 0u;
        *(_OWORD *)v131 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v131);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)"No word boundary info found. Cannot give proper phone sequence.", 63);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v131);
      }
      v17 = 1;
    }
LABEL_191:
    if (__p)
    {
      v157 = (char *)__p;
      operator delete(__p);
    }
    std::deque<int>::~deque[abi:ne180100](&v159);
    goto LABEL_194;
  }
  if (a2)
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__clear[abi:ne180100](a2);
  if (a3)
    *a3 = vdup_n_s32(0x7F800000u);
  v17 = 1;
LABEL_194:
  if (v163)
  {
    v164 = v163;
    operator delete(v163);
  }
  *(_QWORD *)v131 = &v167;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v131);
  return v17;
}

void sub_1AD928878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  uint64_t a67;
  uint64_t a69;
  uint64_t v69;
  void *v71;

  if (__p)
  {
    a67 = (uint64_t)__p;
    operator delete(__p);
  }
  std::deque<int>::~deque[abi:ne180100](&a69);
  v71 = *(void **)(v69 - 216);
  if (v71)
  {
    *(_QWORD *)(v69 - 208) = v71;
    operator delete(v71);
  }
  a23 = v69 - 184;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  _Unwind_Resume(a1);
}

uint64_t quasar::Decoder::populateResultInfo(_QWORD *a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void **v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *i;
  uint64_t v24;
  uint64_t v25;
  std::string::size_type v26;
  uint64_t j;
  unint64_t v28;
  int v29;
  float *v30;
  int v31;
  int v32;
  float v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t result;
  int v46;
  uint64_t v48;
  std::string v49[2];
  void *v50;
  char v51;
  uint64_t v52;
  void *v53;
  char v54;
  uint64_t v55;
  void *v56;
  char v57;
  void *v58;
  char v59;
  int v60;
  uint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66[2];
  char v67;
  std::string v68;
  std::string v69;
  int v70;
  void *v71;
  char v72;
  uint64_t v73;
  void *v74;
  char v75;
  uint64_t v76;
  void *v77;
  char v78;
  void *v79;
  char v80;
  _QWORD v81[2];
  std::string __p;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  void *v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  void *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  _QWORD *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;

  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v105);
  v48 = a2;
  v7 = *(_QWORD *)(*(_QWORD *)a2 + 152);
  if (v7)
    fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>(v7, (uint64_t)&v105, 1);
  v102 = 0;
  v103 = 0;
  v104 = 0;
  fst::NbestAsFsts<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)&v105, a3, &v102);
  v99 = 0;
  v100 = 0;
  v101 = 0;
  v96 = 0;
  v97 = 0;
  v98 = 0;
  v93 = 0;
  v94 = 0;
  v95 = 0;
  v9 = v102;
  v8 = v103;
  if (v102 == v103)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      memset(v49, 0, 24);
      LOBYTE(v85) = 0;
      if (v93 == v94)
        v11 = &v93;
      else
        v11 = 0;
      if (quasar::Decoder::getLinearOutputSymbolSequenceWithDuration<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,int>(v9, (uint64_t *)v49, (int32x2_t *)&v69, a1, &v85, v11, *(kaldi::LatticeScoreCache **)(*(_QWORD *)v48 + 488), *(unsigned __int8 *)(*(_QWORD *)v48 + 145), 0))
      {
        *(_BYTE *)(*(_QWORD *)v48 + 144) |= v85;
        v12 = v100;
        if ((unint64_t)v100 >= v101)
        {
          v13 = std::vector<std::vector<fst::symbol_outT<int>>>::__push_back_slow_path<std::vector<fst::symbol_outT<int>> const&>(&v99, (uint64_t *)v49);
        }
        else
        {
          *v100 = 0;
          v12[1] = 0;
          v12[2] = 0;
          std::vector<fst::symbol_outT<int>>::__init_with_size[abi:ne180100]<fst::symbol_outT<int>*,fst::symbol_outT<int>*>(v12, (uint64_t)v49[0].__r_.__value_.__l.__data_, v49[0].__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v49[0].__r_.__value_.__l.__size_ - v49[0].__r_.__value_.__r.__words[0]) >> 4));
          v13 = (uint64_t)(v12 + 3);
        }
        v100 = (_QWORD *)v13;
        v14 = v97;
        if (v97 >= v98)
        {
          v16 = (v97 - v96) >> 3;
          if ((unint64_t)(v16 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v17 = (v98 - v96) >> 2;
          if (v17 <= v16 + 1)
            v17 = v16 + 1;
          if ((unint64_t)(v98 - v96) >= 0x7FFFFFFFFFFFFFF8)
            v18 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v18 = v17;
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v98, v18);
          v21 = &v19[8 * v16];
          *(_QWORD *)v21 = v69.__r_.__value_.__r.__words[0];
          v15 = v21 + 8;
          v22 = v96;
          for (i = v97; i != v22; i -= 8)
          {
            v24 = *((_QWORD *)i - 1);
            *((_QWORD *)v21 - 1) = v24;
            v21 -= 8;
          }
          v96 = v21;
          v97 = v15;
          v98 = &v19[8 * v20];
          if (v22)
            operator delete(v22);
        }
        else
        {
          *(_QWORD *)v97 = v69.__r_.__value_.__r.__words[0];
          v15 = v14 + 8;
        }
        v97 = v15;
        ++v10;
      }
      v69.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
      std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
      v9 += 16;
    }
    while (v9 != v8);
  }
  v25 = *a4;
  v26 = a4[1];
  while (v26 != v25)
  {
    v26 -= 32;
    v49[0].__r_.__value_.__r.__words[0] = v26;
    std::vector<quasar::TokenInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v49);
  }
  a4[1] = v25;
  if (v10 >= 1)
  {
    for (j = 0; j != v10; ++j)
    {
      v90 = 0;
      v91 = 0;
      v92 = 0;
      v88 = 0;
      v87 = 0;
      v89 = 0;
      quasar::SymbolTableList::lookup(*(uint64_t **)(*(_QWORD *)v48 + 472), (int **)(v99 + 24 * j), &v90, (char **)&v87, 0);
      v85 = 0u;
      v86 = 0u;
      if (v91 != v90)
      {
        v28 = 0;
        v29 = 0;
        do
        {
          v30 = (float *)(*(_QWORD *)(v99 + 24 * j) + 48 * v28);
          v31 = *((_DWORD *)v30 + 1);
          v32 = *((_DWORD *)v30 + 2);
          v33 = v30[3];
          v83 = 0uLL;
          v84 = 0;
          memset(&__p, 0, sizeof(__p));
          if ((*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[21] + 120))(a1[21]))
          {
            v34 = *(_QWORD *)(v99 + 24 * j);
            v35 = (std::__shared_weak_count *)a1[22];
            v81[0] = a1[21];
            v81[1] = v35;
            if (v35)
            {
              p_shared_owners = (unint64_t *)&v35->__shared_owners_;
              do
                v37 = __ldxr(p_shared_owners);
              while (__stxr(v37 + 1, p_shared_owners));
            }
            quasar::Decoder::phoneIds2Str((int **)(v34 + 48 * v28 + 16), (uint64_t)&v83, v81);
            if (v35)
            {
              v38 = (unint64_t *)&v35->__shared_owners_;
              do
                v39 = __ldaxr(v38);
              while (__stlxr(v39 - 1, v38));
              if (!v39)
              {
                ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                std::__shared_weak_count::__release_weak(v35);
              }
            }
            quasar::PhonesetMapping::getIpaPhoneSequence((uint64_t)(a1 + 76), (uint64_t)&v83, (uint64_t)v49);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            __p = v49[0];
          }
          v40 = (__int128 *)(v90 + 24 * v28);
          if (*((char *)v40 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)v40, *((_QWORD *)v40 + 1));
          }
          else
          {
            v41 = *v40;
            v68.__r_.__value_.__r.__words[2] = *((_QWORD *)v40 + 2);
            *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v41;
          }
          memset(v49, 0, 24);
          std::string::basic_string[abi:ne180100]<0>(v66, "");
          quasar::Token::Token(&v69, (__int128 *)&v68, v29, v31 + v29, v32, 1, 0, &v83, v33, (__int128 *)&__p, (__int128 **)v49, 0, (__int128 *)v66, 0, 0);
          if (v67 < 0)
            operator delete(v66[0]);
          v66[0] = v49;
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v66);
          if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v68.__r_.__value_.__l.__data_);
          quasar::TokenInfo::TokenInfo(v49, (const quasar::Token *)&v69);
          v42 = *(_QWORD *)(v99 + 24 * j) + 48 * v28;
          v60 = *(_DWORD *)v42;
          v61 = *(_QWORD *)(v42 + 40);
          v43 = *((_QWORD *)&v85 + 1);
          if (*((_QWORD *)&v85 + 1) >= (unint64_t)v86)
          {
            v44 = std::vector<quasar::TokenInfo>::__emplace_back_slow_path<quasar::TokenInfo>((uint64_t *)&v85, (__int128 *)v49);
          }
          else
          {
            std::allocator<quasar::TokenInfo>::construct[abi:ne180100]<quasar::TokenInfo,quasar::TokenInfo>((uint64_t)&v86, *((uint64_t *)&v85 + 1), (__int128 *)v49);
            v44 = v43 + 288;
          }
          *((_QWORD *)&v85 + 1) = v44;
          v29 = v70;
          if (v64)
          {
            v65 = v64;
            operator delete(v64);
          }
          if (v62)
          {
            v63 = v62;
            operator delete(v62);
          }
          if (v59 < 0)
            operator delete(v58);
          if (v57 < 0)
            operator delete(v56);
          v66[0] = &v55;
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v66);
          if (v54 < 0)
            operator delete(v53);
          v66[0] = &v52;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v66);
          if (v51 < 0)
            operator delete(v50);
          if (SHIBYTE(v49[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v49[0].__r_.__value_.__l.__data_);
          if (v80 < 0)
            operator delete(v79);
          if (v78 < 0)
            operator delete(v77);
          v49[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v76;
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v49);
          if (v75 < 0)
            operator delete(v74);
          v49[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v49);
          if (v72 < 0)
            operator delete(v71);
          if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v69.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v84) < 0)
            operator delete((void *)v83);
          ++v28;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v91 - v90) >> 3) > v28);
      }
      *((_QWORD *)&v86 + 1) = *(_QWORD *)&v96[8 * j];
      std::vector<quasar::ChoiceInfo>::emplace_back<quasar::ChoiceInfo>(a4, (uint64_t)&v85);
      v49[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v85;
      std::vector<quasar::TokenInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v49);
      if (v87)
      {
        v88 = v87;
        operator delete(v87);
      }
      v49[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v90;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v49);
    }
  }
  if (v93)
  {
    v94 = v93;
    operator delete(v93);
  }
  if (v96)
  {
    v97 = v96;
    operator delete(v96);
  }
  v49[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v99;
  std::vector<std::vector<fst::symbol_outT<int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v49);
  v49[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v102;
  std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v49);
  v105 = &unk_1E5D25580;
  result = v106;
  if (v106)
  {
    v46 = *(_DWORD *)(v106 + 56) - 1;
    *(_DWORD *)(v106 + 56) = v46;
    if (!v46)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_1AD9290C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  _DWORD *v3;
  int v4;

  *(_QWORD *)(v1 - 128) = &unk_1E5D25580;
  v3 = *(_DWORD **)(v1 - 120);
  if (v3)
  {
    v4 = v3[14] - 1;
    v3[14] = v4;
    if (!v4)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::NbestAsFsts<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  int v7;
  int32x2_t v8;
  void *v9;
  uint64_t v10;

  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v9);
  v8 = vdup_n_s32(0x7F800000u);
  fst::ShortestPath<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1, (uint64_t)&v9, a2, 0, 0, (uint64_t *)&v8, -1, 0);
  fst::ConvertNbestToVector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)&v9, a3);
  v9 = &unk_1E5D25580;
  result = v10;
  if (v10)
  {
    v7 = *(_DWORD *)(v10 + 56) - 1;
    *(_DWORD *)(v10 + 56) = v7;
    if (!v7)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_1AD9292FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12)
{
  if (a12)
    fst::NbestAsFsts<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a12);
  _Unwind_Resume(exception_object);
}

void quasar::Decoder::phoneIds2Str(int **a1, uint64_t a2, _QWORD *a3)
{
  int *i;
  std::string::size_type size;
  char v8;
  void **v9;
  std::string::size_type v10;
  void *__p[2];
  unsigned __int8 v12;
  std::string v13;

  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  if (a1[1] != *a1)
  {
    (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD))(*(_QWORD *)*a3 + 88))(&v13, *a3, **a1);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(std::string *)a2 = v13;
    kaldi::quasar::Lexicon::BasifyPhone((std::string *)a2);
    for (i = *a1 + 1; i != a1[1]; ++i)
    {
      (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD))(*(_QWORD *)*a3 + 88))(&v13, *a3, *i);
      kaldi::quasar::Lexicon::BasifyPhone(&v13);
      size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
      v8 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v13.__r_.__value_.__l.__size_;
      if (size)
      {
        std::operator+<char>();
        if ((v12 & 0x80u) == 0)
          v9 = __p;
        else
          v9 = (void **)__p[0];
        if ((v12 & 0x80u) == 0)
          v10 = v12;
        else
          v10 = (std::string::size_type)__p[1];
        std::string::append((std::string *)a2, (const std::string::value_type *)v9, v10);
        if ((char)v12 < 0)
          operator delete(__p[0]);
        v8 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
      }
      if (v8 < 0)
        operator delete(v13.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1AD929480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void quasar::TokenInfo::~TokenInfo(quasar::TokenInfo *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 33);
  if (v2)
  {
    *((_QWORD *)this + 34) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 30);
  if (v3)
  {
    *((_QWORD *)this + 31) = v3;
    operator delete(v3);
  }
  quasar::Token::~Token((void **)this);
}

_QWORD *std::vector<quasar::ChoiceInfo>::emplace_back<quasar::ChoiceInfo>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v17[5];

  v6 = a1[2];
  v4 = a1 + 2;
  v5 = v6;
  v7 = (_QWORD *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((uint64_t)v7 - *a1) >> 5;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v5 - *a1;
    if (v11 >> 4 > v10)
      v10 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    v17[4] = v4;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)v4, v12);
    v14 = &v13[32 * v9];
    v17[0] = v13;
    v17[1] = v14;
    v17[3] = &v13[32 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *((_QWORD *)v14 + 3) = *(_QWORD *)(a2 + 24);
    v17[2] = v14 + 32;
    std::vector<quasar::ChoiceInfo>::__swap_out_circular_buffer(a1, v17);
    v8 = (_QWORD *)a1[1];
    std::__split_buffer<quasar::ChoiceInfo>::~__split_buffer(v17);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v7[3] = *(_QWORD *)(a2 + 24);
    v8 = v7 + 4;
    a1[1] = (uint64_t)(v7 + 4);
  }
  a1[1] = (uint64_t)v8;
  return v8 - 4;
}

void sub_1AD929614(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::ChoiceInfo>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void quasar::CopyConfidencesFromHwcnToResultChoices(uint64_t **a1, uint64_t a2)
{
  _QWORD **v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *i;
  uint64_t v8;
  std::vector<std::wstring> *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  __int128 **v24;
  uint64_t v25;
  std::string *v26;
  __int128 *size;
  _QWORD **v28;
  unint64_t v29;
  __int128 *v30;
  __int128 *v31;
  std::string::size_type v32;
  std::string::size_type v33;
  std::string::size_type v34;
  uint64_t v35;
  __int128 *v36;
  BOOL v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  int v42;
  int v43;
  std::string::size_type v44;
  std::string::size_type v45;
  __int128 v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  std::string *v51;
  __int128 *v52;
  __int128 *v53;
  void *v54[2];
  char v55;
  std::string v56;
  uint64_t *v57;
  _QWORD *v58[2];
  uint64_t *v59;
  _QWORD *v60;
  __int128 **v61;
  char v62;
  std::string __p;
  uint64_t v64[3];
  uint64_t v65[3];
  _QWORD v66[3];
  __int128 v67;

  *(_QWORD *)&v67 = *MEMORY[0x1E0C80C00];
  kaldi::WordHypLattice::RetrieveConfidenceByTokens(*(kaldi::WordHypLattice **)(*(_QWORD *)a2 + 208), (uint64_t)&v59);
  v4 = v58;
  v58[0] = 0;
  v58[1] = 0;
  v57 = (uint64_t *)v58;
  v5 = *(_QWORD *)(*(_QWORD *)a2 + 208);
  v6 = *(uint64_t **)(v5 + 40);
  for (i = *(uint64_t **)(v5 + 48); v6 != i; ++v6)
  {
    v8 = *v6;
    std::optional<std::string>::value_or[abi:ne180100]<std::string&>(*v6 + 464, *v6 + 264, &__p);
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v9 = (std::vector<std::wstring> *)((char *)std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v57, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v56)+ 56);
    if (v9 != (std::vector<std::wstring> *)(v8 + 168))
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v9, *(std::string **)(v8 + 168), *(__int128 **)(v8 + 176), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v8 + 176) - *(_QWORD *)(v8 + 168)) >> 3));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v10 = *a1;
  v48 = a1[1];
  if (*a1 != v48)
  {
    do
    {
      v12 = *v10;
      v11 = v10[1];
      v49 = v10;
      v50 = v11;
      while (v12 != v11)
      {
        quasar::getNormWord(v12, &__p);
        if (&v60 == (_QWORD **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v59, (const void **)&__p.__r_.__value_.__l.__data_))
        {
          v56.__r_.__value_.__r.__words[0] = v12;
          v13 = std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v59, (const void **)v12, (uint64_t)&std::piecewise_construct, (__int128 **)&v56);
        }
        else
        {
          quasar::getNormWord(v12, &v56);
          v51 = &v56;
          v13 = std::__tree<std::__value_type<std::string,std::vector<kaldi::TimestampsAndConfidence>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<kaldi::TimestampsAndConfidence>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<kaldi::TimestampsAndConfidence>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v59, (const void **)&v56.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v51);
          if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v56.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v14 = v13[7];
        v15 = v13[8];
        if (v14 != v15)
        {
          v16 = 0;
          do
          {
            v17 = v16;
            v16 = v14;
            if (v17)
            {
              if ((v18 = (float)*(unsigned int *)(v12 + 28),
                    v19 = (float)*(unsigned int *)(v12 + 36),
                    v20 = (float)(vabds_f32(*(float *)v14, v18) + vabds_f32(*(float *)v14 + *(float *)(v14 + 4), v19))
                        * 0.5,
                    v21 = (float)(vabds_f32(*(float *)v17, v18) + vabds_f32(*(float *)v17 + *(float *)(v17 + 4), v19))
                        * 0.5,
                    v20 != v21)
                && (COERCE_INT(fabs(v20 - v21)) > 2139095039 || fabsf(v20 - v21) > (float)((float)(v20 + v21) * 0.1))
                || (v16 = v14, *(double *)(v14 + 8) <= *(double *)(v17 + 8)))
              {
                v16 = v17;
                if (v20 < v21)
                  v16 = v14;
              }
            }
            v14 += 16;
          }
          while (v14 != v15);
          if (v16)
          {
            v22 = *(double *)(v16 + 8) * 1000.0;
            *(float *)(v12 + 40) = v22;
          }
        }
        quasar::getNormWord(v12, &__p);
        v23 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v57, (const void **)&__p.__r_.__value_.__l.__data_);
        if (v4 == (_QWORD **)v23)
        {
          v51 = (std::string *)v12;
          v24 = (__int128 **)std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v57, (const void **)v12, (uint64_t)&std::piecewise_construct, (__int128 **)&v51);
        }
        else
        {
          quasar::getNormWord(v12, v54);
          v51 = (std::string *)v54;
          v24 = (__int128 **)std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v57, (const void **)v54, (uint64_t)&std::piecewise_construct, (_OWORD **)&v51);
        }
        memset(&v56, 0, sizeof(v56));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v56, v24[7], v24[8], 0xAAAAAAAAAAAAAAABLL * (((char *)v24[8] - (char *)v24[7]) >> 3));
        if (v4 != (_QWORD **)v23 && v55 < 0)
          operator delete(v54[0]);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&__p, "_B");
        std::string::basic_string[abi:ne180100]<0>(v64, "_E");
        std::string::basic_string[abi:ne180100]<0>(v65, "_I");
        std::string::basic_string[abi:ne180100]<0>(v66, "_S");
        v51 = 0;
        v52 = 0;
        v53 = 0;
        v61 = (__int128 **)&v51;
        v62 = 0;
        v51 = (std::string *)operator new(0x60uLL);
        v52 = (__int128 *)v51;
        v53 = (__int128 *)&v51[4];
        v25 = 0;
        v52 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v53, (__int128 *)&__p, &v67, v51);
        do
        {
          if (SHIBYTE(v66[v25 + 2]) < 0)
            operator delete((void *)v66[v25]);
          v25 -= 3;
        }
        while (v25 != -12);
        size = (__int128 *)v56.__r_.__value_.__l.__size_;
        v26 = (std::string *)v56.__r_.__value_.__r.__words[0];
        if (v56.__r_.__value_.__l.__size_ == v56.__r_.__value_.__r.__words[0])
        {
          v47 = 0xAAAAAAAAAAAAAAABLL
              * ((uint64_t)(v56.__r_.__value_.__l.__size_ - v56.__r_.__value_.__r.__words[0]) >> 3);
          v26 = (std::string *)v56.__r_.__value_.__l.__size_;
        }
        else
        {
          v28 = v4;
          v29 = 0;
          do
          {
            v31 = (__int128 *)v51;
            v30 = v52;
            if (v51 == (std::string *)v52)
            {
              v32 = -1;
            }
            else
            {
              while (!quasar::endsWith((uint64_t *)(v56.__r_.__value_.__r.__words[0] + 24 * v29), (uint64_t *)v31))
              {
                v31 = (__int128 *)((char *)v31 + 24);
                if (v31 == v30)
                {
                  v32 = -1;
                  v26 = (std::string *)v56.__r_.__value_.__r.__words[0];
                  goto LABEL_76;
                }
              }
              v26 = (std::string *)v56.__r_.__value_.__r.__words[0];
              v33 = v56.__r_.__value_.__r.__words[0] + 24 * v29;
              if (*(char *)(v33 + 23) < 0)
              {
                v33 = *(_QWORD *)v33;
                v34 = *(_QWORD *)(v56.__r_.__value_.__r.__words[0] + 24 * v29 + 8);
              }
              else
              {
                v34 = *(unsigned __int8 *)(v33 + 23);
              }
              v35 = *((unsigned __int8 *)v31 + 23);
              if ((v35 & 0x80u) == 0)
                v36 = v31;
              else
                v36 = *(__int128 **)v31;
              if ((v35 & 0x80u) != 0)
                v35 = *((_QWORD *)v31 + 1);
              if (v34)
                v37 = v35 == 0;
              else
                v37 = 1;
              if (v37)
              {
                if (v35)
                  v32 = -1;
                else
                  v32 = v34;
              }
              else
              {
                v38 = (unsigned __int8 *)(v33 + v34);
                v39 = (unsigned __int8 *)v33;
                v40 = v38;
                do
                {
                  if (*v39 == *(unsigned __int8 *)v36)
                  {
                    v41 = 1;
                    while (v35 != v41)
                    {
                      if (&v39[v41] == v38)
                        goto LABEL_73;
                      v42 = v39[v41];
                      v43 = *((unsigned __int8 *)v36 + v41++);
                      if (v42 != v43)
                        goto LABEL_65;
                    }
                    v40 = v39;
                  }
LABEL_65:
                  ++v39;
                }
                while (v39 != v38);
LABEL_73:
                v44 = (std::string::size_type)&v40[-v33];
                if (v40 == v38)
                  v32 = -1;
                else
                  v32 = v44;
              }
            }
LABEL_76:
            std::string::basic_string(&__p, &v26[v29], 0, v32, (std::allocator<char> *)&v61);
            v45 = v56.__r_.__value_.__r.__words[0] + 24 * v29;
            if (*(char *)(v45 + 23) < 0)
              operator delete(*(void **)v45);
            v46 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *(_QWORD *)(v45 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
            *(_OWORD *)v45 = v46;
            ++v29;
            size = (__int128 *)v56.__r_.__value_.__l.__size_;
            v26 = (std::string *)v56.__r_.__value_.__r.__words[0];
            v47 = 0xAAAAAAAAAAAAAAABLL
                * ((uint64_t)(v56.__r_.__value_.__l.__size_ - v56.__r_.__value_.__r.__words[0]) >> 3);
          }
          while (v47 > v29);
          v4 = v28;
        }
        if ((std::string *)(v12 + 72) != &v56)
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(v12 + 72), v26, size, v47);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v56;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        v12 += 224;
        v11 = v50;
      }
      v10 = v49 + 3;
    }
    while (v49 + 3 != v48);
  }
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)&v57, v58[0]);
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy((uint64_t)&v59, v60);
}

void sub_1AD929C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  _Unwind_Resume(exception_object);
}

void std::optional<std::string>::value_or[abi:ne180100]<std::string&>(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  std::string::size_type v3;

  if (*(_BYTE *)(a1 + 24))
  {
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      v3 = *(_QWORD *)(a1 + 16);
LABEL_6:
      a3->__r_.__value_.__r.__words[2] = v3;
      return;
    }
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      v3 = *(_QWORD *)(a2 + 16);
      goto LABEL_6;
    }
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
}

void quasar::Decoder::calculateNBest(uint64_t a1, uint64_t *a2, int a3)
{
  BOOL v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  quasar::DecoderChainOutput *v12;
  uint64_t v13;
  int v14;
  quasar *v15;
  char v16;
  uint64_t v17;
  int v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  char v33;
  void **v34;
  uint64_t v35;
  quasar *v36;
  std::__shared_weak_count *v37;
  _QWORD v38[2];
  int v39;
  uint64_t v40;
  char v41;
  _QWORD *v42;
  std::__shared_weak_count *v43;
  uint64_t *v44;
  std::__shared_weak_count *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  void ***v63;

  if (*(_BYTE *)(*a2 + 440))
  {
    if (quasar::gLogLevel >= 4)
    {
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v48 = 0u;
      v46 = 0u;
      v47 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"Skipping calculateNBest since we already did it (e.g. eager, CTC-prefix-beam-search)", 84);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v46);
    }
    return;
  }
  *(_BYTE *)(*a2 + 440) = 1;
  quasar::Decoder::calculateNBestHwcn(a1, a2, a3);
  if (*(_BYTE *)(a1 + 553))
    v6 = *(_QWORD *)(*a2 + 352) != 0;
  else
    v6 = 0;
  if (quasar::gLogLevel >= 5)
  {
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v48 = 0u;
    v46 = 0u;
    v47 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"hasHwcnPrimaryResultChoices=", 28);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v46);
  }
  if (!v6)
  {
    v7 = *(_QWORD *)(a1 + 216);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 24);
      v9 = v7 + 32;
    }
    else
    {
      v9 = 0;
      v8 = -1;
    }
    v10 = operator new(0x30uLL);
    v10[2] = 0;
    *v10 = &unk_1E5D456D0;
    v10[1] = 0;
    v10[4] = 0;
    v10[5] = 0;
    v45 = (std::__shared_weak_count *)v10;
    v10[3] = 0;
    v44 = v10 + 3;
    v11 = (std::__shared_weak_count *)operator new(0x30uLL);
    v11->__shared_weak_owners_ = 0;
    v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D458C8;
    v11->__shared_owners_ = 0;
    v11[1].__shared_owners_ = 0;
    v11[1].__shared_weak_owners_ = 0;
    v11[1].__vftable = 0;
    v42 = &v11[1].__vftable;
    v43 = v11;
    v12 = (quasar::DecoderChainOutput *)*a2;
    v13 = *(_QWORD *)(*a2 + 152);
    v38[0] = a3;
    v38[1] = v13;
    v39 = v8;
    v40 = v9;
    v14 = *(unsigned __int8 *)(a1 + 552);
    v41 = v14 ^ 1;
    if (v14)
    {
      v15 = (quasar *)*((_QWORD *)v12 + 21);
      if (v15)
      {
        v46 = 0uLL;
        *(_QWORD *)&v47 = 0;
        v36 = v15;
        quasar::CalculateJoinedNBest<1ul>::operator()((uint64_t)&v34, (uint64_t)v38, (uint64_t *)&v36, (uint64_t *)&v46);
        v16 = quasar::ProcessHypotheses<1ul,0l,-1l>(a1, a2, (uint64_t *)&v46, v44, (uint64_t)v42);
        v36 = (quasar *)&v46;
        std::vector<std::vector<quasar::NBestToken<1ul>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
LABEL_28:
        if ((v16 & 1) == 0)
        {
          if (quasar::gLogLevel >= 1)
          {
            v61 = 0u;
            v62 = 0u;
            v59 = 0u;
            v60 = 0u;
            v57 = 0u;
            v58 = 0u;
            v55 = 0u;
            v56 = 0u;
            v53 = 0u;
            v54 = 0u;
            v51 = 0u;
            v52 = 0u;
            v49 = 0u;
            v50 = 0u;
            v48 = 0u;
            v46 = 0u;
            v47 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"There was a problem while generating the n-best list.", 53);
            quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v46);
          }
          v22 = v44;
          v23 = *v44;
          v24 = v44[1];
          while (v24 != v23)
          {
            v24 -= 24;
            *(_QWORD *)&v46 = v24;
            std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
          }
          v22[1] = v23;
        }
        if (*v44 == v44[1])
        {
          std::shared_ptr<quasar::LmeData>::reset[abi:ne180100]((_QWORD *)(*a2 + 352));
          std::shared_ptr<quasar::LmeData>::reset[abi:ne180100]((_QWORD *)(*a2 + 392));
        }
        else
        {
          v25 = *a2;
          if (!*(_BYTE *)(a1 + 552) && *(_QWORD *)(v25 + 208) && *(_BYTE *)(a1 + 553) == 0)
          {
            quasar::CopyConfidencesFromHwcnToResultChoices((uint64_t **)v44, (uint64_t)a2);
            v25 = *a2;
          }
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(v25 + 352), (uint64_t *)&v44);
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(*a2 + 392), (uint64_t *)&v42);
        }
        v27 = v43;
        if (v43)
        {
          p_shared_owners = (unint64_t *)&v43->__shared_owners_;
          do
            v29 = __ldaxr(p_shared_owners);
          while (__stlxr(v29 - 1, p_shared_owners));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v30 = v45;
        if (v45)
        {
          v31 = (unint64_t *)&v45->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        return;
      }
    }
    if (*((_QWORD *)v12 + 42))
    {
      quasar::DecoderChainOutput::getWordHypLattice(v12, (const quasar::DecoderPassData *)a1, &v36);
      if (v36)
      {
        quasar::ExtractFirstAndSecondPassAcousticCostLatticeFromWordHypLattice(v36, &v34);
        v46 = 0uLL;
        *(_QWORD *)&v47 = 0;
        v63 = &v34;
        quasar::CalculateJoinedNBest<1ul>::operator()((uint64_t)&v33, (uint64_t)v38, (uint64_t *)&v63, (uint64_t *)&v46);
        v16 = quasar::ProcessHypotheses<1ul,-1l,0l>(a1, a2, (uint64_t *)&v46, v44, (uint64_t)v42);
        v63 = (void ***)&v46;
        std::vector<std::vector<quasar::NBestToken<1ul>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
        v34 = (void **)&unk_1E5D25800;
        v17 = v35;
        if (v35)
        {
          v18 = *(_DWORD *)(v35 + 56) - 1;
          *(_DWORD *)(v35 + 56) = v18;
          if (!v18)
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        }
        goto LABEL_23;
      }
    }
    else
    {
      v36 = 0;
      v37 = 0;
    }
    v46 = 0uLL;
    *(_QWORD *)&v47 = 0;
    quasar::CalculateJoinedNBest<0ul>::operator()((uint64_t)&v63, (uint64_t)v38, (uint64_t)&v34, (uint64_t *)&v46);
    v16 = quasar::ProcessHypotheses<0ul,-1l,-1l>(a1, a2, (uint64_t *)&v46, v44, (uint64_t)v42);
    v34 = (void **)&v46;
    std::vector<std::vector<quasar::NBestToken<0ul>>>::__destroy_vector::operator()[abi:ne180100](&v34);
LABEL_23:
    v19 = v37;
    if (v37)
    {
      v20 = (unint64_t *)&v37->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    goto LABEL_28;
  }
}

void sub_1AD92A320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void quasar::Decoder::calculateNBestHwcn(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t *v4;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  int v16;
  int *v17;
  int *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  _QWORD *v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  uint64_t v36;
  void **v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  __int128 *v43;
  __int128 *v44;
  uint64_t *v45;
  uint64_t v46;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  std::__shared_weak_count *v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  int v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  int v69;
  char *v70;
  char *v71;
  char v72;
  char v73;
  uint64_t v74;
  double *v75;
  double *v76;
  uint64_t v77;
  unint64_t v78;
  double *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  double *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  void **v97;
  uint64_t *v98;
  std::string v99;
  unsigned __int8 v100;
  unsigned __int8 v101;
  double v102;
  __int128 v103;
  __int128 v104;
  double **v105;
  std::__shared_weak_count *v106;
  uint64_t *v107;
  std::__shared_weak_count *v108;
  void *__p;
  char *v110;
  unint64_t v111;
  char **v112;
  char *v113;
  uint64_t v114;
  void *v115;
  char *v116;
  char *v117;
  void **v118;
  void **v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;

  v4 = a2;
  v121 = 0uLL;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](*a2 + 352, &v121);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
  if (*((_QWORD *)&v121 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v121 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v121 = 0uLL;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](*v4 + 392, &v121);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
  if (*((_QWORD *)&v121 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v121 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v121 = 0uLL;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](*v4 + 408, &v121);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
  if (*((_QWORD *)&v121 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v121 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = *(_QWORD **)(*v4 + 208);
  if (v15)
  {
    v16 = *(unsigned __int8 *)(a1 + 553);
    v121 = 0uLL;
    *(_QWORD *)&v122 = 0;
    kaldi::WordHypLattice::GetNBestPath(v15, (uint64_t *)&v121, a3, *(_DWORD *)(a1 + 556));
    v118 = 0;
    v119 = 0;
    v120 = 0;
    v96 = a1;
    v98 = v4;
    if (*(_BYTE *)(a1 + 560))
    {
      v115 = 0;
      v116 = 0;
      v117 = 0;
      v112 = 0;
      v113 = 0;
      v114 = 0;
      kaldi::WordHypLattice::GetBestPath(*(_QWORD **)(*v4 + 208), (char **)&v115, (uint64_t *)&v112);
      __p = 0;
      v110 = 0;
      v111 = 0;
      v17 = (int *)v115;
      v18 = (int *)v116;
      if (v115 != v116)
      {
        v19 = 0;
        do
        {
          v20 = *(_QWORD *)(*v98 + 208);
          v21 = *v17;
          v22 = *(_QWORD *)(v20 + 40);
          if (v21 >= (*(_QWORD *)(v20 + 48) - v22) >> 3)
            std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
          if ((unint64_t)v19 >= v111)
          {
            v23 = (v19 - (_BYTE *)__p) >> 3;
            if ((unint64_t)(v23 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v24 = (uint64_t)(v111 - (_QWORD)__p) >> 2;
            if (v24 <= v23 + 1)
              v24 = v23 + 1;
            if (v111 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
              v25 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v25 = v24;
            if (v25)
              v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v111, v25);
            else
              v26 = 0;
            v27 = &v26[8 * v23];
            *(_QWORD *)v27 = *(_QWORD *)(v22 + 8 * v21);
            v19 = v27 + 8;
            v29 = (char *)__p;
            v28 = v110;
            if (v110 != __p)
            {
              do
              {
                v30 = *((_QWORD *)v28 - 1);
                v28 -= 8;
                *((_QWORD *)v27 - 1) = v30;
                v27 -= 8;
              }
              while (v28 != v29);
              v28 = (char *)__p;
            }
            __p = v27;
            v110 = v19;
            v111 = (unint64_t)&v26[8 * v25];
            if (v28)
              operator delete(v28);
          }
          else
          {
            *(_QWORD *)v19 = *(_QWORD *)(v22 + 8 * v21);
            v19 += 8;
          }
          v110 = v19;
          ++v17;
        }
        while (v17 != v18);
      }
      std::vector<std::vector<kaldi::WordHypLattice::Arc *>>::emplace_back<std::vector<kaldi::WordHypLattice::Arc *>>((uint64_t *)&v118, (uint64_t)&__p);
      v4 = v98;
      if (__p)
      {
        v110 = (char *)__p;
        operator delete(__p);
      }
      __p = &v112;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if (v115)
      {
        v116 = (char *)v115;
        operator delete(v115);
      }
    }
    v31 = *((_QWORD *)&v121 + 1);
    for (i = v121; i != v31; i += 24)
      std::vector<std::vector<kaldi::WordHypLattice::Arc *>>::emplace_back<std::vector<kaldi::WordHypLattice::Arc *>>((uint64_t *)&v118, i);
    v33 = operator new(0x30uLL);
    v33[2] = 0;
    *v33 = &unk_1E5D456D0;
    v33[1] = 0;
    v33[4] = 0;
    v33[5] = 0;
    v33[3] = 0;
    v107 = v33 + 3;
    v108 = (std::__shared_weak_count *)v33;
    v34 = (std::__shared_weak_count *)operator new(0x30uLL);
    v34->__shared_weak_owners_ = 0;
    v34->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D458C8;
    v34->__shared_owners_ = 0;
    v34[1].__shared_owners_ = 0;
    v34[1].__shared_weak_owners_ = 0;
    v34[1].__vftable = 0;
    v105 = (double **)&v34[1];
    v106 = v34;
    v115 = 0;
    v116 = 0;
    v117 = 0;
    v113 = 0;
    v114 = 0;
    v112 = &v113;
    v35 = *(_QWORD *)(*v4 + 472);
    std::string::basic_string[abi:ne180100]<0>(&__p, "<?>");
    v36 = quasar::SymbolTableList::strToSymbolId(v35, (uint64_t)&__p);
    if (SHIBYTE(v111) < 0)
      operator delete(__p);
    v37 = v118;
    v97 = v119;
    if (v118 == v119)
      goto LABEL_133;
    if (v16)
      v38 = 1000.0;
    else
      v38 = 1.0;
    while (1)
    {
      v39 = *v107;
      v40 = v107[1];
      __p = 0;
      v110 = 0;
      v111 = 0;
      v104 = 0uLL;
      v42 = (char *)*v37;
      v41 = (char *)v37[1];
      if (*v37 == v41)
        goto LABEL_106;
      v43 = 0;
      v44 = 0;
      do
      {
        v45 = *(uint64_t **)v42;
        v46 = *(_QWORD *)(*(_QWORD *)v42 + 256);
        if (v46 == v36 || v46 == 0)
        {
LABEL_58:
          if (v44)
            *((_DWORD *)v44 + 8) = *(float *)(v45[1] + 140);
          goto LABEL_100;
        }
        if (*((char *)v45 + 287) < 0)
        {
          if (!v45[34])
            goto LABEL_58;
        }
        else if (!*((_BYTE *)v45 + 287))
        {
          goto LABEL_58;
        }
        if (v44)
        {
          v48 = v110;
          if ((unint64_t)v110 >= v111)
          {
            v49 = (char *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token>((uint64_t *)&__p, v44);
          }
          else
          {
            std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,quasar::Token>((uint64_t)&v111, (uint64_t)v110, v44);
            v49 = v48 + 224;
          }
          v110 = v49;
          v45 = *(uint64_t **)v42;
        }
        v50 = *v45;
        v51 = v45[1];
        v102 = v38 * *((double *)v45 + 4);
        v101 = 1;
        v100 = 0;
        quasar::PhonesetMapping::getIpaPhoneSequence(v96 + 608, (uint64_t)(v45 + 27), (uint64_t)&v99);
        std::allocate_shared[abi:ne180100]<quasar::Token,std::allocator<quasar::Token>,std::string &,float &,float &,float &,double,BOOL,BOOL,std::string &,std::string,void>((uint64_t)(v45 + 33), (float *)(v50 + 140), (float *)(v51 + 140), (float *)(v51 + 140), &v102, &v101, &v100, &v103, (__int128 *)(v45 + 27), (__int128 *)&v99);
        v52 = v103;
        v103 = 0uLL;
        v53 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
        v104 = v52;
        v4 = v98;
        if (v53)
        {
          p_shared_owners = (unint64_t *)&v53->__shared_owners_;
          do
            v55 = __ldaxr(p_shared_owners);
          while (__stlxr(v55 - 1, p_shared_owners));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
        v56 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
        if (*((_QWORD *)&v103 + 1))
        {
          v57 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v99.__r_.__value_.__l.__data_);
        v43 = (__int128 *)v104;
        quasar::calculateLmeInfo((std::string *)(*v98 + 584), v39 == v40, *(_DWORD *)(*(_QWORD *)v42 + 288), v104);
        if (v39 == v40)
        {
          v59 = *(_DWORD *)(*(_QWORD *)v42 + 256);
          v60 = v116;
          if (v116 >= v117)
          {
            v62 = (char *)v115;
            v63 = (v116 - (_BYTE *)v115) >> 2;
            v64 = v63 + 1;
            if ((unint64_t)(v63 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v65 = v117 - (_BYTE *)v115;
            if ((v117 - (_BYTE *)v115) >> 1 > v64)
              v64 = v65 >> 1;
            if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
              v66 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v66 = v64;
            if (v66)
            {
              v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v117, v66);
              v62 = (char *)v115;
              v60 = v116;
            }
            else
            {
              v67 = 0;
            }
            v68 = &v67[4 * v63];
            *(_DWORD *)v68 = v59;
            v61 = v68 + 4;
            while (v60 != v62)
            {
              v69 = *((_DWORD *)v60 - 1);
              v60 -= 4;
              *((_DWORD *)v68 - 1) = v69;
              v68 -= 4;
            }
            v115 = v68;
            v116 = v61;
            v117 = &v67[4 * v66];
            if (v62)
              operator delete(v62);
          }
          else
          {
            *(_DWORD *)v116 = v59;
            v61 = v60 + 4;
          }
          v116 = v61;
        }
        v44 = v43;
LABEL_100:
        v42 += 8;
      }
      while (v42 != v41);
      if (v43)
      {
        v70 = v110;
        if ((unint64_t)v110 >= v111)
        {
          v71 = (char *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token>((uint64_t *)&__p, v43);
        }
        else
        {
          std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,quasar::Token>((uint64_t)&v111, (uint64_t)v110, v43);
          v71 = v70 + 224;
        }
        v110 = v71;
      }
LABEL_106:
      quasar::tokens2Str((uint64_t *)&__p, &v99);
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v112, (const void **)&v99.__r_.__value_.__l.__data_, (uint64_t)&v99);
      v73 = v72;
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v99.__r_.__value_.__l.__data_);
        if ((v73 & 1) != 0)
          goto LABEL_110;
      }
      else
      {
        if ((v72 & 1) == 0)
          goto LABEL_127;
LABEL_110:
        std::vector<std::vector<quasar::Token>>::emplace_back<std::vector<quasar::Token>>(v107, (uint64_t)&__p);
        v74 = (uint64_t)v105;
        v75 = *v105;
        v76 = v105[1];
        v77 = v76 - *v105;
        v78 = (unint64_t)v105[2];
        if ((unint64_t)v76 >= v78)
        {
          v80 = v77 + 1;
          if ((unint64_t)(v77 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v81 = v78 - (_QWORD)v75;
          if (v81 >> 2 > v80)
            v80 = v81 >> 2;
          if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8)
            v82 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v82 = v80;
          if (v82)
          {
            v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v105 + 2), v82);
            v75 = *(double **)v74;
            v76 = *(double **)(v74 + 8);
          }
          else
          {
            v83 = 0;
          }
          v84 = (double *)&v83[8 * v77];
          *v84 = (double)(unint64_t)v77;
          v79 = v84 + 1;
          while (v76 != v75)
          {
            v85 = *((_QWORD *)v76-- - 1);
            *((_QWORD *)v84-- - 1) = v85;
          }
          *(_QWORD *)v74 = v84;
          *(_QWORD *)(v74 + 8) = v79;
          *(_QWORD *)(v74 + 16) = &v83[8 * v82];
          if (v75)
            operator delete(v75);
        }
        else
        {
          *v76 = (double)(unint64_t)v77;
          v79 = v76 + 1;
        }
        *(_QWORD *)(v74 + 8) = v79;
      }
LABEL_127:
      v86 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
      if (*((_QWORD *)&v104 + 1))
      {
        v87 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
        }
      }
      v99.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
      v37 += 3;
      if (v37 == v97)
      {
LABEL_133:
        if (*v107 != v107[1])
        {
          v89 = *v4;
          if (*(_BYTE *)(v96 + 553))
          {
            std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(v89 + 352), (uint64_t *)&v107);
            std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(*v4 + 392), (uint64_t *)&v105);
            quasar::calculateEosLikelihood(v96, (uint64_t)v4, (uint64_t *)*v107, (unsigned int **)&v115);
            quasar::calculateNumTokensExcludingTriggerPhrase(v96, v4, (uint64_t *)*v107);
          }
          else
          {
            std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(v89 + 408), (uint64_t *)&v107);
          }
        }
        std::__tree<std::string>::destroy((uint64_t)&v112, v113);
        if (v115)
        {
          v116 = (char *)v115;
          operator delete(v115);
        }
        v90 = v106;
        if (v106)
        {
          v91 = (unint64_t *)&v106->__shared_owners_;
          do
            v92 = __ldaxr(v91);
          while (__stlxr(v92 - 1, v91));
          if (!v92)
          {
            ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
            std::__shared_weak_count::__release_weak(v90);
          }
        }
        v93 = v108;
        if (v108)
        {
          v94 = (unint64_t *)&v108->__shared_owners_;
          do
            v95 = __ldaxr(v94);
          while (__stlxr(v95 - 1, v94));
          if (!v95)
          {
            ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
            std::__shared_weak_count::__release_weak(v93);
          }
        }
        v115 = &v118;
        std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
        v118 = (void **)&v121;
        std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v118);
        return;
      }
    }
  }
  if (quasar::gLogLevel >= 4)
  {
    v136 = 0u;
    v137 = 0u;
    v134 = 0u;
    v135 = 0u;
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    v128 = 0u;
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    v122 = 0u;
    v123 = 0u;
    v121 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v121);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v121, (uint64_t)"No HWCN computed, so skipping nbestV2", 37);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v121);
  }
}

void sub_1AD92ADC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a49);
  _Unwind_Resume(a1);
}

uint64_t quasar::ProcessHypotheses<1ul,0l,-1l>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  int v9;
  uint64_t v10;
  unint64_t v11;
  int **v12;
  int *v13;
  int *v14;
  unint64_t v15;
  double v16;
  float v17;
  float v18;
  std::vector<unsigned int>::pointer end;
  unsigned int *v20;
  std::vector<unsigned int>::pointer begin;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  char *v26;
  unsigned int *v27;
  unsigned int v28;
  std::string *v29;
  std::string *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  double *v45;
  double *v46;
  double *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  _QWORD *v53;
  _QWORD *v54;
  double *v55;
  uint64_t v56;
  std::string *v57;
  std::string *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  signed int v65;
  uint64_t v66;
  signed int v67;
  BOOL v68;
  uint64_t *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  char *v73;
  char *v74;
  __int128 v75;
  uint64_t *v77;
  char v79;
  int v80;
  uint64_t *v81;
  void *v82[2];
  __int128 v83;
  __int128 v84;
  void *v85[2];
  __int128 v86;
  __int128 v87;
  void *v88[2];
  __int128 v89;
  __int128 v90;
  void *v91[2];
  __int128 v92;
  void *__p[2];
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  void **v99[3];
  std::string *v100;
  std::string *v101;
  unint64_t v102;
  std::vector<unsigned int> v103;
  _QWORD v104[2];
  BOOL v105;
  int v106;
  char v107;
  void **v108;
  void **v109;
  _BYTE *v110;
  _BYTE *v111;
  uint64_t v112;
  void *v113;
  void *v114;
  uint64_t v115;

  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 16) + 32))(*(_QWORD *)(*(_QWORD *)a1 + 16));
  v79 = *(_BYTE *)(a1 + 552);
  v80 = v9;
  v81 = a2;
  *(_QWORD *)(*a2 + 992) = *(_QWORD *)(*a2 + 984);
  v10 = *a3;
  v77 = a3;
  if (a3[1] != *a3)
  {
    v11 = 0;
    while (1)
    {
      v12 = (int **)(v10 + 24 * v11);
      v113 = 0;
      v114 = 0;
      v115 = 0;
      v110 = 0;
      v111 = 0;
      v112 = 0;
      std::vector<long long>::reserve((void **)&v110, 0x2E8BA2E8BA2E8BA3 * (((char *)v12[1] - (char *)*v12) >> 3));
      v104[0] = a1;
      v104[1] = v81;
      v105 = v11 == 0;
      v106 = v80;
      v107 = v79;
      v108 = &v113;
      v109 = (void **)&v110;
      memset(&v103, 0, sizeof(v103));
      std::vector<int>::reserve(&v103, 0x2E8BA2E8BA2E8BA3 * (((char *)v12[1] - (char *)*v12) >> 3));
      v100 = 0;
      v101 = 0;
      v102 = 0;
      std::vector<quasar::Token>::reserve((uint64_t *)&v100, 0x2E8BA2E8BA2E8BA3 * (((char *)v12[1] - (char *)*v12) >> 3));
      v13 = *v12;
      v14 = v12[1];
      if (v13 == v14)
      {
        v15 = 0;
        v16 = 0.0;
      }
      else
      {
        v15 = 0;
        v16 = 0.0;
        do
        {
          quasar::ProcessHypotheses<1ul,0l,-1l>(quasar::DecoderPassData const&,std::shared_ptr<quasar::DecoderChainOutput> const&,std::vector<quasar::CalculateJoinedNBest<1ul>::HypothesisVector,std::allocator<quasar::CalculateJoinedNBest<1ul>::HypothesisVector>> const&,std::vector<std::vector<quasar::Token>> *,std::vector<double> *,kaldi::LatticeScoreCache *)::{lambda(quasar::NBestToken<1ul> const&)#1}::operator()(v104, v13, (uint64_t)v82);
          v17 = *((float *)&v94 + 3);
          v18 = *(float *)&v95;
          if (quasar::Token::isPrintable((quasar::Token *)v82))
          {
            end = v103.__end_;
            if (v103.__end_ >= v103.__end_cap_.__value_)
            {
              begin = v103.__begin_;
              v22 = v103.__end_ - v103.__begin_;
              v23 = v22 + 1;
              if ((unint64_t)(v22 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v24 = (char *)v103.__end_cap_.__value_ - (char *)v103.__begin_;
              if (((char *)v103.__end_cap_.__value_ - (char *)v103.__begin_) >> 1 > v23)
                v23 = v24 >> 1;
              if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
                v25 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v25 = v23;
              if (v25)
              {
                v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v103.__end_cap_, v25);
                begin = v103.__begin_;
                end = v103.__end_;
              }
              else
              {
                v26 = 0;
              }
              v27 = (unsigned int *)&v26[4 * v22];
              *v27 = *v13;
              v20 = v27 + 1;
              while (end != begin)
              {
                v28 = *--end;
                *--v27 = v28;
              }
              v103.__begin_ = v27;
              v103.__end_ = v20;
              v103.__end_cap_.__value_ = (unsigned int *)&v26[4 * v25];
              if (begin)
                operator delete(begin);
            }
            else
            {
              *v103.__end_ = *v13;
              v20 = end + 1;
            }
            v103.__end_ = v20;
            v29 = v101;
            if ((unint64_t)v101 >= v102)
            {
              v30 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)&v100, (const quasar::Token *)v82);
            }
            else
            {
              quasar::Token::Token(v101, (const quasar::Token *)v82);
              v30 = (std::string *)((char *)v29 + 224);
            }
            v101 = v30;
            v31 = *(_QWORD *)(a1 + 216);
            if (!v31)
              goto LABEL_36;
            v34 = *(_QWORD *)(v31 + 40);
            v32 = v31 + 40;
            v33 = v34;
            if (!v34)
              goto LABEL_36;
            v35 = *v13;
            v36 = v32;
            do
            {
              v37 = *(_DWORD *)(v33 + 28);
              v38 = v37 < v35;
              if (v37 >= v35)
                v39 = (uint64_t *)v33;
              else
                v39 = (uint64_t *)(v33 + 8);
              if (!v38)
                v36 = v33;
              v33 = *v39;
            }
            while (*v39);
            if (v36 == v32 || v35 < *(_DWORD *)(v36 + 28))
LABEL_36:
              ++v15;
          }
          if (SBYTE7(v94) < 0)
            operator delete(__p[0]);
          if (SBYTE7(v92) < 0)
            operator delete(v91[0]);
          v99[0] = (void **)&v89 + 1;
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v99);
          if (SBYTE7(v89) < 0)
            operator delete(v88[0]);
          v99[0] = (void **)&v86 + 1;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v99);
          if (SBYTE7(v86) < 0)
            operator delete(v85[0]);
          if (SBYTE7(v83) < 0)
            operator delete(v82[0]);
          v16 = v16 + (float)(v17 + v18);
          v13 += 22;
        }
        while (v13 != v14);
      }
      if (v100 != v101)
        v101[-8].__r_.__value_.__s.__data_[12] = 0;
      if (!v11)
      {
        quasar::calculateEosLikelihood(a1, (uint64_t)v81, (uint64_t *)&v100, &v103.__begin_);
        quasar::calculateNumTokensExcludingTriggerPhrase(a1, v81, (uint64_t *)&v100);
      }
      v40 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 168) + 120))(*(_QWORD *)(a1 + 168));
      v41 = *(_QWORD *)(a1 + 216);
      if (!v40 || !v41)
        break;
      v99[0] = &v113;
      v99[1] = (void **)&v110;
      v99[2] = (void **)a1;
      if (v15 > (v111 - v110) >> 3)
      {
        if (quasar::gLogLevel >= 4)
        {
          v97 = 0u;
          v98 = 0u;
          v95 = 0u;
          v96 = 0u;
          *(_OWORD *)__p = 0u;
          v94 = 0u;
          *(_OWORD *)v91 = 0u;
          v92 = 0u;
          v89 = 0u;
          v90 = 0u;
          v87 = 0u;
          *(_OWORD *)v88 = 0u;
          *(_OWORD *)v85 = 0u;
          v86 = 0u;
          v83 = 0u;
          v84 = 0u;
          *(_OWORD *)v82 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v82);
          v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"Phone sequencing failed; Ran out of phones, probably because ",
                  61);
          v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"the last word got clipped in the audio. ", 40);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Lattice word alignment and confidence computation will also fail.", 65);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v82);
        }
        *(_BYTE *)(*v81 + 144) = 1;
        goto LABEL_64;
      }
      if (v15 >= (v111 - v110) >> 3)
      {
        v58 = v100;
        v57 = v101;
        if (v101 != v100)
        {
          v59 = 0;
          v60 = 0;
          do
          {
            v61 = *(_QWORD *)(a1 + 216);
            v64 = *(_QWORD *)(v61 + 40);
            v62 = v61 + 40;
            v63 = v64;
            if (!v64)
              goto LABEL_103;
            v65 = v103.__begin_[v59];
            v66 = v62;
            do
            {
              v67 = *(_DWORD *)(v63 + 28);
              v68 = v67 < v65;
              if (v67 >= v65)
                v69 = (uint64_t *)v63;
              else
                v69 = (uint64_t *)(v63 + 8);
              if (!v68)
                v66 = v63;
              v63 = *v69;
            }
            while (*v69);
            if (v66 == v62 || v65 < *(_DWORD *)(v66 + 28))
            {
LABEL_103:
              quasar::ProcessHypotheses<1ul,0l,-1l>(quasar::DecoderPassData const&,std::shared_ptr<quasar::DecoderChainOutput> const&,std::vector<quasar::CalculateJoinedNBest<1ul>::HypothesisVector,std::allocator<quasar::CalculateJoinedNBest<1ul>::HypothesisVector>> const&,std::vector<std::vector<quasar::Token>> *,std::vector<double> *,kaldi::LatticeScoreCache *)::{lambda(unsigned long)#1}::operator()((uint64_t)v99, v60);
              v70 = (char *)v58 + 224 * v59;
              v71 = (uint64_t)(v70 + 48);
              if (v70[71] < 0)
                operator delete(*(void **)v71);
              v72 = *(_OWORD *)v82;
              *(_QWORD *)(v71 + 16) = v83;
              *(_OWORD *)v71 = v72;
              quasar::PhonesetMapping::getIpaPhoneSequence(a1 + 608, v71, (uint64_t)v82);
              v73 = (char *)v58 + 224 * v59;
              v74 = v73 + 96;
              if (v73[119] < 0)
                operator delete(*(void **)v74);
              v75 = *(_OWORD *)v82;
              *((_QWORD *)v74 + 2) = v83;
              *(_OWORD *)v74 = v75;
              ++v60;
              v58 = v100;
              v57 = v101;
            }
            ++v59;
          }
          while (v59 < 0x6DB6DB6DB6DB6DB7 * (((char *)v57 - (char *)v58) >> 5));
        }
        goto LABEL_64;
      }
      if (quasar::gLogLevel >= 4)
      {
        v97 = 0u;
        v98 = 0u;
        v95 = 0u;
        v96 = 0u;
        *(_OWORD *)__p = 0u;
        v94 = 0u;
        *(_OWORD *)v91 = 0u;
        v92 = 0u;
        v89 = 0u;
        v90 = 0u;
        v87 = 0u;
        *(_OWORD *)v88 = 0u;
        *(_OWORD *)v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        *(_OWORD *)v82 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v82);
        v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"Phone sequencing failed; ran out of words for unknown reasons. ",
                63);
        v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"Lattice word alignment and confidence computation will also fail. ", 66);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"PLEASE FILE A RADAR", 19);
LABEL_63:
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v82);
      }
LABEL_64:
      std::vector<std::vector<quasar::Token>>::emplace_back<std::vector<quasar::Token>>(a4, (uint64_t)&v100);
      v45 = *(double **)(a5 + 8);
      v44 = *(_QWORD *)(a5 + 16);
      if ((unint64_t)v45 >= v44)
      {
        v47 = *(double **)a5;
        v48 = ((uint64_t)v45 - *(_QWORD *)a5) >> 3;
        v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v50 = v44 - (_QWORD)v47;
        if (v50 >> 2 > v49)
          v49 = v50 >> 2;
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
          v51 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v51 = v49;
        if (v51)
        {
          v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a5 + 16, v51);
          v47 = *(double **)a5;
          v45 = *(double **)(a5 + 8);
        }
        else
        {
          v52 = 0;
        }
        v55 = (double *)&v52[8 * v48];
        *v55 = v16;
        v46 = v55 + 1;
        while (v45 != v47)
        {
          v56 = *((_QWORD *)v45-- - 1);
          *((_QWORD *)v55-- - 1) = v56;
        }
        *(_QWORD *)a5 = v55;
        *(_QWORD *)(a5 + 8) = v46;
        *(_QWORD *)(a5 + 16) = &v52[8 * v51];
        if (v47)
          operator delete(v47);
      }
      else
      {
        *v45 = v16;
        v46 = v45 + 1;
      }
      *(_QWORD *)(a5 + 8) = v46;
      v82[0] = &v100;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v82);
      if (v103.__begin_)
      {
        v103.__end_ = v103.__begin_;
        operator delete(v103.__begin_);
      }
      if (v110)
      {
        v111 = v110;
        operator delete(v110);
      }
      if (v113)
      {
        v114 = v113;
        operator delete(v113);
      }
      ++v11;
      v10 = *v77;
      if (v11 >= 0xAAAAAAAAAAAAAAABLL * ((v77[1] - *v77) >> 3))
        return 1;
    }
    if (v41 || quasar::gLogLevel < 4)
      goto LABEL_64;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    *(_OWORD *)__p = 0u;
    v94 = 0u;
    *(_OWORD *)v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    *(_OWORD *)v88 = 0u;
    *(_OWORD *)v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    *(_OWORD *)v82 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"No word boundary info found. Cannot give proper phone sequence.", 63);
    goto LABEL_63;
  }
  return 1;
}

void sub_1AD92B6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  uint64_t v52;
  void *v54;
  void *v55;
  void *v56;

  a15 = (void **)&a52;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a15);
  v54 = *(void **)(v52 - 240);
  if (v54)
  {
    *(_QWORD *)(v52 - 232) = v54;
    operator delete(v54);
  }
  v55 = *(void **)(v52 - 168);
  if (v55)
  {
    *(_QWORD *)(v52 - 160) = v55;
    operator delete(v55);
  }
  v56 = *(void **)(v52 - 144);
  if (v56)
  {
    *(_QWORD *)(v52 - 136) = v56;
    operator delete(v56);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::ProcessHypotheses<1ul,-1l,0l>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9;
  unint64_t v10;
  int **v11;
  int *v12;
  int *v13;
  unint64_t v14;
  double v15;
  float v16;
  float v17;
  std::vector<unsigned int>::pointer end;
  unsigned int *v19;
  std::vector<unsigned int>::pointer begin;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  char *v25;
  unsigned int *v26;
  unsigned int v27;
  std::string *v28;
  std::string *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  double *v44;
  double *v45;
  double *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  _QWORD *v52;
  _QWORD *v53;
  double *v54;
  uint64_t v55;
  std::string *v56;
  std::string *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  signed int v64;
  uint64_t v65;
  signed int v66;
  BOOL v67;
  uint64_t *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  char *v72;
  char *v73;
  __int128 v74;
  uint64_t *v76;
  int v78;
  uint64_t *v79;
  void *v80[2];
  __int128 v81;
  __int128 v82;
  void *v83[2];
  __int128 v84;
  __int128 v85;
  void *v86[2];
  __int128 v87;
  __int128 v88;
  void *v89[2];
  __int128 v90;
  void *__p[2];
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  void **v97[3];
  std::string *v98;
  std::string *v99;
  unint64_t v100;
  std::vector<unsigned int> v101;
  _QWORD v102[2];
  BOOL v103;
  int v104;
  char v105;
  void **v106;
  void **v107;
  _BYTE *v108;
  _BYTE *v109;
  uint64_t v110;
  void *v111;
  void *v112;
  uint64_t v113;

  v78 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 16) + 32))(*(_QWORD *)(*(_QWORD *)a1 + 16));
  v79 = a2;
  *(_QWORD *)(*a2 + 992) = *(_QWORD *)(*a2 + 984);
  v9 = *a3;
  v76 = a3;
  if (a3[1] != *a3)
  {
    v10 = 0;
    while (1)
    {
      v11 = (int **)(v9 + 24 * v10);
      v111 = 0;
      v112 = 0;
      v113 = 0;
      v108 = 0;
      v109 = 0;
      v110 = 0;
      std::vector<long long>::reserve((void **)&v108, 0x2E8BA2E8BA2E8BA3 * (((char *)v11[1] - (char *)*v11) >> 3));
      v102[0] = a1;
      v102[1] = v79;
      v103 = v10 == 0;
      v104 = v78;
      v105 = 0;
      v106 = &v111;
      v107 = (void **)&v108;
      memset(&v101, 0, sizeof(v101));
      std::vector<int>::reserve(&v101, 0x2E8BA2E8BA2E8BA3 * (((char *)v11[1] - (char *)*v11) >> 3));
      v98 = 0;
      v99 = 0;
      v100 = 0;
      std::vector<quasar::Token>::reserve((uint64_t *)&v98, 0x2E8BA2E8BA2E8BA3 * (((char *)v11[1] - (char *)*v11) >> 3));
      v12 = *v11;
      v13 = v11[1];
      if (v12 == v13)
      {
        v14 = 0;
        v15 = 0.0;
      }
      else
      {
        v14 = 0;
        v15 = 0.0;
        do
        {
          quasar::ProcessHypotheses<1ul,-1l,0l>(quasar::DecoderPassData const&,std::shared_ptr<quasar::DecoderChainOutput> const&,std::vector<quasar::CalculateJoinedNBest<1ul>::HypothesisVector,std::allocator<quasar::CalculateJoinedNBest<1ul>::HypothesisVector>> const&,std::vector<std::vector<quasar::Token>> *,std::vector<double> *,kaldi::LatticeScoreCache *)::{lambda(quasar::NBestToken<1ul> const&)#1}::operator()((unsigned __int8 *)v102, v12, (uint64_t)v80);
          v16 = *((float *)&v92 + 3);
          v17 = *(float *)&v93;
          if (quasar::Token::isPrintable((quasar::Token *)v80))
          {
            end = v101.__end_;
            if (v101.__end_ >= v101.__end_cap_.__value_)
            {
              begin = v101.__begin_;
              v21 = v101.__end_ - v101.__begin_;
              v22 = v21 + 1;
              if ((unint64_t)(v21 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v23 = (char *)v101.__end_cap_.__value_ - (char *)v101.__begin_;
              if (((char *)v101.__end_cap_.__value_ - (char *)v101.__begin_) >> 1 > v22)
                v22 = v23 >> 1;
              if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
                v24 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v24 = v22;
              if (v24)
              {
                v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v101.__end_cap_, v24);
                begin = v101.__begin_;
                end = v101.__end_;
              }
              else
              {
                v25 = 0;
              }
              v26 = (unsigned int *)&v25[4 * v21];
              *v26 = *v12;
              v19 = v26 + 1;
              while (end != begin)
              {
                v27 = *--end;
                *--v26 = v27;
              }
              v101.__begin_ = v26;
              v101.__end_ = v19;
              v101.__end_cap_.__value_ = (unsigned int *)&v25[4 * v24];
              if (begin)
                operator delete(begin);
            }
            else
            {
              *v101.__end_ = *v12;
              v19 = end + 1;
            }
            v101.__end_ = v19;
            v28 = v99;
            if ((unint64_t)v99 >= v100)
            {
              v29 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)&v98, (const quasar::Token *)v80);
            }
            else
            {
              quasar::Token::Token(v99, (const quasar::Token *)v80);
              v29 = (std::string *)((char *)v28 + 224);
            }
            v99 = v29;
            v30 = *(_QWORD *)(a1 + 216);
            if (!v30)
              goto LABEL_36;
            v33 = *(_QWORD *)(v30 + 40);
            v31 = v30 + 40;
            v32 = v33;
            if (!v33)
              goto LABEL_36;
            v34 = *v12;
            v35 = v31;
            do
            {
              v36 = *(_DWORD *)(v32 + 28);
              v37 = v36 < v34;
              if (v36 >= v34)
                v38 = (uint64_t *)v32;
              else
                v38 = (uint64_t *)(v32 + 8);
              if (!v37)
                v35 = v32;
              v32 = *v38;
            }
            while (*v38);
            if (v35 == v31 || v34 < *(_DWORD *)(v35 + 28))
LABEL_36:
              ++v14;
          }
          if (SBYTE7(v92) < 0)
            operator delete(__p[0]);
          if (SBYTE7(v90) < 0)
            operator delete(v89[0]);
          v97[0] = (void **)&v87 + 1;
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v97);
          if (SBYTE7(v87) < 0)
            operator delete(v86[0]);
          v97[0] = (void **)&v84 + 1;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v97);
          if (SBYTE7(v84) < 0)
            operator delete(v83[0]);
          if (SBYTE7(v81) < 0)
            operator delete(v80[0]);
          v15 = v15 + (float)(v16 + v17);
          v12 += 22;
        }
        while (v12 != v13);
      }
      if (v98 != v99)
        v99[-8].__r_.__value_.__s.__data_[12] = 0;
      if (!v10)
      {
        quasar::calculateEosLikelihood(a1, (uint64_t)v79, (uint64_t *)&v98, &v101.__begin_);
        quasar::calculateNumTokensExcludingTriggerPhrase(a1, v79, (uint64_t *)&v98);
      }
      v39 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 168) + 120))(*(_QWORD *)(a1 + 168));
      v40 = *(_QWORD *)(a1 + 216);
      if (!v39 || !v40)
        break;
      v97[0] = &v111;
      v97[1] = (void **)&v108;
      v97[2] = (void **)a1;
      if (v14 > (v109 - v108) >> 3)
      {
        if (quasar::gLogLevel >= 4)
        {
          v95 = 0u;
          v96 = 0u;
          v93 = 0u;
          v94 = 0u;
          *(_OWORD *)__p = 0u;
          v92 = 0u;
          *(_OWORD *)v89 = 0u;
          v90 = 0u;
          v87 = 0u;
          v88 = 0u;
          v85 = 0u;
          *(_OWORD *)v86 = 0u;
          *(_OWORD *)v83 = 0u;
          v84 = 0u;
          v81 = 0u;
          v82 = 0u;
          *(_OWORD *)v80 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v80);
          v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"Phone sequencing failed; Ran out of phones, probably because ",
                  61);
          v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"the last word got clipped in the audio. ", 40);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Lattice word alignment and confidence computation will also fail.", 65);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v80);
        }
        *(_BYTE *)(*v79 + 144) = 1;
        goto LABEL_64;
      }
      if (v14 >= (v109 - v108) >> 3)
      {
        v57 = v98;
        v56 = v99;
        if (v99 != v98)
        {
          v58 = 0;
          v59 = 0;
          do
          {
            v60 = *(_QWORD *)(a1 + 216);
            v63 = *(_QWORD *)(v60 + 40);
            v61 = v60 + 40;
            v62 = v63;
            if (!v63)
              goto LABEL_103;
            v64 = v101.__begin_[v58];
            v65 = v61;
            do
            {
              v66 = *(_DWORD *)(v62 + 28);
              v67 = v66 < v64;
              if (v66 >= v64)
                v68 = (uint64_t *)v62;
              else
                v68 = (uint64_t *)(v62 + 8);
              if (!v67)
                v65 = v62;
              v62 = *v68;
            }
            while (*v68);
            if (v65 == v61 || v64 < *(_DWORD *)(v65 + 28))
            {
LABEL_103:
              quasar::ProcessHypotheses<1ul,-1l,0l>(quasar::DecoderPassData const&,std::shared_ptr<quasar::DecoderChainOutput> const&,std::vector<quasar::CalculateJoinedNBest<1ul>::HypothesisVector,std::allocator<quasar::CalculateJoinedNBest<1ul>::HypothesisVector>> const&,std::vector<std::vector<quasar::Token>> *,std::vector<double> *,kaldi::LatticeScoreCache *)::{lambda(unsigned long)#1}::operator()((uint64_t)v97, v59);
              v69 = (char *)v57 + 224 * v58;
              v70 = (uint64_t)(v69 + 48);
              if (v69[71] < 0)
                operator delete(*(void **)v70);
              v71 = *(_OWORD *)v80;
              *(_QWORD *)(v70 + 16) = v81;
              *(_OWORD *)v70 = v71;
              quasar::PhonesetMapping::getIpaPhoneSequence(a1 + 608, v70, (uint64_t)v80);
              v72 = (char *)v57 + 224 * v58;
              v73 = v72 + 96;
              if (v72[119] < 0)
                operator delete(*(void **)v73);
              v74 = *(_OWORD *)v80;
              *((_QWORD *)v73 + 2) = v81;
              *(_OWORD *)v73 = v74;
              ++v59;
              v57 = v98;
              v56 = v99;
            }
            ++v58;
          }
          while (v58 < 0x6DB6DB6DB6DB6DB7 * (((char *)v56 - (char *)v57) >> 5));
        }
        goto LABEL_64;
      }
      if (quasar::gLogLevel >= 4)
      {
        v95 = 0u;
        v96 = 0u;
        v93 = 0u;
        v94 = 0u;
        *(_OWORD *)__p = 0u;
        v92 = 0u;
        *(_OWORD *)v89 = 0u;
        v90 = 0u;
        v87 = 0u;
        v88 = 0u;
        v85 = 0u;
        *(_OWORD *)v86 = 0u;
        *(_OWORD *)v83 = 0u;
        v84 = 0u;
        v81 = 0u;
        v82 = 0u;
        *(_OWORD *)v80 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v80);
        v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"Phone sequencing failed; ran out of words for unknown reasons. ",
                63);
        v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Lattice word alignment and confidence computation will also fail. ", 66);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"PLEASE FILE A RADAR", 19);
LABEL_63:
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v80);
      }
LABEL_64:
      std::vector<std::vector<quasar::Token>>::emplace_back<std::vector<quasar::Token>>(a4, (uint64_t)&v98);
      v44 = *(double **)(a5 + 8);
      v43 = *(_QWORD *)(a5 + 16);
      if ((unint64_t)v44 >= v43)
      {
        v46 = *(double **)a5;
        v47 = ((uint64_t)v44 - *(_QWORD *)a5) >> 3;
        v48 = v47 + 1;
        if ((unint64_t)(v47 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v49 = v43 - (_QWORD)v46;
        if (v49 >> 2 > v48)
          v48 = v49 >> 2;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
          v50 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v50 = v48;
        if (v50)
        {
          v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a5 + 16, v50);
          v46 = *(double **)a5;
          v44 = *(double **)(a5 + 8);
        }
        else
        {
          v51 = 0;
        }
        v54 = (double *)&v51[8 * v47];
        *v54 = v15;
        v45 = v54 + 1;
        while (v44 != v46)
        {
          v55 = *((_QWORD *)v44-- - 1);
          *((_QWORD *)v54-- - 1) = v55;
        }
        *(_QWORD *)a5 = v54;
        *(_QWORD *)(a5 + 8) = v45;
        *(_QWORD *)(a5 + 16) = &v51[8 * v50];
        if (v46)
          operator delete(v46);
      }
      else
      {
        *v44 = v15;
        v45 = v44 + 1;
      }
      *(_QWORD *)(a5 + 8) = v45;
      v80[0] = &v98;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v80);
      if (v101.__begin_)
      {
        v101.__end_ = v101.__begin_;
        operator delete(v101.__begin_);
      }
      if (v108)
      {
        v109 = v108;
        operator delete(v108);
      }
      if (v111)
      {
        v112 = v111;
        operator delete(v111);
      }
      ++v10;
      v9 = *v76;
      if (v10 >= 0xAAAAAAAAAAAAAAABLL * ((v76[1] - *v76) >> 3))
        return 1;
    }
    if (v40 || quasar::gLogLevel < 4)
      goto LABEL_64;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    *(_OWORD *)__p = 0u;
    v92 = 0u;
    *(_OWORD *)v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    *(_OWORD *)v86 = 0u;
    *(_OWORD *)v83 = 0u;
    v84 = 0u;
    v81 = 0u;
    v82 = 0u;
    *(_OWORD *)v80 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v80);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"No word boundary info found. Cannot give proper phone sequence.", 63);
    goto LABEL_63;
  }
  return 1;
}

void sub_1AD92BF4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  uint64_t v52;
  void *v54;
  void *v55;
  void *v56;

  a15 = (void **)&a52;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a15);
  v54 = *(void **)(v52 - 240);
  if (v54)
  {
    *(_QWORD *)(v52 - 232) = v54;
    operator delete(v54);
  }
  v55 = *(void **)(v52 - 168);
  if (v55)
  {
    *(_QWORD *)(v52 - 160) = v55;
    operator delete(v55);
  }
  v56 = *(void **)(v52 - 144);
  if (v56)
  {
    *(_QWORD *)(v52 - 136) = v56;
    operator delete(v56);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::ProcessHypotheses<0ul,-1l,-1l>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9;
  unint64_t v10;
  int **v11;
  int *v12;
  int *v13;
  unint64_t v14;
  double v15;
  float v16;
  float v17;
  std::vector<unsigned int>::pointer end;
  unsigned int *v19;
  std::vector<unsigned int>::pointer begin;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  char *v25;
  unsigned int *v26;
  unsigned int v27;
  std::string *v28;
  std::string *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  double *v44;
  double *v45;
  double *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  _QWORD *v52;
  _QWORD *v53;
  double *v54;
  uint64_t v55;
  std::string *v56;
  std::string *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  signed int v64;
  uint64_t v65;
  signed int v66;
  BOOL v67;
  uint64_t *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  char *v72;
  char *v73;
  __int128 v74;
  uint64_t *v76;
  int v78;
  uint64_t *v79;
  void *v80[2];
  __int128 v81;
  __int128 v82;
  void *v83[2];
  __int128 v84;
  __int128 v85;
  void *v86[2];
  __int128 v87;
  __int128 v88;
  void *v89[2];
  __int128 v90;
  void *__p[2];
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  void **v97[3];
  std::string *v98;
  std::string *v99;
  unint64_t v100;
  std::vector<unsigned int> v101;
  _QWORD v102[2];
  BOOL v103;
  int v104;
  char v105;
  void **v106;
  void **v107;
  _BYTE *v108;
  _BYTE *v109;
  uint64_t v110;
  void *v111;
  void *v112;
  uint64_t v113;

  v78 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 16) + 32))(*(_QWORD *)(*(_QWORD *)a1 + 16));
  v79 = a2;
  *(_QWORD *)(*a2 + 992) = *(_QWORD *)(*a2 + 984);
  v9 = *a3;
  v76 = a3;
  if (a3[1] != *a3)
  {
    v10 = 0;
    while (1)
    {
      v11 = (int **)(v9 + 24 * v10);
      v111 = 0;
      v112 = 0;
      v113 = 0;
      v108 = 0;
      v109 = 0;
      v110 = 0;
      std::vector<long long>::reserve((void **)&v108, 0x2E8BA2E8BA2E8BA3 * (((char *)v11[1] - (char *)*v11) >> 3));
      v102[0] = a1;
      v102[1] = v79;
      v103 = v10 == 0;
      v104 = v78;
      v105 = 0;
      v106 = &v111;
      v107 = (void **)&v108;
      memset(&v101, 0, sizeof(v101));
      std::vector<int>::reserve(&v101, 0x2E8BA2E8BA2E8BA3 * (((char *)v11[1] - (char *)*v11) >> 3));
      v98 = 0;
      v99 = 0;
      v100 = 0;
      std::vector<quasar::Token>::reserve((uint64_t *)&v98, 0x2E8BA2E8BA2E8BA3 * (((char *)v11[1] - (char *)*v11) >> 3));
      v12 = *v11;
      v13 = v11[1];
      if (v12 == v13)
      {
        v14 = 0;
        v15 = 0.0;
      }
      else
      {
        v14 = 0;
        v15 = 0.0;
        do
        {
          quasar::ProcessHypotheses<0ul,-1l,-1l>(quasar::DecoderPassData const&,std::shared_ptr<quasar::DecoderChainOutput> const&,std::vector<quasar::CalculateJoinedNBest<0ul>::HypothesisVector,std::allocator<quasar::CalculateJoinedNBest<0ul>::HypothesisVector>> const&,std::vector<std::vector<quasar::Token>> *,std::vector<double> *,kaldi::LatticeScoreCache *)::{lambda(quasar::NBestToken<0ul> const&)#1}::operator()((const float *)v102, v12, (uint64_t)v80);
          v16 = *((float *)&v92 + 3);
          v17 = *(float *)&v93;
          if (quasar::Token::isPrintable((quasar::Token *)v80))
          {
            end = v101.__end_;
            if (v101.__end_ >= v101.__end_cap_.__value_)
            {
              begin = v101.__begin_;
              v21 = v101.__end_ - v101.__begin_;
              v22 = v21 + 1;
              if ((unint64_t)(v21 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v23 = (char *)v101.__end_cap_.__value_ - (char *)v101.__begin_;
              if (((char *)v101.__end_cap_.__value_ - (char *)v101.__begin_) >> 1 > v22)
                v22 = v23 >> 1;
              if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
                v24 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v24 = v22;
              if (v24)
              {
                v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v101.__end_cap_, v24);
                begin = v101.__begin_;
                end = v101.__end_;
              }
              else
              {
                v25 = 0;
              }
              v26 = (unsigned int *)&v25[4 * v21];
              *v26 = *v12;
              v19 = v26 + 1;
              while (end != begin)
              {
                v27 = *--end;
                *--v26 = v27;
              }
              v101.__begin_ = v26;
              v101.__end_ = v19;
              v101.__end_cap_.__value_ = (unsigned int *)&v25[4 * v24];
              if (begin)
                operator delete(begin);
            }
            else
            {
              *v101.__end_ = *v12;
              v19 = end + 1;
            }
            v101.__end_ = v19;
            v28 = v99;
            if ((unint64_t)v99 >= v100)
            {
              v29 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)&v98, (const quasar::Token *)v80);
            }
            else
            {
              quasar::Token::Token(v99, (const quasar::Token *)v80);
              v29 = (std::string *)((char *)v28 + 224);
            }
            v99 = v29;
            v30 = *(_QWORD *)(a1 + 216);
            if (!v30)
              goto LABEL_36;
            v33 = *(_QWORD *)(v30 + 40);
            v31 = v30 + 40;
            v32 = v33;
            if (!v33)
              goto LABEL_36;
            v34 = *v12;
            v35 = v31;
            do
            {
              v36 = *(_DWORD *)(v32 + 28);
              v37 = v36 < v34;
              if (v36 >= v34)
                v38 = (uint64_t *)v32;
              else
                v38 = (uint64_t *)(v32 + 8);
              if (!v37)
                v35 = v32;
              v32 = *v38;
            }
            while (*v38);
            if (v35 == v31 || v34 < *(_DWORD *)(v35 + 28))
LABEL_36:
              ++v14;
          }
          if (SBYTE7(v92) < 0)
            operator delete(__p[0]);
          if (SBYTE7(v90) < 0)
            operator delete(v89[0]);
          v97[0] = (void **)&v87 + 1;
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v97);
          if (SBYTE7(v87) < 0)
            operator delete(v86[0]);
          v97[0] = (void **)&v84 + 1;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v97);
          if (SBYTE7(v84) < 0)
            operator delete(v83[0]);
          if (SBYTE7(v81) < 0)
            operator delete(v80[0]);
          v15 = v15 + (float)(v16 + v17);
          v12 += 22;
        }
        while (v12 != v13);
      }
      if (v98 != v99)
        v99[-8].__r_.__value_.__s.__data_[12] = 0;
      if (!v10)
      {
        quasar::calculateEosLikelihood(a1, (uint64_t)v79, (uint64_t *)&v98, &v101.__begin_);
        quasar::calculateNumTokensExcludingTriggerPhrase(a1, v79, (uint64_t *)&v98);
      }
      v39 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 168) + 120))(*(_QWORD *)(a1 + 168));
      v40 = *(_QWORD *)(a1 + 216);
      if (!v39 || !v40)
        break;
      v97[0] = &v111;
      v97[1] = (void **)&v108;
      v97[2] = (void **)a1;
      if (v14 > (v109 - v108) >> 3)
      {
        if (quasar::gLogLevel >= 4)
        {
          v95 = 0u;
          v96 = 0u;
          v93 = 0u;
          v94 = 0u;
          *(_OWORD *)__p = 0u;
          v92 = 0u;
          *(_OWORD *)v89 = 0u;
          v90 = 0u;
          v87 = 0u;
          v88 = 0u;
          v85 = 0u;
          *(_OWORD *)v86 = 0u;
          *(_OWORD *)v83 = 0u;
          v84 = 0u;
          v81 = 0u;
          v82 = 0u;
          *(_OWORD *)v80 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v80);
          v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"Phone sequencing failed; Ran out of phones, probably because ",
                  61);
          v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"the last word got clipped in the audio. ", 40);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Lattice word alignment and confidence computation will also fail.", 65);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v80);
        }
        *(_BYTE *)(*v79 + 144) = 1;
        goto LABEL_64;
      }
      if (v14 >= (v109 - v108) >> 3)
      {
        v57 = v98;
        v56 = v99;
        if (v99 != v98)
        {
          v58 = 0;
          v59 = 0;
          do
          {
            v60 = *(_QWORD *)(a1 + 216);
            v63 = *(_QWORD *)(v60 + 40);
            v61 = v60 + 40;
            v62 = v63;
            if (!v63)
              goto LABEL_103;
            v64 = v101.__begin_[v58];
            v65 = v61;
            do
            {
              v66 = *(_DWORD *)(v62 + 28);
              v67 = v66 < v64;
              if (v66 >= v64)
                v68 = (uint64_t *)v62;
              else
                v68 = (uint64_t *)(v62 + 8);
              if (!v67)
                v65 = v62;
              v62 = *v68;
            }
            while (*v68);
            if (v65 == v61 || v64 < *(_DWORD *)(v65 + 28))
            {
LABEL_103:
              quasar::ProcessHypotheses<0ul,-1l,-1l>(quasar::DecoderPassData const&,std::shared_ptr<quasar::DecoderChainOutput> const&,std::vector<quasar::CalculateJoinedNBest<0ul>::HypothesisVector,std::allocator<quasar::CalculateJoinedNBest<0ul>::HypothesisVector>> const&,std::vector<std::vector<quasar::Token>> *,std::vector<double> *,kaldi::LatticeScoreCache *)::{lambda(unsigned long)#1}::operator()((uint64_t)v97, v59);
              v69 = (char *)v57 + 224 * v58;
              v70 = (uint64_t)(v69 + 48);
              if (v69[71] < 0)
                operator delete(*(void **)v70);
              v71 = *(_OWORD *)v80;
              *(_QWORD *)(v70 + 16) = v81;
              *(_OWORD *)v70 = v71;
              quasar::PhonesetMapping::getIpaPhoneSequence(a1 + 608, v70, (uint64_t)v80);
              v72 = (char *)v57 + 224 * v58;
              v73 = v72 + 96;
              if (v72[119] < 0)
                operator delete(*(void **)v73);
              v74 = *(_OWORD *)v80;
              *((_QWORD *)v73 + 2) = v81;
              *(_OWORD *)v73 = v74;
              ++v59;
              v57 = v98;
              v56 = v99;
            }
            ++v58;
          }
          while (v58 < 0x6DB6DB6DB6DB6DB7 * (((char *)v56 - (char *)v57) >> 5));
        }
        goto LABEL_64;
      }
      if (quasar::gLogLevel >= 4)
      {
        v95 = 0u;
        v96 = 0u;
        v93 = 0u;
        v94 = 0u;
        *(_OWORD *)__p = 0u;
        v92 = 0u;
        *(_OWORD *)v89 = 0u;
        v90 = 0u;
        v87 = 0u;
        v88 = 0u;
        v85 = 0u;
        *(_OWORD *)v86 = 0u;
        *(_OWORD *)v83 = 0u;
        v84 = 0u;
        v81 = 0u;
        v82 = 0u;
        *(_OWORD *)v80 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v80);
        v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"Phone sequencing failed; ran out of words for unknown reasons. ",
                63);
        v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Lattice word alignment and confidence computation will also fail. ", 66);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"PLEASE FILE A RADAR", 19);
LABEL_63:
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v80);
      }
LABEL_64:
      std::vector<std::vector<quasar::Token>>::emplace_back<std::vector<quasar::Token>>(a4, (uint64_t)&v98);
      v44 = *(double **)(a5 + 8);
      v43 = *(_QWORD *)(a5 + 16);
      if ((unint64_t)v44 >= v43)
      {
        v46 = *(double **)a5;
        v47 = ((uint64_t)v44 - *(_QWORD *)a5) >> 3;
        v48 = v47 + 1;
        if ((unint64_t)(v47 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v49 = v43 - (_QWORD)v46;
        if (v49 >> 2 > v48)
          v48 = v49 >> 2;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
          v50 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v50 = v48;
        if (v50)
        {
          v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a5 + 16, v50);
          v46 = *(double **)a5;
          v44 = *(double **)(a5 + 8);
        }
        else
        {
          v51 = 0;
        }
        v54 = (double *)&v51[8 * v47];
        *v54 = v15;
        v45 = v54 + 1;
        while (v44 != v46)
        {
          v55 = *((_QWORD *)v44-- - 1);
          *((_QWORD *)v54-- - 1) = v55;
        }
        *(_QWORD *)a5 = v54;
        *(_QWORD *)(a5 + 8) = v45;
        *(_QWORD *)(a5 + 16) = &v51[8 * v50];
        if (v46)
          operator delete(v46);
      }
      else
      {
        *v44 = v15;
        v45 = v44 + 1;
      }
      *(_QWORD *)(a5 + 8) = v45;
      v80[0] = &v98;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v80);
      if (v101.__begin_)
      {
        v101.__end_ = v101.__begin_;
        operator delete(v101.__begin_);
      }
      if (v108)
      {
        v109 = v108;
        operator delete(v108);
      }
      if (v111)
      {
        v112 = v111;
        operator delete(v111);
      }
      ++v10;
      v9 = *v76;
      if (v10 >= 0xAAAAAAAAAAAAAAABLL * ((v76[1] - *v76) >> 3))
        return 1;
    }
    if (v40 || quasar::gLogLevel < 4)
      goto LABEL_64;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    *(_OWORD *)__p = 0u;
    v92 = 0u;
    *(_OWORD *)v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    *(_OWORD *)v86 = 0u;
    *(_OWORD *)v83 = 0u;
    v84 = 0u;
    v81 = 0u;
    v82 = 0u;
    *(_OWORD *)v80 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v80);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"No word boundary info found. Cannot give proper phone sequence.", 63);
    goto LABEL_63;
  }
  return 1;
}

void sub_1AD92C7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  uint64_t v52;
  void *v54;
  void *v55;
  void *v56;

  a15 = (void **)&a52;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a15);
  v54 = *(void **)(v52 - 240);
  if (v54)
  {
    *(_QWORD *)(v52 - 232) = v54;
    operator delete(v54);
  }
  v55 = *(void **)(v52 - 168);
  if (v55)
  {
    *(_QWORD *)(v52 - 160) = v55;
    operator delete(v55);
  }
  v56 = *(void **)(v52 - 144);
  if (v56)
  {
    *(_QWORD *)(v52 - 136) = v56;
    operator delete(v56);
  }
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<kaldi::WordHypLattice::Arc *>>::emplace_back<std::vector<kaldi::WordHypLattice::Arc *>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v17[5];

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v17[4] = v4;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v12);
    v14 = &v13[24 * v9];
    v17[0] = v13;
    v17[1] = v14;
    v17[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v17[2] = v14 + 24;
    std::vector<std::vector<kaldi::WordHypLattice::Arc *>>::__swap_out_circular_buffer(a1, v17);
    v8 = (_QWORD *)a1[1];
    std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return v8 - 3;
}

void sub_1AD92C9A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *quasar::calculateLmeInfo(std::string *result, int a2, unsigned int a3, uint64_t a4)
{
  std::string::__raw *v4;
  std::string::size_type v5;
  std::string::size_type size;
  uint64_t v10;
  std::string::size_type v11;
  std::string::size_type v12;
  _DWORD *v13;
  int v14;
  _QWORD *v15;
  _OWORD v16[17];

  if ((a3 & 0x80000000) == 0)
  {
    v4 = (std::string::__raw *)result;
    v5 = result->__r_.__value_.__r.__words[0];
    size = result->__r_.__value_.__l.__size_;
    if (result->__r_.__value_.__r.__words[0] != size)
    {
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(size - v5) >> 3) <= a3)
      {
        memset(v16, 0, sizeof(v16));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"symbolTableId=", 14);
        v15 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", but lmeInfos.size()=", 22);
        std::ostream::operator<<();
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v16);
      }
      v10 = 40 * a3;
      result = std::string::operator=((std::string *)(a4 + 144), (const std::string *)(v5 + v10 + 16));
      v11 = v4->__words[0];
      *(_DWORD *)(a4 + 168) = *(_DWORD *)(v4->__words[0] + v10);
      if (a2)
      {
        v12 = v11 + 40 * a3;
        v14 = *(_DWORD *)(v12 + 8);
        v13 = (_DWORD *)(v12 + 8);
        if (v14)
          *v13 = 2;
      }
    }
  }
  return result;
}

void quasar::calculateEosLikelihood(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int **a4)
{
  uint64_t (***v5)(_QWORD);
  uint64_t *v9;
  uint64_t *v10;
  char v11;
  char v12;
  unsigned __int8 isTokenSpanPrefixOf;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  double v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char v36[12];
  unsigned int v37;

  v5 = *(uint64_t (****)(_QWORD))(*(_QWORD *)a2 + 640);
  if (!v5 || *a3 == a3[1] || *(double *)(*(_QWORD *)a2 + 1080) != 9.0)
    return;
  if (*(_BYTE *)(a1 + 817))
  {
    v9 = *(uint64_t **)(a1 + 824);
    v10 = *(uint64_t **)(a1 + 832);
    if (v9 != v10)
    {
      v11 = 0;
      v12 = 0;
      do
      {
        LODWORD(v19) = -1;
        if (quasar::isTokenSpanPrefixOf(v9, a3, 1, (int *)&v19))
          v11 = 1;
        LODWORD(v19) = -1;
        isTokenSpanPrefixOf = quasar::isTokenSpanPrefixOf(a3, v9, 1, (int *)&v19);
        if ((isTokenSpanPrefixOf & ((int)v19 >= 0)) != 0)
          v12 = 1;
        v9 += 3;
      }
      while (v9 != v10);
      if (*(_BYTE *)(a1 + 817) && (v11 & 1) != 0 && (v12 & 1) == 0)
        return;
    }
    v5 = *(uint64_t (****)(_QWORD))(*(_QWORD *)a2 + 640);
  }
  v14 = (**v5)(v5);
  v16 = *a4;
  v15 = a4[1];
  while (v16 != v15)
  {
    if (((*(uint64_t (**)(_QWORD, uint64_t, _QWORD, char *))(**(_QWORD **)(*(_QWORD *)a2 + 640) + 32))(*(_QWORD *)(*(_QWORD *)a2 + 640), v14, *v16, v36) & 1) == 0)
    {
      if (quasar::gLogLevel >= 2)
      {
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        v26 = 0u;
        v27 = 0u;
        v24 = 0u;
        v25 = 0u;
        v22 = 0u;
        v23 = 0u;
        v20 = 0u;
        v21 = 0u;
        v19 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"The refeeding of word sequence should not fail.", 47);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v19);
      }
      return;
    }
    v14 = v37;
    ++v16;
  }
  if ((_DWORD)v14 != -1)
  {
    v17 = (*(float (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a2 + 640) + 56))(*(_QWORD *)(*(_QWORD *)a2 + 640));
    if (((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF
      && (*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    {
      v17 = 9.0;
    }
    *(double *)(*(_QWORD *)a2 + 1080) = v17;
    if (quasar::gLogLevel >= 4)
    {
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v19 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"End of sentence likelihood is: ", 31);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v19);
    }
  }
}

void sub_1AD92CD68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

void quasar::calculateNumTokensExcludingTriggerPhrase(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;

  v4 = *a3;
  v3 = a3[1];
  if (*a3 != v3)
  {
    v6 = *a2;
    if (!*(_DWORD *)(*a2 + 1092))
    {
      if (!*(_BYTE *)(a1 + 817) || (v7 = *(uint64_t **)(a1 + 824), v8 = *(uint64_t **)(a1 + 832), v7 == v8))
      {
LABEL_10:
        *(_DWORD *)(v6 + 1092) = -1227133513 * ((unint64_t)(v3 - v4) >> 5);
        if (quasar::gLogLevel < 4)
          return;
        v25 = 0u;
        v26 = 0u;
        v23 = 0u;
        v24 = 0u;
        v21 = 0u;
        v22 = 0u;
        v19 = 0u;
        v20 = 0u;
        v17 = 0u;
        v18 = 0u;
        v15 = 0u;
        v16 = 0u;
        v13 = 0u;
        v14 = 0u;
        v11 = 0u;
        v12 = 0u;
        v10 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v10);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Setting number of tokens excluding trigger phrase (request is not voice trigger or raise to speak): ", 100);
        std::ostream::operator<<();
      }
      else
      {
        while (1)
        {
          v27 = -1;
          if (quasar::isTokenSpanPrefixOf(v7, a3, 1, &v27))
          {
            *(_DWORD *)(*a2 + 1092) = 0;
            if (quasar::gLogLevel < 4)
              return;
            v25 = 0u;
            v26 = 0u;
            v23 = 0u;
            v24 = 0u;
            v21 = 0u;
            v22 = 0u;
            v19 = 0u;
            v20 = 0u;
            v17 = 0u;
            v18 = 0u;
            v15 = 0u;
            v16 = 0u;
            v13 = 0u;
            v14 = 0u;
            v11 = 0u;
            v12 = 0u;
            v10 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v10);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Setting number of tokens excluding trigger phrase (resultChoice is a prefix of a trigger phrase): ", 98);
            std::ostream::operator<<();
            goto LABEL_12;
          }
          v27 = -1;
          if (quasar::isTokenSpanPrefixOf(a3, v7, 1, &v27))
          {
            if ((v27 & 0x80000000) == 0)
              break;
          }
          v7 += 3;
          if (v7 == v8)
          {
            v4 = *a3;
            v3 = a3[1];
            v6 = *a2;
            goto LABEL_10;
          }
        }
        *(_DWORD *)(*a2 + 1092) = -1227133513 * ((unint64_t)(a3[1] - *a3) >> 5) - v27;
        if (quasar::gLogLevel < 4)
          return;
        v25 = 0u;
        v26 = 0u;
        v23 = 0u;
        v24 = 0u;
        v21 = 0u;
        v22 = 0u;
        v19 = 0u;
        v20 = 0u;
        v17 = 0u;
        v18 = 0u;
        v15 = 0u;
        v16 = 0u;
        v13 = 0u;
        v14 = 0u;
        v11 = 0u;
        v12 = 0u;
        v10 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v10);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Setting number of tokens excluding trigger phrase: ", 51);
        std::ostream::operator<<();
      }
LABEL_12:
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v10);
    }
  }
}

void sub_1AD92CFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::Decoder::decoderNeedsStabilizer(quasar::Decoder *this)
{
  return *((unsigned __int8 *)this + 57);
}

uint64_t quasar::Decoder::getStabilizerAveragingPeriodMs(quasar::Decoder *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t quasar::Decoder::getStabilizerMinimumWordSeenMs(quasar::Decoder *this)
{
  return *((unsigned int *)this + 11);
}

uint64_t quasar::Decoder::runChain(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t *v5;
  int v10;
  int v11;
  const void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t result;

  v5 = *a1;
  if (*a1 == a1[1])
    return 0;
  v10 = 0;
  v11 = -1;
  do
  {
    v12 = (const void *)*v5;
    v13 = (std::__shared_weak_count *)v5[1];
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    if (v12
    {
      v11 = v10;
      if (!v13)
        goto LABEL_19;
      v16 = (unint64_t *)&v13->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      v11 = v10;
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
        v11 = v10;
      }
    }
    else if (!v13)
    {
      goto LABEL_19;
    }
    v19 = (unint64_t *)&v13->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
LABEL_19:
    v5 += 2;
    ++v10;
  }
  while (v5 != a1[1]);
  v21 = *a1;
  if (*a1 == v5)
    return 0;
  v22 = 0;
  v23 = *a1;
  while (1)
  {
    v24 = *v23;
    v23 += 2;
    v25 = quasar::Decoder::run(v24, a3, a4, a5, a2, v21 == *a1, v23 == v5);
    v26 = *(_QWORD *)(a2 + 24);
    if (!v26)
      std::__throw_bad_function_call[abi:ne180100]();
    result = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v26 + 48))(v26) ? 1 : v25;
    if ((_DWORD)result)
      break;
    ++v22;
    v5 = a1[1];
    v21 = v23;
    if (v23 == v5)
      return 0;
  }
  if (v11 != -1 && v22 <= v11)
    *(_BYTE *)(a3 + 852) = 1;
  return result;
}

void quasar::Decoder::calculateStabilityMetrics(uint64_t *a1, uint64_t a2, uint64_t a3, _DWORD *a4, float *a5, char a6)
{
  __int128 *v10;
  __int128 *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  std::vector<std::string>::size_type v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *p_s1;
  size_t v30;
  char *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  std::string::size_type v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned __int8 *v43;
  __int128 *p_p;
  _BOOL4 v45;
  void *v46;
  int v47;
  uint64_t v48;
  std::string::size_type v49;
  uint64_t v50;
  std::string::size_type size;
  uint64_t v52;
  int v53;
  unsigned __int8 *v54;
  uint64_t v55;
  std::string *v56;
  int v57;
  int v58;
  int v59;
  uint64_t v61;
  uint64_t v62;
  size_t v63;
  uint64_t v64;
  int v65;
  unsigned __int8 *v66;
  void **v67;
  std::string *v68;
  unint64_t v70;
  int v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  std::string *v75;
  __int128 v76;
  std::string *v77;
  char v78;
  unint64_t v81;
  std::string v82;
  void *__s1;
  size_t v84;
  unsigned __int8 v85;
  std::vector<std::string> v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 *v91;
  __int128 *v92;
  uint64_t v93;
  std::string *v94;
  unint64_t v95;
  __int128 __p;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  char v113[17];

  *a5 = 0.0;
  *a4 = 0;
  if (a1[1] != *a1)
  {
    v93 = 0;
    v94 = 0;
    v95 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, " ");
    quasar::split(a2, (uint64_t *)&__p, 1, (uint64_t)&v91);
    if (SBYTE7(v97) < 0)
      operator delete((void *)__p);
    v11 = v91;
    v10 = v92;
    v12 = " ";
    std::string::basic_string[abi:ne180100]<0>(&__p, " ");
    quasar::split(a3, (uint64_t *)&__p, 1, (uint64_t)&v89);
    v78 = a6;
    if (SBYTE7(v97) < 0)
      operator delete((void *)__p);
    if (v90 == v89
      || (v81 = 0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)v11) >> 3),
          v81 != 0xAAAAAAAAAAAAAAABLL * ((v90 - v89) >> 3)))
    {
      if (quasar::gLogLevel < 4)
      {
LABEL_140:
        *(_QWORD *)&__p = &v89;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        *(_QWORD *)&__p = &v91;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        *(_QWORD *)&__p = &v93;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        return;
      }
      v111 = 0u;
      v112 = 0u;
      v109 = 0u;
      v110 = 0u;
      v107 = 0u;
      v108 = 0u;
      v105 = 0u;
      v106 = 0u;
      v103 = 0u;
      v104 = 0u;
      v101 = 0u;
      v102 = 0u;
      v99 = 0u;
      v100 = 0u;
      v97 = 0u;
      v98 = 0u;
      __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"empty or mismatched number of timestamps for final result", 57);
    }
    else
    {
      v13 = *a1;
      if (a1[1] != *a1)
      {
        v14 = 0;
        v15 = 0;
        while (1)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, v12);
          quasar::split(v13 + 32 * v14, (uint64_t *)&__p, 1, (uint64_t)&v87);
          if (SBYTE7(v97) < 0)
            operator delete((void *)__p);
          v17 = v87;
          v16 = v88;
          v18 = (v88 - v87) >> 3;
          v19 = 0xAAAAAAAAAAAAAAABLL * v18;
          if (v15 <= 0xAAAAAAAAAAAAAAABLL * v18)
            v20 = 0xAAAAAAAAAAAAAAABLL * v18;
          else
            v20 = v15;
          if (v81 >= v20)
            v15 = v20;
          else
            v15 = v81;
          memset(&v86, 0, sizeof(v86));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v86, v91, v92, 0xAAAAAAAAAAAAAAABLL * (((char *)v92 - (char *)v91) >> 3));
          std::vector<std::string>::resize(&v86, v15);
          *(_QWORD *)&__p = v12;
          *((_QWORD *)&__p + 1) = 1;
          quasar::join<std::vector<std::string>>((uint64_t *)&v86, (uint64_t *)&__p);
          if (quasar::gLogLevel >= 5)
          {
            v111 = 0u;
            v112 = 0u;
            v109 = 0u;
            v110 = 0u;
            v107 = 0u;
            v108 = 0u;
            v105 = 0u;
            v106 = 0u;
            v103 = 0u;
            v104 = 0u;
            v101 = 0u;
            v102 = 0u;
            v99 = 0u;
            v100 = 0u;
            v97 = 0u;
            v98 = 0u;
            __p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"partial result: ", 16);
            v22 = *a1 + 32 * v14;
            v23 = *(char *)(v22 + 23);
            if (v23 >= 0)
              v24 = *a1 + 32 * v14;
            else
              v24 = *(_QWORD *)v22;
            if (v23 >= 0)
              v25 = *(unsigned __int8 *)(v22 + 23);
            else
              v25 = *(_QWORD *)(v22 + 8);
            v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v24, v25);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)", partial result timestamp: ", 28);
            v27 = (_QWORD *)std::ostream::operator<<();
            v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)", partial reference: ", 21);
            if ((v85 & 0x80u) == 0)
              p_s1 = &__s1;
            else
              p_s1 = __s1;
            if ((v85 & 0x80u) == 0)
              v30 = v85;
            else
              v30 = v84;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)p_s1, v30);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__p);
          }
          v31 = v12;
          v32 = *a1;
          if ((int)v14 <= 1)
            v33 = 1;
          else
            v33 = v14;
          v34 = (v33 - 1);
          v35 = v32 + 32 * v34;
          if (*(char *)(v35 + 23) < 0)
            v36 = *(_QWORD *)(v35 + 8);
          else
            v36 = *(unsigned __int8 *)(v35 + 23);
          std::string::basic_string((std::string *)&__p, (const std::string *)(v32 + 32 * v14), 0, v36, (std::allocator<char> *)&v82);
          v37 = *a1;
          v38 = *a1 + 32 * v34;
          v39 = BYTE7(v97);
          if ((SBYTE7(v97) & 0x80u) == 0)
            v40 = BYTE7(v97);
          else
            v40 = *((_QWORD *)&__p + 1);
          v41 = *(unsigned __int8 *)(v38 + 23);
          v42 = (char)v41;
          if ((v41 & 0x80u) != 0)
            v41 = *(_QWORD *)(v38 + 8);
          if (v40 != v41)
            goto LABEL_53;
          v43 = v42 >= 0 ? (unsigned __int8 *)(*a1 + 32 * v34) : *(unsigned __int8 **)v38;
          if (SBYTE7(v97) < 0)
          {
            v46 = (void *)__p;
            if (memcmp((const void *)__p, v43, *((size_t *)&__p + 1)))
            {
              operator delete(v46);
LABEL_89:
              ++*a4;
              goto LABEL_90;
            }
          }
          else if (BYTE7(v97))
          {
            p_p = &__p;
            while (*(unsigned __int8 *)p_p == *v43)
            {
              p_p = (__int128 *)((char *)p_p + 1);
              ++v43;
              if (!--v39)
                goto LABEL_58;
            }
LABEL_53:
            v45 = 1;
            if ((BYTE7(v97) & 0x80) == 0)
              goto LABEL_54;
            goto LABEL_88;
          }
LABEL_58:
          v47 = ((unint64_t)(a1[1] - v37) >> 5) - 1;
          if (v47 >= (int)v14 + 1)
            v47 = v14 + 1;
          v48 = v37 + 32 * v14;
          if (*(char *)(v48 + 23) < 0)
            v49 = *(_QWORD *)(v48 + 8);
          else
            v49 = *(unsigned __int8 *)(v48 + 23);
          std::string::basic_string(&v82, (const std::string *)(v37 + 32 * v47), 0, v49, (std::allocator<char> *)v113);
          v50 = *a1 + 32 * v14;
          if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v82.__r_.__value_.__r.__words[2]);
          else
            size = v82.__r_.__value_.__l.__size_;
          v52 = *(unsigned __int8 *)(v50 + 23);
          v53 = (char)v52;
          if ((v52 & 0x80u) != 0)
            v52 = *(_QWORD *)(v50 + 8);
          if (size != v52)
            break;
          if (v53 >= 0)
            v54 = (unsigned __int8 *)(*a1 + 32 * v14);
          else
            v54 = *(unsigned __int8 **)v50;
          if ((*((_BYTE *)&v82.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            v45 = memcmp(v82.__r_.__value_.__l.__data_, v54, v82.__r_.__value_.__l.__size_) != 0;
LABEL_85:
            operator delete(v82.__r_.__value_.__l.__data_);
            goto LABEL_87;
          }
          if (*((_BYTE *)&v82.__r_.__value_.__s + 23))
          {
            v55 = HIBYTE(v82.__r_.__value_.__r.__words[2]) - 1;
            v56 = &v82;
            do
            {
              v58 = v56->__r_.__value_.__s.__data_[0];
              v56 = (std::string *)((char *)v56 + 1);
              v57 = v58;
              v59 = *v54++;
              v45 = v57 != v59;
            }
            while (v57 == v59 && v55-- != 0);
            if ((*((_BYTE *)&v82.__r_.__value_.__s + 23) & 0x80) != 0)
              goto LABEL_85;
          }
          else
          {
            v45 = 0;
          }
LABEL_87:
          if ((BYTE7(v97) & 0x80) == 0)
          {
LABEL_54:
            if (!v45)
              goto LABEL_90;
            goto LABEL_89;
          }
LABEL_88:
          operator delete((void *)__p);
          if (v45)
            goto LABEL_89;
LABEL_90:
          if (v16 == v17)
            goto LABEL_119;
          v61 = *a1 + 32 * v14;
          v62 = v85;
          if ((v85 & 0x80u) == 0)
            v63 = v85;
          else
            v63 = v84;
          v64 = *(unsigned __int8 *)(v61 + 23);
          v65 = (char)v64;
          if ((v64 & 0x80u) != 0)
            v64 = *(_QWORD *)(v61 + 8);
          if (v63 != v64)
            goto LABEL_119;
          if (v65 >= 0)
            v66 = (unsigned __int8 *)(*a1 + 32 * v14);
          else
            v66 = *(unsigned __int8 **)v61;
          if ((v85 & 0x80) != 0)
          {
            if (memcmp(__s1, v66, v84))
              goto LABEL_119;
          }
          else if (v85)
          {
            v67 = &__s1;
            while (*(unsigned __int8 *)v67 == *v66)
            {
              v67 = (void **)((char *)v67 + 1);
              ++v66;
              if (!--v62)
                goto LABEL_107;
            }
            goto LABEL_119;
          }
LABEL_107:
          v68 = (std::string *)std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(v93, (uint64_t)v94, (unsigned __int8 **)v61);
          if (v68 == v94 && v15 != 0)
          {
            if ((char)v85 < 0)
            {
              v70 = v84;
              if (!v84)
                goto LABEL_118;
            }
            else if (!v85)
            {
              v70 = 0;
LABEL_118:
              *a5 = *a5 + (float)v70;
              goto LABEL_119;
            }
            v71 = *(_DWORD *)(*a1 + 32 * v14 + 24);
            v72 = 0xAAAAAAAAAAAAAAABLL * ((v90 - v89) >> 3);
            if (v72 >= v19)
              v72 = v19;
            v73 = std::stoi((const std::string *)(v89 + 24 * v72 - 24), 0, 10);
            v70 = (v71 - v73) & ~((v71 - v73) >> 31);
            goto LABEL_118;
          }
LABEL_119:
          v74 = *a1 + 32 * v14;
          v75 = v94;
          if ((unint64_t)v94 >= v95)
          {
            v77 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v93, (__int128 *)v74);
          }
          else
          {
            if (*(char *)(v74 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v94, *(const std::string::value_type **)v74, *(_QWORD *)(v74 + 8));
            }
            else
            {
              v76 = *(_OWORD *)v74;
              v94->__r_.__value_.__r.__words[2] = *(_QWORD *)(v74 + 16);
              *(_OWORD *)&v75->__r_.__value_.__l.__data_ = v76;
            }
            v77 = v75 + 1;
          }
          v12 = v31;
          v94 = v77;
          if ((char)v85 < 0)
            operator delete(__s1);
          *(_QWORD *)&__p = &v86;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          *(_QWORD *)&__p = &v87;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          ++v14;
          v13 = *a1;
          if (v14 >= (a1[1] - *a1) >> 5)
            goto LABEL_128;
        }
        v45 = 1;
        if ((*((_BYTE *)&v82.__r_.__value_.__s + 23) & 0x80) == 0)
          goto LABEL_87;
        goto LABEL_85;
      }
LABEL_128:
      *a5 = *a5 / (float)v81;
      if ((v78 & 1) != 0)
      {
        if (quasar::gLogLevel < 4)
          goto LABEL_140;
        v111 = 0u;
        v112 = 0u;
        v109 = 0u;
        v110 = 0u;
        v107 = 0u;
        v108 = 0u;
        v105 = 0u;
        v106 = 0u;
        v103 = 0u;
        v104 = 0u;
        v101 = 0u;
        v102 = 0u;
        v99 = 0u;
        v100 = 0u;
        v97 = 0u;
        v98 = 0u;
        __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"partial_results_toggle_count=", 29);
        std::ostream::operator<<();
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
        if (quasar::gLogLevel < 4)
          goto LABEL_140;
        v111 = 0u;
        v112 = 0u;
        v109 = 0u;
        v110 = 0u;
        v107 = 0u;
        v108 = 0u;
        v105 = 0u;
        v106 = 0u;
        v103 = 0u;
        v104 = 0u;
        v101 = 0u;
        v102 = 0u;
        v99 = 0u;
        v100 = 0u;
        v97 = 0u;
        v98 = 0u;
        __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"partial_results_average_feedback_lag=", 37);
        std::ostream::operator<<();
      }
      else
      {
        if (quasar::gLogLevel < 4)
          goto LABEL_140;
        v111 = 0u;
        v112 = 0u;
        v109 = 0u;
        v110 = 0u;
        v107 = 0u;
        v108 = 0u;
        v105 = 0u;
        v106 = 0u;
        v103 = 0u;
        v104 = 0u;
        v101 = 0u;
        v102 = 0u;
        v99 = 0u;
        v100 = 0u;
        v97 = 0u;
        v98 = 0u;
        __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"faster_partial_results_toggle_count=", 36);
        std::ostream::operator<<();
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
        if (quasar::gLogLevel < 4)
          goto LABEL_140;
        v111 = 0u;
        v112 = 0u;
        v109 = 0u;
        v110 = 0u;
        v107 = 0u;
        v108 = 0u;
        v105 = 0u;
        v106 = 0u;
        v103 = 0u;
        v104 = 0u;
        v101 = 0u;
        v102 = 0u;
        v99 = 0u;
        v100 = 0u;
        v97 = 0u;
        v98 = 0u;
        __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"faster_partial_results_average_feedback_lag=", 44);
        std::ostream::operator<<();
      }
    }
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
    goto LABEL_140;
  }
  if (quasar::gLogLevel >= 4)
  {
    v111 = 0u;
    v112 = 0u;
    v109 = 0u;
    v110 = 0u;
    v107 = 0u;
    v108 = 0u;
    v105 = 0u;
    v106 = 0u;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    v98 = 0u;
    __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"empty partial results!", 22);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
  }
}

void sub_1AD92DAF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,char *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  a38 = &a29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a38);
  a38 = &a32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a38);
  a38 = &a35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a38);
  _Unwind_Resume(a1);
}

uint64_t quasar::Decoder::requiresCacheAppendedToFrontend(quasar::Decoder *this)
{
  return 0;
}

uint64_t quasar::Decoder::computesAudioAnalytics(quasar::Decoder *this)
{
  return 0;
}

uint64_t quasar::Decoder::requiresCacheFeatInputItf(quasar::Decoder *this)
{
  return 0;
}

uint64_t quasar::Decoder::affectsRecognitionResults(quasar::Decoder *this)
{
  return 1;
}

uint64_t quasar::Decoder::supportsEager(quasar::Decoder *this)
{
  return 0;
}

uint64_t quasar::Decoder::requiresSilencePosteriorForEager(quasar::Decoder *this)
{
  return 0;
}

uint64_t quasar::Decoder::decoderNeedsCachedRawAudio(quasar::Decoder *this)
{
  return 0;
}

uint64_t quasar::Decoder::combinesSystems(quasar::Decoder *this)
{
  return 0;
}

_QWORD *quasar::Decoder::getSpgName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

void quasar::Decoder::~Decoder(void **this)
{
  *this = &off_1E5D3B9B0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 53));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 51));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 48));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 46));
  if (*((char *)this + 359) < 0)
    operator delete(this[42]);
  quasar::SpeechModelInfo::~SpeechModelInfo((quasar::SpeechModelInfo *)(this + 8));
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

double quasar::Decoder::getDecoderTypeName@<D0>(std::string *this@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  double result;
  std::string::size_type v6;
  std::string v7;
  char v8;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)a2, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
  else
    *(std::string *)a2 = *this;
  v4 = std::string::rfind(this, 46, 0xFFFFFFFFFFFFFFFFLL);
  if (v4 != -1)
  {
    std::string::basic_string(&v7, this, v4 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v8);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(std::string *)a2 = v7;
    v6 = std::string::find((const std::string *)a2, 58, 0);
    if (v6 != -1)
    {
      std::string::basic_string(&v7, (const std::string *)a2, 0, v6, (std::allocator<char> *)&v8);
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      result = *(double *)&v7.__r_.__value_.__l.__data_;
      *(std::string *)a2 = v7;
    }
  }
  return result;
}

void sub_1AD92DE14(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void quasar::Decoder::createDecoder(std::string *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  int v5;
  std::string *v6;
  std::string::size_type size;
  void **v8;
  void *v11;
  BOOL v12;
  BOOL v13;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t *v35;
  void *v36;
  void *v37;
  int v38;
  unint64_t *v41;
  void *exception;
  std::string *v43;
  __int128 v44;
  int v45;
  std::string *v46;
  std::string::size_type v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  __int128 v51;
  std::string v52;
  std::string v53;
  std::string v54;
  __int128 v55;
  std::string::size_type v56;
  void *__p[4];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;

  if (quasar::gLogLevel >= 5)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v58 = 0u;
    memset(__p, 0, sizeof(__p));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Building Decoder ", 17);
    v5 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if (v5 >= 0)
      v6 = this;
    else
      v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    if (v5 >= 0)
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    else
      size = this->__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v6, size);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
  }
  quasar::Decoder::getDecoderTypeName(this, (uint64_t)__p);
  *a2 = 0;
  a2[1] = 0;
  if ((HIBYTE(__p[2]) & 0x80) == 0)
  {
    v8 = __p;
    switch(HIBYTE(__p[2]))
    {
      case 0x11:
        goto LABEL_119;
      case 0x12:
        goto LABEL_11;
      case 0x14:
        if (__p[0] == (void *)0x2D6563697474616CLL
          && __p[1] == (void *)0x61662D6D6C676962
          && LODWORD(__p[2]) == 1919251571)
        {
          goto LABEL_74;
        }
        goto LABEL_96;
      case 0x15:
LABEL_86:
        if (__p[0] == (void *)0x2D6563697474616CLL
          && __p[1] == (void *)0x65722D656C616373
          && *(void **)((char *)&__p[1] + 5) == (void *)0x65726F637365722DLL)
        {
          goto LABEL_110;
        }
        if (HIBYTE(__p[2]) == 17)
          goto LABEL_118;
        if (HIBYTE(__p[2]) == 18)
          goto LABEL_11;
        if (HIBYTE(__p[2]) != 20)
          goto LABEL_126;
LABEL_96:
        if (__p[0] == (void *)0x2D6563697474616CLL
          && __p[1] == (void *)0x696C612D64726F77
          && LODWORD(__p[2]) == 1919250023)
        {
          goto LABEL_133;
        }
        if (HIBYTE(__p[2]) == 17)
          goto LABEL_118;
        if (HIBYTE(__p[2]) != 18)
          goto LABEL_126;
LABEL_11:
        if (__p[0] == (void *)0x2D6563697474616CLL && __p[1] == (void *)0x6F637365722D6D6CLL && LOWORD(__p[2]) == 25970)
          goto LABEL_114;
        if (HIBYTE(__p[2]) != 17)
          goto LABEL_126;
LABEL_118:
        v8 = __p;
        break;
      case 0x18:
        if (__p[0] != (void *)0x2D6563697474616CLL
          || __p[1] != (void *)0x6D6C2D6D6C676962
          || __p[2] != (void *)0x7265747361662D65)
        {
          v8 = __p;
          switch(HIBYTE(__p[2]))
          {
            case 0x11:
              goto LABEL_119;
            case 0x12:
              goto LABEL_11;
            case 0x14:
              goto LABEL_96;
            case 0x15:
              goto LABEL_86;
            default:
              goto LABEL_126;
          }
        }
        goto LABEL_106;
      default:
        goto LABEL_126;
    }
    goto LABEL_119;
  }
  v11 = __p[1];
  if (__p[1] == (void *)20
    && (*(_QWORD *)__p[0] == 0x2D6563697474616CLL ? (v12 = *((_QWORD *)__p[0] + 1) == 0x61662D6D6C676962) : (v12 = 0),
        v12 ? (v13 = *((unsigned int *)__p[0] + 4) == 1919251571) : (v13 = 0),
        v13))
  {
LABEL_74:
    std::allocate_shared[abi:ne180100]<quasar::OnlineLatticeBiglmFasterDecoder,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder>,std::string const&,void>((__int128 *)this, &v55);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, &v55);
    v24 = (std::__shared_weak_count *)*((_QWORD *)&v55 + 1);
    if (!*((_QWORD *)&v55 + 1))
      goto LABEL_200;
    v25 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
  }
  else
  {
    if (__p[1] == (void *)24)
    {
      if (*(_QWORD *)__p[0] == 0x2D6563697474616CLL
        && *((_QWORD *)__p[0] + 1) == 0x6D6C2D6D6C676962
        && *((_QWORD *)__p[0] + 2) == 0x7265747361662D65)
      {
LABEL_106:
        std::allocate_shared[abi:ne180100]<quasar::OnlineLatticeBiglmLmeFasterDecoder,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder>,std::string const&,void>((__int128 *)this, &v55);
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, &v55);
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v55 + 1);
        if (!*((_QWORD *)&v55 + 1))
          goto LABEL_200;
        v33 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
        do
          v26 = __ldaxr(v33);
        while (__stlxr(v26 - 1, v33));
        goto LABEL_136;
      }
      v11 = __p[1];
    }
    if (v11 == (void *)21)
    {
      if (*(_QWORD *)__p[0] == 0x2D6563697474616CLL
        && *((_QWORD *)__p[0] + 1) == 0x65722D656C616373
        && *(_QWORD *)((char *)__p[0] + 13) == 0x65726F637365722DLL)
      {
LABEL_110:
        std::allocate_shared[abi:ne180100]<quasar::OnlineLatticeRescalingDecoder,std::allocator<quasar::OnlineLatticeRescalingDecoder>,std::string const&,void>((__int128 *)this, &v55);
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, &v55);
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v55 + 1);
        if (!*((_QWORD *)&v55 + 1))
          goto LABEL_200;
        v34 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
        do
          v26 = __ldaxr(v34);
        while (__stlxr(v26 - 1, v34));
        goto LABEL_136;
      }
      v11 = __p[1];
    }
    if (v11 == (void *)20)
    {
      if (*(_QWORD *)__p[0] == 0x2D6563697474616CLL
        && *((_QWORD *)__p[0] + 1) == 0x696C612D64726F77
        && *((_DWORD *)__p[0] + 4) == 1919250023)
      {
LABEL_133:
        std::allocate_shared[abi:ne180100]<quasar::OnlineLatticeWordAlignmentDecoder,std::allocator<quasar::OnlineLatticeWordAlignmentDecoder>,std::string const&,void>(&v55);
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, &v55);
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v55 + 1);
        if (!*((_QWORD *)&v55 + 1))
          goto LABEL_200;
        v41 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
        do
          v26 = __ldaxr(v41);
        while (__stlxr(v26 - 1, v41));
        goto LABEL_136;
      }
      v11 = __p[1];
    }
    if (v11 != (void *)18)
    {
LABEL_64:
      if (v11 != (void *)17)
      {
LABEL_126:
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "error-blamer"))
        {
          std::allocate_shared[abi:ne180100]<quasar::ErrorBlamingDecoder,std::allocator<quasar::ErrorBlamingDecoder>,std::string const&,void>((__int128 *)this, &v55);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, &v55);
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "lattice-confidence"))
        {
          std::allocate_shared[abi:ne180100]<quasar::OnlineLatticeConfidenceDecoder,std::allocator<quasar::OnlineLatticeConfidenceDecoder>,std::string const&,void>((__int128 *)this, &v55);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, &v55);
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "lattice-faster"))
        {
          std::allocate_shared[abi:ne180100]<quasar::LatticeFasterDecoder,std::allocator<quasar::LatticeFasterDecoder>,std::string const&,void>((__int128 *)this, &v55);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, &v55);
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "keyword-spotting-decoder"))
        {
          std::allocate_shared[abi:ne180100]<quasar::OnlineKeywordSpottingDecoder,std::allocator<quasar::OnlineKeywordSpottingDecoder>,std::string const&,void>(&v55);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, &v55);
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "seeva-decoder"))
        {
          std::allocate_shared[abi:ne180100]<quasar::OnlineSeevaDecoder,std::allocator<quasar::OnlineSeevaDecoder>,std::string const&,void>(&v55);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, &v55);
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "seeva-step-decoder"))
        {
          std::allocate_shared[abi:ne180100]<quasar::OnlineSeevaStepDecoder,std::allocator<quasar::OnlineSeevaStepDecoder>,std::string const&,void>(&v55);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, &v55);
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "seeva-step-biglm-decoder"))
        {
          std::allocate_shared[abi:ne180100]<quasar::OnlineSeevaStepBigLmDecoder,std::allocator<quasar::OnlineSeevaStepBigLmDecoder>,std::string const&,void>(&v55);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, &v55);
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "seeva-greedy-decoder"))
        {
          std::allocate_shared[abi:ne180100]<quasar::SeevaGreedyDecoder,std::allocator<quasar::SeevaGreedyDecoder>,std::string const&,void>((__int128 *)this, &v55);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, &v55);
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "seeva-batch-decoder"))
        {
          std::allocate_shared[abi:ne180100]<quasar::SeevaBatchDecoder,std::allocator<quasar::SeevaBatchDecoder>,std::string const&,void>(&v55);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, &v55);
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "las-beam-search-decoder"))
        {
          std::allocate_shared[abi:ne180100]<quasar::OnlineLASBeamSearchDecoder,std::allocator<quasar::OnlineLASBeamSearchDecoder>,std::string const&,void>(&v55);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, &v55);
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "las-speculative-beam-search-decoder"))
        {
          std::allocate_shared[abi:ne180100]<quasar::OnlineLASSpeculativeBeamSearchDecoder,std::allocator<quasar::OnlineLASSpeculativeBeamSearchDecoder>,std::string const&,void>(&v55);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, &v55);
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "las-lm-rescoring-beam-search-decoder"))
        {
          std::allocate_shared[abi:ne180100]<quasar::OnlineLASLmRescoringBeamSearchDecoder,std::allocator<quasar::OnlineLASLmRescoringBeamSearchDecoder>,std::string const&,void>(&v55);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, &v55);
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "las-lm-rescoring-speculative-beam-search-decoder"))
        {
          std::allocate_shared[abi:ne180100]<quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder,std::allocator<quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder>,std::string const&,void>(&v55);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, &v55);
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "transducer-beam-search-decoder"))
        {
          std::allocate_shared[abi:ne180100]<quasar::OnlineTransducerBeamSearchDecoder,std::allocator<quasar::OnlineTransducerBeamSearchDecoder>,std::string const&,void>(&v55);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, &v55);
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "transducer-graph-search-decoder"))
        {
          std::allocate_shared[abi:ne180100]<quasar::OnlineTransducerGraphSearchDecoder,std::allocator<quasar::OnlineTransducerGraphSearchDecoder>,std::string const&,void>(&v55);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, &v55);
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "system-combination-decoder"))
        {
          std::allocate_shared[abi:ne180100]<quasar::SystemCombinationDecoder,std::allocator<quasar::SystemCombinationDecoder>,std::string const&,void>(&v55);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, &v55);
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "confusion-network-combiner"))
        {
          std::allocate_shared[abi:ne180100]<quasar::ConfusionNetworkCombinerDecoder,std::allocator<quasar::ConfusionNetworkCombinerDecoder>,std::string const&,void>((__int128 *)this, &v55);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, &v55);
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "phonetic-match"))
        {
          std::allocate_shared[abi:ne180100]<quasar::PhoneticMatchDecoder,std::allocator<quasar::PhoneticMatchDecoder>,std::string const&,void>((__int128 *)this, &v55);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, &v55);
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "fingerprint-detector"))
        {
          std::allocate_shared[abi:ne180100]<quasar::FingerprintDetector,std::allocator<quasar::FingerprintDetector>,std::string const&,void>(&v55);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, &v55);
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "audio-analytics-decoder"))
        {
          std::allocate_shared[abi:ne180100]<quasar::OnlineAudioAnalyticsDecoder,std::allocator<quasar::OnlineAudioAnalyticsDecoder>,std::string const&,void>((__int128 *)this, &v55);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, &v55);
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "watermark-detector"))
        {
          std::allocate_shared[abi:ne180100]<quasar::WatermarkDetector,std::allocator<quasar::WatermarkDetector>,std::string const&,void>(&v55);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, &v55);
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "audio-analytics-only"))
        {
          std::allocate_shared[abi:ne180100]<quasar::AudioAnalyticsDecoder,std::allocator<quasar::AudioAnalyticsDecoder>,std::string const&,void>((__int128 *)this, &v55);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, &v55);
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "lattice-rnn-mitigator"))
        {
          std::allocate_shared[abi:ne180100]<quasar::LatticeRnnMitigator,std::allocator<quasar::LatticeRnnMitigator>,std::string const&,void>(&v55);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, &v55);
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "lattice-confidence2"))
        {
          std::allocate_shared[abi:ne180100]<quasar::HwcnConfidence,std::allocator<quasar::HwcnConfidence>,std::string const&,void>(&v55);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, &v55);
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "e2e-asr-confidence"))
        {
          std::allocate_shared[abi:ne180100]<quasar::E2EAsrConfidence,std::allocator<quasar::E2EAsrConfidence>,std::string const&,void>((__int128 *)this, &v55);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, &v55);
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "watermark-detector2"))
        {
          std::allocate_shared[abi:ne180100]<quasar::WatermarkDetector2,std::allocator<quasar::WatermarkDetector2>,std::string const&,void>(&v55);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, &v55);
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "lattice-biglm-lme-ftm-faster"))
        {
          std::allocate_shared[abi:ne180100]<quasar::LatticeLmeFtmDecoder,std::allocator<quasar::LatticeLmeFtmDecoder>,std::string const&,void>((__int128 *)this, &v55);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, &v55);
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "AED-rescorer"))
        {
          std::allocate_shared[abi:ne180100]<quasar::OnlineAEDRescoringDecoder,std::allocator<quasar::OnlineAEDRescoringDecoder>,std::string const&,void>(&v55);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, &v55);
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "force-aligner"))
        {
          std::allocate_shared[abi:ne180100]<quasar::ForceAlignDecoder,std::allocator<quasar::ForceAlignDecoder>,std::string const&,void>((__int128 *)this, &v55);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, &v55);
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "realign-am-fusion-decoder"))
        {
          std::allocate_shared[abi:ne180100]<quasar::RealignAmFusionDecoder,std::allocator<quasar::RealignAmFusionDecoder>,std::string const&,void>((__int128 *)this, &v55);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, &v55);
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "ctc-prefix-beam-search-decoder"))
        {
          std::allocate_shared[abi:ne180100]<quasar::OnlinePrefixBeamSearchDecoder,std::allocator<quasar::OnlinePrefixBeamSearchDecoder>,std::string const&,void>(&v55);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, &v55);
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "AED-beam-search-decoder"))
        {
          std::allocate_shared[abi:ne180100]<quasar::AEDBeamSearchDecoder,std::allocator<quasar::AEDBeamSearchDecoder>,std::string const&,void>(&v55);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, &v55);
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "rescoring-deliberation"))
        {
          std::allocate_shared[abi:ne180100]<quasar::RescoringDeliberationDecoder,std::allocator<quasar::RescoringDeliberationDecoder>,std::string const&,void>((__int128 *)this, &v55);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, &v55);
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
        }
        else
        {
          if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "embedding-retranslation-decoder"))
          {
            exception = __cxa_allocate_exception(0x20uLL);
            std::operator+<char>();
            v43 = std::string::append(&v52, "\" in \"");
            v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
            v53.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v44;
            v43->__r_.__value_.__l.__size_ = 0;
            v43->__r_.__value_.__r.__words[2] = 0;
            v43->__r_.__value_.__r.__words[0] = 0;
            v45 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
            if (v45 >= 0)
              v46 = this;
            else
              v46 = (std::string *)this->__r_.__value_.__r.__words[0];
            if (v45 >= 0)
              v47 = HIBYTE(this->__r_.__value_.__r.__words[2]);
            else
              v47 = this->__r_.__value_.__l.__size_;
            v48 = std::string::append(&v53, (const std::string::value_type *)v46, v47);
            v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
            v54.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v49;
            v48->__r_.__value_.__l.__size_ = 0;
            v48->__r_.__value_.__r.__words[2] = 0;
            v48->__r_.__value_.__r.__words[0] = 0;
            v50 = std::string::append(&v54, "\"");
            v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
            v56 = v50->__r_.__value_.__r.__words[2];
            v55 = v51;
            v50->__r_.__value_.__l.__size_ = 0;
            v50->__r_.__value_.__r.__words[2] = 0;
            v50->__r_.__value_.__r.__words[0] = 0;
            quasar::PTree::Error::Error(exception, &v55);
          }
          std::allocate_shared[abi:ne180100]<quasar::OnlineEmbeddingRetranslationDecoder,std::allocator<quasar::OnlineEmbeddingRetranslationDecoder>,std::string const&,void>((__int128 *)this, &v55);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, &v55);
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
        }
        goto LABEL_200;
      }
      v8 = (void **)__p[0];
LABEL_119:
      v36 = *v8;
      v37 = v8[1];
      v38 = *((unsigned __int8 *)v8 + 16);
      if (v36 == (void *)0x2D6563697474616CLL && v37 == (void *)0x656E67696C616572 && v38 == 114)
      {
        std::allocate_shared[abi:ne180100]<quasar::OnlineLatticeRealignmentDecoder,std::allocator<quasar::OnlineLatticeRealignmentDecoder>,std::string const&,void>((__int128 *)this, &v55);
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, &v55);
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
        goto LABEL_200;
      }
      goto LABEL_126;
    }
    if (*(_QWORD *)__p[0] != 0x2D6563697474616CLL
      || *((_QWORD *)__p[0] + 1) != 0x6F637365722D6D6CLL
      || *((_WORD *)__p[0] + 8) != 25970)
    {
      v11 = __p[1];
      goto LABEL_64;
    }
LABEL_114:
    std::allocate_shared[abi:ne180100]<quasar::OnlineLmRescoringDecoder,std::allocator<quasar::OnlineLmRescoringDecoder>,std::string const&,void>((__int128 *)this, &v55);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, &v55);
    v24 = (std::__shared_weak_count *)*((_QWORD *)&v55 + 1);
    if (!*((_QWORD *)&v55 + 1))
      goto LABEL_200;
    v35 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
    do
      v26 = __ldaxr(v35);
    while (__stlxr(v26 - 1, v35));
  }
LABEL_136:
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
LABEL_200:
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
}

void sub_1AD92EC74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;
  void *v43;
  int v44;

  if (a35 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v44 & 1) == 0)
    {
LABEL_12:
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v42);
      if (a42 < 0)
        operator delete(a37);
      _Unwind_Resume(a1);
    }
  }
  else if (!v44)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v43);
  goto LABEL_12;
}

BOOL quasar::Decoder::exceedsDoublePartialThreshold(quasar::Decoder *this, int a2)
{
  return *((_DWORD *)this + 111) <= a2;
}

BOOL quasar::Decoder::isEnabledDoublePartial(quasar::Decoder *this)
{
  return *((_DWORD *)this + 111) > 0;
}

void std::vector<quasar::TokenInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  quasar::Token *v2;
  quasar::Token *v4;
  void *v5;

  v1 = *a1;
  v2 = (quasar::Token *)**a1;
  if (v2)
  {
    v4 = (quasar::Token *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 = (quasar::Token *)((char *)v4 - 288);
        std::allocator<quasar::TokenInfo>::destroy[abi:ne180100]((_DWORD)v1 + 16, v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::TokenInfo>::destroy[abi:ne180100](int a1, quasar::Token *this)
{
  void *v3;
  void *v4;

  v3 = (void *)*((_QWORD *)this + 33);
  if (v3)
  {
    *((_QWORD *)this + 34) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 30);
  if (v4)
  {
    *((_QWORD *)this + 31) = v4;
    operator delete(v4);
  }
  quasar::Token::~Token((void **)this);
}

_QWORD *std::vector<std::weak_ptr<quasar::Decoder>>::__init_with_size[abi:ne180100]<std::weak_ptr<quasar::Decoder>*,std::weak_ptr<quasar::Decoder>*>(_QWORD *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::weak_ptr<quasar::Decoder>>,std::weak_ptr<quasar::Decoder>*,std::weak_ptr<quasar::Decoder>*,std::weak_ptr<quasar::Decoder>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1AD92EF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::weak_ptr<quasar::Decoder>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::weak_ptr<quasar::Decoder>>,std::weak_ptr<quasar::Decoder>*,std::weak_ptr<quasar::Decoder>*,std::weak_ptr<quasar::Decoder>*>(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[3];
  char v10;
  _QWORD *v11;
  _QWORD *v12;

  v4 = a4;
  v12 = a4;
  v11 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  if (a2 != a3)
  {
    do
    {
      *v4 = *a2;
      v5 = a2[1];
      v4[1] = v5;
      if (v5)
      {
        v6 = (unint64_t *)(v5 + 16);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      a2 += 2;
      v4 += 2;
    }
    while (a2 != a3);
    v12 = v4;
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<quasar::Decoder>>,std::weak_ptr<quasar::Decoder>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<quasar::Decoder>>,std::weak_ptr<quasar::Decoder>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<quasar::Decoder>>,std::weak_ptr<quasar::Decoder>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<quasar::Decoder>>,std::weak_ptr<quasar::Decoder>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v3;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    v3 = *(std::__shared_weak_count **)(v1 - 8);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    v1 -= 16;
  }
}

BOOL quasar::arcConsumesAFrame<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(_DWORD *a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;

  if (!*(_QWORD *)(a2 + 32))
    return 0;
  if (*a1)
    return 1;
  v3 = a1[1];
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(a2 + 216);
  if (!v4)
    return 1;
  v7 = *(_QWORD *)(v4 + 40);
  v5 = v4 + 40;
  v6 = v7;
  if (!v7)
    return 1;
  v8 = v5;
  do
  {
    v9 = *(_DWORD *)(v6 + 28);
    v10 = v9 < v3;
    if (v9 >= v3)
      v11 = (uint64_t *)v6;
    else
      v11 = (uint64_t *)(v6 + 8);
    if (!v10)
      v8 = v6;
    v6 = *v11;
  }
  while (*v11);
  return v8 == v5 || v3 < *(_DWORD *)(v8 + 28);
}

uint64_t std::vector<fst::symbol_outT<int>>::__push_back_slow_path<fst::symbol_outT<int> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, v9);
  else
    v10 = 0;
  v11 = (char *)&v10[6 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = (char *)&v10[6 * v9];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_QWORD *)v11 + 3) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)v11 + 2, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
  v10[6 * v4 + 5] = *(_QWORD *)(a2 + 40);
  v15 += 48;
  std::vector<fst::symbol_outT<int>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1AD92F1D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::symbol_outT<int>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::symbol_outT<int>>,std::reverse_iterator<fst::symbol_outT<int>*>,std::reverse_iterator<fst::symbol_outT<int>*>,std::reverse_iterator<fst::symbol_outT<int>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::symbol_outT<int>>,std::reverse_iterator<fst::symbol_outT<int>*>,std::reverse_iterator<fst::symbol_outT<int>*>,std::reverse_iterator<fst::symbol_outT<int>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  char v11;
  __int128 v12;
  __int128 v13;

  v7 = a7;
  *(_QWORD *)&v13 = a6;
  *((_QWORD *)&v13 + 1) = a7;
  v12 = v13;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  if (a3 == a5)
  {
    v8 = a6;
  }
  else
  {
    do
    {
      *(_OWORD *)(v7 - 48) = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_OWORD *)(v7 - 32) = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 - 16);
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      v7 = *((_QWORD *)&v13 + 1) - 48;
      *((_QWORD *)&v13 + 1) -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    v8 = v13;
  }
  v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::symbol_outT<int>>,std::reverse_iterator<fst::symbol_outT<int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v8;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::symbol_outT<int>>,std::reverse_iterator<fst::symbol_outT<int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::vector<fst::symbol_outT<int>>::__assign_with_size[abi:ne180100]<fst::symbol_outT<int>*,fst::symbol_outT<int>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  char v18;
  char v19;

  v8 = (uint64_t)(a1 + 2);
  v9 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) < a4)
  {
    std::vector<fst::symbol_outT<int>>::__vdeallocate(a1);
    if (a4 > 0x555555555555555)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v10;
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__vallocate[abi:ne180100](a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::symbol_outT<int>>,fst::symbol_outT<int>*,fst::symbol_outT<int>*,fst::symbol_outT<int>*>(v8, (uint64_t)a2, (uint64_t)a3, a1[1]);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - v9) >> 4) < a4)
  {
    v13 = &a2[2 * ((a1[1] - v9) >> 4)];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<fst::symbol_outT<int> *,fst::symbol_outT<int> *,fst::symbol_outT<int> *>((uint64_t)&v18, a2, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::symbol_outT<int>>,fst::symbol_outT<int>*,fst::symbol_outT<int>*,fst::symbol_outT<int>*>(v8, (uint64_t)v13, (uint64_t)a3, a1[1]);
LABEL_11:
    a1[1] = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<fst::symbol_outT<int> *,fst::symbol_outT<int> *,fst::symbol_outT<int> *>((uint64_t)&v19, a2, a3, v9);
  v15 = v14;
  v16 = a1[1];
  if (v16 != v14)
  {
    do
    {
      v17 = *(void **)(v16 - 32);
      if (v17)
      {
        *(_QWORD *)(v16 - 24) = v17;
        operator delete(v17);
      }
      v16 -= 48;
    }
    while (v16 != v15);
  }
  a1[1] = v15;
}

void sub_1AD92F4C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1AD92F4C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<fst::symbol_outT<int>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::symbol_outT<int>>,fst::symbol_outT<int>*,fst::symbol_outT<int>*,fst::symbol_outT<int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_OWORD *)v4 = *(_OWORD *)v6;
      *(_QWORD *)(v4 + 24) = 0;
      *(_QWORD *)(v4 + 32) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v4 + 16), *(const void **)(v6 + 16), *(_QWORD *)(v6 + 24), (uint64_t)(*(_QWORD *)(v6 + 24) - *(_QWORD *)(v6 + 16)) >> 2);
      *(_QWORD *)(v4 + 40) = *(_QWORD *)(v6 + 40);
      v4 = v11 + 48;
      v11 += 48;
      v6 += 48;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::symbol_outT<int>>,fst::symbol_outT<int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1AD92F5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::symbol_outT<int>>,fst::symbol_outT<int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::symbol_outT<int>>,fst::symbol_outT<int>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<fst::symbol_outT<int> *,fst::symbol_outT<int> *,fst::symbol_outT<int> *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;

  if (a2 == a3)
    return a2;
  v5 = a3;
  v6 = a2 + 3;
  do
  {
    v7 = v6 - 3;
    *(_OWORD *)a4 = *(_OWORD *)(v6 - 3);
    if ((uint64_t *)a4 != v6 - 3)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a4 + 16), (char *)*(v6 - 1), *v6, (*v6 - *(v6 - 1)) >> 2);
    *(_QWORD *)(a4 + 40) = v6[2];
    a4 += 48;
    v6 += 6;
  }
  while (v7 + 6 != v5);
  return v5;
}

void std::vector<std::vector<fst::symbol_outT<int>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<std::vector<fst::symbol_outT<int>>>::__push_back_slow_path<std::vector<fst::symbol_outT<int>> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<fst::symbol_outT<int>>::__init_with_size[abi:ne180100]<fst::symbol_outT<int>*,fst::symbol_outT<int>*>(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4));
  v15 += 24;
  std::vector<std::vector<fst::symbol_outT<int>>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<fst::symbol_outT<int>>>::~__split_buffer(v14);
  return v12;
}

void sub_1AD92F800(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<fst::symbol_outT<int>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<fst::symbol_outT<int>>::__init_with_size[abi:ne180100]<fst::symbol_outT<int>*,fst::symbol_outT<int>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::symbol_outT<int>>,fst::symbol_outT<int>*,fst::symbol_outT<int>*,fst::symbol_outT<int>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1AD92F878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<fst::symbol_outT<int>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<fst::symbol_outT<int>>>,std::reverse_iterator<std::vector<fst::symbol_outT<int>>*>,std::reverse_iterator<std::vector<fst::symbol_outT<int>>*>,std::reverse_iterator<std::vector<fst::symbol_outT<int>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<fst::symbol_outT<int>>>,std::reverse_iterator<std::vector<fst::symbol_outT<int>>*>,std::reverse_iterator<std::vector<fst::symbol_outT<int>>*>,std::reverse_iterator<std::vector<fst::symbol_outT<int>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<fst::symbol_outT<int>>>,std::reverse_iterator<std::vector<fst::symbol_outT<int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<fst::symbol_outT<int>>>,std::reverse_iterator<std::vector<fst::symbol_outT<int>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<fst::symbol_outT<int>>>,std::reverse_iterator<std::vector<fst::symbol_outT<int>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<fst::symbol_outT<int>>>,std::reverse_iterator<std::vector<fst::symbol_outT<int>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<fst::symbol_outT<int>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<fst::symbol_outT<int>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<fst::symbol_outT<int>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t std::vector<quasar::TokenInfo>::__emplace_back_slow_path<quasar::TokenInfo>(uint64_t *a1, __int128 *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 5);
  v4 = v3 + 1;
  if (v3 + 1 > 0xE38E38E38E38E3)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 5) > v4)
    v4 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 5);
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 5) >= 0x71C71C71C71C71)
    v6 = 0xE38E38E38E38E3;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TokenInfo>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[288 * v3];
  v13 = &v7[288 * v6];
  std::allocator<quasar::TokenInfo>::construct[abi:ne180100]<quasar::TokenInfo,quasar::TokenInfo>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 288;
  std::vector<quasar::TokenInfo>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<quasar::TokenInfo>::~__split_buffer(&v10);
  return v8;
}

void sub_1AD92FBB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::TokenInfo>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

__n128 std::allocator<quasar::TokenInfo>::construct[abi:ne180100]<quasar::TokenInfo,quasar::TokenInfo>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __n128 result;
  uint64_t v13;

  v3 = *a3;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  v4 = *(__int128 *)((char *)a3 + 24);
  *(_QWORD *)(a2 + 38) = *(_QWORD *)((char *)a3 + 38);
  *(_OWORD *)(a2 + 24) = v4;
  v5 = a3[3];
  *(_QWORD *)(a2 + 64) = *((_QWORD *)a3 + 8);
  *(_OWORD *)(a2 + 48) = v5;
  *((_QWORD *)a3 + 7) = 0;
  *((_QWORD *)a3 + 8) = 0;
  *((_QWORD *)a3 + 6) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 72) = *(__int128 *)((char *)a3 + 72);
  *(_QWORD *)(a2 + 88) = *((_QWORD *)a3 + 11);
  *((_QWORD *)a3 + 9) = 0;
  *((_QWORD *)a3 + 10) = 0;
  *((_QWORD *)a3 + 11) = 0;
  v6 = a3[6];
  *(_QWORD *)(a2 + 112) = *((_QWORD *)a3 + 14);
  *(_OWORD *)(a2 + 96) = v6;
  *((_QWORD *)a3 + 13) = 0;
  *((_QWORD *)a3 + 14) = 0;
  *((_QWORD *)a3 + 12) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_OWORD *)(a2 + 120) = *(__int128 *)((char *)a3 + 120);
  *(_QWORD *)(a2 + 136) = *((_QWORD *)a3 + 17);
  *((_QWORD *)a3 + 15) = 0;
  *((_QWORD *)a3 + 16) = 0;
  *((_QWORD *)a3 + 17) = 0;
  v7 = a3[9];
  *(_QWORD *)(a2 + 160) = *((_QWORD *)a3 + 20);
  *(_OWORD *)(a2 + 144) = v7;
  *((_QWORD *)a3 + 19) = 0;
  *((_QWORD *)a3 + 20) = 0;
  *((_QWORD *)a3 + 18) = 0;
  v8 = *((_DWORD *)a3 + 42);
  *(_WORD *)(a2 + 172) = *((_WORD *)a3 + 86);
  *(_DWORD *)(a2 + 168) = v8;
  v9 = a3[11];
  *(_QWORD *)(a2 + 192) = *((_QWORD *)a3 + 24);
  *(_OWORD *)(a2 + 176) = v9;
  *((_QWORD *)a3 + 23) = 0;
  *((_QWORD *)a3 + 24) = 0;
  *((_QWORD *)a3 + 22) = 0;
  v10 = *(__int128 *)((char *)a3 + 200);
  *(_DWORD *)(a2 + 216) = *((_DWORD *)a3 + 54);
  *(_OWORD *)(a2 + 200) = v10;
  v11 = *((_QWORD *)a3 + 28);
  *(_DWORD *)(a2 + 232) = *((_DWORD *)a3 + 58);
  *(_QWORD *)(a2 + 224) = v11;
  *(_QWORD *)(a2 + 248) = 0;
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a2 + 240) = 0;
  result = (__n128)a3[15];
  *(__n128 *)(a2 + 240) = result;
  *(_QWORD *)(a2 + 256) = *((_QWORD *)a3 + 32);
  *((_QWORD *)a3 + 30) = 0;
  *((_QWORD *)a3 + 31) = 0;
  *((_QWORD *)a3 + 32) = 0;
  *(_QWORD *)(a2 + 264) = 0;
  *(_QWORD *)(a2 + 272) = 0;
  *(_QWORD *)(a2 + 280) = 0;
  v13 = *((_QWORD *)a3 + 34);
  *(_QWORD *)(a2 + 264) = *((_QWORD *)a3 + 33);
  *(_QWORD *)(a2 + 272) = v13;
  *(_QWORD *)(a2 + 280) = *((_QWORD *)a3 + 35);
  *((_QWORD *)a3 + 33) = 0;
  *((_QWORD *)a3 + 34) = 0;
  *((_QWORD *)a3 + 35) = 0;
  return result;
}

uint64_t std::vector<quasar::TokenInfo>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::TokenInfo>,std::reverse_iterator<quasar::TokenInfo*>,std::reverse_iterator<quasar::TokenInfo*>,std::reverse_iterator<quasar::TokenInfo*>>((uint64_t)(a1 + 2), a1[1], (__int128 *)a1[1], *a1, (__int128 *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TokenInfo>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xE38E38E38E38E4)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(288 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::TokenInfo>,std::reverse_iterator<quasar::TokenInfo*>,std::reverse_iterator<quasar::TokenInfo*>,std::reverse_iterator<quasar::TokenInfo*>>(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 *v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 18;
      std::allocator<quasar::TokenInfo>::construct[abi:ne180100]<quasar::TokenInfo,quasar::TokenInfo>(a1, v7 - 288, v9);
      v7 = *((_QWORD *)&v16 + 1) - 288;
      *((_QWORD *)&v16 + 1) -= 288;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TokenInfo>,std::reverse_iterator<quasar::TokenInfo*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TokenInfo>,std::reverse_iterator<quasar::TokenInfo*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TokenInfo>,std::reverse_iterator<quasar::TokenInfo*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TokenInfo>,std::reverse_iterator<quasar::TokenInfo*>>::operator()[abi:ne180100](uint64_t *a1)
{
  quasar::Token *v1;
  quasar::Token *v2;
  uint64_t v3;

  v1 = *(quasar::Token **)(a1[2] + 8);
  v2 = *(quasar::Token **)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<quasar::TokenInfo>::destroy[abi:ne180100](v3, v1);
      v1 = (quasar::Token *)((char *)v1 + 288);
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::TokenInfo>::~__split_buffer(void **a1)
{
  std::__split_buffer<quasar::TokenInfo>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<quasar::TokenInfo>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 288;
    std::allocator<quasar::TokenInfo>::destroy[abi:ne180100](v4, (quasar::Token *)(i - 288));
  }
}

uint64_t std::vector<quasar::ChoiceInfo>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::ChoiceInfo>,std::reverse_iterator<quasar::ChoiceInfo*>,std::reverse_iterator<quasar::ChoiceInfo*>,std::reverse_iterator<quasar::ChoiceInfo*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::ChoiceInfo>,std::reverse_iterator<quasar::ChoiceInfo*>,std::reverse_iterator<quasar::ChoiceInfo*>,std::reverse_iterator<quasar::ChoiceInfo*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v8 = *((_OWORD *)a3 - 2);
      a3 -= 4;
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      *(_QWORD *)(v7 - 8) = a3[3];
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::ChoiceInfo>,std::reverse_iterator<quasar::ChoiceInfo*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::ChoiceInfo>,std::reverse_iterator<quasar::ChoiceInfo*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::ChoiceInfo>,std::reverse_iterator<quasar::ChoiceInfo*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::ChoiceInfo>,std::reverse_iterator<quasar::ChoiceInfo*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<quasar::TokenInfo>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 4;
  }
}

void **std::__split_buffer<quasar::ChoiceInfo>::~__split_buffer(void **a1)
{
  std::__split_buffer<quasar::ChoiceInfo>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<quasar::ChoiceInfo>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 32);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<quasar::TokenInfo>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

_OWORD *std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v6 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 9) = 0;
    *((_QWORD *)v7 + 7) = 0;
    v13 = 1;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

_OWORD *std::__tree<std::__value_type<std::string,std::vector<kaldi::TimestampsAndConfidence>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<kaldi::TimestampsAndConfidence>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<kaldi::TimestampsAndConfidence>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v6 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 9) = 0;
    *((_QWORD *)v7 + 7) = 0;
    v13 = 1;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1AD930430(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<quasar::NBestToken<1ul>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<quasar::NBestToken<1ul>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<quasar::NBestToken<1ul>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 11;
        std::allocator<quasar::NBestToken<1ul>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::NBestToken<1ul>>::destroy[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;

  v3 = (void *)a2[8];
  if (v3)
  {
    a2[9] = v3;
    operator delete(v3);
  }
  v4 = (void *)a2[2];
  if (v4)
  {
    a2[3] = v4;
    operator delete(v4);
  }
}

uint64_t std::vector<quasar::Token>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 5) < a2)
  {
    if (a2 >= 0x124924924924925)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 224 * v6;
    std::vector<quasar::Token>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1AD930628(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::ProcessHypotheses<1ul,0l,-1l>(quasar::DecoderPassData const&,std::shared_ptr<quasar::DecoderChainOutput> const&,std::vector<quasar::CalculateJoinedNBest<1ul>::HypothesisVector,std::allocator<quasar::CalculateJoinedNBest<1ul>::HypothesisVector>> const&,std::vector<std::vector<quasar::Token>> *,std::vector<double> *,kaldi::LatticeScoreCache *)::{lambda(quasar::NBestToken<1ul> const&)#1}::operator()(_BYTE *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  const float *v6;
  int32x2_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  void **v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  _BOOL4 isSilencePhone;
  BOOL v46;
  uint64_t v47;
  int v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  BOOL v72;
  uint64_t *v73;
  int v74;
  _DWORD *v75;
  int *v76;
  float v77;
  int v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _OWORD v90[17];
  unsigned int v91;
  void *v92[2];
  uint64_t v93;
  _BYTE v94[22];
  void *v95[2];
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  void *__p[2];
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  int v105;
  __int16 v106;
  __int128 v107;
  uint64_t v108;
  __int128 v109;
  int v110;

  quasar::Token::Token((quasar::Token *)v92);
  v91 = -1;
  *(_DWORD *)v94 = *a2;
  quasar::SymbolTableList::lookup(*(uint64_t **)(**((_QWORD **)a1 + 1) + 472), *(int *)v94, (unsigned __int8 *)v92, &v91);
  quasar::calculateLmeInfo((std::string *)(**((_QWORD **)a1 + 1) + 584), a1[16], v91, (uint64_t)v92);
  v6 = (const float *)(a1 + 20);
  v7 = (int32x2_t)vld1_dup_f32(v6);
  *(int32x2_t *)&v94[4] = vmul_s32(v7, vmovn_s64(*(int64x2_t *)(a2 + 10)));
  v8 = *(_QWORD *)a1;
  if (*(_QWORD *)(*(_QWORD *)a1 + 32) && *(_QWORD *)(v8 + 80) && !*(_BYTE *)(v8 + 852))
  {
    v9 = *((_QWORD *)a2 + 2);
    v10 = *((_QWORD *)a2 + 3) - v9;
    v11 = v10 >> 2;
    if (v10)
    {
      v12 = 0;
      do
      {
        v13 = *(_DWORD *)(v9 + 4 * v12);
        v14 = kaldi::TransitionModel::TransitionIdToPhone(*(kaldi::TransitionModel **)(*(_QWORD *)a1 + 80), v13);
        v15 = (void **)*((_QWORD *)a1 + 4);
        v16 = *((_QWORD *)a2 + 5) + v12;
        v17 = (char *)v15[1];
        v18 = (char *)v15[2];
        if (v17 >= v18)
        {
          v20 = (v17 - (_BYTE *)*v15) >> 4;
          v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v22 = v18 - (_BYTE *)*v15;
          if (v22 >> 3 > v21)
            v21 = v22 >> 3;
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
            v23 = 0xFFFFFFFFFFFFFFFLL;
          else
            v23 = v21;
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(v15 + 2), v23);
          v26 = &v24[16 * v20];
          *(_QWORD *)v26 = v16;
          *((_DWORD *)v26 + 2) = v13;
          *((_DWORD *)v26 + 3) = v14;
          v28 = (char *)*v15;
          v27 = (char *)v15[1];
          v29 = v26;
          if (v27 != *v15)
          {
            do
            {
              *((_OWORD *)v29 - 1) = *((_OWORD *)v27 - 1);
              v29 -= 16;
              v27 -= 16;
            }
            while (v27 != v28);
            v27 = (char *)*v15;
          }
          v19 = v26 + 16;
          *v15 = v29;
          v15[1] = v26 + 16;
          v15[2] = &v24[16 * v25];
          if (v27)
            operator delete(v27);
        }
        else
        {
          *(_QWORD *)v17 = v16;
          v19 = v17 + 16;
          *((_DWORD *)v17 + 2) = v13;
          *((_DWORD *)v17 + 3) = v14;
        }
        v15[1] = v19;
        v30 = *(_QWORD *)a1;
        if (*(_QWORD *)(*(_QWORD *)a1 + 216))
        {
          v31 = *(_QWORD *)(*((_QWORD *)a1 + 4) + 8);
          if (!kaldi::SilencePhoneSet::isSilencePhone((kaldi::SilencePhoneSet *)(v30 + 96), *(_DWORD *)(v31 - 4))
            && kaldi::TransitionModel::IsFinal(*(kaldi::TransitionModel **)(v30 + 80), *(_DWORD *)(v31 - 8))
            && (kaldi::WordBoundaryInfo::TypeOfPhone(*(kaldi::WordBoundaryInfo **)(*(_QWORD *)a1 + 216), v14) & 0xFFFFFFFE) == 2)
          {
            v32 = *((_QWORD *)a1 + 5);
            v33 = (uint64_t)(*(_QWORD *)(*((_QWORD *)a1 + 4) + 8) - **((_QWORD **)a1 + 4)) >> 4;
            v34 = *(uint64_t **)(v32 + 8);
            v35 = *(_QWORD *)(v32 + 16);
            if ((unint64_t)v34 >= v35)
            {
              v37 = *(uint64_t **)v32;
              v38 = ((uint64_t)v34 - *(_QWORD *)v32) >> 3;
              v39 = v38 + 1;
              if ((unint64_t)(v38 + 1) >> 61)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v40 = v35 - (_QWORD)v37;
              if (v40 >> 2 > v39)
                v39 = v40 >> 2;
              if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
                v41 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v41 = v39;
              if (v41)
              {
                v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v32 + 16, v41);
                v37 = *(uint64_t **)v32;
                v34 = *(uint64_t **)(v32 + 8);
              }
              else
              {
                v42 = 0;
              }
              v43 = (uint64_t *)&v42[8 * v38];
              *v43 = v33;
              v36 = v43 + 1;
              while (v34 != v37)
              {
                v44 = *--v34;
                *--v43 = v44;
              }
              *(_QWORD *)v32 = v43;
              *(_QWORD *)(v32 + 8) = v36;
              *(_QWORD *)(v32 + 16) = &v42[8 * v41];
              if (v37)
                operator delete(v37);
            }
            else
            {
              *v34 = v33;
              v36 = v34 + 1;
            }
            *(_QWORD *)(v32 + 8) = v36;
          }
        }
        isSilencePhone = kaldi::SilencePhoneSet::isSilencePhone((kaldi::SilencePhoneSet *)(*(_QWORD *)a1 + 96), *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 4) + 8) - 4));
        v46 = isSilencePhone;
        if (!isSilencePhone)
          v11 = v12;
        if (a1[16])
        {
          v47 = *((_QWORD *)a1 + 1);
          v48 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 80) + 96) + 4 * v13);
          v49 = *(_QWORD **)v47;
          v50 = *(_QWORD *)(*(_QWORD *)v47 + 992);
          v51 = *(_QWORD *)(*(_QWORD *)v47 + 1000);
          if (v50 >= v51)
          {
            v53 = v49[123];
            v54 = (uint64_t)(v50 - v53) >> 3;
            v55 = v54 + 1;
            if ((unint64_t)(v54 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v56 = v51 - v53;
            if (v56 >> 2 > v55)
              v55 = v56 >> 2;
            if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
              v57 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v57 = v55;
            v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v49 + 125), v57);
            v60 = &v58[8 * v54];
            *(_DWORD *)v60 = v48;
            v60[4] = v46;
            v61 = (char *)v49[124];
            v62 = (char *)v49[123];
            v63 = v60;
            if (v61 != v62)
            {
              do
              {
                v64 = *((_QWORD *)v61 - 1);
                v61 -= 8;
                *((_QWORD *)v63 - 1) = v64;
                v63 -= 8;
              }
              while (v61 != v62);
              v61 = (char *)v49[123];
            }
            v49[123] = v63;
            v52 = v60 + 8;
            v49[124] = v60 + 8;
            v49[125] = &v58[8 * v59];
            if (v61)
              operator delete(v61);
          }
          else
          {
            *(_DWORD *)v50 = v48;
            *(_BYTE *)(v50 + 4) = isSilencePhone;
            v52 = (char *)(v50 + 8);
          }
          v49[124] = v52;
        }
        ++v12;
        v9 = *((_QWORD *)a2 + 2);
      }
      while (v12 < (*((_QWORD *)a2 + 3) - v9) >> 2);
      v8 = *(_QWORD *)a1;
    }
    v65 = *(_QWORD *)(v8 + 216);
    if (!v65)
      goto LABEL_70;
    v68 = *(_QWORD *)(v65 + 40);
    v66 = v65 + 40;
    v67 = v68;
    if (!v68)
      goto LABEL_70;
    v69 = *a2;
    v70 = v66;
    do
    {
      v71 = *(_DWORD *)(v67 + 28);
      v72 = v71 < v69;
      if (v71 >= v69)
        v73 = (uint64_t *)v67;
      else
        v73 = (uint64_t *)(v67 + 8);
      if (!v72)
        v70 = v67;
      v67 = *v73;
    }
    while (*v73);
    if (v70 != v66 && v69 >= *(_DWORD *)(v70 + 28))
    {
      if (v11 && quasar::gLogLevel >= 2)
      {
        memset(v90, 0, sizeof(v90));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v90);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"Non-silence phone detected at transition ", 41);
        v86 = (_QWORD *)std::ostream::operator<<();
        v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)" ", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"(out of ", 8);
        v88 = (_QWORD *)std::ostream::operator<<();
        v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)") for unpronouncable token; ",
                28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"whereas all silence phones were expected.", 41);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v90);
      }
      v74 = *((_DWORD *)a1 + 5) * a2[10];
    }
    else
    {
LABEL_70:
      v74 = *((_DWORD *)a1 + 5) + *((_DWORD *)a1 + 5) * (a2[10] + v11);
    }
    *(_DWORD *)&v94[12] = v74;
  }
  if (a1[24])
  {
    v75 = a2 + 14;
    v76 = a2 + 15;
    v77 = round(expf(-*((float *)a2 + 3)) * 1000.0);
  }
  else
  {
    v75 = a2 + 2;
    v76 = a2 + 3;
    v77 = 0.0;
  }
  v78 = *v76;
  DWORD1(v109) = *v75;
  DWORD2(v109) = v78;
  *(float *)&v94[16] = v77;
  *(_OWORD *)a3 = *(_OWORD *)v92;
  *(_QWORD *)(a3 + 16) = v93;
  v92[0] = 0;
  v92[1] = 0;
  v93 = 0;
  *(_OWORD *)(a3 + 24) = *(_OWORD *)v94;
  *(_QWORD *)(a3 + 38) = *(_QWORD *)&v94[14];
  v79 = *(_OWORD *)v95;
  v80 = v98;
  *(_QWORD *)(a3 + 64) = v96;
  *(_OWORD *)(a3 + 48) = v79;
  v95[0] = 0;
  v95[1] = 0;
  *(_OWORD *)(a3 + 72) = v97;
  *(_QWORD *)(a3 + 88) = v80;
  v96 = 0;
  v97 = 0uLL;
  v98 = 0;
  v81 = *(_OWORD *)__p;
  v82 = v102;
  *(_QWORD *)(a3 + 112) = v100;
  *(_OWORD *)(a3 + 96) = v81;
  __p[0] = 0;
  __p[1] = 0;
  *(_OWORD *)(a3 + 120) = v101;
  *(_QWORD *)(a3 + 136) = v82;
  v100 = 0;
  v101 = 0uLL;
  v102 = 0;
  v83 = v103;
  *(_QWORD *)(a3 + 160) = v104;
  *(_OWORD *)(a3 + 144) = v83;
  v103 = 0uLL;
  LODWORD(v80) = v105;
  *(_WORD *)(a3 + 172) = v106;
  *(_DWORD *)(a3 + 168) = v80;
  v84 = v107;
  *(_QWORD *)(a3 + 192) = v108;
  *(_OWORD *)(a3 + 176) = v84;
  v104 = 0;
  v107 = 0uLL;
  v108 = 0;
  v85 = v109;
  *(_DWORD *)(a3 + 216) = v110;
  *(_OWORD *)(a3 + 200) = v85;
  *(_QWORD *)&v90[0] = &v101;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v90);
  if (SHIBYTE(v100) < 0)
    operator delete(__p[0]);
  *(_QWORD *)&v90[0] = &v97;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v90);
  if (SHIBYTE(v96) < 0)
    operator delete(v95[0]);
  if (SHIBYTE(v93) < 0)
    operator delete(v92[0]);
}

void sub_1AD930CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45)
{
  quasar::Token::~Token(&a45);
  _Unwind_Resume(a1);
}

uint64_t quasar::ProcessHypotheses<1ul,0l,-1l>(quasar::DecoderPassData const&,std::shared_ptr<quasar::DecoderChainOutput> const&,std::vector<quasar::CalculateJoinedNBest<1ul>::HypothesisVector,std::allocator<quasar::CalculateJoinedNBest<1ul>::HypothesisVector>> const&,std::vector<std::vector<quasar::Token>> *,std::vector<double> *,kaldi::LatticeScoreCache *)::{lambda(unsigned long)#1}::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  std::string *p_p;
  std::string::size_type size;
  uint64_t v14;
  std::string __p;
  _QWORD v17[2];
  _QWORD v18[11];
  char v19;
  uint64_t v20;
  _QWORD v21[18];

  v21[17] = *MEMORY[0x1E0C80C00];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v17);
  v4 = *(uint64_t **)(a1 + 8);
  if (a2)
  {
    v5 = *v4;
    v6 = *(_QWORD *)(v5 + 8 * a2 - 8);
  }
  else
  {
    v6 = 0;
    v5 = *v4;
  }
  v7 = *(_QWORD *)(v5 + 8 * a2);
  if (v6 != v7)
  {
    v8 = (int *)(**(_QWORD **)a1 + 16 * v6 + 12);
    v9 = 16 * v7 - 16 * v6;
    do
    {
      v10 = *(_QWORD *)(a1 + 16);
      if (!kaldi::SilencePhoneSet::isSilencePhone((kaldi::SilencePhoneSet *)(v10 + 96), *v8)
        && kaldi::TransitionModel::IsFinal(*(kaldi::TransitionModel **)(v10 + 80), *(v8 - 1)))
      {
        (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 168)
                                                                          + 88))(&__p, *(_QWORD *)(*(_QWORD *)(a1 + 16) + 168), *v8);
        kaldi::quasar::Lexicon::BasifyPhone(&__p);
        v11 = (char *)v18 + *(_QWORD *)(v18[0] - 24);
        if ((v11[32] & 5) == 0)
        {
          (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v11 + 5) + 32))(v21, *((_QWORD *)v11 + 5), 0, 1, 16);
          if (v21[16] >= 1)
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" ", 1);
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)p_p, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v8 += 4;
      v9 -= 16;
    }
    while (v9);
  }
  std::stringbuf::str();
  v17[0] = *MEMORY[0x1E0DE4F50];
  v14 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v17 + *(_QWORD *)(v17[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v18[0] = v14;
  v18[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v19 < 0)
    operator delete((void *)v18[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v20);
}

void sub_1AD930F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void quasar::ProcessHypotheses<1ul,-1l,0l>(quasar::DecoderPassData const&,std::shared_ptr<quasar::DecoderChainOutput> const&,std::vector<quasar::CalculateJoinedNBest<1ul>::HypothesisVector,std::allocator<quasar::CalculateJoinedNBest<1ul>::HypothesisVector>> const&,std::vector<std::vector<quasar::Token>> *,std::vector<double> *,kaldi::LatticeScoreCache *)::{lambda(quasar::NBestToken<1ul> const&)#1}::operator()(unsigned __int8 *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  const float *v6;
  int32x2_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  void **v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  _BOOL4 isSilencePhone;
  BOOL v46;
  uint64_t v47;
  int v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  BOOL v72;
  uint64_t *v73;
  int v74;
  int v75;
  _QWORD *v76;
  float v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _OWORD v88[17];
  unsigned int v89;
  void *v90[2];
  uint64_t v91;
  _BYTE v92[22];
  void *v93[2];
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  void *__p[2];
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  int v103;
  __int16 v104;
  __int128 v105;
  uint64_t v106;
  _BYTE v107[20];

  quasar::Token::Token((quasar::Token *)v90);
  v89 = -1;
  *(_DWORD *)v92 = *a2;
  quasar::SymbolTableList::lookup(*(uint64_t **)(**((_QWORD **)a1 + 1) + 472), *(int *)v92, (unsigned __int8 *)v90, &v89);
  quasar::calculateLmeInfo((std::string *)(**((_QWORD **)a1 + 1) + 584), a1[16], v89, (uint64_t)v90);
  v6 = (const float *)(a1 + 20);
  v7 = (int32x2_t)vld1_dup_f32(v6);
  *(int32x2_t *)&v92[4] = vmul_s32(v7, vmovn_s64(*(int64x2_t *)(a2 + 10)));
  v8 = *(_QWORD *)a1;
  if (*(_QWORD *)(*(_QWORD *)a1 + 32) && *(_QWORD *)(v8 + 80) && !*(_BYTE *)(v8 + 852))
  {
    v9 = *((_QWORD *)a2 + 2);
    v10 = *((_QWORD *)a2 + 3) - v9;
    v11 = v10 >> 2;
    if (v10)
    {
      v12 = 0;
      do
      {
        v13 = *(_DWORD *)(v9 + 4 * v12);
        v14 = kaldi::TransitionModel::TransitionIdToPhone(*(kaldi::TransitionModel **)(*(_QWORD *)a1 + 80), v13);
        v15 = (void **)*((_QWORD *)a1 + 4);
        v16 = *((_QWORD *)a2 + 5) + v12;
        v17 = (char *)v15[1];
        v18 = (char *)v15[2];
        if (v17 >= v18)
        {
          v20 = (v17 - (_BYTE *)*v15) >> 4;
          v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v22 = v18 - (_BYTE *)*v15;
          if (v22 >> 3 > v21)
            v21 = v22 >> 3;
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
            v23 = 0xFFFFFFFFFFFFFFFLL;
          else
            v23 = v21;
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(v15 + 2), v23);
          v26 = &v24[16 * v20];
          *(_QWORD *)v26 = v16;
          *((_DWORD *)v26 + 2) = v13;
          *((_DWORD *)v26 + 3) = v14;
          v28 = (char *)*v15;
          v27 = (char *)v15[1];
          v29 = v26;
          if (v27 != *v15)
          {
            do
            {
              *((_OWORD *)v29 - 1) = *((_OWORD *)v27 - 1);
              v29 -= 16;
              v27 -= 16;
            }
            while (v27 != v28);
            v27 = (char *)*v15;
          }
          v19 = v26 + 16;
          *v15 = v29;
          v15[1] = v26 + 16;
          v15[2] = &v24[16 * v25];
          if (v27)
            operator delete(v27);
        }
        else
        {
          *(_QWORD *)v17 = v16;
          v19 = v17 + 16;
          *((_DWORD *)v17 + 2) = v13;
          *((_DWORD *)v17 + 3) = v14;
        }
        v15[1] = v19;
        v30 = *(_QWORD *)a1;
        if (*(_QWORD *)(*(_QWORD *)a1 + 216))
        {
          v31 = *(_QWORD *)(*((_QWORD *)a1 + 4) + 8);
          if (!kaldi::SilencePhoneSet::isSilencePhone((kaldi::SilencePhoneSet *)(v30 + 96), *(_DWORD *)(v31 - 4))
            && kaldi::TransitionModel::IsFinal(*(kaldi::TransitionModel **)(v30 + 80), *(_DWORD *)(v31 - 8))
            && (kaldi::WordBoundaryInfo::TypeOfPhone(*(kaldi::WordBoundaryInfo **)(*(_QWORD *)a1 + 216), v14) & 0xFFFFFFFE) == 2)
          {
            v32 = *((_QWORD *)a1 + 5);
            v33 = (uint64_t)(*(_QWORD *)(*((_QWORD *)a1 + 4) + 8) - **((_QWORD **)a1 + 4)) >> 4;
            v34 = *(uint64_t **)(v32 + 8);
            v35 = *(_QWORD *)(v32 + 16);
            if ((unint64_t)v34 >= v35)
            {
              v37 = *(uint64_t **)v32;
              v38 = ((uint64_t)v34 - *(_QWORD *)v32) >> 3;
              v39 = v38 + 1;
              if ((unint64_t)(v38 + 1) >> 61)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v40 = v35 - (_QWORD)v37;
              if (v40 >> 2 > v39)
                v39 = v40 >> 2;
              if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
                v41 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v41 = v39;
              if (v41)
              {
                v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v32 + 16, v41);
                v37 = *(uint64_t **)v32;
                v34 = *(uint64_t **)(v32 + 8);
              }
              else
              {
                v42 = 0;
              }
              v43 = (uint64_t *)&v42[8 * v38];
              *v43 = v33;
              v36 = v43 + 1;
              while (v34 != v37)
              {
                v44 = *--v34;
                *--v43 = v44;
              }
              *(_QWORD *)v32 = v43;
              *(_QWORD *)(v32 + 8) = v36;
              *(_QWORD *)(v32 + 16) = &v42[8 * v41];
              if (v37)
                operator delete(v37);
            }
            else
            {
              *v34 = v33;
              v36 = v34 + 1;
            }
            *(_QWORD *)(v32 + 8) = v36;
          }
        }
        isSilencePhone = kaldi::SilencePhoneSet::isSilencePhone((kaldi::SilencePhoneSet *)(*(_QWORD *)a1 + 96), *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 4) + 8) - 4));
        v46 = isSilencePhone;
        if (!isSilencePhone)
          v11 = v12;
        if (a1[16])
        {
          v47 = *((_QWORD *)a1 + 1);
          v48 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 80) + 96) + 4 * v13);
          v49 = *(_QWORD **)v47;
          v50 = *(_QWORD *)(*(_QWORD *)v47 + 992);
          v51 = *(_QWORD *)(*(_QWORD *)v47 + 1000);
          if (v50 >= v51)
          {
            v53 = v49[123];
            v54 = (uint64_t)(v50 - v53) >> 3;
            v55 = v54 + 1;
            if ((unint64_t)(v54 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v56 = v51 - v53;
            if (v56 >> 2 > v55)
              v55 = v56 >> 2;
            if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
              v57 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v57 = v55;
            v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v49 + 125), v57);
            v60 = &v58[8 * v54];
            *(_DWORD *)v60 = v48;
            v60[4] = v46;
            v61 = (char *)v49[124];
            v62 = (char *)v49[123];
            v63 = v60;
            if (v61 != v62)
            {
              do
              {
                v64 = *((_QWORD *)v61 - 1);
                v61 -= 8;
                *((_QWORD *)v63 - 1) = v64;
                v63 -= 8;
              }
              while (v61 != v62);
              v61 = (char *)v49[123];
            }
            v49[123] = v63;
            v52 = v60 + 8;
            v49[124] = v60 + 8;
            v49[125] = &v58[8 * v59];
            if (v61)
              operator delete(v61);
          }
          else
          {
            *(_DWORD *)v50 = v48;
            *(_BYTE *)(v50 + 4) = isSilencePhone;
            v52 = (char *)(v50 + 8);
          }
          v49[124] = v52;
        }
        ++v12;
        v9 = *((_QWORD *)a2 + 2);
      }
      while (v12 < (*((_QWORD *)a2 + 3) - v9) >> 2);
      v8 = *(_QWORD *)a1;
    }
    v65 = *(_QWORD *)(v8 + 216);
    if (!v65)
      goto LABEL_70;
    v68 = *(_QWORD *)(v65 + 40);
    v66 = v65 + 40;
    v67 = v68;
    if (!v68)
      goto LABEL_70;
    v69 = *a2;
    v70 = v66;
    do
    {
      v71 = *(_DWORD *)(v67 + 28);
      v72 = v71 < v69;
      if (v71 >= v69)
        v73 = (uint64_t *)v67;
      else
        v73 = (uint64_t *)(v67 + 8);
      if (!v72)
        v70 = v67;
      v67 = *v73;
    }
    while (*v73);
    if (v70 != v66 && v69 >= *(_DWORD *)(v70 + 28))
    {
      if (v11 && quasar::gLogLevel >= 2)
      {
        memset(v88, 0, sizeof(v88));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v88);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"Non-silence phone detected at transition ", 41);
        v84 = (_QWORD *)std::ostream::operator<<();
        v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)" ", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"(out of ", 8);
        v86 = (_QWORD *)std::ostream::operator<<();
        v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)") for unpronouncable token; ",
                28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"whereas all silence phones were expected.", 41);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v88);
      }
      v74 = *((_DWORD *)a1 + 5) * a2[10];
    }
    else
    {
LABEL_70:
      v74 = *((_DWORD *)a1 + 5) + *((_DWORD *)a1 + 5) * (a2[10] + v11);
    }
    *(_DWORD *)&v92[12] = v74;
  }
  v75 = a1[24];
  v76 = a2 + 6;
  if (!a1[24])
    v76 = a2 + 2;
  *(_QWORD *)&v107[4] = *v76;
  *(float32x2_t *)&v107[12] = vadd_f32(*(float32x2_t *)(a2 + 14), *(float32x2_t *)&v107[12]);
  if (v75)
    v77 = round(expf(-*((float *)a2 + 3)) * 1000.0);
  else
    v77 = 0.0;
  *(float *)&v92[16] = v77;
  *(_OWORD *)a3 = *(_OWORD *)v90;
  *(_QWORD *)(a3 + 16) = v91;
  v90[0] = 0;
  v90[1] = 0;
  v91 = 0;
  *(_OWORD *)(a3 + 24) = *(_OWORD *)v92;
  *(_QWORD *)(a3 + 38) = *(_QWORD *)&v92[14];
  v78 = v96;
  *(_QWORD *)(a3 + 64) = v94;
  *(_OWORD *)(a3 + 48) = *(_OWORD *)v93;
  v93[0] = 0;
  v93[1] = 0;
  *(_OWORD *)(a3 + 72) = v95;
  *(_QWORD *)(a3 + 88) = v78;
  v94 = 0;
  v95 = 0uLL;
  v96 = 0;
  v79 = *(_OWORD *)__p;
  v80 = v100;
  *(_QWORD *)(a3 + 112) = v98;
  *(_OWORD *)(a3 + 96) = v79;
  __p[0] = 0;
  __p[1] = 0;
  *(_OWORD *)(a3 + 120) = v99;
  *(_QWORD *)(a3 + 136) = v80;
  v98 = 0;
  v99 = 0uLL;
  v100 = 0;
  v81 = v101;
  *(_QWORD *)(a3 + 160) = v102;
  *(_OWORD *)(a3 + 144) = v81;
  v101 = 0uLL;
  LODWORD(v78) = v103;
  *(_WORD *)(a3 + 172) = v104;
  *(_DWORD *)(a3 + 168) = v78;
  v82 = v105;
  *(_QWORD *)(a3 + 192) = v106;
  *(_OWORD *)(a3 + 176) = v82;
  v102 = 0;
  v105 = 0uLL;
  v106 = 0;
  v83 = *(_OWORD *)v107;
  *(_DWORD *)(a3 + 216) = *(_DWORD *)&v107[16];
  *(_OWORD *)(a3 + 200) = v83;
  *(_QWORD *)&v88[0] = &v99;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v88);
  if (SHIBYTE(v98) < 0)
    operator delete(__p[0]);
  *(_QWORD *)&v88[0] = &v95;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v88);
  if (SHIBYTE(v94) < 0)
    operator delete(v93[0]);
  if (SHIBYTE(v91) < 0)
    operator delete(v90[0]);
}

void sub_1AD931668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45)
{
  quasar::Token::~Token(&a45);
  _Unwind_Resume(a1);
}

uint64_t quasar::ProcessHypotheses<1ul,-1l,0l>(quasar::DecoderPassData const&,std::shared_ptr<quasar::DecoderChainOutput> const&,std::vector<quasar::CalculateJoinedNBest<1ul>::HypothesisVector,std::allocator<quasar::CalculateJoinedNBest<1ul>::HypothesisVector>> const&,std::vector<std::vector<quasar::Token>> *,std::vector<double> *,kaldi::LatticeScoreCache *)::{lambda(unsigned long)#1}::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  std::string *p_p;
  std::string::size_type size;
  uint64_t v14;
  std::string __p;
  _QWORD v17[2];
  _QWORD v18[11];
  char v19;
  uint64_t v20;
  _QWORD v21[18];

  v21[17] = *MEMORY[0x1E0C80C00];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v17);
  v4 = *(uint64_t **)(a1 + 8);
  if (a2)
  {
    v5 = *v4;
    v6 = *(_QWORD *)(v5 + 8 * a2 - 8);
  }
  else
  {
    v6 = 0;
    v5 = *v4;
  }
  v7 = *(_QWORD *)(v5 + 8 * a2);
  if (v6 != v7)
  {
    v8 = (int *)(**(_QWORD **)a1 + 16 * v6 + 12);
    v9 = 16 * v7 - 16 * v6;
    do
    {
      v10 = *(_QWORD *)(a1 + 16);
      if (!kaldi::SilencePhoneSet::isSilencePhone((kaldi::SilencePhoneSet *)(v10 + 96), *v8)
        && kaldi::TransitionModel::IsFinal(*(kaldi::TransitionModel **)(v10 + 80), *(v8 - 1)))
      {
        (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 168)
                                                                          + 88))(&__p, *(_QWORD *)(*(_QWORD *)(a1 + 16) + 168), *v8);
        kaldi::quasar::Lexicon::BasifyPhone(&__p);
        v11 = (char *)v18 + *(_QWORD *)(v18[0] - 24);
        if ((v11[32] & 5) == 0)
        {
          (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v11 + 5) + 32))(v21, *((_QWORD *)v11 + 5), 0, 1, 16);
          if (v21[16] >= 1)
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" ", 1);
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)p_p, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v8 += 4;
      v9 -= 16;
    }
    while (v9);
  }
  std::stringbuf::str();
  v17[0] = *MEMORY[0x1E0DE4F50];
  v14 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v17 + *(_QWORD *)(v17[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v18[0] = v14;
  v18[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v19 < 0)
    operator delete((void *)v18[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v20);
}

void sub_1AD9318DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<quasar::NBestToken<0ul>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<quasar::NBestToken<0ul>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<quasar::NBestToken<0ul>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<quasar::NBestToken<0ul>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<quasar::NBestToken<0ul>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 88)
  {
    v4 = *(void **)(i - 72);
    if (v4)
    {
      *(_QWORD *)(i - 64) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void quasar::ProcessHypotheses<0ul,-1l,-1l>(quasar::DecoderPassData const&,std::shared_ptr<quasar::DecoderChainOutput> const&,std::vector<quasar::CalculateJoinedNBest<0ul>::HypothesisVector,std::allocator<quasar::CalculateJoinedNBest<0ul>::HypothesisVector>> const&,std::vector<std::vector<quasar::Token>> *,std::vector<double> *,kaldi::LatticeScoreCache *)::{lambda(quasar::NBestToken<0ul> const&)#1}::operator()(const float *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  const float *v6;
  int32x2_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  void **v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  _BOOL4 isSilencePhone;
  BOOL v46;
  uint64_t v47;
  int v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  BOOL v72;
  uint64_t *v73;
  int v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _OWORD v85[17];
  unsigned int v86;
  void *v87[2];
  uint64_t v88;
  _BYTE v89[22];
  void *v90[2];
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  void *__p[2];
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  int v100;
  __int16 v101;
  __int128 v102;
  uint64_t v103;
  __int128 v104;
  int v105;

  quasar::Token::Token((quasar::Token *)v87);
  v86 = -1;
  *(_DWORD *)v89 = *a2;
  quasar::SymbolTableList::lookup(*(uint64_t **)(**((_QWORD **)a1 + 1) + 472), *(int *)v89, (unsigned __int8 *)v87, &v86);
  quasar::calculateLmeInfo((std::string *)(**((_QWORD **)a1 + 1) + 584), *((unsigned __int8 *)a1 + 16), v86, (uint64_t)v87);
  v6 = a1 + 5;
  v7 = (int32x2_t)vld1_dup_f32(v6);
  *(int32x2_t *)&v89[4] = vmul_s32(v7, vmovn_s64(*(int64x2_t *)(a2 + 10)));
  v8 = *(_QWORD *)a1;
  if (*(_QWORD *)(*(_QWORD *)a1 + 32) && *(_QWORD *)(v8 + 80) && !*(_BYTE *)(v8 + 852))
  {
    v9 = *((_QWORD *)a2 + 2);
    v10 = *((_QWORD *)a2 + 3) - v9;
    v11 = v10 >> 2;
    if (v10)
    {
      v12 = 0;
      do
      {
        v13 = *(_DWORD *)(v9 + 4 * v12);
        v14 = kaldi::TransitionModel::TransitionIdToPhone(*(kaldi::TransitionModel **)(*(_QWORD *)a1 + 80), v13);
        v15 = (void **)*((_QWORD *)a1 + 4);
        v16 = *((_QWORD *)a2 + 5) + v12;
        v17 = (char *)v15[1];
        v18 = (char *)v15[2];
        if (v17 >= v18)
        {
          v20 = (v17 - (_BYTE *)*v15) >> 4;
          v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v22 = v18 - (_BYTE *)*v15;
          if (v22 >> 3 > v21)
            v21 = v22 >> 3;
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
            v23 = 0xFFFFFFFFFFFFFFFLL;
          else
            v23 = v21;
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(v15 + 2), v23);
          v26 = &v24[16 * v20];
          *(_QWORD *)v26 = v16;
          *((_DWORD *)v26 + 2) = v13;
          *((_DWORD *)v26 + 3) = v14;
          v28 = (char *)*v15;
          v27 = (char *)v15[1];
          v29 = v26;
          if (v27 != *v15)
          {
            do
            {
              *((_OWORD *)v29 - 1) = *((_OWORD *)v27 - 1);
              v29 -= 16;
              v27 -= 16;
            }
            while (v27 != v28);
            v27 = (char *)*v15;
          }
          v19 = v26 + 16;
          *v15 = v29;
          v15[1] = v26 + 16;
          v15[2] = &v24[16 * v25];
          if (v27)
            operator delete(v27);
        }
        else
        {
          *(_QWORD *)v17 = v16;
          v19 = v17 + 16;
          *((_DWORD *)v17 + 2) = v13;
          *((_DWORD *)v17 + 3) = v14;
        }
        v15[1] = v19;
        v30 = *(_QWORD *)a1;
        if (*(_QWORD *)(*(_QWORD *)a1 + 216))
        {
          v31 = *(_QWORD *)(*((_QWORD *)a1 + 4) + 8);
          if (!kaldi::SilencePhoneSet::isSilencePhone((kaldi::SilencePhoneSet *)(v30 + 96), *(_DWORD *)(v31 - 4))
            && kaldi::TransitionModel::IsFinal(*(kaldi::TransitionModel **)(v30 + 80), *(_DWORD *)(v31 - 8))
            && (kaldi::WordBoundaryInfo::TypeOfPhone(*(kaldi::WordBoundaryInfo **)(*(_QWORD *)a1 + 216), v14) & 0xFFFFFFFE) == 2)
          {
            v32 = *((_QWORD *)a1 + 5);
            v33 = (uint64_t)(*(_QWORD *)(*((_QWORD *)a1 + 4) + 8) - **((_QWORD **)a1 + 4)) >> 4;
            v34 = *(uint64_t **)(v32 + 8);
            v35 = *(_QWORD *)(v32 + 16);
            if ((unint64_t)v34 >= v35)
            {
              v37 = *(uint64_t **)v32;
              v38 = ((uint64_t)v34 - *(_QWORD *)v32) >> 3;
              v39 = v38 + 1;
              if ((unint64_t)(v38 + 1) >> 61)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v40 = v35 - (_QWORD)v37;
              if (v40 >> 2 > v39)
                v39 = v40 >> 2;
              if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
                v41 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v41 = v39;
              if (v41)
              {
                v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v32 + 16, v41);
                v37 = *(uint64_t **)v32;
                v34 = *(uint64_t **)(v32 + 8);
              }
              else
              {
                v42 = 0;
              }
              v43 = (uint64_t *)&v42[8 * v38];
              *v43 = v33;
              v36 = v43 + 1;
              while (v34 != v37)
              {
                v44 = *--v34;
                *--v43 = v44;
              }
              *(_QWORD *)v32 = v43;
              *(_QWORD *)(v32 + 8) = v36;
              *(_QWORD *)(v32 + 16) = &v42[8 * v41];
              if (v37)
                operator delete(v37);
            }
            else
            {
              *v34 = v33;
              v36 = v34 + 1;
            }
            *(_QWORD *)(v32 + 8) = v36;
          }
        }
        isSilencePhone = kaldi::SilencePhoneSet::isSilencePhone((kaldi::SilencePhoneSet *)(*(_QWORD *)a1 + 96), *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 4) + 8) - 4));
        v46 = isSilencePhone;
        if (!isSilencePhone)
          v11 = v12;
        if (*((_BYTE *)a1 + 16))
        {
          v47 = *((_QWORD *)a1 + 1);
          v48 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 80) + 96) + 4 * v13);
          v49 = *(_QWORD **)v47;
          v50 = *(_QWORD *)(*(_QWORD *)v47 + 992);
          v51 = *(_QWORD *)(*(_QWORD *)v47 + 1000);
          if (v50 >= v51)
          {
            v53 = v49[123];
            v54 = (uint64_t)(v50 - v53) >> 3;
            v55 = v54 + 1;
            if ((unint64_t)(v54 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v56 = v51 - v53;
            if (v56 >> 2 > v55)
              v55 = v56 >> 2;
            if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
              v57 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v57 = v55;
            v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v49 + 125), v57);
            v60 = &v58[8 * v54];
            *(_DWORD *)v60 = v48;
            v60[4] = v46;
            v61 = (char *)v49[124];
            v62 = (char *)v49[123];
            v63 = v60;
            if (v61 != v62)
            {
              do
              {
                v64 = *((_QWORD *)v61 - 1);
                v61 -= 8;
                *((_QWORD *)v63 - 1) = v64;
                v63 -= 8;
              }
              while (v61 != v62);
              v61 = (char *)v49[123];
            }
            v49[123] = v63;
            v52 = v60 + 8;
            v49[124] = v60 + 8;
            v49[125] = &v58[8 * v59];
            if (v61)
              operator delete(v61);
          }
          else
          {
            *(_DWORD *)v50 = v48;
            *(_BYTE *)(v50 + 4) = isSilencePhone;
            v52 = (char *)(v50 + 8);
          }
          v49[124] = v52;
        }
        ++v12;
        v9 = *((_QWORD *)a2 + 2);
      }
      while (v12 < (*((_QWORD *)a2 + 3) - v9) >> 2);
      v8 = *(_QWORD *)a1;
    }
    v65 = *(_QWORD *)(v8 + 216);
    if (!v65)
      goto LABEL_70;
    v68 = *(_QWORD *)(v65 + 40);
    v66 = v65 + 40;
    v67 = v68;
    if (!v68)
      goto LABEL_70;
    v69 = *a2;
    v70 = v66;
    do
    {
      v71 = *(_DWORD *)(v67 + 28);
      v72 = v71 < v69;
      if (v71 >= v69)
        v73 = (uint64_t *)v67;
      else
        v73 = (uint64_t *)(v67 + 8);
      if (!v72)
        v70 = v67;
      v67 = *v73;
    }
    while (*v73);
    if (v70 != v66 && v69 >= *(_DWORD *)(v70 + 28))
    {
      if (v11 && quasar::gLogLevel >= 2)
      {
        memset(v85, 0, sizeof(v85));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v85);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"Non-silence phone detected at transition ", 41);
        v81 = (_QWORD *)std::ostream::operator<<();
        v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)" ", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"(out of ", 8);
        v83 = (_QWORD *)std::ostream::operator<<();
        v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)") for unpronouncable token; ",
                28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"whereas all silence phones were expected.", 41);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v85);
      }
      v74 = *((_DWORD *)a1 + 5) * a2[10];
    }
    else
    {
LABEL_70:
      v74 = *((_DWORD *)a1 + 5) + *((_DWORD *)a1 + 5) * (a2[10] + v11);
    }
    *(_DWORD *)&v89[12] = v74;
  }
  *(_QWORD *)((char *)&v104 + 4) = *((_QWORD *)a2 + 1);
  *(_DWORD *)&v89[16] = 0;
  *(_OWORD *)a3 = *(_OWORD *)v87;
  *(_QWORD *)(a3 + 16) = v88;
  v87[0] = 0;
  v87[1] = 0;
  v88 = 0;
  *(_OWORD *)(a3 + 24) = *(_OWORD *)v89;
  *(_QWORD *)(a3 + 38) = *(_QWORD *)&v89[14];
  *(_OWORD *)(a3 + 48) = *(_OWORD *)v90;
  v75 = v93;
  *(_QWORD *)(a3 + 64) = v91;
  v90[0] = 0;
  v90[1] = 0;
  *(_OWORD *)(a3 + 72) = v92;
  *(_QWORD *)(a3 + 88) = v75;
  v91 = 0;
  v92 = 0uLL;
  v93 = 0;
  v76 = *(_OWORD *)__p;
  v77 = v97;
  *(_QWORD *)(a3 + 112) = v95;
  *(_OWORD *)(a3 + 96) = v76;
  __p[0] = 0;
  __p[1] = 0;
  *(_OWORD *)(a3 + 120) = v96;
  *(_QWORD *)(a3 + 136) = v77;
  v95 = 0;
  v96 = 0uLL;
  v97 = 0;
  v78 = v98;
  *(_QWORD *)(a3 + 160) = v99;
  *(_OWORD *)(a3 + 144) = v78;
  v98 = 0uLL;
  LODWORD(v75) = v100;
  *(_WORD *)(a3 + 172) = v101;
  *(_DWORD *)(a3 + 168) = v75;
  v79 = v102;
  *(_QWORD *)(a3 + 192) = v103;
  *(_OWORD *)(a3 + 176) = v79;
  v99 = 0;
  v102 = 0uLL;
  v103 = 0;
  v80 = v104;
  *(_DWORD *)(a3 + 216) = v105;
  *(_OWORD *)(a3 + 200) = v80;
  *(_QWORD *)&v85[0] = &v96;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v85);
  if (SHIBYTE(v95) < 0)
    operator delete(__p[0]);
  *(_QWORD *)&v85[0] = &v92;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v85);
  if (SHIBYTE(v91) < 0)
    operator delete(v90[0]);
  if (SHIBYTE(v88) < 0)
    operator delete(v87[0]);
}

void sub_1AD932084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45)
{
  quasar::Token::~Token(&a45);
  _Unwind_Resume(a1);
}

uint64_t quasar::ProcessHypotheses<0ul,-1l,-1l>(quasar::DecoderPassData const&,std::shared_ptr<quasar::DecoderChainOutput> const&,std::vector<quasar::CalculateJoinedNBest<0ul>::HypothesisVector,std::allocator<quasar::CalculateJoinedNBest<0ul>::HypothesisVector>> const&,std::vector<std::vector<quasar::Token>> *,std::vector<double> *,kaldi::LatticeScoreCache *)::{lambda(unsigned long)#1}::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  std::string *p_p;
  std::string::size_type size;
  uint64_t v14;
  std::string __p;
  _QWORD v17[2];
  _QWORD v18[11];
  char v19;
  uint64_t v20;
  _QWORD v21[18];

  v21[17] = *MEMORY[0x1E0C80C00];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v17);
  v4 = *(uint64_t **)(a1 + 8);
  if (a2)
  {
    v5 = *v4;
    v6 = *(_QWORD *)(v5 + 8 * a2 - 8);
  }
  else
  {
    v6 = 0;
    v5 = *v4;
  }
  v7 = *(_QWORD *)(v5 + 8 * a2);
  if (v6 != v7)
  {
    v8 = (int *)(**(_QWORD **)a1 + 16 * v6 + 12);
    v9 = 16 * v7 - 16 * v6;
    do
    {
      v10 = *(_QWORD *)(a1 + 16);
      if (!kaldi::SilencePhoneSet::isSilencePhone((kaldi::SilencePhoneSet *)(v10 + 96), *v8)
        && kaldi::TransitionModel::IsFinal(*(kaldi::TransitionModel **)(v10 + 80), *(v8 - 1)))
      {
        (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 168)
                                                                          + 88))(&__p, *(_QWORD *)(*(_QWORD *)(a1 + 16) + 168), *v8);
        kaldi::quasar::Lexicon::BasifyPhone(&__p);
        v11 = (char *)v18 + *(_QWORD *)(v18[0] - 24);
        if ((v11[32] & 5) == 0)
        {
          (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v11 + 5) + 32))(v21, *((_QWORD *)v11 + 5), 0, 1, 16);
          if (v21[16] >= 1)
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" ", 1);
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)p_p, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v8 += 4;
      v9 -= 16;
    }
    while (v9);
  }
  std::stringbuf::str();
  v17[0] = *MEMORY[0x1E0DE4F50];
  v14 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v17 + *(_QWORD *)(v17[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v18[0] = v14;
  v18[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v19 < 0)
    operator delete((void *)v18[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v20);
}

void sub_1AD9322F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<kaldi::WordHypLattice::Arc *>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<kaldi::WordHypLattice::Arc *>>,std::reverse_iterator<std::vector<kaldi::WordHypLattice::Arc *>*>,std::reverse_iterator<std::vector<kaldi::WordHypLattice::Arc *>*>,std::reverse_iterator<std::vector<kaldi::WordHypLattice::Arc *>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<kaldi::WordHypLattice::Arc *>>,std::reverse_iterator<std::vector<kaldi::WordHypLattice::Arc *>*>,std::reverse_iterator<std::vector<kaldi::WordHypLattice::Arc *>*>,std::reverse_iterator<std::vector<kaldi::WordHypLattice::Arc *>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::WordHypLattice::Arc *>>,std::reverse_iterator<std::vector<kaldi::WordHypLattice::Arc *>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::WordHypLattice::Arc *>>,std::reverse_iterator<std::vector<kaldi::WordHypLattice::Arc *>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

std::string *std::allocate_shared[abi:ne180100]<quasar::Token,std::allocator<quasar::Token>,std::string &,float &,float &,float &,double,BOOL,BOOL,std::string &,std::string,void>@<X0>(uint64_t a1@<X1>, float *a2@<X2>, float *a3@<X3>, float *a4@<X4>, double *a5@<X5>, unsigned __int8 *a6@<X6>, unsigned __int8 *a7@<X7>, _QWORD *a8@<X8>, __int128 *a9, __int128 *a10)
{
  std::string *v17;
  std::string *result;

  v17 = (std::string *)operator new(0xF8uLL);
  result = std::__shared_ptr_emplace<quasar::Token>::__shared_ptr_emplace[abi:ne180100]<std::string &,float &,float &,float &,double,BOOL,BOOL,std::string &,std::string,std::allocator<quasar::Token>,0>(v17, a1, a2, a3, a4, a5, a6, a7, a9, a10);
  *a8 = v17 + 1;
  a8[1] = v17;
  return result;
}

void sub_1AD93251C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<quasar::Token>::__shared_ptr_emplace[abi:ne180100]<std::string &,float &,float &,float &,double,BOOL,BOOL,std::string &,std::string,std::allocator<quasar::Token>,0>(std::string *a1, uint64_t a2, float *a3, float *a4, float *a5, double *a6, unsigned __int8 *a7, unsigned __int8 *a8, __int128 *a9, __int128 *a10)
{
  char v12;

  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D44F60;
  a1->__r_.__value_.__l.__size_ = 0;
  std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string &,float &,float &,float &,double,BOOL,BOOL,std::string &,std::string>((uint64_t)&v12, a1 + 1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return a1;
}

void sub_1AD9325A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::Token>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44F60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::Token>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44F60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::Token>::__on_zero_shared(uint64_t a1)
{
  quasar::Token::~Token((void **)(a1 + 24));
}

void std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string &,float &,float &,float &,double,BOOL,BOOL,std::string &,std::string>(uint64_t a1, std::string *a2, uint64_t a3, float *a4, float *a5, float *a6, double *a7, unsigned __int8 *a8, unsigned __int8 *a9, __int128 *a10, __int128 *a11)
{
  float v17;
  float v18;
  float v19;
  double v20;
  int v21;
  int v22;
  float v23;
  void *__p[2];
  char v25;
  __int128 *v26[3];
  std::string v27;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v27 = *(std::string *)a3;
  v17 = *a4;
  v18 = *a5;
  v19 = *a6;
  v20 = *a7;
  v21 = *a8;
  v22 = *a9;
  memset(v26, 0, sizeof(v26));
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v23 = v20;
  quasar::Token::Token(a2, (__int128 *)&v27, v17, v18, v19, v21 != 0, v22 != 0, a10, v23, a11, v26, 0, (__int128 *)__p, 0, 0);
  if (v25 < 0)
    operator delete(__p[0]);
  __p[0] = v26;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
}

void sub_1AD93273C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a20 < 0)
    operator delete(__p);
  __p = &a21;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::OnlineLatticeBiglmFasterDecoder,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xB58uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineLatticeBiglmFasterDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1AD9327C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::OnlineLatticeBiglmFasterDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLatticeBiglmFasterDecoder>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D44AC8;
  a1[1] = 0;
  quasar::OnlineLatticeBiglmFasterDecoder::OnlineLatticeBiglmFasterDecoder((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1AD932810(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineLatticeBiglmFasterDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44AC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineLatticeBiglmFasterDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44AC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineLatticeBiglmFasterDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 152))(a1 + 24);
}

uint64_t quasar::OnlineLatticeBiglmFasterDecoder::OnlineLatticeBiglmFasterDecoder(uint64_t a1, __int128 *a2)
{
  _QWORD *v3;
  uint64_t i;
  char *v5;
  unsigned __int8 v7[24];
  _QWORD v8[4];

  v8[3] = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)quasar::Decoder::Decoder(a1, a2);
  *v3 = &unk_1E5D3AC20;
  kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig::OnlineLatticeBiglmFasterDecoderConfig((kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig *)(v3 + 57));
  *(_QWORD *)(a1 + 832) = 0;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_DWORD *)(a1 + 928) = 1065353216;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_QWORD *)(a1 + 984) = 0;
  *(_DWORD *)(a1 + 992) = 1065353216;
  *(_QWORD *)(a1 + 1000) = 0;
  *(_QWORD *)(a1 + 1064) = 0;
  *(_QWORD *)(a1 + 1056) = 0;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_QWORD *)(a1 + 1048) = a1 + 1056;
  *(_QWORD *)(a1 + 1136) = 0;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  _ZNSt3__115allocate_sharedB8ne180100IN3fst11SymbolTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((_QWORD *)(a1 + 1144));
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  kaldi::SilencePhoneSet::SilencePhoneSet((kaldi::SilencePhoneSet *)(a1 + 1208));
  *(_QWORD *)(a1 + 1280) = 0;
  *(_BYTE *)(a1 + 1288) = 1;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1400) = 0u;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(_OWORD *)(a1 + 1432) = 0u;
  *(_OWORD *)(a1 + 1448) = 0u;
  *(_QWORD *)(a1 + 1472) = 0xCF000000CF000000;
  *(_BYTE *)(a1 + 1480) = 0;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_OWORD *)(a1 + 1545) = 0u;
  *(_DWORD *)(a1 + 1564) = 5000;
  *(_BYTE *)(a1 + 1568) = 0;
  *(_OWORD *)(a1 + 1572) = 0u;
  *(_OWORD *)(a1 + 1588) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig::OnlineLatticeBiglmFasterDecoderConfig((kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig *)(a1 + 1616));
  *(_QWORD *)(a1 + 1776) = 0xCF000000CF000000;
  *(_BYTE *)(a1 + 1784) = 0;
  *(_OWORD *)(a1 + 1792) = 0u;
  *(_OWORD *)(a1 + 1808) = 0u;
  *(_OWORD *)(a1 + 1824) = 0u;
  *(_OWORD *)(a1 + 1840) = 0u;
  *(_OWORD *)(a1 + 1849) = 0u;
  *(_DWORD *)(a1 + 1868) = 5000;
  *(_BYTE *)(a1 + 1872) = 0;
  *(_OWORD *)(a1 + 1876) = 0u;
  *(_OWORD *)(a1 + 1892) = 0u;
  *(_OWORD *)(a1 + 1905) = 0u;
  *(_BYTE *)(a1 + 1921) = 1;
  *(_QWORD *)(a1 + 1924) = 60000;
  *(_DWORD *)(a1 + 1932) = 500;
  *(_DWORD *)(a1 + 1940) = 1062836634;
  *(_QWORD *)(a1 + 1944) = 0x700000007;
  *(_QWORD *)(a1 + 1952) = 0x143F666666;
  *(_QWORD *)(a1 + 1960) = 0xA00000014;
  *(_WORD *)(a1 + 1968) = 1;
  *(_QWORD *)(a1 + 1976) = 0x3FECCCCCCCCCCCCDLL;
  *(_QWORD *)(a1 + 1984) = 0x3F947AE147AE147BLL;
  *(_QWORD *)(a1 + 1992) = 0;
  *(_OWORD *)(a1 + 2008) = 0u;
  *(_DWORD *)(a1 + 2000) = 0;
  *(_OWORD *)(a1 + 2024) = 0u;
  *(_OWORD *)(a1 + 2040) = 0u;
  *(_QWORD *)(a1 + 2056) = 0x100000002;
  *(_DWORD *)(a1 + 2064) = 1;
  *(_QWORD *)(a1 + 2096) = 0;
  *(_OWORD *)(a1 + 2080) = 0u;
  *(_QWORD *)(a1 + 2068) = 0;
  *(_BYTE *)(a1 + 2076) = 0;
  std::string::basic_string[abi:ne180100]<0>(v7, "<?>");
  std::string::basic_string[abi:ne180100]<0>(v8, "<eps>");
  std::unordered_set<std::string>::unordered_set(a1 + 2104, v7, 2);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v8[i + 2]) < 0)
      operator delete(*(void **)&v7[i * 8 + 24]);
  }
  *(_WORD *)(a1 + 2148) = 0;
  *(_BYTE *)(a1 + 2150) = 0;
  *(_DWORD *)(a1 + 2152) = 1;
  *(_BYTE *)(a1 + 2156) = 1;
  *(_QWORD *)(a1 + 2164) = 0x100000000;
  *(_BYTE *)(a1 + 2161) = 0;
  *(_DWORD *)(a1 + 2157) = 0;
  *(_BYTE *)(a1 + 2172) = 1;
  v5 = (char *)operator new(0xA8uLL);
  *(_OWORD *)(v5 + 8) = 0u;
  *(_QWORD *)v5 = &unk_1E5D43328;
  *((_QWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 152) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 120) = 0u;
  *((_DWORD *)v5 + 34) = 0;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_QWORD *)(a1 + 2176) = v5 + 24;
  *(_QWORD *)(a1 + 2184) = v5;
  *(_OWORD *)(a1 + 2192) = 0u;
  *(_QWORD *)(a1 + 2208) = 0;
  *(_QWORD *)(a1 + 2600) = 0;
  *(_OWORD *)(a1 + 2584) = 0u;
  *(_DWORD *)(a1 + 2688) = 0;
  *(_BYTE *)(a1 + 2692) = 0;
  *(_OWORD *)(a1 + 2696) = 0u;
  *(_OWORD *)(a1 + 2712) = 0u;
  *(_OWORD *)(a1 + 2728) = 0u;
  *(_QWORD *)(a1 + 2744) = 0;
  *(_OWORD *)(a1 + 2224) = 0u;
  *(_OWORD *)(a1 + 2240) = 0u;
  *(_OWORD *)(a1 + 2256) = 0u;
  *(_OWORD *)(a1 + 2272) = 0u;
  *(_QWORD *)(a1 + 2288) = 0;
  *(_OWORD *)(a1 + 2312) = 0u;
  *(_OWORD *)(a1 + 2328) = 0u;
  *(_OWORD *)(a1 + 2344) = 0u;
  *(_OWORD *)(a1 + 2360) = 0u;
  *(_OWORD *)(a1 + 2376) = 0u;
  *(_OWORD *)(a1 + 2392) = 0u;
  *(_OWORD *)(a1 + 2408) = 0u;
  *(_OWORD *)(a1 + 2424) = 0u;
  *(_OWORD *)(a1 + 2440) = 0u;
  *(_QWORD *)(a1 + 2456) = 0;
  *(_BYTE *)(a1 + 2496) = 0;
  *(_QWORD *)(a1 + 2488) = 0;
  *(_OWORD *)(a1 + 2472) = 0u;
  *(_OWORD *)(a1 + 2520) = 0u;
  *(_OWORD *)(a1 + 2536) = 0u;
  *(_OWORD *)(a1 + 2552) = 0u;
  *(_OWORD *)(a1 + 2648) = 0u;
  *(_OWORD *)(a1 + 2664) = 0u;
  *(_OWORD *)(a1 + 2632) = 0u;
  *(_WORD *)(a1 + 2752) = 1;
  *(_BYTE *)(a1 + 2754) = 0;
  *(_QWORD *)(a1 + 2792) = 0;
  *(_OWORD *)(a1 + 2760) = 0u;
  *(_OWORD *)(a1 + 2776) = 0u;
  *(_WORD *)(a1 + 2800) = 1;
  *(_BYTE *)(a1 + 2802) = 0;
  *(_QWORD *)(a1 + 2808) = 850045863;
  *(_OWORD *)(a1 + 2816) = 0u;
  *(_OWORD *)(a1 + 2832) = 0u;
  *(_OWORD *)(a1 + 2848) = 0u;
  *(_OWORD *)(a1 + 2864) = 0u;
  *(_DWORD *)(a1 + 564) = 1;
  return a1;
}

void sub_1AD932CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, kaldi::SilencePhoneSet *a10, uint64_t a11, uint64_t a12, kaldi::quasar::DynamicClassTagDict *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  void **v20;
  uint64_t v21;
  void **v22;
  void **v23;
  void **v24;
  _QWORD *v25;
  void **v26;
  uint64_t v27;
  void **v29;
  void *v30;
  void *v31;

  v27 = v21;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v27);
  if (*(char *)(v19 + 2103) < 0)
    operator delete(*(void **)(v19 + 2080));
  std::deque<int>::~deque[abi:ne180100](v25);
  quasar::UttDetectConfig::~UttDetectConfig(v24);
  quasar::EndPointDecoderConfig::~EndPointDecoderConfig(v23);
  std::unique_ptr<std::map<wchar_t,wchar_t>>::reset[abi:ne180100]((uint64_t *)(v19 + 1456), 0);
  if (*(char *)(v19 + 1455) < 0)
    operator delete(*(void **)(v19 + 1432));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v19 + 1416);
  if (*(char *)(v19 + 1415) < 0)
    operator delete(*(void **)(v19 + 1392));
  if (*(char *)(v19 + 1391) < 0)
    operator delete(*v22);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v19 + 1344);
  if (*(char *)(v19 + 1343) < 0)
    operator delete(*(void **)(v19 + 1320));
  if (*(char *)(v19 + 1319) < 0)
    operator delete(*(void **)(v19 + 1296));
  kaldi::SilencePhoneSet::~SilencePhoneSet(a10);
  if (*(char *)(v19 + 1207) < 0)
    operator delete(*(void **)(v19 + 1184));
  if (*(char *)(v19 + 1183) < 0)
    operator delete(*v20);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a11);
  if (*(char *)(v19 + 1143) < 0)
    operator delete(*(void **)(v19 + 1120));
  v29 = (void **)(v19 + 1072);
  v30 = *(void **)(v19 + 1096);
  if (v30)
  {
    *(_QWORD *)(v19 + 1104) = v30;
    operator delete(v30);
  }
  v31 = *v29;
  if (*v29)
  {
    *(_QWORD *)(v19 + 1080) = v31;
    operator delete(v31);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(v19 + 1048, *(_QWORD **)(v19 + 1056));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v19 + 1032);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a12);
  kaldi::quasar::DynamicClassTagDict::~DynamicClassTagDict(a13);
  if (*(char *)(v19 + 895) < 0)
    operator delete(*(void **)(v19 + 872));
  if (*(char *)(v19 + 871) < 0)
    operator delete(*(void **)(v19 + 848));
  if (*(char *)(v19 + 839) < 0)
    operator delete(*(void **)(v19 + 816));
  if (*(char *)(v19 + 807) < 0)
    operator delete(*(void **)(v19 + 784));
  if (*(char *)(v19 + 783) < 0)
    operator delete(*(void **)(v19 + 760));
  if (*(char *)(v19 + 759) < 0)
    operator delete(*(void **)(v19 + 736));
  if (*(char *)(v19 + 735) < 0)
    operator delete(*(void **)(v19 + 712));
  if (*(char *)(v19 + 711) < 0)
    operator delete(*(void **)(v19 + 688));
  if (*(char *)(v19 + 687) < 0)
    operator delete(*(void **)(v19 + 664));
  if (*(char *)(v19 + 663) < 0)
    operator delete(*(void **)(v19 + 640));
  if (*(char *)(v19 + 639) < 0)
    operator delete(*v26);
  quasar::Decoder::~Decoder((void **)v19);
  _Unwind_Resume(a1);
}

void quasar::UttDetectConfig::~UttDetectConfig(void **this)
{
  void **v2;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 36));
  v2 = this + 33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 247) < 0)
    operator delete(this[28]);
  if (*((char *)this + 223) < 0)
    operator delete(this[25]);
  if (*((char *)this + 199) < 0)
    operator delete(this[22]);
}

void quasar::EndPointDecoderConfig::~EndPointDecoderConfig(void **this)
{
  void **v2;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 16));
  v2 = this + 13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

void kaldi::quasar::DynamicClassTagDict::~DynamicClassTagDict(kaldi::quasar::DynamicClassTagDict *this)
{
  uint64_t v2;
  void *v3;

  v2 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v2)
    MEMORY[0x1AF44D160](v2, 0x1000C8052888210);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 64);
  v3 = (void *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 6) = v3;
    operator delete(v3);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::OnlineLatticeBiglmLmeFasterDecoder,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xD20uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineLatticeBiglmLmeFasterDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1AD9330CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::OnlineLatticeBiglmLmeFasterDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D44CC0;
  a1[1] = 0;
  quasar::OnlineLatticeBiglmLmeFasterDecoder::OnlineLatticeBiglmLmeFasterDecoder((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1AD933118(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineLatticeBiglmLmeFasterDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44CC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineLatticeBiglmLmeFasterDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44CC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineLatticeBiglmLmeFasterDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 152))(a1 + 24);
}

uint64_t quasar::OnlineLatticeBiglmLmeFasterDecoder::OnlineLatticeBiglmLmeFasterDecoder(uint64_t a1, __int128 *a2)
{
  uint64_t v3;

  v3 = quasar::OnlineLatticeBiglmFasterDecoder::OnlineLatticeBiglmFasterDecoder(a1, a2);
  *(_QWORD *)v3 = &unk_1E5D3B040;
  *(_DWORD *)(v3 + 2880) = 0x40000000;
  *(_WORD *)(v3 + 2884) = 1;
  *(_BYTE *)(v3 + 2886) = 0;
  *(_QWORD *)(v3 + 2888) = 500000000;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v3 + 2896), "");
  _ZNSt3__115allocate_sharedB8ne180100IN6quasar34OnlineLatticeBiglmLmeFasterDecoder23LmeCreationDependenciesENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((_QWORD *)(a1 + 2920));
  *(_OWORD *)(a1 + 2936) = 0u;
  *(_OWORD *)(a1 + 2952) = 0u;
  *(_DWORD *)(a1 + 2968) = 1065353216;
  *(_OWORD *)(a1 + 2976) = 0u;
  *(_OWORD *)(a1 + 2992) = 0u;
  *(_DWORD *)(a1 + 3008) = 1065353216;
  *(_OWORD *)(a1 + 3024) = 0u;
  *(_QWORD *)(a1 + 3016) = a1 + 3024;
  *(_OWORD *)(a1 + 3040) = 0u;
  *(_OWORD *)(a1 + 3056) = 0u;
  *(_OWORD *)(a1 + 3072) = 0u;
  *(_OWORD *)(a1 + 3088) = 0u;
  *(_OWORD *)(a1 + 3104) = 0u;
  *(_OWORD *)(a1 + 3120) = 0u;
  *(_OWORD *)(a1 + 3136) = 0u;
  *(_OWORD *)(a1 + 3152) = 0u;
  *(_OWORD *)(a1 + 3168) = 0u;
  *(_OWORD *)(a1 + 3184) = 0u;
  *(_OWORD *)(a1 + 3200) = 0u;
  *(_OWORD *)(a1 + 3216) = 0u;
  *(_QWORD *)(a1 + 3232) = 0;
  *(_DWORD *)(a1 + 3240) = 1065353216;
  *(_OWORD *)(a1 + 3256) = 0u;
  *(_QWORD *)(a1 + 3248) = a1 + 3256;
  *(_OWORD *)(a1 + 3280) = 0u;
  *(_QWORD *)(a1 + 3272) = a1 + 3280;
  *(_OWORD *)(a1 + 3296) = 0u;
  return a1;
}

void sub_1AD933288(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;

  if (v1[2919] < 0)
    operator delete(*v2);
  quasar::OnlineLatticeBiglmFasterDecoder::~OnlineLatticeBiglmFasterDecoder((quasar::OnlineLatticeBiglmFasterDecoder *)v1);
  _Unwind_Resume(a1);
}

void quasar::OnlineLatticeBiglmFasterDecoder::~OnlineLatticeBiglmFasterDecoder(quasar::OnlineLatticeBiglmFasterDecoder *this)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void **v18;

  *(_QWORD *)this = &unk_1E5D3AC20;
  std::mutex::~mutex((std::mutex *)((char *)this + 2808));
  v2 = (_QWORD *)*((_QWORD *)this + 349);
  *((_QWORD *)this + 349) = 0;
  if (v2)
    std::default_delete<quasar::NFHatTransformer>::operator()[abi:ne180100]((uint64_t)this + 2792, v2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 2776);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 2760);
  v3 = (void *)*((_QWORD *)this + 340);
  if (v3)
  {
    *((_QWORD *)this + 341) = v3;
    operator delete(v3);
  }
  v18 = (void **)((char *)this + 2696);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v18);
  v4 = (void *)*((_QWORD *)this + 332);
  if (v4)
  {
    *((_QWORD *)this + 333) = v4;
    operator delete(v4);
  }
  v18 = (void **)((char *)this + 2632);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v18);
  v5 = (void *)*((_QWORD *)this + 323);
  if (v5)
  {
    *((_QWORD *)this + 324) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 318);
  if (v6)
  {
    *((_QWORD *)this + 319) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 315);
  if (v7)
  {
    *((_QWORD *)this + 316) = v7;
    operator delete(v7);
  }
  v18 = (void **)((char *)this + 2472);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v18);
  v8 = *((_QWORD *)this + 307);
  *((_QWORD *)this + 307) = 0;
  if (v8)
    std::default_delete<quasar::StreamingConfidenceRunner>::operator()[abi:ne180100]((uint64_t)this + 2456, v8);
  v9 = *((_QWORD *)this + 306);
  *((_QWORD *)this + 306) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  v10 = *((_QWORD *)this + 305);
  *((_QWORD *)this + 305) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 2424);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 2408);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 2392);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 2376);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 2360);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 2344);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 2328);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 2312);
  v18 = (void **)((char *)this + 2272);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v18);
  v11 = (void *)*((_QWORD *)this + 281);
  if (v11)
  {
    *((_QWORD *)this + 282) = v11;
    operator delete(v11);
  }
  v18 = (void **)((char *)this + 2224);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v18);
  if (*((char *)this + 2215) < 0)
    operator delete(*((void **)this + 274));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 2176);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 2104);
  if (*((char *)this + 2103) < 0)
    operator delete(*((void **)this + 260));
  std::deque<int>::~deque[abi:ne180100]((_QWORD *)this + 251);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1904);
  v18 = (void **)((char *)this + 1880);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v18);
  if (*((char *)this + 1863) < 0)
    operator delete(*((void **)this + 230));
  if (*((char *)this + 1839) < 0)
    operator delete(*((void **)this + 227));
  if (*((char *)this + 1815) < 0)
    operator delete(*((void **)this + 224));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1600);
  v18 = (void **)((char *)this + 1576);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v18);
  if (*((char *)this + 1559) < 0)
    operator delete(*((void **)this + 192));
  if (*((char *)this + 1535) < 0)
    operator delete(*((void **)this + 189));
  if (*((char *)this + 1511) < 0)
    operator delete(*((void **)this + 186));
  std::unique_ptr<std::map<wchar_t,wchar_t>>::reset[abi:ne180100]((uint64_t *)this + 182, 0);
  if (*((char *)this + 1455) < 0)
    operator delete(*((void **)this + 179));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1416);
  if (*((char *)this + 1415) < 0)
    operator delete(*((void **)this + 174));
  if (*((char *)this + 1391) < 0)
    operator delete(*((void **)this + 171));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1344);
  if (*((char *)this + 1343) < 0)
    operator delete(*((void **)this + 165));
  if (*((char *)this + 1319) < 0)
    operator delete(*((void **)this + 162));
  v12 = (void *)*((_QWORD *)this + 157);
  if (v12)
  {
    *((_QWORD *)this + 158) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 154);
  if (v13)
    operator delete(v13);
  if (*((char *)this + 1207) < 0)
    operator delete(*((void **)this + 148));
  if (*((char *)this + 1183) < 0)
    operator delete(*((void **)this + 145));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1144);
  if (*((char *)this + 1143) < 0)
    operator delete(*((void **)this + 140));
  v14 = (void *)*((_QWORD *)this + 137);
  if (v14)
  {
    *((_QWORD *)this + 138) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 134);
  if (v15)
  {
    *((_QWORD *)this + 135) = v15;
    operator delete(v15);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 1048, *((_QWORD **)this + 132));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1032);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1016);
  v16 = *((_QWORD *)this + 125);
  *((_QWORD *)this + 125) = 0;
  if (v16)
    MEMORY[0x1AF44D160](v16, 0x1000C8052888210);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 960);
  v17 = (void *)*((_QWORD *)this + 117);
  if (v17)
  {
    *((_QWORD *)this + 118) = v17;
    operator delete(v17);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 896);
  if (*((char *)this + 895) < 0)
    operator delete(*((void **)this + 109));
  if (*((char *)this + 871) < 0)
    operator delete(*((void **)this + 106));
  if (*((char *)this + 839) < 0)
    operator delete(*((void **)this + 102));
  if (*((char *)this + 807) < 0)
    operator delete(*((void **)this + 98));
  if (*((char *)this + 783) < 0)
    operator delete(*((void **)this + 95));
  if (*((char *)this + 759) < 0)
    operator delete(*((void **)this + 92));
  if (*((char *)this + 735) < 0)
    operator delete(*((void **)this + 89));
  if (*((char *)this + 711) < 0)
    operator delete(*((void **)this + 86));
  if (*((char *)this + 687) < 0)
    operator delete(*((void **)this + 83));
  if (*((char *)this + 663) < 0)
    operator delete(*((void **)this + 80));
  if (*((char *)this + 639) < 0)
    operator delete(*((void **)this + 77));
  quasar::Decoder::~Decoder((void **)this);
}

{
  quasar::OnlineLatticeBiglmFasterDecoder::~OnlineLatticeBiglmFasterDecoder(this);
  JUMPOUT(0x1AF44D190);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN6quasar34OnlineLatticeBiglmLmeFasterDecoder23LmeCreationDependenciesENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x80uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN6quasar34OnlineLatticeBiglmLmeFasterDecoder23LmeCreationDependenciesENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD933740(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN6quasar34OnlineLatticeBiglmLmeFasterDecoder23LmeCreationDependenciesENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D44C88;
  a1[1] = 0;
  quasar::OnlineLatticeBiglmLmeFasterDecoder::LmeCreationDependencies::LmeCreationDependencies((quasar::OnlineLatticeBiglmLmeFasterDecoder::LmeCreationDependencies *)(a1 + 3));
  return a1;
}

void sub_1AD93378C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineLatticeBiglmLmeFasterDecoder::LmeCreationDependencies>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44C88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineLatticeBiglmLmeFasterDecoder::LmeCreationDependencies>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44C88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::OnlineLatticeBiglmLmeFasterDecoder::LmeCreationDependencies>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::LmeCreationDependencies>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

quasar::OnlineLatticeBiglmLmeFasterDecoder::LmeCreationDependencies *quasar::OnlineLatticeBiglmLmeFasterDecoder::LmeCreationDependencies::LmeCreationDependencies(quasar::OnlineLatticeBiglmLmeFasterDecoder::LmeCreationDependencies *this)
{
  _QWORD *v2;

  *((_QWORD *)this + 10) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  v2 = operator new(0x30uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &unk_1E5D42D40;
  v2[4] = 0;
  v2[5] = 0;
  v2[3] = 0;
  *((_QWORD *)this + 11) = v2 + 3;
  *((_QWORD *)this + 12) = v2;
  return this;
}

void sub_1AD933880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void *v12;

  a10 = (void **)(v10 + 64);
  std::vector<quasar::LmeInfo>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v10 + 48);
  v12 = *(void **)(v10 + 24);
  if (v12)
  {
    *(_QWORD *)(v10 + 32) = v12;
    operator delete(v12);
  }
  a10 = (void **)v10;
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::LmeCreationDependencies>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void **v4;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2 + 88);
  v4 = (void **)(a2 + 64);
  std::vector<quasar::LmeInfo>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2 + 48);
  v3 = *(void **)(a2 + 24);
  if (v3)
  {
    *(_QWORD *)(a2 + 32) = v3;
    operator delete(v3);
  }
  v4 = (void **)a2;
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void std::default_delete<quasar::NFHatTransformer>::operator()[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;

  if (a2)
  {
    v3 = (void *)a2[4];
    if (v3)
    {
      a2[5] = v3;
      operator delete(v3);
    }
    v4 = (void *)a2[1];
    if (v4)
    {
      a2[2] = v4;
      operator delete(v4);
    }
    JUMPOUT(0x1AF44D190);
  }
}

void std::default_delete<quasar::StreamingConfidenceRunner>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 47) < 0)
      operator delete(*(void **)(a2 + 24));
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2);
    JUMPOUT(0x1AF44D190);
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::OnlineLatticeRescalingDecoder,std::allocator<quasar::OnlineLatticeRescalingDecoder>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x1F0uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineLatticeRescalingDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLatticeRescalingDecoder>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1AD933A0C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::OnlineLatticeRescalingDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLatticeRescalingDecoder>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D44860;
  a1[1] = 0;
  quasar::OnlineLatticeRescalingDecoder::OnlineLatticeRescalingDecoder((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1AD933A58(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineLatticeRescalingDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44860;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineLatticeRescalingDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44860;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineLatticeRescalingDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 152))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::OnlineLatticeWordAlignmentDecoder,std::allocator<quasar::OnlineLatticeWordAlignmentDecoder>,std::string const&,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x240uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineLatticeWordAlignmentDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLatticeWordAlignmentDecoder>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD933B08(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::OnlineLatticeWordAlignmentDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLatticeWordAlignmentDecoder>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D44C18;
  a1[1] = 0;
  quasar::OnlineLatticeWordAlignmentDecoder::OnlineLatticeWordAlignmentDecoder(a1 + 3);
  return a1;
}

void sub_1AD933B54(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineLatticeWordAlignmentDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44C18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineLatticeWordAlignmentDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44C18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineLatticeWordAlignmentDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 152))(a1 + 24);
}

uint64_t std::allocate_shared[abi:ne180100]<quasar::OnlineLmRescoringDecoder,std::allocator<quasar::OnlineLmRescoringDecoder>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x2A0uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineLmRescoringDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLmRescoringDecoder>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_1AD933C04(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineLmRescoringDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLmRescoringDecoder>,0>(uint64_t a1, __int128 *a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E5D441D0;
  *(_QWORD *)(a1 + 8) = 0;
  quasar::Decoder::Decoder(a1 + 24, a2);
  *(_QWORD *)(a1 + 24) = &off_1E5D39640;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_QWORD *)(a1 + 656) = 0;
  return a1;
}

void sub_1AD933C80(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineLmRescoringDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D441D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineLmRescoringDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D441D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineLmRescoringDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 152))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::OnlineLatticeRealignmentDecoder,std::allocator<quasar::OnlineLatticeRealignmentDecoder>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x300uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineLatticeRealignmentDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLatticeRealignmentDecoder>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1AD933D30(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::OnlineLatticeRealignmentDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLatticeRealignmentDecoder>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D44B00;
  a1[1] = 0;
  quasar::OnlineLatticeRealignmentDecoder::OnlineLatticeRealignmentDecoder((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1AD933D7C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineLatticeRealignmentDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44B00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineLatticeRealignmentDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44B00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineLatticeRealignmentDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 152))(a1 + 24);
}

uint64_t quasar::OnlineLatticeRealignmentDecoder::OnlineLatticeRealignmentDecoder(uint64_t a1, __int128 *a2)
{
  char *v3;

  *(_QWORD *)quasar::Decoder::Decoder(a1, a2) = &off_1E5D3AD20;
  v3 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v3 + 2) = 0;
  *(_QWORD *)v3 = &unk_1E5D43328;
  *((_QWORD *)v3 + 1) = 0;
  *((_QWORD *)v3 + 19) = 0;
  *((_QWORD *)v3 + 20) = 0;
  *((_QWORD *)v3 + 18) = 0;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 24) = 0u;
  *((_DWORD *)v3 + 34) = 0;
  *(_QWORD *)(a1 + 448) = v3 + 24;
  *(_QWORD *)(a1 + 456) = v3;
  *(_QWORD *)(a1 + 464) = 0;
  *(_BYTE *)(a1 + 472) = 1;
  *(_QWORD *)(a1 + 528) = 0;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  return a1;
}

void sub_1AD933EA0(_Unwind_Exception *a1)
{
  void **v1;

  quasar::Decoder::~Decoder(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::ErrorBlamingDecoder,std::allocator<quasar::ErrorBlamingDecoder>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x4C8uLL);
  result = std::__shared_ptr_emplace<quasar::ErrorBlamingDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::ErrorBlamingDecoder>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1AD933EF8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::ErrorBlamingDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::ErrorBlamingDecoder>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D43590;
  a1[1] = 0;
  quasar::ErrorBlamingDecoder::ErrorBlamingDecoder((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1AD933F44(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::ErrorBlamingDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43590;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::ErrorBlamingDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43590;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::ErrorBlamingDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 152))(a1 + 24);
}

uint64_t quasar::ErrorBlamingDecoder::ErrorBlamingDecoder(uint64_t a1, __int128 *a2)
{
  _QWORD *v3;
  char *v4;

  v3 = (_QWORD *)quasar::Decoder::Decoder(a1, a2);
  *v3 = &off_1E5D36FD0;
  std::string::basic_string[abi:ne180100]<0>(v3 + 56, "error-blaming-report");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 472), "failure-reason");
  *(_QWORD *)(a1 + 880) = 0;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  v4 = (char *)operator new(0xA8uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_QWORD *)v4 = &unk_1E5D43328;
  *((_QWORD *)v4 + 18) = 0;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *((_DWORD *)v4 + 34) = 0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_QWORD *)(a1 + 888) = v4 + 24;
  *(_QWORD *)(a1 + 896) = v4;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_DWORD *)(a1 + 1080) = 1065353216;
  *(_QWORD *)(a1 + 1104) = 0;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_QWORD *)(a1 + 1140) = 0x3F8000003F800000;
  *(_WORD *)(a1 + 1148) = 256;
  *(_QWORD *)(a1 + 1152) = 0;
  *(_BYTE *)(a1 + 1160) = 1;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  return a1;
}

void sub_1AD934104(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1 + 872);
  if (*(char *)(v1 + 871) < 0)
    operator delete(*(void **)(v1 + 848));
  if (*(char *)(v1 + 847) < 0)
    operator delete(*(void **)(v1 + 824));
  if (*(char *)(v1 + 823) < 0)
    operator delete(*(void **)(v1 + 800));
  if (*(char *)(v1 + 799) < 0)
    operator delete(*(void **)(v1 + 776));
  if (*(char *)(v1 + 775) < 0)
    operator delete(*(void **)(v1 + 752));
  if (*(char *)(v1 + 751) < 0)
    operator delete(*(void **)(v1 + 728));
  if (*(char *)(v1 + 727) < 0)
    operator delete(*(void **)(v1 + 704));
  if (*(char *)(v1 + 703) < 0)
    operator delete(*(void **)(v1 + 680));
  if (*(char *)(v1 + 679) < 0)
    operator delete(*(void **)(v1 + 656));
  if (*(char *)(v1 + 655) < 0)
    operator delete(*(void **)(v1 + 632));
  if (*(char *)(v1 + 631) < 0)
    operator delete(*(void **)(v1 + 608));
  if (*(char *)(v1 + 607) < 0)
    operator delete(*(void **)(v1 + 584));
  if (*(char *)(v1 + 583) < 0)
    operator delete(*(void **)(v1 + 560));
  if (*(char *)(v1 + 559) < 0)
    operator delete(*(void **)(v1 + 536));
  if (*(char *)(v1 + 535) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 495) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 471) < 0)
    operator delete(*v2);
  quasar::Decoder::~Decoder((void **)v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::OnlineLatticeConfidenceDecoder,std::allocator<quasar::OnlineLatticeConfidenceDecoder>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x2F0uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineLatticeConfidenceDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLatticeConfidenceDecoder>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1AD934284(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::OnlineLatticeConfidenceDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLatticeConfidenceDecoder>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D44978;
  a1[1] = 0;
  quasar::OnlineLatticeConfidenceDecoder::OnlineLatticeConfidenceDecoder((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1AD9342D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineLatticeConfidenceDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44978;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineLatticeConfidenceDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44978;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineLatticeConfidenceDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 152))(a1 + 24);
}

uint64_t quasar::OnlineLatticeConfidenceDecoder::OnlineLatticeConfidenceDecoder(uint64_t a1, __int128 *a2)
{
  char *v3;

  *(_QWORD *)quasar::Decoder::Decoder(a1, a2) = &off_1E5D3A970;
  v3 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v3 + 2) = 0;
  *(_QWORD *)v3 = &unk_1E5D43328;
  *((_QWORD *)v3 + 1) = 0;
  *((_QWORD *)v3 + 19) = 0;
  *((_QWORD *)v3 + 20) = 0;
  *((_QWORD *)v3 + 18) = 0;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 24) = 0u;
  *((_DWORD *)v3 + 34) = 0;
  *(_QWORD *)(a1 + 448) = v3 + 24;
  *(_QWORD *)(a1 + 456) = v3;
  *(_QWORD *)(a1 + 464) = 0;
  *(_BYTE *)(a1 + 472) = 1;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_OWORD *)(a1 + 496) = xmmword_1AE14B6D0;
  *(_QWORD *)(a1 + 512) = 0x3F800000BF800000;
  *(_DWORD *)(a1 + 520) = -1;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 528), "NULL");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 552), "NULL");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 576), "NULL");
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_WORD *)(a1 + 648) = 1;
  *(_DWORD *)(a1 + 650) = 16843009;
  *(_DWORD *)(a1 + 653) = 16843009;
  *(_BYTE *)(a1 + 657) = 0;
  *(_DWORD *)(a1 + 660) = 1092616192;
  *(_QWORD *)(a1 + 712) = 0x4100000000000000;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_QWORD *)(a1 + 720) = 0xA0000000ALL;
  return a1;
}

void sub_1AD934480(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 575) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 551) < 0)
    operator delete(*v2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1 + 480);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1 + 448);
  quasar::Decoder::~Decoder((void **)v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::LatticeFasterDecoder,std::allocator<quasar::LatticeFasterDecoder>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x2A0uLL);
  result = std::__shared_ptr_emplace<quasar::LatticeFasterDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::LatticeFasterDecoder>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1AD934524(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::LatticeFasterDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::LatticeFasterDecoder>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D43788;
  a1[1] = 0;
  quasar::LatticeFasterDecoder::LatticeFasterDecoder((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1AD934570(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::LatticeFasterDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43788;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::LatticeFasterDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43788;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::LatticeFasterDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 152))(a1 + 24);
}

uint64_t quasar::LatticeFasterDecoder::LatticeFasterDecoder(uint64_t a1, __int128 *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)quasar::Decoder::Decoder(a1, a2);
  *v3 = &off_1E5D37998;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_QWORD *)(a1 + 480) = 0;
  quasar::OnlinePhoneDecoderConfig::OnlinePhoneDecoderConfig((quasar::OnlinePhoneDecoderConfig *)(v3 + 61));
  *(_QWORD *)(a1 + 600) = 0;
  *(_QWORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 584) = a1 + 592;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_QWORD *)(a1 + 640) = 0;
  return a1;
}

void sub_1AD93464C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1 + 472);
  if (*(char *)(v1 + 471) < 0)
    operator delete(*v2);
  quasar::Decoder::~Decoder((void **)v1);
  _Unwind_Resume(a1);
}

double quasar::OnlinePhoneDecoderConfig::OnlinePhoneDecoderConfig(quasar::OnlinePhoneDecoderConfig *this)
{
  double result;

  *(_DWORD *)this = 1098907648;
  *(_QWORD *)((char *)this + 4) = 0xC87FFFFFFFLL;
  *(_QWORD *)((char *)this + 12) = 0x4120000000000000;
  *((_DWORD *)this + 5) = 25;
  *((_BYTE *)this + 24) = 1;
  *(_OWORD *)((char *)this + 28) = xmmword_1AE140EC0;
  *(_QWORD *)((char *)this + 44) = 0x2FAF0803A800000;
  *((_WORD *)this + 26) = 257;
  *((_BYTE *)this + 54) = 0;
  *(_OWORD *)((char *)this + 56) = xmmword_1AE14B6E0;
  *((_DWORD *)this + 18) = 3;
  *(_QWORD *)((char *)this + 76) = 0x3D4CCCCD3C23D70ALL;
  *(_QWORD *)&result = 50000000;
  *(_QWORD *)((char *)this + 84) = 50000000;
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::OnlineKeywordSpottingDecoder,std::allocator<quasar::OnlineKeywordSpottingDecoder>,std::string const&,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x2E8uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineKeywordSpottingDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineKeywordSpottingDecoder>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD934740(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::OnlineKeywordSpottingDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineKeywordSpottingDecoder>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D44780;
  a1[1] = 0;
  quasar::OnlineKeywordSpottingDecoder::OnlineKeywordSpottingDecoder(a1 + 3);
  return a1;
}

void sub_1AD93478C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineKeywordSpottingDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44780;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineKeywordSpottingDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44780;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineKeywordSpottingDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 152))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::OnlineSeevaDecoder,std::allocator<quasar::OnlineSeevaDecoder>,std::string const&,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x338uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineSeevaDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineSeevaDecoder>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD93483C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::OnlineSeevaDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineSeevaDecoder>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D432B8;
  a1[1] = 0;
  quasar::OnlineSeevaDecoder::OnlineSeevaDecoder(a1 + 3);
  return a1;
}

void sub_1AD934888(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineSeevaDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D432B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineSeevaDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D432B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineSeevaDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 152))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::OnlineSeevaStepDecoder,std::allocator<quasar::OnlineSeevaStepDecoder>,std::string const&,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x428uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineSeevaStepDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineSeevaStepDecoder>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD934938(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::OnlineSeevaStepDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineSeevaStepDecoder>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D43CC8;
  a1[1] = 0;
  quasar::OnlineSeevaStepDecoder::OnlineSeevaStepDecoder(a1 + 3);
  return a1;
}

void sub_1AD934984(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineSeevaStepDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43CC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineSeevaStepDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43CC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineSeevaStepDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 152))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::OnlineSeevaStepBigLmDecoder,std::allocator<quasar::OnlineSeevaStepBigLmDecoder>,std::string const&,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x768uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineSeevaStepBigLmDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineSeevaStepBigLmDecoder>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD934A34(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::OnlineSeevaStepBigLmDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineSeevaStepBigLmDecoder>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D446A0;
  a1[1] = 0;
  quasar::OnlineSeevaStepBigLmDecoder::OnlineSeevaStepBigLmDecoder(a1 + 3);
  return a1;
}

void sub_1AD934A80(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineSeevaStepBigLmDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D446A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineSeevaStepBigLmDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D446A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineSeevaStepBigLmDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 152))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::SeevaGreedyDecoder,std::allocator<quasar::SeevaGreedyDecoder>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x240uLL);
  result = std::__shared_ptr_emplace<quasar::SeevaGreedyDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::SeevaGreedyDecoder>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1AD934B30(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::SeevaGreedyDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::SeevaGreedyDecoder>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D433D0;
  a1[1] = 0;
  quasar::SeevaGreedyDecoder::SeevaGreedyDecoder((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1AD934B7C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::SeevaGreedyDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D433D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::SeevaGreedyDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D433D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::SeevaGreedyDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 152))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::SeevaBatchDecoder,std::allocator<quasar::SeevaBatchDecoder>,std::string const&,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x408uLL);
  result = std::__shared_ptr_emplace<quasar::SeevaBatchDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::SeevaBatchDecoder>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD934C2C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::SeevaBatchDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::SeevaBatchDecoder>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D43168;
  a1[1] = 0;
  quasar::SeevaBatchDecoder::SeevaBatchDecoder(a1 + 3);
  return a1;
}

void sub_1AD934C78(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::SeevaBatchDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43168;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::SeevaBatchDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43168;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::SeevaBatchDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 152))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::OnlineLASBeamSearchDecoder,std::allocator<quasar::OnlineLASBeamSearchDecoder>,std::string const&,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x2A8uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineLASBeamSearchDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLASBeamSearchDecoder>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD934D28(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::OnlineLASBeamSearchDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLASBeamSearchDecoder>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D445F8;
  a1[1] = 0;
  quasar::OnlineLASBeamSearchDecoder::OnlineLASBeamSearchDecoder(a1 + 3);
  return a1;
}

void sub_1AD934D74(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineLASBeamSearchDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D445F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineLASBeamSearchDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D445F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineLASBeamSearchDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 152))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::OnlineLASSpeculativeBeamSearchDecoder,std::allocator<quasar::OnlineLASSpeculativeBeamSearchDecoder>,std::string const&,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x2C8uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineLASSpeculativeBeamSearchDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLASSpeculativeBeamSearchDecoder>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD934E24(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::OnlineLASSpeculativeBeamSearchDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLASSpeculativeBeamSearchDecoder>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D44E10;
  a1[1] = 0;
  quasar::OnlineLASSpeculativeBeamSearchDecoder::OnlineLASSpeculativeBeamSearchDecoder(a1 + 3);
  return a1;
}

void sub_1AD934E70(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineLASSpeculativeBeamSearchDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44E10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineLASSpeculativeBeamSearchDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44E10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineLASSpeculativeBeamSearchDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 152))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::OnlineLASLmRescoringBeamSearchDecoder,std::allocator<quasar::OnlineLASLmRescoringBeamSearchDecoder>,std::string const&,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x3F0uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineLASLmRescoringBeamSearchDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLASLmRescoringBeamSearchDecoder>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD934F20(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::OnlineLASLmRescoringBeamSearchDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLASLmRescoringBeamSearchDecoder>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D44DD8;
  a1[1] = 0;
  quasar::OnlineLASLmRescoringBeamSearchDecoder::OnlineLASLmRescoringBeamSearchDecoder(a1 + 3);
  return a1;
}

void sub_1AD934F6C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineLASLmRescoringBeamSearchDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44DD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineLASLmRescoringBeamSearchDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44DD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineLASLmRescoringBeamSearchDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 152))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder,std::allocator<quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder>,std::string const&,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x418uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD93501C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D44EF0;
  a1[1] = 0;
  quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder::OnlineLASLmRescoringSpeculativeBeamSearchDecoder(a1 + 3);
  return a1;
}

void sub_1AD935068(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44EF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44EF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 152))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::OnlineTransducerBeamSearchDecoder,std::allocator<quasar::OnlineTransducerBeamSearchDecoder>,std::string const&,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x318uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineTransducerBeamSearchDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineTransducerBeamSearchDecoder>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD935118(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::OnlineTransducerBeamSearchDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineTransducerBeamSearchDecoder>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D44C50;
  a1[1] = 0;
  quasar::OnlineTransducerBeamSearchDecoder::OnlineTransducerBeamSearchDecoder(a1 + 3);
  return a1;
}

void sub_1AD935164(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineTransducerBeamSearchDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44C50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineTransducerBeamSearchDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44C50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineTransducerBeamSearchDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 152))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::OnlineTransducerGraphSearchDecoder,std::allocator<quasar::OnlineTransducerGraphSearchDecoder>,std::string const&,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x8F0uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineTransducerGraphSearchDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineTransducerGraphSearchDecoder>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD935214(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::OnlineTransducerGraphSearchDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineTransducerGraphSearchDecoder>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D44D30;
  a1[1] = 0;
  quasar::OnlineTransducerGraphSearchDecoder::OnlineTransducerGraphSearchDecoder(a1 + 3);
  return a1;
}

void sub_1AD935260(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineTransducerGraphSearchDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44D30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineTransducerGraphSearchDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44D30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineTransducerGraphSearchDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 152))(a1 + 24);
}

void std::allocate_shared[abi:ne180100]<quasar::SystemCombinationDecoder,std::allocator<quasar::SystemCombinationDecoder>,std::string const&,void>(_QWORD *a1@<X8>)
{
  _QWORD *v2;

  v2 = operator new(0x2E8uLL);
  std::__shared_ptr_emplace<quasar::SystemCombinationDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::SystemCombinationDecoder>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  std::shared_ptr<quasar::SystemCombinationDecoder>::__enable_weak_this[abi:ne180100]<quasar::SystemCombinationDecoder,quasar::SystemCombinationDecoder,void>((uint64_t)a1, v2 + 59, (uint64_t)(v2 + 3));
}

void sub_1AD935318(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::SystemCombinationDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::SystemCombinationDecoder>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D44240;
  a1[1] = 0;
  quasar::SystemCombinationDecoder::SystemCombinationDecoder(a1 + 3);
  return a1;
}

void sub_1AD935364(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::SystemCombinationDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44240;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::SystemCombinationDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44240;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::SystemCombinationDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 152))(a1 + 24);
}

void std::shared_ptr<quasar::SystemCombinationDecoder>::__enable_weak_this[abi:ne180100]<quasar::SystemCombinationDecoder,quasar::SystemCombinationDecoder,void>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  if (a2)
  {
    v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
        do
          v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4)
        std::__shared_weak_count::__release_weak(v4);
      if (v5)
      {
        v10 = (unint64_t *)&v5->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::ConfusionNetworkCombinerDecoder,std::allocator<quasar::ConfusionNetworkCombinerDecoder>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x890uLL);
  result = std::__shared_ptr_emplace<quasar::ConfusionNetworkCombinerDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::ConfusionNetworkCombinerDecoder>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1AD9354C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::ConfusionNetworkCombinerDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::ConfusionNetworkCombinerDecoder>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D44A58;
  a1[1] = 0;
  quasar::ConfusionNetworkCombinerDecoder::ConfusionNetworkCombinerDecoder((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1AD935510(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::ConfusionNetworkCombinerDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44A58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::ConfusionNetworkCombinerDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44A58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::ConfusionNetworkCombinerDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 152))(a1 + 24);
}

uint64_t quasar::ConfusionNetworkCombinerDecoder::ConfusionNetworkCombinerDecoder(uint64_t a1, __int128 *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)quasar::Decoder::Decoder(a1, a2);
  *v3 = &off_1E5D3AAE0;
  quasar::ResultCombiner::ResultCombiner((quasar::ResultCombiner *)(v3 + 56));
  *(_QWORD *)(a1 + 448) = &off_1E5D395B8;
  *(_OWORD *)(a1 + 2024) = 0u;
  *(_OWORD *)(a1 + 2040) = 0u;
  *(_OWORD *)(a1 + 2056) = 0u;
  *(_OWORD *)(a1 + 2088) = 0u;
  *(_OWORD *)(a1 + 2104) = 0u;
  *(_OWORD *)(a1 + 2120) = 0u;
  return a1;
}

void sub_1AD9355E4(_Unwind_Exception *a1)
{
  void **v1;

  quasar::Decoder::~Decoder(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::PhoneticMatchDecoder,std::allocator<quasar::PhoneticMatchDecoder>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x440uLL);
  result = std::__shared_ptr_emplace<quasar::PhoneticMatchDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::PhoneticMatchDecoder>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1AD93563C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::PhoneticMatchDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::PhoneticMatchDecoder>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D437F8;
  a1[1] = 0;
  quasar::PhoneticMatchDecoder::PhoneticMatchDecoder((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1AD935688(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::PhoneticMatchDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D437F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::PhoneticMatchDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D437F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::PhoneticMatchDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 152))(a1 + 24);
}

uint64_t quasar::PhoneticMatchDecoder::PhoneticMatchDecoder(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  char *v4;

  v3 = quasar::Decoder::Decoder(a1, a2);
  *(_QWORD *)v3 = &off_1E5D37B68;
  *(_QWORD *)(v3 + 672) = 0;
  *(_QWORD *)(v3 + 688) = 0;
  *(_QWORD *)(v3 + 680) = 0;
  *(_QWORD *)(v3 + 704) = 0;
  *(_QWORD *)(v3 + 720) = 0;
  *(_QWORD *)(v3 + 712) = 0;
  *(_OWORD *)(v3 + 448) = 0u;
  *(_OWORD *)(v3 + 464) = 0u;
  *(_OWORD *)(v3 + 480) = 0u;
  *(_OWORD *)(v3 + 496) = 0u;
  *(_OWORD *)(v3 + 512) = 0u;
  *(_OWORD *)(v3 + 528) = 0u;
  *(_OWORD *)(v3 + 544) = 0u;
  *(_OWORD *)(v3 + 560) = 0u;
  *(_OWORD *)(v3 + 576) = 0u;
  *(_OWORD *)(v3 + 592) = 0u;
  *(_OWORD *)(v3 + 608) = 0u;
  *(_OWORD *)(v3 + 624) = 0u;
  *(_OWORD *)(v3 + 752) = 0u;
  *(_OWORD *)(v3 + 768) = 0u;
  *(_OWORD *)(v3 + 736) = 0u;
  *(_OWORD *)(v3 + 808) = 0u;
  *(_OWORD *)(v3 + 824) = 0u;
  *(_OWORD *)(v3 + 792) = 0u;
  v4 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &unk_1E5D43328;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 19) = 0;
  *((_QWORD *)v4 + 20) = 0;
  *((_QWORD *)v4 + 18) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *((_DWORD *)v4 + 34) = 0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_QWORD *)(a1 + 840) = v4 + 24;
  *(_QWORD *)(a1 + 848) = v4;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_QWORD *)(a1 + 888) = 0x7D041700000;
  *(_QWORD *)(a1 + 896) = 0x400000003F000000;
  *(_QWORD *)(a1 + 904) = 0x60000000000000;
  *(_BYTE *)(a1 + 912) = 0;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_DWORD *)(a1 + 1016) = 1065353216;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_DWORD *)(a1 + 1056) = 1065353216;
  return a1;
}

void sub_1AD935814(_Unwind_Exception *a1)
{
  void **v1;

  quasar::Decoder::~Decoder(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::FingerprintDetector,std::allocator<quasar::FingerprintDetector>,std::string const&,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x578uLL);
  result = std::__shared_ptr_emplace<quasar::FingerprintDetector>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::FingerprintDetector>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD93586C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::FingerprintDetector>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::FingerprintDetector>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D435C8;
  a1[1] = 0;
  quasar::FingerprintDetector::FingerprintDetector(a1 + 3);
  return a1;
}

void sub_1AD9358B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::FingerprintDetector>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D435C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::FingerprintDetector>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D435C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::FingerprintDetector>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 152))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::OnlineAudioAnalyticsDecoder,std::allocator<quasar::OnlineAudioAnalyticsDecoder>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x1E0uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineAudioAnalyticsDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineAudioAnalyticsDecoder>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1AD935968(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::OnlineAudioAnalyticsDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineAudioAnalyticsDecoder>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D44668;
  a1[1] = 0;
  quasar::OnlineAudioAnalyticsDecoder::OnlineAudioAnalyticsDecoder((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1AD9359B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineAudioAnalyticsDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44668;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineAudioAnalyticsDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44668;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineAudioAnalyticsDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 152))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::WatermarkDetector,std::allocator<quasar::WatermarkDetector>,std::string const&,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x240uLL);
  result = std::__shared_ptr_emplace<quasar::WatermarkDetector>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::WatermarkDetector>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD935A64(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::WatermarkDetector>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::WatermarkDetector>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D43210;
  a1[1] = 0;
  quasar::WatermarkDetector::WatermarkDetector(a1 + 3);
  return a1;
}

void sub_1AD935AB0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::WatermarkDetector>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43210;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WatermarkDetector>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43210;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::WatermarkDetector>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 152))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::AudioAnalyticsDecoder,std::allocator<quasar::AudioAnalyticsDecoder>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x1E0uLL);
  result = std::__shared_ptr_emplace<quasar::AudioAnalyticsDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::AudioAnalyticsDecoder>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1AD935B60(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::AudioAnalyticsDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::AudioAnalyticsDecoder>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D43980;
  a1[1] = 0;
  quasar::AudioAnalyticsDecoder::AudioAnalyticsDecoder((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1AD935BAC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::AudioAnalyticsDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43980;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::AudioAnalyticsDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43980;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::AudioAnalyticsDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 152))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::LatticeRnnMitigator,std::allocator<quasar::LatticeRnnMitigator>,std::string const&,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x340uLL);
  result = std::__shared_ptr_emplace<quasar::LatticeRnnMitigator>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::LatticeRnnMitigator>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD935C5C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::LatticeRnnMitigator>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::LatticeRnnMitigator>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D43600;
  a1[1] = 0;
  quasar::LatticeRnnMitigator::LatticeRnnMitigator(a1 + 3);
  return a1;
}

void sub_1AD935CA8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::LatticeRnnMitigator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43600;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::LatticeRnnMitigator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43600;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::LatticeRnnMitigator>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 152))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::HwcnConfidence,std::allocator<quasar::HwcnConfidence>,std::string const&,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x3F0uLL);
  result = std::__shared_ptr_emplace<quasar::HwcnConfidence>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::HwcnConfidence>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD935D58(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::HwcnConfidence>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::HwcnConfidence>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D42918;
  a1[1] = 0;
  quasar::HwcnConfidence::HwcnConfidence(a1 + 3);
  return a1;
}

void sub_1AD935DA4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::HwcnConfidence>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42918;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::HwcnConfidence>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42918;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::HwcnConfidence>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 152))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::E2EAsrConfidence,std::allocator<quasar::E2EAsrConfidence>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x250uLL);
  result = std::__shared_ptr_emplace<quasar::E2EAsrConfidence>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::E2EAsrConfidence>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1AD935E54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::E2EAsrConfidence>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::E2EAsrConfidence>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D42DE8;
  a1[1] = 0;
  quasar::E2EAsrConfidence::E2EAsrConfidence((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1AD935EA0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::E2EAsrConfidence>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42DE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::E2EAsrConfidence>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42DE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::E2EAsrConfidence>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 152))(a1 + 24);
}

uint64_t quasar::E2EAsrConfidence::E2EAsrConfidence(uint64_t a1, __int128 *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)quasar::Decoder::Decoder(a1, a2);
  *v3 = &off_1E5D35CB0;
  std::string::basic_string[abi:ne180100]<0>(v3 + 56, "");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 472), "");
  *(_QWORD *)(a1 + 496) = -1;
  *(_WORD *)(a1 + 504) = 0;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_DWORD *)(a1 + 560) = 1065353216;
  return a1;
}

void sub_1AD935F8C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 471) < 0)
    operator delete(*v2);
  quasar::Decoder::~Decoder((void **)v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::WatermarkDetector2,std::allocator<quasar::WatermarkDetector2>,std::string const&,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x2A8uLL);
  result = std::__shared_ptr_emplace<quasar::WatermarkDetector2>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::WatermarkDetector2>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD935FFC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::WatermarkDetector2>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::WatermarkDetector2>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D43440;
  a1[1] = 0;
  quasar::WatermarkDetector2::WatermarkDetector2(a1 + 3);
  return a1;
}

void sub_1AD936048(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::WatermarkDetector2>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43440;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WatermarkDetector2>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43440;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::WatermarkDetector2>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 152))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::LatticeLmeFtmDecoder,std::allocator<quasar::LatticeLmeFtmDecoder>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xD88uLL);
  result = std::__shared_ptr_emplace<quasar::LatticeLmeFtmDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::LatticeLmeFtmDecoder>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1AD9360F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::LatticeLmeFtmDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::LatticeLmeFtmDecoder>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D437C0;
  a1[1] = 0;
  quasar::LatticeLmeFtmDecoder::LatticeLmeFtmDecoder((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1AD936144(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::LatticeLmeFtmDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D437C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::LatticeLmeFtmDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D437C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::LatticeLmeFtmDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 152))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::OnlineAEDRescoringDecoder,std::allocator<quasar::OnlineAEDRescoringDecoder>,std::string const&,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x250uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineAEDRescoringDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineAEDRescoringDecoder>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD9361F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::OnlineAEDRescoringDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineAEDRescoringDecoder>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D44400;
  a1[1] = 0;
  quasar::OnlineAEDRescoringDecoder::OnlineAEDRescoringDecoder(a1 + 3);
  return a1;
}

void sub_1AD936240(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineAEDRescoringDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44400;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineAEDRescoringDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44400;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineAEDRescoringDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 152))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::ForceAlignDecoder,std::allocator<quasar::ForceAlignDecoder>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x388uLL);
  result = std::__shared_ptr_emplace<quasar::ForceAlignDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::ForceAlignDecoder>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1AD9362F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::ForceAlignDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::ForceAlignDecoder>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D42FE0;
  a1[1] = 0;
  quasar::ForceAlignDecoderBase::ForceAlignDecoderBase((uint64_t)(a1 + 3), a2);
  a1[3] = &off_1E5D36420;
  a1[110] = 0;
  a1[112] = 0;
  a1[111] = 0;
  return a1;
}

void sub_1AD936358(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::ForceAlignDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42FE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::ForceAlignDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42FE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::ForceAlignDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 152))(a1 + 24);
}

uint64_t quasar::ForceAlignDecoderBase::ForceAlignDecoderBase(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  char *v4;

  v3 = quasar::Decoder::Decoder(a1, a2);
  *(_QWORD *)v3 = &unk_1E5D383D0;
  *(_OWORD *)(v3 + 448) = 0u;
  *(_OWORD *)(v3 + 464) = 0u;
  *(_OWORD *)(v3 + 480) = 0u;
  *(_OWORD *)(v3 + 496) = 0u;
  *(_QWORD *)(v3 + 512) = 0;
  *(_OWORD *)(v3 + 528) = 0u;
  *(_OWORD *)(v3 + 544) = 0u;
  *(_QWORD *)(v3 + 560) = 0;
  v4 = (char *)operator new(0xA8uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_QWORD *)v4 = &unk_1E5D43328;
  *((_QWORD *)v4 + 18) = 0;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *((_DWORD *)v4 + 34) = 0;
  *(_QWORD *)(a1 + 568) = v4 + 24;
  *(_QWORD *)(a1 + 576) = v4;
  *(_QWORD *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(a1 + 624) = _D0;
  *(_WORD *)(a1 + 632) = 256;
  *(_DWORD *)(a1 + 636) = 1107296256;
  *(_QWORD *)(a1 + 640) = 9999;
  *(_DWORD *)(a1 + 648) = 0;
  *(_BYTE *)(a1 + 652) = 1;
  *(_QWORD *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_DWORD *)(a1 + 720) = 0;
  kaldi::SilencePhoneSet::SilencePhoneSet((kaldi::SilencePhoneSet *)(a1 + 752));
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  return a1;
}

void sub_1AD9364F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void **v6;

  if (*(char *)(v1 + 751) < 0)
    operator delete(*v6);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v4);
  if (*(char *)(v1 + 703) < 0)
    operator delete(*(void **)(v1 + 680));
  if (*(char *)(v1 + 679) < 0)
    operator delete(*v5);
  if (*(char *)(v1 + 623) < 0)
    operator delete(*(void **)(v1 + 600));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1 + 552);
  if (*(char *)(v1 + 551) < 0)
    operator delete(*(void **)(v1 + 528));
  if (*(char *)(v1 + 519) < 0)
    operator delete(*(void **)(v1 + 496));
  if (*(char *)(v1 + 495) < 0)
    operator delete(*(void **)(v1 + 472));
  if (*(char *)(v1 + 471) < 0)
    operator delete(*(void **)(v1 + 448));
  quasar::Decoder::~Decoder((void **)v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::RealignAmFusionDecoder,std::allocator<quasar::RealignAmFusionDecoder>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x448uLL);
  result = std::__shared_ptr_emplace<quasar::RealignAmFusionDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::RealignAmFusionDecoder>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1AD9365F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::RealignAmFusionDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::RealignAmFusionDecoder>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D43D38;
  a1[1] = 0;
  quasar::RealignAmFusionDecoder::RealignAmFusionDecoder((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1AD936644(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::RealignAmFusionDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43D38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::RealignAmFusionDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43D38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::RealignAmFusionDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 152))(a1 + 24);
}

uint64_t quasar::RealignAmFusionDecoder::RealignAmFusionDecoder(uint64_t a1, __int128 *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)quasar::ForceAlignDecoderBase::ForceAlignDecoderBase(a1, a2);
  *v3 = &off_1E5D38D08;
  std::string::basic_string[abi:ne180100]<0>(v3 + 107, "");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 880), "");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 904), "");
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(a1 + 928) = _D0;
  *(_BYTE *)(a1 + 936) = 0;
  *(_QWORD *)(a1 + 940) = 0x1000000000;
  *(_QWORD *)(a1 + 948) = 0x3F0000003F000000;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 960), "");
  *(_QWORD *)(a1 + 984) = 0x2EDBE6FF3F800000;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_QWORD *)(a1 + 1056) = 0;
  *(_BYTE *)(a1 + 1064) = 1;
  return a1;
}

void sub_1AD93678C(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;

  if (v1[927] < 0)
    operator delete(*v4);
  if (v1[903] < 0)
    operator delete(*v3);
  if (v1[879] < 0)
    operator delete(*v2);
  quasar::ForceAlignDecoderBase::~ForceAlignDecoderBase((quasar::ForceAlignDecoderBase *)v1);
  _Unwind_Resume(a1);
}

void quasar::ForceAlignDecoderBase::~ForceAlignDecoderBase(quasar::ForceAlignDecoderBase *this)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &unk_1E5D383D0;
  v2 = *((_QWORD *)this + 106);
  *((_QWORD *)this + 106) = 0;
  if (v2)
    std::default_delete<quasar::Lexicon>::operator()[abi:ne180100]((uint64_t)this + 848, v2);
  v3 = (void *)*((_QWORD *)this + 103);
  if (v3)
  {
    *((_QWORD *)this + 104) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 100);
  if (v4)
  {
    *((_QWORD *)this + 101) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 97);
  if (v5)
    operator delete(v5);
  if (*((char *)this + 751) < 0)
    operator delete(*((void **)this + 91));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 704);
  if (*((char *)this + 703) < 0)
    operator delete(*((void **)this + 85));
  if (*((char *)this + 679) < 0)
    operator delete(*((void **)this + 82));
  if (*((char *)this + 623) < 0)
    operator delete(*((void **)this + 75));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 584);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 568);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 552);
  if (*((char *)this + 551) < 0)
    operator delete(*((void **)this + 66));
  if (*((char *)this + 519) < 0)
    operator delete(*((void **)this + 62));
  if (*((char *)this + 495) < 0)
    operator delete(*((void **)this + 59));
  if (*((char *)this + 471) < 0)
    operator delete(*((void **)this + 56));
  quasar::Decoder::~Decoder((void **)this);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::OnlinePrefixBeamSearchDecoder,std::allocator<quasar::OnlinePrefixBeamSearchDecoder>,std::string const&,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x420uLL);
  result = std::__shared_ptr_emplace<quasar::OnlinePrefixBeamSearchDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlinePrefixBeamSearchDecoder>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD93693C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::OnlinePrefixBeamSearchDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlinePrefixBeamSearchDecoder>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D44898;
  a1[1] = 0;
  quasar::OnlinePrefixBeamSearchDecoder::OnlinePrefixBeamSearchDecoder(a1 + 3);
  return a1;
}

void sub_1AD936988(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlinePrefixBeamSearchDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44898;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlinePrefixBeamSearchDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44898;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlinePrefixBeamSearchDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 152))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::AEDBeamSearchDecoder,std::allocator<quasar::AEDBeamSearchDecoder>,std::string const&,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x400uLL);
  result = std::__shared_ptr_emplace<quasar::AEDBeamSearchDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::AEDBeamSearchDecoder>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD936A38(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::AEDBeamSearchDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::AEDBeamSearchDecoder>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D43718;
  a1[1] = 0;
  quasar::AEDBeamSearchDecoder::AEDBeamSearchDecoder(a1 + 3);
  return a1;
}

void sub_1AD936A84(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::AEDBeamSearchDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43718;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::AEDBeamSearchDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43718;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::AEDBeamSearchDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 152))(a1 + 24);
}

uint64_t std::allocate_shared[abi:ne180100]<quasar::RescoringDeliberationDecoder,std::allocator<quasar::RescoringDeliberationDecoder>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x260uLL);
  result = std::__shared_ptr_emplace<quasar::RescoringDeliberationDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::RescoringDeliberationDecoder>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_1AD936B34(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<quasar::RescoringDeliberationDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::RescoringDeliberationDecoder>,0>(uint64_t a1, __int128 *a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E5D447B8;
  *(_QWORD *)(a1 + 8) = 0;
  quasar::Decoder::Decoder(a1 + 24, a2);
  *(_QWORD *)(a1 + 24) = &off_1E5D3A288;
  *(_BYTE *)(a1 + 488) = 0;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 496) = xmmword_1AE14B6F0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_QWORD *)(a1 + 560) = 1;
  *(_WORD *)(a1 + 568) = 256;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_BYTE *)(a1 + 592) = 0;
  *(_DWORD *)(a1 + 596) = -1;
  *(_BYTE *)(a1 + 600) = 0;
  return a1;
}

void sub_1AD936BDC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::RescoringDeliberationDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D447B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::RescoringDeliberationDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D447B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::RescoringDeliberationDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 152))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::OnlineEmbeddingRetranslationDecoder,std::allocator<quasar::OnlineEmbeddingRetranslationDecoder>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x220uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineEmbeddingRetranslationDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineEmbeddingRetranslationDecoder>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1AD936C8C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::OnlineEmbeddingRetranslationDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineEmbeddingRetranslationDecoder>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D44D68;
  a1[1] = 0;
  quasar::OnlineEmbeddingRetranslationDecoder::OnlineEmbeddingRetranslationDecoder((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1AD936CD8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineEmbeddingRetranslationDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44D68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineEmbeddingRetranslationDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44D68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineEmbeddingRetranslationDecoder>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 152))(a1 + 24);
}

kaldi::quasar::ErrorBlamer *kaldi::quasar::ErrorBlamer::ErrorBlamer(kaldi::quasar::ErrorBlamer *this, int a2, float a3, float a4, float a5, float a6, float a7, const kaldi::TransitionModel *a8)
{
  void **v9;
  std::vector<std::string> *v10;
  unint64_t v11;
  char *v12;
  _DWORD *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  std::string *v30;
  std::string *v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  char *v36;
  _DWORD *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  __int128 v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  std::string *v54;
  std::string *v55;
  __int128 v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  char *v60;
  _DWORD *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  __int128 v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  std::string *v78;
  std::string *v79;
  __int128 v80;
  uint64_t v81;
  int v82;
  void *__p[2];
  std::string::size_type v85;
  std::__split_buffer<std::string> __v;

  *(_QWORD *)this = &off_1E5D32A70;
  *((_QWORD *)this + 1) = &off_1E5D33330;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  v9 = (void **)((char *)this + 56);
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  v10 = (std::vector<std::string> *)((char *)this + 80);
  *((_DWORD *)this + 26) = 0;
  *((_DWORD *)this + 27) = a2;
  *((float *)this + 28) = a3;
  *((float *)this + 29) = a4;
  *((float *)this + 30) = a5;
  *((float *)this + 31) = a6;
  *((float *)this + 32) = a7;
  *((_QWORD *)this + 17) = a8;
  kaldi::quasar::ErrorProfile::ErrorProfile((kaldi::quasar::ErrorBlamer *)((char *)this + 144), (kaldi::quasar::ErrorBlamer *)((char *)this + 8), a8);
  v11 = *((_QWORD *)this + 9);
  v12 = (char *)*((_QWORD *)this + 8);
  if ((unint64_t)v12 >= v11)
  {
    v14 = (char *)*v9;
    v15 = (v12 - (_BYTE *)*v9) >> 2;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v17 = v11 - (_QWORD)v14;
    if (v17 >> 1 > v16)
      v16 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 72, v18);
      v14 = (char *)*((_QWORD *)this + 7);
      v12 = (char *)*((_QWORD *)this + 8);
    }
    else
    {
      v19 = 0;
    }
    v20 = &v19[4 * v15];
    v21 = &v19[4 * v18];
    *(_DWORD *)v20 = 4;
    v13 = v20 + 4;
    while (v12 != v14)
    {
      v22 = *((_DWORD *)v12 - 1);
      v12 -= 4;
      *((_DWORD *)v20 - 1) = v22;
      v20 -= 4;
    }
    *((_QWORD *)this + 7) = v20;
    *((_QWORD *)this + 8) = v13;
    *((_QWORD *)this + 9) = v21;
    if (v14)
      operator delete(v14);
  }
  else
  {
    *(_DWORD *)v12 = 4;
    v13 = v12 + 4;
  }
  *((_QWORD *)this + 8) = v13;
  std::string::basic_string[abi:ne180100]<0>(__p, "CONFIDENCE");
  v23 = *((_QWORD *)this + 12);
  v24 = *((_QWORD *)this + 11);
  if (v24 >= v23)
  {
    v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (unint64_t)v10->__begin_) >> 3);
    v27 = v26 + 1;
    if (v26 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - (unint64_t)v10->__begin_) >> 3);
    if (2 * v28 > v27)
      v27 = 2 * v28;
    if (v28 >= 0x555555555555555)
      v29 = 0xAAAAAAAAAAAAAAALL;
    else
      v29 = v27;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)((char *)this + 96);
    if (v29)
      v30 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)this + 96, v29);
    else
      v30 = 0;
    v31 = v30 + v26;
    __v.__first_ = v30;
    __v.__begin_ = v31;
    __v.__end_cap_.__value_ = &v30[v29];
    v32 = *(_OWORD *)__p;
    v31->__r_.__value_.__r.__words[2] = v85;
    *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v32;
    __p[1] = 0;
    v85 = 0;
    __p[0] = 0;
    __v.__end_ = v31 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(v10, &__v);
    v33 = *((_QWORD *)this + 11);
    std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
    v34 = SHIBYTE(v85);
    *((_QWORD *)this + 11) = v33;
    if (v34 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v25 = *(_OWORD *)__p;
    *(_QWORD *)(v24 + 16) = v85;
    *(_OWORD *)v24 = v25;
    *((_QWORD *)this + 11) = v24 + 24;
  }
  v36 = (char *)*((_QWORD *)this + 8);
  v35 = *((_QWORD *)this + 9);
  if ((unint64_t)v36 >= v35)
  {
    v38 = (char *)*v9;
    v39 = (v36 - (_BYTE *)*v9) >> 2;
    v40 = v39 + 1;
    if ((unint64_t)(v39 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v41 = v35 - (_QWORD)v38;
    if (v41 >> 1 > v40)
      v40 = v41 >> 1;
    if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
      v42 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v42 = v40;
    if (v42)
    {
      v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 72, v42);
      v38 = (char *)*((_QWORD *)this + 7);
      v36 = (char *)*((_QWORD *)this + 8);
    }
    else
    {
      v43 = 0;
    }
    v44 = &v43[4 * v39];
    v45 = &v43[4 * v42];
    *(_DWORD *)v44 = 4;
    v37 = v44 + 4;
    while (v36 != v38)
    {
      v46 = *((_DWORD *)v36 - 1);
      v36 -= 4;
      *((_DWORD *)v44 - 1) = v46;
      v44 -= 4;
    }
    *((_QWORD *)this + 7) = v44;
    *((_QWORD *)this + 8) = v37;
    *((_QWORD *)this + 9) = v45;
    if (v38)
      operator delete(v38);
  }
  else
  {
    *(_DWORD *)v36 = 4;
    v37 = v36 + 4;
  }
  *((_QWORD *)this + 8) = v37;
  std::string::basic_string[abi:ne180100]<0>(__p, "LENGTH");
  v48 = *((_QWORD *)this + 11);
  v47 = *((_QWORD *)this + 12);
  if (v48 >= v47)
  {
    v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - (unint64_t)v10->__begin_) >> 3);
    v51 = v50 + 1;
    if (v50 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - (unint64_t)v10->__begin_) >> 3);
    if (2 * v52 > v51)
      v51 = 2 * v52;
    if (v52 >= 0x555555555555555)
      v53 = 0xAAAAAAAAAAAAAAALL;
    else
      v53 = v51;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)((char *)this + 96);
    if (v53)
      v54 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)this + 96, v53);
    else
      v54 = 0;
    v55 = v54 + v50;
    __v.__first_ = v54;
    __v.__begin_ = v55;
    __v.__end_cap_.__value_ = &v54[v53];
    v56 = *(_OWORD *)__p;
    v55->__r_.__value_.__r.__words[2] = v85;
    *(_OWORD *)&v55->__r_.__value_.__l.__data_ = v56;
    __p[1] = 0;
    v85 = 0;
    __p[0] = 0;
    __v.__end_ = v55 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(v10, &__v);
    v57 = *((_QWORD *)this + 11);
    std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
    v58 = SHIBYTE(v85);
    *((_QWORD *)this + 11) = v57;
    if (v58 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v49 = *(_OWORD *)__p;
    *(_QWORD *)(v48 + 16) = v85;
    *(_OWORD *)v48 = v49;
    *((_QWORD *)this + 11) = v48 + 24;
  }
  v60 = (char *)*((_QWORD *)this + 8);
  v59 = *((_QWORD *)this + 9);
  if ((unint64_t)v60 >= v59)
  {
    v62 = (char *)*v9;
    v63 = (v60 - (_BYTE *)*v9) >> 2;
    v64 = v63 + 1;
    if ((unint64_t)(v63 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v65 = v59 - (_QWORD)v62;
    if (v65 >> 1 > v64)
      v64 = v65 >> 1;
    if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
      v66 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v66 = v64;
    if (v66)
    {
      v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 72, v66);
      v62 = (char *)*((_QWORD *)this + 7);
      v60 = (char *)*((_QWORD *)this + 8);
    }
    else
    {
      v67 = 0;
    }
    v68 = &v67[4 * v63];
    v69 = &v67[4 * v66];
    *(_DWORD *)v68 = 4;
    v61 = v68 + 4;
    while (v60 != v62)
    {
      v70 = *((_DWORD *)v60 - 1);
      v60 -= 4;
      *((_DWORD *)v68 - 1) = v70;
      v68 -= 4;
    }
    *((_QWORD *)this + 7) = v68;
    *((_QWORD *)this + 8) = v61;
    *((_QWORD *)this + 9) = v69;
    if (v62)
      operator delete(v62);
  }
  else
  {
    *(_DWORD *)v60 = 4;
    v61 = v60 + 4;
  }
  *((_QWORD *)this + 8) = v61;
  std::string::basic_string[abi:ne180100]<0>(__p, "FRAME_LENGTH");
  v72 = *((_QWORD *)this + 11);
  v71 = *((_QWORD *)this + 12);
  if (v72 >= v71)
  {
    v74 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v72 - (unint64_t)v10->__begin_) >> 3);
    v75 = v74 + 1;
    if (v74 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v76 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v71 - (unint64_t)v10->__begin_) >> 3);
    if (2 * v76 > v75)
      v75 = 2 * v76;
    if (v76 >= 0x555555555555555)
      v77 = 0xAAAAAAAAAAAAAAALL;
    else
      v77 = v75;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)((char *)this + 96);
    if (v77)
      v78 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)this + 96, v77);
    else
      v78 = 0;
    v79 = v78 + v74;
    __v.__first_ = v78;
    __v.__begin_ = v79;
    __v.__end_cap_.__value_ = &v78[v77];
    v80 = *(_OWORD *)__p;
    v79->__r_.__value_.__r.__words[2] = v85;
    *(_OWORD *)&v79->__r_.__value_.__l.__data_ = v80;
    __p[1] = 0;
    v85 = 0;
    __p[0] = 0;
    __v.__end_ = v79 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(v10, &__v);
    v81 = *((_QWORD *)this + 11);
    std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
    v82 = SHIBYTE(v85);
    *((_QWORD *)this + 11) = v81;
    if (v82 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v73 = *(_OWORD *)__p;
    *(_QWORD *)(v72 + 16) = v85;
    *(_OWORD *)v72 = v73;
    *((_QWORD *)this + 11) = v72 + 24;
  }
  return this;
}

void sub_1AD93733C(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::wstring> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  uint64_t v15;
  kaldi::quasar::AttributeFactory *v16;
  void **v17;
  kaldi::quasar::ErrorProfile *v18;
  void *v20;

  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&a15);
  if (a14 < 0)
    operator delete(__pa);
  kaldi::quasar::ErrorProfile::~ErrorProfile(v18);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  v20 = *v17;
  if (*v17)
  {
    *(_QWORD *)(v15 + 64) = v20;
    operator delete(v20);
  }
  kaldi::quasar::AttributeFactory::~AttributeFactory(v16);
  _Unwind_Resume(__p);
}

void sub_1AD9373C0()
{
  JUMPOUT(0x1AD937394);
}

void kaldi::quasar::ErrorBlamer::~ErrorBlamer(kaldi::quasar::ErrorBlamer *this)
{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_1E5D32A70;
  kaldi::quasar::ErrorProfile::~ErrorProfile((kaldi::quasar::ErrorBlamer *)((char *)this + 144));
  v3 = (void **)((char *)this + 80);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  kaldi::quasar::AttributeFactory::~AttributeFactory((kaldi::quasar::ErrorBlamer *)((char *)this + 8));
}

{
  kaldi::quasar::ErrorBlamer::~ErrorBlamer(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::quasar::ErrorBlamer::Blame(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, _QWORD *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9)
{
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void **v25[34];

  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Blaming ", 8);
    v18 = *(char *)(a2 + 23);
    if (v18 >= 0)
      v19 = a2;
    else
      v19 = *(_QWORD *)a2;
    if (v18 >= 0)
      v20 = *(unsigned __int8 *)(a2 + 23);
    else
      v20 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v25);
  }
  v22 = 0;
  v23 = 0;
  v24 = 0;
  kaldi::quasar::ErrorBlamer::GetErrorRegions(a1, a3, a4, a5, a6, a7, &v22);
  if (v22 == v23 && kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Cannot blame given reference and hypothesis, one of them is empty.", 66);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
  }
  kaldi::quasar::ErrorProfile::AccumulateErrors((uint64_t)(a1 + 18), (__int128 *)a2, &v22, a8, a9);
  v25[0] = (void **)&v22;
  std::vector<kaldi::quasar::ErrorRegion>::__destroy_vector::operator()[abi:ne180100](v25);
}

void sub_1AD93758C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a13);
  a13 = (void **)&a10;
  std::vector<kaldi::quasar::ErrorRegion>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::ErrorBlamer::GetErrorRegions(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, _QWORD *a5, uint64_t *a6, uint64_t *a7)
{
  kaldi::quasar::ErrorBlamer::ComputeErrorRegions((uint64_t)a1, a2, a3, a7);
  kaldi::quasar::ErrorBlamer::AddAcousticOnlyDecoding((uint64_t)a1, a5, a7);
  kaldi::quasar::ErrorBlamer::AddConfidenceScores((uint64_t)a1, a4, a7);
  kaldi::quasar::ErrorBlamer::AddSchematicAttributes(a1, a6, a7);
  kaldi::quasar::ErrorBlamer::AddAttributes(a1, a7);
  return kaldi::quasar::ErrorBlamer::AddInformationOnReferenceRecovery((uint64_t)a1, a2, a3, a7);
}

void kaldi::quasar::ErrorBlamer::ComputeErrorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL4 HasErrors;
  BOOL v15;
  int v16;
  const kaldi::quasar::ErrorRegion *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  void **v23[2];
  int v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  const kaldi::quasar::ErrorRegion *v29;
  const kaldi::quasar::ErrorRegion *v30;
  uint64_t v31;

  v29 = 0;
  v30 = 0;
  v31 = 0;
  v6 = *(_QWORD *)(a2 + 8);
  ++*(_DWORD *)(v6 + 56);
  v27 = &unk_1E5D28AB0;
  v28 = v6;
  v7 = *(_QWORD *)(a3 + 8);
  ++*(_DWORD *)(v7 + 56);
  v25 = &unk_1E5D28AB0;
  v26 = v7;
  kaldi::quasar::ErrorBlamer::GetTimeAlignedErrorRegions((float *)a1, &v27, &v25, (uint64_t *)&v29);
  v25 = &unk_1E5D25800;
  v8 = v26;
  if (v26)
  {
    v9 = *(_DWORD *)(v26 + 56) - 1;
    *(_DWORD *)(v26 + 56) = v9;
    if (!v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  v27 = &unk_1E5D25800;
  v10 = v28;
  if (v28)
  {
    v11 = *(_DWORD *)(v28 + 56) - 1;
    *(_DWORD *)(v28 + 56) = v11;
    if (!v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  if (v29 != v30)
  {
    v12 = a4[1];
    if (v12 >= a4[2])
    {
      v13 = std::vector<kaldi::quasar::ErrorRegion>::__push_back_slow_path<kaldi::quasar::ErrorRegion const&>(a4, v29);
    }
    else
    {
      kaldi::quasar::ErrorRegion::ErrorRegion((kaldi::quasar::ErrorRegion *)a4[1], v29);
      v13 = v12 + 328;
      a4[1] = v12 + 328;
    }
    a4[1] = v13;
    v23[0] = (void **)&off_1E5D32A08;
    v23[1] = (void **)0x3F80000000000000;
    v24 = 0;
    HasErrors = kaldi::quasar::ErrorRegion::HasErrors((kaldi::quasar::ErrorRegion *)(v13 - 328));
    v15 = HasErrors;
    if (HasErrors)
      v16 = kaldi::quasar::ErrorBlamer::ComputeImpactOfErrorOnSucceedingErrorRegions(a1, (_QWORD *)(a4[1] - 328));
    else
      v16 = 0;
    v17 = v29;
    if (0x8F9C18F9C18F9C19 * ((v30 - v29) >> 3) >= 2)
    {
      v18 = 1;
      v19 = 392;
      do
      {
        v20 = a4[1];
        if (v15)
        {
          kaldi::quasar::ErrorRegion::AddErrorRegion((kaldi::quasar::ErrorRegion *)(v20 - 328), (const kaldi::quasar::ErrorRegion *)((char *)v17 + v19 - 64));
          if (!kaldi::quasar::ErrorRegion::HasErrors((const kaldi::quasar::ErrorRegion *)((char *)v17 + v19 - 64))
            && ((v22 = *(_DWORD **)((char *)v17 + v19 - 8), *(_QWORD *)((char *)v17 + v19) - (_QWORD)v22 > 4uLL)
             || *v22
             || *(_DWORD *)(a1 + 104)))
          {
            --v16;
          }
          else
          {
            v16 = kaldi::quasar::ErrorBlamer::ComputeImpactOfErrorOnSucceedingErrorRegions(a1, (const kaldi::quasar::ErrorRegion *)((char *)v17 + v19 - 64));
          }
          v15 = v16 != 0;
        }
        else
        {
          if (v20 >= a4[2])
          {
            v21 = std::vector<kaldi::quasar::ErrorRegion>::__push_back_slow_path<kaldi::quasar::ErrorRegion const&>(a4, (const kaldi::quasar::ErrorRegion *)((char *)v17 + v19 - 64));
          }
          else
          {
            kaldi::quasar::ErrorRegion::ErrorRegion((kaldi::quasar::ErrorRegion *)a4[1], (const kaldi::quasar::ErrorRegion *)((char *)v17 + v19 - 64));
            v21 = v20 + 328;
            a4[1] = v20 + 328;
          }
          a4[1] = v21;
          if (kaldi::quasar::ErrorRegion::HasErrors((const kaldi::quasar::ErrorRegion *)((char *)v17 + v19 - 64)))
          {
            v16 = kaldi::quasar::ErrorBlamer::ComputeImpactOfErrorOnSucceedingErrorRegions(a1, (const kaldi::quasar::ErrorRegion *)((char *)v17 + v19 - 64));
            v15 = 1;
          }
          else
          {
            v15 = 0;
          }
        }
        ++v18;
        v17 = v29;
        v19 += 328;
      }
      while (0x8F9C18F9C18F9C19 * ((v30 - v29) >> 3) > v18);
    }
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v23);
  }
  v23[0] = (void **)&v29;
  std::vector<kaldi::quasar::ErrorRegion>::__destroy_vector::operator()[abi:ne180100](v23);
}

void sub_1AD937910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  a9 = (void **)&a16;
  std::vector<kaldi::quasar::ErrorRegion>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ErrorBlamer::AddAttributes(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float RefTotalScore;
  float ScoreSum;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  int v35;
  float v37;
  kaldi::quasar::AttributeFactory *v38;
  uint64_t v39;
  int v40;
  uint64_t (**v41)(kaldi::quasar::MajorError *__hidden);
  uint64_t v42;
  int v43;
  uint64_t (**v44)(kaldi::quasar::FloatAttribute *__hidden);
  uint64_t v45;
  int v46;
  float v47;
  uint64_t v48;
  uint64_t (**v49)(kaldi::quasar::FloatAttribute *__hidden);
  uint64_t v50;
  int v51;
  float v52;
  uint64_t v53;

  v2 = *a2;
  if (*a2 != a2[1])
  {
    v4 = a1;
    v5 = -1431655765 * ((uint64_t)(a1[11] - a1[10]) >> 3);
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v34 = v5 - 1;
    v35 = v5 - 2;
    v38 = (kaldi::quasar::AttributeFactory *)(a1 + 1);
    v9 = 232;
    do
    {
      v40 = v8;
      v11 = *(_QWORD *)(v2 + v9 - 176);
      v10 = *(_QWORD *)(v2 + v9 - 168);
      v12 = *(_QWORD *)(v2 + v9 - 152);
      v39 = *(_QWORD *)(v2 + v9 - 144);
      v49 = &off_1E5D32A08;
      v50 = 0x3F80000000000000;
      v51 = 0;
      if (!kaldi::quasar::ErrorRegion::HasAttribute((kaldi::quasar::ErrorRegion *)(v2 + v9 - 232), (kaldi::quasar::AbstractAttribute *)&v49))
      {
        RefTotalScore = kaldi::quasar::ErrorRegion::GetRefTotalScore((kaldi::quasar::ErrorRegion *)(v2 + v9 - 232));
        if (RefTotalScore < kaldi::quasar::ErrorRegion::GetHypoTotalScore((kaldi::quasar::ErrorRegion *)(v2 + v9 - 232)))
        {
          v44 = &off_1E5D32A08;
          v45 = 0x3F80000000000000;
          v46 = 1;
          kaldi::quasar::ErrorRegion::AddAttribute((uint64_t **)(v2 + v9 - 232), (kaldi::quasar::AbstractAttribute *)&v44);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v44);
        }
        if (kaldi::quasar::ErrorRegion::IsHomophoneRegion((kaldi::quasar::ErrorRegion *)(v2 + v9 - 232), (const kaldi::TransitionModel *)v4[17]))
        {
          v44 = &off_1E5D32A08;
          v45 = 0x3F80000000000000;
          v46 = 2;
          kaldi::quasar::ErrorRegion::AddAttribute((uint64_t **)(v2 + v9 - 232), (kaldi::quasar::AbstractAttribute *)&v44);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v44);
        }
        ScoreSum = kaldi::quasar::ErrorRegion::GetScoreSum(v2 + v9 - 232, 0, (*(_QWORD *)(v2 + v9 - 120) - *(_QWORD *)(v2 + v9 - 128)) >> 2, (_QWORD *)(v2 + v9 - 128));
        v15 = kaldi::quasar::ErrorRegion::GetScoreSum(v2 + v9 - 232, 0, (*(_QWORD *)(v2 + v9 - 96) - *(_QWORD *)(v2 + v9 - 104)) >> 2, (_QWORD *)(v2 + v9 - 104));
        v16 = kaldi::quasar::ErrorRegion::GetScoreSum(v2 + v9 - 232, 0, (*(_QWORD *)(v2 + v9 - 72) - *(_QWORD *)(v2 + v9 - 80)) >> 2, (_QWORD *)(v2 + v9 - 80));
        v17 = kaldi::quasar::ErrorRegion::GetScoreSum(v2 + v9 - 232, 0, (*(_QWORD *)(v2 + v9 - 48) - *(_QWORD *)(v2 + v9 - 56)) >> 2, (_QWORD *)(v2 + v9 - 56));
        v18 = kaldi::quasar::ErrorRegion::GetScoreSum(v2 + v9 - 232, 0, (*(_QWORD *)(v2 + v9 - 24) - *(_QWORD *)(v2 + v9 - 32)) >> 2, (_QWORD *)(v2 + v9 - 32));
        v19 = kaldi::quasar::ErrorRegion::GetScoreSum(v2 + v9 - 232, 0, (*(_QWORD *)(v2 + v9) - *(_QWORD *)(v2 + v9 - 8)) >> 2, (_QWORD *)(v2 + v9 - 8));
        v20 = (float)(ScoreSum - v15) + 0.0;
        if (ScoreSum <= v15)
          v20 = 0.0;
        v21 = -0.0;
        if (v16 > v17)
          v21 = v16 - v17;
        v22 = v20 + v21;
        v37 = v22 + (float)(v18 - v19);
        if (v18 <= v19)
          v23 = v22;
        else
          v23 = v22 + (float)(v18 - v19);
        v4 = a1;
        if (ScoreSum > v15)
        {
          LODWORD(v45) = 0;
          v44 = &off_1E5D32A08;
          *((float *)&v45 + 1) = (float)(ScoreSum - v15) / v23;
          v46 = 5;
          kaldi::quasar::ErrorRegion::AddAttribute((uint64_t **)(v2 + v9 - 232), (kaldi::quasar::AbstractAttribute *)&v44);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v44);
        }
        if (v16 > v17)
        {
          LODWORD(v45) = 0;
          v44 = &off_1E5D32A08;
          *((float *)&v45 + 1) = (float)(v16 - v17) / v23;
          v46 = 4;
          kaldi::quasar::ErrorRegion::AddAttribute((uint64_t **)(v2 + v9 - 232), (kaldi::quasar::AbstractAttribute *)&v44);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v44);
        }
        if (v18 > v19)
        {
          LODWORD(v45) = 0;
          v44 = &off_1E5D32A08;
          *((float *)&v45 + 1) = (float)(v18 - v19) / v37;
          v46 = 3;
          kaldi::quasar::ErrorRegion::AddAttribute((uint64_t **)(v2 + v9 - 232), (kaldi::quasar::AbstractAttribute *)&v44);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v44);
        }
      }
      kaldi::quasar::ErrorRegion::Analyze((kaldi::quasar::ErrorRegion *)(v2 + v9 - 232), v38, (const kaldi::TransitionModel *)v4[17], *((_DWORD *)v4 + 26));
      v7 += (unint64_t)(v10 - v11) >> 2;
      v8 = v40 + ((unint64_t)(v39 - v12) >> 2);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v49);
      ++v6;
      v2 = *a2;
      v24 = a2[1];
      v9 += 328;
    }
    while (0x8F9C18F9C18F9C19 * ((v24 - *a2) >> 3) > v6);
    LODWORD(v50) = 1;
    HIDWORD(v50) = v34;
    v49 = &off_1E5D33010;
    v51 = 0;
    v52 = (float)v8;
    v53 = 0;
    v25 = (float)*(int *)(v24 - 276);
    LODWORD(v45) = 1;
    HIDWORD(v45) = v35;
    v46 = 0;
    v44 = &off_1E5D33010;
    v47 = v25;
    v48 = 0;
    if (v24 == v2)
    {
      v28 = v2;
    }
    else
    {
      v26 = 0;
      v27 = 0;
      do
      {
        kaldi::quasar::ErrorRegion::AddAttribute((uint64_t **)(v2 + v26), (kaldi::quasar::AbstractAttribute *)&v49);
        kaldi::quasar::ErrorRegion::AddAttribute((uint64_t **)(*a2 + v26), (kaldi::quasar::AbstractAttribute *)&v44);
        ++v27;
        v2 = *a2;
        v28 = a2[1];
        v26 += 328;
      }
      while (0x8F9C18F9C18F9C19 * ((v28 - *a2) >> 3) > v27);
      v4 = a1;
    }
    if (v7 > 2 * v8)
    {
      v41 = &off_1E5D32A08;
      v42 = 0x3F80000000000000;
      v43 = 7;
      if (v28 != v2)
      {
        v29 = 0;
        v30 = 0;
        do
        {
          kaldi::quasar::ErrorRegion::AddAttribute((uint64_t **)(v2 + v29), (kaldi::quasar::AbstractAttribute *)&v41);
          ++v30;
          v2 = *a2;
          v29 += 328;
        }
        while (0x8F9C18F9C18F9C19 * ((a2[1] - *a2) >> 3) > v30);
      }
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v41);
      v4 = a1;
    }
    if (v8 > 2 * v7)
    {
      v41 = &off_1E5D32A08;
      v42 = 0x3F80000000000000;
      v43 = 6;
      v31 = *a2;
      if (a2[1] != *a2)
      {
        v32 = 0;
        v33 = 0;
        do
        {
          kaldi::quasar::ErrorRegion::AddAttribute((uint64_t **)(v31 + v32), (kaldi::quasar::AbstractAttribute *)&v41);
          ++v33;
          v31 = *a2;
          v32 += 328;
        }
        while (0x8F9C18F9C18F9C19 * ((a2[1] - *a2) >> 3) > v33);
      }
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v41);
      v4 = a1;
    }
    kaldi::quasar::ErrorBlamer::AddWordContextAttributes(v4, a2);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v44);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v49);
  }
}

void sub_1AD937F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a12);
  va_start(va, a12);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::ErrorBlamer::AddInformationOnReferenceRecovery(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  _QWORD *v8;
  float ReferenceScoreInHypothesis;
  uint64_t v10;
  int v11;
  uint64_t result;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  _QWORD *v24;
  uint64_t v25;
  float ScoreSum;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  double **v33;
  uint64_t v34;
  char v35;
  float v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  float *v41;
  double **v42;
  uint64_t v43;
  double ***v44;

  v7 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  v8 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 88))(a3, 0);
  kaldi::quasar::ErrorBlamer::ReplaceEpsilonWithNoLabel(a1, v7);
  kaldi::quasar::ErrorBlamer::ReplaceEpsilonWithNoLabel(a1, (uint64_t)v8);
  kaldi::quasar::ErrorBlamer::GetBestPath(v8, &v42);
  ReferenceScoreInHypothesis = kaldi::quasar::ErrorBlamer::GetReferenceScoreInHypothesis(a1, v7, (uint64_t)&v42);
  v42 = (double **)&unk_1E5D25800;
  v10 = v43;
  if (v43)
  {
    v11 = *(_DWORD *)(v43 + 56) - 1;
    *(_DWORD *)(v43 + 56) = v11;
    if (!v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  if (ReferenceScoreInHypothesis != INFINITY)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    result = (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
    v13 = a4[1] - *a4;
    if (v13)
    {
      v14 = v13 / 328;
      if (v14 <= 1)
        v14 = 1;
      v15 = *a4 + 12;
      do
      {
        *(_QWORD *)(v15 - 4) = 0x3F80000000000001;
        v15 += 328;
        --v14;
      }
      while (v14);
    }
    return result;
  }
  v16 = kaldi::quasar::ErrorBlamer::ComputeRankOfReference(a1, v7, (uint64_t)v8);
  v17 = *a4;
  if (v16 != -1 && a4[1] != v17)
  {
    v18 = 0;
    v19 = 0.0;
    v20 = 232;
    v21 = 0.0;
    v22 = 0.0;
    v23 = 0.0;
    do
    {
      v24 = (_QWORD *)(v17 + v20);
      v25 = v17 + v20 - 232;
      v23 = v23
          + kaldi::quasar::ErrorRegion::GetScoreSum(v25, 0, (*(_QWORD *)(v17 + v20 - 120) - *(_QWORD *)(v17 + v20 - 128)) >> 2, (_QWORD *)(v17 + v20 - 128));
      ScoreSum = kaldi::quasar::ErrorRegion::GetScoreSum(v25, 0, (*(v24 - 9) - *(v24 - 10)) >> 2, v24 - 10);
      v22 = v22
          + (float)(ScoreSum + kaldi::quasar::ErrorRegion::GetScoreSum(v25, 0, (*(v24 - 3) - *(v24 - 4)) >> 2, v24 - 4));
      v21 = v21 + kaldi::quasar::ErrorRegion::GetScoreSum(v25, 0, (*(v24 - 12) - *(v24 - 13)) >> 2, v24 - 13);
      v27 = kaldi::quasar::ErrorRegion::GetScoreSum(v25, 0, (*(v24 - 6) - *(v24 - 7)) >> 2, v24 - 7);
      v19 = v19 + (float)(v27 + kaldi::quasar::ErrorRegion::GetScoreSum(v25, 0, (*v24 - *(v24 - 1)) >> 2, v24 - 1));
      ++v18;
      v17 = *a4;
      v20 += 328;
    }
    while (0x8F9C18F9C18F9C19 * ((a4[1] - *a4) >> 3) > v18);
    if (v23 < v21)
    {
      v28 = 0.01;
      goto LABEL_19;
    }
    if (v22 < v19)
    {
      v28 = -0.01;
LABEL_19:
      v29 = vabds_f32(v22, v19) / (float)(v23 - v21);
      v30 = (float)(v23 + (float)(v22 - v19)) - v21;
      v31 = 1.0;
      while (1)
      {
        v29 = v28 + v29;
        if (v29 < 0.0 || v29 > 100.0)
          break;
        std::vector<std::vector<double>>::vector(&v42, 2uLL);
        v44 = 0;
        std::vector<fst::LatticeWeightTpl<float>>::resize((uint64_t)v42, 2uLL, &v44);
        v44 = 0;
        std::vector<fst::LatticeWeightTpl<float>>::resize((uint64_t)(v42 + 3), 2uLL, &v44);
        v33 = v42;
        **v42 = 1.0;
        v33[3][1] = (float)(v29 / v31);
        fst::ScaleLattice<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,double>(&v42, (uint64_t)v8);
        v44 = &v42;
        std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
        kaldi::quasar::ErrorBlamer::GetBestPath(v8, &v42);
        if (kaldi::quasar::ErrorBlamer::GetReferenceScoreInHypothesis(a1, v7, (uint64_t)&v42) == INFINITY)
        {
          v36 = (float)(v22 + (float)(v29 * v23)) - kaldi::quasar::ErrorBlamer::ComputeBestPathTotalScore(v34, &v42);
          if (v36 <= v30)
          {
            v35 = 1;
            v31 = v29;
            v30 = v36;
          }
          else
          {
            v35 = 0;
            v29 = INFINITY;
          }
        }
        else
        {
          v35 = 0;
        }
        v42 = (double **)&unk_1E5D25800;
        v37 = v43;
        if (v43 && (v38 = *(_DWORD *)(v43 + 56) - 1, (*(_DWORD *)(v43 + 56) = v38) == 0))
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
          if ((v35 & 1) == 0)
            goto LABEL_37;
        }
        else if ((v35 & 1) == 0)
        {
          goto LABEL_37;
        }
      }
      v29 = INFINITY;
LABEL_37:
      v17 = *a4;
      goto LABEL_38;
    }
  }
  v29 = INFINITY;
LABEL_38:
  v39 = a4[1] - v17;
  if (v39)
  {
    v40 = v39 / 328;
    if (v40 <= 1)
      v40 = 1;
    v41 = (float *)(v17 + 12);
    do
    {
      *((_DWORD *)v41 - 1) = v16;
      *v41 = v29;
      v41 += 82;
      --v40;
    }
    while (v40);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
}

void sub_1AD9384AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10, uint64_t a11, uint64_t a12)
{
  int v13;

  if (a10)
  {
    v13 = a10[14] - 1;
    a10[14] = v13;
    if (!v13)
      (*(void (**)(_DWORD *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::ErrorBlamer::AddAcousticOnlyDecoding(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  int *v7;
  int v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  int v18;
  int v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  char *v45;
  char *v46;
  void *__p;
  char *v48;
  char *v49;
  float v50;
  int v51;
  float v52;

  if ((*(unsigned int (**)(_QWORD *))(*a2 + 24))(a2) != -1)
  {
    __p = 0;
    v48 = 0;
    v49 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    LODWORD(v6) = (*(uint64_t (**)(_QWORD *))(*a2 + 24))(a2);
    do
    {
      v7 = *(int **)(*(_QWORD *)(*(_QWORD *)(a2[1] + 64) + 8 * (int)v6) + 24);
      v8 = *v7;
      if (*v7 && v8 != *(_DWORD *)(a1 + 104))
      {
        v9 = v48;
        if (v48 >= v49)
        {
          v11 = (char *)__p;
          v12 = (v48 - (_BYTE *)__p) >> 2;
          v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v14 = v49 - (_BYTE *)__p;
          if ((v49 - (_BYTE *)__p) >> 1 > v13)
            v13 = v14 >> 1;
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
            v15 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v15 = v13;
          if (v15)
          {
            v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v49, v15);
            v11 = (char *)__p;
            v9 = v48;
            v8 = *v7;
          }
          else
          {
            v16 = 0;
          }
          v17 = &v16[4 * v12];
          *(_DWORD *)v17 = v8;
          v10 = v17 + 4;
          while (v9 != v11)
          {
            v18 = *((_DWORD *)v9 - 1);
            v9 -= 4;
            *((_DWORD *)v17 - 1) = v18;
            v17 -= 4;
          }
          __p = v17;
          v48 = v10;
          v49 = &v16[4 * v15];
          if (v11)
            operator delete(v11);
        }
        else
        {
          *(_DWORD *)v48 = v8;
          v10 = v9 + 4;
        }
        v48 = v10;
        v19 = v7[3];
        v20 = v45;
        if (v45 >= v46)
        {
          v22 = (char *)v44;
          v23 = (v45 - (_BYTE *)v44) >> 2;
          v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v25 = v46 - (_BYTE *)v44;
          if ((v46 - (_BYTE *)v44) >> 1 > v24)
            v24 = v25 >> 1;
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
            v26 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v26 = v24;
          if (v26)
          {
            v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v46, v26);
            v22 = (char *)v44;
            v20 = v45;
          }
          else
          {
            v27 = 0;
          }
          v28 = &v27[4 * v23];
          *(_DWORD *)v28 = v19;
          v21 = v28 + 4;
          while (v20 != v22)
          {
            v29 = *((_DWORD *)v20 - 1);
            v20 -= 4;
            *((_DWORD *)v28 - 1) = v29;
            v28 -= 4;
          }
          v44 = v28;
          v45 = v21;
          v46 = &v27[4 * v26];
          if (v22)
            operator delete(v22);
        }
        else
        {
          *(_DWORD *)v45 = v19;
          v21 = v20 + 4;
        }
        v45 = v21;
      }
      v6 = v7[4];
      (*(void (**)(void **__return_ptr, _QWORD *, uint64_t))(*a2 + 32))(&v41, a2, v6);
      v52 = *((float *)&v41 + 1);
      LODWORD(v38) = (_DWORD)v41;
      v51 = 0;
      v50 = 0.0;
    }
    while (*(float *)&v41 != 0.0 || v52 != v50);
    v30 = *a3;
    if (a3[1] != *a3)
    {
      v31 = 0;
      v32 = 0;
      do
      {
        v33 = v30 + v31;
        v34 = *(int *)(v30 + v31 + 44);
        v35 = *(int *)(v30 + v31 + 52);
        v42 = 0;
        v43 = 0;
        v41 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>(&v41, (char *)__p + 4 * v34, (uint64_t)__p + 4 * v35, v35 - v34);
        v36 = *(int *)(v33 + 44);
        v37 = *(int *)(v33 + 52);
        v39 = 0;
        v40 = 0;
        v38 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(&v38, (char *)v44 + 4 * v36, (uint64_t)v44 + 4 * v37, v37 - v36);
        kaldi::quasar::ErrorRegion::AddAcousticOnlyDecoding(v33, (uint64_t)&v41, (uint64_t)&v38);
        if (v38)
        {
          v39 = v38;
          operator delete(v38);
        }
        if (v41)
        {
          v42 = v41;
          operator delete(v41);
        }
        ++v32;
        v30 = *a3;
        v31 += 328;
      }
      while (0x8F9C18F9C18F9C19 * ((a3[1] - *a3) >> 3) > v32);
    }
    if (v44)
    {
      v45 = (char *)v44;
      operator delete(v44);
    }
    if (__p)
    {
      v48 = (char *)__p;
      operator delete(__p);
    }
  }
}

void sub_1AD9388A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::ErrorBlamer::AddConfidenceScores(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  int v16;
  int v17;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t (**v22)(kaldi::quasar::FloatAttribute *__hidden);
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;

  v4 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v8 = *a3;
    v7 = a3[1];
    if (v7 == *a3)
    {
      v10 = 0;
    }
    else
    {
      v9 = 0;
      v10 = 0;
      v11 = -1431655765 * ((uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3) - 3;
      do
      {
        v12 = (uint64_t *)(v8 + 328 * v9);
        v14 = v12 + 10;
        v13 = v12[10];
        if (v12[11] != v13)
        {
          v15 = 0;
          do
          {
            v16 = *(_DWORD *)(v13 + 4 * v15);
            if (v16 && v16 != *(_DWORD *)(a1 + 104))
            {
              if (v10 >= (unint64_t)((a2[1] - *a2) >> 2))
              {
                if (kaldi::g_kaldi_verbose_level >= -1)
                {
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Unexpected number of confidenceScores", 37);
                  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
                }
              }
              else
              {
                v17 = *(_DWORD *)(*a2 + 4 * v10);
                v23 = 1;
                v24 = v11;
                v22 = &off_1E5D33010;
                v25 = 0;
                v26 = v17;
                v27 = 0;
                kaldi::quasar::ErrorRegion::AddAttribute((kaldi::quasar::ErrorRegion *)v12, (kaldi::quasar::AbstractAttribute *)&v22, v15);
                ++v10;
                quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v22);
              }
            }
            ++v15;
            v13 = *v14;
          }
          while (v15 < (v12[11] - *v14) >> 2);
          v8 = *a3;
          v7 = a3[1];
        }
        ++v9;
      }
      while (0x8F9C18F9C18F9C19 * ((v7 - v8) >> 3) > v9);
      v4 = *a2;
      v3 = a2[1];
    }
    if (v10 != (v3 - v4) >> 2 && kaldi::g_kaldi_verbose_level > -2)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Unexpected number of confidenceScores got ", 42);
      v19 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" words in lattice and got ", 26);
      v20 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" confidence scores", 18);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
    }
  }
}

void sub_1AD938B4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ErrorBlamer::AddSchematicAttributes(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v10;
  uint64_t StringAttribute;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  int v17;
  kaldi::quasar::AbstractAttribute **v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  kaldi::quasar::AbstractAttribute **v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t **v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  void *__p;
  uint64_t *v39;
  _QWORD v40[33];

  v3 = *a2;
  v4 = a2[1];
  if (*a2 == v4)
    return;
  v6 = a1[10];
  v7 = a1[11];
  if (v6 == v7)
  {
    if (kaldi::g_kaldi_verbose_level < -1)
      return;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Schematics have to be registered first before usage, call RegisterSchematics first", 82);
LABEL_56:
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    return;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v3) >> 3) != 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 3) - 3)
  {
    if (kaldi::g_kaldi_verbose_level < -1)
      return;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Size of registered schematics is ", 33);
    v36 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" does not match with supplied schematics for utterance, which are ", 66);
    std::ostream::operator<<();
    goto LABEL_56;
  }
  v10 = 0;
  __p = 0;
  v39 = 0;
  v40[0] = 0;
  do
  {
    if (*(_DWORD *)(a1[7] + 4 * v10) == 3)
    {
      StringAttribute = (uint64_t)kaldi::quasar::AttributeFactory::CreateStringAttribute((kaldi::quasar::AttributeFactory *)(a1 + 1), v10, v3 + 24 * v10);
      v12 = v39;
      if ((unint64_t)v39 < v40[0])
        goto LABEL_16;
      v13 = ((char *)v39 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v13 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v14 = (uint64_t)(v40[0] - (_QWORD)__p) >> 2;
      if (v14 <= v13 + 1)
        v14 = v13 + 1;
      if (v40[0] - (_QWORD)__p >= 0x7FFFFFFFFFFFFFF8uLL)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      if (v15)
        v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v40, v15);
      else
        v16 = 0;
      v21 = (uint64_t *)&v16[8 * v13];
      *v21 = StringAttribute;
      v18 = (kaldi::quasar::AbstractAttribute **)(v21 + 1);
      v23 = (char *)__p;
      v22 = (char *)v39;
      if (v39 != __p)
      {
        do
        {
          v24 = *((_QWORD *)v22 - 1);
          v22 -= 8;
          *--v21 = v24;
        }
        while (v22 != v23);
LABEL_32:
        v22 = (char *)__p;
      }
    }
    else
    {
      v37 = 0;
      kaldi::ConvertStringToReal(v3 + 24 * v10, (float *)&v37);
      StringAttribute = operator new();
      v17 = v37;
      *(_DWORD *)(StringAttribute + 8) = 1;
      *(_DWORD *)(StringAttribute + 12) = v10;
      *(_QWORD *)StringAttribute = &off_1E5D33010;
      *(_DWORD *)(StringAttribute + 16) = 0;
      *(_DWORD *)(StringAttribute + 20) = v17;
      *(_QWORD *)(StringAttribute + 24) = 0;
      v12 = v39;
      if ((unint64_t)v39 < v40[0])
      {
LABEL_16:
        *v12 = StringAttribute;
        v18 = (kaldi::quasar::AbstractAttribute **)(v12 + 1);
        goto LABEL_35;
      }
      v19 = ((char *)v39 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v19 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v20 = (uint64_t)(v40[0] - (_QWORD)__p) >> 2;
      if (v20 <= v19 + 1)
        v20 = v19 + 1;
      if (v40[0] - (_QWORD)__p >= 0x7FFFFFFFFFFFFFF8uLL)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v20;
      if (v15)
        v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v40, v15);
      else
        v16 = 0;
      v21 = (uint64_t *)&v16[8 * v19];
      *v21 = StringAttribute;
      v18 = (kaldi::quasar::AbstractAttribute **)(v21 + 1);
      v25 = (char *)__p;
      v22 = (char *)v39;
      if (v39 != __p)
      {
        do
        {
          v26 = *((_QWORD *)v22 - 1);
          v22 -= 8;
          *--v21 = v26;
        }
        while (v22 != v25);
        goto LABEL_32;
      }
    }
    __p = v21;
    v39 = (uint64_t *)v18;
    v40[0] = &v16[8 * v15];
    if (v22)
      operator delete(v22);
LABEL_35:
    v39 = (uint64_t *)v18;
    ++v10;
    v3 = *a2;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > v10);
  v27 = (kaldi::quasar::AbstractAttribute **)__p;
  v29 = *a3;
  v28 = a3[1];
  if (v28 != *a3)
  {
    v30 = 0;
    do
    {
      if (v18 == v27)
      {
        v18 = v27;
      }
      else
      {
        v31 = 0;
        v32 = (uint64_t **)(v29 + 328 * v30);
        do
        {
          kaldi::quasar::ErrorRegion::AddAttribute(v32, v27[v31++]);
          v27 = (kaldi::quasar::AbstractAttribute **)__p;
          v18 = (kaldi::quasar::AbstractAttribute **)v39;
        }
        while (v31 < ((char *)v39 - (_BYTE *)__p) >> 3);
        v29 = *a3;
        v28 = a3[1];
      }
      ++v30;
    }
    while (0x8F9C18F9C18F9C19 * ((v28 - v29) >> 3) > v30);
  }
  if (v18 != v27)
  {
    v33 = 0;
    do
    {
      v34 = (*(uint64_t (**)(kaldi::quasar::AbstractAttribute *))(*(_QWORD *)v27[v33] + 56))(v27[v33]);
      v27 = (kaldi::quasar::AbstractAttribute **)__p;
      if ((v34 & 1) == 0)
      {
        v35 = *((_QWORD *)__p + v33);
        if (v35)
        {
          (*(void (**)(_QWORD))(*(_QWORD *)v35 + 72))(*((_QWORD *)__p + v33));
          v27 = (kaldi::quasar::AbstractAttribute **)__p;
        }
      }
      ++v33;
    }
    while (v33 < ((char *)v39 - (char *)v27) >> 3);
  }
  if (v27)
  {
    v39 = (uint64_t *)v27;
    operator delete(v27);
  }
}

void sub_1AD938FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
  _Unwind_Resume(a1);
}

float kaldi::quasar::ErrorRegion::GetRefTotalScore(kaldi::quasar::ErrorRegion *this)
{
  float ScoreSum;
  float v3;

  ScoreSum = kaldi::quasar::ErrorRegion::GetScoreSum((uint64_t)this, 0, (*((_QWORD *)this + 14) - *((_QWORD *)this + 13)) >> 2, (_QWORD *)this + 13);
  v3 = ScoreSum
     + kaldi::quasar::ErrorRegion::GetScoreSum((uint64_t)this, 0, (*((_QWORD *)this + 20) - *((_QWORD *)this + 19)) >> 2, (_QWORD *)this + 19);
  return v3
       + kaldi::quasar::ErrorRegion::GetScoreSum((uint64_t)this, 0, (*((_QWORD *)this + 26) - *((_QWORD *)this + 25)) >> 2, (_QWORD *)this + 25);
}

float kaldi::quasar::ErrorRegion::GetHypoTotalScore(kaldi::quasar::ErrorRegion *this)
{
  float ScoreSum;
  float v3;

  ScoreSum = kaldi::quasar::ErrorRegion::GetScoreSum((uint64_t)this, 0, (*((_QWORD *)this + 17) - *((_QWORD *)this + 16)) >> 2, (_QWORD *)this + 16);
  v3 = ScoreSum
     + kaldi::quasar::ErrorRegion::GetScoreSum((uint64_t)this, 0, (*((_QWORD *)this + 23) - *((_QWORD *)this + 22)) >> 2, (_QWORD *)this + 22);
  return v3
       + kaldi::quasar::ErrorRegion::GetScoreSum((uint64_t)this, 0, (*((_QWORD *)this + 29) - *((_QWORD *)this + 28)) >> 2, (_QWORD *)this + 28);
}

void kaldi::quasar::ErrorBlamer::AddWordContextAttributes(_DWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  char *v4;
  int v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  int v33;
  int v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  int v43;
  BOOL v44;
  unint64_t v45;
  int v46;
  kaldi::quasar::ErrorRegion *v47;
  int *v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *ContextAttribute;
  uint64_t *v58;
  char *__p;
  char *v61;
  char *v62;

  __p = 0;
  v61 = 0;
  v62 = 0;
  LODWORD(v3) = a1[27];
  if ((int)v3 < 1)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    do
    {
      if (v4 >= v62)
      {
        v6 = __p;
        v7 = (v4 - __p) >> 2;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v9 = v62 - __p;
        if ((v62 - __p) >> 1 > v8)
          v8 = v9 >> 1;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
          v10 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        if (v10)
        {
          v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v62, v10);
          v6 = __p;
          v4 = v61;
        }
        else
        {
          v11 = 0;
        }
        v12 = &v11[4 * v7];
        *(_DWORD *)v12 = a1[26];
        v13 = v12 + 4;
        while (v4 != v6)
        {
          v14 = *((_DWORD *)v4 - 1);
          v4 -= 4;
          *((_DWORD *)v12 - 1) = v14;
          v12 -= 4;
        }
        __p = v12;
        v62 = &v11[4 * v10];
        if (v6)
          operator delete(v6);
        v4 = v13;
      }
      else
      {
        *(_DWORD *)v4 = a1[26];
        v4 += 4;
      }
      v61 = v4;
      ++v5;
      LODWORD(v3) = a1[27];
    }
    while (v5 < (int)v3);
  }
  v16 = *a2;
  v15 = a2[1];
  if (v15 == *a2)
  {
    v16 = a2[1];
    if ((v3 & 0x80000000) != 0)
      goto LABEL_71;
    goto LABEL_52;
  }
  v17 = 0;
  do
  {
    v18 = v16 + 328 * v17;
    v21 = *(_QWORD *)(v18 + 80);
    v20 = (uint64_t *)(v18 + 80);
    v19 = v21;
    v22 = v20[1];
    if (v22 != v21)
    {
      v23 = 0;
      do
      {
        v24 = *(_DWORD *)(v19 + 4 * v23);
        if (v24 && v24 != a1[26])
        {
          if (v4 >= v62)
          {
            v26 = __p;
            v27 = (v4 - __p) >> 2;
            v28 = v27 + 1;
            if ((unint64_t)(v27 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v29 = v62 - __p;
            if ((v62 - __p) >> 1 > v28)
              v28 = v29 >> 1;
            if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
              v30 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v30 = v28;
            if (v30)
            {
              v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v62, v30);
              v26 = __p;
              v4 = v61;
              v24 = *(_DWORD *)(v19 + 4 * v23);
            }
            else
            {
              v31 = 0;
            }
            v32 = &v31[4 * v27];
            *(_DWORD *)v32 = v24;
            v25 = v32 + 4;
            while (v4 != v26)
            {
              v33 = *((_DWORD *)v4 - 1);
              v4 -= 4;
              *((_DWORD *)v32 - 1) = v33;
              v32 -= 4;
            }
            __p = v32;
            v62 = &v31[4 * v30];
            if (v26)
              operator delete(v26);
          }
          else
          {
            *(_DWORD *)v4 = v24;
            v25 = v4 + 4;
          }
          v61 = v25;
          v22 = v20[1];
          v19 = *v20;
          v4 = v25;
        }
        ++v23;
      }
      while (v23 < (v22 - v19) >> 2);
      v16 = *a2;
      v15 = a2[1];
    }
    ++v17;
  }
  while (0x8F9C18F9C18F9C19 * ((v15 - v16) >> 3) > v17);
  LODWORD(v3) = a1[27];
  if ((v3 & 0x80000000) == 0)
  {
LABEL_52:
    v34 = 0;
    do
    {
      if (v4 >= v62)
      {
        v36 = __p;
        v37 = (v4 - __p) >> 2;
        v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v39 = v62 - __p;
        if ((v62 - __p) >> 1 > v38)
          v38 = v39 >> 1;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
          v40 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v40 = v38;
        if (v40)
        {
          v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v62, v40);
          v36 = __p;
          v4 = v61;
        }
        else
        {
          v41 = 0;
        }
        v42 = &v41[4 * v37];
        *(_DWORD *)v42 = a1[26];
        v35 = v42 + 4;
        while (v4 != v36)
        {
          v43 = *((_DWORD *)v4 - 1);
          v4 -= 4;
          *((_DWORD *)v42 - 1) = v43;
          v42 -= 4;
        }
        __p = v42;
        v62 = &v41[4 * v40];
        if (v36)
          operator delete(v36);
      }
      else
      {
        *(_DWORD *)v4 = a1[26];
        v35 = v4 + 4;
      }
      v61 = v35;
      LODWORD(v3) = a1[27];
      v4 = v35;
      v44 = v34++ < (int)v3;
    }
    while (v44);
    v16 = *a2;
    v15 = a2[1];
  }
LABEL_71:
  if (v15 != v16)
  {
    v45 = 0;
    v46 = v3;
    do
    {
      v47 = (kaldi::quasar::ErrorRegion *)(v16 + 328 * v45);
      v48 = (int *)*((_QWORD *)v47 + 10);
      v49 = 0;
      v50 = *((_QWORD *)v47 + 11) - (_QWORD)v48;
      if (v50)
      {
        v51 = v50 >> 2;
        if (v51 <= 1)
          v51 = 1;
        do
        {
          v53 = *v48++;
          v52 = v53;
          if (v53 && v52 != a1[26])
            ++v49;
          --v51;
        }
        while (v51);
      }
      if ((int)v3 >= 1)
      {
        v54 = 4 * v46;
        v55 = -1;
        v56 = 1;
        do
        {
          ContextAttribute = kaldi::quasar::AttributeFactory::CreateContextAttribute((kaldi::quasar::AttributeFactory *)(a1 + 2), *(_DWORD *)&__p[4 * v55 + v54], v55, 3u, 1u);
          kaldi::quasar::ErrorRegion::AddAttribute(v47, (kaldi::quasar::AbstractAttribute *)ContextAttribute, 0);
          v58 = kaldi::quasar::AttributeFactory::CreateContextAttribute((kaldi::quasar::AttributeFactory *)(a1 + 2), *(_DWORD *)&__p[4 * v56 + v54], v56, 3u, 1u);
          kaldi::quasar::ErrorRegion::AddAttribute(v47, (kaldi::quasar::AbstractAttribute *)v58, 0);
          v3 = (int)a1[27];
          --v55;
          v44 = v56++ < v3;
        }
        while (v44);
        v16 = *a2;
        v15 = a2[1];
      }
      v46 += v49;
      ++v45;
    }
    while (0x8F9C18F9C18F9C19 * ((v15 - v16) >> 3) > v45);
  }
  if (__p)
    operator delete(__p);
}

void sub_1AD9395B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::ErrorBlamer::GetTimeAlignedErrorRegions(float *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4)
{
  float v8;
  float v9;
  uint64_t *v10;
  float v11;
  float v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  void *v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  char v26;
  uint64_t v27;
  void *v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  void *v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  uint64_t result;
  int v40;
  void **v41;
  void *__p;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t *v49[6];
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  void *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  float v62;
  float v63;
  float v64;
  float v65;

  v9 = a1[29];
  v8 = a1[30];
  std::vector<std::vector<double>>::vector(v49, 2uLL);
  v41 = 0;
  std::vector<fst::LatticeWeightTpl<float>>::resize((uint64_t)v49[0], 2uLL, &v41);
  v41 = 0;
  std::vector<fst::LatticeWeightTpl<float>>::resize((uint64_t)(v49[0] + 3), 2uLL, &v41);
  v10 = v49[0];
  **(double **)v49[0] = v8;
  *(double *)(v10[3] + 8) = v9;
  fst::ScaleLattice<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,double>((double ***)v49, (uint64_t)a2);
  v41 = (void **)v49;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v41);
  v12 = a1[29];
  v11 = a1[30];
  std::vector<std::vector<double>>::vector(v49, 2uLL);
  v41 = 0;
  std::vector<fst::LatticeWeightTpl<float>>::resize((uint64_t)v49[0], 2uLL, &v41);
  v41 = 0;
  std::vector<fst::LatticeWeightTpl<float>>::resize((uint64_t)(v49[0] + 3), 2uLL, &v41);
  v13 = v49[0];
  **(double **)v49[0] = v11;
  *(double *)(v13[3] + 8) = v12;
  fst::ScaleLattice<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,double>((double ***)v49, (uint64_t)a3);
  v41 = (void **)v49;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v41);
  kaldi::quasar::ErrorBlamer::GetBestPath(a2, &v60);
  kaldi::quasar::ErrorBlamer::GetBestPath(a3, &v58);
  v14 = kaldi::quasar::ErrorBlamer::RemoveLanguageModelCost((uint64_t)a1, (uint64_t)&v60);
  v15 = kaldi::quasar::ErrorBlamer::RemoveLanguageModelCost((uint64_t)a1, (uint64_t)&v58);
  v16 = *(_DWORD *)(v61 + 88);
  v56 = *(_DWORD *)(v59 + 88);
  v57 = v16;
  kaldi::quasar::ErrorRegion::ErrorRegion((kaldi::quasar::ErrorRegion *)v49, 0, 0);
  while (1)
  {
    v17 = *(_QWORD *)(*(_QWORD *)(v61 + 64) + 8 * v57);
    v41 = *(void ***)v17;
    v43 = 0;
    v44 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(v17 + 8), *(_QWORD *)(v17 + 16), (uint64_t)(*(_QWORD *)(v17 + 16) - *(_QWORD *)(v17 + 8)) >> 2);
    v65 = *((float *)&v41 + 1);
    LODWORD(v45) = (_DWORD)v41;
    v64 = INFINITY;
    v63 = INFINITY;
    if (*(float *)&v41 != INFINITY || v65 != v63)
    {
      v19 = 0;
      goto LABEL_8;
    }
    v18 = __p;
    if (v43 == __p)
    {
      v22 = *(uint64_t **)(*(_QWORD *)(v59 + 64) + 8 * v56);
      v45 = *v22;
      v47 = 0;
      v48 = 0;
      v46 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v46, (const void *)v22[1], v22[2], (v22[2] - v22[1]) >> 2);
      v64 = *((float *)&v45 + 1);
      v65 = *(float *)&v45;
      v63 = INFINITY;
      v62 = INFINITY;
      if (*(float *)&v45 == INFINITY)
      {
        v23 = v46;
        if (v64 == v62)
        {
          v19 = v47 == v46;
          if (!v46)
            goto LABEL_8;
        }
        else
        {
          v19 = 0;
          if (!v46)
            goto LABEL_8;
        }
      }
      else
      {
        v19 = 0;
        v23 = v46;
        if (!v46)
        {
LABEL_8:
          v18 = __p;
          if (!__p)
            goto LABEL_10;
LABEL_9:
          v43 = v18;
          operator delete(v18);
          goto LABEL_10;
        }
      }
      v47 = v23;
      operator delete(v23);
      goto LABEL_8;
    }
    v19 = 0;
    if (__p)
      goto LABEL_9;
LABEL_10:
    if (!v19)
      break;
    if (v50 >= v51)
      kaldi::quasar::ErrorRegion::AddHypoWord((uint64_t *)v49, &v58, v15, (unsigned int *)&v56);
    else
      kaldi::quasar::ErrorRegion::AddRefWord((uint64_t)v49, &v60, v14, (unsigned int *)&v57);
    if (v52 != v53 && v54 != v55 && kaldi::quasar::ErrorRegion::Overlap((kaldi::quasar::ErrorRegion *)v49) >= a1[28])
    {
      if (kaldi::quasar::ErrorRegion::HaveSameWordSequence((kaldi::quasar::ErrorRegion *)v49))
      {
        v41 = (void **)&off_1E5D32A08;
        __p = (void *)0x3F80000000000000;
        LODWORD(v43) = 0;
        kaldi::quasar::ErrorRegion::AddAttribute(v49, (kaldi::quasar::AbstractAttribute *)&v41);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v41);
      }
      v20 = a4[1];
      if (v20 >= a4[2])
      {
        v21 = std::vector<kaldi::quasar::ErrorRegion>::__push_back_slow_path<kaldi::quasar::ErrorRegion const&>(a4, (const kaldi::quasar::ErrorRegion *)v49);
      }
      else
      {
        kaldi::quasar::ErrorRegion::ErrorRegion((kaldi::quasar::ErrorRegion *)a4[1], (const kaldi::quasar::ErrorRegion *)v49);
        v21 = v20 + 328;
        a4[1] = v20 + 328;
      }
      a4[1] = v21;
      kaldi::quasar::ErrorRegion::ErrorRegion((kaldi::quasar::ErrorRegion *)&v41, v50, v51);
      kaldi::quasar::ErrorRegion::operator=((kaldi::quasar::ErrorRegion *)v49, (const kaldi::quasar::ErrorRegion *)&v41);
      kaldi::quasar::ErrorRegion::~ErrorRegion((kaldi::quasar::ErrorRegion *)&v41);
    }
  }
  while (1)
  {
    v24 = *(_QWORD *)(*(_QWORD *)(v61 + 64) + 8 * v57);
    v41 = *(void ***)v24;
    v43 = 0;
    v44 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(v24 + 8), *(_QWORD *)(v24 + 16), (uint64_t)(*(_QWORD *)(v24 + 16) - *(_QWORD *)(v24 + 8)) >> 2);
    v65 = *((float *)&v41 + 1);
    LODWORD(v45) = (_DWORD)v41;
    v64 = INFINITY;
    v63 = INFINITY;
    if (*(float *)&v41 == INFINITY)
    {
      v25 = __p;
      if (v65 != v63 || v43 != __p)
      {
        v26 = 0;
        if (!__p)
          goto LABEL_36;
LABEL_35:
        v43 = v25;
        operator delete(v25);
        goto LABEL_36;
      }
      v26 = 1;
      if (__p)
        goto LABEL_35;
    }
    else
    {
      v26 = 0;
      v25 = __p;
      if (__p)
        goto LABEL_35;
    }
LABEL_36:
    if ((v26 & 1) == 0)
      break;
    kaldi::quasar::ErrorRegion::AddRefWord((uint64_t)v49, &v60, v14, (unsigned int *)&v57);
  }
  while (1)
  {
    v27 = *(_QWORD *)(*(_QWORD *)(v59 + 64) + 8 * v56);
    v41 = *(void ***)v27;
    v43 = 0;
    v44 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(v27 + 8), *(_QWORD *)(v27 + 16), (uint64_t)(*(_QWORD *)(v27 + 16) - *(_QWORD *)(v27 + 8)) >> 2);
    v65 = *((float *)&v41 + 1);
    LODWORD(v45) = (_DWORD)v41;
    v64 = INFINITY;
    v63 = INFINITY;
    if (*(float *)&v41 == INFINITY)
    {
      v28 = __p;
      if (v65 != v63 || v43 != __p)
      {
        v29 = 0;
        if (!__p)
          goto LABEL_47;
LABEL_46:
        v43 = v28;
        operator delete(v28);
        goto LABEL_47;
      }
      v29 = 1;
      if (__p)
        goto LABEL_46;
    }
    else
    {
      v29 = 0;
      v28 = __p;
      if (__p)
        goto LABEL_46;
    }
LABEL_47:
    if (!v29)
      break;
    kaldi::quasar::ErrorRegion::AddHypoWord((uint64_t *)v49, &v58, v15, (unsigned int *)&v56);
  }
  if (v52 == v53 || v54 == v55)
  {
    v32 = a4[1];
    if (*a4 != v32)
    {
      kaldi::quasar::ErrorRegion::AddErrorRegion((kaldi::quasar::ErrorRegion *)(v32 - 328), (const kaldi::quasar::ErrorRegion *)v49);
      v41 = (void **)&off_1E5D32A08;
      __p = (void *)0x3F80000000000000;
      LODWORD(v43) = 0;
      if (kaldi::quasar::ErrorRegion::HasAttribute((kaldi::quasar::ErrorRegion *)(a4[1] - 328), (kaldi::quasar::AbstractAttribute *)&v41)&& !kaldi::quasar::ErrorRegion::HaveSameWordSequence((kaldi::quasar::ErrorRegion *)(a4[1] - 328)))
      {
        kaldi::quasar::ErrorRegion::RemoveAttribute(a4[1] - 328, (kaldi::quasar::AbstractAttribute *)&v41);
      }
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v41);
    }
  }
  else
  {
    if (kaldi::quasar::ErrorRegion::HaveSameWordSequence((kaldi::quasar::ErrorRegion *)v49))
    {
      v41 = (void **)&off_1E5D32A08;
      __p = (void *)0x3F80000000000000;
      LODWORD(v43) = 0;
      kaldi::quasar::ErrorRegion::AddAttribute(v49, (kaldi::quasar::AbstractAttribute *)&v41);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v41);
    }
    v30 = a4[1];
    if (v30 >= a4[2])
    {
      v31 = std::vector<kaldi::quasar::ErrorRegion>::__push_back_slow_path<kaldi::quasar::ErrorRegion const&>(a4, (const kaldi::quasar::ErrorRegion *)v49);
    }
    else
    {
      kaldi::quasar::ErrorRegion::ErrorRegion((kaldi::quasar::ErrorRegion *)a4[1], (const kaldi::quasar::ErrorRegion *)v49);
      v31 = v30 + 328;
      a4[1] = v30 + 328;
    }
    a4[1] = v31;
  }
  v33 = *(_QWORD *)(*(_QWORD *)(v61 + 64) + 8 * v57);
  v41 = *(void ***)v33;
  v43 = 0;
  v44 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(v33 + 8), *(_QWORD *)(v33 + 16), (uint64_t)(*(_QWORD *)(v33 + 16) - *(_QWORD *)(v33 + 8)) >> 2);
  v65 = *((float *)&v41 + 1);
  LODWORD(v45) = (_DWORD)v41;
  v64 = INFINITY;
  v63 = INFINITY;
  if (*(float *)&v41 != INFINITY || (v34.n128_f32[0] = v65, v65 != v63) || (v35 = v43, v43 != __p))
  {
    v36 = *(uint64_t **)(*(_QWORD *)(v59 + 64) + 8 * v56);
    v45 = *v36;
    v47 = 0;
    v48 = 0;
    v46 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v46, (const void *)v36[1], v36[2], (v36[2] - v36[1]) >> 2);
    v64 = *((float *)&v45 + 1);
    v65 = *(float *)&v45;
    v63 = INFINITY;
    v62 = INFINITY;
    v34.n128_u32[0] = v45;
    if (*(float *)&v45 == INFINITY)
      v34.n128_f32[0] = v62;
    if (v46)
    {
      v47 = v46;
      operator delete(v46);
    }
    v35 = __p;
  }
  if (v35)
  {
    v43 = v35;
    operator delete(v35);
  }
  if (v14)
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v14 + 8))(v14, v34);
  if (v15)
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v15 + 8))(v15, v34);
  kaldi::quasar::ErrorRegion::~ErrorRegion((kaldi::quasar::ErrorRegion *)v49);
  v58 = &unk_1E5D25800;
  v37 = v59;
  if (v59)
  {
    v38 = *(_DWORD *)(v59 + 56) - 1;
    *(_DWORD *)(v59 + 56) = v38;
    if (!v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  }
  v60 = &unk_1E5D25800;
  result = v61;
  if (v61)
  {
    v40 = *(_DWORD *)(v61 + 56) - 1;
    *(_DWORD *)(v61 + 56) = v40;
    if (!v40)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_1AD939E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v58;
  int v59;
  _DWORD *v60;
  int v61;

  *(_QWORD *)(v54 + 8) = v55;
  kaldi::quasar::ErrorRegion::~ErrorRegion((kaldi::quasar::ErrorRegion *)&a54);
  *(_QWORD *)(v56 - 152) = &unk_1E5D25800;
  v58 = *(_DWORD **)(v56 - 144);
  if (v58)
  {
    v59 = v58[14] - 1;
    v58[14] = v59;
    if (!v59)
      (*(void (**)(_DWORD *))(*(_QWORD *)v58 + 8))(v58);
  }
  *(_QWORD *)(v56 - 136) = &unk_1E5D25800;
  v60 = *(_DWORD **)(v56 - 128);
  if (v60)
  {
    v61 = v60[14] - 1;
    v60[14] = v61;
    if (!v61)
      (*(void (**)(_DWORD *))(*(_QWORD *)v60 + 8))(v60);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::ErrorBlamer::ComputeImpactOfErrorOnSucceedingErrorRegions(uint64_t a1, _QWORD *a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  int v9;

  v2 = *(_DWORD *)(a1 + 108);
  v3 = a2[10];
  v4 = (unint64_t)(a2[11] - v3) >> 2;
  if ((((_DWORD)v4 - 1) & 0x80000000) == 0)
  {
    v5 = a2[7];
    v6 = (unint64_t)(a2[8] - v5) >> 2;
    if ((((_DWORD)v6 - 1) & 0x80000000) == 0)
    {
      v7 = v6 - 2;
      v8 = v4 - 2;
      do
      {
        if (*(_DWORD *)(v3 + 4 * (v8 + 1)) != *(_DWORD *)(v5 + 4 * (v7 + 1)))
          break;
        --v2;
        v9 = v8-- | v7--;
      }
      while ((v9 & 0x80000000) == 0);
    }
  }
  return v2 & ~(v2 >> 31);
}

void fst::ScaleLattice<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,double>(double ***a1, uint64_t a2)
{
  uint64_t v4;
  double **v5;
  double **v6;
  double *v7;
  double *v8;
  double *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  void *v16;
  float v17;
  float v18;
  _DWORD v19[2];
  void *v20;
  void *v21;
  uint64_t v22;
  void **v23;
  void *__p;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  _BYTE *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  float v34;
  int v35;

  std::vector<std::vector<double>>::vector(&v27, 2uLL);
  v23 = 0;
  std::vector<fst::LatticeWeightTpl<float>>::resize(v27, 2uLL, &v23);
  v23 = 0;
  std::vector<fst::LatticeWeightTpl<float>>::resize(v27 + 24, 2uLL, &v23);
  v4 = v27;
  *(_QWORD *)(*(_QWORD *)(v27 + 24) + 8) = 0x3FF0000000000000;
  **(_QWORD **)v4 = 0x3FF0000000000000;
  v6 = *a1;
  v5 = a1[1];
  if ((_BYTE *)((char *)v5 - (char *)*a1) == (char *)v28 - v4)
  {
    while (v6 != v5)
    {
      v8 = *v6;
      v7 = v6[1];
      v9 = *(double **)v4;
      if ((char *)v7 - (char *)*v6 != *(_QWORD *)(v4 + 8) - *(_QWORD *)v4)
        goto LABEL_8;
      while (v8 != v7)
      {
        if (*v8 != *v9)
          goto LABEL_8;
        ++v8;
        ++v9;
      }
      v6 += 3;
      v4 += 24;
    }
    v23 = (void **)&v27;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v23);
  }
  else
  {
LABEL_8:
    v23 = (void **)&v27;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v23);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 160))(a2);
    if (v10 >= 1)
    {
      v11 = v10;
      v12 = 0;
      do
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 296))(a2, v12, &v33);
        while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v33 + 24))(v33))
        {
          v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 32))(v33);
          v27 = *(_QWORD *)v13;
          v28 = *(void **)(v13 + 8);
          v30 = 0;
          v31 = 0;
          v29 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v29, *(const void **)(v13 + 16), *(_QWORD *)(v13 + 24), (uint64_t)(*(_QWORD *)(v13 + 24) - *(_QWORD *)(v13 + 16)) >> 2);
          v32 = *(_DWORD *)(v13 + 40);
          v14 = INFINITY;
          v15 = INFINITY;
          if (*(float *)&v28 != INFINITY)
          {
            v14 = (**a1)[1] * *((float *)&v28 + 1) + ***a1 * *(float *)&v28;
            v15 = (*a1)[3][1] * *((float *)&v28 + 1) + *(*a1)[3] * *(float *)&v28;
          }
          v23 = (void **)__PAIR64__(LODWORD(v15), LODWORD(v14));
          v25 = 0;
          v26 = 0;
          __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v29, (uint64_t)v30, (v30 - (_BYTE *)v29) >> 2);
          v28 = v23;
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v29, (char *)__p, (uint64_t)v25, (v25 - (_BYTE *)__p) >> 2);
          if (__p)
          {
            v25 = __p;
            operator delete(__p);
          }
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v33 + 88))(v33, &v27);
          if (v29)
          {
            v30 = v29;
            operator delete(v29);
          }
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 40))(v33);
        }
        if (v33)
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(&v27, a2, v12);
        LODWORD(v33) = HIDWORD(v27);
        LODWORD(v23) = v27;
        v35 = 2139095040;
        v34 = INFINITY;
        if (*(float *)&v27 != INFINITY || *(float *)&v33 != v34 || (v16 = v28, v29 != v28))
        {
          v17 = INFINITY;
          v18 = INFINITY;
          if (*(float *)&v27 != INFINITY)
          {
            v17 = (**a1)[1] * *((float *)&v27 + 1) + ***a1 * *(float *)&v27;
            v18 = (*a1)[3][1] * *((float *)&v27 + 1) + *(*a1)[3] * *(float *)&v27;
          }
          *(float *)v19 = v17;
          *(float *)&v19[1] = v18;
          v21 = 0;
          v22 = 0;
          v20 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v20, v28, (uint64_t)v29, ((_BYTE *)v29 - (_BYTE *)v28) >> 2);
          (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)a2 + 184))(a2, v12, v19);
          if (v20)
          {
            v21 = v20;
            operator delete(v20);
          }
          v16 = v28;
        }
        if (v16)
        {
          v29 = v16;
          operator delete(v16);
        }
        v12 = (v12 + 1);
      }
      while ((_DWORD)v12 != v11);
    }
  }
}

void sub_1AD93A3E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char *a13, void *a14, uint64_t a15, uint64_t a16, char a17, void *a18, void *a19, uint64_t a20)
{
  a13 = &a17;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ErrorBlamer::GetBestPath(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(a2);
  kaldi::CompactLatticeShortestPath(a1, (uint64_t)a2, 0);
}

void sub_1AD93A4BC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  *v1 = &unk_1E5D25800;
  if (v1[1])
    kaldi::quasar::ErrorBlamer::GetBestPath();
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::ErrorBlamer::RemoveLanguageModelCost(uint64_t a1, uint64_t a2)
{
  double **v4;
  uint64_t v5;
  float v6;
  void **v7;
  void **v9[3];
  double **v10[3];
  void ***v11;

  std::vector<std::vector<double>>::vector(v10, 2uLL);
  v9[0] = 0;
  std::vector<fst::LatticeWeightTpl<float>>::resize((uint64_t)v10[0], 2uLL, v9);
  v9[0] = 0;
  std::vector<fst::LatticeWeightTpl<float>>::resize((uint64_t)(v10[0] + 3), 2uLL, v9);
  v4 = v10[0];
  **(_QWORD **)v10[0] = 0;
  v4[3][1] = 1.0;
  v5 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  fst::ScaleLattice<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,double>(v10, v5);
  kaldi::AddTransitionProbs(*(kaldi **)(a1 + 136), v5, *(float *)(a1 + 124), *(float *)(a1 + 128));
  v6 = *(float *)(a1 + 120);
  std::vector<std::vector<double>>::vector(v9, 2uLL);
  v11 = 0;
  std::vector<fst::LatticeWeightTpl<float>>::resize((uint64_t)v9[0], 2uLL, &v11);
  v11 = 0;
  std::vector<fst::LatticeWeightTpl<float>>::resize((uint64_t)(v9[0] + 3), 2uLL, &v11);
  v7 = v9[0];
  **(double **)v9[0] = v6;
  *((_QWORD *)v7[3] + 1) = 0;
  fst::ScaleLattice<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,double>((double ***)v9, v5);
  v11 = v9;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  v9[0] = (void **)v10;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](v9);
  return v5;
}

void sub_1AD93A61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v14 - 40) = v13;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 40));
  a10 = (void **)&a13;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ErrorBlamer::ReplaceEpsilonWithNoLabel(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];
  void *__p;
  void *v15;
  uint64_t v16;
  int v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 72) - *(_QWORD *)(*(_QWORD *)(a2 + 8) + 64);
  if ((int)(v2 >> 3) >= 1)
  {
    v5 = 0;
    v6 = (v2 >> 3);
    do
    {
      v18 = &unk_1E5D21420;
      v21 = 0;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(a2);
      v7 = *(_QWORD *)(a2 + 8);
      v8 = *(_QWORD *)(*(_QWORD *)(v7 + 64) + 8 * v5);
      v19 = v8;
      v20 = v7 + 8;
      for (i = v21; ; i = ++v21)
      {
        v11 = v8 + 48;
        v10 = *(_QWORD *)(v8 + 48);
        if (i >= 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v11 + 8) - v10) >> 4))
          break;
        v12 = v10 + 48 * i;
        v13[0] = *(_QWORD *)v12;
        v13[1] = *(_QWORD *)(v12 + 8);
        v15 = 0;
        v16 = 0;
        __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(v12 + 16), *(_QWORD *)(v12 + 24), (uint64_t)(*(_QWORD *)(v12 + 24) - *(_QWORD *)(v12 + 16)) >> 2);
        v17 = *(_DWORD *)(v12 + 40);
        if (!HIDWORD(v13[0]) || HIDWORD(v13[0]) == *(_DWORD *)(a1 + 104))
          HIDWORD(v13[0]) = -1;
        fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::SetValue((uint64_t)&v18, (float *)v13);
        if (__p)
        {
          v15 = __p;
          operator delete(__p);
        }
        v8 = v19;
      }
      ++v5;
    }
    while (v5 != v6);
  }
}

void sub_1AD93A7C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::ErrorBlamer::ComputeRankOfReference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  float ReferenceScoreInHypothesis;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  unint64_t **v22;
  unint64_t v23;
  unint64_t *v24;
  void **v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  unint64_t *v34;
  char *v35;
  unint64_t *v36;
  unint64_t v37;
  float v38;
  uint64_t v39;
  _BOOL4 v40;
  void *v41;
  float v42;
  uint64_t v43;
  float v44;
  float *v45;
  float **v46;
  unint64_t v47;
  _QWORD *v48;
  float *v49;
  float *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  float *v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  uint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  float *v68;
  uint64_t v69;
  float v70;
  float v71;
  uint64_t v72;
  float *v73;
  float **v74;
  unint64_t v75;
  _QWORD *v76;
  float *v77;
  float *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  float *v84;
  int v85;
  uint64_t *v86;
  int v87;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  int v92;
  void **v93;
  void *__p;
  void *v95;
  _QWORD v96[3];
  _QWORD v97[3];
  void *v98[3];
  float v99;
  int v100;
  float v101;
  int v102;

  v3 = (_QWORD *)a3;
  ReferenceScoreInHypothesis = kaldi::quasar::ErrorBlamer::GetReferenceScoreInHypothesis(a1, a2, a3);
  if (ReferenceScoreInHypothesis == INFINITY)
    return 0xFFFFFFFFLL;
  v6 = (*(uint64_t (**)(_QWORD *))(*v3 + 160))(v3);
  LODWORD(v93) = 2139095039;
  std::vector<float>::vector(v98, v6, &v93);
  v7 = (*(uint64_t (**)(_QWORD *))(*v3 + 160))(v3);
  std::vector<std::vector<std::pair<int,float>>>::vector(v97, v7);
  v8 = (*(uint64_t (**)(_QWORD *))(*v3 + 24))(v3);
  *((_DWORD *)v98[0] + v8) = 0;
  v9 = (*(uint64_t (**)(_QWORD *))(*v3 + 160))(v3);
  std::vector<std::vector<float>>::vector(v96, v9);
  v10 = *(_QWORD *)(v3[1] + 72) - *(_QWORD *)(v3[1] + 64);
  v90 = v3;
  if ((int)(v10 >> 3) >= 1)
  {
    v11 = 0;
    v89 = (v10 >> 3);
    while (1)
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v3[1] + 64) + 8 * v11);
      v14 = *(_QWORD *)(v12 + 48);
      v13 = *(_QWORD *)(v12 + 56);
      if (v13 == v14)
        v15 = 0;
      else
        v15 = *(_QWORD *)(v12 + 48);
      v91 = v11;
      if (v13 != v14)
      {
        v16 = 0;
        if ((unint64_t)((v13 - v14) / 48) <= 1)
          v17 = 1;
        else
          v17 = (v13 - v14) / 48;
        do
        {
          v18 = v15 + 48 * v16;
          v20 = *(float *)(v18 + 8);
          v19 = v18 + 8;
          v21 = *(int *)(v19 + 32);
          v22 = (unint64_t **)(v97[0] + 24 * (int)v21);
          v23 = v11 | ((unint64_t)COERCE_UNSIGNED_INT(v20 + *(float *)(v19 + 4)) << 32);
          v25 = (void **)(v22 + 1);
          v24 = v22[1];
          v27 = v22 + 2;
          v26 = (unint64_t)v22[2];
          if ((unint64_t)v24 >= v26)
          {
            v29 = v24 - *v22;
            if ((unint64_t)(v29 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v30 = v26 - (_QWORD)*v22;
            v31 = v30 >> 2;
            if (v30 >> 2 <= (unint64_t)(v29 + 1))
              v31 = v29 + 1;
            if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
              v32 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v32 = v31;
            if (v32)
              v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v27, v32);
            else
              v33 = 0;
            v34 = (unint64_t *)&v33[8 * v29];
            *v34 = v23;
            v28 = v34 + 1;
            v35 = (char *)*v25;
            v36 = *v22;
            if (*v25 != *v22)
            {
              do
              {
                v37 = *((_QWORD *)v35 - 1);
                v35 -= 8;
                *--v34 = v37;
              }
              while (v35 != (char *)v36);
              v35 = (char *)*v22;
            }
            *v22 = v34;
            *v25 = v28;
            *v27 = &v33[8 * v32];
            if (v35)
              operator delete(v35);
            v11 = v91;
          }
          else
          {
            *v24 = v23;
            v28 = v24 + 1;
          }
          *v25 = v28;
          v38 = (float)(*((float *)v98[0] + v11) + *(float *)v19) + *(float *)(v19 + 4);
          if (v38 >= *((float *)v98[0] + v21))
            v38 = *((float *)v98[0] + v21);
          *((float *)v98[0] + v21) = v38;
          ++v16;
        }
        while (v16 != v17);
      }
      v3 = v90;
      (*(void (**)(void ***__return_ptr, _QWORD *))(*v90 + 32))(&v93, v90);
      v101 = *((float *)&v93 + 1);
      v102 = (int)v93;
      v100 = 2139095040;
      v99 = INFINITY;
      v39 = v91;
      if (*(float *)&v93 != INFINITY)
        break;
      v41 = __p;
      if (v101 == v99)
      {
        v40 = v95 != __p;
        if (__p)
          goto LABEL_34;
      }
      else
      {
        v40 = 1;
        if (__p)
          goto LABEL_34;
      }
LABEL_35:
      if (v40)
      {
        v42 = *((float *)v98[0] + v39);
        if (v42 < ReferenceScoreInHypothesis)
        {
          v43 = v96[0] + 24 * v39;
          v44 = ReferenceScoreInHypothesis - v42;
          v46 = (float **)(v43 + 8);
          v45 = *(float **)(v43 + 8);
          v48 = (_QWORD *)(v43 + 16);
          v47 = *(_QWORD *)(v43 + 16);
          if ((unint64_t)v45 >= v47)
          {
            v50 = *(float **)v43;
            v51 = ((uint64_t)v45 - *(_QWORD *)v43) >> 2;
            v52 = v51 + 1;
            if ((unint64_t)(v51 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v53 = v47 - (_QWORD)v50;
            if (v53 >> 1 > v52)
              v52 = v53 >> 1;
            if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL)
              v54 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v54 = v52;
            if (v54)
            {
              v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v48, v54);
              v45 = *v46;
              v50 = *(float **)v43;
            }
            else
            {
              v55 = 0;
            }
            v56 = (float *)&v55[4 * v51];
            *v56 = v44;
            v49 = v56 + 1;
            while (v45 != v50)
            {
              v57 = *((_DWORD *)v45-- - 1);
              *((_DWORD *)v56-- - 1) = v57;
            }
            *(_QWORD *)v43 = v56;
            *v46 = v49;
            *v48 = &v55[4 * v54];
            if (v50)
              operator delete(v50);
            v39 = v91;
          }
          else
          {
            *v45 = v44;
            v49 = v45 + 1;
          }
          *v46 = v49;
        }
      }
      v11 = v39 + 1;
      if (v11 == v89)
        goto LABEL_61;
    }
    v40 = 1;
    v41 = __p;
    if (!__p)
      goto LABEL_35;
LABEL_34:
    v95 = v41;
    operator delete(v41);
    v39 = v91;
    goto LABEL_35;
  }
LABEL_61:
  v58 = -1431655765 * ((v96[1] - v96[0]) >> 3) - 1;
  if ((v58 & 0x80000000) == 0)
  {
    v59 = v97[0];
    do
    {
      v60 = v58;
      v61 = (uint64_t *)(v59 + 24 * v58);
      v62 = *v61;
      if (v61[1] != *v61)
      {
        v63 = 0;
        v92 = v60;
        do
        {
          v64 = (uint64_t *)(v96[0] + 24 * v60);
          v65 = v64[1];
          v66 = *v64;
          if (v65 != *v64)
          {
            v67 = 0;
            v68 = (float *)(v62 + 8 * v63);
            v69 = *(int *)v68;
            v70 = (float)(v68[1] + *((float *)v98[0] + v69)) - *((float *)v98[0] + v63);
            do
            {
              v71 = *(float *)(v66 + 4 * v67) - v70;
              if (v71 > 0.0)
              {
                v72 = v96[0] + 24 * (int)v69;
                v74 = (float **)(v72 + 8);
                v73 = *(float **)(v72 + 8);
                v76 = (_QWORD *)(v72 + 16);
                v75 = *(_QWORD *)(v72 + 16);
                if ((unint64_t)v73 >= v75)
                {
                  v78 = *(float **)v72;
                  v79 = ((uint64_t)v73 - *(_QWORD *)v72) >> 2;
                  v80 = v79 + 1;
                  if ((unint64_t)(v79 + 1) >> 62)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v81 = v75 - (_QWORD)v78;
                  if (v81 >> 1 > v80)
                    v80 = v81 >> 1;
                  if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL)
                    v82 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v82 = v80;
                  if (v82)
                  {
                    v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v76, v82);
                    v73 = *v74;
                    v78 = *(float **)v72;
                  }
                  else
                  {
                    v83 = 0;
                  }
                  v84 = (float *)&v83[4 * v79];
                  *v84 = v71;
                  v77 = v84 + 1;
                  while (v73 != v78)
                  {
                    v85 = *((_DWORD *)v73-- - 1);
                    *((_DWORD *)v84-- - 1) = v85;
                  }
                  *(_QWORD *)v72 = v84;
                  *v74 = v77;
                  *v76 = &v83[4 * v82];
                  if (v78)
                    operator delete(v78);
                }
                else
                {
                  *v73 = v71;
                  v77 = v73 + 1;
                }
                *v74 = v77;
                v65 = v64[1];
                v66 = *v64;
              }
              ++v67;
            }
            while (v67 < (v65 - v66) >> 2);
            v59 = v97[0];
            v60 = v92;
          }
          ++v63;
          v86 = (uint64_t *)(v59 + 24 * v60);
          v62 = *v86;
        }
        while (v63 < (v86[1] - *v86) >> 3);
      }
      v58 = v60 - 1;
    }
    while (v60 >= 1);
  }
  v87 = (*(uint64_t (**)(_QWORD *))(*v90 + 24))(v90);
  v5 = ((*(_QWORD *)(v96[0] + 24 * v87 + 8) - *(_QWORD *)(v96[0] + 24 * v87)) >> 2) + 1;
  v93 = (void **)v96;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v93);
  v93 = (void **)v97;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v93);
  if (v98[0])
  {
    v98[1] = v98[0];
    operator delete(v98[0]);
  }
  return v5;
}

void sub_1AD93ADF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  a13 = &a17;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  a13 = &a20;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

float kaldi::quasar::ErrorBlamer::ComputeBestPathTotalScore(uint64_t a1, _QWORD *a2)
{
  int *v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  uint64_t *v6;
  void *v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  void *__p;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  float v21;
  int v22;
  float v23;
  int v24;

  kaldi::quasar::ErrorBlamer::GetBestPath(a2, &v19);
  v2 = (int *)(v20 + 88);
  v3 = *(_QWORD *)(v20 + 64);
  v4 = 0.0;
  while (1)
  {
    v5 = *v2;
    v6 = *(uint64_t **)(v3 + 8 * v5);
    v14 = *v6;
    v17 = 0;
    v18 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)v6[1], v6[2], (v6[2] - v6[1]) >> 2);
    v23 = *((float *)&v14 + 1);
    v24 = v14;
    v22 = 2139095040;
    v21 = INFINITY;
    if (*(float *)&v14 != INFINITY)
    {
      v8 = 0;
      v7 = __p;
      if (!__p)
        goto LABEL_9;
LABEL_8:
      v17 = v7;
      operator delete(v7);
      goto LABEL_9;
    }
    v7 = __p;
    if (v23 == v21 && v17 == __p)
    {
      v8 = 1;
      if (__p)
        goto LABEL_8;
    }
    else
    {
      v8 = 0;
      if (__p)
        goto LABEL_8;
    }
LABEL_9:
    if (!v8)
      break;
    v3 = *(_QWORD *)(v20 + 64);
    v9 = *(_QWORD *)(*(_QWORD *)(v3 + 8 * v5) + 48);
    v4 = v4 + (float)(*(float *)(v9 + 8) + *(float *)(v9 + 12));
    v2 = (int *)(v9 + 40);
  }
  v10 = *(uint64_t **)(*(_QWORD *)(v20 + 64) + 8 * v5);
  v15 = *v10;
  v17 = 0;
  v18 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)v10[1], v10[2], (v10[2] - v10[1]) >> 2);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  v19 = &unk_1E5D25800;
  v11 = v20;
  if (v20)
  {
    v12 = *(_DWORD *)(v20 + 56) - 1;
    *(_DWORD *)(v20 + 56) = v12;
    if (!v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  return v4 + *(float *)&v15;
}

void sub_1AD93B010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14)
{
  int v15;

  if (a14)
  {
    v15 = a14[14] - 1;
    a14[14] = v15;
    if (!v15)
      (*(void (**)(_DWORD *))(*(_QWORD *)a14 + 8))(a14);
  }
  _Unwind_Resume(exception_object);
}

float kaldi::quasar::ErrorBlamer::GetReferenceScoreInHypothesis(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  void *v21;
  uint64_t v22;
  void *v23;
  _DWORD *v24;
  uint64_t (**v25)(void **);
  uint64_t v26;
  void *v27;
  uint64_t v28;

  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v27);
  fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>(a3, (uint64_t)&v27, 1);
  fst::ArcSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>((uint64_t)&v27);
  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v25);
  fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>(a2, (uint64_t)&v25, 1);
  if (v25[14]((void **)&v25))
  {
    v5 = v25[14]((void **)&v25);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  }
  else
  {
    v6 = 0;
  }
  if (v25[15]((void **)&v25))
  {
    v7 = v25[15]((void **)&v25);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  }
  else
  {
    v8 = 0;
  }
  fst::ArcMap<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::InvertMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>((uint64_t)&v25);
  ((void (*)(uint64_t (***)(void **), uint64_t))v25[35])(&v25, v8);
  ((void (*)(uint64_t (***)(void **), uint64_t))v25[36])(&v25, v6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  fst::ArcSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>((uint64_t)&v25);
  kaldi::quasar::ErrorBlamer::RemoveWeightsFromLattice(v9, (uint64_t)&v25);
  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v23);
  LOBYTE(v21) = 1;
  HIDWORD(v21) = 0;
  fst::Compose<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)&v27, (uint64_t)&v25, (uint64_t)&v23, (uint64_t)&v21);
  v10 = v24;
  if (v24[22] == -1)
  {
    v23 = &unk_1E5D25580;
    v12 = INFINITY;
LABEL_18:
    v15 = v10[14] - 1;
    v10[14] = v15;
    if (!v15)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    goto LABEL_20;
  }
  fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(&v21);
  v11 = fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>((uint64_t)&v23, (uint64_t)&v21, 1);
  v12 = kaldi::quasar::ErrorBlamer::ComputeBestPathTotalScore(v11, &v21);
  v21 = &unk_1E5D25800;
  v13 = v22;
  if (v22)
  {
    v14 = *(_DWORD *)(v22 + 56) - 1;
    *(_DWORD *)(v22 + 56) = v14;
    if (!v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v10 = v24;
  v23 = &unk_1E5D25580;
  if (v24)
    goto LABEL_18;
LABEL_20:
  v25 = (uint64_t (**)(void **))&unk_1E5D25580;
  v16 = v26;
  if (v26)
  {
    v17 = *(_DWORD *)(v26 + 56) - 1;
    *(_DWORD *)(v26 + 56) = v17;
    if (!v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  v27 = &unk_1E5D25580;
  v18 = v28;
  if (v28)
  {
    v19 = *(_DWORD *)(v28 + 56) - 1;
    *(_DWORD *)(v28 + 56) = v19;
    if (!v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  return v12;
}

void sub_1AD93B2E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12, uint64_t a13, _DWORD *a14, uint64_t a15, _DWORD *a16)
{
  int v17;
  int v18;
  int v19;

  if (a12)
  {
    v17 = a12[14] - 1;
    a12[14] = v17;
    if (!v17)
      (*(void (**)(_DWORD *))(*(_QWORD *)a12 + 8))(a12);
  }
  if (a14)
  {
    v18 = a14[14] - 1;
    a14[14] = v18;
    if (!v18)
      (*(void (**)(_DWORD *))(*(_QWORD *)a14 + 8))(a14);
  }
  if (a16)
  {
    v19 = a16[14] - 1;
    a16[14] = v19;
    if (!v19)
      (*(void (**)(_DWORD *))(*(_QWORD *)a16 + 8))(a16);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::ErrorBlamer::RemoveWeightsFromLattice(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  int v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 72) - *(_QWORD *)(*(_QWORD *)(a2 + 8) + 64);
  if ((int)(v2 >> 3) >= 1)
  {
    v4 = 0;
    v5 = (v2 >> 3);
    do
    {
      v14 = &unk_1E5D21340;
      v17 = 0;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck(a2);
      v6 = *(_QWORD *)(a2 + 8);
      v7 = *(_QWORD *)(*(_QWORD *)(v6 + 64) + 8 * v4);
      v15 = v7;
      v16 = v6 + 8;
      for (i = v17; ; i = ++v17)
      {
        v10 = v7 + 24;
        v9 = *(_QWORD *)(v7 + 24);
        if (i >= 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v10 + 8) - v9) >> 2))
          break;
        v11 = v9 + 20 * i;
        v12[0] = *(_QWORD *)v11;
        v13 = *(_DWORD *)(v11 + 16);
        v12[1] = 0;
        fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::SetValue((uint64_t)&v14, (uint64_t)v12);
        v7 = v15;
      }
      ++v4;
    }
    while (v4 != v5);
  }
}

void fst::ArcSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1)
{
  uint64_t v1[2];
  void *__p[2];
  __int128 v3;
  char v4;

  v1[0] = a1;
  v1[1] = (uint64_t)&v4;
  *(_OWORD *)__p = 0u;
  v3 = 0u;
  fst::StateMap<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ArcSortMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, v1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1AD93B51C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::Compose<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  void *v8;
  uint64_t Base;
  char v10[8];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char v14;

  switch(*(_DWORD *)(a4 + 4))
  {
    case 0:
      v10[0] = FLAGS_fst_default_cache_gc;
      *(_QWORD *)&v11 = 0;
      v8 = &unk_1E5D191C0;
      Base = fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CreateBase(a1, a2, (uint64_t)v10);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a3 + 168))(a3, &v8);
      goto LABEL_7;
    case 1:
      v10[0] = FLAGS_fst_default_cache_gc;
      v11 = 0u;
      v12 = 0u;
      v13 = 0u;
      v14 = 0;
      v8 = &unk_1E5D191C0;
      Base = fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(a1, a2, (uint64_t)v10);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a3 + 168))(a3, &v8);
      goto LABEL_7;
    case 2:
      v10[0] = FLAGS_fst_default_cache_gc;
      v11 = 0u;
      v12 = 0u;
      v13 = 0u;
      v14 = 0;
      v8 = &unk_1E5D191C0;
      Base = fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(a1, a2, (uint64_t)v10);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a3 + 168))(a3, &v8);
      goto LABEL_7;
    case 3:
      v10[0] = FLAGS_fst_default_cache_gc;
      v11 = 0u;
      v12 = 0u;
      v13 = 0u;
      v14 = 0;
      v8 = &unk_1E5D191C0;
      Base = fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(a1, a2, (uint64_t)v10);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a3 + 168))(a3, &v8);
      goto LABEL_7;
    case 4:
      v10[0] = FLAGS_fst_default_cache_gc;
      v11 = 0u;
      v12 = 0u;
      v13 = 0u;
      v14 = 0;
      v8 = &unk_1E5D191C0;
      Base = fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(a1, a2, (uint64_t)v10);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a3 + 168))(a3, &v8);
LABEL_7:
      v8 = &unk_1E5D26808;
      v6 = Base;
      if (Base)
      {
        v7 = *(_DWORD *)(Base + 56) - 1;
        *(_DWORD *)(Base + 56) = v7;
        if (!v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      break;
    default:
      break;
  }
  if (*(_BYTE *)a4)
    fst::Connect<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a3);
}

void sub_1AD93B758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    fst::Compose<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>();
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::vector<double>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1AD93B89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<kaldi::quasar::ErrorRegion>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void (***v2)(_QWORD);
  void (***v4)(_QWORD);
  void *v5;
  void (***v6)(_QWORD);
  BOOL v7;

  v1 = *a1;
  v2 = (void (***)(_QWORD))**a1;
  if (v2)
  {
    v4 = (void (***)(_QWORD))v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 41;
      do
      {
        (**v6)(v6);
        v7 = v6 == v2;
        v6 -= 41;
      }
      while (!v7);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1AD93B98C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<kaldi::quasar::ErrorRegion>::__push_back_slow_path<kaldi::quasar::ErrorRegion const&>(uint64_t *a1, const kaldi::quasar::ErrorRegion *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  kaldi::quasar::ErrorRegion *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x8F9C18F9C18F9C19 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xC7CE0C7CE0C7CELL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x8F9C18F9C18F9C19 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x63E7063E7063E7)
    v9 = 0xC7CE0C7CE0C7CELL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::ErrorRegion>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (kaldi::quasar::ErrorRegion *)&v10[328 * v4];
  v16 = &v10[328 * v9];
  kaldi::quasar::ErrorRegion::ErrorRegion(v14, a2);
  v15 = (char *)v14 + 328;
  std::vector<kaldi::quasar::ErrorRegion>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<kaldi::quasar::ErrorRegion>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1AD93BAB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::quasar::ErrorRegion>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::quasar::ErrorRegion>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::ErrorRegion>,std::reverse_iterator<kaldi::quasar::ErrorRegion*>,std::reverse_iterator<kaldi::quasar::ErrorRegion*>,std::reverse_iterator<kaldi::quasar::ErrorRegion*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::ErrorRegion>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xC7CE0C7CE0C7CFLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(328 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::ErrorRegion>,std::reverse_iterator<kaldi::quasar::ErrorRegion*>,std::reverse_iterator<kaldi::quasar::ErrorRegion*>,std::reverse_iterator<kaldi::quasar::ErrorRegion*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  kaldi::quasar::ErrorRegion *v12;

  v10 = 0;
  v11 = a7 - 328;
  while (a3 + v10 != a5)
  {
    v12 = (kaldi::quasar::ErrorRegion *)(v11 + v10);
    v10 -= 328;
    kaldi::quasar::ErrorRegion::ErrorRegion(v12, (const kaldi::quasar::ErrorRegion *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<kaldi::quasar::ErrorRegion>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 328;
    (**(void (***)(uint64_t))(i - 328))(i - 328);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::vector<std::vector<std::pair<int,float>>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1AD93BCF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t fst::StateMap<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ArcSortMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  uint64_t v9;
  uint64_t v10;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result != -1)
  {
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 24))(*a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 176))(a1, v6);
    if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1) >= 1)
    {
      v7 = 0;
      do
      {
        fst::ArcSortMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetState(a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(a1, v7);
        for (i = a2[5]; ; a2[5] = i)
        {
          v9 = a2[2];
          if (i >= 0xCCCCCCCCCCCCCCCDLL * ((a2[3] - v9) >> 2))
            break;
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)a1 + 208))(a1, v7, v9 + 20 * i);
          i = a2[5] + 1;
        }
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)*a2 + 32))(&v10, *a2, v7);
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 184))(a1, v7, &v10);
        v7 = (v7 + 1);
      }
      while ((int)v7 < (*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1));
    }
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v5 & 0x3FFF0FFF0007 | (((v5 >> 16) & 1) << 30) | 0x10000000, 0x3FFFFFFF0007);
  }
  return result;
}

void fst::ArcSortMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetState(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _DWORD *v15;
  unint64_t v16;

  a1[5] = 0;
  v4 = a1 + 2;
  a1[3] = a1[2];
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 40))(*a1);
  std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::reserve(v4, v5);
  v6 = *a1;
  v16 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v6 + 136))(v6, a2, v14);
  while (1)
  {
    if (!v14[0])
    {
      if (v16 >= v14[2])
        goto LABEL_16;
      goto LABEL_7;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v14[0] + 24))(v14[0]))
      break;
    if (v14[0])
    {
      v7 = (*(uint64_t (**)(void))(*(_QWORD *)v14[0] + 32))();
      goto LABEL_8;
    }
LABEL_7:
    v7 = v14[1] + 20 * v16;
LABEL_8:
    v8 = a1[3];
    if (v8 >= a1[4])
    {
      v9 = std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const&>(v4, v7);
    }
    else
    {
      *(_QWORD *)v8 = *(_QWORD *)v7;
      *(_QWORD *)(v8 + 8) = *(_QWORD *)(v7 + 8);
      *(_DWORD *)(v8 + 16) = *(_DWORD *)(v7 + 16);
      v9 = v8 + 20;
    }
    a1[3] = v9;
    if (v14[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v14[0] + 40))(v14[0]);
    else
      ++v16;
  }
  if (v14[0])
  {
    (*(void (**)(void))(*(_QWORD *)v14[0] + 8))();
    goto LABEL_18;
  }
LABEL_16:
  if (v15)
    --*v15;
LABEL_18:
  v10 = (uint64_t *)a1[2];
  v11 = (uint64_t *)a1[3];
  v12 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((char *)v11 - (char *)v10) >> 2));
  if (v11 == v10)
    v13 = 0;
  else
    v13 = v12;
  std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*,false>(v10, v11, (uint64_t)v14, v13, 1);
}

void sub_1AD93C038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  else
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (result != a2)
  {
    v2 = result + 20;
    if (result + 20 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = *(_QWORD *)(v4 + 20);
        v7 = *(_QWORD *)v4;
        if ((int)v6 < (int)*(_QWORD *)v4)
        {
          v8 = *(_QWORD *)(v4 + 28);
          v9 = *(_DWORD *)(v4 + 36);
          v10 = v3;
          while (1)
          {
            v11 = result + v10;
            *(_QWORD *)(v11 + 20) = v7;
            *(_QWORD *)(v11 + 28) = *(_QWORD *)(result + v10 + 8);
            *(_DWORD *)(v11 + 36) = *(_DWORD *)(result + v10 + 16);
            if (!v10)
              break;
            v7 = *(_QWORD *)(v11 - 20);
            v10 -= 20;
            if ((int)v6 >= (int)v7)
            {
              v12 = result + v10 + 20;
              goto LABEL_10;
            }
          }
          v12 = result;
LABEL_10:
          *(_QWORD *)v12 = v6;
          *(_QWORD *)(v12 + 8) = v8;
          *(_DWORD *)(v12 + 16) = v9;
        }
        v2 = v5 + 20;
        v3 += 20;
        v4 = v5;
      }
      while (v5 + 20 != a2);
    }
  }
  return result;
}

uint64_t *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _DWORD *v9;
  _DWORD *v10;
  int v11;

  if (result != a2)
  {
    v2 = (uint64_t *)((char *)result + 20);
    if ((uint64_t *)((char *)result + 20) != a2)
    {
      v3 = (_DWORD *)result + 9;
      do
      {
        v4 = v2;
        v5 = *(uint64_t *)((char *)result + 20);
        v6 = *result;
        if ((int)v5 < (int)*result)
        {
          v7 = *(uint64_t *)((char *)result + 28);
          v8 = *((_DWORD *)result + 9);
          v9 = v3;
          do
          {
            v10 = v9;
            *((_QWORD *)v9 - 2) = v6;
            *((_QWORD *)v9 - 1) = *(_QWORD *)(v9 - 7);
            v11 = *(v9 - 5);
            v9 -= 5;
            *v10 = v11;
            v6 = *((_QWORD *)v10 - 7);
          }
          while ((int)v5 < (int)v6);
          *((_QWORD *)v9 - 2) = v5;
          *((_QWORD *)v9 - 1) = v7;
          *v9 = v8;
        }
        v2 = (uint64_t *)((char *)v4 + 20);
        v3 += 5;
        result = v4;
      }
      while ((uint64_t *)((char *)v4 + 20) != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if ((int)*a2 < (int)*a1)
  {
    v7 = *((_DWORD *)a1 + 2);
    v6 = *((_DWORD *)a1 + 3);
    v8 = *((_DWORD *)a1 + 4);
    if ((int)v5 < (int)v3)
    {
      *a1 = v5;
      a1[1] = a3[1];
      *((_DWORD *)a1 + 4) = *((_DWORD *)a3 + 4);
      *a3 = v4;
      *((_DWORD *)a3 + 2) = v7;
      *((_DWORD *)a3 + 3) = v6;
      *((_DWORD *)a3 + 4) = v8;
      return 1;
    }
    *a1 = v3;
    a1[1] = a2[1];
    *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
    *a2 = v4;
    *((_DWORD *)a2 + 2) = v7;
    *((_DWORD *)a2 + 3) = v6;
    *((_DWORD *)a2 + 4) = v8;
    if ((int)*a3 >= (int)v4)
      return 1;
    *a2 = *a3;
    a2[1] = a3[1];
    *((_DWORD *)a2 + 4) = *((_DWORD *)a3 + 4);
    *a3 = v4;
    *((_DWORD *)a3 + 2) = v7;
    *((_DWORD *)a3 + 3) = v6;
    *((_DWORD *)a3 + 4) = v8;
    return 2;
  }
  if ((int)v5 < (int)v3)
  {
    v9 = *((_DWORD *)a2 + 4);
    *a2 = v5;
    v10 = a3[1];
    *((_DWORD *)a2 + 4) = *((_DWORD *)a3 + 4);
    v11 = a2[1];
    a2[1] = v10;
    *a3 = v3;
    a3[1] = v11;
    *((_DWORD *)a3 + 4) = v9;
    v12 = *a1;
    if ((int)*a2 >= (int)*a1)
      return 1;
    v13 = *((_DWORD *)a1 + 4);
    *a1 = *a2;
    v14 = a2[1];
    *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
    v15 = a1[1];
    a1[1] = v14;
    *a2 = v12;
    a2[1] = v15;
    *((_DWORD *)a2 + 4) = v13;
    return 2;
  }
  return 0;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  int v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *a1;
  if ((int)*a1 >= *((_DWORD *)a2 - 5))
  {
    v5 = (uint64_t *)((char *)a1 + 20);
    do
    {
      v3 = v5;
      if (v5 >= a2)
        break;
      v5 = (uint64_t *)((char *)v5 + 20);
    }
    while ((int)v2 >= *(_DWORD *)v3);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = *((_DWORD *)v3 + 5);
      v3 = (uint64_t *)((char *)v3 + 20);
    }
    while ((int)v2 >= v4);
  }
  if (v3 < a2)
  {
    do
    {
      v6 = *((_DWORD *)a2 - 5);
      a2 = (uint64_t *)((char *)a2 - 20);
    }
    while ((int)v2 < v6);
  }
  v7 = a1[1];
  v8 = *((_DWORD *)a1 + 4);
  if (v3 < a2)
  {
    v9 = *v3;
    v10 = *a2;
    do
    {
      v11 = *((_DWORD *)v3 + 4);
      *v3 = v10;
      v12 = a2[1];
      *((_DWORD *)v3 + 4) = *((_DWORD *)a2 + 4);
      v13 = v3[1];
      v3[1] = v12;
      *a2 = v9;
      a2[1] = v13;
      *((_DWORD *)a2 + 4) = v11;
      do
      {
        v14 = *(uint64_t *)((char *)v3 + 20);
        v3 = (uint64_t *)((char *)v3 + 20);
        v9 = v14;
      }
      while ((int)v2 >= (int)v14);
      do
      {
        v15 = *(uint64_t *)((char *)a2 - 20);
        a2 = (uint64_t *)((char *)a2 - 20);
        v10 = v15;
      }
      while ((int)v2 < (int)v15);
    }
    while (v3 < a2);
  }
  if ((uint64_t *)((char *)v3 - 20) != a1)
  {
    *a1 = *(uint64_t *)((char *)v3 - 20);
    a1[1] = *(uint64_t *)((char *)v3 - 12);
    *((_DWORD *)a1 + 4) = *((_DWORD *)v3 - 1);
  }
  *(uint64_t *)((char *)v3 - 20) = v2;
  *(uint64_t *)((char *)v3 - 12) = v7;
  *((_DWORD *)v3 - 1) = v8;
  return v3;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  v5 = *((_DWORD *)a1 + 4);
  do
  {
    v6 = *(uint64_t *)((char *)a1 + v2 + 20);
    v2 += 20;
  }
  while ((int)v6 < (int)v3);
  v7 = (unint64_t)a1 + v2;
  if (v2 == 20)
  {
    do
    {
      if (v7 >= (unint64_t)a2)
        break;
      v9 = *((_DWORD *)a2 - 5);
      a2 = (_QWORD *)((char *)a2 - 20);
    }
    while (v9 >= (int)v3);
  }
  else
  {
    do
    {
      v8 = *((_DWORD *)a2 - 5);
      a2 = (_QWORD *)((char *)a2 - 20);
    }
    while (v8 >= (int)v3);
  }
  if (v7 >= (unint64_t)a2)
  {
    v11 = (unint64_t)a1 + v2;
  }
  else
  {
    v10 = *a2;
    v11 = (unint64_t)a1 + v2;
    v12 = a2;
    do
    {
      v13 = *(_DWORD *)(v11 + 16);
      *(_QWORD *)v11 = v10;
      v14 = v12[1];
      *(_DWORD *)(v11 + 16) = *((_DWORD *)v12 + 4);
      v15 = *(_QWORD *)(v11 + 8);
      *(_QWORD *)(v11 + 8) = v14;
      *v12 = v6;
      v12[1] = v15;
      *((_DWORD *)v12 + 4) = v13;
      do
      {
        v16 = *(_QWORD *)(v11 + 20);
        v11 += 20;
        v6 = v16;
      }
      while ((int)v16 < (int)v3);
      do
      {
        v17 = *(_QWORD *)((char *)v12 - 20);
        v12 = (_QWORD *)((char *)v12 - 20);
        v10 = v17;
      }
      while ((int)v17 >= (int)v3);
    }
    while (v11 < (unint64_t)v12);
  }
  if ((uint64_t *)(v11 - 20) != a1)
  {
    *a1 = *(_QWORD *)(v11 - 20);
    a1[1] = *(_QWORD *)(v11 - 12);
    *((_DWORD *)a1 + 4) = *(_DWORD *)(v11 - 4);
  }
  *(_QWORD *)(v11 - 20) = v3;
  *(_QWORD *)(v11 - 12) = v4;
  *(_DWORD *)(v11 - 4) = v5;
  return v11 - 20;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 2);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(_QWORD *)(a2 - 20);
      v7 = *(_QWORD *)a1;
      if ((int)v6 < (int)*(_QWORD *)a1)
      {
        v8 = *(_DWORD *)(a1 + 16);
        *(_QWORD *)a1 = v6;
        v9 = *(_QWORD *)(a2 - 12);
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 - 4);
        v10 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v9;
        *(_QWORD *)(a2 - 20) = v7;
        *(_QWORD *)(a2 - 12) = v10;
        *(_DWORD *)(a2 - 4) = v8;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)a1, (uint64_t *)(a1 + 20), (uint64_t *)(a2 - 20));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, a1 + 20, a1 + 40, a2 - 20);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, a1 + 20, a1 + 40, a1 + 60, a2 - 20);
      return 1;
    default:
      v11 = (uint64_t *)(a1 + 40);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)a1, (uint64_t *)(a1 + 20), (uint64_t *)(a1 + 40));
      v12 = a1 + 60;
      if (a1 + 60 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(_QWORD *)v12;
    v16 = *v11;
    if ((int)*(_QWORD *)v12 < (int)*v11)
    {
      v17 = *(_QWORD *)(v12 + 8);
      v18 = *(_DWORD *)(v12 + 16);
      v19 = v13;
      while (1)
      {
        v20 = a1 + v19;
        *(_QWORD *)(v20 + 60) = v16;
        *(_QWORD *)(v20 + 68) = *(_QWORD *)(a1 + v19 + 48);
        *(_DWORD *)(v20 + 76) = *(_DWORD *)(a1 + v19 + 56);
        if (v19 == -40)
          break;
        v16 = *(_QWORD *)(v20 + 20);
        v19 -= 20;
        if ((int)v15 >= (int)v16)
        {
          v21 = a1 + v19 + 60;
          goto LABEL_12;
        }
      }
      v21 = a1;
LABEL_12:
      *(_QWORD *)v21 = v15;
      *(_QWORD *)(v21 + 8) = v17;
      *(_DWORD *)(v21 + 16) = v18;
      if (++v14 == 8)
        return v12 + 20 == a2;
    }
    v11 = (uint64_t *)v12;
    v13 += 20;
    v12 += 20;
    if (v12 == a2)
      return 1;
  }
}

double std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  v9 = *(_QWORD *)a3;
  if ((int)*(_QWORD *)a4 < (int)*(_QWORD *)a3)
  {
    v10 = *(_DWORD *)(a3 + 16);
    *(_QWORD *)a3 = *(_QWORD *)a4;
    result = *(double *)(a4 + 8);
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(a4 + 16);
    v11 = *(_QWORD *)(a3 + 8);
    *(double *)(a3 + 8) = result;
    *(_QWORD *)a4 = v9;
    *(_QWORD *)(a4 + 8) = v11;
    *(_DWORD *)(a4 + 16) = v10;
    v12 = *(_QWORD *)a2;
    if ((int)*(_QWORD *)a3 < (int)*(_QWORD *)a2)
    {
      v13 = *(_DWORD *)(a2 + 16);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      result = *(double *)(a3 + 8);
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
      v14 = *(_QWORD *)(a2 + 8);
      *(double *)(a2 + 8) = result;
      *(_QWORD *)a3 = v12;
      *(_QWORD *)(a3 + 8) = v14;
      *(_DWORD *)(a3 + 16) = v13;
      v15 = *(_QWORD *)a1;
      if ((int)*(_QWORD *)a2 < (int)*(_QWORD *)a1)
      {
        v16 = *(_DWORD *)(a1 + 16);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        result = *(double *)(a2 + 8);
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
        v17 = *(_QWORD *)(a1 + 8);
        *(double *)(a1 + 8) = result;
        *(_QWORD *)a2 = v15;
        *(_QWORD *)(a2 + 8) = v17;
        *(_DWORD *)(a2 + 16) = v16;
      }
    }
  }
  return result;
}

double std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double result;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, a2, a3, a4);
  v11 = *(_QWORD *)a4;
  if ((int)*(_QWORD *)a5 < (int)*(_QWORD *)a4)
  {
    v12 = *(_DWORD *)(a4 + 16);
    *(_QWORD *)a4 = *(_QWORD *)a5;
    result = *(double *)(a5 + 8);
    *(_DWORD *)(a4 + 16) = *(_DWORD *)(a5 + 16);
    v13 = *(_QWORD *)(a4 + 8);
    *(double *)(a4 + 8) = result;
    *(_QWORD *)a5 = v11;
    *(_QWORD *)(a5 + 8) = v13;
    *(_DWORD *)(a5 + 16) = v12;
    v14 = *(_QWORD *)a3;
    if ((int)*(_QWORD *)a4 < (int)*(_QWORD *)a3)
    {
      v15 = *(_DWORD *)(a3 + 16);
      *(_QWORD *)a3 = *(_QWORD *)a4;
      result = *(double *)(a4 + 8);
      *(_DWORD *)(a3 + 16) = *(_DWORD *)(a4 + 16);
      v16 = *(_QWORD *)(a3 + 8);
      *(double *)(a3 + 8) = result;
      *(_QWORD *)a4 = v14;
      *(_QWORD *)(a4 + 8) = v16;
      *(_DWORD *)(a4 + 16) = v15;
      v17 = *(_QWORD *)a2;
      if ((int)*(_QWORD *)a3 < (int)*(_QWORD *)a2)
      {
        v18 = *(_DWORD *)(a2 + 16);
        *(_QWORD *)a2 = *(_QWORD *)a3;
        result = *(double *)(a3 + 8);
        *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
        v19 = *(_QWORD *)(a2 + 8);
        *(double *)(a2 + 8) = result;
        *(_QWORD *)a3 = v17;
        *(_QWORD *)(a3 + 8) = v19;
        *(_DWORD *)(a3 + 16) = v18;
        v20 = *(_QWORD *)a1;
        if ((int)*(_QWORD *)a2 < (int)*(_QWORD *)a1)
        {
          v21 = *(_DWORD *)(a1 + 16);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          result = *(double *)(a2 + 8);
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
          v22 = *(_QWORD *)(a1 + 8);
          *(double *)(a1 + 8) = result;
          *(_QWORD *)a2 = v20;
          *(_QWORD *)(a2 + 8) = v22;
          *(_DWORD *)(a2 + 16) = v21;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;

  if ((uint64_t *)a1 != a2)
  {
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) / 20;
    if ((uint64_t)a2 - a1 >= 21)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (uint64_t *)(a1 + 20 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, a4, v9, v12);
        v12 = (uint64_t *)((char *)v12 - 20);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *v14;
        if ((int)*v14 < (int)*(_QWORD *)a1)
        {
          v16 = *((_DWORD *)v14 + 4);
          *v14 = *(_QWORD *)a1;
          v17 = *(_QWORD *)(a1 + 8);
          *((_DWORD *)v14 + 4) = *(_DWORD *)(a1 + 16);
          v18 = v14[1];
          v14[1] = v17;
          *(_QWORD *)a1 = v15;
          *(_QWORD *)(a1 + 8) = v18;
          *(_DWORD *)(a1 + 16) = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, a4, v9, (uint64_t *)a1);
        }
        v14 = (uint64_t *)((char *)v14 + 20);
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 21)
    {
      v19 = v8 / 0x14uLL;
      v20 = (uint64_t)a2 - 20;
      do
      {
        v21 = *(_QWORD *)a1;
        v23 = *(_DWORD *)(a1 + 8);
        v22 = *(_DWORD *)(a1 + 12);
        v24 = *(_DWORD *)(a1 + 16);
        v25 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, a4, v19);
        if (v20 == v25)
        {
          *(_QWORD *)v25 = v21;
          *(_DWORD *)(v25 + 8) = v23;
          *(_DWORD *)(v25 + 12) = v22;
          *(_DWORD *)(v25 + 16) = v24;
        }
        else
        {
          *(_QWORD *)v25 = *(_QWORD *)v20;
          *(_QWORD *)(v25 + 8) = *(_QWORD *)(v20 + 8);
          *(_DWORD *)(v25 + 16) = *(_DWORD *)(v20 + 16);
          *(_QWORD *)v20 = v21;
          *(_DWORD *)(v20 + 8) = v23;
          *(_DWORD *)(v20 + 12) = v22;
          *(_DWORD *)(v20 + 16) = v24;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, v25 + 20, a4, 0xCCCCCCCCCCCCCCCDLL * ((v25 + 20 - a1) >> 2));
        }
        v20 -= 20;
      }
      while (v19-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  BOOL v19;

  if (a3 >= 2)
  {
    v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - result) >> 2)))
    {
      v5 = (0x999999999999999ALL * (((uint64_t)a4 - result) >> 2)) | 1;
      v6 = (uint64_t *)(result + 20 * v5);
      v7 = *v6;
      if ((uint64_t)(0x999999999999999ALL * (((uint64_t)a4 - result) >> 2) + 2) < a3)
      {
        v8 = *(uint64_t *)((char *)v6 + 20);
        v10 = __OFSUB__((_DWORD)v7, (_DWORD)v8);
        v9 = (int)v7 - (int)v8 < 0;
        if ((int)v7 < (int)v8)
          v7 = *(uint64_t *)((char *)v6 + 20);
        if (v9 != v10)
        {
          v6 = (uint64_t *)((char *)v6 + 20);
          v5 = 0x999999999999999ALL * (((uint64_t)a4 - result) >> 2) + 2;
        }
      }
      v11 = *a4;
      if ((int)v7 >= (int)*a4)
      {
        v12 = a4[1];
        v13 = *((_DWORD *)a4 + 4);
        do
        {
          v14 = a4;
          a4 = v6;
          *v14 = v7;
          v14[1] = v6[1];
          *((_DWORD *)v14 + 4) = *((_DWORD *)v6 + 4);
          if (v4 < v5)
            break;
          v15 = (2 * v5) | 1;
          v6 = (uint64_t *)(result + 20 * v15);
          v16 = 2 * v5 + 2;
          v7 = *v6;
          if (v16 < a3)
          {
            v17 = *(uint64_t *)((char *)v6 + 20);
            v19 = __OFSUB__((_DWORD)v7, (_DWORD)v17);
            v18 = (int)v7 - (int)v17 < 0;
            if ((int)v7 < (int)v17)
              v7 = *(uint64_t *)((char *)v6 + 20);
            if (v18 != v19)
            {
              v6 = (uint64_t *)((char *)v6 + 20);
              v15 = v16;
            }
          }
          v5 = v15;
        }
        while ((int)v7 >= (int)v11);
        *a4 = v11;
        a4[1] = v12;
        *((_DWORD *)a4 + 4) = v13;
      }
    }
  }
  return result;
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = a1 + 20 * v3;
    v9 = *(_QWORD *)(v6 + 20);
    v7 = v6 + 20;
    v8 = v9;
    v10 = (2 * v3) | 1;
    v11 = 2 * v3 + 2;
    if (v11 < a3)
    {
      v12 = *(_QWORD *)(v7 + 20);
      v14 = __OFSUB__((_DWORD)v8, (_DWORD)v12);
      v13 = (int)v8 - (int)v12 < 0;
      if ((int)v8 < (int)v12)
        v8 = *(_QWORD *)(v7 + 20);
      if (v13 != v14)
      {
        v7 += 20;
        v10 = v11;
      }
    }
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v7 + 8);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(v7 + 16);
    a1 = v7;
    v3 = v10;
  }
  while (v10 <= v5);
  return v7;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = (uint64_t *)(result + 20 * v4);
    v6 = *v5;
    v7 = (uint64_t *)(a2 - 20);
    v8 = *(_QWORD *)(a2 - 20);
    if ((int)*v5 < (int)v8)
    {
      v9 = *(_QWORD *)(a2 - 12);
      v10 = *(_DWORD *)(a2 - 4);
      do
      {
        v11 = v7;
        v7 = v5;
        *v11 = v6;
        v11[1] = v5[1];
        *((_DWORD *)v11 + 4) = *((_DWORD *)v5 + 4);
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
        v5 = (uint64_t *)(result + 20 * v4);
        v6 = *v5;
      }
      while ((int)*v5 < (int)v8);
      *v7 = v8;
      v7[1] = v9;
      *((_DWORD *)v7 + 4) = v10;
    }
  }
  return result;
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(v6, a1, a2, a3);
  return v6;
}

void sub_1AD93CFF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  *(_QWORD *)fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1E5D1D3A0;
  v8 = *(_QWORD **)(a4 + 40);
  if (!v8)
  {
    v8 = (_QWORD *)operator new();
    fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::NullComposeFilter(v8, a2, a3, *(_QWORD **)(a4 + 24), *(_QWORD **)(a4 + 32));
  }
  *(_QWORD *)(a1 + 136) = v8;
  v9 = *(_OWORD *)v8;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)v8;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v9 + 32))(*(_QWORD *)v9);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 152) + 32))(**(_QWORD **)(a1 + 152));
  v10 = *(_QWORD **)(a4 + 48);
  if (!v10)
  {
    v10 = (_QWORD *)operator new();
    v10[1] = v10;
    v10[2] = v10;
    std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::unordered_set((uint64_t)(v10 + 3), 0, v10 + 1, v10 + 2);
    v10[10] = 0;
    v10[11] = 0;
    v10[12] = 0;
  }
  *(_QWORD *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3)
    *(_QWORD *)(a1 + 8) |= 4uLL;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  v13 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 144) + 40))(**(_QWORD **)(a1 + 144), v11);
  v14 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 40))(**(_QWORD **)(a1 + 152), v12);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::ComposeProperties(v13, v14) & 0x3FFFFFFF0004;
  return a1;
}

void sub_1AD93D1DC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 160) + 64))(*(_QWORD *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 168) + 64))(*(_QWORD *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 40))(**(_QWORD **)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 40))(**(_QWORD **)(a1 + 152), 0) & 4) != 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(v2, a1);
  return v2;
}

void sub_1AD93D368(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(_QWORD *a1, int a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v4 = (unsigned int *)(*(_QWORD *)(a1[22] + 80) + 12 * a2);
  v5 = *v4;
  v6 = v4[1];
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    v8 = a1[20];
    v7 = a1[21];
    v9 = (_QWORD *)a1[19];
    v10 = (uint64_t)a1;
    v11 = a2;
    v12 = v6;
    v13 = v5;
    v14 = 1;
  }
  else
  {
    v7 = a1[20];
    v8 = a1[21];
    v9 = (_QWORD *)a1[18];
    v10 = (uint64_t)a1;
    v11 = a2;
    v12 = v5;
    v13 = v6;
    v14 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(v10, v11, v7, v12, v8, v13, v9, v14);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 24))(**(_QWORD **)(a1 + 144), 0) != a3
    || (*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 24))(**(_QWORD **)(a1 + 152), 0) != a3)
  {
    return 0;
  }
  v6 = operator new();
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(v6, a2, a1, a3);
  return v6;
}

void sub_1AD93D4B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40A1003FB7);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(_QWORD **a1)
{
  uint64_t result;
  unsigned int v3;
  unint64_t v4;
  char v5;

  result = (*(uint64_t (**)(_QWORD *))(*a1[20] + 24))(a1[20]);
  if ((_DWORD)result != -1)
  {
    v3 = result;
    result = (*(uint64_t (**)(_QWORD *))(*a1[21] + 24))(a1[21]);
    if ((_DWORD)result != -1)
    {
      v4 = __PAIR64__(result, v3);
      v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

_QWORD *fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal@<X0>(uint64_t a1@<X0>, int a2@<W1>, float *a3@<X8>)
{
  unsigned int *v5;
  _QWORD *result;
  float v7;
  float v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;

  v5 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 80) + 12 * a2);
  result = (*(_QWORD *(**)(unint64_t *__return_ptr, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 96))(&v12, **(_QWORD **)(a1 + 144), *v5);
  v7 = *((float *)&v12 + 1);
  v9 = v12;
  LODWORD(v16) = HIDWORD(v9);
  LODWORD(v8) = v9;
  LODWORD(v11) = v12;
  v15 = INFINITY;
  v14 = INFINITY;
  if (*(float *)&v12 != INFINITY || v16 != v14)
  {
    result = (*(_QWORD *(**)(unint64_t *__return_ptr, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 96))(&v11, **(_QWORD **)(a1 + 152), v5[1]);
    v7 = *((float *)&v11 + 1);
    v10 = v11;
    LODWORD(v15) = HIDWORD(v10);
    LODWORD(v8) = v10;
    v16 = *(float *)&v11;
    v14 = INFINITY;
    v13 = INFINITY;
    if (*(float *)&v11 != INFINITY || v15 != v13)
    {
      v8 = *(float *)&v11 + *(float *)&v12;
      v7 = *((float *)&v11 + 1) + *((float *)&v12 + 1);
    }
  }
  *a3 = v8;
  a3[1] = v7;
  return result;
}

_QWORD *fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::NullComposeFilter(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v6;

  v6 = a4;
  if (!a4)
  {
    v6 = (_QWORD *)operator new();
    fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Matcher(v6, a2, 1);
  }
  *a1 = v6;
  if (!a5)
  {
    a5 = (_QWORD *)operator new();
    fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Matcher(a5, a3, 0);
    v6 = (_QWORD *)*a1;
  }
  a1[1] = a5;
  a1[2] = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 32))(*v6);
  a1[3] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1[1] + 32))(*(_QWORD *)a1[1]);
  return a1;
}

void sub_1AD93D734(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *a1 = &unk_1E5D1D3A0;
  v2 = a1[17];
  if (v2)
  {
    v3 = fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~SequenceComposeFilter(v2);
    MEMORY[0x1AF44D190](v3, 0x60C40FFD3A10ELL);
  }
  v4 = a1[22];
  if (v4)
  {
    v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(_QWORD *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1AF44D190](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
  _QWORD **v4;
  __int128 v5;
  uint64_t v6;

  *fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::ComposeFstImplBase((_QWORD *)a1, a2) = &unk_1E5D1D3A0;
  v4 = (_QWORD **)operator new();
  fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::NullComposeFilter(v4, *(_QWORD ***)(a2 + 136), 1);
  *(_QWORD *)(a1 + 136) = v4;
  v5 = *(_OWORD *)v4;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)v4;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v5 + 32))(*(_QWORD *)v5);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 152) + 32))(**(_QWORD **)(a1 + 152));
  v6 = operator new();
  fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::CompactHashBiTable(v6, *(_QWORD *)(a2 + 176));
  *(_QWORD *)(a1 + 176) = v6;
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  return a1;
}

void sub_1AD93D8C0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

_QWORD **fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::NullComposeFilter(_QWORD **a1, _QWORD **a2, uint64_t a3)
{
  *a1 = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(*a2, a3);
  a1[1] = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(a2[1], a3);
  a1[2] = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 32))(**a1);
  a1[3] = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1[1] + 32))(*a1[1]);
  return a1;
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v7;
  uint64_t v8;
  fst *v11;
  _QWORD *v12;
  void *__p[2];
  char v14;
  char v15;

  v3 = *(_DWORD *)(a1 + 184);
  if (!v3)
    return 1;
  if (v3 == 1)
    return 0;
  v7 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 144) + 104))(**(_QWORD **)(a1 + 144));
  v8 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 104))(**(_QWORD **)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    v12 = (_QWORD *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0)
      operator delete(__p[0]);
    *(_QWORD *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1)
    return 0;
  return v8 == -1 || v7 <= v8;
}

void sub_1AD93DAB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, int a8)
{
  unsigned int *v14;
  _QWORD v15[3];
  _DWORD *v16;
  unint64_t v17;
  unsigned int v18[5];

  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a7 + 56))(*a7, a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, a7, v18, a8);
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a5 + 136))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2])
        goto LABEL_13;
LABEL_7:
      v14 = (unsigned int *)(v15[1] + 20 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v15[0] + 24))(v15[0]))
      break;
    if (!v15[0])
      goto LABEL_7;
    v14 = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, a7, v14, a8);
    if (v15[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v15[0] + 40))(v15[0]);
    else
      ++v17;
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(_QWORD *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16)
    --*v16;
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1AD93DC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  else
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, int a2, _QWORD *a3, unsigned int *a4, int a5)
{
  unsigned int *v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  char v16;
  float32x2_t *v17;
  float32x2_t *v18;
  char v19;
  char v20;
  _QWORD v21[2];
  unsigned int v22;
  _QWORD v23[2];
  int v24;

  v10 = a4 + 1;
  if (!a5)
    v10 = a4;
  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 64))(*a3, *v10);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
    if ((result & 1) == 0)
    {
      do
      {
        v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
        v13 = *(_QWORD *)v12;
        v23[0] = *(_QWORD *)v12;
        v23[1] = *(_QWORD *)(v12 + 8);
        v24 = *(_DWORD *)(v12 + 16);
        v14 = *(_QWORD *)a4;
        v21[0] = *(_QWORD *)a4;
        v21[1] = *((_QWORD *)a4 + 1);
        v22 = a4[4];
        if (a5)
        {
          if (v14 > 0xFFFFFFFEFFFFFFFFLL)
            goto LABEL_19;
          v15 = v13 == 0xFFFFFFFFLL;
          v16 = v13 == 0xFFFFFFFFLL ? -1 : 0;
          v20 = v16;
          if (v15)
            goto LABEL_19;
          v17 = (float32x2_t *)v21;
          v18 = (float32x2_t *)v23;
        }
        else
        {
          if (v13 > 0xFFFFFFFEFFFFFFFFLL)
            goto LABEL_19;
          v19 = v14 == 0xFFFFFFFFLL ? -1 : 0;
          v20 = v19;
          if (v14 == 0xFFFFFFFFLL)
            goto LABEL_19;
          v17 = (float32x2_t *)v23;
          v18 = (float32x2_t *)v21;
        }
        fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v17, v18, &v20);
LABEL_19:
        (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 88))(*a3);
        result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
      }
      while (!(_DWORD)result);
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(_QWORD *)a1 = &unk_1E5D1F200;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = a4;
  *(_QWORD *)(a1 + 32) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a3 + 144), 0);
  *(_QWORD *)(a1 + 40) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a3 + 152), 0);
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 52) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = -1;
  *(_BYTE *)(a1 + 92) = 0;
  if (a4 == 1)
    *(_QWORD *)(a1 + 52) = 0xFFFFFFFF00000000;
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(v4, a1, a2);
  return v4;
}

void sub_1AD93DEE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40A1003FB7);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32));
  if ((_DWORD)result != 3)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
    if ((_DWORD)result != 3)
    {
      if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != 4|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
        {
          if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3;
          result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
          if ((_DWORD)result != *(_DWORD *)(a1 + 28))
            return 3;
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 92))
    return a2 | 4;
  else
    return a2;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;

  if (*(_DWORD *)(result + 24) != a2)
  {
    v2 = result;
    *(_DWORD *)(result + 24) = a2;
    v3 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 176) + 80) + 12 * a2);
    v4 = v3[1];
    (*(void (**)(_QWORD, _QWORD))(***(_QWORD ***)(result + 32) + 56))(**(_QWORD **)(result + 32), *v3);
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v2 + 40) + 56))(**(_QWORD **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 68) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(float32x2_t *a1, uint64_t a2)
{
  float32x2_t *v2;
  float32x2_t *v3;

  a1[6].i8[0] = (_DWORD)a2 == 0;
  if (a1[3].i32[1])
  {
    if ((_DWORD)a2)
    {
      v2 = a1 + 5;
      v3 = a1 + 4;
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
    }
  }
  else if ((_DWORD)a2)
  {
    v2 = a1 + 4;
    v3 = a1 + 5;
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, (_QWORD *)*v2, (_QWORD *)*v3);
  }
  return 1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48)
    || !(*(unsigned int (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 72))(**(_QWORD **)(a1 + 32)))
  {
    return 0;
  }
  else
  {
    return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 40) + 72))(**(_QWORD **)(a1 + 40));
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
    return a1 + 52;
  else
    return a1 + 72;
}

float32x2_t *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(float32x2_t *result)
{
  _QWORD *v1;
  _QWORD *v2;

  if (result[6].i8[0])
  {
    result[6].i8[0] = 0;
  }
  else
  {
    if (result[3].i32[1])
    {
      v2 = (_QWORD *)result[4];
      v1 = (_QWORD *)result[5];
    }
    else
    {
      v1 = (_QWORD *)result[4];
      v2 = (_QWORD *)result[5];
    }
    return (float32x2_t *)fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

_QWORD *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &unk_1E5D1F200;
  v2 = (_QWORD *)a1[4];
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    MEMORY[0x1AF44D190](v2, 0x20C4093837F09);
  }
  v3 = (_QWORD *)a1[5];
  if (v3)
  {
    if (*v3)
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
    MEMORY[0x1AF44D190](v3, 0x20C4093837F09);
  }
  return a1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  fst *v6;
  _QWORD *v7;
  void *__p[2];
  char v10;
  char v11;

  *(_QWORD *)a1 = &unk_1E5D1F200;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a2 + 32), a3);
  *(_QWORD *)(a1 + 40) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a2 + 40), a3);
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 52) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = -1;
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  if ((_DWORD)a3)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v6 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
    v7 = (_QWORD *)fst::cerr(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ComposeFstMatcher: safe copy not supported", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
    if (v10 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 92) = 1;
  }
  if (*(_DWORD *)(a1 + 28) == 1)
    *(int32x2_t *)(a1 + 52) = vrev64_s32(*(int32x2_t *)(a1 + 52));
  return a1;
}

void sub_1AD93E3E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(float32x2_t *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;
  __int32 v8;
  uint64_t v9;
  unsigned int *v10;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 64))(*a3);
  if ((_DWORD)result)
  {
    v8 = a1[3].i32[1];
    v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
    v10 = (unsigned int *)(v9 + 4);
    if (v8)
      v10 = (unsigned int *)v9;
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a4 + 64))(*a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(float32x2_t *a1, _QWORD *a2, _QWORD *a3)
{
  __int32 v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int32 v12;
  BOOL v13;
  float32x2_t *v14;
  float32x2_t *v15;
  float32x2_t v17[2];
  __int32 v18;
  float32x2_t v19[2];
  __int32 v20;

  while (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2)
       || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3) & 1) == 0)
  {
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3))
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 88))(*a2);
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2) & 1) == 0)
      {
        do
        {
          v6 = a1[3].i32[1];
          v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 80))(*a2);
          v8 = (unsigned int *)(v7 + 4);
          if (v6)
            v8 = (unsigned int *)v7;
          if (((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 64))(*a3, *v8) & 1) != 0)
            break;
          (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 88))(*a2);
        }
        while (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2));
      }
    }
    while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3) & 1) == 0)
    {
      v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 80))(*a2);
      v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
      (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 88))(*a3);
      v11 = a1[3].u32[0];
      v12 = a1[3].i32[1];
      v13 = v12 == 0;
      if (v12)
        v14 = (float32x2_t *)v10;
      else
        v14 = (float32x2_t *)v9;
      v19[0] = *v14;
      v19[1] = v14[1];
      v20 = v14[2].i32[0];
      if (v13)
        v15 = (float32x2_t *)v10;
      else
        v15 = (float32x2_t *)v9;
      v17[0] = *v15;
      v17[1] = v15[1];
      v18 = v15[2].i32[0];
      if (fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(a1, v11, v19, v17))return 1;
    }
  }
  return 0;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(float32x2_t *a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4)
{
  float32x2_t v4;
  __int32 v5;
  __int32 v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  if (a3->i32[1] == -1 || a4->i32[0] == -1)
    return 0;
  v4 = a1[2];
  v5 = a4[2].i32[0];
  LODWORD(v9) = a3[2].i32[0];
  HIDWORD(v9) = v5;
  v10 = 0;
  v6 = a4->i32[1];
  a1[9].i32[0] = a3->i32[0];
  a1[9].i32[1] = v6;
  a1[10] = vadd_f32(a3[1], a4[1]);
  v7 = 1;
  a1[11].i32[0] = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(*(_QWORD **)(*(_QWORD *)&v4 + 176), &v9, 1);
  return v7;
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(v6, a1, a2, a3);
  return v6;
}

void sub_1AD93E744(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  *(_QWORD *)fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1E5D1D580;
  v8 = *(__int128 **)(a4 + 40);
  if (!v8)
  {
    v8 = (__int128 *)operator new();
    fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::AltSequenceComposeFilter((uint64_t)v8, a2, a3, *(_QWORD **)(a4 + 24), *(_QWORD **)(a4 + 32));
  }
  *(_QWORD *)(a1 + 136) = v8;
  v9 = *v8;
  *(_OWORD *)(a1 + 144) = *v8;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v9 + 32))(*(_QWORD *)v9);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 152) + 32))(**(_QWORD **)(a1 + 152));
  v10 = *(_QWORD **)(a4 + 48);
  if (!v10)
  {
    v10 = (_QWORD *)operator new();
    v10[1] = v10;
    v10[2] = v10;
    std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::unordered_set((uint64_t)(v10 + 3), 0, v10 + 1, v10 + 2);
    v10[10] = 0;
    v10[11] = 0;
    v10[12] = 0;
  }
  *(_QWORD *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3)
    *(_QWORD *)(a1 + 8) |= 4uLL;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  v13 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 144) + 40))(**(_QWORD **)(a1 + 144), v11);
  v14 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 40))(**(_QWORD **)(a1 + 152), v12);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::ComposeProperties(v13, v14) & 0x3FFFFFFF0004;
  return a1;
}

void sub_1AD93E928(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 160) + 64))(*(_QWORD *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 168) + 64))(*(_QWORD *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 40))(**(_QWORD **)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 40))(**(_QWORD **)(a1 + 152), 0) & 4) != 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(v2, a1);
  return v2;
}

void sub_1AD93EAB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(_QWORD *a1, int a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;

  v4 = (unsigned int *)(*(_QWORD *)(a1[22] + 80) + 12 * a2);
  v5 = *v4;
  v6 = v4[1];
  v7 = (_QWORD *)a1[17];
  v16 = *((_BYTE *)v4 + 8);
  fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetState(v7, v5, v6, &v16);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    v9 = a1[20];
    v8 = a1[21];
    v10 = (_QWORD *)a1[19];
    v11 = (uint64_t)a1;
    v12 = a2;
    v13 = v6;
    v14 = v5;
    v15 = 1;
  }
  else
  {
    v8 = a1[20];
    v9 = a1[21];
    v10 = (_QWORD *)a1[18];
    v11 = (uint64_t)a1;
    v12 = a2;
    v13 = v5;
    v14 = v6;
    v15 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(v11, v12, v8, v13, v9, v14, v10, v15);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 24))(**(_QWORD **)(a1 + 144), 0) != a3
    || (*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 24))(**(_QWORD **)(a1 + 152), 0) != a3)
  {
    return 0;
  }
  v6 = operator new();
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(v6, a2, a1, a3);
  return v6;
}

void sub_1AD93EC30(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40A1003FB7);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(_QWORD **a1)
{
  uint64_t result;
  unsigned int v3;
  unint64_t v4;
  char v5;

  result = (*(uint64_t (**)(_QWORD *))(*a1[20] + 24))(a1[20]);
  if ((_DWORD)result != -1)
  {
    v3 = result;
    result = (*(uint64_t (**)(_QWORD *))(*a1[21] + 24))(a1[21]);
    if ((_DWORD)result != -1)
    {
      v4 = __PAIR64__(result, v3);
      v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

_QWORD *fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal@<X0>(uint64_t a1@<X0>, int a2@<W1>, float32x2_t *a3@<X8>)
{
  uint64_t v6;
  int *v7;
  int v8;
  _QWORD *result;
  uint64_t v10;
  float32x2_t v11;
  float32x2_t v12;
  _QWORD *v13;
  float32x2_t v14;
  float32x2_t v15;
  float v16;
  float v17;
  float v18;
  float v19;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 80);
  v7 = (int *)(v6 + 12 * a2);
  v8 = *v7;
  result = (*(_QWORD *(**)(float32x2_t *__return_ptr, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 96))(&v15, **(_QWORD **)(a1 + 144), *v7);
  v19 = v15.f32[1];
  v14.i32[0] = v15.i32[0];
  v18 = INFINITY;
  v17 = INFINITY;
  if (v15.f32[0] == INFINITY && v19 == v17)
  {
    *a3 = v15;
  }
  else
  {
    v10 = v7[1];
    result = (*(_QWORD *(**)(float32x2_t *__return_ptr, _QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 96))(&v14, **(_QWORD **)(a1 + 152), v10);
    v12 = v14;
    LODWORD(v18) = HIDWORD(*(_QWORD *)&v12);
    v11.i32[0] = (__int32)v12;
    v19 = v14.f32[0];
    v17 = INFINITY;
    v16 = INFINITY;
    if (v14.f32[0] == INFINITY && v18 == v16)
    {
      v11.i32[1] = v14.i32[1];
    }
    else
    {
      v13 = *(_QWORD **)(a1 + 136);
      LOBYTE(v19) = *(_BYTE *)(v6 + 12 * a2 + 8);
      result = fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetState(v13, v8, v10, &v19);
      v11 = vadd_f32(v15, v14);
    }
    *a3 = v11;
  }
  return result;
}

uint64_t fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::AltSequenceComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _QWORD *v10;

  v6 = a4;
  if (!a4)
  {
    v6 = (_QWORD *)operator new();
    fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Matcher(v6, a2, 1);
  }
  *(_QWORD *)a1 = v6;
  if (!a5)
  {
    v10 = (_QWORD *)operator new();
    fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Matcher(v10, a3, 0);
    a5 = v10;
  }
  *(_QWORD *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a5 + 32))(*a5);
  *(_QWORD *)(a1 + 24) = -1;
  *(_BYTE *)(a1 + 32) = -1;
  return a1;
}

void sub_1AD93EEE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *a1 = &unk_1E5D1D580;
  v2 = a1[17];
  if (v2)
  {
    v3 = fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~SequenceComposeFilter(v2);
    MEMORY[0x1AF44D190](v3, 0x1060C40AD892F49);
  }
  v4 = a1[22];
  if (v4)
  {
    v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(_QWORD *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1AF44D190](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  __int128 v5;
  uint64_t v6;

  *fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::ComposeFstImplBase((_QWORD *)a1, a2) = &unk_1E5D1D580;
  v4 = (__int128 *)operator new();
  fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::AltSequenceComposeFilter((uint64_t)v4, *(_QWORD ***)(a2 + 136), 1);
  *(_QWORD *)(a1 + 136) = v4;
  v5 = *v4;
  *(_OWORD *)(a1 + 144) = *v4;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v5 + 32))(*(_QWORD *)v5);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 152) + 32))(**(_QWORD **)(a1 + 152));
  v6 = operator new();
  fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::CompactHashBiTable(v6, *(_QWORD *)(a2 + 176));
  *(_QWORD *)(a1 + 176) = v6;
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  return a1;
}

void sub_1AD93F068(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::AltSequenceComposeFilter(uint64_t a1, _QWORD **a2, uint64_t a3)
{
  _QWORD *v6;

  *(_QWORD *)a1 = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(*a2, a3);
  v6 = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(a2[1], a3);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 32))(*v6);
  *(_QWORD *)(a1 + 24) = -1;
  *(_BYTE *)(a1 + 32) = -1;
  return a1;
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v7;
  uint64_t v8;
  fst *v11;
  _QWORD *v12;
  void *__p[2];
  char v14;
  char v15;

  v3 = *(_DWORD *)(a1 + 184);
  if (!v3)
    return 1;
  if (v3 == 1)
    return 0;
  v7 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 144) + 104))(**(_QWORD **)(a1 + 144));
  v8 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 104))(**(_QWORD **)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    v12 = (_QWORD *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0)
      operator delete(__p[0]);
    *(_QWORD *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1)
    return 0;
  return v8 == -1 || v7 <= v8;
}

void sub_1AD93F24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, int a8)
{
  unsigned int *v14;
  _QWORD v15[3];
  _DWORD *v16;
  unint64_t v17;
  unsigned int v18[5];

  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a7 + 56))(*a7, a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, a7, v18, a8);
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a5 + 136))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2])
        goto LABEL_13;
LABEL_7:
      v14 = (unsigned int *)(v15[1] + 20 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v15[0] + 24))(v15[0]))
      break;
    if (!v15[0])
      goto LABEL_7;
    v14 = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, a7, v14, a8);
    if (v15[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v15[0] + 40))(v15[0]);
    else
      ++v17;
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(_QWORD *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16)
    --*v16;
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1AD93F3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  else
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, int a2, _QWORD *a3, unsigned int *a4, int a5)
{
  unsigned int *v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  char v16;
  unsigned __int8 *v17;
  char v18;
  float32x2_t *v19;
  float32x2_t *v20;
  unint64_t v21;
  int v22;
  BOOL v23;
  char v24;
  int v25;
  BOOL v26;
  char v27;
  char v28;
  _QWORD v29[2];
  unsigned int v30;
  _QWORD v31[2];
  int v32;

  v10 = a4 + 1;
  if (!a5)
    v10 = a4;
  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 64))(*a3, *v10);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
    if ((result & 1) == 0)
    {
      do
      {
        v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
        v13 = *(_QWORD *)v12;
        v31[0] = *(_QWORD *)v12;
        v31[1] = *(_QWORD *)(v12 + 8);
        v32 = *(_DWORD *)(v12 + 16);
        v14 = *(_QWORD *)a4;
        v29[0] = *(_QWORD *)a4;
        v29[1] = *((_QWORD *)a4 + 1);
        v30 = a4[4];
        if (a5)
        {
          v15 = *(unsigned __int8 **)(a1 + 136);
          if ((_DWORD)v13 == -1)
          {
            if (!v15[33])
            {
              v16 = v15[34] ^ 1;
              goto LABEL_16;
            }
          }
          else
          {
            if (HIDWORD(v14) == -1)
            {
              v22 = v15[32];
              v23 = v22 == 1;
              if (v22 == 1)
                v24 = -1;
              else
                v24 = 0;
              v28 = v24;
              if (v23)
                goto LABEL_24;
              goto LABEL_17;
            }
            if (HIDWORD(v14))
            {
              v16 = 0;
LABEL_16:
              v28 = v16;
LABEL_17:
              v19 = (float32x2_t *)v29;
              v20 = (float32x2_t *)v31;
              goto LABEL_23;
            }
          }
        }
        else
        {
          v17 = *(unsigned __int8 **)(a1 + 136);
          if ((_DWORD)v14 == -1)
          {
            if (!v17[33])
            {
              v18 = v17[34] ^ 1;
              goto LABEL_21;
            }
          }
          else
          {
            v21 = HIDWORD(v13);
            if ((_DWORD)v21 == -1)
            {
              v25 = v17[32];
              v26 = v25 == 1;
              if (v25 == 1)
                v27 = -1;
              else
                v27 = 0;
              v28 = v27;
              if (v26)
                goto LABEL_24;
              goto LABEL_22;
            }
            if ((_DWORD)v21)
            {
              v18 = 0;
LABEL_21:
              v28 = v18;
LABEL_22:
              v19 = (float32x2_t *)v31;
              v20 = (float32x2_t *)v29;
LABEL_23:
              fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v19, v20, &v28);
            }
          }
        }
LABEL_24:
        (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 88))(*a3);
        result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
      }
      while (!(_DWORD)result);
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(_QWORD *)a1 = &unk_1E5D1F480;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = a4;
  *(_QWORD *)(a1 + 32) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a3 + 144), 0);
  *(_QWORD *)(a1 + 40) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a3 + 152), 0);
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 52) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = -1;
  *(_BYTE *)(a1 + 92) = 0;
  if (a4 == 1)
    *(_QWORD *)(a1 + 52) = 0xFFFFFFFF00000000;
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(v4, a1, a2);
  return v4;
}

void sub_1AD93F6D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40A1003FB7);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32));
  if ((_DWORD)result != 3)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
    if ((_DWORD)result != 3)
    {
      if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != 4|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
        {
          if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3;
          result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
          if ((_DWORD)result != *(_DWORD *)(a1 + 28))
            return 3;
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 92))
    return a2 | 4;
  else
    return a2;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;

  if (*(_DWORD *)(result + 24) != a2)
  {
    v2 = result;
    *(_DWORD *)(result + 24) = a2;
    v3 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 176) + 80) + 12 * a2);
    v4 = v3[1];
    (*(void (**)(_QWORD, _QWORD))(***(_QWORD ***)(result + 32) + 56))(**(_QWORD **)(result + 32), *v3);
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v2 + 40) + 56))(**(_QWORD **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 68) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(float32x2_t *a1, uint64_t a2)
{
  float32x2_t *v2;
  float32x2_t *v3;

  a1[6].i8[0] = (_DWORD)a2 == 0;
  if (a1[3].i32[1])
  {
    if ((_DWORD)a2)
    {
      v2 = a1 + 5;
      v3 = a1 + 4;
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
    }
  }
  else if ((_DWORD)a2)
  {
    v2 = a1 + 4;
    v3 = a1 + 5;
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, (_QWORD *)*v2, (_QWORD *)*v3);
  }
  return 1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48)
    || !(*(unsigned int (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 72))(**(_QWORD **)(a1 + 32)))
  {
    return 0;
  }
  else
  {
    return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 40) + 72))(**(_QWORD **)(a1 + 40));
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
    return a1 + 52;
  else
    return a1 + 72;
}

float32x2_t *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(float32x2_t *result)
{
  _QWORD *v1;
  _QWORD *v2;

  if (result[6].i8[0])
  {
    result[6].i8[0] = 0;
  }
  else
  {
    if (result[3].i32[1])
    {
      v2 = (_QWORD *)result[4];
      v1 = (_QWORD *)result[5];
    }
    else
    {
      v1 = (_QWORD *)result[4];
      v2 = (_QWORD *)result[5];
    }
    return (float32x2_t *)fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

_QWORD *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &unk_1E5D1F480;
  v2 = (_QWORD *)a1[4];
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    MEMORY[0x1AF44D190](v2, 0x20C4093837F09);
  }
  v3 = (_QWORD *)a1[5];
  if (v3)
  {
    if (*v3)
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
    MEMORY[0x1AF44D190](v3, 0x20C4093837F09);
  }
  return a1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  fst *v6;
  _QWORD *v7;
  void *__p[2];
  char v10;
  char v11;

  *(_QWORD *)a1 = &unk_1E5D1F480;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a2 + 32), a3);
  *(_QWORD *)(a1 + 40) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a2 + 40), a3);
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 52) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = -1;
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  if ((_DWORD)a3)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v6 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
    v7 = (_QWORD *)fst::cerr(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ComposeFstMatcher: safe copy not supported", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
    if (v10 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 92) = 1;
  }
  if (*(_DWORD *)(a1 + 28) == 1)
    *(int32x2_t *)(a1 + 52) = vrev64_s32(*(int32x2_t *)(a1 + 52));
  return a1;
}

void sub_1AD93FBD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(float32x2_t *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;
  __int32 v8;
  uint64_t v9;
  unsigned int *v10;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 64))(*a3);
  if ((_DWORD)result)
  {
    v8 = a1[3].i32[1];
    v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
    v10 = (unsigned int *)(v9 + 4);
    if (v8)
      v10 = (unsigned int *)v9;
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a4 + 64))(*a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(float32x2_t *a1, _QWORD *a2, _QWORD *a3)
{
  __int32 v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int32 v12;
  BOOL v13;
  float32x2_t *v14;
  float32x2_t *v15;
  float32x2_t v17[2];
  __int32 v18;
  float32x2_t v19[2];
  __int32 v20;

  while (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2)
       || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3) & 1) == 0)
  {
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3))
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 88))(*a2);
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2) & 1) == 0)
      {
        do
        {
          v6 = a1[3].i32[1];
          v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 80))(*a2);
          v8 = (unsigned int *)(v7 + 4);
          if (v6)
            v8 = (unsigned int *)v7;
          if (((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 64))(*a3, *v8) & 1) != 0)
            break;
          (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 88))(*a2);
        }
        while (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2));
      }
    }
    while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3) & 1) == 0)
    {
      v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 80))(*a2);
      v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
      (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 88))(*a3);
      v11 = a1[3].u32[0];
      v12 = a1[3].i32[1];
      v13 = v12 == 0;
      if (v12)
        v14 = (float32x2_t *)v10;
      else
        v14 = (float32x2_t *)v9;
      v19[0] = *v14;
      v19[1] = v14[1];
      v20 = v14[2].i32[0];
      if (v13)
        v15 = (float32x2_t *)v10;
      else
        v15 = (float32x2_t *)v9;
      v17[0] = *v15;
      v17[1] = v15[1];
      v18 = v15[2].i32[0];
      if (fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(a1, v11, v19, v17))return 1;
    }
  }
  return 0;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(float32x2_t *a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4)
{
  float32x2_t v4;
  _BYTE *v5;
  __int32 v6;
  char v7;
  uint64_t v8;
  __int32 v9;
  __int32 v10;
  uint64_t v12;
  char v13;

  v4 = a1[2];
  v5 = *(_BYTE **)(*(_QWORD *)&v4 + 136);
  if (a4->i32[0] == -1)
  {
    if (!v5[33])
    {
      v7 = v5[34] ^ 1;
LABEL_9:
      v9 = a4[2].i32[0];
      LODWORD(v12) = a3[2].i32[0];
      HIDWORD(v12) = v9;
      v13 = v7;
      v10 = a4->i32[1];
      a1[9].i32[0] = a3->i32[0];
      a1[9].i32[1] = v10;
      a1[10] = vadd_f32(a3[1], a4[1]);
      v8 = 1;
      a1[11].i32[0] = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(*(_QWORD **)(*(_QWORD *)&v4 + 176), &v12, 1);
      return v8;
    }
    return 0;
  }
  v6 = a3->i32[1];
  if (!v6)
    return 0;
  v7 = 0;
  if (v6 != -1)
    goto LABEL_9;
  v7 = 0;
  v8 = 0;
  if (v5[32] != 1)
    goto LABEL_9;
  return v8;
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(v6, a1, a2, a3);
  return v6;
}

void sub_1AD93FF68(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  *(_QWORD *)fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1E5D1D400;
  v8 = *(__int128 **)(a4 + 40);
  if (!v8)
  {
    v8 = (__int128 *)operator new();
    fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MatchComposeFilter((uint64_t)v8, a2, a3, *(_QWORD **)(a4 + 24), *(_QWORD **)(a4 + 32));
  }
  *(_QWORD *)(a1 + 136) = v8;
  v9 = *v8;
  *(_OWORD *)(a1 + 144) = *v8;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v9 + 32))(*(_QWORD *)v9);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 152) + 32))(**(_QWORD **)(a1 + 152));
  v10 = *(_QWORD **)(a4 + 48);
  if (!v10)
  {
    v10 = (_QWORD *)operator new();
    v10[1] = v10;
    v10[2] = v10;
    std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::unordered_set((uint64_t)(v10 + 3), 0, v10 + 1, v10 + 2);
    v10[10] = 0;
    v10[11] = 0;
    v10[12] = 0;
  }
  *(_QWORD *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3)
    *(_QWORD *)(a1 + 8) |= 4uLL;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  v13 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 144) + 40))(**(_QWORD **)(a1 + 144), v11);
  v14 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 40))(**(_QWORD **)(a1 + 152), v12);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::ComposeProperties(v13, v14) & 0x3FFFFFFF0004;
  return a1;
}

void sub_1AD94014C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 160) + 64))(*(_QWORD *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 168) + 64))(*(_QWORD *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 40))(**(_QWORD **)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 40))(**(_QWORD **)(a1 + 152), 0) & 4) != 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(v2, a1);
  return v2;
}

void sub_1AD9402D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(_QWORD *a1, int a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;

  v4 = (unsigned int *)(*(_QWORD *)(a1[22] + 80) + 12 * a2);
  v5 = *v4;
  v6 = v4[1];
  v7 = (_QWORD *)a1[17];
  v16 = *((_BYTE *)v4 + 8);
  fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetState(v7, v5, v6, &v16);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    v9 = a1[20];
    v8 = a1[21];
    v10 = (_QWORD *)a1[19];
    v11 = (uint64_t)a1;
    v12 = a2;
    v13 = v6;
    v14 = v5;
    v15 = 1;
  }
  else
  {
    v8 = a1[20];
    v9 = a1[21];
    v10 = (_QWORD *)a1[18];
    v11 = (uint64_t)a1;
    v12 = a2;
    v13 = v5;
    v14 = v6;
    v15 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(v11, v12, v8, v13, v9, v14, v10, v15);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 24))(**(_QWORD **)(a1 + 144), 0) != a3
    || (*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 24))(**(_QWORD **)(a1 + 152), 0) != a3)
  {
    return 0;
  }
  v6 = operator new();
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(v6, a2, a1, a3);
  return v6;
}

void sub_1AD940454(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40A1003FB7);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(_QWORD **a1)
{
  uint64_t result;
  unsigned int v3;
  unint64_t v4;
  char v5;

  result = (*(uint64_t (**)(_QWORD *))(*a1[20] + 24))(a1[20]);
  if ((_DWORD)result != -1)
  {
    v3 = result;
    result = (*(uint64_t (**)(_QWORD *))(*a1[21] + 24))(a1[21]);
    if ((_DWORD)result != -1)
    {
      v4 = __PAIR64__(result, v3);
      v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

_QWORD *fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal@<X0>(uint64_t a1@<X0>, int a2@<W1>, float32x2_t *a3@<X8>)
{
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  float32x2_t v11;
  float32x2_t v12;
  _QWORD *v13;
  float32x2_t v14;
  float32x2_t v15;
  float v16;
  float v17;
  float v18;
  float v19;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 80);
  v7 = (unsigned int *)(v6 + 12 * a2);
  v8 = *v7;
  result = (*(_QWORD *(**)(float32x2_t *__return_ptr, _QWORD, uint64_t))(***(_QWORD ***)(a1 + 144) + 96))(&v15, **(_QWORD **)(a1 + 144), v8);
  v19 = v15.f32[1];
  v14.i32[0] = v15.i32[0];
  v18 = INFINITY;
  v17 = INFINITY;
  if (v15.f32[0] == INFINITY && v19 == v17)
  {
    *a3 = v15;
  }
  else
  {
    v10 = v7[1];
    result = (*(_QWORD *(**)(float32x2_t *__return_ptr, _QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 96))(&v14, **(_QWORD **)(a1 + 152), v10);
    v12 = v14;
    LODWORD(v18) = HIDWORD(*(_QWORD *)&v12);
    v11.i32[0] = (__int32)v12;
    v19 = v14.f32[0];
    v17 = INFINITY;
    v16 = INFINITY;
    if (v14.f32[0] == INFINITY && v18 == v16)
    {
      v11.i32[1] = v14.i32[1];
    }
    else
    {
      v13 = *(_QWORD **)(a1 + 136);
      LOBYTE(v19) = *(_BYTE *)(v6 + 12 * a2 + 8);
      result = fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetState(v13, v8, v10, &v19);
      v11 = vadd_f32(v15, v14);
    }
    *a3 = v11;
  }
  return result;
}

uint64_t fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MatchComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v6;

  v6 = a4;
  if (!a4)
  {
    v6 = (_QWORD *)operator new();
    fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Matcher(v6, a2, 1);
  }
  *(_QWORD *)a1 = v6;
  if (!a5)
  {
    a5 = (_QWORD *)operator new();
    fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Matcher(a5, a3, 0);
    v6 = *(_QWORD **)a1;
  }
  *(_QWORD *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 32))(*v6);
  *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 32))(**(_QWORD **)(a1 + 8));
  *(_QWORD *)(a1 + 32) = -1;
  *(_BYTE *)(a1 + 40) = -1;
  return a1;
}

void sub_1AD940720(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *a1 = &unk_1E5D1D400;
  v2 = a1[17];
  if (v2)
  {
    v3 = fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~SequenceComposeFilter(v2);
    MEMORY[0x1AF44D190](v3, 0x1060C4035244DBALL);
  }
  v4 = a1[22];
  if (v4)
  {
    v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(_QWORD *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1AF44D190](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
  _QWORD **v4;
  __int128 v5;
  uint64_t v6;

  *fst::ComposeFstImplBase<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::ComposeFstImplBase((_QWORD *)a1, a2) = &unk_1E5D1D400;
  v4 = (_QWORD **)operator new();
  fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MatchComposeFilter(v4, *(_QWORD ***)(a2 + 136), 1);
  *(_QWORD *)(a1 + 136) = v4;
  v5 = *(_OWORD *)v4;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)v4;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v5 + 32))(*(_QWORD *)v5);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 152) + 32))(**(_QWORD **)(a1 + 152));
  v6 = operator new();
  fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::CompactHashBiTable(v6, *(_QWORD *)(a2 + 176));
  *(_QWORD *)(a1 + 176) = v6;
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  return a1;
}

void sub_1AD9408AC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

_QWORD **fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::MatchComposeFilter(_QWORD **a1, _QWORD **a2, uint64_t a3)
{
  *a1 = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(*a2, a3);
  a1[1] = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(a2[1], a3);
  a1[2] = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 32))(**a1);
  a1[3] = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1[1] + 32))(*a1[1]);
  a1[4] = (_QWORD *)-1;
  *((_BYTE *)a1 + 40) = -1;
  return a1;
}

_QWORD *fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetState(_QWORD *result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  float v15;
  int v16;
  float v17;
  int v18;

  v6 = result;
  if (*((_DWORD *)result + 8) != (_DWORD)a2 || *((_DWORD *)result + 9) != (_DWORD)a3 || *a4 != *((_BYTE *)result + 40))
  {
    *((_DWORD *)result + 8) = a2;
    *((_DWORD *)result + 9) = a3;
    *((_BYTE *)result + 40) = *a4;
    v7 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)result[2] + 40))(result[2], a2);
    v8 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v6[2] + 56))(v6[2], a2);
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)v6[2] + 32))(&v14, v6[2], a2);
    v9 = 0;
    v17 = *((float *)&v14 + 1);
    v18 = v14;
    v16 = 2139095040;
    v15 = INFINITY;
    v10.n128_u32[0] = v14;
    if (*(float *)&v14 == INFINITY)
    {
      v10.n128_f32[0] = v17;
      v9 = v17 == v15;
    }
    if (v7 != v8)
      v9 = 0;
    *((_BYTE *)v6 + 41) = v9;
    *((_BYTE *)v6 + 43) = v8 == 0;
    v11 = (*(uint64_t (**)(_QWORD, uint64_t, __n128))(*(_QWORD *)v6[3] + 40))(v6[3], a3, v10);
    v12 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v6[3] + 48))(v6[3], a3);
    result = (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)v6[3] + 32))(&v14, v6[3], a3);
    v13 = 0;
    v17 = *((float *)&v14 + 1);
    v18 = v14;
    v16 = 2139095040;
    v15 = INFINITY;
    if (*(float *)&v14 == INFINITY)
      v13 = v17 == v15;
    if (v11 != v12)
      v13 = 0;
    *((_BYTE *)v6 + 42) = v13;
    *((_BYTE *)v6 + 44) = v12 == 0;
  }
  return result;
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v7;
  uint64_t v8;
  fst *v11;
  _QWORD *v12;
  void *__p[2];
  char v14;
  char v15;

  v3 = *(_DWORD *)(a1 + 184);
  if (!v3)
    return 1;
  if (v3 == 1)
    return 0;
  v7 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 144) + 104))(**(_QWORD **)(a1 + 144));
  v8 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 104))(**(_QWORD **)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    v12 = (_QWORD *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0)
      operator delete(__p[0]);
    *(_QWORD *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1)
    return 0;
  return v8 == -1 || v7 <= v8;
}

void sub_1AD940C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, int a8)
{
  unsigned int *v14;
  _QWORD v15[3];
  _DWORD *v16;
  unint64_t v17;
  unsigned int v18[5];

  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a7 + 56))(*a7, a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, a7, v18, a8);
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a5 + 136))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2])
        goto LABEL_13;
LABEL_7:
      v14 = (unsigned int *)(v15[1] + 20 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v15[0] + 24))(v15[0]))
      break;
    if (!v15[0])
      goto LABEL_7;
    v14 = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, a7, v14, a8);
    if (v15[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v15[0] + 40))(v15[0]);
    else
      ++v17;
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(_QWORD *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16)
    --*v16;
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1AD940E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  else
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1, int a2, _QWORD *a3, unsigned int *a4, int a5)
{
  unsigned int *v10;
  uint64_t result;
  uint64_t v12;
  float32x2_t *v13;
  float32x2_t *v14;
  char v15;
  _QWORD v16[2];
  unsigned int v17;
  _QWORD v18[2];
  int v19;

  v10 = a4 + 1;
  if (!a5)
    v10 = a4;
  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 64))(*a3, *v10);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
    if ((result & 1) == 0)
    {
      do
      {
        v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
        v18[0] = *(_QWORD *)v12;
        v18[1] = *(_QWORD *)(v12 + 8);
        v19 = *(_DWORD *)(v12 + 16);
        v16[0] = *(_QWORD *)a4;
        v16[1] = *((_QWORD *)a4 + 1);
        v17 = a4[4];
        if (a5)
        {
          v15 = fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::FilterArc(*(unsigned __int8 **)(a1 + 136), (uint64_t)v16, v18);
          if (v15 != -1)
          {
            v13 = (float32x2_t *)v16;
            v14 = (float32x2_t *)v18;
LABEL_10:
            fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v13, v14, &v15);
          }
        }
        else
        {
          v15 = fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::FilterArc(*(unsigned __int8 **)(a1 + 136), (uint64_t)v18, v16);
          if (v15 != -1)
          {
            v13 = (float32x2_t *)v18;
            v14 = (float32x2_t *)v16;
            goto LABEL_10;
          }
        }
        (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 88))(*a3);
        result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
      }
      while (!(_DWORD)result);
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(_QWORD *)a1 = &unk_1E5D1F280;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = a4;
  *(_QWORD *)(a1 + 32) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a3 + 144), 0);
  *(_QWORD *)(a1 + 40) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a3 + 152), 0);
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 52) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = -1;
  *(_BYTE *)(a1 + 92) = 0;
  if (a4 == 1)
    *(_QWORD *)(a1 + 52) = 0xFFFFFFFF00000000;
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(v4, a1, a2);
  return v4;
}

void sub_1AD94109C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40A1003FB7);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32));
  if ((_DWORD)result != 3)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
    if ((_DWORD)result != 3)
    {
      if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != 4|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
        {
          if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3;
          result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
          if ((_DWORD)result != *(_DWORD *)(a1 + 28))
            return 3;
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 92))
    return a2 | 4;
  else
    return a2;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;

  if (*(_DWORD *)(result + 24) != a2)
  {
    v2 = result;
    *(_DWORD *)(result + 24) = a2;
    v3 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 176) + 80) + 12 * a2);
    v4 = v3[1];
    (*(void (**)(_QWORD, _QWORD))(***(_QWORD ***)(result + 32) + 56))(**(_QWORD **)(result + 32), *v3);
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v2 + 40) + 56))(**(_QWORD **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 68) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(float32x2_t *a1, uint64_t a2)
{
  float32x2_t *v2;
  float32x2_t *v3;

  a1[6].i8[0] = (_DWORD)a2 == 0;
  if (a1[3].i32[1])
  {
    if ((_DWORD)a2)
    {
      v2 = a1 + 5;
      v3 = a1 + 4;
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
    }
  }
  else if ((_DWORD)a2)
  {
    v2 = a1 + 4;
    v3 = a1 + 5;
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a2, (_QWORD *)*v2, (_QWORD *)*v3);
  }
  return 1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48)
    || !(*(unsigned int (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 72))(**(_QWORD **)(a1 + 32)))
  {
    return 0;
  }
  else
  {
    return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 40) + 72))(**(_QWORD **)(a1 + 40));
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
    return a1 + 52;
  else
    return a1 + 72;
}

float32x2_t *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(float32x2_t *result)
{
  _QWORD *v1;
  _QWORD *v2;

  if (result[6].i8[0])
  {
    result[6].i8[0] = 0;
  }
  else
  {
    if (result[3].i32[1])
    {
      v2 = (_QWORD *)result[4];
      v1 = (_QWORD *)result[5];
    }
    else
    {
      v1 = (_QWORD *)result[4];
      v2 = (_QWORD *)result[5];
    }
    return (float32x2_t *)fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

_QWORD *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &unk_1E5D1F280;
  v2 = (_QWORD *)a1[4];
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    MEMORY[0x1AF44D190](v2, 0x20C4093837F09);
  }
  v3 = (_QWORD *)a1[5];
  if (v3)
  {
    if (*v3)
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
    MEMORY[0x1AF44D190](v3, 0x20C4093837F09);
  }
  return a1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  fst *v6;
  _QWORD *v7;
  void *__p[2];
  char v10;
  char v11;

  *(_QWORD *)a1 = &unk_1E5D1F280;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a2 + 32), a3);
  *(_QWORD *)(a1 + 40) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a2 + 40), a3);
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 52) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = -1;
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  if ((_DWORD)a3)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v6 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
    v7 = (_QWORD *)fst::cerr(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ComposeFstMatcher: safe copy not supported", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
    if (v10 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 92) = 1;
  }
  if (*(_DWORD *)(a1 + 28) == 1)
    *(int32x2_t *)(a1 + 52) = vrev64_s32(*(int32x2_t *)(a1 + 52));
  return a1;
}

void sub_1AD941598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(float32x2_t *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;
  __int32 v8;
  uint64_t v9;
  unsigned int *v10;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 64))(*a3);
  if ((_DWORD)result)
  {
    v8 = a1[3].i32[1];
    v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
    v10 = (unsigned int *)(v9 + 4);
    if (v8)
      v10 = (unsigned int *)v9;
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a4 + 64))(*a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(float32x2_t *a1, _QWORD *a2, _QWORD *a3)
{
  __int32 v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int32 v12;
  BOOL v13;
  float32x2_t *v14;
  float32x2_t *v15;
  float32x2_t v17[2];
  __int32 v18;
  float32x2_t v19[2];
  __int32 v20;

  while (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2)
       || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3) & 1) == 0)
  {
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3))
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 88))(*a2);
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2) & 1) == 0)
      {
        do
        {
          v6 = a1[3].i32[1];
          v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 80))(*a2);
          v8 = (unsigned int *)(v7 + 4);
          if (v6)
            v8 = (unsigned int *)v7;
          if (((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 64))(*a3, *v8) & 1) != 0)
            break;
          (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 88))(*a2);
        }
        while (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2));
      }
    }
    while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3) & 1) == 0)
    {
      v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 80))(*a2);
      v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
      (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 88))(*a3);
      v11 = a1[3].u32[0];
      v12 = a1[3].i32[1];
      v13 = v12 == 0;
      if (v12)
        v14 = (float32x2_t *)v10;
      else
        v14 = (float32x2_t *)v9;
      v19[0] = *v14;
      v19[1] = v14[1];
      v20 = v14[2].i32[0];
      if (v13)
        v15 = (float32x2_t *)v10;
      else
        v15 = (float32x2_t *)v9;
      v17[0] = *v15;
      v17[1] = v15[1];
      v18 = v15[2].i32[0];
      if (fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(a1, v11, v19, v17))
      {
        return 1;
      }
    }
  }
  return 0;
}

BOOL fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(float32x2_t *a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4)
{
  char v7;
  char v8;
  __int32 v9;
  __int32 v10;
  uint64_t v12;
  char v13;

  v7 = fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::FilterArc(*(unsigned __int8 **)(*(_QWORD *)&a1[2] + 136), (uint64_t)a3, a4);
  v8 = v7;
  if (v7 != -1)
  {
    v9 = a4[2].i32[0];
    LODWORD(v12) = a3[2].i32[0];
    HIDWORD(v12) = v9;
    v13 = v7;
    v10 = a4->i32[1];
    a1[9].i32[0] = a3->i32[0];
    a1[9].i32[1] = v10;
    a1[10] = vadd_f32(a3[1], a4[1]);
    a1[11].i32[0] = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(*(_QWORD **)(*(_QWORD *)&a1[2] + 176), &v12, 1);
  }
  return ~v8 != 0;
}

uint64_t *quasar::CommandTagging::CommandTagging(uint64_t *a1, __int128 *a2, const void ***a3, __int128 **a4)
{
  std::string *v7;
  std::string *v8;
  __int128 v9;

  v7 = (std::string *)std::map<std::string,std::vector<quasar::Token>>::map[abi:ne180100](a1, a3);
  v7[1].__r_.__value_.__r.__words[0] = 0;
  v7[1].__r_.__value_.__l.__size_ = 0;
  v7[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v7 + 1, *a4, a4[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a4[1] - (char *)*a4) >> 3));
  v8 = (std::string *)(a1 + 6);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v9 = *a2;
    a1[8] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  return a1;
}

void sub_1AD94194C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<std::string,std::vector<quasar::Token>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::Token>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::Token>>>>::destroy(v2, *(_QWORD **)(v2 + 8));
  _Unwind_Resume(a1);
}

uint64_t quasar::CommandTagging::getTokensFromTag(uint64_t a1, const void **a2)
{
  return std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1, a2)+ 56;
}

void quasar::CommandTagging::getCommandId(quasar::CommandTagging *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 6), *((_QWORD *)this + 7));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 3);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 8);
  }
}

uint64_t quasar::CommandTagging::getTagSequence(quasar::CommandTagging *this)
{
  return (uint64_t)this + 24;
}

uint64_t quasar::CommandTagger::CommandTagger(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  unsigned int v11;
  unsigned int v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t Ptree;
  __int128 v17;
  std::string *v18;
  std::string *v19;
  __int128 v20;
  int v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  const std::string::value_type *v26;
  std::string *v27;
  int v28;
  std::string::size_type size;
  std::string *v30;
  uint64_t v31;
  std::string *v32;
  std::string *v33;
  uint64_t v34;
  std::string *v35;
  std::string *v36;
  uint64_t v37;
  std::string *v38;
  std::string *v39;
  uint64_t v40;
  std::string *v41;
  void *__p[4];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  void *v59;
  char v60;
  std::string v61;
  std::string v62;
  std::string v63;

  *(_OWORD *)(a1 + 8) = 0u;
  v6 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  v7 = (std::string *)(a1 + 24);
  *(_QWORD *)a1 = &off_1E5D34E30;
  v8 = (std::string *)(a1 + 48);
  *(_OWORD *)(a1 + 72) = 0u;
  v9 = (std::string *)(a1 + 72);
  v10 = (std::string *)(a1 + 96);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)quasar::COMMAND_TAGGER_TYPE_NAME);
  v11 = quasar::QuasarTextProcImpl::modelExist(a2, (unsigned __int8 **)__p, a3);
  v12 = v11;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if (v12)
      goto LABEL_3;
  }
  else if (v11)
  {
LABEL_3:
    std::allocate_shared[abi:ne180100]<quasar::QuasarTextProcImpl,std::allocator<quasar::QuasarTextProcImpl>,char const*&,quasar::SystemConfig &,std::string const&,void>((char **)&quasar::COMMAND_TAGGER_TYPE_NAME, a2, a3, __p);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](v6, (__int128 *)__p);
    v13 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v14 = (unint64_t *)((char *)__p[1] + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v63, "text-proc");
    Ptree = quasar::SystemConfig::getPtree(a2, (uint64_t)&v63);
    LODWORD(__p[0]) = *(_DWORD *)Ptree;
    if (*(char *)(Ptree + 31) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[1], *(const std::string::value_type **)(Ptree + 8), *(_QWORD *)(Ptree + 16));
    }
    else
    {
      v17 = *(_OWORD *)(Ptree + 8);
      __p[3] = *(void **)(Ptree + 24);
      *(_OWORD *)&__p[1] = v17;
    }
    v44 = 0uLL;
    *(_QWORD *)&v45 = 0;
    std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((std::string *)&v44, *(_QWORD *)(Ptree + 32), *(_QWORD *)(Ptree + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(Ptree + 40) - *(_QWORD *)(Ptree + 32)) >> 3));
    BYTE8(v45) = *(_BYTE *)(Ptree + 56);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v63.__r_.__value_.__l.__data_);
    v18 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v59, (char *)quasar::COMMAND_TAGGER_TYPE_NAME);
    v19 = std::string::append(v18, ".");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v21 = *(char *)(a3 + 23);
    if (v21 >= 0)
      v22 = (const std::string::value_type *)a3;
    else
      v22 = *(const std::string::value_type **)a3;
    if (v21 >= 0)
      v23 = *(unsigned __int8 *)(a3 + 23);
    else
      v23 = *(_QWORD *)(a3 + 8);
    v24 = std::string::append(&v61, v22, v23);
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a3 + 23) < 0)
    {
      if (*(_QWORD *)(a3 + 8))
        goto LABEL_24;
    }
    else if (*(_BYTE *)(a3 + 23))
    {
LABEL_24:
      v26 = ".";
      goto LABEL_27;
    }
    v26 = "";
LABEL_27:
    v27 = std::string::append(&v62, v26);
    v63 = *v27;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    if (v60 < 0)
      operator delete(v59);
    std::string::basic_string[abi:ne180100]<0>(&v62, "<");
    v28 = SHIBYTE(v63.__r_.__value_.__r.__words[2]);
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v63.__r_.__value_.__r.__words[2]);
    else
      size = v63.__r_.__value_.__l.__size_;
    v30 = &v61;
    v31 = std::string::basic_string[abi:ne180100]((uint64_t)&v61, size + 9);
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v30 = (std::string *)v61.__r_.__value_.__r.__words[0];
    if (size)
    {
      if (v28 >= 0)
        v32 = &v63;
      else
        v32 = (std::string *)v63.__r_.__value_.__r.__words[0];
      v31 = (uint64_t)memmove(v30, v32, size);
    }
    strcpy((char *)v30 + size, "tag-start");
    quasar::CommandTagger::assignValue(v31, v7, &v62, (uint64_t)&v61, (uint64_t)__p);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v62, ">");
    v33 = &v61;
    v34 = std::string::basic_string[abi:ne180100]((uint64_t)&v61, size + 7);
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v33 = (std::string *)v61.__r_.__value_.__r.__words[0];
    if (size)
    {
      if (v28 >= 0)
        v35 = &v63;
      else
        v35 = (std::string *)v63.__r_.__value_.__r.__words[0];
      v34 = (uint64_t)memmove(v33, v35, size);
    }
    strcpy((char *)v33 + size, "tag-end");
    quasar::CommandTagger::assignValue(v34, v8, &v62, (uint64_t)&v61, (uint64_t)__p);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v62, "");
    v36 = &v61;
    v37 = std::string::basic_string[abi:ne180100]((uint64_t)&v61, size + 16);
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v36 = (std::string *)v61.__r_.__value_.__r.__words[0];
    if (size)
    {
      if (v28 >= 0)
        v38 = &v63;
      else
        v38 = (std::string *)v63.__r_.__value_.__r.__words[0];
      v37 = (uint64_t)memmove(v36, v38, size);
    }
    strcpy((char *)v36 + size, "parameter-prefix");
    quasar::CommandTagger::assignValue(v37, v9, &v62, (uint64_t)&v61, (uint64_t)__p);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v62, "");
    v39 = &v61;
    v40 = std::string::basic_string[abi:ne180100]((uint64_t)&v61, size + 21);
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v39 = (std::string *)v61.__r_.__value_.__r.__words[0];
    if (size)
    {
      if (v28 >= 0)
        v41 = &v63;
      else
        v41 = (std::string *)v63.__r_.__value_.__r.__words[0];
      v40 = (uint64_t)memmove(v39, v41, size);
    }
    strcpy((char *)v39 + size, "command-phrase-prefix");
    quasar::CommandTagger::assignValue(v40, v10, &v62, (uint64_t)&v61, (uint64_t)__p);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v62.__r_.__value_.__l.__data_);
      if ((v28 & 0x80000000) == 0)
        goto LABEL_80;
    }
    else if ((v28 & 0x80000000) == 0)
    {
LABEL_80:
      quasar::PTree::~PTree((quasar::PTree *)__p);
      return a1;
    }
    operator delete(v63.__r_.__value_.__l.__data_);
    goto LABEL_80;
  }
  if (quasar::gLogLevel >= 1)
  {
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v44 = 0u;
    memset(__p, 0, sizeof(__p));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Error with configuration for CommandTagger", 42);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
  }
  return a1;
}

void sub_1AD941FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  char *v18;
  uint64_t v19;
  void **v20;
  void **v21;
  void **v22;
  void **v23;

  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  if (v18[119] < 0)
    operator delete(*v23);
  if (v18[95] < 0)
    operator delete(*v22);
  if (v18[71] < 0)
    operator delete(*v21);
  if (v18[47] < 0)
    operator delete(*v20);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v19);
  _Unwind_Resume(a1);
}

std::string *quasar::CommandTagger::assignValue(uint64_t a1, std::string *a2, const std::string *String, uint64_t a4, uint64_t a5)
{
  quasar::PTree *ChildOptional;

  ChildOptional = (quasar::PTree *)quasar::PTree::getChildOptional(a5, a4);
  if (ChildOptional)
    String = (const std::string *)quasar::PTree::getString(ChildOptional);
  return std::string::operator=(a2, String);
}

void quasar::CommandTagger::run(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  quasar::CommandTagger::runImpl(a1, a2, a3, a4, 1);
}

void quasar::CommandTagger::runImpl(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, int a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  std::string *v13;
  std::string *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  std::string v18;
  std::string v19;
  void *v20[6];
  std::string v21;
  uint64_t v22;
  std::string *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;

  v25 = 0;
  v26 = 0;
  v27 = 0;
  quasar::QuasarTextProcImpl::run(a1[1], a2, (uint64_t *)&v25, 1, 1u, 1);
  v9 = v25;
  v17 = v26;
  if (v25 == v26)
    goto LABEL_32;
  do
  {
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v10 = *v9;
    v11 = v9[1];
    while (v10 != v11)
    {
      quasar::CommandTagger::createCommandTagging((quasar::CommandTagger *)a1, v10, (uint64_t *)v20);
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v19, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
      else
        v19 = v21;
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      {
        if (!v19.__r_.__value_.__l.__size_)
        {
          operator delete(v19.__r_.__value_.__l.__data_);
          goto LABEL_27;
        }
      }
      else if (!*((_BYTE *)&v19.__r_.__value_.__s + 23))
      {
        goto LABEL_27;
      }
      if (a5)
      {
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v18, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
        else
          v18 = v21;
        v12 = std::__tree<std::string>::__count_unique<std::string>(a4, (const void **)&v18.__r_.__value_.__l.__data_) != 0;
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v18.__r_.__value_.__l.__data_);
        if ((*((_BYTE *)&v19.__r_.__value_.__s + 23) & 0x80) == 0)
        {
LABEL_15:
          if (!v12)
            goto LABEL_27;
          goto LABEL_23;
        }
      }
      else
      {
        v12 = 1;
        if ((*((_BYTE *)&v19.__r_.__value_.__s + 23) & 0x80) == 0)
          goto LABEL_15;
      }
      operator delete(v19.__r_.__value_.__l.__data_);
      if (!v12)
        goto LABEL_27;
LABEL_23:
      v13 = v23;
      if ((unint64_t)v23 >= v24)
      {
        v14 = (std::string *)std::vector<quasar::CommandTagging>::__push_back_slow_path<quasar::CommandTagging const&>(&v22, (uint64_t)v20);
      }
      else
      {
        std::allocator<quasar::CommandTagging>::construct[abi:ne180100]<quasar::CommandTagging,quasar::CommandTagging const&>((uint64_t)&v24, v23, (uint64_t)v20);
        v14 = v13 + 3;
      }
      v23 = v14;
LABEL_27:
      quasar::CommandTagging::~CommandTagging(v20);
      v10 += 24;
    }
    v15 = a3[1];
    if (v15 >= a3[2])
    {
      v16 = std::vector<std::vector<quasar::CommandTagging>>::__push_back_slow_path<std::vector<quasar::CommandTagging> const&>(a3, &v22);
    }
    else
    {
      std::vector<std::vector<quasar::CommandTagging>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::CommandTagging> const&>((uint64_t)a3, &v22);
      v16 = v15 + 24;
    }
    a3[1] = v16;
    v20[0] = &v22;
    std::vector<quasar::CommandTagging>::__destroy_vector::operator()[abi:ne180100]((void ***)v20);
    v9 += 3;
  }
  while (v9 != v17);
LABEL_32:
  v20[0] = &v25;
  std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v20);
}

void sub_1AD942388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  a22 = v22 - 112;
  std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  _Unwind_Resume(a1);
}

void quasar::CommandTagger::~CommandTagger(void **this)
{
  *this = &off_1E5D34E30;
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 1));
}

{
  quasar::CommandTagger::~CommandTagger(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::CommandTagger::getParameterTag(quasar::CommandTagger *this)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  _QWORD v11[11];
  char v12;
  uint64_t v13;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v10);
  v4 = *((_QWORD *)this + 9);
  v3 = (char *)this + 72;
  v2 = v4;
  v5 = v3[23];
  if (v5 >= 0)
    v6 = (uint64_t)v3;
  else
    v6 = v2;
  if (v5 >= 0)
    v7 = v3[23];
  else
    v7 = *((_QWORD *)v3 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v6, v7);
  std::ostream::operator<<();
  std::stringbuf::str();
  v10[0] = *MEMORY[0x1E0DE4F50];
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v11[0] = v8;
  v11[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v12 < 0)
    operator delete((void *)v11[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v13);
}

void sub_1AD942578(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::CommandTagger::getCommandPhraseTag(quasar::CommandTagger *this)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  _QWORD v11[11];
  char v12;
  uint64_t v13;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v10);
  v4 = *((_QWORD *)this + 12);
  v3 = (char *)this + 96;
  v2 = v4;
  v5 = v3[23];
  if (v5 >= 0)
    v6 = (uint64_t)v3;
  else
    v6 = v2;
  if (v5 >= 0)
    v7 = v3[23];
  else
    v7 = *((_QWORD *)v3 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v6, v7);
  std::ostream::operator<<();
  std::stringbuf::str();
  v10[0] = *MEMORY[0x1E0DE4F50];
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v11[0] = v8;
  v11[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v12 < 0)
    operator delete((void *)v11[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v13);
}

void sub_1AD942670(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL quasar::CommandTagger::isParameterTag(uint64_t a1, const std::string *a2)
{
  return quasar::CommandTagger::matchesTagConvention(a1, a2, a1 + 72);
}

BOOL quasar::CommandTagger::matchesTagConvention(uint64_t a1, const std::string *a2, uint64_t a3)
{
  const std::string *v4;
  size_t size;
  int v6;
  std::string::size_type v7;
  const void *v8;
  size_t v9;
  _BOOL8 v10;
  std::string::size_type v12;
  std::string::size_type v13;
  std::string *v14;
  int v15;
  std::string v16;
  char v17;

  v4 = a2;
  size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v6 = (char)size;
  if ((size & 0x80u) != 0)
    size = a2->__r_.__value_.__l.__size_;
  v7 = *(unsigned __int8 *)(a3 + 23);
  if (*(char *)(a3 + 23) < 0)
  {
    v9 = *(_QWORD *)(a3 + 8);
    if (size <= v9)
      return 0;
    v8 = *(const void **)a3;
  }
  else
  {
    v8 = (const void *)a3;
    v9 = *(unsigned __int8 *)(a3 + 23);
    if (size <= v7)
      return 0;
  }
  if (v6 < 0)
    a2 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  if (memcmp(v8, a2, v9))
    return 0;
  if ((v7 & 0x80u) == 0)
    v12 = v7;
  else
    v12 = *(_QWORD *)(a3 + 8);
  std::string::basic_string(&v16, v4, v12, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v17);
  v13 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &v16;
  else
    v14 = (std::string *)v16.__r_.__value_.__r.__words[0];
  v10 = 1;
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v13 = v16.__r_.__value_.__l.__size_;
  for (; v13; --v13)
  {
    if (v10)
    {
      if (v14->__r_.__value_.__s.__data_[0] < 0)
        v15 = 0;
      else
        v15 = (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v14->__r_.__value_.__s.__data_[0] + 60) >> 10) & 1;
      v10 = v15 != 0;
    }
    else
    {
      v10 = 0;
    }
    v14 = (std::string *)((char *)v14 + 1);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  return v10;
}

BOOL quasar::CommandTagger::isCommandPhraseTag(uint64_t a1, const std::string *a2)
{
  return quasar::CommandTagger::matchesTagConvention(a1, a2, a1 + 96);
}

void quasar::CommandTagger::createCommandTagging(quasar::CommandTagger *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  BOOL isTag;
  uint64_t *v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  const quasar::Token *v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t *v15;
  std::string *v16;
  __int128 v17;
  uint64_t *v18;
  uint64_t *v19;
  const quasar::Token *v20;
  unint64_t v21;
  uint64_t v22;
  std::string *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  BOOL v27;
  uint64_t *v28;
  Token v29;
  void *v30;
  char v31;
  uint64_t v32;
  void *v33;
  char v34;
  uint64_t v35;
  void *v36;
  char v37;
  void *v38;
  char v39;
  std::string v40;
  Token v41;
  void *v42;
  char v43;
  uint64_t v44;
  void *v45;
  char v46;
  uint64_t v47;
  void *v48;
  char v49;
  void *v50;
  char v51;
  Token v52;
  void *v53;
  char v54;
  uint64_t v55;
  void *v56;
  char v57;
  uint64_t v58;
  void *v59;
  char v60;
  void *v61;
  char v62;
  std::string v63;
  Token v64;
  void *v65;
  char v66;
  uint64_t v67;
  void *v68;
  char v69;
  uint64_t v70;
  void *v71;
  char v72;
  void *v73;
  char v74;
  std::string __s;
  __int128 *v76;
  std::string *v77;
  unint64_t v78;
  uint64_t *v79;
  _QWORD *v80;
  uint64_t v81;
  void *v82[2];
  char v83;
  Token v84;
  void *v85;
  char v86;
  uint64_t v87;
  void *v88;
  char v89;
  uint64_t v90;
  void *v91;
  char v92;
  void *__p;
  char v94;
  std::string *p_s;
  void **v96[3];

  quasar::Token::Token((std::string *)&v84, *(const quasar::Token **)a2);
  isTag = quasar::CommandTagger::isTag(a1, &v84);
  if (v94 < 0)
    operator delete(__p);
  if (v92 < 0)
    operator delete(v91);
  v79 = &v90;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
  if (v89 < 0)
    operator delete(v88);
  v79 = &v87;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
  if (v86 < 0)
    operator delete(v85);
  if (*((char *)&v84.tokenName.__r_.__value_.var0.var1 + 23) < 0)
  {
    operator delete(v84.tokenName.__r_.__value_.var0.var1.__data_);
    if (isTag)
      goto LABEL_11;
LABEL_25:
    std::string::basic_string[abi:ne180100]<0>(v82, "");
    v81 = 0;
    v80 = 0;
    v79 = (uint64_t *)&v80;
    v77 = 0;
    v76 = 0;
    v78 = 0;
    quasar::CommandTagging::CommandTagging(a3, (__int128 *)v82, (const void ***)&v79, &v76);
    __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&v76;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
    std::__tree<std::__value_type<std::string,std::vector<quasar::Token>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::Token>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::Token>>>>::destroy((uint64_t)&v79, v80);
    if (v83 < 0)
      operator delete(v82[0]);
    return;
  }
  if (!isTag)
    goto LABEL_25;
LABEL_11:
  v81 = 0;
  v80 = 0;
  v79 = (uint64_t *)&v80;
  v77 = 0;
  v76 = 0;
  v78 = 0;
  quasar::Token::Token((std::string *)&v64, (const quasar::Token *)(*(_QWORD *)a2 + 224));
  quasar::CommandTagger::getTagText(a1, (const std::string *)&v64, &__s);
  if (v74 < 0)
    operator delete(v73);
  if (v72 < 0)
    operator delete(v71);
  v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
  if (v69 < 0)
    operator delete(v68);
  v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
  if (v66 < 0)
    operator delete(v65);
  if (*((char *)&v64.tokenName.__r_.__value_.var0.var1 + 23) < 0)
    operator delete(v64.tokenName.__r_.__value_.var0.var1.__data_);
  memset(&v63, 0, sizeof(v63));
  p_s = &__s;
  v7 = std::__tree<std::__value_type<std::string,std::vector<quasar::Token>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::Token>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::Token>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v79, (const void **)&__s.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&p_s);
  std::vector<quasar::Token>::__vdeallocate((void **)v7 + 7);
  *(std::string *)(v7 + 7) = v63;
  memset(&v63, 0, sizeof(v63));
  v96[0] = (void **)&v63;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v96);
  v8 = v77;
  if ((unint64_t)v77 >= v78)
  {
    v10 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v76, (__int128 *)&__s);
  }
  else
  {
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v77, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    }
    else
    {
      v9 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
      v77->__r_.__value_.__r.__words[2] = __s.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
    }
    v10 = v8 + 1;
  }
  v28 = a3;
  v77 = v10;
  v11 = *(const quasar::Token **)a2;
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5)) >= 3)
  {
    v12 = 2;
    v13 = 448;
    do
    {
      quasar::Token::Token((std::string *)&v52, (const quasar::Token *)((char *)v11 + v13));
      v14 = quasar::CommandTagger::isTag(a1, &v52);
      if (v62 < 0)
        operator delete(v61);
      if (v60 < 0)
        operator delete(v59);
      v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
      if (v57 < 0)
        operator delete(v56);
      v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&v55;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
      if (v54 < 0)
        operator delete(v53);
      if (*((char *)&v52.tokenName.__r_.__value_.var0.var1 + 23) < 0)
      {
        operator delete(v52.tokenName.__r_.__value_.var0.var1.__data_);
        if (v14)
        {
LABEL_42:
          quasar::Token::Token((std::string *)&v41, (const quasar::Token *)(*(_QWORD *)a2 + v13));
          quasar::CommandTagger::getTagText(a1, (const std::string *)&v41, &v63);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__s.__r_.__value_.__l.__data_);
          __s = v63;
          *((_BYTE *)&v63.__r_.__value_.__s + 23) = 0;
          v63.__r_.__value_.__s.__data_[0] = 0;
          if (v51 < 0)
            operator delete(v50);
          if (v49 < 0)
            operator delete(v48);
          v96[0] = (void **)&v47;
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v96);
          if (v46 < 0)
            operator delete(v45);
          v96[0] = (void **)&v44;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v96);
          if (v43 < 0)
            operator delete(v42);
          if (*((char *)&v41.tokenName.__r_.__value_.var0.var1 + 23) < 0)
            operator delete(v41.tokenName.__r_.__value_.var0.var1.__data_);
          memset(&v63, 0, sizeof(v63));
          p_s = &__s;
          v15 = std::__tree<std::__value_type<std::string,std::vector<quasar::Token>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::Token>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::Token>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v79, (const void **)&__s.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&p_s);
          std::vector<quasar::Token>::__vdeallocate((void **)v15 + 7);
          *(std::string *)(v15 + 7) = v63;
          memset(&v63, 0, sizeof(v63));
          v96[0] = (void **)&v63;
          std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v96);
          v16 = v77;
          if ((unint64_t)v77 >= v78)
          {
            v23 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v76, (__int128 *)&__s);
          }
          else
          {
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v77, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            }
            else
            {
              v17 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
              v77->__r_.__value_.__r.__words[2] = __s.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
            }
            v23 = v16 + 1;
          }
          v77 = v23;
          goto LABEL_66;
        }
      }
      else if (v14)
      {
        goto LABEL_42;
      }
      v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s;
      v18 = std::__tree<std::__value_type<std::string,std::vector<quasar::Token>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::Token>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::Token>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v79, (const void **)&__s.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v63);
      v19 = v18;
      v20 = (const quasar::Token *)(*(_QWORD *)a2 + v13);
      v21 = v18[8];
      if (v21 >= v18[9])
      {
        v22 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(v18 + 7, v20);
      }
      else
      {
        quasar::Token::Token((std::string *)v18[8], v20);
        v22 = v21 + 224;
        v19[8] = v21 + 224;
      }
      v19[8] = v22;
LABEL_66:
      ++v12;
      v11 = *(const quasar::Token **)a2;
      v13 += 224;
    }
    while (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5) > v12);
  }
  v24 = v79;
  if (v79 != (uint64_t *)&v80)
  {
    do
    {
      *(_BYTE *)(v24[7] + 45) = 0;
      *(_BYTE *)(v24[8] - 180) = 0;
      v25 = (uint64_t *)v24[1];
      if (v25)
      {
        do
        {
          v26 = v25;
          v25 = (uint64_t *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          v26 = (uint64_t *)v24[2];
          v27 = *v26 == (_QWORD)v24;
          v24 = v26;
        }
        while (!v27);
      }
      v24 = v26;
    }
    while (v26 != (uint64_t *)&v80);
  }
  quasar::Token::Token((std::string *)&v29, v11);
  quasar::CommandTagger::getTagText(a1, (const std::string *)&v29, &v40);
  quasar::CommandTagging::CommandTagging(v28, (__int128 *)&v40, (const void ***)&v79, &v76);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (v39 < 0)
    operator delete(v38);
  if (v37 < 0)
    operator delete(v36);
  v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
  if (v34 < 0)
    operator delete(v33);
  v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
  if (v31 < 0)
    operator delete(v30);
  if (*((char *)&v29.tokenName.__r_.__value_.var0.var1 + 23) < 0)
    operator delete(v29.tokenName.__r_.__value_.var0.var1.__data_);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&v76;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
  std::__tree<std::__value_type<std::string,std::vector<quasar::Token>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::Token>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::Token>>>>::destroy((uint64_t)&v79, v80);
}

void sub_1AD942EB0(_Unwind_Exception *a1)
{
  unint64_t v1;

  STACK[0x3F8] = v1;
  if (SLOBYTE(STACK[0x3E7]) < 0)
    operator delete((void *)STACK[0x3D0]);
  STACK[0x3D0] = (unint64_t)&STACK[0x3F0];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3D0]);
  std::__tree<std::__value_type<std::string,std::vector<quasar::Token>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::Token>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::Token>>>>::destroy((uint64_t)&STACK[0x408], (_QWORD *)STACK[0x410]);
  _Unwind_Resume(a1);
}

BOOL quasar::CommandTagger::isTag(quasar::CommandTagger *this, Token *a2)
{
  unint64_t v3;
  Token *data;
  unint64_t size;
  uint64_t v6;
  char *v7;
  BOOL v8;
  uint64_t v9;
  unsigned __int8 *v10;
  Token *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  Token *v14;
  unint64_t v15;
  int v16;
  char *v17;
  size_t v18;
  char *v19;

  v3 = *((unsigned __int8 *)&a2->tokenName.__r_.__value_.var0.var1 + 23);
  if (*((char *)&a2->tokenName.__r_.__value_.var0.var1 + 23) < 0)
  {
    data = (Token *)a2->tokenName.__r_.__value_.var0.var1.__data_;
    size = a2->tokenName.__r_.__value_.var0.var1.__size_;
  }
  else
  {
    data = a2;
    size = *((unsigned __int8 *)&a2->tokenName.__r_.__value_.var0.var1 + 23);
  }
  v6 = *((unsigned __int8 *)this + 47);
  if ((v6 & 0x80u) == 0)
    v7 = (char *)this + 24;
  else
    v7 = (char *)*((_QWORD *)this + 3);
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)this + 4);
  if (size)
    v8 = v6 == 0;
  else
    v8 = 1;
  if (v8)
    return 0;
  v10 = (unsigned __int8 *)&data->tokenName.__r_.__value_.var0.var0.__data_[size];
  v11 = data;
  while (2)
  {
    v12 = v6;
    v13 = (unsigned __int8 *)v7;
    do
    {
      if (v11->tokenName.__r_.__value_.var0.var0.__data_[0] == *v13)
      {
        v9 = 0;
        if (v11 != (Token *)v10 && v11 == data)
        {
          if ((v3 & 0x80) != 0)
          {
            v14 = (Token *)a2->tokenName.__r_.__value_.var0.var1.__data_;
            v15 = a2->tokenName.__r_.__value_.var0.var1.__size_;
          }
          else
          {
            v14 = a2;
            v15 = *((unsigned __int8 *)&a2->tokenName.__r_.__value_.var0.var1 + 23);
          }
          v16 = *((char *)this + 71);
          if (v16 >= 0)
            v17 = (char *)this + 48;
          else
            v17 = (char *)*((_QWORD *)this + 6);
          if (v16 >= 0)
            v18 = *((unsigned __int8 *)this + 71);
          else
            v18 = *((_QWORD *)this + 7);
          if (v18)
          {
            v19 = (char *)&v14[-1].tokenName.var0 + 7;
            while (v15)
            {
              if (memchr(v17, v19[v15--], v18))
              {
                if ((v3 & 0x80) != 0)
                  goto LABEL_39;
                return v15 == v3 - v18;
              }
            }
          }
          v15 = -1;
          if ((v3 & 0x80) != 0)
LABEL_39:
            v3 = a2->tokenName.__r_.__value_.var0.var1.__size_;
          return v15 == v3 - v18;
        }
        return v9;
      }
      ++v13;
      --v12;
    }
    while (v12);
    v9 = 0;
    v11 = (Token *)((char *)v11 + 1);
    if (v11 != (Token *)v10)
      continue;
    return v9;
  }
}

std::string *quasar::CommandTagger::getTagText@<X0>(quasar::CommandTagger *this@<X0>, const std::string *a2@<X1>, std::string *a3@<X8>)
{
  std::string::size_type v5;
  unint64_t size;
  uint64_t v7;
  char v9;

  if (*((char *)this + 47) < 0)
    v5 = *((_QWORD *)this + 4);
  else
    v5 = *((unsigned __int8 *)this + 47);
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    size = a2->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (*((char *)this + 71) < 0)
    v7 = *((_QWORD *)this + 7);
  else
    v7 = *((unsigned __int8 *)this + 71);
  return std::string::basic_string(a3, a2, v5, size + ~v7, (std::allocator<char> *)&v9);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::QuasarTextProcImpl,std::allocator<quasar::QuasarTextProcImpl>,char const*&,quasar::SystemConfig &,std::string const&,void>@<X0>(char **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x48uLL);
  result = std::__shared_ptr_emplace<quasar::QuasarTextProcImpl>::__shared_ptr_emplace[abi:ne180100]<char const*&,quasar::SystemConfig &,std::string const&,std::allocator<quasar::QuasarTextProcImpl>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1AD9431B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::QuasarTextProcImpl>::__shared_ptr_emplace[abi:ne180100]<char const*&,quasar::SystemConfig &,std::string const&,std::allocator<quasar::QuasarTextProcImpl>,0>(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4)
{
  char v6;

  a1[2] = 0;
  *a1 = &unk_1E5D43360;
  a1[1] = 0;
  std::allocator<quasar::QuasarTextProcImpl>::construct[abi:ne180100]<quasar::QuasarTextProcImpl,char const*&,quasar::SystemConfig &,std::string const&>((uint64_t)&v6, (uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_1AD943220(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::QuasarTextProcImpl>::construct[abi:ne180100]<quasar::QuasarTextProcImpl,char const*&,quasar::SystemConfig &,std::string const&>(uint64_t a1, uint64_t a2, char **a3, uint64_t a4, uint64_t a5)
{
  void *__p[2];
  char v9;

  std::string::basic_string[abi:ne180100]<0>(__p, *a3);
  quasar::QuasarTextProcImpl::QuasarTextProcImpl(a2, __p, a4, a5);
  if (v9 < 0)
    operator delete(__p[0]);
}

void sub_1AD943298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__tree<std::string>::__count_unique<std::string>(uint64_t a1, const void **a2)
{
  const void **v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(const void ***)(a1 + 8);
  if (v2)
  {
    v4 = a1 + 16;
    v5 = 1;
    do
    {
      if (!std::less<std::string>::operator()[abi:ne180100](v4, a2, v2 + 4))
      {
        if (!std::less<std::string>::operator()[abi:ne180100](v4, v2 + 4, a2))
          return v5;
        ++v2;
      }
      v2 = (const void **)*v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t std::vector<quasar::CommandTagging>::__push_back_slow_path<quasar::CommandTagging const&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v10;
  std::string *v11;
  std::string *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3);
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 3) >= 0x1C71C71C71C71C7)
    v6 = 0x38E38E38E38E38ELL;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationToken>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = (std::string *)&v7[72 * v3];
  v13 = &v7[72 * v6];
  std::allocator<quasar::CommandTagging>::construct[abi:ne180100]<quasar::CommandTagging,quasar::CommandTagging const&>((uint64_t)(a1 + 2), v11, a2);
  v12 = v11 + 3;
  std::vector<quasar::CommandTagging>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<quasar::CommandTagging>::~__split_buffer((uint64_t)&v10);
  return v8;
}

void sub_1AD943440(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::CommandTagging>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::CommandTagging>::construct[abi:ne180100]<quasar::CommandTagging,quasar::CommandTagging const&>(uint64_t a1, std::string *a2, uint64_t a3)
{
  std::string *v5;
  __int128 v6;

  std::map<std::string,std::vector<quasar::Token>>::map[abi:ne180100]((uint64_t *)a2, (const void ***)a3);
  a2[1].__r_.__value_.__r.__words[0] = 0;
  a2[1].__r_.__value_.__l.__size_ = 0;
  a2[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2 + 1, *(__int128 **)(a3 + 24), *(__int128 **)(a3 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 3));
  v5 = a2 + 2;
  if (*(char *)(a3 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 48), *(_QWORD *)(a3 + 56));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 48);
    a2[2].__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 64);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_1AD9434E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<std::string,std::vector<quasar::Token>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::Token>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::Token>>>>::destroy(v2, *(_QWORD **)(v2 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::CommandTagging>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::CommandTagging>,std::reverse_iterator<quasar::CommandTagging*>,std::reverse_iterator<quasar::CommandTagging*>,std::reverse_iterator<quasar::CommandTagging*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::CommandTagging>,std::reverse_iterator<quasar::CommandTagging*>,std::reverse_iterator<quasar::CommandTagging*>,std::reverse_iterator<quasar::CommandTagging*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  std::string *v13;

  v11 = 0;
  v12 = a7 - 72;
  while (a3 + v11 != a5)
  {
    v13 = (std::string *)(v12 + v11);
    v11 -= 72;
    std::allocator<quasar::CommandTagging>::construct[abi:ne180100]<quasar::CommandTagging,quasar::CommandTagging const&>(a1, v13, v11 + a3);
  }
  return a6;
}

uint64_t std::__split_buffer<quasar::CommandTagging>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 72;
    quasar::CommandTagging::~CommandTagging((void **)(i - 72));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::vector<std::vector<quasar::CommandTagging>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::CommandTagging> const&>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<quasar::CommandTagging>::__init_with_size[abi:ne180100]<quasar::CommandTagging*,quasar::CommandTagging*>(v3, *a2, a2[1], 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 3));
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1AD9436D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<quasar::CommandTagging>>::__push_back_slow_path<std::vector<quasar::CommandTagging> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<quasar::CommandTagging>::__init_with_size[abi:ne180100]<quasar::CommandTagging*,quasar::CommandTagging*>(v11, *a2, a2[1], 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 3));
  v15 += 24;
  std::vector<std::vector<quasar::CommandTagging>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<quasar::CommandTagging>>::~__split_buffer(v14);
  return v12;
}

void sub_1AD9437EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::CommandTagging>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<quasar::CommandTagging>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::CommandTagging>>,std::reverse_iterator<std::vector<quasar::CommandTagging>*>,std::reverse_iterator<std::vector<quasar::CommandTagging>*>,std::reverse_iterator<std::vector<quasar::CommandTagging>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::CommandTagging>>,std::reverse_iterator<std::vector<quasar::CommandTagging>*>,std::reverse_iterator<std::vector<quasar::CommandTagging>*>,std::reverse_iterator<std::vector<quasar::CommandTagging>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::CommandTagging>>,std::reverse_iterator<std::vector<quasar::CommandTagging>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::CommandTagging>>,std::reverse_iterator<std::vector<quasar::CommandTagging>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::CommandTagging>>,std::reverse_iterator<std::vector<quasar::CommandTagging>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::CommandTagging>>,std::reverse_iterator<std::vector<quasar::CommandTagging>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<quasar::CommandTagging>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<quasar::CommandTagging>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<quasar::CommandTagging>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<quasar::CommandTagging>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<quasar::CommandTagging>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<quasar::Token>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::Token>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::Token>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::vector<quasar::Token>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::Token>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::Token>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<quasar::Token>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<quasar::Token>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::vector<quasar::Token>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::Token>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::Token>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1AD943B34(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<quasar::Token>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<quasar::Token>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

kaldi::Mfcc *kaldi::Mfcc::Mfcc(kaldi::Mfcc *this, const kaldi::MfccOptions *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __n128 v10;
  float v11;
  int v12;
  uint64_t v13;
  int8x8_t v14;
  uint64_t v15;
  int v16;
  int v18[8];
  _BYTE v19[40];

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v4 = *(_OWORD *)a2;
  *(_QWORD *)((char *)this + 29) = *(_QWORD *)((char *)a2 + 13);
  *((_OWORD *)this + 1) = v4;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 40), *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 24);
    *((_QWORD *)this + 7) = *((_QWORD *)a2 + 5);
    *(_OWORD *)((char *)this + 40) = v5;
  }
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 6);
  v6 = *(_OWORD *)((char *)a2 + 56);
  v7 = *(_OWORD *)((char *)a2 + 72);
  v8 = *(_OWORD *)((char *)a2 + 85);
  *((_QWORD *)this + 15) = 0;
  *(_OWORD *)((char *)this + 101) = v8;
  *(_OWORD *)((char *)this + 72) = v6;
  *(_OWORD *)((char *)this + 88) = v7;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  kaldi::Matrix<float>::Matrix((uint64_t)this + 144);
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 24) = (char *)this + 200;
  *((_QWORD *)this + 26) = 0;
  kaldi::FeatureWindowFunction::FeatureWindowFunction((kaldi::Mfcc *)((char *)this + 216), a2);
  *((_QWORD *)this + 30) = 0;
  v9 = *((unsigned int *)a2 + 14);
  kaldi::Matrix<float>::Matrix((uint64_t)v19, v9, v9, 0, 0);
  kaldi::ComputeDctMatrix<float>((uint64_t)v19);
  kaldi::SubMatrix<float>::SubMatrix((uint64_t)v18, (uint64_t)v19, 0, *((_DWORD *)a2 + 20), 0, v9);
  kaldi::Matrix<float>::Resize((int32x2_t *)this + 18, *((unsigned int *)a2 + 20), v9, 0, 0);
  kaldi::MatrixBase<float>::CopyFromMat<float>((int *)this + 36, v18, 111);
  if (*((float *)a2 + 24) != 0.0)
  {
    kaldi::Vector<float>::Resize((void **)this + 15, *((unsigned int *)a2 + 20), 0);
    v10.n128_u32[0] = *((_DWORD *)a2 + 24);
    kaldi::ComputeLifterCoeffs((uint64_t *)this + 15, v10);
  }
  v11 = *((float *)a2 + 22);
  if (v11 > 0.0)
    *((float *)this + 46) = logf(v11);
  v12 = kaldi::FrameExtractionOptions::PaddedWindowSize(a2);
  if ((v12 & (v12 - 1)) == 0)
  {
    v13 = operator new();
    v15 = v13;
    if (v12 >= 0)
      v16 = v12;
    else
      v16 = v12 + 1;
    kaldi::SplitRadixComplexFft<float>::SplitRadixComplexFft(v13, v16 >> 1, v14);
    *(_DWORD *)(v15 + 48) = v12;
    *((_QWORD *)this + 30) = v15;
  }
  kaldi::Mfcc::GetMelBanks(this, 1.0);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v18);
  kaldi::Matrix<float>::~Matrix((uint64_t)v19);
  return this;
}

void sub_1AD943D48(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::FrameExtractionOptions::PaddedWindowSize(kaldi::FrameExtractionOptions *this)
{
  float v1;

  v1 = *((float *)this + 13);
  if (*((_BYTE *)this + 48))
  {
    if (v1 <= 0.0)
      v1 = *(float *)this;
    return kaldi::RoundUpToNearestPowerOfTwo((kaldi *)(int)(v1 * 0.001 * *((float *)this + 2)));
  }
  else
  {
    if (v1 <= 0.0)
      v1 = *(float *)this;
    return (int)(v1 * 0.001 * *((float *)this + 2));
  }
}

uint64_t *kaldi::Mfcc::GetMelBanks(kaldi::Mfcc *this, float a2)
{
  char **v4;
  uint64_t **v5;
  uint64_t **v6;
  char **v7;
  uint64_t *v8;
  float v10;
  float *v11;

  v10 = a2;
  v5 = (uint64_t **)((char *)this + 200);
  v4 = (char **)*((_QWORD *)this + 25);
  if (!v4)
    goto LABEL_8;
  v6 = (uint64_t **)((char *)this + 200);
  do
  {
    v7 = v4 + 1;
    if (*((float *)v4 + 8) >= a2)
    {
      v7 = v4;
      v6 = (uint64_t **)v4;
    }
    v4 = (char **)*v7;
  }
  while (*v7);
  if (v6 != v5 && *((float *)v6 + 8) <= a2)
    return v6[5];
LABEL_8:
  v8 = (uint64_t *)operator new();
  kaldi::MelBanks::MelBanks(v8, (char *)this + 72, (char *)this + 16, a2);
  v11 = &v10;
  std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::__emplace_unique_key_args<float,std::piecewise_construct_t const&,std::tuple<float const&>,std::tuple<>>(v5 - 1, &v10, (uint64_t)&std::piecewise_construct, (_DWORD **)&v11)[5] = v8;
  return v8;
}

void sub_1AD943F3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10A0C409C5A7551);
  _Unwind_Resume(a1);
}

void kaldi::Mfcc::~Mfcc(kaldi::Mfcc *this)
{
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;

  v2 = (char *)this + 192;
  v3 = (char *)*((_QWORD *)this + 24);
  v4 = (char *)this + 200;
  if (v3 != (char *)this + 200)
  {
    do
    {
      v5 = *((_QWORD *)v3 + 5);
      if (v5)
      {
        v11 = (void **)(v5 + 24);
        std::vector<std::pair<int,kaldi::Vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v11);
        kaldi::Vector<float>::Destroy(v5);
        MEMORY[0x1AF44D190](v5, 0x10A0C409C5A7551);
      }
      v6 = (char *)*((_QWORD *)v3 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (char *)*((_QWORD *)v3 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
    }
    while (v7 != v4);
  }
  v9 = *((_QWORD *)this + 30);
  if (v9)
  {
    v10 = kaldi::SplitRadixComplexFft<float>::~SplitRadixComplexFft(v9);
    MEMORY[0x1AF44D190](v10, 0x1090C40943DB512);
  }
  kaldi::Vector<float>::Destroy((uint64_t)this + 216);
  std::__tree<int>::destroy((uint64_t)v2, *((_QWORD **)this + 25));
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 144);
  kaldi::Vector<float>::Destroy((uint64_t)this + 120);
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void kaldi::Mfcc::Compute(kaldi::Mfcc *a1, uint64_t a2, int32x2_t *a3, void **a4, float a5)
{
  uint64_t *MelBanks;

  MelBanks = kaldi::Mfcc::GetMelBanks(a1, a5);
  kaldi::Mfcc::ComputeInternal((uint64_t)a1, a2, (uint64_t)MelBanks, a3, a4);
}

void kaldi::Mfcc::ComputeInternal(uint64_t a1, uint64_t a2, uint64_t a3, int32x2_t *a4, void **a5)
{
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  float *v13;
  float v14;
  float v15;
  uint64_t v16;
  int32x2_t v17;
  __int32 v18;
  int v19;
  float *v20;
  float v21;
  int v22;
  int v23;
  float v24;
  _QWORD *v25;
  _QWORD *v26;
  void **v27;
  uint64_t v28;
  float *v30;
  void *__p[2];
  unsigned __int8 v32;
  float *v33;
  int v34;
  int v35;
  uint64_t v36;
  void *__dst;
  int v38;
  int v39;
  uint64_t v40;
  float v41;
  float *v42;
  float *v43;
  uint64_t v44;
  _QWORD v45[3];
  float *v46;
  uint64_t v47;
  uint64_t v48;

  v30 = (float *)(a1 + 16);
  v9 = kaldi::NumFrames(*(_DWORD *)(a2 + 8), a1 + 16);
  if ((_DWORD)v9)
  {
    v10 = v9;
    kaldi::Matrix<float>::Resize(a4, v9, *(unsigned int *)(a1 + 96), 0, 0);
    if (a5)
      kaldi::ExtractWaveformRemainder(a2, v30, a5);
    v46 = 0;
    v47 = 0;
    v48 = 0;
    memset(v45, 0, sizeof(v45));
    v42 = 0;
    v43 = 0;
    v44 = 0;
    if (v10 >= 1)
    {
      v11 = 0;
      v12 = *(unsigned __int8 *)(a1 + 100);
      do
      {
        v41 = 1.0;
        if (v12 && *(_BYTE *)(a1 + 108))
          v13 = &v41;
        else
          v13 = 0;
        kaldi::ExtractWindow((uint64_t *)a2, v11, (uint64_t)v30, (float **)(a1 + 216), (void **)&v46, v13);
        if (*(_BYTE *)(a1 + 100) && !*(_BYTE *)(a1 + 108))
        {
          v14 = kaldi::VecVec<float>((uint64_t)&v46, (const float **)&v46);
          if (v14 < 1.1755e-38)
            v14 = 1.1755e-38;
          v41 = v14;
        }
        v15 = logf(v41);
        if ((LODWORD(v15) & 0x7FFFFFFFu) >= 0x7F800000)
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__dst);
          kaldi::VectorBase<float>::Write((uint64_t)&v46, &__dst, 0);
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v33);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"Non-finite energy found for frame ", 34);
          v25 = (_QWORD *)std::ostream::operator<<();
          v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)". Waveform is: ", 15);
          std::stringbuf::str();
          if ((v32 & 0x80u) == 0)
            v27 = __p;
          else
            v27 = (void **)__p[0];
          if ((v32 & 0x80u) == 0)
            v28 = v32;
          else
            v28 = (uint64_t)__p[1];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, v28);
          if ((char)v32 < 0)
            operator delete(__p[0]);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v33);
        }
        v16 = *(_QWORD *)(a1 + 240);
        if (v16)
          kaldi::SplitRadixRealFft<float>::Compute(v16, v46, 1, &v42);
        else
          kaldi::RealFft<float>((uint64_t)&v46, 1);
        kaldi::ComputePowerSpectrum((uint64_t)&v46);
        v35 = 0;
        v36 = 0;
        v33 = v46;
        v34 = (int)v47 / 2 + 1;
        kaldi::MelBanks::Compute(a3, &v33, (uint64_t)v45);
        kaldi::VectorBase<float>::ApplyFloor((uint64_t)v45, 1.1755e-38);
        kaldi::VectorBase<float>::ApplyLog((uint64_t)v45);
        v17 = *a4;
        v18 = a4[2].i32[0];
        v19 = kaldi::MatrixBase<float>::NumCols((uint64_t)a4);
        v39 = 0;
        v40 = 0;
        __dst = (void *)(*(_QWORD *)&v17 + 4 * v18 * v11);
        v38 = v19;
        kaldi::VectorBase<float>::AddMatVec((uint64_t)&__dst, (const float **)(a1 + 144), CblasNoTrans, (uint64_t)v45, 1.0, 0.0);
        if (*(float *)(a1 + 112) != 0.0)
          kaldi::VectorBase<float>::MulElements((uint64_t)&__dst, (float **)(a1 + 120));
        v12 = *(unsigned __int8 *)(a1 + 100);
        if (*(_BYTE *)(a1 + 100))
        {
          if (*(float *)(a1 + 104) > 0.0 && v15 < *(float *)(a1 + 184))
            v15 = *(float *)(a1 + 184);
          *(float *)__dst = v15;
        }
        if (*(_BYTE *)(a1 + 116))
        {
          v20 = (float *)__dst;
          v21 = *(float *)__dst;
          v22 = *(_DWORD *)(a1 + 96);
          v23 = v22 - 1;
          if (v22 >= 2)
            memmove(__dst, (char *)__dst + 4, 4 * (v22 - 1));
          v24 = v21 * 1.41421356;
          if (v12)
            v24 = v21;
          v20[v23] = v24;
        }
        ++v11;
      }
      while (v10 != v11);
      if (v42)
      {
        v43 = v42;
        operator delete(v42);
      }
    }
    kaldi::Vector<float>::Destroy((uint64_t)v45);
    kaldi::Vector<float>::Destroy((uint64_t)&v46);
  }
  else
  {
    kaldi::Matrix<float>::Resize(a4, 0, 0, 0, 0);
    kaldi::Vector<float>::Resize(a5, *(unsigned int *)(a2 + 8), 1);
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)a5, (const void **)a2);
  }
}

void sub_1AD9444E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;
  void *v53;

  std::ostringstream::~ostringstream((uint64_t)&a51);
  v53 = *(void **)(v51 - 176);
  if (v53)
  {
    *(_QWORD *)(v51 - 168) = v53;
    operator delete(v53);
  }
  kaldi::Vector<float>::Destroy(v51 - 152);
  kaldi::Vector<float>::Destroy(v51 - 128);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::__emplace_unique_key_args<float,std::piecewise_construct_t const&,std::tuple<float const&>,std::tuple<>>(uint64_t **a1, float *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  float v8;
  uint64_t **v9;
  float v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((float *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = (uint64_t *)*v6;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = (uint64_t *)v6[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 5) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

_QWORD *LHash<unsigned int,float>::alloc(_QWORD *a1, unsigned int a2)
{
  char v3;
  uint64_t v4;
  _QWORD *result;
  _DWORD *v6;

  v3 = -1;
  do
    v4 = (1 << ++v3);
  while (v4 < a2);
  result = BM_malloc(8 * (v4 - 1) + 12);
  *a1 = result;
  *(_DWORD *)result = *(_DWORD *)result & 0xFFFFFFE0 | v3 & 0x1F;
  *(_DWORD *)*a1 &= 0x1Fu;
  v6 = (_DWORD *)(*a1 + 8);
  do
  {
    *v6 = -1;
    v6 += 2;
    --v4;
  }
  while (v4);
  return result;
}

void LHash<unsigned int,float>::clear(_QWORD *a1, unsigned int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)*a1;
  if (v4)
  {
    BM_free(v4, 8 * ~(-1 << *(_DWORD *)v4) + 12);
    *a1 = 0;
  }
  if (a2)
  {
    if (a2 >= 8)
      a2 = (float)((float)(a2 + 1) / 0.8);
    LHash<unsigned int,float>::alloc(a1, a2);
  }
}

_QWORD *LHash<unsigned int,float>::~LHash(_QWORD *a1)
{
  LHash<unsigned int,float>::clear(a1, 0);
  return a1;
}

uint64_t LHash<unsigned int,float>::find(_DWORD **a1, unsigned int a2, _BYTE *a3)
{
  int v5;
  int v7;

  v7 = 0;
  v5 = LHash<unsigned int,float>::locate(a1, a2, &v7);
  *a3 = v5;
  if (v5)
    return (uint64_t)&(*a1)[2 * v7 + 1];
  else
    return 0;
}

uint64_t LHash<unsigned int,float>::locate(_DWORD **a1, unsigned int a2, _DWORD *a3)
{
  _DWORD *v3;
  _DWORD *v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int *v13;
  int v14;

  v3 = *a1;
  if (!*a1)
    return 0;
  v4 = v3 + 1;
  v5 = *v3;
  v6 = v5 & 0x1F;
  if ((*v3 & 0x1Fu) > 2)
  {
    v9 = -1 << v6;
    v7 = ((1103515245 * (unint64_t)a2 + 12345) >> (30 - v6)) & ~(-1 << v6);
    v10 = v4[2 * v7 + 1];
    if (v10 == -1)
    {
LABEL_10:
      result = 0;
    }
    else
    {
      v11 = ~(_DWORD)v9;
      while (v10 != a2)
      {
        v7 = ((_DWORD)v7 + 1) & v11;
        v10 = v4[2 * v7 + 1];
        if (v10 == -1)
          goto LABEL_10;
      }
      result = 1;
    }
  }
  else if (v5 >= 0x20)
  {
    v12 = 0;
    v7 = v5 >> 5;
    v13 = v3 + 2;
    while (1)
    {
      v14 = *v13;
      v13 += 2;
      if (v14 == a2)
        break;
      if (v7 == ++v12)
        goto LABEL_14;
    }
    result = 1;
    LODWORD(v7) = v12;
  }
  else
  {
    LODWORD(v7) = 0;
LABEL_14:
    result = 0;
  }
  *a3 = v7;
  return result;
}

uint64_t LHash<unsigned int,float>::insert(_QWORD *a1, unsigned int a2, _BYTE *a3)
{
  int v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int v15;

  if (!*a1)
    LHash<unsigned int,float>::alloc(a1, 1u);
  v15 = 0;
  v6 = LHash<unsigned int,float>::locate((_DWORD **)a1, a2, &v15);
  *a3 = v6;
  v7 = (_QWORD *)*a1;
  if (!v6)
  {
    v8 = *(unsigned int *)v7;
    v9 = 1 << (v8 & 0x1F);
    v10 = v8 >> 5;
    if (v8 >= 0xE0)
      v11 = (float)((float)(v10 + 2) / 0.8);
    else
      v11 = v10 + 1;
    if (v11 > v9)
    {
      LHash<unsigned int,float>::alloc(a1, v11);
      *(_DWORD *)*a1 = v8 & 0xFFFFFFE0 | *(_DWORD *)*a1 & 0x1F;
      if ((*(_DWORD *)*a1 & 0x1Fu) >= 3)
      {
        v12 = (unsigned int *)(v7 + 1);
        v13 = 1 << (v8 & 0x1F);
        do
        {
          if (*v12 != -1)
          {
            LHash<unsigned int,float>::locate((_DWORD **)a1, *v12, &v15);
            *(_QWORD *)(*a1 + 8 * v15 + 4) = *(_QWORD *)(v12 - 1);
          }
          v12 += 2;
          --v13;
        }
        while (v13);
      }
      else
      {
        memcpy((void *)(*a1 + 4), (char *)v7 + 4, 8 * v10);
      }
      BM_free(v7, 8 * (v9 - 1) + 12);
      LHash<unsigned int,float>::locate((_DWORD **)a1, a2, &v15);
      v7 = (_QWORD *)*a1;
    }
    LODWORD(v7[v15 + 1]) = a2;
    HIDWORD(v7[v15]) = 0;
    *(_DWORD *)*a1 += 32;
    v7 = (_QWORD *)*a1;
  }
  return (uint64_t)&v7[v15] + 4;
}

uint64_t LHash<unsigned int,float>::remove(unsigned int **a1, unsigned int a2, _DWORD *a3)
{
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int i;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;

  v16 = 0;
  result = LHash<unsigned int,float>::locate(a1, a2, &v16);
  if ((_DWORD)result)
  {
    v6 = *a1;
    (*a1)[2 * v16 + 2] = -1;
    if (a3)
    {
      *a3 = v6[2 * v16 + 1];
      v6 = *a1;
    }
    v7 = *v6;
    v8 = *v6 & 0x1F;
    if (v8 >= 3)
    {
      v15 = 0;
      v10 = v16 + 1;
      for (i = -1 << v8; ; i = -1 << *v6)
      {
        v16 = v10 & ~i;
        v12 = v6[2 * v16 + 2];
        if (v12 == -1)
          break;
        v13 = LHash<unsigned int,float>::locate(a1, v12, &v15);
        v6 = *a1;
        if (!v13)
        {
          v14 = v16;
          *(_QWORD *)&v6[2 * v15 + 1] = *(_QWORD *)&v6[2 * v16 + 1];
          v6 = *a1;
          (*a1)[2 * v14 + 2] = -1;
        }
        v15 = 0;
        v10 = v16 + 1;
      }
    }
    else
    {
      v9 = v7 >> 5;
      memmove(&v6[2 * v16 + 1], &v6[2 * v16 + 3], 8 * (~v16 + (v7 >> 5)));
      v6 = *a1;
      (*a1)[2 * v9] = -1;
    }
    *v6 -= 32;
    return 1;
  }
  return result;
}

_QWORD *LHash<unsigned int,float>::setsize(_QWORD *result, unsigned int a2)
{
  if (a2 && !*result)
  {
    if (a2 >= 8)
      a2 = (float)((float)(a2 + 1) / 0.8);
    return LHash<unsigned int,float>::alloc(result, a2);
  }
  return result;
}

_DWORD **LHash<unsigned int,float>::memStats(_DWORD **result, uint64_t *a2)
{
  uint64_t v2;
  _DWORD *v3;
  int v4;
  unint64_t v5;
  uint64_t v6;

  v2 = *a2 + 8;
  *a2 = v2;
  v3 = *result;
  if (*result)
  {
    v4 = 1 << *v3;
    v5 = 8 * (v4 - 1) + 12;
    *a2 = v5 + v2;
    a2[1] += 8 * (v4 - (*v3 >> 5));
    v6 = 256;
    if (v5 < 0x100)
      v6 = 8 * (v4 - 1) + 12;
    ++*((_DWORD *)a2 + v6 + 4);
  }
  return result;
}

uint64_t LHashIter<unsigned int,float>::LHashIter(uint64_t a1, _DWORD **a2, uint64_t a3)
{
  _DWORD *v4;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 8) = 0;
  if (v4)
  {
    *(_DWORD *)(a1 + 12) = *v4 >> 5;
    *(_QWORD *)(a1 + 16) = a3;
    *(_QWORD *)(a1 + 24) = 0;
    LHashIter<unsigned int,float>::sortKeys(a1);
  }
  else
  {
    *(_DWORD *)(a1 + 12) = 0;
    *(_QWORD *)(a1 + 16) = a3;
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t LHashIter<unsigned int,float>::sortKeys(uint64_t a1)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  int *v15;
  int v16;
  _BYTE v18[24];
  uint64_t v19;

  v2 = **(_DWORD **)a1 & 0x1F;
  v3 = operator new[]();
  v4 = v3;
  v5 = 0;
  v6 = 0;
  v7 = (int *)(*(_QWORD *)a1 + 8);
  do
  {
    v8 = *v7;
    v7 += 2;
    if (v8 != -1)
      *(_DWORD *)(v3 + 4 * v6++) = v5;
    ++v5;
  }
  while (!(v5 >> v2));
  if (*(_QWORD *)(a1 + 16))
  {
    v9 = *(unsigned int *)(a1 + 12);
    LHashIter<unsigned int,double>::LHashIter((uint64_t)v18, a1);
    v10 = 126 - 2 * __clz(v9);
    if ((_DWORD)v9)
      v11 = v10;
    else
      v11 = 0;
    std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *,false>(v4, (unsigned int *)(v4 + 4 * v9), (uint64_t)v18, v11, 1);
    if (v19)
      MEMORY[0x1AF44D160](v19, 0x1000C8052888210);
    v19 = 0;
  }
  v12 = (_DWORD *)operator new[]();
  *(_QWORD *)(a1 + 24) = v12;
  v13 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v13)
  {
    v14 = *(_DWORD **)a1;
    v15 = (int *)v4;
    do
    {
      v16 = *v15++;
      *v12++ = v14[2 * v16 + 2];
      --v13;
    }
    while (v13);
  }
  return MEMORY[0x1AF44D160](v4, 0x1000C8052888210);
}

void sub_1AD944D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x1AF44D160](a12, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t LHashIter<unsigned int,float>::init(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    result = MEMORY[0x1AF44D160](result, 0x1000C8052888210);
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  if (*(_QWORD *)a1)
  {
    *(_DWORD *)(a1 + 12) = **(_DWORD **)a1 >> 5;
    return LHashIter<unsigned int,float>::sortKeys(a1);
  }
  else
  {
    *(_DWORD *)(a1 + 12) = 0;
  }
  return result;
}

uint64_t LHashIter<unsigned int,float>::next(uint64_t a1, _DWORD *a2)
{
  _DWORD *v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned int v10;

  v2 = *(_DWORD **)a1;
  if (!*(_QWORD *)a1)
    return 0;
  v10 = 0;
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 12))
    return 0;
  v9 = v2;
  v7 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 8) = v4 + 1;
  LHash<unsigned int,float>::locate(&v9, *(_DWORD *)(v7 + 4 * v4), &v10);
  v8 = *(_QWORD *)a1 + 8 * v10;
  result = v8 + 4;
  *a2 = *(_DWORD *)(v8 + 8);
  return result;
}

void sub_1AD944E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LHash<unsigned int,float>::~LHash(&a9);
  _Unwind_Resume(a1);
}

_QWORD *LHash<unsigned int,Trie<unsigned int,BOnode>>::alloc(_QWORD *a1, unsigned int a2)
{
  char v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;

  v3 = -1;
  do
    v4 = (1 << ++v3);
  while (v4 < a2);
  result = BM_malloc(32 * (v4 - 1) + 40);
  v6 = 0;
  *a1 = result;
  *(_DWORD *)result = *(_DWORD *)result & 0xFFFFFFE0 | v3 & 0x1F;
  *(_DWORD *)*a1 &= 0x1Fu;
  do
  {
    v7 = *a1 + v6;
    *(_DWORD *)(v7 + 32) = -1;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 8) = 0;
    v6 += 32;
    --v4;
  }
  while (v4);
  return result;
}

void LHash<unsigned int,Trie<unsigned int,BOnode>>::clear(_QWORD *a1, unsigned int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)*a1;
  if (v4)
  {
    BM_free(v4, 32 * ~(-1 << *(_DWORD *)v4) + 40);
    *a1 = 0;
  }
  if (a2)
  {
    if (a2 >= 8)
      a2 = (float)((float)(a2 + 1) / 0.8);
    LHash<unsigned int,Trie<unsigned int,BOnode>>::alloc(a1, a2);
  }
}

_QWORD *LHash<unsigned int,Trie<unsigned int,BOnode>>::~LHash(_QWORD *a1)
{
  LHash<unsigned int,Trie<unsigned int,BOnode>>::clear(a1, 0);
  return a1;
}

uint64_t LHash<unsigned int,Trie<unsigned int,BOnode>>::locate(_DWORD **a1, unsigned int a2, _DWORD *a3)
{
  _DWORD *v3;
  _DWORD *v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int *v13;
  int v14;

  v3 = *a1;
  if (!*a1)
    return 0;
  v4 = v3 + 2;
  v5 = *v3;
  v6 = v5 & 0x1F;
  if ((*v3 & 0x1Fu) > 2)
  {
    v9 = -1 << v6;
    v7 = ((1103515245 * (unint64_t)a2 + 12345) >> (30 - v6)) & ~(-1 << v6);
    v10 = v4[8 * v7 + 6];
    if (v10 == -1)
    {
LABEL_10:
      result = 0;
    }
    else
    {
      v11 = ~(_DWORD)v9;
      while (v10 != a2)
      {
        v7 = ((_DWORD)v7 + 1) & v11;
        v10 = v4[8 * v7 + 6];
        if (v10 == -1)
          goto LABEL_10;
      }
      result = 1;
    }
  }
  else if (v5 >= 0x20)
  {
    v12 = 0;
    v7 = v5 >> 5;
    v13 = v3 + 8;
    while (1)
    {
      v14 = *v13;
      v13 += 8;
      if (v14 == a2)
        break;
      if (v7 == ++v12)
        goto LABEL_14;
    }
    result = 1;
    LODWORD(v7) = v12;
  }
  else
  {
    LODWORD(v7) = 0;
LABEL_14:
    result = 0;
  }
  *a3 = v7;
  return result;
}

uint64_t LHash<unsigned int,Trie<unsigned int,BOnode>>::insert(_QWORD *a1, unsigned int a2, _BYTE *a3)
{
  int v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unsigned int v20;

  if (!*a1)
    LHash<unsigned int,Trie<unsigned int,BOnode>>::alloc(a1, 1u);
  v20 = 0;
  v6 = LHash<unsigned int,Trie<unsigned int,BOnode>>::locate((_DWORD **)a1, a2, &v20);
  *a3 = v6;
  v7 = (_QWORD *)*a1;
  if (!v6)
  {
    v8 = *(_DWORD *)v7;
    v9 = 1 << (*(_DWORD *)v7 & 0x1F);
    v10 = *(_DWORD *)v7 >> 5;
    if (*(_DWORD *)v7 >= 0xE0u)
      v11 = (float)((float)(v10 + 2) / 0.8);
    else
      v11 = v10 + 1;
    if (v11 > v9)
    {
      LHash<unsigned int,Trie<unsigned int,BOnode>>::alloc(a1, v11);
      *(_DWORD *)*a1 = v8 & 0xFFFFFFE0 | *(_DWORD *)*a1 & 0x1F;
      if ((*(_DWORD *)*a1 & 0x1Fu) >= 3)
      {
        v12 = (unsigned int *)(v7 + 4);
        v13 = v9;
        do
        {
          if (*v12 != -1)
          {
            LHash<unsigned int,Trie<unsigned int,BOnode>>::locate((_DWORD **)a1, *v12, &v20);
            v14 = *a1 + 32 * v20;
            v15 = *(_OWORD *)(v12 - 6);
            *(_OWORD *)(v14 + 24) = *(_OWORD *)(v12 - 2);
            *(_OWORD *)(v14 + 8) = v15;
          }
          v12 += 8;
          --v13;
        }
        while (v13);
      }
      else
      {
        memcpy((void *)(*a1 + 8), v7 + 1, v8 & 0xFFFFFFE0);
      }
      BM_free(v7, 32 * (v9 - 1) + 40);
      LHash<unsigned int,Trie<unsigned int,BOnode>>::locate((_DWORD **)a1, a2, &v20);
      v7 = (_QWORD *)*a1;
    }
    LODWORD(v7[4 * v20 + 4]) = a2;
    v16 = v20;
    v17 = &v7[4 * v20 + 1];
    v17[1] = 0;
    v17[2] = 0;
    *v17 = 0;
    v18 = (_QWORD *)(*a1 + 32 * v16);
    v18[2] = 0;
    v18[3] = 0;
    v18[1] = 0;
    *(_DWORD *)*a1 += 32;
    v7 = (_QWORD *)*a1;
  }
  return (uint64_t)&v7[4 * v20 + 1];
}

uint64_t LHash<unsigned int,Trie<unsigned int,BOnode>>::remove(unsigned int **a1, unsigned int a2, uint64_t a3)
{
  uint64_t result;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int i;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;
  _OWORD *v19;
  _OWORD *v20;
  __int128 v21;
  int v22;
  unsigned int v23;

  v23 = 0;
  result = LHash<unsigned int,Trie<unsigned int,BOnode>>::locate(a1, a2, &v23);
  if ((_DWORD)result)
  {
    v6 = *a1;
    (*a1)[8 * v23 + 8] = -1;
    if (a3)
    {
      v7 = &v6[8 * v23];
      v8 = *((_QWORD *)v7 + 3);
      *(_OWORD *)a3 = *(_OWORD *)(v7 + 2);
      *(_QWORD *)(a3 + 16) = v8;
      v6 = *a1;
    }
    v9 = *v6;
    v10 = *v6 & 0x1F;
    if (v10 >= 3)
    {
      v22 = 0;
      v12 = v23 + 1;
      for (i = -1 << v10; ; i = -1 << *v6)
      {
        v14 = v12 & ~i;
        v23 = v14;
        v15 = v6[8 * v14 + 8];
        if (v15 == -1)
          break;
        v16 = LHash<unsigned int,Trie<unsigned int,BOnode>>::locate(a1, v15, &v22);
        v6 = *a1;
        if (!v16)
        {
          v17 = v23;
          v18 = v6 + 2;
          v19 = &v18[8 * v22];
          v20 = &v18[8 * v23];
          v21 = v20[1];
          *v19 = *v20;
          v19[1] = v21;
          v6 = *a1;
          (*a1)[8 * v17 + 8] = -1;
        }
        v22 = 0;
        v12 = v23 + 1;
      }
    }
    else
    {
      v11 = v9 >> 5;
      memmove(&v6[8 * v23 + 2], &v6[8 * v23 + 10], 32 * (~v23 + (v9 >> 5)));
      v6 = *a1;
      (*a1)[8 * v11] = -1;
    }
    *v6 -= 32;
    return 1;
  }
  return result;
}

_DWORD **LHash<unsigned int,Trie<unsigned int,BOnode>>::memStats(_DWORD **result, uint64_t *a2)
{
  uint64_t v2;
  _DWORD *v3;
  int v4;
  unint64_t v5;
  uint64_t v6;

  v2 = *a2 + 8;
  *a2 = v2;
  v3 = *result;
  if (*result)
  {
    v4 = 1 << *v3;
    v5 = 32 * (v4 - 1) + 40;
    *a2 = v5 + v2;
    a2[1] += 32 * (v4 - (*v3 >> 5));
    v6 = 256;
    if (v5 < 0x100)
      v6 = 32 * (v4 - 1) + 40;
    ++*((_DWORD *)a2 + v6 + 4);
  }
  return result;
}

uint64_t LHashIter<unsigned int,Trie<unsigned int,BOnode>>::LHashIter(uint64_t a1, _DWORD **a2, uint64_t a3)
{
  _DWORD *v4;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 8) = 0;
  if (v4)
  {
    *(_DWORD *)(a1 + 12) = *v4 >> 5;
    *(_QWORD *)(a1 + 16) = a3;
    *(_QWORD *)(a1 + 24) = 0;
    LHashIter<unsigned int,Trie<unsigned int,BOnode>>::sortKeys(a1);
  }
  else
  {
    *(_DWORD *)(a1 + 12) = 0;
    *(_QWORD *)(a1 + 16) = a3;
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t LHashIter<unsigned int,Trie<unsigned int,BOnode>>::sortKeys(uint64_t a1)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  int *v15;
  int v16;
  _BYTE v18[24];
  uint64_t v19;

  v2 = **(_DWORD **)a1 & 0x1F;
  v3 = operator new[]();
  v4 = v3;
  v5 = 0;
  v6 = 0;
  v7 = (int *)(*(_QWORD *)a1 + 32);
  do
  {
    v8 = *v7;
    v7 += 8;
    if (v8 != -1)
      *(_DWORD *)(v3 + 4 * v6++) = v5;
    ++v5;
  }
  while (!(v5 >> v2));
  if (*(_QWORD *)(a1 + 16))
  {
    v9 = *(unsigned int *)(a1 + 12);
    LHashIter<unsigned int,double>::LHashIter((uint64_t)v18, a1);
    v10 = 126 - 2 * __clz(v9);
    if ((_DWORD)v9)
      v11 = v10;
    else
      v11 = 0;
    std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *,false>(v4, (unsigned int *)(v4 + 4 * v9), (uint64_t)v18, v11, 1);
    if (v19)
      MEMORY[0x1AF44D160](v19, 0x1000C8052888210);
    v19 = 0;
  }
  v12 = (_DWORD *)operator new[]();
  *(_QWORD *)(a1 + 24) = v12;
  v13 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v13)
  {
    v14 = *(_DWORD **)a1;
    v15 = (int *)v4;
    do
    {
      v16 = *v15++;
      *v12++ = v14[8 * v16 + 8];
      --v13;
    }
    while (v13);
  }
  return MEMORY[0x1AF44D160](v4, 0x1000C8052888210);
}

void sub_1AD9455AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x1AF44D160](a12, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t LHashIter<unsigned int,Trie<unsigned int,BOnode>>::init(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    result = MEMORY[0x1AF44D160](result, 0x1000C8052888210);
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  if (*(_QWORD *)a1)
  {
    *(_DWORD *)(a1 + 12) = **(_DWORD **)a1 >> 5;
    return LHashIter<unsigned int,Trie<unsigned int,BOnode>>::sortKeys(a1);
  }
  else
  {
    *(_DWORD *)(a1 + 12) = 0;
  }
  return result;
}

uint64_t LHashIter<unsigned int,Trie<unsigned int,BOnode>>::next(uint64_t a1, _DWORD *a2)
{
  _DWORD *v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned int v10;

  v2 = *(_DWORD **)a1;
  if (!*(_QWORD *)a1)
    return 0;
  v10 = 0;
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 12))
    return 0;
  v9 = v2;
  v7 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 8) = v4 + 1;
  LHash<unsigned int,Trie<unsigned int,BOnode>>::locate(&v9, *(_DWORD *)(v7 + 4 * v4), &v10);
  v8 = *(_QWORD *)a1 + 32 * v10;
  result = v8 + 8;
  *a2 = *(_DWORD *)(v8 + 32);
  return result;
}

void sub_1AD9456C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LHash<unsigned int,Trie<unsigned int,BOnode>>::~LHash(&a9);
  _Unwind_Resume(a1);
}

_QWORD *Trie<unsigned int,BOnode>::Trie(_QWORD *a1, unsigned int a2)
{
  *a1 = 0;
  if (a2)
  {
    if (a2 >= 8)
      a2 = (float)((float)(a2 + 1) / 0.8);
    LHash<unsigned int,Trie<unsigned int,BOnode>>::alloc(a1, a2);
  }
  a1[1] = 0;
  a1[2] = 0;
  return a1;
}

uint64_t Trie<unsigned int,BOnode>::~Trie(uint64_t a1)
{
  int v3;
  _BYTE v4[24];
  uint64_t v5;

  LHashIter<unsigned int,Trie<unsigned int,BOnode>>::LHashIter((uint64_t)v4, (_DWORD **)a1, 0);
  v3 = 0;
  while (LHashIter<unsigned int,Trie<unsigned int,BOnode>>::next((uint64_t)v4, &v3))
    Trie<unsigned int,BOnode>::~Trie();
  if (v5)
    MEMORY[0x1AF44D160](v5, 0x1000C8052888210);
  LHash<unsigned int,float>::clear((_QWORD *)(a1 + 16), 0);
  LHash<unsigned int,Trie<unsigned int,BOnode>>::clear((_QWORD *)a1, 0);
  return a1;
}

uint64_t Trie<unsigned int,BOnode>::findTrie(_DWORD **a1, unsigned int *a2, _BYTE *a3)
{
  _QWORD *v4;
  unsigned int v6;
  unsigned int v8;

  v4 = a1;
  if (!a2 || (v6 = *a2, v6 == -1))
  {
    *a3 = 1;
  }
  else
  {
    v8 = 0;
    if (LHash<unsigned int,Trie<unsigned int,BOnode>>::locate(a1, v6, &v8))
    {
      return Trie<unsigned int,BOnode>::findTrie(*v4 + 32 * v8 + 8, a2 + 1, a3);
    }
    else
    {
      v4 = 0;
      *a3 = 0;
    }
  }
  return (uint64_t)v4;
}

_QWORD *Trie<unsigned int,BOnode>::findPrefixTrie(_DWORD **a1, unsigned int *a2, _DWORD *a3)
{
  _QWORD *PrefixTrie;
  unsigned int v6;
  uint64_t v7;
  int v9;
  unsigned int v10;

  PrefixTrie = a1;
  if (a2
    && (v6 = *a2, v6 != -1)
    && (v10 = 0, LHash<unsigned int,Trie<unsigned int,BOnode>>::locate(a1, v6, &v10)))
  {
    v7 = *PrefixTrie + 32 * v10 + 8;
    v9 = 0;
    PrefixTrie = (_QWORD *)Trie<unsigned int,BOnode>::findPrefixTrie(v7, a2 + 1, &v9);
    *a3 = v9 + 1;
  }
  else
  {
    *a3 = 0;
  }
  return PrefixTrie;
}

_QWORD *Trie<unsigned int,BOnode>::insertTrie(_QWORD *result, unsigned int *a2, _BYTE *a3)
{
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  char v8;

  if (!a2 || (v5 = *a2, v5 == -1))
  {
LABEL_6:
    *a3 = 1;
  }
  else
  {
    v6 = a2 + 1;
    while (1)
    {
      result = (_QWORD *)LHash<unsigned int,Trie<unsigned int,BOnode>>::insert(result, v5, a3);
      if (!*a3)
        break;
      v7 = *v6++;
      v5 = v7;
      if (v7 == -1)
        goto LABEL_6;
    }
    v8 = 0;
    return (_QWORD *)Trie<unsigned int,BOnode>::insertTrie(result, v6, &v8);
  }
  return result;
}

uint64_t Trie<unsigned int,BOnode>::removeTrie(unsigned int **a1, unsigned int *a2, uint64_t a3)
{
  unsigned int v4;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD v11[3];

  if (!a2)
    return 0;
  v4 = *a2;
  if (v4 == -1)
    return 0;
  v8 = a2[1];
  v7 = a2 + 1;
  if (v8 != -1)
  {
    LODWORD(v11[0]) = 0;
    if (LHash<unsigned int,Trie<unsigned int,BOnode>>::locate(a1, v4, v11))
      return Trie<unsigned int,BOnode>::removeTrie(&(*a1)[8 * LODWORD(v11[0]) + 2], v7, a3);
    return 0;
  }
  if (!a3)
  {
    memset(v11, 0, sizeof(v11));
    if (LHash<unsigned int,Trie<unsigned int,BOnode>>::remove(a1, v4, (uint64_t)v11))
    {
      Trie<unsigned int,BOnode>::~Trie((uint64_t)v11);
      v9 = 1;
    }
    else
    {
      v9 = 0;
    }
    Trie<unsigned int,BOnode>::~Trie((uint64_t)v11);
    return v9;
  }
  return LHash<unsigned int,Trie<unsigned int,BOnode>>::remove(a1, v4, a3);
}

void sub_1AD945A48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  Trie<unsigned int,BOnode>::~Trie((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Trie<unsigned int,BOnode>::numEntries(_DWORD **a1, unsigned int *a2)
{
  unsigned int v4;
  uint64_t result;
  int v6;

  if (!a2 || (v4 = *a2, v4 == -1))
  {
    if (*a1)
      return **a1 >> 5;
    else
      return 0;
  }
  else
  {
    v6 = 0;
    result = LHash<unsigned int,Trie<unsigned int,BOnode>>::locate(a1, v4, &v6);
    if ((_DWORD)result)
      return Trie<unsigned int,BOnode>::numEntries(&(*a1)[8 * v6 + 2], a2 + 1);
  }
  return result;
}

uint64_t Trie<unsigned int,BOnode>::memStats(_DWORD **a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  int v6;
  _BYTE v7[24];
  uint64_t v8;

  *a2 += 16;
  LHash<unsigned int,Trie<unsigned int,BOnode>>::memStats(a1, a2);
  LHashIter<unsigned int,Trie<unsigned int,BOnode>>::LHashIter((uint64_t)v7, a1, 0);
  v6 = 0;
  while (1)
  {
    v4 = LHashIter<unsigned int,Trie<unsigned int,BOnode>>::next((uint64_t)v7, &v6);
    if (!v4)
      break;
    *a2 -= 24;
    Trie<unsigned int,BOnode>::memStats(v4, a2);
  }
  result = v8;
  if (v8)
    return MEMORY[0x1AF44D160](v8, 0x1000C8052888210);
  return result;
}

void sub_1AD945B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    MEMORY[0x1AF44D160](a14, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t TrieIter2<unsigned int,BOnode>::TrieIter2(uint64_t a1, _DWORD **a2, _DWORD *a3, int a4, uint64_t a5)
{
  _DWORD *v6;

  v6 = a3;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  LHashIter<unsigned int,Trie<unsigned int,BOnode>>::LHashIter(a1 + 32, a2, a5);
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  if (!a4)
    goto LABEL_4;
  if (a4 == 1)
  {
    ++v6;
LABEL_4:
    *v6 = -1;
  }
  return a1;
}

uint64_t TrieIter2<unsigned int,BOnode>::next(uint64_t a1)
{
  int v2;
  uint64_t result;
  uint64_t v4;
  _DWORD **v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_DWORD *)(a1 + 16);
  if (v2)
  {
    if (v2 == 1)
    {
      return LHashIter<unsigned int,Trie<unsigned int,BOnode>>::next(a1 + 32, *(_DWORD **)(a1 + 8));
    }
    else
    {
      v4 = *(_QWORD *)(a1 + 64);
      if (v4)
        goto LABEL_9;
      while (1)
      {
        result = LHashIter<unsigned int,Trie<unsigned int,BOnode>>::next(a1 + 32, *(_DWORD **)(a1 + 8));
        if (!result)
          break;
        v5 = (_DWORD **)result;
        v4 = operator new();
        TrieIter2<unsigned int,BOnode>::TrieIter2(v4, v5, (_DWORD *)(*(_QWORD *)(a1 + 8) + 4), *(_DWORD *)(a1 + 16) - 1, *(_QWORD *)(a1 + 24));
        *(_QWORD *)(a1 + 64) = v4;
LABEL_9:
        result = TrieIter2<unsigned int,BOnode>::next(v4);
        if (result)
          break;
        v6 = *(_QWORD *)(a1 + 64);
        if (v6)
        {
          v7 = TrieIter2<unsigned int,unsigned int>::~TrieIter2(v6);
          MEMORY[0x1AF44D190](v7, 0x10F0C40A7879D68);
        }
        *(_QWORD *)(a1 + 64) = 0;
      }
    }
  }
  else if (*(_BYTE *)(a1 + 72))
  {
    return 0;
  }
  else
  {
    *(_BYTE *)(a1 + 72) = 1;
    return *(_QWORD *)a1;
  }
  return result;
}

void sub_1AD945D00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F0C40A7879D68);
  _Unwind_Resume(a1);
}

uint64_t Ngram::memStats(Ngram *this, MemStats *a2)
{
  _DWORD **v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[80];
  int v10;
  _BYTE v11[12];
  int v12;

  *(_QWORD *)a2 += 168;
  v4 = (_DWORD **)((char *)this + 152);
  Trie<unsigned int,BOnode>::memStats((_DWORD **)this + 19, (uint64_t *)a2);
  v5 = *((_DWORD *)this + 44);
  *(_DWORD *)&v11[8] = 0;
  v12 = 0;
  v10 = 0;
  *(_QWORD *)v11 = (v5 + 1);
  if (v5 == -1 || (Array<unsigned int>::alloc((uint64_t)&v10, v5, 0), *((_DWORD *)this + 44)))
  {
    v6 = 1;
    do
    {
      TrieIter2<unsigned int,BOnode>::TrieIter2((uint64_t)v9, v4, (_DWORD *)(*(_QWORD *)&v11[4] - 4 * v10), v6 - 1, 0);
      while (1)
      {
        v7 = TrieIter2<unsigned int,BOnode>::next((uint64_t)v9);
        if (!v7)
          break;
        *(_QWORD *)a2 -= 8;
        LHash<unsigned int,float>::memStats((_DWORD **)(v7 + 16), (uint64_t *)a2);
      }
      TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)v9);
      ++v6;
    }
    while (v6 <= *((_DWORD *)this + 44));
  }
  result = *(_QWORD *)&v11[4];
  if (*(_QWORD *)&v11[4])
    return MEMORY[0x1AF44D160](*(_QWORD *)&v11[4], 0x1000C8052888210);
  return result;
}

void sub_1AD945E18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v12;

  v12 = *(_QWORD *)(v10 - 48);
  if (v12)
    MEMORY[0x1AF44D160](v12, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

void Ngram::Ngram(Ngram *this, Vocab *a2, int a3)
{
  _QWORD *v6;
  unsigned int v7;

  LM::LM(this, a2);
  *v6 = &off_1E5D17188;
  v7 = (*(uint64_t (**)(Vocab *))(*(_QWORD *)a2 + 72))(a2);
  Trie<unsigned int,BOnode>::Trie((_QWORD *)this + 19, v7);
  *((_DWORD *)this + 44) = a3;
  *((_WORD *)this + 90) = 0;
  *((_QWORD *)this + 23) = 0;
  if (!a3)
    *((_DWORD *)this + 44) = 1;
}

void sub_1AD945EC4(_Unwind_Exception *a1)
{
  LM *v1;

  LM::~LM(v1);
  _Unwind_Resume(a1);
}

uint64_t Ngram::getorder(Ngram *this)
{
  return *((unsigned int *)this + 44);
}

uint64_t Ngram::findBOW(Ngram *this, unsigned int *a2)
{
  uint64_t Trie;
  char v4;

  v4 = 0;
  Trie = Trie<unsigned int,BOnode>::findTrie((_DWORD **)this + 19, a2, &v4);
  if (Trie)
    return Trie + 8;
  else
    return 0;
}

uint64_t Ngram::findProb(Ngram *this, unsigned int a2, unsigned int *a3)
{
  uint64_t result;
  _QWORD *v5;
  char v6;
  unsigned int v7;

  v6 = 0;
  result = Trie<unsigned int,BOnode>::findTrie((_DWORD **)this + 19, a3, &v6);
  if (result)
  {
    v5 = (_QWORD *)(result + 16);
    v7 = 0;
    if (LHash<unsigned int,float>::locate((_DWORD **)(result + 16), a2, &v7))
      return *v5 + 8 * v7 + 4;
    else
      return 0;
  }
  return result;
}

_QWORD *Ngram::insertBOW(Ngram *this, unsigned int *a2)
{
  _QWORD *inserted;
  char v4;

  v4 = 0;
  inserted = Trie<unsigned int,BOnode>::insertTrie((_QWORD *)this + 19, a2, &v4);
  if (!v4)
    inserted[2] = 0;
  return inserted + 1;
}

uint64_t Ngram::insertProb(Ngram *this, unsigned int a2, unsigned int *a3)
{
  _QWORD *inserted;
  _QWORD *v5;
  char v7;
  char v8;

  v7 = 0;
  inserted = Trie<unsigned int,BOnode>::insertTrie((_QWORD *)this + 19, a3, &v7);
  v5 = inserted;
  if (!v7)
  {
    inserted[2] = 0;
    LHash<unsigned int,float>::alloc(inserted + 2, 1u);
  }
  v8 = 0;
  return LHash<unsigned int,float>::insert(v5 + 2, a2, &v8);
}

uint64_t Ngram::removeProb(Ngram *this, unsigned int a2, unsigned int *a3)
{
  uint64_t result;
  char v5;

  v5 = 0;
  result = Trie<unsigned int,BOnode>::findTrie((_DWORD **)this + 19, a3, &v5);
  if (result)
    return LHash<unsigned int,float>::remove((unsigned int **)(result + 16), a2, 0);
  return result;
}

uint64_t Ngram::numProbs(Ngram *this, unsigned int *a2)
{
  uint64_t result;
  _DWORD *v3;
  char v4;

  v4 = 0;
  result = Trie<unsigned int,BOnode>::findTrie((_DWORD **)this + 19, a2, &v4);
  if (result)
  {
    v3 = *(_DWORD **)(result + 16);
    if (v3)
      return *v3 >> 5;
    else
      return 0;
  }
  return result;
}

uint64_t Ngram::getTrie(Ngram *this)
{
  return (uint64_t)this + 152;
}

uint64_t Ngram::clear(Ngram *this)
{
  int v1;
  int v3;
  unsigned int **v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _QWORD v8[2];
  int v9;
  uint64_t v10;
  _QWORD v11[5];
  char v12;
  _DWORD v13[2];
  uint64_t v14;
  int v15;

  v1 = *((_DWORD *)this + 44);
  v13[0] = 0;
  v13[1] = v1;
  v14 = 0;
  v15 = 0;
  if (!v1)
    goto LABEL_13;
  Array<unsigned int>::alloc((uint64_t)v13, v1 - 1, 0);
  v3 = *((_DWORD *)this + 44);
  if (!v3)
    goto LABEL_13;
  v4 = (unsigned int **)((char *)this + 152);
  do
  {
    TrieIter2<unsigned int,BOnode>::TrieIter2((uint64_t)v8, (_DWORD **)this + 19, (_DWORD *)(v14 - 4 * v13[0]), --v3, 0);
    while (1)
    {
      v5 = TrieIter2<unsigned int,BOnode>::next((uint64_t)v8);
      if (!v5)
        break;
      LHash<unsigned int,float>::clear((_QWORD *)(v5 + 16), 0);
    }
    TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)v8);
  }
  while (v3);
  result = v14;
  if (*((_DWORD *)this + 44) > 1u)
  {
    v7 = v14 - 4 * v13[0];
    v8[0] = v4;
    v8[1] = v7;
    v9 = 1;
    v10 = 0;
    LHashIter<unsigned int,Trie<unsigned int,BOnode>>::LHashIter((uint64_t)v11, v4, 0);
    v11[4] = 0;
    v12 = 0;
    *(_DWORD *)(v7 + 4) = -1;
    while (TrieIter2<unsigned int,BOnode>::next((uint64_t)v8))
      Trie<unsigned int,BOnode>::removeTrie(v4, (unsigned int *)(v14 - 4 * v13[0]), 0);
    TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)v8);
LABEL_13:
    result = v14;
  }
  if (result)
    return MEMORY[0x1AF44D160](result, 0x1000C8052888210);
  return result;
}

void sub_1AD94620C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v12;

  v12 = *(_QWORD *)(v10 - 48);
  if (v12)
    MEMORY[0x1AF44D160](v12, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

char *Ngram::contextID(Ngram *this, unsigned int a2, const unsigned int *a3, unsigned int *a4)
{
  char *v4;
  char *v5;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;
  int v15;

  v4 = (char *)this + 152;
  *a4 = 0;
  if (*((_DWORD *)this + 44) == 1)
    return (char *)this + 152;
  v10 = 0;
  v5 = (char *)this + 152;
  do
  {
    v11 = a3[v10];
    if (v11 == -1)
      break;
    v14 = 0;
    if (!LHash<unsigned int,Trie<unsigned int,BOnode>>::locate((_DWORD **)v4, v11, &v14))
      break;
    v12 = *(_QWORD *)v4 + 32 * v14;
    v4 = (char *)(v12 + 8);
    if (a2 != -1)
    {
      v15 = 0;
      if (!LHash<unsigned int,float>::locate((_DWORD **)(v12 + 24), a2, &v15))
        continue;
    }
    *a4 = v10 + 1;
    v5 = v4;
    ++v10;
  }
  while (v10 < (*((_DWORD *)this + 44) - 1));
  return v5;
}

float Ngram::contextBOW(Ngram *this, const unsigned int *a2, unsigned int a3)
{
  float v3;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v11;

  v3 = 0.0;
  if (*((_DWORD *)this + 44) != 1)
  {
    v6 = 0;
    v7 = (char *)this + 152;
    v8 = a3;
    do
    {
      v9 = a2[v6];
      if (v9 == -1)
        break;
      v11 = 0;
      if (!LHash<unsigned int,Trie<unsigned int,BOnode>>::locate((_DWORD **)v7, v9, &v11))
        break;
      v7 = (char *)(*(_QWORD *)v7 + 32 * v11 + 8);
      if (v6 >= v8)
        v3 = v3 + *((float *)v7 + 2);
      ++v6;
    }
    while (v6 < (*((_DWORD *)this + 44) - 1));
  }
  return v3;
}

float Ngram::wordProbBO(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  float v11;
  _DWORD **v12;
  uint64_t v13;
  float v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  const char *v18;
  int v20;
  int v21;

  v9 = 0;
  v10 = 0;
  v11 = -INFINITY;
  v12 = (_DWORD **)(a1 + 152);
  v13 = a4;
  v14 = 0.0;
  while (1)
  {
    v20 = 0;
    if (LHash<unsigned int,float>::locate(v12 + 2, a2, &v20))
    {
      v11 = *(float *)&v12[2][2 * v20 + 1];
      v10 = v9 + 1;
      v14 = 0.0;
    }
    if (v13 == v9)
      break;
    v15 = *(_DWORD *)(a3 + 4 * v9);
    if (v15 == -1)
      break;
    v21 = 0;
    if (!LHash<unsigned int,Trie<unsigned int,BOnode>>::locate(v12, v15, &v21))
      break;
    v16 = (uint64_t)&(*v12)[8 * v21];
    v12 = (_DWORD **)(v16 + 8);
    v14 = v14 + *(float *)(v16 + 16);
    ++v9;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1)
    && !*(_BYTE *)(a1 + 8)
    && (Debug::debugAll > 1 || *(_DWORD *)(a1 + 12) >= 2u))
  {
    v17 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    if (v10)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"[", 1);
      v17 = (_QWORD *)std::ostream::operator<<();
      v18 = "gram]";
    }
    else
    {
      v18 = "[OOV]";
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, 5);
  }
  if (*(_QWORD *)a5)
    *(_DWORD *)(*(_QWORD *)a5 + 48) = v10;
  return v11 + v14;
}

_DWORD *Ngram::wordProb(_DWORD *a1, const unsigned int *a2, Vocab *this, uint64_t a4)
{
  unsigned int v8;
  _DWORD *result;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;

  v8 = Vocab::length((uint64_t)this, a2);
  if (!*(_BYTE *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 344))(a1)
    || (result = (_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 3) + 88))(*((_QWORD *)a1 + 3)),
        *result != (_DWORD)a2)
    && (a1[44] < 2u
     || (v10 = *(_DWORD *)this,
         result = (_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 3) + 88))(*((_QWORD *)a1 + 3)),
         v10 != *result)
     && (a1[44] < 3u
      || !v8
      || (v11 = *((_DWORD *)this + 1),
          result = (_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 3) + 88))(*((_QWORD *)a1 + 3)),
          v11 != *result))))
  {
    v12 = a1[44] - 1;
    if (v8 >= v12)
      v13 = v12;
    else
      v13 = v8;
    return (_DWORD *)(*(uint64_t (**)(_DWORD *, const unsigned int *, Vocab *, uint64_t, uint64_t))(*(_QWORD *)a1 + 472))(a1, a2, this, v13, a4);
  }
  return result;
}

uint64_t Ngram::read(Ngram *this, File *a2, unsigned int a3)
{
  _QWORD *v5;
  _QWORD *inserted;
  char **v7;
  char *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  _QWORD *v14;
  const char *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  unsigned int v23;
  unsigned int v24;
  PQCodebook *v25;
  double Prob;
  float v27;
  _QWORD *v28;
  _QWORD *v29;
  size_t v30;
  _QWORD *v31;
  float v32;
  _QWORD *v33;
  _QWORD *v34;
  size_t v35;
  _QWORD *v36;
  PQCodebook *v37;
  double v38;
  const char *v39;
  _QWORD *v40;
  _QWORD *v41;
  size_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  float *v47;
  uint64_t Trie;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  unsigned int v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  unsigned int *v56;
  const char *v57;
  size_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t Binary;
  _QWORD *v63;
  _QWORD *v64;
  size_t v65;
  _QWORD *v66;
  off_t v67;
  _QWORD *v68;
  _QWORD *v69;
  size_t v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  unint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  size_t v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  size_t v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  size_t v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  size_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  double v109;
  unsigned int v110;
  unsigned int v111[100];
  char *__s[2];
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  _QWORD v144[101];
  _QWORD v145[104];

  v145[101] = *MEMORY[0x1E0C80C00];
  v108 = -1;
  bzero(v145, 0x328uLL);
  bzero(v144, 0x328uLL);
  Ngram::clear(this);
  v107 = -1;
  LOBYTE(__s[0]) = 0;
  v5 = (_QWORD *)((char *)this + 152);
  inserted = Trie<unsigned int,BOnode>::insertTrie((_QWORD *)this + 19, &v107, __s);
  if (!LOBYTE(__s[0]))
    inserted[2] = 0;
  *((_DWORD *)inserted + 2) = -8388608;
  v103 = File::ftell(a2);
  v8 = File::getline(a2);
  if (v8)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = *v8;
      v13 = v108;
      if (v108)
      {
        if (v108 == -1)
        {
          if (!strcmp(v8, (const char *)Ngram_BinaryFormatString))
          {
            File::File((File *)__s, *(const char **)a2, "rb", 1);
            if (v103 != -1)
              File::fseek((File *)__s, v103, 0);
            if (!*((_BYTE *)this + 8) && (Debug::debugAll || *((_DWORD *)this + 3)))
            {
              v63 = (_QWORD *)(*(uint64_t (**)(Ngram *))(*(_QWORD *)this + 24))(this);
              v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"reading ", 8);
              v65 = strlen(*(const char **)a2);
              v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, *(_QWORD *)a2, v65);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)" in binary format\n", 18);
            }
            Binary = Ngram::readBinary(this, (File *)__s, a3);
            if ((_DWORD)Binary)
            {
              v67 = File::ftell((File *)__s);
              if (v67 != -1)
                File::fseek(a2, v67, 0);
            }
            File::~File((File *)__s);
            return Binary;
          }
          if (!strcmp(v8, (const char *)Ngram_BinaryV1FormatString))
          {
            if (!*((_BYTE *)this + 8) && (Debug::debugAll || *((_DWORD *)this + 3)))
            {
              v68 = (_QWORD *)(*(uint64_t (**)(Ngram *))(*(_QWORD *)this + 24))(this);
              v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"reading ", 8);
              v70 = strlen(*(const char **)a2);
              v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, *(_QWORD *)a2, v70);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)" in old binary format\n", 22);
            }
            return Ngram::readBinaryV1(this, a2, a3);
          }
          if (v12 == 92 && !strncmp(v8, "\\data\\", 6uLL))
            v108 = 0;
          goto LABEL_100;
        }
        if (v12 != 92 || v10 == 0)
        {
          if (v12 != 92)
            goto LABEL_58;
        }
        else
        {
          if (!*((_BYTE *)this + 8) && (Debug::debugAll || *((_DWORD *)this + 3)))
          {
            v20 = (_QWORD *)(*(uint64_t (**)(Ngram *))(*(_QWORD *)this + 24))(this);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"discarded ", 10);
            v21 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" OOV ", 5);
            v22 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"-grams\n", 7);
          }
          v10 = 0;
        }
        if (sscanf(v8, "\\%d-grams", &v108) != 1)
        {
          if (!strncmp(v8, "\\end\\", 5uLL))
          {
            v79 = 0;
            while (v79 <= *((unsigned int *)this + 44))
            {
              if (v145[v79] != v144[v79])
              {
                v80 = File::position((const char **)a2, MEMORY[0x1E0DE4A50]);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"warning: ", 9);
                v81 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)" ", 1);
                v82 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"-grams read, expected ", 22);
                v83 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"\n", 1);
              }
              ++v79;
              Binary = 1;
              if (v11 + 1 == v79)
                return Binary;
            }
            return 1;
          }
          v13 = v108;
LABEL_58:
          if (v13 <= *((_DWORD *)this + 44))
          {
            v142 = 0u;
            v143 = 0u;
            v140 = 0u;
            v141 = 0u;
            v138 = 0u;
            v139 = 0u;
            v136 = 0u;
            v137 = 0u;
            v134 = 0u;
            v135 = 0u;
            v132 = 0u;
            v133 = 0u;
            v130 = 0u;
            v131 = 0u;
            v128 = 0u;
            v129 = 0u;
            v126 = 0u;
            v127 = 0u;
            v124 = 0u;
            v125 = 0u;
            v122 = 0u;
            v123 = 0u;
            v120 = 0u;
            v121 = 0u;
            v118 = 0u;
            v119 = 0u;
            v116 = 0u;
            v117 = 0u;
            v114 = 0u;
            v115 = 0u;
            *(_OWORD *)__s = 0u;
            v113 = 0u;
            v23 = Vocab::parseWords((Vocab *)v8, (char *)__s, (const char **)(v13 + 3), v7);
            v24 = v23;
            if (v23 < v108 + 1 || v23 > v108 + 2)
            {
              v88 = File::position((const char **)a2, MEMORY[0x1E0DE4A50]);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"ngram line has ", 15);
              v89 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)" fields (", 9);
              v90 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)" expected)\n", 11);
              return 0;
            }
            if (*((_QWORD *)this + 23))
            {
              LODWORD(v109) = 0;
              if (sscanf(__s[0], "%u", &v109) != 1
                || (v25 = (PQCodebook *)*((_QWORD *)this + 23), *(_DWORD *)v25 <= LODWORD(v109)))
              {
                v84 = File::position((const char **)a2, MEMORY[0x1E0DE4A50]);
                v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"invalid codebook index \"", 24);
                v86 = strlen(__s[0]);
                v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)__s[0], v86);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"\"\n", 2);
                return 0;
              }
              Prob = PQCodebook::getProb(v25, LODWORD(v109));
            }
            else
            {
              v109 = 0.0;
              if (!parseLogP(__s[0], &v109))
              {
                v91 = File::position((const char **)a2, MEMORY[0x1E0DE4A50]);
                v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)"bad prob \"", 10);
                v93 = strlen(__s[0]);
                v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)__s[0], v93);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"\"\n", 2);
                return 0;
              }
              Prob = v109;
            }
            v27 = Prob;
            if (v27 > 0.0)
            {
              v28 = File::position((const char **)a2, MEMORY[0x1E0DE4A50]);
              v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"warning: questionable prob \"", 28);
              v30 = strlen(__s[0]);
              v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)__s[0], v30);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"\"\n", 2);
            }
            else if (v27 == -99.0)
            {
              v27 = -INFINITY;
            }
            v32 = 0.0;
            if (v24 == v108 + 2)
            {
              if (v108 == v11)
              {
                v32 = 0.0;
                if (*__s[v11 + 1] != 48)
                {
                  v33 = File::position((const char **)a2, MEMORY[0x1E0DE4A50]);
                  v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"ignoring non-zero bow \"", 23);
                  v35 = strlen(__s[(int)v108 + 1]);
                  v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)__s[(int)v108 + 1], v35);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\" for maximal ngram\n", 20);
                  v32 = 0.0;
                }
              }
              else
              {
                v32 = 0.0;
                if (v108 != *((_DWORD *)this + 44))
                {
                  if (*((_QWORD *)this + 23))
                  {
                    LODWORD(v109) = 0;
                    if (sscanf(__s[v108 + 1], "%u", &v109) != 1
                      || (v37 = (PQCodebook *)*((_QWORD *)this + 23), *(_DWORD *)v37 <= LODWORD(v109)))
                    {
                      v95 = File::position((const char **)a2, MEMORY[0x1E0DE4A50]);
                      v96 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)"invalid codebook index \"", 24);
                      v97 = strlen(__s[(int)v108 + 1]);
                      v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)__s[(int)v108 + 1], v97);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"\"\n", 2);
                      return 0;
                    }
                    v38 = PQCodebook::getProb(v37, LODWORD(v109));
                  }
                  else
                  {
                    v39 = __s[v108 + 1];
                    v109 = 0.0;
                    if (!parseLogP(v39, &v109))
                    {
                      v99 = File::position((const char **)a2, MEMORY[0x1E0DE4A50]);
                      v100 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"bad bow \"", 9);
                      v101 = strlen(__s[(int)v108 + 1]);
                      v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)__s[(int)v108 + 1], v101);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)"\"\n", 2);
                      return 0;
                    }
                    v38 = v109;
                  }
                  v32 = v38;
                  if (v32 == INFINITY)
                  {
                    v40 = File::position((const char **)a2, MEMORY[0x1E0DE4A50]);
                    v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"warning: questionable bow \"", 27);
                    v42 = strlen(__s[(int)v108 + 1]);
                    v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)__s[(int)v108 + 1], v42);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"\"\n", 2);
                  }
                  else if (v32 == -99.0)
                  {
                    v32 = -INFINITY;
                  }
                }
              }
            }
            v44 = (int)v108;
            ++v144[v108];
            __s[v44 + 1] = 0;
            v45 = **((_QWORD **)this + 3);
            if (!a3)
            {
              (*(void (**)(void))(v45 + 256))();
LABEL_90:
              Vocab::reverse((uint64_t)&v110, v46);
              if (v24 == v108 + 2 && v108 < *((_DWORD *)this + 44))
              {
                LOBYTE(v109) = 0;
                v47 = (float *)Trie<unsigned int,BOnode>::insertTrie(v5, &v110, &v109);
                if (!LOBYTE(v109))
                  *((_QWORD *)v47 + 2) = 0;
                v47[2] = v32;
              }
              LOBYTE(v109) = 0;
              Trie = Trie<unsigned int,BOnode>::findTrie((_DWORD **)v5, v111, &v109);
              if (!Trie)
              {
                v49 = File::position((const char **)a2, MEMORY[0x1E0DE4A50]);
                v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"warning: no bow for prefix of ngram \"", 37);
                v51 = operator<<(v50, (const char **)&__s[1]);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"\"\n", 2);
                goto LABEL_100;
              }
              if (v9)
              {
LABEL_97:
                v9 = 1;
              }
              else
              {
                v52 = v110;
                v9 = 0;
                if (v52 == *(_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 88))(*((_QWORD *)this + 3))
                  && v27 != -INFINITY)
                {
                  if (!*(_BYTE *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 152))(*((_QWORD *)this + 3)))
                  {
                    v53 = File::position((const char **)a2, MEMORY[0x1E0DE4A50]);
                    v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"warning: non-zero probability for ", 34);
                    v55 = *((_QWORD *)this + 3);
                    v56 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 88))(v55);
                    v57 = (const char *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v55 + 32))(v55, *v56);
                    v58 = strlen(v57);
                    v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)v57, v58);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)" in closed-vocabulary LM\n", 25);
                    goto LABEL_97;
                  }
                  v9 = 0;
                }
              }
              LOBYTE(v109) = 0;
              *(float *)LHash<unsigned int,float>::insert((_QWORD *)(Trie + 16), v110, &v109) = v27;
              goto LABEL_100;
            }
            if ((*(unsigned int (**)(void))(v45 + 288))())
              goto LABEL_90;
            ++v10;
          }
          goto LABEL_100;
        }
        if ((int)v108 < 1 || v108 > v11)
          goto LABEL_128;
        if (!*((_BYTE *)this + 8) && (Debug::debugAll || *((_DWORD *)this + 3)))
        {
          v14 = (_QWORD *)(*(uint64_t (**)(Ngram *))(*(_QWORD *)this + 24))(this);
          if (v108 <= *((_DWORD *)this + 44))
            v15 = "reading ";
          else
            v15 = "skipping ";
          if (v108 <= *((_DWORD *)this + 44))
            v16 = 8;
          else
            v16 = 9;
LABEL_25:
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
          v17 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" ", 1);
          v18 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"-grams\n", 7);
        }
      }
      else
      {
        v106 = 0;
        v105 = 0;
        if (v12 == 92 && sscanf(v8, "\\%d-grams", &v108) == 1)
        {
          if ((int)v108 < 1 || v108 > v11)
          {
LABEL_128:
            v77 = File::position((const char **)a2, MEMORY[0x1E0DE4A50]);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"invalid ngram order ", 20);
            v78 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"\n", 1);
            return 0;
          }
          if (!*((_BYTE *)this + 8) && (Debug::debugAll || *((_DWORD *)this + 3)))
          {
            v14 = (_QWORD *)(*(uint64_t (**)(Ngram *))(*(_QWORD *)this + 24))(this);
            if (v108 <= *((_DWORD *)this + 44))
              v15 = "reading ";
            else
              v15 = "skipping ";
            if (v108 <= *((_DWORD *)this + 44))
              v16 = 8;
            else
              v16 = 9;
            goto LABEL_25;
          }
        }
        else
        {
          if (sscanf(v8, "ngram %u=%lld", &v106, &v105) != 2)
          {
            v72 = File::position((const char **)a2, MEMORY[0x1E0DE4A50]);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"unexpected input\n", 17);
            return 0;
          }
          if (v106 - 101 <= 0xFFFFFF9B)
          {
            v73 = File::position((const char **)a2, MEMORY[0x1E0DE4A50]);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"ngram order ", 12);
            v74 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)" out of range\n", 14);
            return 0;
          }
          if (v105 < 0)
          {
            v75 = File::position((const char **)a2, MEMORY[0x1E0DE4A50]);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"ngram number ", 13);
            v76 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)" out of range\n", 14);
            return 0;
          }
          if (v106 > v11)
            v11 = v106;
          v145[v106] = v105;
        }
      }
LABEL_100:
      v8 = File::getline(a2);
    }
    while (v8);
  }
  v60 = File::position((const char **)a2, MEMORY[0x1E0DE4A50]);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"reached EOF before \\end\\\n", 25);
  return 0;
}

void sub_1AD9475C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;

  File::~File((File *)&a71);
  _Unwind_Resume(a1);
}

uint64_t Ngram::readBinary(Ngram *this, File *a2, uint64_t a3)
{
  char *v6;
  _QWORD *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v12;
  _QWORD *v13;
  int *v14;
  char *v15;
  size_t v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  off_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  std::locale v24;

  v6 = File::getline(a2);
  if (!v6 || strcmp(v6, (const char *)Ngram_BinaryFormatString))
  {
    v7 = File::position((const char **)a2, MEMORY[0x1E0DE4A50]);
    v8 = "bad binary format\n";
    v9 = 18;
LABEL_4:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
    return 0;
  }
  v12 = File::getline(a2);
  v23 = 0;
  if (sscanf(v12, "maxorder %u", &v23) != 1)
  {
    v7 = File::position((const char **)a2, MEMORY[0x1E0DE4A50]);
    v8 = "could not read ngram order\n";
    v9 = 27;
    goto LABEL_4;
  }
  v20 = 0;
  v21 = 0;
  v22 = 0;
  if ((*(unsigned int (**)(_QWORD, File *, uint64_t *, uint64_t))(**((_QWORD **)this + 3) + 336))(*((_QWORD *)this + 3), a2, &v20, a3))
  {
    v19 = File::ftell(a2);
    if ((v19 & 0x8000000000000000) == 0)
    {
      Ngram::clear(this);
      v10 = Ngram::readBinaryNode((uint64_t)this, (uint64_t)this + 152, *((_DWORD *)this + 44), v23, a2, &v19, a3, (int *)&v20);
      goto LABEL_13;
    }
    v13 = File::position((const char **)a2, MEMORY[0x1E0DE4A50]);
    v14 = __error();
    v15 = srilm_ts_strerror(*v14);
    v16 = strlen(v15);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v15, v16);
    std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
    v18 = std::locale::use_facet(&v24, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
    std::locale::~locale(&v24);
    std::ostream::put();
    std::ostream::flush();
  }
  v10 = 0;
LABEL_13:
  if (v21)
    MEMORY[0x1AF44D160](v21, 0x1000C8052888210);
  return v10;
}

void sub_1AD9477C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  std::locale::~locale((std::locale *)(v13 - 40));
  if (a13)
    MEMORY[0x1AF44D160](a13, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

uint64_t Ngram::readBinaryV1(Ngram *this, File *a2, uint64_t a3)
{
  char *v6;
  char *v7;
  const char *v8;
  size_t v9;
  size_t v10;
  uint64_t v11;
  int locale;
  _QWORD *v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  uint64_t BinaryV1Node;
  size_t v18;
  size_t v19;
  size_t v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  _QWORD *v24;
  const std::locale::facet *v25;
  _QWORD *v26;
  _QWORD *v27;
  float v28;
  uint64_t __ptr;
  _BYTE v30[104];
  std::locale v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  std::locale v37;
  char __s;
  char v39[1023];
  char __str;
  char v41[1023];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v6 = File::getline(a2);
  if (!v6
    || sscanf(v6, "index: %1023s", &__s) != 1
    || (v7 = File::getline(a2)) == 0
    || sscanf(v7, "data: %1023s", &__str) != 1)
  {
    v13 = File::position((const char **)a2, MEMORY[0x1E0DE4A50]);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"invalid binary LM format!", 25);
    std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(*v14 - 24)));
    v15 = std::locale::use_facet(&v31, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
    std::locale::~locale(&v31);
    std::ostream::put();
    std::ostream::flush();
    return 0;
  }
  v8 = *(const char **)a2;
  if (*(_QWORD *)a2 && __s == 42)
  {
    v9 = strlen(*(const char **)a2);
    v32 = 0;
    v33 = 0;
    v10 = strlen(&__s) + v9;
    LODWORD(v31.__locale_) = 0;
    HIDWORD(v31.__locale_) = v10;
    if ((_DWORD)v10)
    {
      Array<char>::alloc((uint64_t)&v31, v10 - 1, 0);
      v11 = v32;
      locale = (int)v31.__locale_;
      v8 = *(const char **)a2;
    }
    else
    {
      locale = 0;
      v11 = 0;
    }
    snprintf((char *)(v11 - locale), v10, "%s%s", v8, v39);
    snprintf(&__s, 0x400uLL, "%.1023s", (const char *)(v32 - SLODWORD(v31.__locale_)));
    if (v32)
      MEMORY[0x1AF44D160](v32, 0x1000C8077774924);
    v8 = *(const char **)a2;
  }
  if (v8 && __str == 42)
  {
    v18 = strlen(v8);
    v19 = strlen(&__str);
    v32 = 0;
    v33 = 0;
    v20 = v19 + v18;
    LODWORD(v31.__locale_) = 0;
    HIDWORD(v31.__locale_) = v20;
    if ((_DWORD)v20)
    {
      Array<char>::alloc((uint64_t)&v31, v20 - 1, 0);
      v21 = v32;
      v22 = (int)v31.__locale_;
      v8 = *(const char **)a2;
    }
    else
    {
      v22 = 0;
      v21 = 0;
    }
    snprintf((char *)(v21 - v22), v20, "%s%s", v8, v41);
    snprintf(&__str, 0x400uLL, "%.1023s", (const char *)(v32 - SLODWORD(v31.__locale_)));
    if (v32)
      MEMORY[0x1AF44D160](v32, 0x1000C8077774924);
  }
  v34 = 0;
  v35 = 0;
  v36 = 0;
  if (!(*(unsigned int (**)(_QWORD, File *, uint64_t *, uint64_t))(**((_QWORD **)this + 3) + 336))(*((_QWORD *)this + 3), a2, &v34, a3))
  {
    BinaryV1Node = 0;
    goto LABEL_33;
  }
  File::File((File *)&v31, &__s, "r", 1);
  File::File((File *)v30, &__str, "rb", 1);
  __ptr = 0;
  v28 = 0.0;
  if (File::fread((File *)&v31, &__ptr, 8uLL, 1uLL) != 1 || __ptr != 0x123456789ABCDEFLL)
  {
    v23 = File::offset((uint64_t)&v31, MEMORY[0x1E0DE4A50]);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"incompatible binary format", 26);
    std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(_QWORD *)(*v24 - 24)));
    v25 = std::locale::use_facet(&v37, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
    std::locale::~locale(&v37);
    std::ostream::put();
    std::ostream::flush();
LABEL_31:
    BinaryV1Node = 0;
    goto LABEL_32;
  }
  if (File::fread((File *)v30, &v28, 4uLL, 1uLL) != 1 || v28 != 9.8765e10)
  {
    v26 = File::offset((uint64_t)v30, MEMORY[0x1E0DE4A50]);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"incompatible binary format", 26);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v27);
    goto LABEL_31;
  }
  Ngram::clear(this);
  BinaryV1Node = Ngram::readBinaryV1Node(this, (uint64_t)this + 152, (File *)&v31, (File *)v30, a3, (int *)&v34, 1u);
LABEL_32:
  File::~File((File *)v30);
  File::~File((File *)&v31);
LABEL_33:
  if (v35)
    MEMORY[0x1AF44D160](v35, 0x1000C8052888210);
  return BinaryV1Node;
}

void sub_1AD947CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::locale a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::locale a43)
{
  uint64_t v43;
  uint64_t v45;

  std::locale::~locale(&a43);
  File::~File((File *)&a14);
  File::~File((File *)&a27);
  v45 = *(_QWORD *)(v43 + 8);
  if (v45)
    MEMORY[0x1AF44D160](v45, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

uint64_t Ngram::write(Ngram *this, File *a2)
{
  if (*((_BYTE *)this + 148))
    return Ngram::writeBinaryNgram(this, a2);
  else
    return (*(uint64_t (**)(Ngram *, File *, _QWORD))(*(_QWORD *)this + 336))(this, a2, *((unsigned int *)this + 44));
}

uint64_t Ngram::writeBinaryNgram(Ngram *this, File *a2)
{
  _QWORD *v5;
  int *v6;
  char *v7;
  size_t v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  off_t v11;
  std::locale v12;

  File::fprintf(a2, "%s", (const char *)Ngram_BinaryFormatString);
  File::fprintf(a2, "maxorder %u\n", *((_DWORD *)this + 44));
  (*(void (**)(_QWORD, File *, uint64_t))(**((_QWORD **)this + 3) + 344))(*((_QWORD *)this + 3), a2, 1);
  v11 = File::ftell(a2);
  if ((v11 & 0x8000000000000000) == 0)
    return Ngram::writeBinaryNode((uint64_t)this, (uint64_t)this + 152, 1, a2, &v11);
  v5 = File::position((const char **)a2, MEMORY[0x1E0DE4A50]);
  v6 = __error();
  v7 = srilm_ts_strerror(*v6);
  v8 = strlen(v7);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v7, v8);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v12, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v12);
  std::ostream::put();
  std::ostream::flush();
  return 0;
}

void sub_1AD947E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12)
{
  std::locale::~locale(&a12);
  _Unwind_Resume(a1);
}

uint64_t Ngram::writeWithOrder(Ngram *this, File *a2, unsigned int a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t (*v15)(Vocab *, uint64_t);
  const char *v16;
  uint64_t v17;
  const char **v18;
  uint64_t (*v19)(Vocab *, uint64_t);
  float *v20;
  float v21;
  const char *const *v22;
  const char *v23;
  uint64_t Trie;
  float v25;
  unsigned int v27;
  _BYTE v28[24];
  uint64_t v29;
  _BYTE v30[87];
  char v31;
  _OWORD v32[50];
  unsigned int v33;
  _DWORD v34[303];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  memset(&v32[1], 0, 496);
  if (a3 >= 0x64)
    v6 = 100;
  else
    v6 = a3;
  v32[0] = 0uLL;
  File::fprintf(a2, "\n\\data\\\n");
  if ((_DWORD)v6)
  {
    v7 = a3;
    if (a3 >= 0x64uLL)
      v7 = 100;
    v8 = -v7;
    v9 = 1;
    do
    {
      v10 = (*(uint64_t (**)(Ngram *, uint64_t))(*(_QWORD *)this + 456))(this, v9);
      *(_QWORD *)&v34[2 * v9 + 101] = v10;
      File::fprintf(a2, "ngram %d=%lld\n", v9++, v10);
    }
    while (v8 + v9 != 1);
    v11 = 1;
    do
    {
      File::fprintf(a2, "\n\\%d-grams:\n", v11);
      if (!*((_BYTE *)this + 8) && (Debug::debugAll || *((_DWORD *)this + 3)))
      {
        v12 = (_QWORD *)(*(uint64_t (**)(Ngram *))(*(_QWORD *)this + 24))(this);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"writing ", 8);
        v13 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" ", 1);
        v14 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"-grams\n", 7);
      }
      v15 = Vocab::compareIndex(*((Vocab **)this + 3));
      TrieIter2<unsigned int,BOnode>::TrieIter2((uint64_t)v30, (_DWORD **)this + 19, v34, v11 - 1, (uint64_t)v15);
      if (v11 <= 1)
        v16 = "";
      else
        v16 = " ";
      while (1)
      {
        v17 = TrieIter2<unsigned int,BOnode>::next((uint64_t)v30);
        if (!v17)
          break;
        (*(void (**)(_QWORD, _DWORD *, _OWORD *, uint64_t))(**((_QWORD **)this + 3) + 248))(*((_QWORD *)this + 3), v34, v32, 101);
        Vocab::reverse((uint64_t)v32, v18);
        v19 = Vocab::compareIndex(*((Vocab **)this + 3));
        LHashIter<unsigned int,float>::LHashIter((uint64_t)v28, (_DWORD **)(v17 + 16), (uint64_t)v19);
        v27 = 0;
        while (1)
        {
          v20 = (float *)LHashIter<unsigned int,float>::next((uint64_t)v28, &v27);
          if (!v20)
            break;
          if (File::error(a2))
          {
            if (v29)
              MEMORY[0x1AF44D160](v29, 0x1000C8052888210);
            TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)v30);
            return 0;
          }
          v21 = *v20;
          if (*v20 == -INFINITY)
            v21 = -99.0;
          File::fprintf(a2, "%.*lg\t", 7, v21);
          Vocab::write(a2, (const char **)v32, v22);
          v23 = (const char *)(*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3), v27);
          File::fprintf(a2, "%s%s", v16, v23);
          if (v11 < v6)
          {
            v33 = v27;
            v31 = 0;
            Trie = Trie<unsigned int,BOnode>::findTrie((_DWORD **)this + 19, &v33, &v31);
            if (Trie)
            {
              v25 = *(float *)(Trie + 8);
              if (v25 == -INFINITY)
                v25 = -99.0;
              File::fprintf(a2, "\t%.*lg", 7, v25);
            }
          }
          File::fprintf(a2, "\n");
        }
        if (v29)
          MEMORY[0x1AF44D160](v29, 0x1000C8052888210);
      }
      TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)v30);
      ++v11;
    }
    while (v11 != (_DWORD)v6 + 1);
  }
  File::fprintf(a2, "\n\\end\\\n");
  return 1;
}

void sub_1AD94827C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Ngram::writeBinaryNode(uint64_t a1, uint64_t a2, int a3, File *a4, off_t *a5)
{
  unsigned __int8 v5;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int **v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  float *v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  off_t v25;
  unsigned int v26;
  unsigned int v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  int *v35;
  char *v36;
  size_t v37;
  _QWORD *v38;
  const std::locale::facet *v39;
  _QWORD *v40;
  int *v41;
  char *v42;
  size_t v43;
  _QWORD *v44;
  const std::locale::facet *v45;
  off_t v47;
  _BYTE v48[24];
  uint64_t v49;
  _BYTE v50[24];
  uint64_t v51;
  _DWORD v52[3];

  v10 = *(_DWORD *)(a1 + 176);
  if ((v10 - a3) >= 4)
    v11 = 8;
  else
    v11 = 4;
  if (v10 == a3)
    v12 = 2;
  else
    v12 = v11;
  v47 = *a5;
  v13 = (unsigned int **)(a2 + 16);
  v14 = (a3 + 1);
  while (1)
  {
    v15 = writeBinaryCount(a4, 0, v12);
    if (!v15)
      return 0;
    *a5 += v15;
    v16 = writeBinaryCount(a4, *(float *)(a2 + 8));
    if (!v16)
      return 0;
    *a5 += v16;
    v17 = *v13 ? (unint64_t)**v13 >> 5 : 0;
    v18 = writeBinaryCount(a4, v17, 0);
    if (!v18)
      return 0;
    *a5 += v18;
    v52[0] = 0;
    LHashIter<unsigned int,float>::LHashIter((uint64_t)v50, v13, (uint64_t)SArray_compareKey<unsigned int>);
    while (1)
    {
      v19 = (float *)LHashIter<unsigned int,float>::next((uint64_t)v50, v52);
      if (!v19)
        break;
      v20 = writeBinaryCount(a4, v52[0], 0);
      if (!v20 || (*a5 += v20, (v21 = writeBinaryCount(a4, *v19)) == 0))
      {
        v5 = 0;
        v22 = 1;
        goto LABEL_39;
      }
      *a5 += v21;
    }
    LHashIter<unsigned int,Trie<unsigned int,BOnode>>::LHashIter((uint64_t)v48, (_DWORD **)a2, (uint64_t)SArray_compareKey<unsigned int>);
    while (1)
    {
      v23 = LHashIter<unsigned int,Trie<unsigned int,BOnode>>::next((uint64_t)v48, v52);
      if (!v23)
        break;
      v24 = writeBinaryCount(a4, v52[0], 0);
      if (v24)
      {
        *a5 += v24;
        if (Ngram::writeBinaryNode(a1, v23, v14, a4, a5))
          continue;
      }
      v5 = 0;
      v22 = 1;
      goto LABEL_37;
    }
    v25 = *a5;
    if ((File::fseek(a4, v47, 0) & 0x80000000) != 0)
      goto LABEL_30;
    v26 = writeBinaryCount(a4, v25 - v47, v12);
    v27 = v26;
    if (v26)
    {
      if (v26 > v12)
      {
        v28 = File::offset((uint64_t)a4, MEMORY[0x1E0DE4A50]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"increasing offset bytes from ", 29);
        v29 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" to ", 4);
        v30 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" (order ", 8);
        v31 = (_QWORD *)std::ostream::operator<<();
        v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)",", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" level ", 7);
        v33 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)")\n", 2);
        if ((File::fseek(a4, v47, 0) & 0x80000000) != 0)
        {
          v40 = File::offset((uint64_t)a4, MEMORY[0x1E0DE4A50]);
          v41 = __error();
          v42 = srilm_ts_strerror(*v41);
          v43 = strlen(v42);
          v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v42, v43);
          std::ios_base::getloc((const std::ios_base *)((char *)v44 + *(_QWORD *)(*v44 - 24)));
          v45 = std::locale::use_facet((const std::locale *)&v52[1], MEMORY[0x1E0DE4A90]);
          ((void (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 10);
          std::locale::~locale((std::locale *)&v52[1]);
          std::ostream::put();
          std::ostream::flush();
          v5 = 0;
          v22 = 1;
        }
        else
        {
          *a5 = v47;
          v22 = 2;
        }
        v12 = v27;
        goto LABEL_37;
      }
      if ((File::fseek(a4, v25, 0) & 0x80000000) == 0)
      {
        v22 = 1;
        v5 = 1;
        goto LABEL_37;
      }
LABEL_30:
      v34 = File::offset((uint64_t)a4, MEMORY[0x1E0DE4A50]);
      v35 = __error();
      v36 = srilm_ts_strerror(*v35);
      v37 = strlen(v36);
      v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v36, v37);
      std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(_QWORD *)(*v38 - 24)));
      v39 = std::locale::use_facet((const std::locale *)&v52[1], MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
      std::locale::~locale((std::locale *)&v52[1]);
      std::ostream::put();
      std::ostream::flush();
    }
    v5 = 0;
    v22 = 1;
LABEL_37:
    if (v49)
      MEMORY[0x1AF44D160](v49, 0x1000C8052888210);
LABEL_39:
    if (v51)
      MEMORY[0x1AF44D160](v51, 0x1000C8052888210);
    if (v22 != 2)
      return v5;
  }
}

void sub_1AD9487CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::locale a20)
{
  std::locale::~locale(&a20);
  if (a14)
    MEMORY[0x1AF44D160](a14, 0x1000C8052888210);
  if (a18)
    MEMORY[0x1AF44D160](a18, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

uint64_t Ngram::readBinaryNode(uint64_t a1, uint64_t a2, int a3, int a4, File *a5, off_t *a6, uint64_t a7, int *a8)
{
  uint64_t result;
  off_t v17;
  int locale;
  off_t v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  _DWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  const char *v32;
  uint64_t v33;
  _QWORD *v34;
  int *v35;
  char *v36;
  size_t v37;
  _QWORD *v38;
  const std::locale::facet *v39;
  _QWORD *v40;
  off_t v41;
  unint64_t v42;
  char v43;
  std::locale v44;

  if (!a4)
    return 1;
  v42 = 0;
  result = readBinaryCount(a5, &v42);
  if (!(_DWORD)result)
    return result;
  v17 = v42 + *a6;
  *a6 += result;
  if (!a3)
  {
    if ((File::fseek(a5, v17, 0) & 0x80000000) != 0)
    {
      v34 = File::offset((uint64_t)a5, MEMORY[0x1E0DE4A50]);
      v35 = __error();
      v36 = srilm_ts_strerror(*v35);
      v37 = strlen(v36);
      v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v36, v37);
      std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(_QWORD *)(*v38 - 24)));
      v39 = std::locale::use_facet(&v44, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
      std::locale::~locale(&v44);
      std::ostream::put();
      std::ostream::flush();
      return 0;
    }
    *a6 = v17;
    return 1;
  }
  result = readBinaryCount(a5, (float *)(a2 + 8));
  if (!(_DWORD)result)
    return result;
  *a6 += result;
  v44.__locale_ = 0;
  result = readBinaryCount(a5, (unint64_t *)&v44);
  if (!(_DWORD)result)
    return result;
  v41 = v17;
  locale = (int)v44.__locale_;
  v19 = *a6 + result;
  *a6 = v19;
  if (!locale)
  {
LABEL_14:
    if (v19 < v41)
    {
      v23 = (a3 - 1);
      v24 = (a4 - 1);
      do
      {
        v44.__locale_ = 0;
        result = readBinaryCount(a5, (unint64_t *)&v44);
        if (!(_DWORD)result)
          return result;
        v25 = v44.__locale_;
        *a6 += result;
        if (a8[1] <= v25)
          goto LABEL_32;
        v26 = *(_DWORD *)Array<unsigned int>::operator[](a8, v25);
        if (v26 == -1)
        {
          v29 = a1;
          v28 = (_DWORD *)a2;
          v30 = 0;
        }
        else
        {
          LOBYTE(v44.__locale_) = 0;
          v27 = (_DWORD *)LHash<unsigned int,Trie<unsigned int,BOnode>>::insert((_QWORD *)a2, v26, &v44);
          v28 = v27;
          if (!LOBYTE(v44.__locale_))
            *v27 = 0;
          v29 = a1;
          v30 = v23;
        }
        result = Ngram::readBinaryNode(v29, v28, v30, v24, a5, a6, a7, a8);
        if (!(_DWORD)result)
          return result;
        v19 = *a6;
      }
      while (*a6 < v41);
    }
    if (v19 != v41)
    {
      v31 = File::offset((uint64_t)a5, MEMORY[0x1E0DE4A50]);
      v32 = "data misaligned\n";
      v33 = 16;
LABEL_33:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
      return 0;
    }
    return 1;
  }
  while (1)
  {
    v44.__locale_ = 0;
    result = readBinaryCount(a5, (unint64_t *)&v44);
    if (!(_DWORD)result)
      return result;
    v20 = v44.__locale_;
    *a6 += result;
    if (a8[1] <= v20)
    {
LABEL_32:
      v40 = File::offset((uint64_t)a5, MEMORY[0x1E0DE4A50]);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"word index ", 11);
      v31 = (_QWORD *)std::ostream::operator<<();
      v32 = " out of range\n";
      v33 = 14;
      goto LABEL_33;
    }
    v21 = *(_DWORD *)Array<unsigned int>::operator[](a8, v20);
    LODWORD(v44.__locale_) = 0;
    result = readBinaryCount(a5, (float *)&v44);
    if (!(_DWORD)result)
      return result;
    *a6 += result;
    if (v21 != -1)
    {
      v22 = (int)v44.__locale_;
      v43 = 0;
      *(_DWORD *)LHash<unsigned int,float>::insert((_QWORD *)(a2 + 16), v21, &v43) = v22;
    }
    if (!--locale)
    {
      v19 = *a6;
      goto LABEL_14;
    }
  }
}

void sub_1AD948B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::locale a14)
{
  std::locale::~locale(&a14);
  _Unwind_Resume(a1);
}

uint64_t Ngram::readBinaryV1Node(Ngram *a1, uint64_t a2, File *a3, File *a4, uint64_t a5, int *a6, unsigned int a7)
{
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  _DWORD *v23;
  _DWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  const std::locale::facet *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  const std::locale::facet *v31;
  _QWORD *v32;
  _QWORD *v33;
  const char *v34;
  size_t v35;
  _QWORD *v36;
  int *v37;
  char *v38;
  _QWORD *v39;
  unsigned int __ptr;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char v44;
  std::locale v45;

  if (*((_DWORD *)a1 + 44) < a7)
    return Ngram::skipToNextTrie(a1, a3, a7);
  v14 = *((_QWORD *)a6 + 1);
  v15 = a6[1];
  v16 = *a6;
  v43 = 0;
  v41 = 0;
  v42 = 0;
  __ptr = 0;
  if (File::fread(a4, &__ptr, 4uLL, 1uLL) != 1 || File::fread(a4, &v43, 4uLL, 1uLL) != 1)
    goto LABEL_30;
  v17 = v14 - 4 * v16;
  *(_DWORD *)(a2 + 8) = v43;
  if (!(_DWORD)a5)
    LHash<unsigned int,float>::clear((_QWORD *)(a2 + 16), __ptr);
  if (__ptr)
  {
    v18 = 0;
    while (File::fread(a4, &v42, 4uLL, 1uLL) == 1 && File::fread(a4, (char *)&v42 + 4, 4uLL, 1uLL) == 1)
    {
      if (v42 >= v15)
      {
        v28 = File::offset((uint64_t)a3, MEMORY[0x1E0DE4A50]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"index (", 7);
        v29 = (_QWORD *)std::ostream::operator<<();
        v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)") out of range", 14);
        std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(_QWORD *)(*v30 - 24)));
        v31 = std::locale::use_facet(&v45, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
        goto LABEL_31;
      }
      v19 = *(_DWORD *)(v17 + 4 * v42);
      if (v19 != -1)
      {
        v20 = HIDWORD(v42);
        LOBYTE(v45.__locale_) = 0;
        *(_DWORD *)LHash<unsigned int,float>::insert((_QWORD *)(a2 + 16), v19, &v45) = v20;
      }
      if (++v18 >= __ptr)
        goto LABEL_15;
    }
LABEL_30:
    v25 = File::offset((uint64_t)a4, MEMORY[0x1E0DE4A50]);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"failed to read from data file", 29);
    std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(_QWORD *)(*v26 - 24)));
    v27 = std::locale::use_facet(&v45, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
LABEL_31:
    std::locale::~locale(&v45);
    std::ostream::put();
    std::ostream::flush();
    return 0;
  }
LABEL_15:
  LODWORD(v45.__locale_) = 0;
  v21 = 1;
  if (File::fread(a3, &v45, 4uLL, 1uLL) == 1)
  {
    while (1)
    {
      v21 = 1;
      if (File::fread(a3, &v42, 4uLL, 1uLL) != 1)
        return v21;
      v21 = 1;
      if (File::fread(a3, &v41, 8uLL, 1uLL) != 1)
        return v21;
      if (v41 == -1 && (_DWORD)v42 == -1)
        return 1;
      if (v42 >= v15)
        break;
      v22 = *(_DWORD *)(v17 + 4 * v42);
      if (v22 == -1)
      {
        Ngram::skipToNextTrie((Ngram *)1, a3, LODWORD(v45.__locale_) + 1);
      }
      else
      {
        v44 = 0;
        v23 = (_DWORD *)LHash<unsigned int,Trie<unsigned int,BOnode>>::insert((_QWORD *)a2, v22, &v44);
        v24 = v23;
        if (!v44)
          *v23 = 0;
        if ((File::fseek(a4, v41, 0) & 0x80000000) != 0)
        {
          v36 = File::offset((uint64_t)a4, MEMORY[0x1E0DE4A50]);
          v37 = __error();
          v38 = srilm_ts_strerror(*v37);
          v35 = strlen(v38);
          v33 = v36;
          v34 = v38;
          goto LABEL_39;
        }
        if (!Ngram::readBinaryV1Node(a1, v24, a3, a4, a5, a6, (LODWORD(v45.__locale_) + 1)))
          return 0;
      }
      v21 = 1;
      if (File::fread(a3, &v45, 4uLL, 1uLL) != 1)
        return v21;
    }
    v32 = File::offset((uint64_t)a3, MEMORY[0x1E0DE4A50]);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"index (", 7);
    v33 = (_QWORD *)std::ostream::operator<<();
    v34 = ") out of range";
    v35 = 14;
LABEL_39:
    v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v34, v35);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v39);
    return 0;
  }
  return v21;
}

void sub_1AD949018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::locale a14)
{
  std::locale::~locale(&a14);
  _Unwind_Resume(a1);
}

uint64_t Ngram::skipToNextTrie(Ngram *this, File *a2, unsigned int a3)
{
  _QWORD *v5;
  _QWORD *v6;
  const std::locale::facet *v7;
  uint64_t v9;
  uint64_t __ptr;
  std::locale v11;

  v9 = 0;
  __ptr = 0;
  while (1)
  {
    if (File::fread(a2, (char *)&__ptr + 4, 4uLL, 1uLL) != 1
      || File::fread(a2, &__ptr, 4uLL, 1uLL) != 1
      || File::fread(a2, &v9, 8uLL, 1uLL) != 1)
    {
LABEL_8:
      v5 = File::offset((uint64_t)a2, MEMORY[0x1E0DE4A50]);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"skipToNextTrie failed for order ", 32);
      v6 = (_QWORD *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)));
      v7 = std::locale::use_facet(&v11, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
      std::locale::~locale(&v11);
      std::ostream::put();
      std::ostream::flush();
      return 0;
    }
    if (__ptr == __PAIR64__(a3, -1) && v9 == -1)
      return 1;
    if (HIDWORD(__ptr) < a3)
      goto LABEL_8;
  }
}

void sub_1AD94916C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12)
{
  std::locale::~locale(&a12);
  _Unwind_Resume(a1);
}

uint64_t Ngram::numNgrams(Ngram *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  unint64_t v8;
  _BYTE v10[80];
  int v11;
  _BYTE v12[12];
  int v13;

  if (!a2)
    return 0;
  *(_DWORD *)&v12[8] = 0;
  v13 = 0;
  v11 = 0;
  *(_QWORD *)v12 = (a2 + 1);
  if (a2 == -1)
  {
    v4 = 0;
    v5 = 0;
  }
  else
  {
    Array<unsigned int>::alloc((uint64_t)&v11, a2, 0);
    v5 = *(_QWORD *)&v12[4];
    v4 = v11;
  }
  TrieIter2<unsigned int,BOnode>::TrieIter2((uint64_t)v10, (_DWORD **)this + 19, (_DWORD *)(v5 - 4 * v4), a2 - 1, 0);
  for (i = 0; ; i += v8)
  {
    v7 = TrieIter2<unsigned int,BOnode>::next((uint64_t)v10);
    if (!v7)
      break;
    v8 = *(_QWORD *)(v7 + 16);
    if (v8)
      v8 = (unint64_t)*(unsigned int *)v8 >> 5;
  }
  TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)v10);
  if (*(_QWORD *)&v12[4])
    MEMORY[0x1AF44D160](*(_QWORD *)&v12[4], 0x1000C8052888210);
  return i;
}

void sub_1AD949254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v12;

  v12 = *(_QWORD *)(v10 - 32);
  if (v12)
    MEMORY[0x1AF44D160](v12, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

BOOL Ngram::estimate(Ngram *this, NgramStats *a2, unint64_t *a3, unint64_t *a4, unsigned int a5)
{
  uint64_t v9;
  unsigned int v10;
  GoodTuring *v11;
  GoodTuring *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _BOOL8 v19;
  _QWORD *v20;
  const std::locale::facet *v21;
  unsigned int v22;
  unsigned int i;
  uint64_t v24;
  std::locale v27;

  v9 = operator new[]();
  if (!*((_DWORD *)this + 44))
  {
LABEL_15:
    v19 = (*(unsigned int (**)(Ngram *, NgramStats *, uint64_t, _QWORD))(*(_QWORD *)this + 376))(this, a2, v9, a5) != 0;
    goto LABEL_17;
  }
  v10 = 2;
  while (1)
  {
    v11 = (GoodTuring *)operator new();
    v12 = v11;
    if (a3)
    {
      v13 = a3[v10 - 2];
      if (a4)
        goto LABEL_5;
    }
    else
    {
      LODWORD(v13) = 1;
      if (a4)
      {
LABEL_5:
        v14 = a4[v10 - 2];
        goto LABEL_8;
      }
    }
    LODWORD(v14) = 5;
LABEL_8:
    GoodTuring::GoodTuring(v11, v13, v14);
    v15 = v10 - 2;
    *(_QWORD *)(v9 + 8 * v15) = v12;
    (*(void (**)(GoodTuring *, _QWORD))(*(_QWORD *)v12 + 16))(v12, *((unsigned int *)a2 + 3));
    if (!(*(unsigned int (**)(_QWORD, NgramStats *, _QWORD))(**(_QWORD **)(v9 + 8 * v15)
                                                                       + 96))(*(_QWORD *)(v9 + 8 * v15), a2, v10 - 1))break;
    if (!*((_BYTE *)this + 8) && (Debug::debugAll > 1 || *((_DWORD *)this + 3) >= 2u))
    {
      v16 = (_QWORD *)(*(uint64_t (**)(Ngram *))(*(_QWORD *)this + 24))(this);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Good Turing parameters for ", 27);
      v17 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"-grams:\n", 8);
      File::File((File *)&v27, (__sFILE *)*MEMORY[0x1E0C80C10], 1);
      (*(void (**)(_QWORD, std::locale *))(**(_QWORD **)(v9 + 8 * v15) + 80))(*(_QWORD *)(v9 + 8 * v15), &v27);
      File::~File((File *)&v27);
    }
    if (v10++ > *((_DWORD *)this + 44))
      goto LABEL_15;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"failed to estimate GT discount for order ", 41);
  v20 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(_QWORD *)(*v20 - 24)));
  v21 = std::locale::use_facet(&v27, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
  std::locale::~locale(&v27);
  std::ostream::put();
  std::ostream::flush();
  v19 = 0;
LABEL_17:
  v22 = *((_DWORD *)this + 44);
  if (v22)
  {
    for (i = 1; i <= v22; ++i)
    {
      v24 = *(_QWORD *)(v9 + 8 * (i - 1));
      if (v24)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
        v22 = *((_DWORD *)this + 44);
      }
    }
  }
  MEMORY[0x1AF44D160](v9, 0x20C8093837F09);
  return v19;
}

void sub_1AD949530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t Ngram::vocabSize(const Vocab **this)
{
  uint64_t v2;
  unsigned int v4;
  _BYTE v5[24];
  uint64_t v6;

  VocabIter::VocabIter((VocabIter *)v5, this[3], 0);
  v2 = 0;
  v4 = 0;
  while (VocabIter::next((VocabIter *)v5, &v4))
  {
    if (!(*(unsigned int (**)(const Vocab *, _QWORD))(*(_QWORD *)this[3] + 176))(this[3], v4))
    {
      if ((*(unsigned int (**)(const Vocab *, _QWORD))(*(_QWORD *)this[3] + 224))(this[3], v4))
        v2 = v2;
      else
        v2 = (v2 + 1);
    }
  }
  if (v6)
    MEMORY[0x1AF44D160](v6, 0x50C80EE9192B6);
  return v2;
}

void sub_1AD949618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    MEMORY[0x1AF44D160](a14, 0x50C80EE9192B6);
  _Unwind_Resume(exception_object);
}

uint64_t Ngram::estimate2<unsigned long>(Ngram *this, uint64_t a2, uint64_t a3, int a4)
{
  int v6;
  unsigned int v7;
  uint64_t Trie;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  float v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  double v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  unsigned int v43;
  float v44;
  double v45;
  double v46;
  double v47;
  float v48;
  double v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  const char *v54;
  size_t v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  const std::locale::facet *v63;
  int v64;
  BOOL v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  unint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  int v82;
  int v83;
  _DWORD **v85;
  unint64_t v86;
  unsigned int v87;
  float v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  double v94;
  _DWORD **v95[2];
  int v96;
  uint64_t v97;
  _QWORD v98[5];
  char v99;
  unsigned int v100[20];
  _DWORD v101[2];
  uint64_t v102;
  int v103;
  std::locale v104;
  unsigned int v105[2];
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  v6 = *((_DWORD *)this + 44);
  v101[0] = 0;
  v101[1] = v6;
  v102 = 0;
  v103 = 0;
  if (v6)
    Array<unsigned int>::alloc((uint64_t)v101, v6 - 1, 0);
  v7 = Ngram::vocabSize((const Vocab **)this);
  Ngram::clear(this);
  v100[0] = -1;
  LOBYTE(v95[0]) = 0;
  Trie = Trie<unsigned int,BOnode>::findTrie((_DWORD **)this + 19, v100, v95);
  v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 72))(*((_QWORD *)this + 3));
  v10 = Trie + 8;
  if (!Trie)
    v10 = 0;
  LHash<unsigned int,float>::setsize((_QWORD *)(v10 + 8), v9);
  if (*(_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 104))(*((_QWORD *)this + 3)) != -1)
  {
    *(_DWORD *)(v102 - 4 * v101[0]) = -1;
    v11 = (unsigned int *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 104))(*((_QWORD *)this + 3));
    *(_DWORD *)Ngram::insertProb(this, *v11, (unsigned int *)(v102 - 4 * v101[0])) = -8388608;
  }
  if (*((_DWORD *)this + 44))
  {
    v85 = (_DWORD **)(a2 + 160);
    v12 = log10((double)v7);
    v88 = -v12;
    v86 = v7;
    v13 = 1.0 - 0.000003;
    v14 = 1;
    v89 = a3;
    do
    {
      v15 = (v14 - 1);
      if (a3
        && (v16 = *(_QWORD *)(a3 + 8 * v15)) != 0
        && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 72))(v16))
      {
        v79 = *(_QWORD *)(a3 + 8 * v15);
        if (v79)
          (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 112))(v79, a2, v14, *((unsigned int *)this + 44));
        v90 = 0;
      }
      else
      {
        v90 = 1;
      }
      TrieIter2<unsigned int,unsigned long>::TrieIter2((uint64_t)v100, v85, (_DWORD *)(v102 - 4 * v101[0]), v14 - 1, 0);
      v82 = 0;
      v83 = 0;
      v93 = 0;
      v87 = v14 - 2;
      while (1)
      {
        v17 = TrieIter2<unsigned int,unsigned long>::next((uint64_t)v100);
        if (!v17)
          break;
        if (v14 >= 2
          && (v18 = *(_DWORD *)(v102 + 4 * (int)(v87 - v101[0])),
              v18 == *(_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 120))(*((_QWORD *)this + 3)))
          || (v19 = *((_QWORD *)this + 3),
              v20 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 88))(v19),
              (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 176))(v19, *v20))
          && (v21 = v102,
              v22 = v101[0],
              v23 = (unsigned int *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 88))(*((_QWORD *)this + 3)),
              Vocab::contains((Vocab *)(v21 - 4 * v22), (const unsigned int *)*v23)))
        {
          ++v82;
          continue;
        }
        v25 = a3 && (v24 = *(_QWORD *)(a3 + 8 * v15)) != 0 && *(_BYTE *)(v24 + 24) != 0;
        LOBYTE(v104.__locale_) = 0;
        v95[0] = (_DWORD **)Trie<unsigned int,unsigned long>::insertTrie(v85, (unsigned int *)(v102 - 4 * v101[0]), &v104);
        v95[1] = (_DWORD **)v105;
        v96 = 1;
        v97 = 0;
        LHashIter<unsigned int,Trie<unsigned int,unsigned long>>::LHashIter((uint64_t)v98, v95[0], 0);
        v26 = 0;
        v27 = 0;
        v91 = 0;
        v92 = 0;
        v98[4] = 0;
        v99 = 0;
        v105[1] = -1;
        while (1)
        {
          v29 = TrieIter2<unsigned int,unsigned long>::next((uint64_t)v95);
          if (!v29)
            break;
          if (!(*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)this + 3) + 176))(*((_QWORD *)this + 3), v105[0])&& ((_DWORD)v14 != 1|| !(*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)this + 3) + 224))(*((_QWORD *)this + 3), v105[0])))
          {
            if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)this + 3) + 224))(*((_QWORD *)this + 3), v105[0]))
            {
              v30 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 3) + 232))(*((_QWORD *)this + 3), v105[0]);
              if (v30)
              {
                v31 = *(_QWORD *)(v29 + 8);
                v32 = v31 * v30;
                v27 += v31;
                if (v30 == 1)
                  v33 = 0;
                else
                  v33 = *(_QWORD *)(v29 + 8);
                if (v30 <= 2)
                  v31 = 0;
                v91 += v31;
                v92 += v33;
              }
              else
              {
                v32 = *(_QWORD *)(v29 + 8);
                ++v27;
              }
            }
            else
            {
              v32 = *(_QWORD *)(v29 + 8);
              ++v27;
              if (v32 <= 1)
                v34 = v92;
              else
                v34 = v92 + 1;
              v35 = v91;
              if (v32 > 2)
                v35 = v91 + 1;
              v91 = v35;
              v92 = v34;
            }
            v26 += v32;
          }
        }
        if (v14 >= 2 && *(_BYTE *)(*(uint64_t (**)(Ngram *))(*(_QWORD *)this + 352))(this))
          v26 = *(_QWORD *)(v17 + 8);
        if (!v26)
          goto LABEL_103;
        Vocab::reverse(v102 - 4 * v101[0], v28);
        v36 = v15;
LABEL_49:
        v37 = v90 ^ 1;
        if (!v26)
          v37 = 0;
        v94 = (double)v26;
        if (v27 < v86)
          v38 = v37;
        else
          v38 = 0;
        while (2)
        {
          TrieIter2<unsigned int,unsigned long>::init((uint64_t)v95);
          v39 = 0.0;
          while (1)
          {
            v40 = TrieIter2<unsigned int,unsigned long>::next((uint64_t)v95);
            v42 = v40;
            if (!v40)
              break;
            if (v14 < 2 || *(_QWORD *)(v40 + 8))
            {
              if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)this + 3) + 176))(*((_QWORD *)this + 3), v105[0])|| (*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)this + 3) + 224))(*((_QWORD *)this + 3), v105[0]))
              {
                if (v14 <= 1)
                {
                  v43 = v105[0];
                  if (v43 != *(_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 88))(*((_QWORD *)this + 3))
                    && !(*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)this + 3) + 224))(*((_QWORD *)this + 3), v105[0]))
                  {
                    v44 = -INFINITY;
                    goto LABEL_64;
                  }
                }
                ++v93;
              }
              else
              {
                v45 = 1.0;
                if ((v90 & 1) == 0)
                  v45 = (*(double (**)(_QWORD, _QWORD, unint64_t, unint64_t))(**(_QWORD **)(a3 + 8 * v36) + 40))(*(_QWORD *)(a3 + 8 * v36), *(_QWORD *)(v42 + 8), v26, v27);
                v46 = v45 * (double)*(unint64_t *)(v42 + 8) / v94;
                if (v25)
                {
                  v47 = (*(double (**)(_QWORD, unint64_t, unint64_t, uint64_t, uint64_t))(**(_QWORD **)(a3 + 8 * v36) + 56))(*(_QWORD *)(a3 + 8 * v36), v26, v27, v92, v91);
                  v48 = v88;
                  if (v14 >= 2)
                    v48 = (*(float (**)(Ngram *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)this + 480))(this, v105[0], v102 - 4 * v101[0], v87);
                  v49 = 0.0;
                  if (v48 != -INFINITY)
                    v49 = exp(v48 * 2.30258509);
                  v46 = v46 + v47 * v49;
                }
                v44 = log10(v46);
                if (v45 != 0.0)
                {
                  v39 = v39 + v46;
                  if (!*((_BYTE *)this + 8) && (Debug::debugAll > 3 || *((_DWORD *)this + 3) >= 4u))
                  {
                    v50 = (_QWORD *)(*(uint64_t (**)(Ngram *))(*(_QWORD *)this + 24))(this);
                    v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"CONTEXT ", 8);
                    (*(void (**)(_QWORD))(**((_QWORD **)this + 3) + 328))(*((_QWORD *)this + 3));
                    v52 = operator<<(v51, (_DWORD *)(v102 - 4 * v101[0]));
                    v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" WORD ", 6);
                    v54 = (const char *)(*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3), v105[0]);
                    v55 = strlen(v54);
                    v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)v54, v55);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)" NUMER ", 7);
                    v57 = (_QWORD *)std::ostream::operator<<();
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)" DENOM ", 7);
                    v58 = (_QWORD *)std::ostream::operator<<();
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" DISCOUNT ", 10);
                    std::ostream::operator<<();
                    if (v25)
                    {
                      v59 = (_QWORD *)(*(uint64_t (**)(Ngram *))(*(_QWORD *)this + 24))(this);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)" LOW ", 5);
                      v60 = (_QWORD *)std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)" LOLPROB ", 9);
                      std::ostream::operator<<();
                    }
                    v61 = (_QWORD *)(*(uint64_t (**)(Ngram *))(*(_QWORD *)this + 24))(this);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)" LPROB ", 7);
                    v62 = (_QWORD *)std::ostream::operator<<();
                    std::ios_base::getloc((const std::ios_base *)((char *)v62 + *(_QWORD *)(*v62 - 24)));
                    v63 = std::locale::use_facet(&v104, MEMORY[0x1E0DE4A90]);
                    ((void (*)(const std::locale::facet *, uint64_t))v63->__vftable[2].~facet_0)(v63, 10);
                    std::locale::~locale(&v104);
                    std::ostream::put();
                    std::ostream::flush();
                  }
                }
                if (v45 == 0.0)
                {
                  ++v83;
                  Ngram::removeProb(this, v105[0], (unsigned int *)(v102 - 4 * v101[0]));
                  a3 = v89;
                }
                else
                {
                  a3 = v89;
LABEL_64:
                  *(float *)Ngram::insertProb(this, v105[0], (unsigned int *)(v102 - 4 * v101[0])) = v44;
                }
              }
            }
          }
          if (v39 > v13)
            v64 = v38;
          else
            v64 = 0;
          if (v64 == 1)
          {
            if (!*((_BYTE *)this + 8) && (Debug::debugAll || *((_DWORD *)this + 3)))
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"warning: ", 9);
              v66 = (_QWORD *)std::ostream::operator<<();
              v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)" backoff probability mass left for \"", 36);
              (*(void (**)(_QWORD))(**((_QWORD **)this + 3) + 328))(*((_QWORD *)this + 3));
              v68 = operator<<(v67, (_DWORD *)(v102 - 4 * v101[0]));
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"\" -- ", 5);
              if (v25)
              {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"disabling interpolation\n", 24);
                v25 = 0;
                continue;
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"incrementing denominator\n", 25);
            }
            else
            {
              v65 = !v25;
              v25 = 0;
              if (!v65)
                continue;
            }
            if (a4)
            {
              v25 = 0;
              v69 = vcvtpd_u64_f64((v39 - v13) * v94 / v13);
              if (v69 <= 1)
                v69 = 1;
              v26 += v69;
            }
            else
            {
              v25 = 0;
              ++v26;
            }
            goto LABEL_49;
          }
          break;
        }
        Vocab::reverse(v102 - 4 * v101[0], v41);
        v15 = v36;
LABEL_103:
        TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)v95);
      }
      if (!*((_BYTE *)this + 8) && (Debug::debugAll || *((_DWORD *)this + 3)))
      {
        if (v82)
        {
          v70 = (_QWORD *)(*(uint64_t (**)(Ngram *))(*(_QWORD *)this + 24))(this);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"discarded ", 10);
          v71 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)" ", 1);
          v72 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"-gram contexts containing pseudo-events\n", 40);
        }
        if (v93)
        {
          v73 = (_QWORD *)(*(uint64_t (**)(Ngram *))(*(_QWORD *)this + 24))(this);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"discarded ", 10);
          v74 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)" ", 1);
          v75 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"-gram probs predicting pseudo-events\n", 37);
        }
        if (v83)
        {
          v76 = (_QWORD *)(*(uint64_t (**)(Ngram *))(*(_QWORD *)this + 24))(this);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"discarded ", 10);
          v77 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)" ", 1);
          v78 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"-gram probs discounted to zero\n", 31);
        }
      }
      (*(void (**)(Ngram *, uint64_t))(*(_QWORD *)this + 512))(this, v15);
      TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)v100);
      v14 = (v14 + 1);
    }
    while (v14 <= *((_DWORD *)this + 44));
  }
  (*(void (**)(Ngram *))(*(_QWORD *)this + 496))(this);
  if (v102)
    MEMORY[0x1AF44D160](v102, 0x1000C8052888210);
  return 1;
}

void sub_1AD94A1A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  _Unwind_Resume(exception_object);
}

uint64_t Ngram::estimate2<double>(Ngram *this, uint64_t a2, uint64_t a3, int a4)
{
  int v6;
  unsigned int v7;
  uint64_t Trie;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  float v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  double v29;
  unsigned int *v30;
  uint64_t v31;
  unsigned int v32;
  double v33;
  uint64_t v34;
  double v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  int v39;
  double v40;
  uint64_t v41;
  unsigned int *v42;
  uint64_t v43;
  unsigned int v44;
  float v45;
  double v46;
  double v47;
  double v48;
  double v49;
  float v50;
  double v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  const char *v56;
  size_t v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  const std::locale::facet *v65;
  int v66;
  BOOL v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  double v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  int v84;
  int v85;
  unint64_t v87;
  _DWORD **v88;
  unsigned int v89;
  float v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  double v95;
  _DWORD **v96[2];
  int v97;
  uint64_t v98;
  _QWORD v99[5];
  char v100;
  unsigned int v101[20];
  _DWORD v102[2];
  uint64_t v103;
  int v104;
  std::locale v105;
  unsigned int v106[2];
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  v6 = *((_DWORD *)this + 44);
  v102[0] = 0;
  v102[1] = v6;
  v103 = 0;
  v104 = 0;
  if (v6)
    Array<unsigned int>::alloc((uint64_t)v102, v6 - 1, 0);
  v7 = Ngram::vocabSize((const Vocab **)this);
  Ngram::clear(this);
  v101[0] = -1;
  LOBYTE(v96[0]) = 0;
  Trie = Trie<unsigned int,BOnode>::findTrie((_DWORD **)this + 19, v101, v96);
  v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 72))(*((_QWORD *)this + 3));
  v10 = Trie + 8;
  if (!Trie)
    v10 = 0;
  LHash<unsigned int,float>::setsize((_QWORD *)(v10 + 8), v9);
  if (*(_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 104))(*((_QWORD *)this + 3)) != -1)
  {
    *(_DWORD *)(v103 - 4 * v102[0]) = -1;
    v11 = (unsigned int *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 104))(*((_QWORD *)this + 3));
    *(_DWORD *)Ngram::insertProb(this, *v11, (unsigned int *)(v103 - 4 * v102[0])) = -8388608;
  }
  if (*((_DWORD *)this + 44))
  {
    v88 = (_DWORD **)(a2 + 160);
    v12 = log10((double)v7);
    v87 = v7;
    v90 = -v12;
    v13 = 1.0 - 0.000003;
    v14 = 1;
    do
    {
      v15 = (v14 - 1);
      if (a3
        && (v16 = *(_QWORD *)(a3 + 8 * v15)) != 0
        && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 72))(v16))
      {
        v81 = *(_QWORD *)(a3 + 8 * v15);
        if (v81)
          (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v81 + 120))(v81, a2, v14, *((unsigned int *)this + 44));
        v93 = 0;
      }
      else
      {
        v93 = 1;
      }
      TrieIter2<unsigned int,double>::TrieIter2((uint64_t)v101, v88, (_DWORD *)(v103 - 4 * v102[0]), v14 - 1, 0);
      v84 = 0;
      v85 = 0;
      v94 = 0;
      v89 = v14 - 2;
      while (1)
      {
        v17 = TrieIter2<unsigned int,double>::next((uint64_t)v101);
        if (!v17)
          break;
        if (v14 >= 2
          && (v18 = *(_DWORD *)(v103 + 4 * (int)(v89 - v102[0])),
              v18 == *(_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 120))(*((_QWORD *)this + 3)))
          || (v19 = *((_QWORD *)this + 3),
              v20 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 88))(v19),
              (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 176))(v19, *v20))
          && (v21 = v103,
              v22 = v102[0],
              v23 = (unsigned int *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 88))(*((_QWORD *)this + 3)),
              Vocab::contains((Vocab *)(v21 - 4 * v22), (const unsigned int *)*v23)))
        {
          ++v84;
          continue;
        }
        v25 = a3 && (v24 = *(_QWORD *)(a3 + 8 * v15)) != 0 && *(_BYTE *)(v24 + 24) != 0;
        LOBYTE(v105.__locale_) = 0;
        v96[0] = (_DWORD **)Trie<unsigned int,unsigned long>::insertTrie(v88, (unsigned int *)(v103 - 4 * v102[0]), &v105);
        v96[1] = (_DWORD **)v106;
        v97 = 1;
        v98 = 0;
        LHashIter<unsigned int,Trie<unsigned int,double>>::LHashIter((uint64_t)v99, v96[0], 0);
        v26 = v15;
        v27 = a3;
        v28 = 0;
        v91 = 0;
        v92 = 0;
        v99[4] = 0;
        v100 = 0;
        v29 = 0.0;
        v106[1] = -1;
        while (1)
        {
          v31 = TrieIter2<unsigned int,double>::next((uint64_t)v96);
          if (!v31)
            break;
          if (!(*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)this + 3) + 176))(*((_QWORD *)this + 3), v106[0])&& ((_DWORD)v14 != 1|| !(*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)this + 3) + 224))(*((_QWORD *)this + 3), v106[0])))
          {
            if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)this + 3) + 224))(*((_QWORD *)this + 3), v106[0]))
            {
              v32 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 3) + 232))(*((_QWORD *)this + 3), v106[0]);
              if (v32)
              {
                v35 = *(double *)(v31 + 8);
                v29 = v29 + (double)v32 * v35;
                v36 = (unint64_t)v35;
                v28 += (unint64_t)v35;
                if (v32 == 1)
                  v37 = 0;
                else
                  v37 = (unint64_t)v35;
                if (v32 <= 2)
                  v36 = 0;
                v91 += v36;
                v92 += v37;
              }
              else
              {
                v29 = v29 + *(double *)(v31 + 8);
                ++v28;
              }
            }
            else
            {
              v33 = *(double *)(v31 + 8);
              v29 = v29 + v33;
              ++v28;
              v34 = v92;
              if (v33 >= 2.0)
                v34 = v92 + 1;
              v92 = v34;
              if (v33 >= 3.0)
                ++v91;
            }
          }
        }
        if (v14 >= 2 && *(_BYTE *)(*(uint64_t (**)(Ngram *))(*(_QWORD *)this + 352))(this))
          v29 = *(double *)(v17 + 8);
        if (v29 == 0.0)
          goto LABEL_100;
        Vocab::reverse(v103 - 4 * v102[0], v30);
LABEL_46:
        v38 = v93 ^ 1;
        if (v29 <= 0.0)
          v38 = 0;
        if (v28 < v87)
          v39 = v38;
        else
          v39 = 0;
        v95 = v29;
        while (2)
        {
          TrieIter2<unsigned int,double>::init((uint64_t)v96);
          v40 = 0.0;
          while (1)
          {
            v41 = TrieIter2<unsigned int,double>::next((uint64_t)v96);
            v43 = v41;
            if (!v41)
              break;
            if (v14 < 2 || *(double *)(v41 + 8) != 0.0)
            {
              if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)this + 3) + 176))(*((_QWORD *)this + 3), v106[0])|| (*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)this + 3) + 224))(*((_QWORD *)this + 3), v106[0]))
              {
                if (v14 <= 1)
                {
                  v44 = v106[0];
                  if (v44 != *(_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 88))(*((_QWORD *)this + 3))
                    && !(*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)this + 3) + 224))(*((_QWORD *)this + 3), v106[0]))
                  {
                    v45 = -INFINITY;
                    goto LABEL_62;
                  }
                }
                ++v94;
              }
              else
              {
                v46 = 1.0;
                if ((v93 & 1) == 0)
                  v46 = (*(double (**)(_QWORD, unint64_t, double, double))(**(_QWORD **)(v27 + 8 * v26)
                                                                                           + 48))(*(_QWORD *)(v27 + 8 * v26), v28, *(double *)(v43 + 8), v29);
                v47 = v29;
                v48 = v46 * *(double *)(v43 + 8) / v29;
                if (v25)
                {
                  v49 = (*(double (**)(_QWORD, unint64_t, uint64_t, uint64_t, double))(**(_QWORD **)(v27 + 8 * v26) + 64))(*(_QWORD *)(v27 + 8 * v26), v28, v92, v91, v47);
                  v50 = v90;
                  if (v14 >= 2)
                    v50 = (*(float (**)(Ngram *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)this + 480))(this, v106[0], v103 - 4 * v102[0], v89);
                  v51 = 0.0;
                  if (v50 != -INFINITY)
                    v51 = exp(v50 * 2.30258509);
                  v48 = v48 + v49 * v51;
                }
                v45 = log10(v48);
                if (v46 != 0.0)
                {
                  v40 = v40 + v48;
                  if (!*((_BYTE *)this + 8) && (Debug::debugAll > 3 || *((_DWORD *)this + 3) >= 4u))
                  {
                    v52 = (_QWORD *)(*(uint64_t (**)(Ngram *))(*(_QWORD *)this + 24))(this);
                    v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"CONTEXT ", 8);
                    (*(void (**)(_QWORD))(**((_QWORD **)this + 3) + 328))(*((_QWORD *)this + 3));
                    v54 = operator<<(v53, (_DWORD *)(v103 - 4 * v102[0]));
                    v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)" WORD ", 6);
                    v56 = (const char *)(*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3), v106[0]);
                    v57 = strlen(v56);
                    v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)v56, v57);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" NUMER ", 7);
                    v59 = (_QWORD *)std::ostream::operator<<();
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)" DENOM ", 7);
                    v60 = (_QWORD *)std::ostream::operator<<();
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)" DISCOUNT ", 10);
                    std::ostream::operator<<();
                    if (v25)
                    {
                      v61 = (_QWORD *)(*(uint64_t (**)(Ngram *))(*(_QWORD *)this + 24))(this);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)" LOW ", 5);
                      v62 = (_QWORD *)std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)" LOLPROB ", 9);
                      std::ostream::operator<<();
                    }
                    v63 = (_QWORD *)(*(uint64_t (**)(Ngram *))(*(_QWORD *)this + 24))(this);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)" LPROB ", 7);
                    v64 = (_QWORD *)std::ostream::operator<<();
                    std::ios_base::getloc((const std::ios_base *)((char *)v64 + *(_QWORD *)(*v64 - 24)));
                    v65 = std::locale::use_facet(&v105, MEMORY[0x1E0DE4A90]);
                    ((void (*)(const std::locale::facet *, uint64_t))v65->__vftable[2].~facet_0)(v65, 10);
                    std::locale::~locale(&v105);
                    std::ostream::put();
                    std::ostream::flush();
                  }
                }
                if (v46 == 0.0)
                {
                  ++v85;
                  Ngram::removeProb(this, v106[0], (unsigned int *)(v103 - 4 * v102[0]));
                  v29 = v95;
                }
                else
                {
                  v29 = v95;
LABEL_62:
                  *(float *)Ngram::insertProb(this, v106[0], (unsigned int *)(v103 - 4 * v102[0])) = v45;
                }
              }
            }
          }
          if (v40 > v13)
            v66 = v39;
          else
            v66 = 0;
          if (v66 == 1)
          {
            if (!*((_BYTE *)this + 8) && (Debug::debugAll || *((_DWORD *)this + 3)))
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"warning: ", 9);
              v68 = (_QWORD *)std::ostream::operator<<();
              v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)" backoff probability mass left for \"", 36);
              (*(void (**)(_QWORD))(**((_QWORD **)this + 3) + 328))(*((_QWORD *)this + 3));
              v70 = operator<<(v69, (_DWORD *)(v103 - 4 * v102[0]));
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"\" -- ", 5);
              if (v25)
              {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"disabling interpolation\n", 24);
                v25 = 0;
                continue;
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"incrementing denominator\n", 25);
            }
            else
            {
              v67 = !v25;
              v25 = 0;
              if (!v67)
                continue;
            }
            if (a4)
              v71 = fmax(ceil(v29 * (v40 - v13) / v13), 1.0);
            else
              v71 = 1.0;
            v25 = 0;
            v29 = v29 + v71;
            goto LABEL_46;
          }
          break;
        }
        Vocab::reverse(v103 - 4 * v102[0], v42);
LABEL_100:
        TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)v96);
        a3 = v27;
        v15 = v26;
      }
      if (!*((_BYTE *)this + 8) && (Debug::debugAll || *((_DWORD *)this + 3)))
      {
        if (v84)
        {
          v72 = (_QWORD *)(*(uint64_t (**)(Ngram *))(*(_QWORD *)this + 24))(this);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"discarded ", 10);
          v73 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)" ", 1);
          v74 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"-gram contexts containing pseudo-events\n", 40);
        }
        if (v94)
        {
          v75 = (_QWORD *)(*(uint64_t (**)(Ngram *))(*(_QWORD *)this + 24))(this);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"discarded ", 10);
          v76 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)" ", 1);
          v77 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"-gram probs predicting pseudo-events\n", 37);
        }
        if (v85)
        {
          v78 = (_QWORD *)(*(uint64_t (**)(Ngram *))(*(_QWORD *)this + 24))(this);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"discarded ", 10);
          v79 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)" ", 1);
          v80 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"-gram probs discounted to zero\n", 31);
        }
      }
      (*(void (**)(Ngram *, uint64_t))(*(_QWORD *)this + 512))(this, v15);
      TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)v101);
      v14 = (v14 + 1);
    }
    while (v14 <= *((_DWORD *)this + 44));
  }
  (*(void (**)(Ngram *))(*(_QWORD *)this + 496))(this);
  if (v103)
    MEMORY[0x1AF44D160](v103, 0x1000C8052888210);
  return 1;
}

void sub_1AD94ADB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _Unwind_Resume(exception_object);
}

uint64_t Ngram::mixProbs(Ngram *this, Ngram *a2, double a3)
{
  int v5;
  int v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  float *v11;
  float *v12;
  float v13;
  float v14;
  double v15;
  double v16;
  float v17;
  uint64_t v18;
  float *v19;
  float v20;
  float v21;
  double v22;
  double v23;
  float *inserted;
  float v25;
  BOOL v26;
  uint64_t result;
  unsigned int v28;
  _DWORD v29[6];
  uint64_t v30;
  _BYTE v31[24];
  uint64_t v32;
  _BYTE v33[80];
  int v34;
  _BYTE v35[12];
  int v36;

  v5 = *((_DWORD *)this + 44);
  *(_DWORD *)&v35[8] = 0;
  v36 = 0;
  v34 = 0;
  *(_QWORD *)v35 = (v5 + 1);
  if (v5 != -1)
  {
    Array<unsigned int>::alloc((uint64_t)&v34, v5, 0);
    v7 = *((_DWORD *)this + 44);
    v8 = (v7 - 1);
    if (v7 - 1 >= 0)
    {
      v9 = 1.0 - a3;
      do
      {
        TrieIter2<unsigned int,BOnode>::TrieIter2((uint64_t)v33, (_DWORD **)this + 19, (_DWORD *)(*(_QWORD *)&v35[4] - 4 * v34), v8, 0);
        while (1)
        {
          v10 = TrieIter2<unsigned int,BOnode>::next((uint64_t)v33);
          if (!v10)
            break;
          LHashIter<unsigned int,float>::LHashIter((uint64_t)v31, (_DWORD **)(v10 + 16), 0);
          v29[0] = 0;
          while (1)
          {
            v11 = (float *)LHashIter<unsigned int,float>::next((uint64_t)v31, v29);
            v12 = v11;
            if (!v11)
              break;
            v13 = *v11;
            v14 = (*(float (**)(Ngram *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a2 + 480))(a2, v29[0], *(_QWORD *)&v35[4] - 4 * v34, v8);
            v15 = 0.0;
            v16 = 0.0;
            if (v13 != -INFINITY)
              v16 = exp(v13 * 2.30258509);
            if (v14 != -INFINITY)
              v15 = exp(v14 * 2.30258509);
            v17 = log10(v9 * v15 + a3 * v16);
            *v12 = v17;
          }
          if (v32)
            MEMORY[0x1AF44D160](v32, 0x1000C8052888210);
        }
        TrieIter2<unsigned int,BOnode>::TrieIter2((uint64_t)v31, (_DWORD **)a2 + 19, (_DWORD *)(*(_QWORD *)&v35[4] - 4 * v34), v8, 0);
        while (1)
        {
          v18 = TrieIter2<unsigned int,BOnode>::next((uint64_t)v31);
          if (!v18)
            break;
          LHashIter<unsigned int,float>::LHashIter((uint64_t)v29, (_DWORD **)(v18 + 16), 0);
          v28 = 0;
          while (1)
          {
            v19 = (float *)LHashIter<unsigned int,float>::next((uint64_t)v29, &v28);
            if (!v19)
              break;
            if (!Ngram::findProb(this, v28, (unsigned int *)(*(_QWORD *)&v35[4] - 4 * v34)))
            {
              v20 = (*(float (**)(Ngram *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)this + 480))(this, v28, *(_QWORD *)&v35[4] - 4 * v34, v8);
              v21 = *v19;
              v22 = 0.0;
              v23 = 0.0;
              if (v20 != -INFINITY)
                v23 = exp(v20 * 2.30258509);
              if (v21 != -INFINITY)
                v22 = exp(v21 * 2.30258509);
              inserted = (float *)Ngram::insertProb(this, v28, (unsigned int *)(*(_QWORD *)&v35[4] - 4 * v34));
              v25 = log10(v9 * v22 + a3 * v23);
              *inserted = v25;
            }
          }
          if (v30)
            MEMORY[0x1AF44D160](v30, 0x1000C8052888210);
        }
        TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)v31);
        TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)v33);
        v26 = (int)v8 <= 0;
        v8 = (v8 - 1);
      }
      while (!v26);
    }
  }
  (*(void (**)(Ngram *))(*(_QWORD *)this + 416))(this);
  result = *(_QWORD *)&v35[4];
  if (*(_QWORD *)&v35[4])
    return MEMORY[0x1AF44D160](*(_QWORD *)&v35[4], 0x1000C8052888210);
  return result;
}

void sub_1AD94B16C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;
  uint64_t v26;

  v26 = *(_QWORD *)(v24 + 8);
  if (v26)
    MEMORY[0x1AF44D160](v26, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

void Ngram::mixProbs(Vocab **this, Ngram *a2, Ngram *a3, double a4)
{
  _QWORD v5[37];

  BayesMix::BayesMix((BayesMix *)v5, this[3], a2, a3, 0, a4, 1.0);
  v5[0] = &unk_1E5D16358;
  (*((void (**)(Vocab **, _QWORD *))*this + 51))(this, v5);
  BayesMix::~BayesMix((BayesMix *)v5);
}

void sub_1AD94B27C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  BayesMix::~BayesMix((BayesMix *)va);
  _Unwind_Resume(a1);
}

uint64_t Ngram::mixProbs(Ngram *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  uint64_t v9;
  uint64_t v10;
  int *Priors;
  float *v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  double v17;
  _QWORD *v18;
  float v19;
  double v20;
  float *inserted;
  float v22;
  uint64_t result;
  unsigned int v24;
  _BYTE v25[24];
  uint64_t v26;
  _BYTE v27[80];
  int v28;
  _BYTE v29[12];
  int v30;

  v4 = *((_DWORD *)a1 + 44);
  *(_DWORD *)&v29[8] = 0;
  v30 = 0;
  v28 = 0;
  *(_QWORD *)v29 = (v4 + 1);
  if (v4 == -1)
  {
    v5 = -1;
  }
  else
  {
    Array<unsigned int>::alloc((uint64_t)&v28, v4, 0);
    v5 = *((_DWORD *)a1 + 44);
    if (!v5)
      goto LABEL_30;
  }
  v6 = 0;
  v7 = *(unsigned int *)(a2 + 152);
  do
  {
    if ((_DWORD)v7)
    {
      for (i = 0; i != v7; ++i)
      {
        if (i >= *(unsigned int *)(a2 + 152))
          v9 = 0;
        else
          v9 = *(_QWORD *)Array<LM *>::operator[]((int *)(a2 + 208), i);
        TrieIter2<unsigned int,BOnode>::TrieIter2((uint64_t)v27, (_DWORD **)(v9 + 152), (_DWORD *)(*(_QWORD *)&v29[4] - 4 * v28), v6, 0);
        while (1)
        {
          v10 = TrieIter2<unsigned int,BOnode>::next((uint64_t)v27);
          if (!v10)
            break;
          Priors = BayesMix::findPriors((BayesMix *)a2, (Vocab *)(*(_QWORD *)&v29[4] - 4 * v28));
          LHashIter<unsigned int,float>::LHashIter((uint64_t)v25, (_DWORD **)(v10 + 16), 0);
          v24 = 0;
          while (1)
          {
            v12 = (float *)LHashIter<unsigned int,float>::next((uint64_t)v25, &v24);
            if (!v12)
              break;
            if (!i || !Ngram::findProb(a1, v24, (unsigned int *)(*(_QWORD *)&v29[4] - 4 * v28)))
            {
              v13 = *(double *)Array<double>::operator[](Priors, i);
              v14 = 0.0;
              if (*v12 != -INFINITY)
                v14 = exp(*v12 * 2.30258509);
              v15 = 0;
              v16 = v13 * v14;
              do
              {
                if (i != v15)
                {
                  v17 = *(double *)Array<double>::operator[](Priors, v15);
                  v18 = (_QWORD *)Array<LM *>::operator[]((int *)(a2 + 208), v15);
                  v19 = (*(float (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)*v18 + 480))(*v18, v24, *(_QWORD *)&v29[4] - 4 * v28, v6);
                  v20 = 0.0;
                  if (v19 != -INFINITY)
                    v20 = exp(v19 * 2.30258509);
                  v16 = v16 + v17 * v20;
                }
                ++v15;
              }
              while (v7 != v15);
              inserted = (float *)Ngram::insertProb(a1, v24, (unsigned int *)(*(_QWORD *)&v29[4] - 4 * v28));
              v22 = log10(v16);
              *inserted = v22;
            }
          }
          if (v26)
            MEMORY[0x1AF44D160](v26, 0x1000C8052888210);
        }
        TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)v27);
      }
      v5 = *((_DWORD *)a1 + 44);
    }
    v6 = (v6 + 1);
  }
  while (v6 < v5);
LABEL_30:
  (*(void (**)(Ngram *))(*(_QWORD *)a1 + 416))(a1);
  result = *(_QWORD *)&v29[4];
  if (*(_QWORD *)&v29[4])
    return MEMORY[0x1AF44D160](*(_QWORD *)&v29[4], 0x1000C8052888210);
  return result;
}

void sub_1AD94B544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a25)
    MEMORY[0x1AF44D160](a25, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t Ngram::computeBOW(_QWORD **a1, uint64_t a2, _DWORD *a3, int a4, _QWORD *a5, _QWORD *a6)
{
  float *v11;
  double v12;
  float v13;
  double v14;
  double v15;
  double v16;
  double v18;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  double v27;
  float i;
  float *v29;
  _QWORD *v30;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  const std::locale::facet *v37;
  unsigned int v38;
  _BYTE v39[24];
  uint64_t v40;
  std::locale v41;

  LHashIter<unsigned int,float>::LHashIter((uint64_t)v39, (_DWORD **)(a2 + 8), 0);
  v38 = 0;
  *a5 = 0x3FF0000000000000;
  *a6 = 0x3FF0000000000000;
  while (1)
  {
    v11 = (float *)LHashIter<unsigned int,float>::next((uint64_t)v39, &v38);
    if (!v11)
      break;
    v12 = 0.0;
    if (*v11 != -INFINITY)
      v12 = exp(*v11 * 2.30258509);
    *(double *)a5 = *(double *)a5 - v12;
    if (a4)
    {
      v13 = ((float (*)(_QWORD **, _QWORD, _DWORD *, _QWORD))(*a1)[60])(a1, v38, a3, (a4 - 1));
      v14 = 0.0;
      if (v13 != -INFINITY)
        v14 = exp(v13 * 2.30258509);
      *(double *)a6 = *(double *)a6 - v14;
    }
  }
  v15 = *(double *)a5;
  v16 = -0.000003;
  if (*(double *)a5 < 0.0 && v15 > v16)
  {
    *a5 = 0;
    v15 = 0.0;
  }
  v18 = *(double *)a6;
  if (*(double *)a6 < 0.0 && v18 > v16)
  {
    *a6 = 0;
    v15 = *(double *)a5;
    v18 = 0.0;
  }
  if (v18 < 0.000003 && v15 > 0.000003)
  {
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"BOW denominator for context \"", 29);
    (*(void (**)(_QWORD *))(*a1[3] + 328))(a1[3]);
    v26 = operator<<(v25, a3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"\" is zero; scaling probabilities to sum to 1\n",
      45);
    v27 = log10(1.0 - *(double *)a5);
    LHashIter<unsigned int,float>::init((uint64_t)v39);
    for (i = v27; ; *v29 = *v29 - i)
    {
      v29 = (float *)LHashIter<unsigned int,float>::next((uint64_t)v39, &v38);
      if (!v29)
        break;
    }
    v30 = a6;
    a6 = a5;
    goto LABEL_30;
  }
  if (v15 < 0.0)
  {
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"BOW numerator for context \"", 27);
    (*(void (**)(_QWORD *))(*a1[3] + 328))(a1[3]);
    v22 = operator<<(v21, a3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"\" is ", 5);
    v23 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" < 0\n", 5);
LABEL_26:
    v24 = 0;
    goto LABEL_32;
  }
  if (v18 > 0.0)
    goto LABEL_31;
  if (v15 > 0.000003)
  {
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"BOW denominator for context \"", 29);
    (*(void (**)(_QWORD *))(*a1[3] + 328))(a1[3]);
    v33 = operator<<(v32, a3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"\" is ", 5);
    v34 = (_QWORD *)std::ostream::operator<<();
    v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" <= 0,", 6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"numerator is ", 13);
    v36 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(_QWORD *)(*v36 - 24)));
    v37 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
    std::locale::~locale(&v41);
    std::ostream::put();
    std::ostream::flush();
    goto LABEL_26;
  }
  v30 = a5;
LABEL_30:
  *v30 = 0;
  *a6 = 0;
LABEL_31:
  v24 = 1;
LABEL_32:
  if (v40)
    MEMORY[0x1AF44D160](v40, 0x1000C8052888210);
  return v24;
}

void sub_1AD94B928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::locale a14)
{
  std::locale::~locale(&a14);
  if (a13)
    MEMORY[0x1AF44D160](a13, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

uint64_t Ngram::computeBOWs(Ngram *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  std::locale::id *v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  __n128 v11;
  long double v12;
  float v14;
  float v15;
  float v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  const std::locale::facet *v23;
  double v25;
  double v26;
  _BYTE v27[24];
  uint64_t v28;
  _BYTE v29[80];
  int v30;
  _BYTE v31[12];
  int v32;
  std::locale v33;

  *(_DWORD *)&v31[8] = 0;
  v32 = 0;
  v30 = 0;
  *(_QWORD *)v31 = (a2 + 1);
  if ((_DWORD)a2 == -1)
  {
    v4 = 0;
    v5 = 0;
  }
  else
  {
    Array<unsigned int>::alloc((uint64_t)&v30, a2, 0);
    v5 = *(_QWORD *)&v31[4];
    v4 = v30;
  }
  TrieIter2<unsigned int,BOnode>::TrieIter2((uint64_t)v29, (_DWORD **)this + 19, (_DWORD *)(v5 - 4 * v4), a2, 0);
  v6 = 1;
  v7 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    v8 = TrieIter2<unsigned int,BOnode>::next((uint64_t)v29);
    v9 = v8;
    if (!v8)
      break;
    LHashIter<unsigned int,float>::LHashIter((uint64_t)v27, (_DWORD **)(v8 + 16), 0);
    v10 = (float *)(v9 + 8);
    v25 = 0.0;
    v26 = 0.0;
    if (!(*(unsigned int (**)(Ngram *, float *, uint64_t, uint64_t, double *, double *))(*(_QWORD *)this
                                                                                                 + 464))(this, v10, *(_QWORD *)&v31[4] - 4 * v30, a2, &v26, &v25))
    {
      v6 = 0;
      v16 = -INFINITY;
LABEL_18:
      *v10 = v16;
      goto LABEL_19;
    }
    v11.n128_f64[0] = v26;
    if ((_DWORD)a2)
    {
      v12 = v25;
      if (v26 < 0.000003 && v25 < 0.000003)
      {
        v16 = 0.0;
      }
      else
      {
        v14 = log10(v26);
        v15 = log10(v12);
        v16 = v14 - v15;
      }
      goto LABEL_18;
    }
    if (v26 < 0.000003)
    {
      v26 = 0.0;
      v11.n128_u64[0] = 0;
    }
    (*(void (**)(Ngram *, uint64_t, __n128))(*(_QWORD *)this + 504))(this, *(_QWORD *)&v31[4] - 4 * v30, v11);
LABEL_19:
    if (!*((_BYTE *)this + 8) && (Debug::debugAll > 3 || *((_DWORD *)this + 3) >= 4u))
    {
      v17 = (_QWORD *)(*(uint64_t (**)(Ngram *))(*(_QWORD *)this + 24))(this);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"CONTEXT ", 8);
      (*(void (**)(_QWORD))(**((_QWORD **)this + 3) + 328))(*((_QWORD *)this + 3));
      v19 = operator<<(v18, (_DWORD *)(*(_QWORD *)&v31[4] - 4 * v30));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" numerator ", 11);
      v20 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" denominator ", 13);
      v21 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" BOW ", 5);
      v22 = (_QWORD *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(_QWORD *)(*v22 - 24)));
      v23 = std::locale::use_facet(&v33, v7);
      ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
      std::locale::~locale(&v33);
      std::ostream::put();
      std::ostream::flush();
    }
    if (v28)
      MEMORY[0x1AF44D160](v28, 0x1000C8052888210);
  }
  TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)v29);
  if (*(_QWORD *)&v31[4])
    MEMORY[0x1AF44D160](*(_QWORD *)&v31[4], 0x1000C8052888210);
  return v6;
}

void sub_1AD94BC7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a27)
    MEMORY[0x1AF44D160](a27, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

_DWORD *Ngram::recomputeBOWs(_DWORD *this)
{
  _DWORD *v1;
  uint64_t v2;

  if (this[44])
  {
    v1 = this;
    v2 = 0;
    do
    {
      this = (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v1 + 512))(v1, v2);
      v2 = (v2 + 1);
    }
    while (v2 < v1[44]);
  }
  return this;
}

uint64_t Ngram::pruneProbs(uint64_t a1, int a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  double v23;
  int v24;
  int v25;
  float *v26;
  float v27;
  double v28;
  float v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  float v38;
  float v39;
  double v40;
  _BOOL4 v41;
  double v42;
  uint64_t v43;
  uint64_t Trie;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  const char **v48;
  size_t v49;
  unsigned int v50;
  char **v51;
  void *v52;
  unint64_t v53;
  size_t v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  void *v61;
  MStringTokUtil *v62;
  int v63;
  __n128 v64;
  _BOOL4 v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  const char *v70;
  size_t v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  const std::locale::facet *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t result;
  _BYTE v86[4];
  unsigned int v87;
  uint64_t v88;
  unsigned int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int **v93;
  unsigned int *v94;
  double v95;
  int v96;
  float v97;
  _BYTE *v98;
  double v99;
  double v100;
  unsigned int v101;
  double v102;
  float v103;
  double v104;
  double v105;
  int v106;
  MStringTokUtil *v107;
  unsigned int v108;
  _BYTE v109[24];
  uint64_t v110;
  double v111;
  double v112;
  _BYTE v113[52];
  int v114;
  _BYTE v115[12];
  int v116;
  std::locale v117;
  uint64_t v118;

  v95 = a6;
  v10 = a1;
  v118 = *MEMORY[0x1E0C80C00];
  v11 = *(_DWORD *)(a1 + 176);
  *(_DWORD *)&v115[8] = 0;
  v116 = 0;
  v114 = 0;
  *(_QWORD *)v115 = (v11 + 2);
  if (v11 == -2)
  {
    v13 = 0;
    v12 = 0;
    v14 = -2;
  }
  else
  {
    Array<unsigned int>::alloc((uint64_t)&v114, v11 + 1, 0);
    v12 = *(_QWORD *)&v115[4];
    v13 = v114;
    v14 = *(_DWORD *)(v10 + 176);
  }
  v15 = (v14 - 1);
  if (v14 != 1)
  {
    v87 = a2 - 1;
    if (v15 >= a2 - 1)
    {
      v16 = (unsigned int *)(v12 + 4 * (1 - v13));
      v17 = (unsigned int **)(v10 + 152);
      v99 = -INFINITY;
      if (a3)
        v18 = a3;
      else
        v18 = v10;
      v88 = v18;
      v105 = 2.30258509;
      v93 = (unsigned int **)(v10 + 152);
      v91 = v10;
      v92 = a4;
      v94 = v16;
      v100 = a5;
      do
      {
        v19 = v15;
        TrieIter2<unsigned int,BOnode>::TrieIter2((uint64_t)v113, v17, v16, v15, 0);
        v90 = 0;
        v101 = v14 - 2;
        v96 = v14;
        v89 = v19;
        while (1)
        {
          v20 = TrieIter2<unsigned int,BOnode>::next((uint64_t)v113);
          v21 = v20;
          if (!v20)
            break;
          v103 = *(float *)(v20 + 8);
          v112 = 0.0;
          v111 = 0.0;
          if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *, uint64_t, double *, double *))(*(_QWORD *)v10 + 464))(v10, v20 + 8, v16, v19, &v112, &v111))
          {
            v97 = (*(float (**)(uint64_t, unsigned int *, uint64_t))(*(_QWORD *)v88 + 104))(v88, v16, v19);
            LHashIter<unsigned int,float>::LHashIter((uint64_t)v109, (_DWORD **)(v21 + 16), 0);
            v108 = 0;
            v22 = v97;
            v23 = exp(v97 * v105);
            if (v22 == -INFINITY)
              v23 = 0.0;
            v102 = -v23;
            v24 = 1;
            while (1)
            {
              v25 = v24;
              v26 = (float *)LHashIter<unsigned int,float>::next((uint64_t)v109, &v108);
              if (!v26)
                break;
              v27 = (*(float (**)(uint64_t, _QWORD, unsigned int *, _QWORD))(*(_QWORD *)v10 + 480))(v10, v108, v16, v101);
              v28 = v112;
              v29 = *v26;
              v30 = *v26;
              v31 = 0.0;
              v32 = 0.0;
              if (*v26 != -INFINITY)
                v32 = exp(v30 * v105);
              v104 = v30;
              v33 = log10(v28 + v32);
              v34 = v111;
              if (v27 != -INFINITY)
                v31 = exp(v27 * v105);
              v35 = log10(v34 + v31);
              v36 = 0.0;
              v37 = 0.0;
              if (v29 != -INFINITY)
                v37 = exp(v104 * v105);
              LODWORD(v104) = v25;
              v38 = v33;
              v39 = v35;
              v40 = (v28 * (float)((float)(v38 - v39) - v103) + v37 * (float)((float)(v27 + (float)(v38 - v39)) - v29))
                  * v102;
              if (v40 != v99)
                v36 = exp(v40 * v105);
              v41 = 0;
              v42 = v36 + -1.0;
              if (v100 > 0.0 && v42 < v100)
              {
                v43 = *(_QWORD *)&v115[4];
                *(_DWORD *)(*(_QWORD *)&v115[4] - 4 * v114) = v108;
                LOBYTE(v117.__locale_) = 0;
                Trie = Trie<unsigned int,BOnode>::findTrie(v17, (unsigned int *)(v43 - 4 * v114), &v117);
                v41 = Trie == 0;
                if (!Trie)
                {
                  if (a4)
                  {
                    MEMORY[0x1E0C80A78](0, v45);
                    v48 = (const char **)&v86[-v47];
                    if (v46 >= 0x200)
                      v49 = 512;
                    else
                      v49 = v46;
                    bzero(&v86[-v47], v49);
                    v50 = (*(uint64_t (**)(_QWORD, uint64_t, const char **, _QWORD))(**(_QWORD **)(v10 + 24)
                                                                                            + 248))(*(_QWORD *)(v10 + 24), *(_QWORD *)&v115[4] - 4 * v114, v48, (*(_DWORD *)(v10 + 176) + 2));
                    v52 = (void *)operator new[]();
                    v98 = v86;
                    if (v50)
                    {
                      v53 = 0;
                      LODWORD(v54) = 0;
                      v55 = v50 - 1;
                      v56 = 1000;
                      v57 = v50;
                      do
                      {
                        if (strlen(v48[v53]) + v54 + 1 > v56 - 1)
                        {
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"warning: the size of this n-gram exceeds ", 41);
                          v58 = (_QWORD *)std::ostream::operator<<();
                          v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" characters (increasing buffer size...): ", 41);
                          v60 = operator<<(v59, v48);
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"\n", 1);
                          v61 = (void *)operator new[]();
                          memcpy(v61, v52, v56 & 0x7FFFFFFF);
                          if (v52)
                            MEMORY[0x1AF44D160](v52, 0x1000C8077774924);
                          v56 *= 2;
                          v52 = v61;
                        }
                        strcpy((char *)v52 + v54, v48[v53]);
                        v54 = strlen(v48[v53]) + v54;
                        if (v53 < v55)
                        {
                          *((_BYTE *)v52 + v54) = 32;
                          LODWORD(v54) = v54 + 1;
                        }
                        ++v53;
                      }
                      while (v57 != v53);
                    }
                    v117.__locale_ = 0;
                    v107 = 0;
                    v62 = MStringTokUtil::strtok_r((MStringTokUtil *)v52, "\t\r\n", (char *)&v117, v51);
                    v16 = v94;
                    v17 = v93;
                    v107 = v62;
                    v106 = 0;
                    a4 = v92;
                    v63 = (*(uint64_t (**)(uint64_t, MStringTokUtil **, int *, uint64_t))(*(_QWORD *)v92 + 288))(v92, &v107, &v106, 1);
                    v64.n128_f64[0] = v95;
                    v65 = v95 > 0.0;
                    if (v42 >= v95)
                      v65 = 0;
                    if (v63)
                      v41 = v65;
                    else
                      v41 = 1;
                    if (v52)
                      MEMORY[0x1AF44D160](v52, 0x1000C8077774924, v64);
                    v10 = v91;
                  }
                }
              }
              if (!*(_BYTE *)(v10 + 8) && (Debug::debugAll > 3 || *(_DWORD *)(v10 + 12) >= 4u))
              {
                v66 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
                v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"CONTEXT ", 8);
                (*(void (**)(_QWORD))(**(_QWORD **)(v10 + 24) + 328))(*(_QWORD *)(v10 + 24));
                v68 = operator<<(v67, v16);
                v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)" WORD ", 6);
                v70 = (const char *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v10 + 24) + 32))(*(_QWORD *)(v10 + 24), v108);
                v71 = strlen(v70);
                v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)v70, v71);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)" CONTEXTPROB ", 13);
                v73 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)" OLDPROB ", 9);
                v74 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)" NEWPROB ", 9);
                v75 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)" DELTA-H ", 9);
                v76 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)" DELTA-LOGP ", 12);
                v77 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)" PPL-CHANGE ", 12);
                v78 = (_QWORD *)std::ostream::operator<<();
                v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)" PRUNED ", 8);
                LOBYTE(v117.__locale_) = v41;
                v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)&v117, 1);
                std::ios_base::getloc((const std::ios_base *)((char *)v80 + *(_QWORD *)(*v80 - 24)));
                v81 = std::locale::use_facet(&v117, MEMORY[0x1E0DE4A90]);
                ((void (*)(const std::locale::facet *, uint64_t))v81->__vftable[2].~facet_0)(v81, 10);
                std::locale::~locale(&v117);
                std::ostream::put();
                std::ostream::flush();
              }
              v24 = 0;
              if (v41)
              {
                Ngram::removeProb((Ngram *)v10, v108, v16);
                ++v90;
                v24 = LODWORD(v104);
              }
            }
            v19 = v89;
            if (v25 && !Trie<unsigned int,BOnode>::numEntries(v17, v16))
              Trie<unsigned int,BOnode>::removeTrie(v17, v16, 0);
            if (v110)
              MEMORY[0x1AF44D160](v110, 0x1000C8052888210);
          }
        }
        if (!*(_BYTE *)(v10 + 8) && (Debug::debugAll || *(_DWORD *)(v10 + 12)) && v90)
        {
          v82 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"pruned ", 7);
          v83 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)" ", 1);
          v84 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"-grams\n", 7);
        }
        TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)v113);
        v15 = (v19 - 1);
        if ((_DWORD)v19 == 1)
          break;
        v14 = v19;
      }
      while (v15 >= v87);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 416))(v10);
  result = *(_QWORD *)&v115[4];
  if (*(_QWORD *)&v115[4])
    return MEMORY[0x1AF44D160](*(_QWORD *)&v115[4], 0x1000C8052888210);
  return result;
}

void sub_1AD94C708(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t Ngram::pruneProbs(Ngram *this, int *a2, int a3, LM *a4)
{
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  Ngram *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  float *v19;
  float v20;
  double v21;
  float v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  float v31;
  float v32;
  double v33;
  uint64_t v34;
  double v35;
  _QWORD *v36;
  std::locale::__imp *locale;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  void *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  const char *v46;
  size_t v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  const std::locale::facet *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  const char *v64;
  size_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  const std::locale::facet *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t result;
  unsigned int v74;
  uint64_t v76;
  Ngram *v77;
  unsigned int v78;
  float v79;
  unint64_t v80;
  double v81;
  float v82;
  std::locale v83;
  unsigned int v84;
  void *__p;
  _BYTE *v86;
  uint64_t v87;
  unsigned int v88;
  _BYTE v89[24];
  uint64_t v90;
  double v91;
  double v92;
  void **v93[10];
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  int v97;
  _BYTE v98[12];
  int v99;
  uint64_t (*v100[2])(uint64_t *, uint64_t *);

  v7 = *((_DWORD *)this + 44);
  *(_DWORD *)&v98[8] = 0;
  v99 = 0;
  v8 = v7 + 2;
  v97 = 0;
  *(_QWORD *)v98 = (v7 + 2);
  if (v7 == -2)
  {
    v9 = 0;
    v10 = 4294967294;
  }
  else
  {
    Array<unsigned int>::alloc((uint64_t)&v97, v7 + 1, 0);
    v9 = *(_QWORD *)&v98[4];
    v8 = v97;
    v10 = *((unsigned int *)this + 44);
  }
  v11 = (v10 - 1);
  if ((_DWORD)v10 != 1)
  {
    v74 = a3 - 1;
    if (v11 >= a3 - 1)
    {
      v12 = (_DWORD *)(v9 + 4 * (1 - v8));
      if (a4)
        v13 = a4;
      else
        v13 = this;
      v77 = v13;
      do
      {
        v14 = (*(uint64_t (**)(Ngram *, uint64_t))(*(_QWORD *)this + 456))(this, v10);
        v15 = a2[v10];
        v94 = 0;
        v95 = 0;
        v96 = 0;
        v78 = v11;
        TrieIter2<unsigned int,BOnode>::TrieIter2((uint64_t)v93, (_DWORD **)this + 19, v12, v11, 0);
        v80 = (v14 - v15) & ~((v14 - v15) >> 31);
        v76 = v11;
        while (1)
        {
          v16 = TrieIter2<unsigned int,BOnode>::next((uint64_t)v93);
          v17 = v16;
          if (!v16)
            break;
          v82 = *(float *)(v16 + 8);
          v91 = 0.0;
          v92 = 0.0;
          if ((*(unsigned int (**)(Ngram *, uint64_t, _DWORD *, _QWORD, double *, double *))(*(_QWORD *)this + 464))(this, v16 + 8, v12, v11, &v92, &v91))
          {
            v79 = (*(float (**)(Ngram *, _DWORD *, _QWORD))(*(_QWORD *)v77 + 104))(v77, v12, v11);
            LHashIter<unsigned int,float>::LHashIter((uint64_t)v89, (_DWORD **)(v17 + 16), 0);
            v88 = 0;
            v18 = exp(v79 * 2.30258509);
            if (v79 == -INFINITY)
              v18 = 0.0;
            v81 = -v18;
            while (1)
            {
              v19 = (float *)LHashIter<unsigned int,float>::next((uint64_t)v89, &v88);
              if (!v19)
                break;
              v20 = (*(float (**)(Ngram *, _QWORD, _DWORD *, _QWORD))(*(_QWORD *)this + 480))(this, v88, v12, (v10 - 2));
              v21 = v92;
              v22 = *v19;
              v23 = *v19;
              v24 = 0.0;
              v25 = 0.0;
              if (*v19 != -INFINITY)
                v25 = exp(v23 * 2.30258509);
              v26 = log10(v21 + v25);
              v27 = v91;
              if (v20 != -INFINITY)
                v24 = exp(v20 * 2.30258509);
              v28 = log10(v27 + v24);
              v29 = 0.0;
              v30 = 0.0;
              if (v22 != -INFINITY)
                v30 = exp(v23 * 2.30258509);
              v31 = v26;
              v32 = v28;
              v33 = (v21 * (float)((float)(v31 - v32) - v82) + v30 * (float)((float)(v20 + (float)(v31 - v32)) - v22))
                  * v81;
              if (v33 != -INFINITY)
                v29 = exp(v33 * 2.30258509);
              v34 = *(_QWORD *)&v98[4];
              *(_DWORD *)(*(_QWORD *)&v98[4] - 4 * v97) = v88;
              LOBYTE(v83.__locale_) = 0;
              v35 = v29 + -1.0;
              if (!Trie<unsigned int,BOnode>::findTrie((_DWORD **)this + 19, (unsigned int *)(v34 - 4 * v97), &v83))
              {
                v83.__locale_ = *(std::locale::__imp **)&v35;
                v84 = v88;
                v86 = 0;
                v87 = 0;
                __p = 0;
                std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v12, (uint64_t)&v12[v11 + 1], (4 * v11 + 4) >> 2);
                v36 = (_QWORD *)v95;
                if (v95 >= v96)
                {
                  v38 = std::vector<PruneProbsRecord>::__push_back_slow_path<PruneProbsRecord const&>(&v94, (uint64_t *)&v83);
                }
                else
                {
                  locale = v83.__locale_;
                  *(_DWORD *)(v95 + 8) = v84;
                  *v36 = locale;
                  v36[3] = 0;
                  v36[4] = 0;
                  v36[2] = 0;
                  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v36 + 2, __p, (uint64_t)v86, (v86 - (_BYTE *)__p) >> 2);
                  v38 = (unint64_t)(v36 + 5);
                }
                v95 = v38;
                v100[0] = (uint64_t (*)(uint64_t *, uint64_t *))PruneProbsRecord::compare;
                std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PruneProbsRecord const&,PruneProbsRecord const&),std::__wrap_iter<PruneProbsRecord*>>(v94, v38, v100, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v38 - v94) >> 3));
                v39 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v95 - v94) >> 3);
                if (v39 > v80)
                {
                  v100[0] = (uint64_t (*)(uint64_t *, uint64_t *))PruneProbsRecord::compare;
                  std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(PruneProbsRecord const&,PruneProbsRecord const&),std::__wrap_iter<PruneProbsRecord*>>(v94, v95, (unsigned int (**)(uint64_t, uint64_t))v100, v39);
                  v40 = v95;
                  v41 = *(void **)(v95 - 24);
                  if (v41)
                  {
                    *(_QWORD *)(v95 - 16) = v41;
                    operator delete(v41);
                  }
                  v95 = v40 - 40;
                }
                if (__p)
                {
                  v86 = __p;
                  operator delete(__p);
                }
              }
              if (!*((_BYTE *)this + 8) && (Debug::debugAll > 3 || *((_DWORD *)this + 3) >= 4u))
              {
                v42 = (_QWORD *)(*(uint64_t (**)(Ngram *))(*(_QWORD *)this + 24))(this);
                v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"CONTEXT ", 8);
                (*(void (**)(_QWORD))(**((_QWORD **)this + 3) + 328))(*((_QWORD *)this + 3));
                v44 = operator<<(v43, v12);
                v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)" WORD ", 6);
                v46 = (const char *)(*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3), v88);
                v47 = strlen(v46);
                v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)v46, v47);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)" CONTEXTPROB ", 13);
                v49 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)" OLDPROB ", 9);
                v50 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" NEWPROB ", 9);
                v51 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)" DELTA-H ", 9);
                v52 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" DELTA-LOGP ", 12);
                v53 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" PPL-CHANGE ", 12);
                v54 = (_QWORD *)std::ostream::operator<<();
                std::ios_base::getloc((const std::ios_base *)((char *)v54 + *(_QWORD *)(*v54 - 24)));
                v55 = std::locale::use_facet(&v83, MEMORY[0x1E0DE4A90]);
                ((void (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10);
                std::locale::~locale(&v83);
                std::ostream::put();
                std::ostream::flush();
              }
            }
            if (v90)
              MEMORY[0x1AF44D160](v90, 0x1000C8052888210);
          }
        }
        v56 = v94;
        v57 = v94;
        if (v94 != v95)
        {
          do
          {
            v58 = *(unsigned int *)(v57 + 8);
            v59 = *(unsigned int **)(v57 + 16);
            Ngram::removeProb(this, *(_DWORD *)(v57 + 8), v59);
            if (!*((_BYTE *)this + 8) && (Debug::debugAll > 3 || *((_DWORD *)this + 3) >= 4u))
            {
              v60 = (_QWORD *)(*(uint64_t (**)(Ngram *))(*(_QWORD *)this + 24))(this);
              v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"CONTEXT ", 8);
              (*(void (**)(_QWORD))(**((_QWORD **)this + 3) + 328))(*((_QWORD *)this + 3));
              v62 = operator<<(v61, v59);
              v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)" WORD ", 6);
              v64 = (const char *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3), v58);
              v65 = strlen(v64);
              v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)v64, v65);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)" PPL-CHANGE ", 12);
              v67 = (_QWORD *)std::ostream::operator<<();
              v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)" PRUNED 1", 9);
              std::ios_base::getloc((const std::ios_base *)((char *)v68 + *(_QWORD *)(*v68 - 24)));
              v69 = std::locale::use_facet(&v83, MEMORY[0x1E0DE4A90]);
              ((void (*)(const std::locale::facet *, uint64_t))v69->__vftable[2].~facet_0)(v69, 10);
              std::locale::~locale(&v83);
              std::ostream::put();
              std::ostream::flush();
            }
            if (!Ngram::numProbs(this, v59)
              && !Trie<unsigned int,BOnode>::numEntries((_DWORD **)this + 19, v59))
            {
              Trie<unsigned int,BOnode>::removeTrie((unsigned int **)this + 19, v59, 0);
            }
            v57 += 40;
          }
          while (v57 != v95);
          v56 = v94;
        }
        if (!*((_BYTE *)this + 8)
          && (Debug::debugAll || *((_DWORD *)this + 3))
          && -858993459 * ((unint64_t)(v57 - v56) >> 3))
        {
          v70 = (_QWORD *)(*(uint64_t (**)(Ngram *))(*(_QWORD *)this + 24))(this);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"pruned ", 7);
          v71 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)" ", 1);
          v72 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"-grams\n", 7);
        }
        TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)v93);
        v93[0] = (void **)&v94;
        std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100](v93);
        v11 = v76 - 1;
        if ((_DWORD)v76 == 1)
          break;
        v10 = v78;
      }
      while (v74 <= v11);
    }
  }
  (*(void (**)(Ngram *))(*(_QWORD *)this + 416))(this);
  result = *(_QWORD *)&v98[4];
  if (*(_QWORD *)&v98[4])
    return MEMORY[0x1AF44D160](*(_QWORD *)&v98[4], 0x1000C8052888210);
  return result;
}

void sub_1AD94D074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::locale a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;
  uint64_t v35;

  v35 = *(_QWORD *)(v33 - 176);
  if (v35)
    MEMORY[0x1AF44D160](v35, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

BOOL PruneProbsRecord::compare(double *a1, double *a2)
{
  return *a1 < *a2;
}

uint64_t Ngram::pruneLowProbs(Ngram *this, int a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  float v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const char *v17;
  size_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t result;
  int v26;
  unsigned int v27;
  _BYTE v28[24];
  uint64_t v29;
  _BYTE v30[80];
  _DWORD v31[2];
  uint64_t v32;
  int v33;

  v4 = *((_DWORD *)this + 44);
  v31[0] = 0;
  v31[1] = v4;
  v32 = 0;
  v33 = 0;
  if (v4)
    Array<unsigned int>::alloc((uint64_t)v31, v4 - 1, 0);
  v5 = a2 - 1;
  do
  {
    if (v5 >= *((_DWORD *)this + 44))
    {
      v26 = 0;
    }
    else
    {
      v26 = 0;
      do
      {
        TrieIter2<unsigned int,BOnode>::TrieIter2((uint64_t)v30, (_DWORD **)this + 19, (_DWORD *)(v32 - 4 * v31[0]), v5, 0);
        v6 = 0;
        while (1)
        {
          v7 = TrieIter2<unsigned int,BOnode>::next((uint64_t)v30);
          if (!v7)
            break;
          v8 = *(float *)(v7 + 8);
          LHashIter<unsigned int,float>::LHashIter((uint64_t)v28, (_DWORD **)(v7 + 16), 0);
          v27 = 0;
          v9 = 1;
LABEL_9:
          v10 = v9;
          while (1)
          {
            v9 = v10;
            v11 = (float *)LHashIter<unsigned int,float>::next((uint64_t)v28, &v27);
            if (!v11)
              break;
            v12 = (*(float (**)(Ngram *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)this + 480))(this, v27, v32 - 4 * v31[0], v5 - 1);
            v10 = 0;
            if ((float)(v8 + v12) > *v11)
            {
              if (!*((_BYTE *)this + 8) && (Debug::debugAll > 3 || *((_DWORD *)this + 3) >= 4u))
              {
                v13 = (_QWORD *)(*(uint64_t (**)(Ngram *))(*(_QWORD *)this + 24))(this);
                v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"CONTEXT ", 8);
                (*(void (**)(_QWORD))(**((_QWORD **)this + 3) + 328))(*((_QWORD *)this + 3));
                v15 = operator<<(v14, (_DWORD *)(v32 - 4 * v31[0]));
                v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" WORD ", 6);
                v17 = (const char *)(*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3), v27);
                v18 = strlen(v17);
                v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" LPROB ", 7);
                v20 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" BACKOFF-LPROB ", 15);
                v21 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" PRUNED\n", 8);
              }
              Ngram::removeProb(this, v27, (unsigned int *)(v32 - 4 * v31[0]));
              ++v6;
              goto LABEL_9;
            }
          }
          if ((_DWORD)v9
            && !Trie<unsigned int,BOnode>::numEntries((_DWORD **)this + 19, (unsigned int *)(v32 - 4 * v31[0])))
          {
            Trie<unsigned int,BOnode>::removeTrie((unsigned int **)this + 19, (unsigned int *)(v32 - 4 * v31[0]), 0);
          }
          if (v29)
            MEMORY[0x1AF44D160](v29, 0x1000C8052888210);
        }
        if (v6)
        {
          if (!*((_BYTE *)this + 8) && (Debug::debugAll || *((_DWORD *)this + 3)))
          {
            v22 = (_QWORD *)(*(uint64_t (**)(Ngram *))(*(_QWORD *)this + 24))(this);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"pruned ", 7);
            v23 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" ", 1);
            v24 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"-grams\n", 7);
          }
          v26 = 1;
        }
        TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)v30);
        ++v5;
      }
      while (v5 < *((_DWORD *)this + 44));
    }
    (*(void (**)(Ngram *))(*(_QWORD *)this + 416))(this);
    v5 = a2 - 1;
  }
  while (v26);
  (*(void (**)(Ngram *))(*(_QWORD *)this + 496))(this);
  result = v32;
  if (v32)
    return MEMORY[0x1AF44D160](v32, 0x1000C8052888210);
  return result;
}

void sub_1AD94D4D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (a26)
    MEMORY[0x1AF44D160](a26, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t Ngram::rescoreProbs(Ngram *this, LM *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  float *v7;
  uint64_t result;
  unsigned int i;
  _BYTE v11[24];
  uint64_t v12;
  _BYTE v13[80];
  int v14;
  _BYTE v15[12];
  int v16;

  v4 = *((_DWORD *)this + 44);
  *(_DWORD *)&v15[8] = 0;
  v16 = 0;
  v14 = 0;
  *(_QWORD *)v15 = (v4 + 1);
  if (v4 != -1)
  {
    Array<unsigned int>::alloc((uint64_t)&v14, v4, 0);
    v5 = *((_DWORD *)this + 44) - 1;
    if (v5 >= 0)
    {
      do
      {
        TrieIter2<unsigned int,BOnode>::TrieIter2((uint64_t)v13, (_DWORD **)this + 19, (_DWORD *)(*(_QWORD *)&v15[4] - 4 * v14), v5, 0);
        while (1)
        {
          v6 = TrieIter2<unsigned int,BOnode>::next((uint64_t)v13);
          if (!v6)
            break;
          LHashIter<unsigned int,float>::LHashIter((uint64_t)v11, (_DWORD **)(v6 + 16), 0);
          for (i = 0;
                ;
                *v7 = (*(float (**)(LM *, _QWORD, uint64_t))(*(_QWORD *)a2 + 48))(a2, i, *(_QWORD *)&v15[4] - 4 * v14))
          {
            v7 = (float *)LHashIter<unsigned int,float>::next((uint64_t)v11, &i);
            if (!v7)
              break;
          }
          if (v12)
            MEMORY[0x1AF44D160](v12, 0x1000C8052888210);
        }
        TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)v13);
      }
      while (v5-- > 0);
    }
  }
  (*(void (**)(Ngram *))(*(_QWORD *)this + 416))(this);
  result = *(_QWORD *)&v15[4];
  if (*(_QWORD *)&v15[4])
    return MEMORY[0x1AF44D160](*(_QWORD *)&v15[4], 0x1000C8052888210);
  return result;
}

void sub_1AD94D69C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;
  uint64_t v16;

  v16 = *(_QWORD *)(v14 - 64);
  if (v16)
    MEMORY[0x1AF44D160](v16, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t Ngram::fixupProbs(Ngram *this)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  unsigned int v7;
  std::locale::id *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  float v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t result;
  _BYTE v21[80];
  _DWORD *v22;
  uint64_t v23;
  int v24;
  _BYTE v25[12];
  int v26;
  std::locale v27;

  v2 = *((_DWORD *)this + 44);
  *(_DWORD *)&v25[8] = 0;
  v26 = 0;
  v24 = 0;
  *(_QWORD *)v25 = (v2 + 1);
  if (v2 == -1)
  {
    v22 = 0;
    v23 = 0;
  }
  else
  {
    Array<unsigned int>::alloc((uint64_t)&v24, v2, 0);
    v3 = *((_DWORD *)this + 44);
    v22 = 0;
    v23 = 0;
    if (v3 < 2)
      goto LABEL_27;
  }
  v4 = 1;
  do
  {
    TrieIter2<unsigned int,BOnode>::TrieIter2((uint64_t)v21, (_DWORD **)this + 19, (_DWORD *)(*(_QWORD *)&v25[4] - 4 * v24), v4, 0);
    while (TrieIter2<unsigned int,BOnode>::next((uint64_t)v21))
    {
      v5 = 0;
      do
      {
        v6 = v5 + 1;
        if (Ngram::findProb(this, *(_DWORD *)(*(_QWORD *)&v25[4] + 4 * (v5 - v24)), (unsigned int *)(*(_QWORD *)&v25[4] + 4 * (v5 - v24 + 1))))
        {
          break;
        }
        LOBYTE(v27.__locale_) = 0;
        Trie<unsigned int,unsigned long>::insertTrie(&v22, (unsigned int *)(*(_QWORD *)&v25[4] + 4 * (v5 - v24)), &v27)[1] = 1;
        ++v5;
      }
      while (v4 != v6);
    }
    TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)v21);
    ++v4;
    v7 = *((_DWORD *)this + 44);
  }
  while (v4 < v7);
  if (v7 >= 2)
  {
    v8 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    v9 = 1;
    do
    {
      TrieIter2<unsigned int,unsigned long>::TrieIter2((uint64_t)v21, &v22, (_DWORD *)(*(_QWORD *)&v25[4] - 4 * v24), v9, 0);
      v10 = 0;
      while (1)
      {
        v11 = TrieIter2<unsigned int,unsigned long>::next((uint64_t)v21);
        if (!v11)
          break;
        if (*(_QWORD *)(v11 + 8))
        {
          v12 = (*(float (**)(Ngram *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)this + 480))(this, *(unsigned int *)(*(_QWORD *)&v25[4] + 4 * -v24), *(_QWORD *)&v25[4] + 4 * (1 - v24), v9 - 1);
          ++v10;
          *(float *)Ngram::insertProb(this, *(_DWORD *)(*(_QWORD *)&v25[4] + 4 * -v24), (unsigned int *)(*(_QWORD *)&v25[4] + 4 * (1 - v24))) = v12;
          if (!*((_BYTE *)this + 8) && (Debug::debugAll > 2 || *((_DWORD *)this + 3) >= 3u))
          {
            v13 = (_QWORD *)(*(uint64_t (**)(Ngram *))(*(_QWORD *)this + 24))(this);
            v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"faking probability for context ", 31);
            (*(void (**)(_QWORD))(**((_QWORD **)this + 3) + 328))(*((_QWORD *)this + 3));
            v15 = operator<<(v14, (_DWORD *)(*(_QWORD *)&v25[4] - 4 * v24));
            std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(*v15 - 24)));
            v16 = std::locale::use_facet(&v27, v8);
            ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
            std::locale::~locale(&v27);
            std::ostream::put();
            std::ostream::flush();
          }
        }
      }
      if (!*((_BYTE *)this + 8) && (Debug::debugAll || *((_DWORD *)this + 3)) && v10)
      {
        v17 = (_QWORD *)(*(uint64_t (**)(Ngram *))(*(_QWORD *)this + 24))(this);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"inserted ", 9);
        v18 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" redundant ", 11);
        v19 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"-gram probs\n", 12);
      }
      TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)v21);
      ++v9;
    }
    while (v9 < *((_DWORD *)this + 44));
  }
LABEL_27:
  Trie<unsigned int,unsigned long>::~Trie(&v22);
  result = *(_QWORD *)&v25[4];
  if (*(_QWORD *)&v25[4])
    return MEMORY[0x1AF44D160](*(_QWORD *)&v25[4], 0x1000C8052888210);
  return result;
}

void sub_1AD94DA6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _DWORD *a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  std::locale::~locale((std::locale *)(v22 - 104));
  TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)&a9);
  Trie<unsigned int,unsigned long>::~Trie(&a19);
  if (a22)
    MEMORY[0x1AF44D160](a22, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

uint64_t Ngram::distributeProb(const Vocab **this, double a2, unsigned int *a3)
{
  unsigned int v6;
  unsigned int v7;
  float *Prob;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  float v13;
  float *inserted;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  double v19;
  float *v20;
  double v21;
  float v22;
  uint64_t result;
  unsigned int v24;
  _BYTE v25[24];
  uint64_t v26;
  std::locale v27;

  VocabIter::VocabIter((VocabIter *)v25, this[3], 0);
  v6 = 0;
  v7 = 0;
  v24 = 0;
  while (VocabIter::next((VocabIter *)v25, &v24))
  {
    if (!(*(unsigned int (**)(const Vocab *, _QWORD))(*(_QWORD *)this[3] + 176))(this[3], v24)
      && !(*(unsigned int (**)(const Vocab *, _QWORD))(*(_QWORD *)this[3] + 224))(this[3], v24))
    {
      Prob = (float *)Ngram::findProb((Ngram *)this, v24, a3);
      ++v6;
      if (!Prob)
      {
        *(_DWORD *)Ngram::insertProb((Ngram *)this, v24, a3) = -8388608;
        goto LABEL_9;
      }
      if (*Prob == -INFINITY)
LABEL_9:
        ++v7;
    }
  }
  VocabIter::init((VocabIter *)v25);
  if (v7)
  {
    if (!*((_BYTE *)this + 8) && (Debug::debugAll || *((_DWORD *)this + 3)))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"warning: distributing ", 22);
      v9 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" left-over probability mass over ", 33);
      v10 = (_QWORD *)std::ostream::operator<<();
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" zeroton words", 14);
      std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(*v11 - 24)));
      v12 = std::locale::use_facet(&v27, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
      std::locale::~locale(&v27);
      std::ostream::put();
      std::ostream::flush();
    }
    v13 = log10(a2 / (double)v7);
    while (VocabIter::next((VocabIter *)v25, &v24))
    {
      if (!(*(unsigned int (**)(const Vocab *, _QWORD))(*(_QWORD *)this[3] + 176))(this[3], v24)
        && !(*(unsigned int (**)(const Vocab *, _QWORD))(*(_QWORD *)this[3] + 224))(this[3], v24))
      {
        inserted = (float *)Ngram::insertProb((Ngram *)this, v24, a3);
        if (*inserted == -INFINITY)
          *inserted = v13;
      }
    }
  }
  else
  {
    if (a2 > 0.0 && !*((_BYTE *)this + 8) && (Debug::debugAll || *((_DWORD *)this + 3)))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"warning: distributing ", 22);
      v15 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" left-over probability mass over all ", 37);
      v16 = (_QWORD *)std::ostream::operator<<();
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" words", 6);
      std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
      v18 = std::locale::use_facet(&v27, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
      std::locale::~locale(&v27);
      std::ostream::put();
      std::ostream::flush();
    }
    v19 = a2 / (double)v6;
    while (VocabIter::next((VocabIter *)v25, &v24))
    {
      if (!(*(unsigned int (**)(const Vocab *, _QWORD))(*(_QWORD *)this[3] + 176))(this[3], v24)
        && !(*(unsigned int (**)(const Vocab *, _QWORD))(*(_QWORD *)this[3] + 224))(this[3], v24))
      {
        v20 = (float *)Ngram::insertProb((Ngram *)this, v24, a3);
        v21 = 0.0;
        if (*v20 != -INFINITY)
          v21 = exp(*v20 * 2.30258509);
        v22 = log10(v19 + v21);
        *v20 = v22;
      }
    }
  }
  result = v26;
  if (v26)
    return MEMORY[0x1AF44D160](v26, 0x50C80EE9192B6);
  return result;
}

void sub_1AD94DE8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::locale a14)
{
  if (a13)
    MEMORY[0x1AF44D160](a13, 0x50C80EE9192B6);
  _Unwind_Resume(exception_object);
}

void Ngram::~Ngram(Ngram *this)
{
  *(_QWORD *)this = &off_1E5D17188;
  Trie<unsigned int,BOnode>::~Trie((uint64_t)this + 152);
  LM::~LM(this);
}

{
  *(_QWORD *)this = &off_1E5D17188;
  Trie<unsigned int,BOnode>::~Trie((uint64_t)this + 152);
  LM::~LM(this);
  JUMPOUT(0x1AF44D190);
}

float LM::wordProb(LM *this, uint64_t a2, const unsigned int *a3)
{
  float v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v8 = 0;
  v9 = 0;
  v3 = (*(float (**)(LM *, uint64_t, const unsigned int *, uint64_t *))(*(_QWORD *)this + 40))(this, a2, a3, &v8);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_1AD94DFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

float LM::sentenceProb(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v3;
  _QWORD v5[3];
  void **v6;

  memset(v5, 0, sizeof(v5));
  v3 = (*(float (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 72))(a1, a2, a3, v5);
  v6 = (void **)v5;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v6);
  return v3;
}

{
  float v3;
  _QWORD v5[3];
  void **v6;

  memset(v5, 0, sizeof(v5));
  v3 = (*(float (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 88))(a1, a2, a3, v5);
  v6 = (void **)v5;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v6);
  return v3;
}

void sub_1AD94E040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_1AD94E0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

unint64_t LM::pplCountsFile(uint64_t a1, File *a2, uint64_t a3, uint64_t a4, char *a5, int a6)
{
  return LM::pplCountsFile<unsigned long>(a1, a2, a3, a4, a5, a6, 0);
}

double LM::pplFloatCountsFile(uint64_t a1, File *a2, uint64_t a3, uint64_t a4, char *a5, int a6)
{
  return LM::pplCountsFile<double>(a1, a2, a3, a4, a5, a6, 0);
}

uint64_t LM::contextID(LM *this, const unsigned int *a2)
{
  int v3;

  v3 = 0;
  return (*(uint64_t (**)(LM *, const unsigned int *, int *))(*(_QWORD *)this + 200))(this, a2, &v3);
}

uint64_t Ngram::contextID(Ngram *this, const unsigned int *a2, unsigned int *a3)
{
  return (*(uint64_t (**)(Ngram *, uint64_t, const unsigned int *, unsigned int *))(*(_QWORD *)this + 208))(this, 0xFFFFFFFFLL, a2, a3);
}

uint64_t LM::running(LM *this)
{
  return *((unsigned __int8 *)this + 147);
}

uint64_t LM::running(LM *this, char a2)
{
  uint64_t v2;

  v2 = *((unsigned __int8 *)this + 147);
  *((_BYTE *)this + 147) = a2;
  return v2;
}

_LM_FollowIter *LM::followIter(const Vocab **this, const unsigned int *a2)
{
  _LM_FollowIter *v4;

  v4 = (_LM_FollowIter *)operator new();
  _LM_FollowIter::_LM_FollowIter(v4, this, a2);
  return v4;
}

void sub_1AD94E190(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F1C4088EBDB0FLL);
  _Unwind_Resume(a1);
}

uint64_t LM::prefetchingNgrams(LM *this)
{
  return 0;
}

uint64_t LM::prefetchNgrams()
{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

uint64_t Ngram::skipOOVs(Ngram *this)
{
  return (uint64_t)this + 180;
}

uint64_t Ngram::trustTotals(Ngram *this)
{
  return (uint64_t)this + 181;
}

uint64_t Ngram::useCodebook(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 184) = a2;
  return result;
}

float Ngram::wordProbBO(Ngram *this, uint64_t a2, const unsigned int *a3, uint64_t a4)
{
  float v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v9 = 0;
  v10 = 0;
  v4 = (*(float (**)(Ngram *, uint64_t, const unsigned int *, uint64_t, uint64_t *))(*(_QWORD *)this + 472))(this, a2, a3, a4, &v9);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_1AD94E268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void NgramBayesMix::~NgramBayesMix(NgramBayesMix *this)
{
  BayesMix::~BayesMix(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t BayesMix::dout(BayesMix *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t LM::contextID(LM *this, const unsigned int *a2, unsigned int *a3)
{
  return (*(uint64_t (**)(LM *, uint64_t, const unsigned int *, unsigned int *))(*(_QWORD *)this + 208))(this, 0xFFFFFFFFLL, a2, a3);
}

uint64_t NgramBayesMix::read(BayesMix *this, File *a2)
{
  return BayesMix::readMixLMs(this, a2);
}

uint64_t BayesMix::running(BayesMix *this)
{
  return *((unsigned __int8 *)this + 147);
}

uint64_t Array<LM *>::operator[](int *a1, uint64_t a2)
{
  unint64_t v3;

  v3 = a2 - *a1;
  if (v3 >= a1[1])
  {
    a1[1] = v3 + 1;
    if (v3 >= a1[4])
      Array<LM *>::alloc((uint64_t)a1, v3, 0);
  }
  return *((_QWORD *)a1 + 1) + 8 * v3;
}

uint64_t Array<LM *>::alloc(uint64_t a1, int a2, int a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;

  v5 = (a2 + (*(_DWORD *)(a1 + 16) >> 1) + 1);
  v6 = (_QWORD *)operator new[]();
  v7 = v6;
  if (a3)
    bzero(v6, 8 * v5);
  v8 = *(unsigned int *)(a1 + 16);
  result = *(_QWORD *)(a1 + 8);
  if ((_DWORD)v8)
  {
    v10 = v7;
    v11 = *(uint64_t **)(a1 + 8);
    do
    {
      v12 = *v11++;
      *v10++ = v12;
      --v8;
    }
    while (v8);
    goto LABEL_8;
  }
  if (result)
LABEL_8:
    result = MEMORY[0x1AF44D160](result, 0x20C8093837F09);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = v5;
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  int v16;
  int *v17;
  char v18;
  BOOL v19;
  int v20;

  v8 = (int *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 2;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * *(a2 - 1) + 4), *(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * *v9 + 4));
        if ((result & 0x80000000) != 0)
        {
          v20 = *v9;
          *v9 = *(a2 - 1);
          *(a2 - 1) = v20;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(v9, v9 + 1, (int *)a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(v9, v9 + 1, v9 + 2, (int *)a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(v9, v9 + 1, v9 + 2, v9 + 3, (int *)a2 - 1, a3);
      default:
        if (v12 <= 95)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>((uint64_t)v9, a2, a3);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>((uint64_t)v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(&v9[v13 >> 1], v9, (int *)a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(v9, &v9[v13 >> 1], (int *)a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(v9 + 1, v15 - 1, (int *)a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(v9 + 2, &v9[v14 + 1], (int *)a2 - 3, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(v15 - 1, v15, &v9[v14 + 1], a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * *(v9 - 1) + 4), *(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * *v9 + 4)) & 0x80000000) == 0)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,float> &>((unsigned int *)v9, a2, a3);
            v9 = (int *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,float> &>(v9, (int *)a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(v9, v17, a3);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(v17 + 1, (int *)a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = (unsigned int *)v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != (int *)a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *,unsigned int *>((unsigned int *)v9, a2, a2, a3);
        return result;
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(uint64_t result, unsigned int *a2, uint64_t a3)
{
  _DWORD *v4;
  unsigned int *v5;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;

  if ((unsigned int *)result != a2)
  {
    v4 = (_DWORD *)result;
    v5 = (unsigned int *)(result + 4);
    if ((unsigned int *)(result + 4) != a2)
    {
      v7 = 0;
      v8 = (unsigned int *)result;
      do
      {
        v10 = *v8;
        v9 = v8[1];
        v8 = v5;
        result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * v9 + 4), *(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * v10 + 4));
        if ((result & 0x80000000) != 0)
        {
          v11 = *v8;
          v12 = v7;
          while (1)
          {
            *(_DWORD *)((char *)v4 + v12 + 4) = *(_DWORD *)((char *)v4 + v12);
            if (!v12)
              break;
            result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * v11 + 4), *(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * *(unsigned int *)((char *)v4 + v12 - 4) + 4));
            v12 -= 4;
            if ((result & 0x80000000) == 0)
            {
              v13 = (_DWORD *)((char *)v4 + v12 + 4);
              goto LABEL_10;
            }
          }
          v13 = v4;
LABEL_10:
          *v13 = v11;
        }
        v5 = v8 + 1;
        v7 += 4;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(uint64_t result, unsigned int *a2, uint64_t a3)
{
  unsigned int *v4;
  unsigned int *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  int v12;

  if ((unsigned int *)result != a2)
  {
    v4 = (unsigned int *)result;
    for (i = (unsigned int *)(result + 4); v4 + 1 != a2; i = v4 + 1)
    {
      v8 = *v4;
      v7 = v4[1];
      v4 = i;
      result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * v7 + 4), *(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * v8 + 4));
      if ((result & 0x80000000) != 0)
      {
        v9 = *v4;
        v10 = v4;
        do
        {
          v11 = v10;
          v12 = *--v10;
          *v11 = v12;
          result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * v9 + 4), *(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * *(v11 - 2) + 4));
        }
        while ((result & 0x80000000) != 0);
        *v10 = v9;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(int *a1, int *a2, int *a3, uint64_t a4)
{
  int v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  int v14;

  v8 = (*(uint64_t (**)(_QWORD, _QWORD))(a4 + 16))(*(unsigned int *)(*(_QWORD *)a4 + 4 + 8 * *a2 + 4), *(unsigned int *)(*(_QWORD *)a4 + 4 + 8 * *a1 + 4));
  v9 = (*(uint64_t (**)(_QWORD, _QWORD))(a4 + 16))(*(unsigned int *)(*(_QWORD *)a4 + 4 + 8 * *a3 + 4), *(unsigned int *)(*(_QWORD *)a4 + 4 + 8 * *a2 + 4));
  if (v8 < 0)
  {
    v11 = *a1;
    if (v9 < 0)
    {
      *a1 = *a3;
      *a3 = v11;
    }
    else
    {
      *a1 = *a2;
      *a2 = v11;
      if (((*(uint64_t (**)(_QWORD, _QWORD))(a4 + 16))(*(unsigned int *)(*(_QWORD *)a4 + 4 + 8 * *a3 + 4), *(unsigned int *)(*(_QWORD *)a4 + 4 + 8 * v11 + 4)) & 0x80000000) != 0)
      {
        v12 = *a2;
        *a2 = *a3;
        *a3 = v12;
        return 2;
      }
    }
  }
  else
  {
    if ((v9 & 0x80000000) == 0)
      return 0;
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    if (((*(uint64_t (**)(_QWORD, _QWORD))(a4 + 16))(*(unsigned int *)(*(_QWORD *)a4 + 4 + 8 * *a2 + 4), *(unsigned int *)(*(_QWORD *)a4 + 4 + 8 * *a1 + 4)) & 0x80000000) != 0)
    {
      v14 = *a1;
      *a1 = *a2;
      *a2 = v14;
      return 2;
    }
  }
  return 1;
}

unsigned int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,float> &>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  unsigned int *v4;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  v4 = a2;
  v6 = *a1;
  if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * v6 + 4), *(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * *(a2 - 1) + 4)) & 0x80000000) != 0)
  {
    v8 = a1;
    do
    {
      v9 = v8[1];
      ++v8;
    }
    while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * v6 + 4), *(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * v9 + 4)) & 0x80000000) == 0);
  }
  else
  {
    v7 = a1 + 1;
    do
    {
      v8 = v7;
      if (v7 >= v4)
        break;
      ++v7;
    }
    while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * v6 + 4), *(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * *v8 + 4)) & 0x80000000) == 0);
  }
  if (v8 < v4)
  {
    do
      v10 = *--v4;
    while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * v6 + 4), *(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * v10 + 4)) & 0x80000000) != 0);
  }
  while (v8 < v4)
  {
    v11 = *v8;
    *v8 = *v4;
    *v4 = v11;
    do
    {
      v12 = v8[1];
      ++v8;
    }
    while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * v6 + 4), *(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * v12 + 4)) & 0x80000000) == 0);
    do
      v13 = *--v4;
    while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * v6 + 4), *(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * v13 + 4)) & 0x80000000) != 0);
  }
  if (v8 - 1 != a1)
    *a1 = *(v8 - 1);
  *(v8 - 1) = v6;
  return v8;
}

int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,float> &>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int *v9;
  int *v10;
  unsigned int v11;
  unsigned int v12;
  int *v13;
  int *v14;
  int v15;
  unsigned int v16;
  unsigned int v17;

  v6 = 0;
  v7 = *a1;
  do
    v8 = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * a1[++v6] + 4), *(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * v7 + 4));
  while (v8 < 0);
  v9 = &a1[v6];
  v10 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= a2)
        break;
      v12 = *--a2;
    }
    while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * v12 + 4), *(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * v7 + 4)) & 0x80000000) == 0);
  }
  else
  {
    do
      v11 = *--a2;
    while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * v11 + 4), *(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * v7 + 4)) & 0x80000000) == 0);
  }
  if (v9 < a2)
  {
    v13 = &a1[v6];
    v14 = a2;
    do
    {
      v15 = *v13;
      *v13 = *v14;
      *v14 = v15;
      do
      {
        v16 = v13[1];
        ++v13;
      }
      while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * v16 + 4), *(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * v7 + 4)) & 0x80000000) != 0);
      do
        v17 = *--v14;
      while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * v17 + 4), *(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * v7 + 4)) & 0x80000000) == 0);
    }
    while (v13 < v14);
    v10 = v13 - 1;
  }
  if (v10 != a1)
    *a1 = *v10;
  *v10 = v7;
  return v10;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int *v16;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * *(a2 - 1) + 4), *(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * *a1 + 4)) & 0x80000000) != 0)
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v9 = (unsigned int *)(a1 + 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(a1, a1 + 1, a1 + 2, a3);
      v10 = (unsigned int *)(a1 + 3);
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * *v10 + 4), *(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * *v9 + 4)) & 0x80000000) != 0)
    {
      v13 = *v10;
      v14 = v11;
      while (1)
      {
        *(int *)((char *)a1 + v14 + 12) = *(int *)((char *)a1 + v14 + 8);
        if (v14 == -8)
          break;
        v15 = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * v13 + 4), *(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * *(unsigned int *)((char *)a1 + v14 + 4) + 4));
        v14 -= 4;
        if ((v15 & 0x80000000) == 0)
        {
          v16 = (int *)((char *)a1 + v14 + 12);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v13;
      if (++v12 == 8)
        return v10 + 1 == (unsigned int *)a2;
    }
    v9 = v10;
    v11 += 4;
    if (++v10 == (unsigned int *)a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(int *a1, int *a2, int *a3, int *a4, uint64_t a5)
{
  uint64_t result;
  int v11;
  int v12;
  int v13;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(a1, a2, a3, a5);
  result = (*(uint64_t (**)(_QWORD, _QWORD))(a5 + 16))(*(unsigned int *)(*(_QWORD *)a5 + 4 + 8 * *a4 + 4), *(unsigned int *)(*(_QWORD *)a5 + 4 + 8 * *a3 + 4));
  if ((result & 0x80000000) != 0)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = (*(uint64_t (**)(_QWORD, _QWORD))(a5 + 16))(*(unsigned int *)(*(_QWORD *)a5 + 4 + 8 * *a3 + 4), *(unsigned int *)(*(_QWORD *)a5 + 4 + 8 * *a2 + 4));
    if ((result & 0x80000000) != 0)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = (*(uint64_t (**)(_QWORD, _QWORD))(a5 + 16))(*(unsigned int *)(*(_QWORD *)a5 + 4 + 8 * *a2 + 4), *(unsigned int *)(*(_QWORD *)a5 + 4 + 8 * *a1 + 4));
      if ((result & 0x80000000) != 0)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t a6)
{
  uint64_t result;
  int v13;
  int v14;
  int v15;
  int v16;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(a1, a2, a3, a4, a6);
  result = (*(uint64_t (**)(_QWORD, _QWORD))(a6 + 16))(*(unsigned int *)(*(_QWORD *)a6 + 4 + 8 * *a5 + 4), *(unsigned int *)(*(_QWORD *)a6 + 4 + 8 * *a4 + 4));
  if ((result & 0x80000000) != 0)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    result = (*(uint64_t (**)(_QWORD, _QWORD))(a6 + 16))(*(unsigned int *)(*(_QWORD *)a6 + 4 + 8 * *a4 + 4), *(unsigned int *)(*(_QWORD *)a6 + 4 + 8 * *a3 + 4));
    if ((result & 0x80000000) != 0)
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      result = (*(uint64_t (**)(_QWORD, _QWORD))(a6 + 16))(*(unsigned int *)(*(_QWORD *)a6 + 4 + 8 * *a3 + 4), *(unsigned int *)(*(_QWORD *)a6 + 4 + 8 * *a2 + 4));
      if ((result & 0x80000000) != 0)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        result = (*(uint64_t (**)(_QWORD, _QWORD))(a6 + 16))(*(unsigned int *)(*(_QWORD *)a6 + 4 + 8 * *a2 + 4), *(unsigned int *)(*(_QWORD *)a6 + 4 + 8 * *a1 + 4));
        if ((result & 0x80000000) != 0)
        {
          v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

unsigned int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (((*(uint64_t (**)(_QWORD, _QWORD))(a4 + 16))(*(unsigned int *)(*(_QWORD *)a4 + 4 + 8 * *v14 + 4), *(unsigned int *)(*(_QWORD *)a4 + 4 + 8 * *a1 + 4)) & 0x80000000) != 0)
        {
          v15 = *v14;
          *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 5)
    {
      v16 = (unint64_t)v8 >> 2;
      v17 = a2 - 1;
      do
      {
        v18 = *a1;
        v19 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(a1, a4, v16);
        if (v17 == v19)
        {
          *v19 = v18;
        }
        else
        {
          *v19 = *v17;
          *v17 = v18;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>((uint64_t)a1, (uint64_t)(v19 + 1), a4, v19 + 1 - a1);
        }
        --v17;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(uint64_t result, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 2)
    {
      v10 = ((uint64_t)a4 - result) >> 1;
      v11 = v10 + 1;
      v12 = (unsigned int *)(result + 4 * (v10 + 1));
      v13 = v10 + 2;
      if (v10 + 2 < a3
        && (*(int (**)(_QWORD, _QWORD))(a2 + 16))(*(unsigned int *)(*(_QWORD *)a2 + 4 + 8 * *v12 + 4), *(unsigned int *)(*(_QWORD *)a2 + 4 + 8 * v12[1] + 4)) < 0)
      {
        ++v12;
        v11 = v13;
      }
      result = (*(uint64_t (**)(_QWORD, _QWORD))(a2 + 16))(*(unsigned int *)(*(_QWORD *)a2 + 4 + 8 * *v12 + 4), *(unsigned int *)(*(_QWORD *)a2 + 4 + 8 * *v5 + 4));
      if ((result & 0x80000000) == 0)
      {
        v14 = *v5;
        do
        {
          v15 = v12;
          *v5 = *v12;
          if (v7 < v11)
            break;
          v16 = (2 * v11) | 1;
          v12 = (unsigned int *)(v6 + 4 * v16);
          if (2 * v11 + 2 < a3
            && (*(int (**)(_QWORD, _QWORD))(a2 + 16))(*(unsigned int *)(*(_QWORD *)a2 + 4 + 8 * *v12 + 4), *(unsigned int *)(*(_QWORD *)a2 + 4 + 8 * v12[1] + 4)) < 0)
          {
            ++v12;
            v16 = 2 * v11 + 2;
          }
          result = (*(uint64_t (**)(_QWORD, _QWORD))(a2 + 16))(*(unsigned int *)(*(_QWORD *)a2 + 4 + 8 * *v12 + 4), *(unsigned int *)(*(_QWORD *)a2 + 4 + 8 * v14 + 4));
          v5 = v15;
          v11 = v16;
        }
        while ((result & 0x80000000) == 0);
        *v15 = v14;
      }
    }
  }
  return result;
}

_DWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = &a1[v6 + 1];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3
      && (*(int (**)(_QWORD, _QWORD))(a2 + 16))(*(unsigned int *)(*(_QWORD *)a2 + 4 + 8 * *v9 + 4), *(unsigned int *)(*(_QWORD *)a2 + 4 + 8 * a1[v6 + 2] + 4)) < 0)
    {
      ++v9;
      v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,float> &,unsigned int *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = (_DWORD *)(result + 4 * (v4 >> 1));
    v9 = (_DWORD *)(a2 - 4);
    result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * *v8 + 4), *(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * *(unsigned int *)(a2 - 4) + 4));
    if ((result & 0x80000000) != 0)
    {
      v10 = *v9;
      do
      {
        v11 = v8;
        *v9 = *v8;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (_DWORD *)(v6 + 4 * v7);
        result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * *v8 + 4), *(unsigned int *)(*(_QWORD *)a3 + 4 + 8 * v10 + 4));
        v9 = v11;
      }
      while ((result & 0x80000000) != 0);
      *v11 = v10;
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  int v16;
  int *v17;
  char v18;
  BOOL v19;
  int v20;

  v8 = (int *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 2;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * *(a2 - 1) + 24), *(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * *v9 + 24));
        if ((result & 0x80000000) != 0)
        {
          v20 = *v9;
          *v9 = *(a2 - 1);
          *(a2 - 1) = v20;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(v9, v9 + 1, (int *)a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(v9, v9 + 1, v9 + 2, (int *)a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(v9, v9 + 1, v9 + 2, v9 + 3, (int *)a2 - 1, a3);
      default:
        if (v12 <= 95)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>((uint64_t)v9, a2, a3);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>((uint64_t)v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(&v9[v13 >> 1], v9, (int *)a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(v9, &v9[v13 >> 1], (int *)a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(v9 + 1, v15 - 1, (int *)a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(v9 + 2, &v9[v14 + 1], (int *)a2 - 3, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(v15 - 1, v15, &v9[v14 + 1], a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * *(v9 - 1) + 24), *(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * *v9 + 24)) & 0x80000000) == 0)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &>((unsigned int *)v9, a2, a3);
            v9 = (int *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &>(v9, (int *)a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(v9, v17, a3);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(v17 + 1, (int *)a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = (unsigned int *)v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != (int *)a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *,unsigned int *>((unsigned int *)v9, a2, a2, a3);
        return result;
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(uint64_t result, unsigned int *a2, uint64_t a3)
{
  _DWORD *v4;
  unsigned int *v5;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;

  if ((unsigned int *)result != a2)
  {
    v4 = (_DWORD *)result;
    v5 = (unsigned int *)(result + 4);
    if ((unsigned int *)(result + 4) != a2)
    {
      v7 = 0;
      v8 = (unsigned int *)result;
      do
      {
        v10 = *v8;
        v9 = v8[1];
        v8 = v5;
        result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * v9 + 24), *(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * v10 + 24));
        if ((result & 0x80000000) != 0)
        {
          v11 = *v8;
          v12 = v7;
          while (1)
          {
            *(_DWORD *)((char *)v4 + v12 + 4) = *(_DWORD *)((char *)v4 + v12);
            if (!v12)
              break;
            result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * v11 + 24), *(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * *(unsigned int *)((char *)v4 + v12 - 4) + 24));
            v12 -= 4;
            if ((result & 0x80000000) == 0)
            {
              v13 = (_DWORD *)((char *)v4 + v12 + 4);
              goto LABEL_10;
            }
          }
          v13 = v4;
LABEL_10:
          *v13 = v11;
        }
        v5 = v8 + 1;
        v7 += 4;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(uint64_t result, unsigned int *a2, uint64_t a3)
{
  unsigned int *v4;
  unsigned int *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  int v12;

  if ((unsigned int *)result != a2)
  {
    v4 = (unsigned int *)result;
    for (i = (unsigned int *)(result + 4); v4 + 1 != a2; i = v4 + 1)
    {
      v8 = *v4;
      v7 = v4[1];
      v4 = i;
      result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * v7 + 24), *(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * v8 + 24));
      if ((result & 0x80000000) != 0)
      {
        v9 = *v4;
        v10 = v4;
        do
        {
          v11 = v10;
          v12 = *--v10;
          *v11 = v12;
          result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * v9 + 24), *(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * *(v11 - 2) + 24));
        }
        while ((result & 0x80000000) != 0);
        *v10 = v9;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(int *a1, int *a2, int *a3, uint64_t a4)
{
  int v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  int v14;

  v8 = (*(uint64_t (**)(_QWORD, _QWORD))(a4 + 16))(*(unsigned int *)(*(_QWORD *)a4 + 8 + 32 * *a2 + 24), *(unsigned int *)(*(_QWORD *)a4 + 8 + 32 * *a1 + 24));
  v9 = (*(uint64_t (**)(_QWORD, _QWORD))(a4 + 16))(*(unsigned int *)(*(_QWORD *)a4 + 8 + 32 * *a3 + 24), *(unsigned int *)(*(_QWORD *)a4 + 8 + 32 * *a2 + 24));
  if (v8 < 0)
  {
    v11 = *a1;
    if (v9 < 0)
    {
      *a1 = *a3;
      *a3 = v11;
    }
    else
    {
      *a1 = *a2;
      *a2 = v11;
      if (((*(uint64_t (**)(_QWORD, _QWORD))(a4 + 16))(*(unsigned int *)(*(_QWORD *)a4 + 8 + 32 * *a3 + 24), *(unsigned int *)(*(_QWORD *)a4 + 8 + 32 * v11 + 24)) & 0x80000000) != 0)
      {
        v12 = *a2;
        *a2 = *a3;
        *a3 = v12;
        return 2;
      }
    }
  }
  else
  {
    if ((v9 & 0x80000000) == 0)
      return 0;
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    if (((*(uint64_t (**)(_QWORD, _QWORD))(a4 + 16))(*(unsigned int *)(*(_QWORD *)a4 + 8 + 32 * *a2 + 24), *(unsigned int *)(*(_QWORD *)a4 + 8 + 32 * *a1 + 24)) & 0x80000000) != 0)
    {
      v14 = *a1;
      *a1 = *a2;
      *a2 = v14;
      return 2;
    }
  }
  return 1;
}

unsigned int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  unsigned int *v4;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  v4 = a2;
  v6 = *a1;
  if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * v6 + 24), *(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * *(a2 - 1) + 24)) & 0x80000000) != 0)
  {
    v8 = a1;
    do
    {
      v9 = v8[1];
      ++v8;
    }
    while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * v6 + 24), *(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * v9 + 24)) & 0x80000000) == 0);
  }
  else
  {
    v7 = a1 + 1;
    do
    {
      v8 = v7;
      if (v7 >= v4)
        break;
      ++v7;
    }
    while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * v6 + 24), *(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * *v8 + 24)) & 0x80000000) == 0);
  }
  if (v8 < v4)
  {
    do
      v10 = *--v4;
    while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * v6 + 24), *(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * v10 + 24)) & 0x80000000) != 0);
  }
  while (v8 < v4)
  {
    v11 = *v8;
    *v8 = *v4;
    *v4 = v11;
    do
    {
      v12 = v8[1];
      ++v8;
    }
    while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * v6 + 24), *(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * v12 + 24)) & 0x80000000) == 0);
    do
      v13 = *--v4;
    while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * v6 + 24), *(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * v13 + 24)) & 0x80000000) != 0);
  }
  if (v8 - 1 != a1)
    *a1 = *(v8 - 1);
  *(v8 - 1) = v6;
  return v8;
}

int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int *v9;
  int *v10;
  unsigned int v11;
  unsigned int v12;
  int *v13;
  int *v14;
  int v15;
  unsigned int v16;
  unsigned int v17;

  v6 = 0;
  v7 = *a1;
  do
    v8 = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * a1[++v6] + 24), *(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * v7 + 24));
  while (v8 < 0);
  v9 = &a1[v6];
  v10 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= a2)
        break;
      v12 = *--a2;
    }
    while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * v12 + 24), *(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * v7 + 24)) & 0x80000000) == 0);
  }
  else
  {
    do
      v11 = *--a2;
    while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * v11 + 24), *(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * v7 + 24)) & 0x80000000) == 0);
  }
  if (v9 < a2)
  {
    v13 = &a1[v6];
    v14 = a2;
    do
    {
      v15 = *v13;
      *v13 = *v14;
      *v14 = v15;
      do
      {
        v16 = v13[1];
        ++v13;
      }
      while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * v16 + 24), *(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * v7 + 24)) & 0x80000000) != 0);
      do
        v17 = *--v14;
      while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * v17 + 24), *(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * v7 + 24)) & 0x80000000) == 0);
    }
    while (v13 < v14);
    v10 = v13 - 1;
  }
  if (v10 != a1)
    *a1 = *v10;
  *v10 = v7;
  return v10;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int *v16;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * *(a2 - 1) + 24), *(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * *a1 + 24)) & 0x80000000) != 0)
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v9 = (unsigned int *)(a1 + 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(a1, a1 + 1, a1 + 2, a3);
      v10 = (unsigned int *)(a1 + 3);
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * *v10 + 24), *(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * *v9 + 24)) & 0x80000000) != 0)
    {
      v13 = *v10;
      v14 = v11;
      while (1)
      {
        *(int *)((char *)a1 + v14 + 12) = *(int *)((char *)a1 + v14 + 8);
        if (v14 == -8)
          break;
        v15 = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * v13 + 24), *(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * *(unsigned int *)((char *)a1 + v14 + 4) + 24));
        v14 -= 4;
        if ((v15 & 0x80000000) == 0)
        {
          v16 = (int *)((char *)a1 + v14 + 12);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v13;
      if (++v12 == 8)
        return v10 + 1 == (unsigned int *)a2;
    }
    v9 = v10;
    v11 += 4;
    if (++v10 == (unsigned int *)a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(int *a1, int *a2, int *a3, int *a4, uint64_t a5)
{
  uint64_t result;
  int v11;
  int v12;
  int v13;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(a1, a2, a3, a5);
  result = (*(uint64_t (**)(_QWORD, _QWORD))(a5 + 16))(*(unsigned int *)(*(_QWORD *)a5 + 8 + 32 * *a4 + 24), *(unsigned int *)(*(_QWORD *)a5 + 8 + 32 * *a3 + 24));
  if ((result & 0x80000000) != 0)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = (*(uint64_t (**)(_QWORD, _QWORD))(a5 + 16))(*(unsigned int *)(*(_QWORD *)a5 + 8 + 32 * *a3 + 24), *(unsigned int *)(*(_QWORD *)a5 + 8 + 32 * *a2 + 24));
    if ((result & 0x80000000) != 0)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = (*(uint64_t (**)(_QWORD, _QWORD))(a5 + 16))(*(unsigned int *)(*(_QWORD *)a5 + 8 + 32 * *a2 + 24), *(unsigned int *)(*(_QWORD *)a5 + 8 + 32 * *a1 + 24));
      if ((result & 0x80000000) != 0)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t a6)
{
  uint64_t result;
  int v13;
  int v14;
  int v15;
  int v16;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(a1, a2, a3, a4, a6);
  result = (*(uint64_t (**)(_QWORD, _QWORD))(a6 + 16))(*(unsigned int *)(*(_QWORD *)a6 + 8 + 32 * *a5 + 24), *(unsigned int *)(*(_QWORD *)a6 + 8 + 32 * *a4 + 24));
  if ((result & 0x80000000) != 0)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    result = (*(uint64_t (**)(_QWORD, _QWORD))(a6 + 16))(*(unsigned int *)(*(_QWORD *)a6 + 8 + 32 * *a4 + 24), *(unsigned int *)(*(_QWORD *)a6 + 8 + 32 * *a3 + 24));
    if ((result & 0x80000000) != 0)
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      result = (*(uint64_t (**)(_QWORD, _QWORD))(a6 + 16))(*(unsigned int *)(*(_QWORD *)a6 + 8 + 32 * *a3 + 24), *(unsigned int *)(*(_QWORD *)a6 + 8 + 32 * *a2 + 24));
      if ((result & 0x80000000) != 0)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        result = (*(uint64_t (**)(_QWORD, _QWORD))(a6 + 16))(*(unsigned int *)(*(_QWORD *)a6 + 8 + 32 * *a2 + 24), *(unsigned int *)(*(_QWORD *)a6 + 8 + 32 * *a1 + 24));
        if ((result & 0x80000000) != 0)
        {
          v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

unsigned int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (((*(uint64_t (**)(_QWORD, _QWORD))(a4 + 16))(*(unsigned int *)(*(_QWORD *)a4 + 8 + 32 * *v14 + 24), *(unsigned int *)(*(_QWORD *)a4 + 8 + 32 * *a1 + 24)) & 0x80000000) != 0)
        {
          v15 = *v14;
          *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 5)
    {
      v16 = (unint64_t)v8 >> 2;
      v17 = a2 - 1;
      do
      {
        v18 = *a1;
        v19 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(a1, a4, v16);
        if (v17 == v19)
        {
          *v19 = v18;
        }
        else
        {
          *v19 = *v17;
          *v17 = v18;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>((uint64_t)a1, (uint64_t)(v19 + 1), a4, v19 + 1 - a1);
        }
        --v17;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(uint64_t result, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 2)
    {
      v10 = ((uint64_t)a4 - result) >> 1;
      v11 = v10 + 1;
      v12 = (unsigned int *)(result + 4 * (v10 + 1));
      v13 = v10 + 2;
      if (v10 + 2 < a3
        && (*(int (**)(_QWORD, _QWORD))(a2 + 16))(*(unsigned int *)(*(_QWORD *)a2 + 8 + 32 * *v12 + 24), *(unsigned int *)(*(_QWORD *)a2 + 8 + 32 * v12[1] + 24)) < 0)
      {
        ++v12;
        v11 = v13;
      }
      result = (*(uint64_t (**)(_QWORD, _QWORD))(a2 + 16))(*(unsigned int *)(*(_QWORD *)a2 + 8 + 32 * *v12 + 24), *(unsigned int *)(*(_QWORD *)a2 + 8 + 32 * *v5 + 24));
      if ((result & 0x80000000) == 0)
      {
        v14 = *v5;
        do
        {
          v15 = v12;
          *v5 = *v12;
          if (v7 < v11)
            break;
          v16 = (2 * v11) | 1;
          v12 = (unsigned int *)(v6 + 4 * v16);
          if (2 * v11 + 2 < a3
            && (*(int (**)(_QWORD, _QWORD))(a2 + 16))(*(unsigned int *)(*(_QWORD *)a2 + 8 + 32 * *v12 + 24), *(unsigned int *)(*(_QWORD *)a2 + 8 + 32 * v12[1] + 24)) < 0)
          {
            ++v12;
            v16 = 2 * v11 + 2;
          }
          result = (*(uint64_t (**)(_QWORD, _QWORD))(a2 + 16))(*(unsigned int *)(*(_QWORD *)a2 + 8 + 32 * *v12 + 24), *(unsigned int *)(*(_QWORD *)a2 + 8 + 32 * v14 + 24));
          v5 = v15;
          v11 = v16;
        }
        while ((result & 0x80000000) == 0);
        *v15 = v14;
      }
    }
  }
  return result;
}

_DWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = &a1[v6 + 1];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3
      && (*(int (**)(_QWORD, _QWORD))(a2 + 16))(*(unsigned int *)(*(_QWORD *)a2 + 8 + 32 * *v9 + 24), *(unsigned int *)(*(_QWORD *)a2 + 8 + 32 * a1[v6 + 2] + 24)) < 0)
    {
      ++v9;
      v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,BOnode>> &,unsigned int *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = (_DWORD *)(result + 4 * (v4 >> 1));
    v9 = (_DWORD *)(a2 - 4);
    result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * *v8 + 24), *(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * *(unsigned int *)(a2 - 4) + 24));
    if ((result & 0x80000000) != 0)
    {
      v10 = *v9;
      do
      {
        v11 = v8;
        *v9 = *v8;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (_DWORD *)(v6 + 4 * v7);
        result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * *v8 + 24), *(unsigned int *)(*(_QWORD *)a3 + 8 + 32 * v10 + 24));
        v9 = v11;
      }
      while ((result & 0x80000000) != 0);
      *v11 = v10;
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,double>> &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  char v18;
  BOOL v19;
  unsigned int v20;

  v8 = (unsigned int *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * *(a2 - 1) + 16), *(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * *v9 + 16));
        if ((result & 0x80000000) != 0)
        {
          v20 = *v9;
          *v9 = *(a2 - 1);
          *(a2 - 1) = v20;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v9, v9 + 1, a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v9, v9 + 1, v9 + 2, a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, a3);
      default:
        if (v12 <= 95)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>((uint64_t)v9, a2, a3);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>((uint64_t)v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(&v9[v13 >> 1], v9, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v9, &v9[v13 >> 1], a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v9 + 1, v15 - 1, a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v9 + 2, &v9[v14 + 1], a2 - 3, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(v15 - 1, v15, &v9[v14 + 1], a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * *(v9 - 1) + 16), *(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * *v9 + 16)) & 0x80000000) == 0)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &>(v9, a2, a3);
            v9 = (unsigned int *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &>(v9, a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,double>> &,unsigned int *>(v9, v17, a3);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,double>> &,unsigned int *>(v17 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,double>> &,unsigned int *,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *,unsigned int *>(v9, a2, a2, a3);
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,double>> &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int *v16;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * *(a2 - 1) + 16), *(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * *a1 + 16)) & 0x80000000) != 0)
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v9 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned int>> &,unsigned int *>(a1, a1 + 1, a1 + 2, a3);
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * *v10 + 16), *(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * *v9 + 16)) & 0x80000000) != 0)
    {
      v13 = *v10;
      v14 = v11;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v14 + 12) = *(unsigned int *)((char *)a1 + v14 + 8);
        if (v14 == -8)
          break;
        v15 = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * v13 + 16), *(unsigned int *)(*(_QWORD *)a3 + 8 + 24 * *(unsigned int *)((char *)a1 + v14 + 4) + 16));
        v14 -= 4;
        if ((v15 & 0x80000000) == 0)
        {
          v16 = (unsigned int *)((char *)a1 + v14 + 12);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v13;
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v9 = v10;
    v11 += 4;
    if (++v10 == a2)
      return 1;
  }
}

uint64_t std::vector<PruneProbsRecord>::__push_back_slow_path<PruneProbsRecord const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x333333333333333)
    v9 = 0x666666666666666;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[40 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = &v10[40 * v9];
  v12 = *a2;
  *((_DWORD *)v11 + 2) = *((_DWORD *)a2 + 2);
  *(_QWORD *)v11 = v12;
  *((_QWORD *)v11 + 3) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)v11 + 2, (const void *)a2[2], a2[3], (a2[3] - a2[2]) >> 2);
  v16 += 40;
  std::vector<PruneProbsRecord>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1AD950E50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<PruneProbsRecord>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PruneProbsRecord>,std::reverse_iterator<PruneProbsRecord*>,std::reverse_iterator<PruneProbsRecord*>,std::reverse_iterator<PruneProbsRecord*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PruneProbsRecord>,std::reverse_iterator<PruneProbsRecord*>,std::reverse_iterator<PruneProbsRecord*>,std::reverse_iterator<PruneProbsRecord*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  char v16;
  __int128 v17;
  __int128 v18;

  v7 = a7;
  *(_QWORD *)&v18 = a6;
  *((_QWORD *)&v18 + 1) = a7;
  v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  v16 = 0;
  if (a3 == a5)
  {
    v13 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v10 = *(_QWORD *)(v9 - 40);
      v9 -= 40;
      v11 = *(_DWORD *)(v9 + 8);
      *(_QWORD *)(v7 - 24) = 0;
      v12 = (_QWORD *)(v7 - 24);
      *((_DWORD *)v12 - 2) = v11;
      *(v12 - 2) = v10;
      v12[1] = 0;
      v12[2] = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v12, *(const void **)(v9 + 16), *(_QWORD *)(v9 + 24), (uint64_t)(*(_QWORD *)(v9 + 24) - *(_QWORD *)(v9 + 16)) >> 2);
      v7 = *((_QWORD *)&v18 + 1) - 40;
      *((_QWORD *)&v18 + 1) -= 40;
    }
    while (v9 != a5);
    v13 = v18;
  }
  v16 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PruneProbsRecord>,std::reverse_iterator<PruneProbsRecord*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
  return v13;
}

void sub_1AD950F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PruneProbsRecord>,std::reverse_iterator<PruneProbsRecord*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PruneProbsRecord>,std::reverse_iterator<PruneProbsRecord*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PruneProbsRecord const&,PruneProbsRecord const&),std::__wrap_iter<PruneProbsRecord*>>(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  void *__p;
  _BYTE *v18;
  uint64_t v19;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v8 = v4 >> 1;
    v9 = (uint64_t *)(a1 + 40 * (v4 >> 1));
    v10 = (uint64_t *)(a2 - 40);
    if ((*a3)(v9, (uint64_t *)(a2 - 40)))
    {
      v11 = *v10;
      v16 = *((_DWORD *)v10 + 2);
      v15 = v11;
      v18 = 0;
      v19 = 0;
      __p = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(a2 - 24), *(_QWORD *)(a2 - 16), (uint64_t)(*(_QWORD *)(a2 - 16) - *(_QWORD *)(a2 - 24)) >> 2);
      do
      {
        v12 = v9;
        v13 = *v9;
        *((_DWORD *)v10 + 2) = *((_DWORD *)v9 + 2);
        *v10 = v13;
        if (v10 != v9)
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v10 + 16, (char *)v9[2], v9[3], (v9[3] - v9[2]) >> 2);
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = (uint64_t *)(a1 + 40 * v8);
        v10 = v12;
      }
      while (((*a3)(v9, &v15) & 1) != 0);
      v14 = v15;
      *((_DWORD *)v12 + 2) = v16;
      *v12 = v14;
      if (v12 != &v15)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v12 + 16, (char *)__p, (uint64_t)v18, (v18 - (_BYTE *)__p) >> 2);
      if (__p)
      {
        v18 = __p;
        operator delete(__p);
      }
    }
  }
}

void sub_1AD95111C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(PruneProbsRecord const&,PruneProbsRecord const&),std::__wrap_iter<PruneProbsRecord*>>(uint64_t a1, uint64_t a2, unsigned int (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  void *__p;
  _BYTE *v21;
  uint64_t v22;

  if (a4 >= 2)
  {
    v8 = *(_QWORD *)a1;
    v19 = *(_DWORD *)(a1 + 8);
    v18 = v8;
    v21 = 0;
    v22 = 0;
    __p = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2);
    v9 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PruneProbsRecord const&,PruneProbsRecord const&),std::__wrap_iter<PruneProbsRecord*>>(a1, a3, a4);
    v10 = v9;
    v11 = (uint64_t *)(a2 - 40);
    if (a2 - 40 == v9)
    {
      v17 = v18;
      *(_DWORD *)(v9 + 8) = v19;
      *(_QWORD *)v9 = v17;
      if (&v18 != (uint64_t *)v9)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v9 + 16), (char *)__p, (uint64_t)v21, (v21 - (_BYTE *)__p) >> 2);
    }
    else
    {
      v12 = *v11;
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(a2 - 32);
      *(_QWORD *)v9 = v12;
      v13 = *(char **)(a2 - 24);
      v14 = *(_QWORD *)(a2 - 16);
      v15 = (char *)(a2 - 24);
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v9 + 16), v13, v14, (v14 - (uint64_t)v13) >> 2);
      v16 = v18;
      *((_DWORD *)v11 + 2) = v19;
      *v11 = v16;
      if (v11 != &v18)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v15, (char *)__p, (uint64_t)v21, (v21 - (_BYTE *)__p) >> 2);
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PruneProbsRecord const&,PruneProbsRecord const&),std::__wrap_iter<PruneProbsRecord*>>(a1, v10 + 40, (uint64_t (**)(uint64_t *, uint64_t *))a3, 0xCCCCCCCCCCCCCCCDLL * ((v10 + 40 - a1) >> 3));
    }
    if (__p)
    {
      v21 = __p;
      operator delete(__p);
    }
  }
}

void sub_1AD951290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PruneProbsRecord const&,PruneProbsRecord const&),std::__wrap_iter<PruneProbsRecord*>>(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = a1 + 40 * v6 + 40;
    v10 = 2 * v6;
    v6 = (2 * v6) | 1;
    v11 = v10 + 2;
    if (v10 + 2 < a3 && (*a2)(v9, v9 + 40))
    {
      v9 += 40;
      v6 = v11;
    }
    v12 = *(_QWORD *)v9;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(v9 + 8);
    *(_QWORD *)a1 = v12;
    if (a1 != v9)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 16), *(char **)(v9 + 16), *(_QWORD *)(v9 + 24), (uint64_t)(*(_QWORD *)(v9 + 24) - *(_QWORD *)(v9 + 16)) >> 2);
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

void quasar::corrective_reranking::tokenize(uint64_t a1@<X0>, int a2@<W1>, __int128 *a3@<X8>)
{
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer end;
  uint64_t v8;
  std::string::size_type size;
  void *v10;
  std::string::size_type v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  unint64_t v34;
  std::vector<std::string> v35;

  std::string::basic_string[abi:ne180100]<0>(__p, "en_US");
  quasar::getWordBoundarySeparatedString((char *)a1, &v35);
  if (SBYTE7(v17) < 0)
    operator delete(__p[0]);
  v33 = 0uLL;
  v34 = 0;
  begin = v35.__begin_;
  end = v35.__end_;
  if (v35.__begin_ != v35.__end_)
  {
    v8 = 0;
    while (1)
    {
      if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
        size = begin->__r_.__value_.__l.__size_;
      else
        size = HIBYTE(begin->__r_.__value_.__r.__words[2]);
      quasar::trimUnicode((uint64_t)begin, (std::string *)__p);
      v8 += size;
      if (SBYTE7(v17) < 0)
      {
        v10 = __p[1];
        operator delete(__p[0]);
        if (v10)
        {
LABEL_12:
          if (!a2 || (quasar::corrective_reranking::isPunctuation((char *)begin) & 1) == 0)
          {
            if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
              v11 = begin->__r_.__value_.__l.__size_;
            else
              LODWORD(v11) = HIBYTE(begin->__r_.__value_.__r.__words[2]);
            quasar::SystemConfig::Version::Version(__p, v8 - v11, v11);
            v12 = *((_QWORD *)&v33 + 1);
            if (*((_QWORD *)&v33 + 1) >= v34)
            {
              v14 = std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__emplace_back_slow_path<std::string const&,quasar::corrective_reranking::TextRange>((uint64_t *)&v33, (__int128 *)begin, __p);
            }
            else
            {
              if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(*((std::string **)&v33 + 1), begin->__r_.__value_.__l.__data_, begin->__r_.__value_.__l.__size_);
              }
              else
              {
                v13 = *(_OWORD *)&begin->__r_.__value_.__l.__data_;
                *(_QWORD *)(*((_QWORD *)&v33 + 1) + 16) = *((_QWORD *)&begin->__r_.__value_.__l + 2);
                *(_OWORD *)v12 = v13;
              }
              *(void **)(v12 + 24) = __p[0];
              v14 = v12 + 32;
            }
            *((_QWORD *)&v33 + 1) = v14;
          }
        }
      }
      else if (BYTE7(v17))
      {
        goto LABEL_12;
      }
      if (++begin == end)
        goto LABEL_27;
    }
  }
  v8 = 0;
LABEL_27:
  v15 = *(unsigned __int8 *)(a1 + 23);
  if ((v15 & 0x80u) != 0)
    v15 = *(_QWORD *)(a1 + 8);
  if (v8 == v15)
  {
    *a3 = v33;
    *((_QWORD *)a3 + 2) = v34;
    a3 = &v33;
  }
  else if (quasar::gLogLevel >= 2)
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Mismatch between tokenizer input and output", 43);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
  }
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  __p[0] = &v33;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1AD9515AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__p);
  __p = (void *)(v14 - 112);
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = (void *)(v14 - 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t quasar::corrective_reranking::isPunctuation(char *a1)
{
  int v2;
  char *v3;
  unsigned int v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  std::basic_string<char32_t> *p_p;
  std::basic_string<char32_t> __p;
  _OWORD v12[3];
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = a1[23];
  if (v2 < 0)
  {
    if (*((_QWORD *)a1 + 1) != 1)
      goto LABEL_10;
    v3 = *(char **)a1;
  }
  else
  {
    v3 = a1;
    if (v2 != 1)
    {
LABEL_10:
      v6 = operator new();
      *(_OWORD *)(v6 + 8) = xmmword_1AE1402C0;
      *(_DWORD *)(v6 + 24) = 0;
      *(_QWORD *)v6 = &unk_1E5D40240;
      memset(v12, 0, sizeof(v12));
      v14 = 0u;
      v15 = 0u;
      v16 = 0u;
      v17 = 0u;
      v18 = 0u;
      v19 = 0u;
      v20 = 0u;
      v21 = 0u;
      v7 = a1[23];
      if ((v7 & 0x80u) == 0)
        v8 = (int *)a1;
      else
        v8 = *(int **)a1;
      if ((v7 & 0x80u) != 0)
        v7 = *((_QWORD *)a1 + 1);
      v13 = v6;
      v22 = 0;
      std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes((uint64_t)v12, v8, (int *)((char *)v8 + v7), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__p.__r_.__value_.__l.__size_ != 1)
        {
          v5 = 0;
          goto LABEL_23;
        }
        p_p = (std::basic_string<char32_t> *)__p.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 1)
        {
          v5 = 0;
          goto LABEL_25;
        }
        p_p = &__p;
      }
      v5 = u_ispunct(p_p->__r_.__value_.__s.__data_[0]) != 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_25:
        std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)v12);
        return v5;
      }
LABEL_23:
      operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_25;
    }
  }
  v4 = *v3;
  if ((v4 & 0x80000000) != 0)
  {
    if (!__maskrune(v4, 0x2000uLL))
      goto LABEL_10;
  }
  else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v4 + 60) & 0x2000) == 0)
  {
    goto LABEL_10;
  }
  return 1;
}

void sub_1AD95187C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  __cxa_end_catch();
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert(v9 - 240);
  _Unwind_Resume(a1);
}

void sub_1AD9518AC(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1AD9518A4);
}

void quasar::corrective_reranking::getTokenRanges(uint64_t *a1@<X0>, char **a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    v5 = 0;
    v6 = a2 + 2;
    do
    {
      if ((unint64_t)v5 >= *v6)
      {
        v7 = (v5 - *a2) >> 3;
        if ((unint64_t)(v7 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v8 = *v6 - (_QWORD)*a2;
        v9 = v8 >> 2;
        if (v8 >> 2 <= (unint64_t)(v7 + 1))
          v9 = v7 + 1;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
          v10 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10)
          v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v6, v10);
        else
          v11 = 0;
        v12 = &v11[8 * v7];
        *(_QWORD *)v12 = *(_QWORD *)(v2 + 24);
        v5 = v12 + 8;
        v14 = *a2;
        v13 = a2[1];
        if (v13 != *a2)
        {
          do
          {
            v15 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *((_QWORD *)v12 - 1) = v15;
            v12 -= 8;
          }
          while (v13 != v14);
          v13 = *a2;
        }
        *a2 = v12;
        a2[1] = v5;
        a2[2] = &v11[8 * v10];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *(_QWORD *)v5 = *(_QWORD *)(v2 + 24);
        v5 += 8;
      }
      a2[1] = v5;
      v2 += 32;
    }
    while (v2 != v3);
  }
}

void sub_1AD9519D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::getTokens(__int128 **a1@<X0>, uint64_t *a2@<X8>)
{
  __int128 *v2;
  __int128 *v3;
  unint64_t v5;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    v5 = 0;
    do
    {
      if (v5 >= a2[2])
      {
        v5 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(a2, v2);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a2, v2);
        v5 += 24;
      }
      a2[1] = v5;
      v2 += 2;
    }
    while (v2 != v3);
  }
}

void sub_1AD951A78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::detokenize(__int128 **a1@<X0>, std::string *a2@<X8>)
{
  std::string v3;
  std::string *v4;

  quasar::corrective_reranking::getTokens(a1, (uint64_t *)&v3);
  quasar::joinAndAutoSpace(&v3, a2);
  v4 = &v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v4);
}

void sub_1AD951AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

BOOL quasar::corrective_reranking::isCamelCaseUnicode(uint64_t a1)
{
  unsigned int v1;
  std::basic_string<char32_t>::size_type size;
  _BOOL8 v3;
  char v4;
  char v5;
  unint64_t v6;
  std::basic_string<char32_t> *p_p;
  std::basic_string<char32_t>::size_type v8;
  std::basic_string<char32_t> *v9;
  std::basic_string<char32_t> __p;

  quasar::toU32String(a1, &__p);
  LOBYTE(v1) = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size < 2)
  {
LABEL_4:
    v3 = 0;
    goto LABEL_21;
  }
  v4 = 0;
  v5 = 0;
  v6 = 1;
  do
  {
    if ((v1 & 1) != 0)
      p_p = (std::basic_string<char32_t> *)__p.__r_.__value_.__r.__words[0];
    else
      p_p = &__p;
    if (u_isupper(p_p->__r_.__value_.__s.__data_[v6]))
    {
      v5 = 1;
    }
    else
    {
      v4 |= u_islower(p_p->__r_.__value_.__s.__data_[v6]) != 0;
      if ((v5 & 1) == 0)
        goto LABEL_13;
    }
    if ((v4 & 1) != 0)
    {
      v3 = 1;
      goto LABEL_21;
    }
LABEL_13:
    ++v6;
    v1 = SHIBYTE(__p.__r_.__value_.__r.__words[2]) >> 31;
    v8 = __p.__r_.__value_.__l.__size_;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  while (v8 > v6);
  if (v4 & 1 | ((v5 & 1) == 0))
    goto LABEL_4;
  v9 = (std::basic_string<char32_t> *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &__p;
  v3 = u_islower(v9->__r_.__value_.__s.__data_[0]) != 0;
LABEL_21:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v3;
}

void sub_1AD951C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::findTextMatches(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  std::__wrap_iter<const char *> v6;
  std::__wrap_iter<const char *> v7;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *v8;
  std::__wrap_iter<const char *>::iterator_type v9;
  _BYTE *v10;
  std::__wrap_iter<const char *> *p_second;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  std::__shared_weak_count *cntrl;
  uint64_t *p_shared_owners;
  unint64_t v28;
  void *__p[2];
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v35;
  _OWORD v36[4];
  std::__wrap_iter<const char *>::iterator_type i;
  std::regex_iterator<std::__wrap_iter<const char *>, char> v38;
  std::regex_iterator<std::__wrap_iter<const char *>, char> __x;
  std::regex_iterator<std::__wrap_iter<const char *>, char> v40;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type __re;
  _QWORD v42[7];

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(&__re.__traits_, a2, 0);
  v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v5 & 0x80u) == 0)
    v6.__i_ = (std::__wrap_iter<const char *>::iterator_type)a1;
  else
    v6.__i_ = *(std::__wrap_iter<const char *>::iterator_type *)a1;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a1 + 8);
  v7.__i_ = &v6.__i_[v5];
  std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_iterator(&v40, v6, v7, &__re, match_default);
  memset(&__x.__match_.__prefix_, 0, 17);
  memset(&__x.__match_.__suffix_, 0, 17);
  __x.__match_.__ready_ = 0;
  __x.__match_.__position_start_.__i_ = 0;
  memset(&__x.__match_, 0, 41);
  memset(&__x, 0, 28);
  *(_OWORD *)&v38.__begin_.__i_ = *(_OWORD *)&v40.__begin_.__i_;
  *(_OWORD *)((char *)&v38.__end_.__i_ + 4) = *(_OWORD *)((char *)&v40.__end_.__i_ + 4);
  memset(&v38.__match_, 0, 24);
  std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__init_with_size[abi:ne180100]<std::sub_match<std::__wrap_iter<char const*>>*,std::sub_match<std::__wrap_iter<char const*>>*>((char *)&v38.__match_, (__int128 *)v40.__match_.__matches_.__begin_, (__int128 *)v40.__match_.__matches_.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v40.__match_.__matches_.__end_ - (char *)v40.__match_.__matches_.__begin_) >> 3));
  *(_OWORD *)&v38.__match_.__prefix_.second.__i_ = *(_OWORD *)&v40.__match_.__prefix_.second.__i_;
  v38.__match_.__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v40.__match_.__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
  *(_OWORD *)&v38.__match_.__suffix_.matched = *(_OWORD *)&v40.__match_.__suffix_.matched;
  v38.__match_.__position_start_.__i_ = v40.__match_.__position_start_.__i_;
  v38.__match_.__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v40.__match_.__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
  *(_OWORD *)&v38.__match_.__unmatched_.matched = *(_OWORD *)&v40.__match_.__unmatched_.matched;
  while (!std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&v38, &__x))
  {
    v32 = 0;
    v33 = 0;
    v34 = 0;
    std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__init_with_size[abi:ne180100]<std::sub_match<std::__wrap_iter<char const*>>*,std::sub_match<std::__wrap_iter<char const*>>*>((char *)&v32, (__int128 *)v38.__match_.__matches_.__begin_, (__int128 *)v38.__match_.__matches_.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v38.__match_.__matches_.__end_ - (char *)v38.__match_.__matches_.__begin_) >> 3));
    v36[1] = *(_OWORD *)&v38.__match_.__prefix_.second.__i_;
    v36[2] = v38.__match_.__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
    v36[3] = *(_OWORD *)&v38.__match_.__suffix_.matched;
    i = v38.__match_.__position_start_.__i_;
    v35 = v38.__match_.__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
    v36[0] = *(_OWORD *)&v38.__match_.__unmatched_.matched;
    std::match_results<std::__wrap_iter<char const*>>::str[abi:ne180100](&v32, 0, __p);
    if (v33 == v32)
      v8 = &v35;
    else
      v8 = (std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)v32;
    v9 = v8->first.__i_;
    v10 = (char *)v32 + 16;
    if (v33 == v32)
      v10 = v36;
    LODWORD(v31) = (_DWORD)v9 - (_DWORD)i;
    if (*v10)
    {
      if (v33 == v32)
        p_second = &v35.second;
      else
        p_second = (std::__wrap_iter<const char *> *)((char *)v32 + 8);
      v12 = p_second->__i_ - v9;
    }
    else
    {
      LODWORD(v12) = 0;
    }
    HIDWORD(v31) = v12 + (_DWORD)v9 - (_DWORD)i;
    v13 = a3[1];
    v14 = a3[2];
    if (v13 >= v14)
    {
      v16 = (uint64_t)(v13 - *a3) >> 5;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 59)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v18 = v14 - *a3;
      if (v18 >> 4 > v17)
        v17 = v18 >> 4;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0)
        v19 = 0x7FFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      v42[4] = a3 + 2;
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)(a3 + 2), v19);
      v21 = &v20[32 * v16];
      v42[0] = v20;
      v42[1] = v21;
      v42[3] = &v20[32 * v22];
      v23 = *(_OWORD *)__p;
      *((_QWORD *)v21 + 2) = v30;
      *(_OWORD *)v21 = v23;
      __p[1] = 0;
      v30 = 0;
      __p[0] = 0;
      *((_QWORD *)v21 + 3) = v31;
      v42[2] = v21 + 32;
      std::vector<quasar::corrective_reranking::MatchResult>::__swap_out_circular_buffer(a3, v42);
      v24 = a3[1];
      std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v42);
      v25 = SHIBYTE(v30);
      a3[1] = v24;
      if (v25 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v15 = *(_OWORD *)__p;
      *(_QWORD *)(v13 + 16) = v30;
      *(_OWORD *)v13 = v15;
      __p[1] = 0;
      v30 = 0;
      __p[0] = 0;
      *(_QWORD *)(v13 + 24) = v31;
      a3[1] = v13 + 32;
    }
    if (v32)
    {
      v33 = v32;
      operator delete(v32);
    }
    std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(&v38);
  }
  if (v38.__match_.__matches_.__begin_)
  {
    v38.__match_.__matches_.__end_ = v38.__match_.__matches_.__begin_;
    operator delete(v38.__match_.__matches_.__begin_);
  }
  if (__x.__match_.__matches_.__begin_)
  {
    __x.__match_.__matches_.__end_ = __x.__match_.__matches_.__begin_;
    operator delete(__x.__match_.__matches_.__begin_);
  }
  if (v40.__match_.__matches_.__begin_)
  {
    v40.__match_.__matches_.__end_ = v40.__match_.__matches_.__begin_;
    operator delete(v40.__match_.__matches_.__begin_);
  }
  cntrl = __re.__start_.__cntrl_;
  if (__re.__start_.__cntrl_)
  {
    p_shared_owners = &__re.__start_.__cntrl_->__shared_owners_;
    do
      v28 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v28 - 1, (unint64_t *)p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
      std::__shared_weak_count::__release_weak(cntrl);
    }
  }
  std::locale::~locale(&__re.__traits_.__loc_);
}

void sub_1AD951F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  void *a68;
  uint64_t a69;
  uint64_t v69;

  if (__p)
    operator delete(__p);
  if (a68)
  {
    a69 = (uint64_t)a68;
    operator delete(a68);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v69 - 160);
  std::locale::~locale((std::locale *)(v69 - 200));
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a64);
  _Unwind_Resume(a1);
}

_QWORD *std::match_results<std::__wrap_iter<char const*>>::str[abi:ne180100]@<X0>(_QWORD *result@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(result[1] - *result) >> 3) <= a2)
    v3 = (uint64_t)(result + 3);
  else
    v3 = *result + 24 * a2;
  if (*(_BYTE *)(v3 + 16))
    return std::string::__init_with_size[abi:ne180100]<char *,char *>(a3, *(char **)v3, *(char **)(v3 + 8), *(_QWORD *)(v3 + 8) - *(_QWORD *)v3);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

uint64_t quasar::corrective_reranking::classifyCasing(uint64_t a1)
{
  if ((quasar::isLowerUnicode(a1) & 1) != 0)
    return 0;
  if ((quasar::isUpperUnicode(a1) & 1) != 0)
    return 1;
  if ((quasar::isTitleUnicode(a1) & 1) != 0)
    return 2;
  if (quasar::corrective_reranking::isCamelCaseUnicode(a1))
    return 3;
  return 0;
}

void quasar::corrective_reranking::transferLetterCasing(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  std::basic_string<char32_t>::size_type size;
  std::basic_string<char32_t> *v6;
  uint64_t v7;
  std::basic_string<char32_t>::size_type v8;
  std::basic_string<char32_t> *v9;
  uint64_t v10;
  std::basic_string<char32_t>::size_type v11;
  std::basic_string<char32_t>::size_type v13;
  std::basic_string<char32_t> *v14;
  int v15;
  uint64_t v16;
  std::basic_string<char32_t>::size_type v17;
  std::basic_string<char32_t> *v18;
  void *__p[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  std::basic_string<char32_t> v36;
  std::basic_string<char32_t> v37;
  std::basic_string<char32_t> v38;
  std::basic_string<char32_t> v39;

  quasar::toU32String(a1, &v39);
  quasar::toU32String(a2, &v38);
  memset(&v37, 0, sizeof(v37));
  size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v39;
  else
    v6 = (std::basic_string<char32_t> *)v39.__r_.__value_.__r.__words[0];
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v39.__r_.__value_.__l.__size_;
  if (size)
  {
    v7 = 4 * size;
    do
    {
      if (v6->__r_.__value_.__s.__data_[0] != 32)
        std::basic_string<char32_t>::push_back(&v37, v6->__r_.__value_.__s.__data_[0]);
      v6 = (std::basic_string<char32_t> *)((char *)v6 + 4);
      v7 -= 4;
    }
    while (v7);
  }
  memset(&v36, 0, sizeof(v36));
  v8 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v38;
  else
    v9 = (std::basic_string<char32_t> *)v38.__r_.__value_.__r.__words[0];
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v8 = v38.__r_.__value_.__l.__size_;
  if (v8)
  {
    v10 = 4 * v8;
    do
    {
      if (v9->__r_.__value_.__s.__data_[0] != 32)
        std::basic_string<char32_t>::push_back(&v36, v9->__r_.__value_.__s.__data_[0]);
      v9 = (std::basic_string<char32_t> *)((char *)v9 + 4);
      v10 -= 4;
    }
    while (v10);
    v11 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v11 = v37.__r_.__value_.__l.__size_;
    v8 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v8 = v36.__r_.__value_.__l.__size_;
  }
  else
  {
    v11 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v11 = v37.__r_.__value_.__l.__size_;
  }
  if (v11 != v8 && quasar::gLogLevel > 1)
  {
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"transferLetterCasing: Strings must have the same length when spaces are ignored.", 80);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
  }
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v20 = 0;
  v13 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &v38;
  else
    v14 = (std::basic_string<char32_t> *)v38.__r_.__value_.__r.__words[0];
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v13 = v38.__r_.__value_.__l.__size_;
  if (v13)
  {
    v15 = 0;
    v16 = 4 * v13;
    do
    {
      if (v14->__r_.__value_.__s.__data_[0] == 32)
        goto LABEL_48;
      v17 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v17 = v37.__r_.__value_.__l.__size_;
      if (v17 <= v15)
      {
LABEL_48:
        std::basic_string<char32_t>::push_back((std::basic_string<char32_t> *)__p, 32);
      }
      else
      {
        if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v18 = &v37;
        else
          v18 = (std::basic_string<char32_t> *)v37.__r_.__value_.__r.__words[0];
        std::basic_string<char32_t>::push_back((std::basic_string<char32_t> *)__p, v18->__r_.__value_.__s.__data_[v15++]);
      }
      v14 = (std::basic_string<char32_t> *)((char *)v14 + 4);
      v16 -= 4;
    }
    while (v16);
  }
  quasar::toString((uint64_t)__p, a3);
  if (SBYTE7(v20) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
}

void sub_1AD952390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__p);
  if (*(char *)(v14 - 121) < 0)
    operator delete(*(void **)(v14 - 144));
  if (*(char *)(v14 - 97) < 0)
    operator delete(*(void **)(v14 - 120));
  if (*(char *)(v14 - 73) < 0)
    operator delete(*(void **)(v14 - 96));
  if (*(char *)(v14 - 49) < 0)
    operator delete(*(void **)(v14 - 72));
  _Unwind_Resume(a1);
}

unint64_t quasar::corrective_reranking::findAdjacentWordsToTarget(uint64_t a1, uint64_t a2, std::string *a3, uint64_t *a4, int a5)
{
  _DWORD *v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  float v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int isPunctuation;
  int v21;
  int v22;
  uint64_t TokenIndexFromTextIndex;
  uint64_t v24;
  uint64_t v26;
  uint64_t v30;
  int v33;
  std::string __p[11];

  if (*a4 == a4[1])
    return 0;
  v7 = (_DWORD *)a1;
  v8 = *(unsigned __int8 *)(a1 + 23);
  if (*(char *)(a1 + 23) < 0)
  {
    if (*(_QWORD *)(a1 + 8) != 11)
      goto LABEL_11;
    v9 = *(uint64_t **)a1;
  }
  else
  {
    v9 = (uint64_t *)a1;
    if (v8 != 11)
    {
LABEL_11:
      if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 8))
        v13 = 0.0;
      else
        v13 = (float)**(int **)a2;
      goto LABEL_17;
    }
  }
  v10 = *v9;
  v11 = *(uint64_t *)((char *)v9 + 3);
  if (v10 != 0x6661747265736E69 || v11 != 0x7265746661747265)
    goto LABEL_11;
  v14 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 == v14)
    v13 = INFINITY;
  else
    v13 = (float)(*(_DWORD *)(v14 - 4) + *(_DWORD *)(v14 - 8));
LABEL_17:
  v15 = (int)v13;
  if ((v8 & 0x80) != 0)
  {
    if (*(_QWORD *)(a1 + 8) != 11)
      goto LABEL_34;
    v16 = *(uint64_t **)a1;
  }
  else
  {
    v16 = (uint64_t *)a1;
    if (v8 != 11)
      goto LABEL_34;
  }
  v17 = *v16;
  v18 = *(uint64_t *)((char *)v16 + 3);
  if (v17 == 0x6661747265736E69 && v18 == 0x7265746661747265)
  {
    quasar::joinAndAutoSpace(a3, __p);
    isPunctuation = quasar::corrective_reranking::isPunctuation((char *)__p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if (v15 <= 1)
      v21 = 1;
    else
      v21 = v15;
    v22 = v21 - 1;
    if (isPunctuation)
      v15 = v22;
  }
LABEL_34:
  TokenIndexFromTextIndex = quasar::corrective_reranking::getTokenIndexFromTextIndex(a4, v15);
  if ((*((_BYTE *)v7 + 23) & 0x80) == 0)
  {
    v24 = 0;
    switch(*((_BYTE *)v7 + 23))
    {
      case 6:
        if (*v7 != 1701602660 || *((_WORD *)v7 + 2) != 25972)
          return 0;
        goto LABEL_73;
      case 7:
        if (*v7 != 1819305330 || *(_DWORD *)((char *)v7 + 3) != 1701011820)
          return 0;
        goto LABEL_86;
      case 0xB:
        if (*(_QWORD *)v7 != 0x6661747265736E69 || *(_QWORD *)((char *)v7 + 3) != 0x7265746661747265)
          return 0;
        goto LABEL_61;
      case 0xC:
        goto LABEL_81;
      default:
        return v24;
    }
  }
  v26 = *((_QWORD *)v7 + 1);
  if (v26 == 6)
  {
    if (**(_DWORD **)v7 == 1701602660 && *(_WORD *)(*(_QWORD *)v7 + 4) == 25972)
    {
LABEL_73:
      if ((TokenIndexFromTextIndex & 0x80000000) == 0)
      {
        if (!(_DWORD)TokenIndexFromTextIndex)
          return 0;
        goto LABEL_75;
      }
      goto LABEL_92;
    }
    return 0;
  }
  if (v26 == 7)
  {
    if (**(_DWORD **)v7 == 1819305330 && *(_DWORD *)(*(_QWORD *)v7 + 3) == 1701011820)
    {
LABEL_86:
      if ((TokenIndexFromTextIndex & 0x80000000) == 0)
        goto LABEL_89;
      goto LABEL_92;
    }
LABEL_79:
    if (v26 != 12)
      return 0;
    v7 = *(_DWORD **)v7;
LABEL_81:
    if (*(_QWORD *)v7 != 0x6562747265736E69 || v7[2] != 1701998438)
      return 0;
    if ((TokenIndexFromTextIndex & 0x80000000) == 0)
    {
LABEL_89:
      if (!(_DWORD)TokenIndexFromTextIndex)
        return 0;
LABEL_75:
      v30 = TokenIndexFromTextIndex;
      LODWORD(TokenIndexFromTextIndex) = TokenIndexFromTextIndex - 1;
      goto LABEL_76;
    }
LABEL_92:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "targetTokenIndex >= 0");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  if (v26 != 11)
    goto LABEL_79;
  if (**(_QWORD **)v7 != 0x6661747265736E69 || *(_QWORD *)(*(_QWORD *)v7 + 3) != 0x7265746661747265)
  {
    v26 = *((_QWORD *)v7 + 1);
    goto LABEL_79;
  }
LABEL_61:
  if ((TokenIndexFromTextIndex & 0x80000000) != 0)
    goto LABEL_92;
  v30 = (TokenIndexFromTextIndex + 1);
LABEL_76:
  v33 = TokenIndexFromTextIndex - a5;
  if ((int)TokenIndexFromTextIndex < a5)
    v33 = -1;
  return (v33 + 1) | (unint64_t)(v30 << 32);
}

void sub_1AD95284C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

uint64_t quasar::corrective_reranking::getTokenIndexFromTextIndex(uint64_t *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _DWORD *i;
  int v10;
  int v11;
  uint64_t v13;
  _OWORD v14[17];

  v3 = *a1;
  v2 = a1[1];
  if (*a1 == v2)
    return 0xFFFFFFFFLL;
  if (*(_DWORD *)(v3 + 24) > a2)
    return 0;
  v5 = *(_DWORD *)(v2 - 4) + *(_DWORD *)(v2 - 8);
  v6 = v2 - v3;
  if (v5 <= a2)
    return ((unint64_t)v6 >> 5) - 1;
  result = 0;
  v7 = v6 >> 5;
  if (v7 <= 1)
    v8 = 1;
  else
    v8 = v7;
  for (i = (_DWORD *)(v3 + 28); ; i += 8)
  {
    v10 = *(i - 1);
    v11 = *i + v10;
    if (v10 <= a2 && v11 > a2)
      break;
    v13 = result + 1;
    if (v7 > result + 1 && v11 <= a2 && i[7] > a2)
      return (result + 1);
    ++result;
    if (v8 == v13)
    {
      memset(v14, 0, sizeof(v14));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, "Reached end of getTokenIndexFromTextIndex");
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v14);
    }
  }
  return result;
}

void sub_1AD952974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&a9);
}

void quasar::corrective_reranking::stripDiacritics(quasar::QsrText *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  void **v5;
  unint64_t v6;
  uint64_t v7;
  std::basic_string<char32_t> v8;
  void *__p[2];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  void *v26[2];
  uint64_t v27;

  v26[0] = 0;
  v26[1] = 0;
  v27 = 0;
  v4 = quasar::QsrText::SingletonInstance(a1);
  if ((quasar::QsrText::normalizeUnicode(v4, (uint64_t)a1, (uint64_t)v26, 1, 0) & 1) != 0)
  {
    v5 = __p;
    quasar::toU32String((uint64_t)v26, (std::basic_string<char32_t> *)__p);
    memset(&v8, 0, sizeof(v8));
    v6 = BYTE7(v10);
    if (SBYTE7(v10) < 0)
    {
      v5 = (void **)__p[0];
      v6 = (unint64_t)__p[1];
    }
    if (v6)
    {
      v7 = 4 * v6;
      do
      {
        if (u_charType(*(_DWORD *)v5) != 6)
          std::basic_string<char32_t>::push_back(&v8, *(_DWORD *)v5);
        v5 = (void **)((char *)v5 + 4);
        v7 -= 4;
      }
      while (v7);
    }
    quasar::toString((uint64_t)&v8, a2);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v8.__r_.__value_.__l.__data_);
    if (SBYTE7(v10) < 0)
      operator delete(__p[0]);
  }
  else
  {
    if (quasar::gLogLevel >= 1)
    {
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      v12 = 0u;
      v13 = 0u;
      v10 = 0u;
      v11 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to normalize unicode", 27);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
    }
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
  }
  if (SHIBYTE(v27) < 0)
    operator delete(v26[0]);
}

void sub_1AD952AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a16);
  if (*(char *)(v21 - 33) < 0)
    operator delete(*(void **)(v21 - 56));
  _Unwind_Resume(a1);
}

_QWORD *quasar::corrective_reranking::operator<<(_QWORD *a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  std::string *v7;
  __int128 v8;
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  std::string *v14;
  std::string::size_type size;
  _QWORD *v16;
  uint64_t v17;
  unsigned int **v18;
  int *v19;
  int *v20;
  float v21;
  _QWORD *v22;
  std::string *v23;
  std::string::size_type v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  std::string *p_p;
  std::string::size_type v33;
  _QWORD *v34;
  std::string *v35;
  std::string::size_type v36;
  _QWORD *v37;
  _QWORD *v38;
  std::string __p;
  void *v41[3];
  std::string v42;
  std::string v43;
  void *v44[2];
  int64_t v45;

  v3 = **a2;
  if ((*a2)[1] != v3)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      if (*((_BYTE *)a2 + 8))
      {
        std::to_string(&v43, *(float *)(v3 + v5 + 144));
        v7 = std::string::insert(&v43, 0, " ");
        v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
        v45 = v7->__r_.__value_.__r.__words[2];
        *(_OWORD *)v44 = v8;
        v7->__r_.__value_.__l.__size_ = 0;
        v7->__r_.__value_.__r.__words[2] = 0;
        v7->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v43.__r_.__value_.__l.__data_);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v44, "");
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"PARSE ", 6);
      v9 = (_QWORD *)std::ostream::operator<<();
      if (v45 >= 0)
        v10 = v44;
      else
        v10 = (void **)v44[0];
      if (v45 >= 0)
        v11 = HIBYTE(v45);
      else
        v11 = (uint64_t)v44[1];
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)":\n  Intent: ", 12);
      quasar::corrective_reranking::Parse::getIntent((quasar::corrective_reranking::Parse *)(v3 + v5), (uint64_t)&v43);
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &v43;
      else
        v14 = (std::string *)v43.__r_.__value_.__r.__words[0];
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      else
        size = v43.__r_.__value_.__l.__size_;
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\n  Target: ", 11);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v43.__r_.__value_.__l.__data_);
      quasar::corrective_reranking::Parse::getTarget((quasar::corrective_reranking::Parse *)(v3 + v5), (uint64_t *)&v43);
      if (v43.__r_.__value_.__r.__words[0] == v43.__r_.__value_.__l.__size_
        || (v17 = v3 + v5, !*(_BYTE *)(v3 + v5 + 112)))
      {
        v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
      }
      else
      {
        v18 = (unsigned int **)(v17 + 88);
        v19 = *(int **)(v17 + 88);
        v20 = *(int **)(v17 + 96);
        if (v19 == v20)
        {
          v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
LABEL_29:
          v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\n    Parsed from utterance: ", 28);
          quasar::corrective_reranking::Parse::getTarget((quasar::corrective_reranking::Parse *)(v3 + v5), (uint64_t *)&v42);
          quasar::joinAndAutoSpace(&v42, &v43);
          if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v23 = &v43;
          else
            v23 = (std::string *)v43.__r_.__value_.__r.__words[0];
          if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v24 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
          else
            v24 = v43.__r_.__value_.__l.__size_;
          v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
          v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"\n    Matched text range: ", 25);
          quasar::corrective_reranking::TargetRange::toCodePoints(v18, a2[2], v41);
          v27 = quasar::corrective_reranking::operator<<(v26, (uint64_t *)v41);
          v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" (utf8: ", 8);
          v29 = quasar::corrective_reranking::operator<<(v28, (uint64_t *)v18);
          v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)")", 1);
          v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"\n    Matched text: ", 19);
          quasar::corrective_reranking::TargetRange::getTargetFromText((uint64_t)v18, (uint64_t)a2[2], &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v33 = __p.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)p_p, v33);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (v41[0])
          {
            v41[1] = v41[0];
            operator delete(v41[0]);
          }
          if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v43.__r_.__value_.__l.__data_);
          v41[0] = &v42;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v41);
          goto LABEL_48;
        }
        v21 = (float)(*(v20 - 1) + *(v20 - 2)) - (float)*v19;
        v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
        if (v21 != 0.0)
          goto LABEL_29;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"None", 4);
LABEL_48:
      v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\n  payload: ", 12);
      quasar::corrective_reranking::Parse::getPayload((quasar::corrective_reranking::Parse *)(v3 + v5), &v43);
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v43;
      else
        v35 = (std::string *)v43.__r_.__value_.__r.__words[0];
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      else
        v36 = v43.__r_.__value_.__l.__size_;
      v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v35, v36);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"\n  weight: ", 11);
      v38 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"\n", 1);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v43.__r_.__value_.__l.__data_);
      if (SHIBYTE(v45) < 0)
        operator delete(v44[0]);
      ++v6;
      v3 = **a2;
      v5 += 232;
    }
    while (0x34F72C234F72C235 * (((*a2)[1] - v3) >> 3) > v6);
  }
  return a1;
}

void sub_1AD952F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char *a15, char *a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a14 < 0)
    operator delete(__p);
  if (a15)
  {
    a16 = a15;
    operator delete(a15);
  }
  if (a26 < 0)
    operator delete(a21);
  a15 = &a18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(a1);
}

char *std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__init_with_size[abi:ne180100]<std::sub_match<std::__wrap_iter<char const*>>*,std::sub_match<std::__wrap_iter<char const*>>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v7 = v8;
      v7 += 24;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1AD95306C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__emplace_back_slow_path<std::string const&,quasar::corrective_reranking::TextRange>(uint64_t *a1, __int128 *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  std::string *v13;
  __int128 v14;
  uint64_t v15;
  _QWORD v17[2];
  std::string *v18;
  char *v19;
  uint64_t *v20;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v20 = a1 + 2;
  if (v11)
    v12 = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v9, v11);
  else
    v12 = 0;
  v13 = (std::string *)&v12[4 * v5];
  v17[0] = v12;
  v17[1] = v13;
  v18 = v13;
  v19 = (char *)&v12[4 * v11];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v13 = v18;
  }
  else
  {
    v14 = *a2;
    v13->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  v12[4 * v5 + 3] = *a3;
  v18 = (std::string *)((char *)v13 + 32);
  std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__swap_out_circular_buffer(a1, v17);
  v15 = a1[1];
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v17);
  return v15;
}

void sub_1AD95318C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,quasar::corrective_reranking::TextRange>>,std::reverse_iterator<std::pair<std::string,quasar::corrective_reranking::TextRange>*>,std::reverse_iterator<std::pair<std::string,quasar::corrective_reranking::TextRange>*>,std::reverse_iterator<std::pair<std::string,quasar::corrective_reranking::TextRange>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,quasar::corrective_reranking::TextRange>>,std::reverse_iterator<std::pair<std::string,quasar::corrective_reranking::TextRange>*>,std::reverse_iterator<std::pair<std::string,quasar::corrective_reranking::TextRange>*>,std::reverse_iterator<std::pair<std::string,quasar::corrective_reranking::TextRange>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::corrective_reranking::TextRange>>,std::reverse_iterator<std::pair<std::string,quasar::corrective_reranking::TextRange>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::corrective_reranking::TextRange>>,std::reverse_iterator<std::pair<std::string,quasar::corrective_reranking::TextRange>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,std::reverse_iterator<quasar::TextTokenizer::Token*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::vector<quasar::corrective_reranking::MatchResult>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::corrective_reranking::MatchResult>,std::reverse_iterator<quasar::corrective_reranking::MatchResult*>,std::reverse_iterator<quasar::corrective_reranking::MatchResult*>,std::reverse_iterator<quasar::corrective_reranking::MatchResult*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::corrective_reranking::MatchResult>,std::reverse_iterator<quasar::corrective_reranking::MatchResult*>,std::reverse_iterator<quasar::corrective_reranking::MatchResult*>,std::reverse_iterator<quasar::corrective_reranking::MatchResult*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::MatchResult>,std::reverse_iterator<quasar::corrective_reranking::MatchResult*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::MatchResult>,std::reverse_iterator<quasar::corrective_reranking::MatchResult*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,std::reverse_iterator<quasar::TextTokenizer::Token*>>::operator()[abi:ne180100](a1);
  return a1;
}

double quasar::GeoRegion::GeoRegion(quasar::GeoRegion *this)
{
  double result;

  *(_QWORD *)this = &off_1E5D3BEB8;
  *((_QWORD *)this + 12) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 11) = (char *)this + 96;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = (char *)this + 120;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = (char *)this + 144;
  return result;
}

void quasar::GeoRegion::~GeoRegion(quasar::GeoRegion *this)
{
  *(_QWORD *)this = &off_1E5D3BEB8;
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 136, *((_QWORD **)this + 18));
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 112, *((_QWORD **)this + 15));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 88, *((_QWORD **)this + 12));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 72);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 56);
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  quasar::GeoRegion::~GeoRegion(this);
  JUMPOUT(0x1AF44D190);
}

void quasar::GeoRegion::loadAndEraseFromJson(uint64_t a1, uint64_t a2, quasar::PTree *a3, _DWORD *a4)
{
  __int128 *v8;
  uint64_t ChildOptional;
  const quasar::PTree *v10;
  uint64_t v11;
  const quasar::PTree *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  __int128 *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  quasar::PTree *v31;
  std::string *v32;
  std::string *v33;
  __int128 v34;
  uint64_t v35;
  std::string *v36;
  std::string *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t **v42;
  uint64_t String;
  uint64_t v44;
  const std::string *v45;
  uint64_t *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  void *v58[2];
  char v59;
  void *__p[2];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  char v78;

  v8 = (__int128 *)(a1 + 8);
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "long-name");
  ChildOptional = quasar::PTree::getChildOptional((uint64_t)a3, (uint64_t)__p);
  v11 = ChildOptional;
  if (SBYTE7(v61) < 0)
  {
    operator delete(__p[0]);
    if (!v11)
      goto LABEL_13;
  }
  else if (!ChildOptional)
  {
    goto LABEL_13;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Long-name field not allowed");
  std::operator+<char>();
  quasar::GeoVersionChecker::enforceVersion(a4, (uint64_t)__p, 2, 4, (uint64_t)&v77);
  if (v78 < 0)
    operator delete((void *)v77);
  if (SBYTE7(v61) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(&v77, "long-name");
  quasar::PTree::getAndEraseString((uint64_t)a3, &v77, (std::string *)__p);
  std::string::operator=((std::string *)(a1 + 32), (const std::string *)__p);
  if (SBYTE7(v61) < 0)
    operator delete(__p[0]);
  if (v78 < 0)
    operator delete((void *)v77);
LABEL_13:
  if (quasar::BitmapRegion::shouldLoad(a3, v10))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Bitmap region not allowed");
    std::operator+<char>();
    quasar::GeoVersionChecker::enforceVersion(a4, (uint64_t)__p, 2, 4, (uint64_t)&v77);
    if (v78 < 0)
      operator delete((void *)v77);
    if (SBYTE7(v61) < 0)
      operator delete(__p[0]);
    std::allocate_shared[abi:ne180100]<quasar::BitmapRegion,std::allocator<quasar::BitmapRegion>,std::string const&,void>((__int128 *)a2, __p);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 56, (__int128 *)__p);
    v13 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v14 = (unint64_t *)((char *)__p[1] + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    quasar::BitmapRegion::loadAndEraseFromJson(*(quasar::BitmapRegion **)(a1 + 56), a3);
  }
  if (quasar::CircleRegion::shouldLoad(a3, v12))
  {
    std::allocate_shared[abi:ne180100]<quasar::CircleRegion,std::allocator<quasar::CircleRegion>,std::string const&,void>((__int128 *)a2, __p);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 72, (__int128 *)__p);
    v16 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v17 = (unint64_t *)((char *)__p[1] + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    quasar::CircleRegion::loadAndEraseFromJson(*(quasar::CircleRegion **)(a1 + 72), a3);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Circle info required");
    std::operator+<char>();
    quasar::GeoVersionChecker::enforceVersion(a4, (uint64_t)__p, 2, 4, (uint64_t)&v77);
    if (v78 < 0)
      operator delete((void *)v77);
    if (SBYTE7(v61) < 0)
      operator delete(__p[0]);
  }
  v19 = *(_QWORD *)(a1 + 72);
  if (!*(_QWORD *)(a1 + 56))
  {
    if (v19)
      goto LABEL_61;
    v25 = *(char *)(a1 + 31);
    if (v25 < 0)
    {
      if (*(_QWORD *)(a1 + 16) != 8)
        goto LABEL_99;
      v26 = *(__int128 **)v8;
    }
    else
    {
      v26 = v8;
      if (v25 != 8)
        goto LABEL_99;
    }
    if (*(_QWORD *)v26 == 0x6D6C72657473616DLL)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "Default region is not part of geo-config file in older versions ");
      std::operator+<char>();
      quasar::GeoVersionChecker::enforceVersion(a4, (uint64_t)__p, 4, 4, (uint64_t)&v77);
      if (v78 < 0)
        operator delete((void *)v77);
      if (SBYTE7(v61) < 0)
        operator delete(__p[0]);
      std::allocate_shared[abi:ne180100]<quasar::BitmapRegion,std::allocator<quasar::BitmapRegion>,std::string &,void>(v8, __p);
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 56, (__int128 *)__p);
      v27 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v28 = (unint64_t *)((char *)__p[1] + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      if (fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Start(*(_QWORD *)(a1 + 56)))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "(bitmapRegion->getBitmapColor()) == (geoconfig::NULL_REFERENCE_BITMAP_COLOR)");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
      }
      goto LABEL_61;
    }
LABEL_99:
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Neither bitmap nor circle info found in region ", 47);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v57, a2);
    goto LABEL_98;
  }
  if (v19)
  {
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Both circle and bitmap info used in region ", 43);
    v21 = *(char *)(a2 + 23);
    if (v21 >= 0)
      v22 = a2;
    else
      v22 = *(_QWORD *)a2;
    if (v21 >= 0)
      v23 = *(unsigned __int8 *)(a2 + 23);
    else
      v23 = *(_QWORD *)(a2 + 8);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v24, ", which is prohibited");
    goto LABEL_98;
  }
LABEL_61:
  std::string::basic_string[abi:ne180100]<0>(__p, "model-map");
  v30 = quasar::PTree::getChildOptional((uint64_t)a3, (uint64_t)__p);
  v31 = (quasar::PTree *)v30;
  if (SBYTE7(v61) < 0)
  {
    operator delete(__p[0]);
    if (v31)
      goto LABEL_63;
  }
  else if (v30)
  {
LABEL_63:
    v32 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v77, "model-map");
    v33 = std::string::append(v32, " not supported");
    v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    *(_QWORD *)&v61 = *((_QWORD *)&v33->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    std::operator+<char>();
    quasar::GeoVersionChecker::enforceVersion(a4, (uint64_t)__p, 4, 4, (uint64_t)v58);
    goto LABEL_68;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "classLM-template-to-fst-map");
  v35 = quasar::PTree::getChildOptional((uint64_t)a3, (uint64_t)__p);
  v31 = (quasar::PTree *)v35;
  if (SBYTE7(v61) < 0)
  {
    operator delete(__p[0]);
    if (v31)
      goto LABEL_67;
LABEL_87:
    if (quasar::gLogLevel >= 2)
    {
      v75 = 0u;
      v76 = 0u;
      v73 = 0u;
      v74 = 0u;
      v71 = 0u;
      v72 = 0u;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Neither ", 8);
      v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"model-map", 9);
      v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)" nor ", 5);
      v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"classLM-template-to-fst-map", 27);
      v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" found for region ", 18);
      v52 = *(char *)(a1 + 31);
      if (v52 >= 0)
        v53 = (uint64_t)v8;
      else
        v53 = *(_QWORD *)(a1 + 8);
      if (v52 >= 0)
        v54 = *(unsigned __int8 *)(a1 + 31);
      else
        v54 = *(_QWORD *)(a1 + 16);
      v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, v53, v54);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)" in geo-config", 14);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
    }
    return;
  }
  if (!v35)
    goto LABEL_87;
LABEL_67:
  v36 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v77, "classLM-template-to-fst-map");
  v37 = std::string::append(v36, " not supported");
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  *(_QWORD *)&v61 = *((_QWORD *)&v37->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  std::operator+<char>();
  quasar::GeoVersionChecker::enforceVersion(a4, (uint64_t)__p, 1, 3, (uint64_t)v58);
LABEL_68:
  if (v59 < 0)
    operator delete(v58[0]);
  if (SBYTE7(v61) < 0)
    operator delete(__p[0]);
  if (v78 < 0)
    operator delete((void *)v77);
  if (!quasar::PTree::empty(v31))
  {
    v39 = quasar::PTree::begin(v31);
    v40 = quasar::PTree::end(v31);
    if (v39 != v40)
    {
      v41 = v40;
      v42 = (uint64_t **)(a1 + 88);
      while (1)
      {
        String = quasar::PTree::getString((quasar::PTree *)(v39 + 24));
        v44 = *(unsigned __int8 *)(String + 23);
        if ((v44 & 0x80u) != 0)
          v44 = *(_QWORD *)(String + 8);
        if (!v44)
          break;
        v45 = (const std::string *)String;
        __p[0] = (void *)v39;
        v46 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v42, (const void **)v39, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
        std::string::operator=((std::string *)(v46 + 7), v45);
        v39 += 88;
        if (v39 == v41)
          goto LABEL_81;
      }
      v75 = 0u;
      v76 = 0u;
      v73 = 0u;
      v74 = 0u;
      v71 = 0u;
      v72 = 0u;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Empty model file for placeholder ", 33);
      std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v56, v39);
LABEL_98:
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
LABEL_81:
    if (quasar::GeoVersionChecker::checkVersion(a4, 4, 4))
      std::string::basic_string[abi:ne180100]<0>(__p, "model-map");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "classLM-template-to-fst-map");
    quasar::PTree::erase((uint64_t)a3, (unsigned __int8 *)__p);
    if (SBYTE7(v61) < 0)
      operator delete(__p[0]);
  }
}

void sub_1AD953D84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 81) < 0)
    operator delete(*(void **)(v21 - 104));
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1AD953E60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

BOOL quasar::GeoRegion::loadModels(quasar::GeoRegion *this, quasar::ModelLoader *a2, quasar::filesystem::Path *a3)
{
  _QWORD *v3;
  char *v4;
  char *v7;
  uint64_t **v8;
  uint64_t **v9;
  _BOOL8 v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  std::string *v17;
  std::string::size_type size;
  uint64_t *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  __int128 *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  BOOL v28;
  __int128 v30;
  std::string v31;
  __int128 *v32;
  _QWORD v33[3];
  _QWORD *v34;
  _QWORD v35[3];
  _QWORD *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)*((_QWORD *)this + 11);
  v4 = (char *)this + 96;
  if (v3 != (_QWORD *)((char *)this + 96))
  {
    v7 = (char *)this + 8;
    v8 = (uint64_t **)((char *)this + 136);
    v9 = (uint64_t **)((char *)this + 112);
    while (1)
    {
      if (*((char *)v3 + 79) < 0)
        std::string::__init_copy_ctor_external(&v31, (const std::string::value_type *)v3[7], v3[8]);
      else
        v31 = *(std::string *)(v3 + 7);
      quasar::filesystem::Path::makeAbsolute((uint64_t)a3, (uint64_t)&v31, (std::string *)&v37);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v37;
      v31.__r_.__value_.__r.__words[2] = v38;
      v10 = quasar::filesystem::exists((char *)&v31);
      if (!v10)
      {
        if (quasar::gLogLevel >= 1)
        {
          v52 = 0u;
          v53 = 0u;
          v50 = 0u;
          v51 = 0u;
          v48 = 0u;
          v49 = 0u;
          v46 = 0u;
          v47 = 0u;
          v44 = 0u;
          v45 = 0u;
          v42 = 0u;
          v43 = 0u;
          v40 = 0u;
          v41 = 0u;
          v38 = 0u;
          v39 = 0u;
          v37 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v37);
          v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)"GeoLM: Model cannot be loaded since it does not exist: ", 55);
          if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v17 = &v31;
          else
            v17 = (std::string *)v31.__r_.__value_.__r.__words[0];
          if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
          else
            size = v31.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, size);
          quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v37);
        }
        goto LABEL_41;
      }
      if (quasar::GeoRegion::isFst((uint64_t)&v31))
      {
        *(_QWORD *)&v37 = &off_1E5D3EDD0;
        *((_QWORD *)&v37 + 1) = a2;
        *((_QWORD *)&v38 + 1) = &v37;
        v36 = v35;
        v35[0] = &off_1E5D3EDD0;
        v35[1] = a2;
        quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::createRegionLmPlug((__int128 *)&v31, (uint64_t)v7, (uint64_t)v35, &v30);
        v32 = (__int128 *)(v3 + 4);
        v11 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (const void **)v3 + 4, (uint64_t)&std::piecewise_construct, &v32);
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)(v11 + 7), &v30);
        v12 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
        if (*((_QWORD *)&v30 + 1))
        {
          v13 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v15 = v36;
        if (v36 == v35)
        {
          v15 = v35;
LABEL_34:
          v23 = 4;
          goto LABEL_35;
        }
      }
      else
      {
        *(_QWORD *)&v37 = &off_1E5D3EE28;
        *((_QWORD *)&v37 + 1) = a2;
        *((_QWORD *)&v38 + 1) = &v37;
        v34 = v33;
        v33[0] = &off_1E5D3EE28;
        v33[1] = a2;
        quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::createRegionLmPlug((__int128 *)&v31, (uint64_t)v7, (uint64_t)v33, &v30);
        v32 = (__int128 *)(v3 + 4);
        v19 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (const void **)v3 + 4, (uint64_t)&std::piecewise_construct, &v32);
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)(v19 + 7), &v30);
        v20 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
        if (*((_QWORD *)&v30 + 1))
        {
          v21 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        v15 = v34;
        if (v34 == v33)
        {
          v15 = v33;
          goto LABEL_34;
        }
      }
      if (!v15)
        goto LABEL_36;
      v23 = 5;
LABEL_35:
      (*(void (**)(void))(*v15 + 8 * v23))();
LABEL_36:
      v24 = (__int128 *)*((_QWORD *)&v38 + 1);
      if (*((__int128 **)&v38 + 1) == &v37)
      {
        v24 = &v37;
        v25 = 4;
        goto LABEL_40;
      }
      if (*((_QWORD *)&v38 + 1))
      {
        v25 = 5;
LABEL_40:
        (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
      }
LABEL_41:
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      if (v10)
      {
        v26 = (char *)v3[1];
        if (v26)
        {
          do
          {
            v27 = v26;
            v26 = *(char **)v26;
          }
          while (v26);
        }
        else
        {
          do
          {
            v27 = (char *)v3[2];
            v28 = *(_QWORD *)v27 == (_QWORD)v3;
            v3 = v27;
          }
          while (!v28);
        }
        v3 = v27;
        if (v27 != v4)
          continue;
      }
      return v10;
    }
  }
  return 1;
}

void sub_1AD954200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char *a31)
{
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  v32 = a23;
  if (a23 == &a20)
  {
    v33 = 4;
    v32 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v33 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
LABEL_6:
  v34 = a31;
  if (a31 == &a28)
  {
    v35 = 4;
    v34 = &a28;
  }
  else
  {
    if (!a31)
      goto LABEL_11;
    v35 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v34 + 8 * v35))();
LABEL_11:
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL quasar::GeoRegion::isFst(uint64_t a1)
{
  _BOOL8 v1;
  void *__p[2];
  char v4;
  void *v5[2];
  char v6;

  quasar::toLower(a1, (uint64_t)v5);
  std::string::basic_string[abi:ne180100]<0>(__p, ".fst");
  v1 = quasar::endsWith((uint64_t *)v5, (uint64_t *)__p);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v6 < 0)
    operator delete(v5[0]);
  return v1;
}

void sub_1AD954360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::createRegionLmPlug(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::string::size_type v11;
  std::__shared_weak_count *v12;

  v5 = *(_QWORD *)(a3 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(std::string::size_type *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v5 + 48))(&v11, v5, a1);
  std::allocate_shared[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::string const&,std::string const&,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,void>(a1, a2, &v11, a4);
  v8 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1AD954438(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::createRegionLmPlug(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::string::size_type v11;
  std::__shared_weak_count *v12;

  v5 = *(_QWORD *)(a3 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(std::string::size_type *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v5 + 48))(&v11, v5, a1);
  std::allocate_shared[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>,std::string const&,std::string const&,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>,void>(a1, a2, &v11, a4);
  v8 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1AD9544F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::GeoRegion::getRegionalFstLmMap(quasar::GeoRegion *this)
{
  return (uint64_t)this + 112;
}

uint64_t quasar::GeoRegion::getPlaceholderToFileMap(quasar::GeoRegion *this)
{
  return (uint64_t)this + 88;
}

uint64_t quasar::GeoRegion::getBitmapRegion(quasar::GeoRegion *this)
{
  return (uint64_t)this + 56;
}

uint64_t quasar::GeoRegion::getCircleRegion(quasar::GeoRegion *this)
{
  return (uint64_t)this + 72;
}

std::string *std::allocate_shared[abi:ne180100]<quasar::BitmapRegion,std::allocator<quasar::BitmapRegion>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  std::string *v4;
  std::string *result;

  v4 = (std::string *)operator new(0x38uLL);
  result = std::__shared_ptr_emplace<quasar::BitmapRegion>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::BitmapRegion>,0>(v4, a1);
  *a2 = v4 + 1;
  a2[1] = v4;
  return result;
}

void sub_1AD954568(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<quasar::BitmapRegion>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::BitmapRegion>,0>(std::string *a1, __int128 *a2)
{
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D42640;
  a1->__r_.__value_.__l.__size_ = 0;
  quasar::BitmapRegion::BitmapRegion(a1 + 1, a2);
  return a1;
}

void sub_1AD9545B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::BitmapRegion>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42640;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::BitmapRegion>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42640;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::BitmapRegion>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

std::string *std::allocate_shared[abi:ne180100]<quasar::CircleRegion,std::allocator<quasar::CircleRegion>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  std::string *v4;
  std::string *result;

  v4 = (std::string *)operator new(0x48uLL);
  result = std::__shared_ptr_emplace<quasar::CircleRegion>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::CircleRegion>,0>(v4, a1);
  *a2 = v4 + 1;
  a2[1] = v4;
  return result;
}

void sub_1AD95466C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<quasar::CircleRegion>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::CircleRegion>,0>(std::string *a1, __int128 *a2)
{
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D42678;
  a1->__r_.__value_.__l.__size_ = 0;
  quasar::CircleRegion::CircleRegion(a1 + 1, a2);
  return a1;
}

void sub_1AD9546B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::CircleRegion>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42678;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::CircleRegion>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42678;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::CircleRegion>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

std::string *std::allocate_shared[abi:ne180100]<quasar::BitmapRegion,std::allocator<quasar::BitmapRegion>,std::string &,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  std::string *v4;
  std::string *result;

  v4 = (std::string *)operator new(0x38uLL);
  result = std::__shared_ptr_emplace<quasar::BitmapRegion>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<quasar::BitmapRegion>,0>(v4, a1);
  *a2 = v4 + 1;
  a2[1] = v4;
  return result;
}

void sub_1AD954770(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<quasar::BitmapRegion>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<quasar::BitmapRegion>,0>(std::string *a1, __int128 *a2)
{
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D42640;
  a1->__r_.__value_.__l.__size_ = 0;
  quasar::BitmapRegion::BitmapRegion(a1 + 1, a2);
  return a1;
}

void sub_1AD9547BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_0,std::allocator<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_0,std::allocator<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5D3EDD0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_0,std::allocator<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5D3EDD0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_0,std::allocator<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::operator()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  _OWORD v4[17];

  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 8) + 16))(a2);
  result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a2 + 64))(*a2, 0x10000000, 0);
  if (result != 0x10000000)
  {
    memset(v4, 0, sizeof(v4));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"FST: input label is not sorted!", 31);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v4);
  }
  return result;
}

void sub_1AD9548FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_0,std::allocator<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_0,std::allocator<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::target_type()
{
}

std::string *std::allocate_shared[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::string const&,std::string const&,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,void>@<X0>(__int128 *a1@<X1>, uint64_t a2@<X2>, std::string::size_type *a3@<X3>, _QWORD *a4@<X8>)
{
  std::string *v8;
  std::string *result;

  v8 = (std::string *)operator new(0x60uLL);
  result = std::__shared_ptr_emplace<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,0>(v8, a1, a2, a3);
  *a4 = v8 + 1;
  a4[1] = v8;
  return result;
}

void sub_1AD9549B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,0>(std::string *a1, __int128 *a2, uint64_t a3, std::string::size_type *a4)
{
  char v6;

  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D42AD8;
  a1->__r_.__value_.__l.__size_ = 0;
  std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::construct[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::string const&,std::string const&,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((int)&v6, a1 + 1, a2, a3, a4);
  return a1;
}

void sub_1AD954A20(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42AD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42AD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::construct[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::string const&,std::string const&,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(int a1, std::string *this, __int128 *a3, uint64_t a4, std::string::size_type *a5)
{
  std::string __p;
  char v9;

  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    __p = *(std::string *)a4;
  v9 = 1;
  quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::RegionalLmPlug(this, a3, (__int128 *)&__p, a5);
  if (v9)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1AD954B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::RegionalLmPlug(std::string *this, __int128 *a2, __int128 *a3, std::string::size_type *a4)
{
  __int128 v7;
  std::string::size_type v8;
  unint64_t *v9;
  unint64_t v10;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](this + 1, a3);
  v8 = a4[1];
  this[2].__r_.__value_.__l.__size_ = *a4;
  this[2].__r_.__value_.__r.__words[2] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return this;
}

void sub_1AD954BE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2 + 56);
  if (*(_BYTE *)(a2 + 48) && *(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void std::__function::__func<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_1,std::allocator<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_1,std::allocator<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5D3EE28;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_1,std::allocator<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5D3EE28;
  a2[1] = v2;
  return result;
}

void std::__function::__func<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_1,std::allocator<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _OWORD v8[17];

  memset(v8, 0, sizeof(v8));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"loading NNLM from ", 18);
  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *(_QWORD *)a2;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, v5, v6);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, " not implemented");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v8);
}

uint64_t std::__function::__func<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_1,std::allocator<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_1,std::allocator<quasar::GeoRegion::loadModels(quasar::ModelLoader &,quasar::filesystem::Path &)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::target_type()
{
}

std::string *std::allocate_shared[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>,std::string const&,std::string const&,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>,void>@<X0>(__int128 *a1@<X1>, uint64_t a2@<X2>, std::string::size_type *a3@<X3>, _QWORD *a4@<X8>)
{
  std::string *v8;
  std::string *result;

  v8 = (std::string *)operator new(0x60uLL);
  result = std::__shared_ptr_emplace<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>,0>(v8, a1, a2, a3);
  *a4 = v8 + 1;
  a4[1] = v8;
  return result;
}

void sub_1AD954DF4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>,0>(std::string *a1, __int128 *a2, uint64_t a3, std::string::size_type *a4)
{
  char v6;

  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D42B10;
  a1->__r_.__value_.__l.__size_ = 0;
  std::allocator<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>::construct[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>,std::string const&,std::string const&,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>((int)&v6, a1 + 1, a2, a3, a4);
  return a1;
}

void sub_1AD954E5C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42B10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42B10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>::construct[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>,std::string const&,std::string const&,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>(int a1, std::string *this, __int128 *a3, uint64_t a4, std::string::size_type *a5)
{
  std::string __p;
  char v9;

  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    __p = *(std::string *)a4;
  v9 = 1;
  quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::RegionalLmPlug(this, a3, (__int128 *)&__p, a5);
  if (v9)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1AD954F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::RegionalLmPlug(std::string *this, __int128 *a2, __int128 *a3, std::string::size_type *a4)
{
  __int128 v7;
  std::string::size_type v8;
  unint64_t *v9;
  unint64_t v10;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](this + 1, a3);
  v8 = a4[1];
  this[2].__r_.__value_.__l.__size_ = *a4;
  this[2].__r_.__value_.__r.__words[2] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return this;
}

void sub_1AD95501C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ContextualData::ContextualData(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 1065353216;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 1065353216;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 208) = 1065353216;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_DWORD *)(a1 + 248) = 1065353216;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = a1 + 272;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 288), "•|\\(|\\)|\"|\\[|\\]|\\{|\\}|®|,|;|\\?|\\!|\\\\");
  *(_BYTE *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_DWORD *)(a1 + 352) = 1065353216;
  quasar::ContextualData::parseConfig(a1, a2);
  return a1;
}

void sub_1AD955120(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  void **v8;
  uint64_t v10;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v7);
  if (*(char *)(v1 + 311) < 0)
    operator delete(*v6);
  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::destroy(v1 + 264, *(_QWORD **)(v1 + 272));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v5);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 + 176);
  if (*(char *)(v1 + 175) < 0)
    operator delete(*v8);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4);
  std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::__unordered_map_hasher<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::hash<quasar::ContextualData::SourceFramework>,std::equal_to<quasar::ContextualData::SourceFramework>,true>,std::__unordered_map_equal<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::equal_to<quasar::ContextualData::SourceFramework>,std::hash<quasar::ContextualData::SourceFramework>,true>,std::allocator<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>>::~__hash_table(v2);
  v10 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

void quasar::ContextualData::parseConfig(uint64_t a1, uint64_t a2)
{
  uint64_t PtreeOptional;
  uint64_t v4;
  uint64_t SpeechModelInfo;
  const std::string *v6;
  int v7;
  int64_t v8;
  uint64_t v9;
  _BYTE *v10;
  void *v11;
  _BYTE *v12;
  std::string::size_type v13;
  uint64_t v14;
  quasar::PTree *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  _QWORD *String;
  int v23;
  uint64_t v24;
  unsigned int v25;
  std::string::size_type size;
  uint64_t Int;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  unsigned int BoolOptional;
  BOOL v35;
  __int128 *v36;
  __int128 *v37;
  uint64_t *v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  uint64_t v42;
  int *begin;
  std::vector<unsigned int>::pointer i;
  _QWORD *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  quasar::PTree *v51;
  const std::string *v52;
  uint64_t j;
  quasar::PTree *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t *v57;
  void *v58;
  char v59;
  std::string *v60;
  uint64_t v61;
  quasar::PTree *v62;
  uint64_t v63;
  uint64_t k;
  double Double;
  uint64_t v66;
  quasar::PTree *v67;
  uint64_t v68;
  uint64_t m;
  double v70;
  quasar::TextSanitizer *v71;
  uint64_t v72;
  _QWORD *v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80[2];
  char v81;
  std::string v82;
  void *__p[2];
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  unsigned int v100;
  std::vector<unsigned int> v101;
  uint64_t v102;
  std::string v103;
  char v104;
  std::string v105;
  std::string v106;
  std::string v107[64];
  __int128 *v108[3];

  memset(&v101, 0, sizeof(v101));
  *(_OWORD *)__p = 0u;
  v84 = 0u;
  LODWORD(v85) = 1065353216;
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)v107, a2, (uint64_t *)&v101, (uint64_t)__p);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
  __p[0] = &v101;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "contextual-data");
  PtreeOptional = quasar::SystemConfig::getPtreeOptional((uint64_t)v107, (uint64_t)__p);
  v4 = PtreeOptional;
  if (SBYTE7(v84) < 0)
  {
    operator delete(__p[0]);
    if (!v4)
      goto LABEL_165;
  }
  else if (!PtreeOptional)
  {
    goto LABEL_165;
  }
  *(_BYTE *)(a1 + 312) = 1;
  MEMORY[0x1AF44C914](a1 + 152, "1,2,3,4,5,6,7,8,12,13,14,15,16,17,18,20,21");
  *(_QWORD *)(a1 + 256) = 0;
  SpeechModelInfo = quasar::SystemConfig::getSpeechModelInfo((quasar::SystemConfig *)v107);
  v6 = (const std::string *)(SpeechModelInfo + 120);
  v7 = *(char *)(SpeechModelInfo + 143);
  if (v7 >= 0)
    v8 = *(unsigned __int8 *)(SpeechModelInfo + 143);
  else
    v8 = *(_QWORD *)(SpeechModelInfo + 128);
  if (v7 >= 0)
    v9 = SpeechModelInfo + 120;
  else
    v9 = *(_QWORD *)(SpeechModelInfo + 120);
  v10 = (_BYTE *)(v9 + v8);
  if (v8 >= 1)
  {
    v11 = (void *)v9;
    do
    {
      v12 = memchr(v11, 95, v8);
      if (!v12)
        break;
      if (*v12 == 95)
        goto LABEL_17;
      v11 = v12 + 1;
      v8 = v10 - (_BYTE *)v11;
    }
    while (v10 - (_BYTE *)v11 > 0);
  }
  v12 = v10;
LABEL_17:
  if (v12 == v10)
    v13 = -1;
  else
    v13 = (std::string::size_type)&v12[-v9];
  std::string::basic_string((std::string *)__p, v6, 0, v13, (std::allocator<char> *)&v101);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 16) = v84;
  std::string::basic_string[abi:ne180100]<0>(__p, "contextual-data.");
  quasar::SystemConfig::setPrefix(v107, (const std::string *)__p);
  if (SBYTE7(v84) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "sanitizer-special-chars-pattern");
  std::string::basic_string[abi:ne180100]<0>(&v101, "Override pattern for TextSanitizer mSpecialChars.");
  quasar::SystemConfig::Register<std::string>((uint64_t)v107, (const void **)__p, a1 + 288, (uint64_t)&v101, 0, 224, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v101.__end_cap_.__value_) < 0)
    operator delete(v101.__begin_);
  if (SBYTE7(v84) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "score-threshold");
  std::string::basic_string[abi:ne180100]<0>(&v101, "Score threshold for Portrait named entity.");
  quasar::SystemConfig::Register<double>((uint64_t)v107, (const void **)__p, a1 + 256, (uint64_t)&v101, 0, 224, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v101.__end_cap_.__value_) < 0)
    operator delete(v101.__begin_);
  if (SBYTE7(v84) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "supported-categories");
  std::string::basic_string[abi:ne180100]<0>(&v101, "Supported categories for Portrait named entity, delimited by comma");
  quasar::SystemConfig::Register<std::string>((uint64_t)v107, (const void **)__p, a1 + 152, (uint64_t)&v101, 0, 224, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v101.__end_cap_.__value_) < 0)
    operator delete(v101.__begin_);
  if (SBYTE7(v84) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "contextual-data");
  quasar::SystemConfig::readPtree((uint64_t)v107, (uint64_t)__p, 0, 0);
  if (SBYTE7(v84) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "contextual-data.source-map");
  v14 = quasar::SystemConfig::getPtreeOptional((uint64_t)v107, (uint64_t)__p);
  v15 = (quasar::PTree *)v14;
  if (SBYTE7(v84) < 0)
  {
    operator delete(__p[0]);
    if (!v15)
      goto LABEL_116;
    goto LABEL_42;
  }
  if (v14)
  {
LABEL_42:
    v16 = quasar::PTree::begin(v15);
    v17 = quasar::PTree::end(v15);
    if (v16 == v17)
      goto LABEL_116;
    v77 = v17;
    while (1)
    {
      if (*(char *)(v16 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v106, *(const std::string::value_type **)v16, *(_QWORD *)(v16 + 8));
      }
      else
      {
        v18 = *(_OWORD *)v16;
        v106.__r_.__value_.__r.__words[2] = *(_QWORD *)(v16 + 16);
        *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v18;
      }
      v78 = v16;
      v19 = quasar::PTree::begin((quasar::PTree *)(v16 + 24));
      v20 = quasar::PTree::end((quasar::PTree *)(v16 + 24));
      if (v19 != v20)
        break;
LABEL_113:
      if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v106.__r_.__value_.__l.__data_);
      v16 = v78 + 88;
      if (v78 + 88 == v77)
        goto LABEL_116;
    }
    v79 = v20;
    while (1)
    {
      if (*(char *)(v19 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v105, *(const std::string::value_type **)v19, *(_QWORD *)(v19 + 8));
      }
      else
      {
        v21 = *(_OWORD *)v19;
        v105.__r_.__value_.__r.__words[2] = *(_QWORD *)(v19 + 16);
        *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v21;
      }
      LODWORD(v101.__begin_) = *(_DWORD *)(v19 + 24);
      if (*(char *)(v19 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v101.__end_, *(const std::string::value_type **)(v19 + 32), *(_QWORD *)(v19 + 40));
      }
      else
      {
        *(_OWORD *)&v101.__end_ = *(_OWORD *)(v19 + 32);
        v102 = *(_QWORD *)(v19 + 48);
      }
      memset(&v103, 0, sizeof(v103));
      std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v103, *(_QWORD *)(v19 + 56), *(_QWORD *)(v19 + 64), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(v19 + 64) - *(_QWORD *)(v19 + 56)) >> 3));
      v104 = *(_BYTE *)(v19 + 80);
      std::string::basic_string[abi:ne180100]<0>(__p, "framework");
      String = (_QWORD *)quasar::PTree::getString((uint64_t)&v101, (__int128 *)__p);
      if (SBYTE7(v84) < 0)
        operator delete(__p[0]);
      v100 = 0;
      v23 = *((unsigned __int8 *)String + 23);
      if ((v23 & 0x80) != 0)
      {
        v24 = String[1];
        if (v24 != 8)
        {
          if (v24 != 15)
          {
            if (v24)
            {
LABEL_174:
              v98 = 0u;
              v99 = 0u;
              v96 = 0u;
              v97 = 0u;
              v94 = 0u;
              v95 = 0u;
              v92 = 0u;
              v93 = 0u;
              v90 = 0u;
              v91 = 0u;
              v88 = 0u;
              v89 = 0u;
              v86 = 0u;
              v87 = 0u;
              v84 = 0u;
              v85 = 0u;
              *(_OWORD *)__p = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Contextual data: undefined framework is configured: ", 52);
              std::ostream::operator<<();
              quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
            }
LABEL_172:
            v98 = 0u;
            v99 = 0u;
            v96 = 0u;
            v97 = 0u;
            v94 = 0u;
            v95 = 0u;
            v92 = 0u;
            v93 = 0u;
            v90 = 0u;
            v91 = 0u;
            v88 = 0u;
            v89 = 0u;
            v86 = 0u;
            v87 = 0u;
            v84 = 0u;
            v85 = 0u;
            *(_OWORD *)__p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Contextual data: empty framework is configured in source-map", 60);
            quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
          }
          String = (_QWORD *)*String;
          goto LABEL_69;
        }
        if (*(_QWORD *)*String != 0x7469617274726F50)
          goto LABEL_174;
      }
      else
      {
        if (v23 != 8)
        {
          if (v23 != 15)
          {
            if (*((_BYTE *)String + 23))
              goto LABEL_174;
            goto LABEL_172;
          }
LABEL_69:
          if (*String != 0x7553656C706F6550 || *(_QWORD *)((char *)String + 7) != 0x7265747365676775)
            goto LABEL_174;
          v25 = 2;
          goto LABEL_75;
        }
        if (*String != 0x7469617274726F50)
          goto LABEL_174;
      }
      v25 = 1;
LABEL_75:
      v100 = v25;
      std::string::basic_string[abi:ne180100]<0>(v80, "tasks");
      quasar::PTree::getStringOptional((uint64_t)&v101, (uint64_t)v80, (std::string *)__p);
      if (BYTE8(v84))
      {
        *(_OWORD *)&v82.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        v82.__r_.__value_.__r.__words[2] = v84;
        __p[1] = 0;
        *(_QWORD *)&v84 = 0;
        __p[0] = 0;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v82, "Dictation");
        if (BYTE8(v84) && SBYTE7(v84) < 0)
          operator delete(__p[0]);
      }
      if (v81 < 0)
        operator delete(v80[0]);
      __p[0] = 0;
      __p[1] = 0;
      *(_QWORD *)&v84 = 0;
      size = HIBYTE(v82.__r_.__value_.__r.__words[2]);
      if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v82.__r_.__value_.__l.__size_;
      if (size)
        kaldi::SplitStringToVector(&v82, ",|", 1, (uint64_t)__p);
      std::string::basic_string[abi:ne180100]<0>(v80, "max-limit");
      Int = quasar::PTree::getIntOptional<int>((uint64_t)&v101, (uint64_t)v80);
      if ((Int & 0xFF00000000) != 0)
        v29 = Int;
      else
        v29 = 100;
      if (v81 < 0)
        operator delete(v80[0]);
      std::string::basic_string[abi:ne180100]<0>(v80, "from-date-in-sec");
      v30 = quasar::PTree::getIntOptional<int>((uint64_t)&v101, (uint64_t)v80);
      if ((v30 & 0xFF00000000) != 0)
        v31 = v30;
      else
        v31 = 25200;
      if (v81 < 0)
        operator delete(v80[0]);
      std::string::basic_string[abi:ne180100]<0>(v80, "to-date-in-sec");
      v32 = quasar::PTree::getIntOptional<int>((uint64_t)&v101, (uint64_t)v80);
      if ((v32 & 0xFF00000000) != 0)
        v33 = v32;
      else
        v33 = 0;
      if (v81 < 0)
        operator delete(v80[0]);
      std::string::basic_string[abi:ne180100]<0>(v80, "contact-only");
      BoolOptional = (unsigned __int16)quasar::PTree::getBoolOptional((uint64_t)&v101, (uint64_t)v80);
      if (BoolOptional <= 0x100)
        LOBYTE(BoolOptional) = 0;
      v35 = BoolOptional != 0;
      if (v81 < 0)
        operator delete(v80[0]);
      v36 = (__int128 *)__p[0];
      v37 = (__int128 *)__p[1];
      while (v36 != v37)
      {
        v108[0] = (__int128 *)&v100;
        v38 = std::__hash_table<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::__unordered_map_hasher<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::hash<quasar::ContextualData::SourceFramework>,std::equal_to<quasar::ContextualData::SourceFramework>,true>,std::__unordered_map_equal<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::equal_to<quasar::ContextualData::SourceFramework>,std::hash<quasar::ContextualData::SourceFramework>,true>,std::allocator<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>>::__emplace_unique_key_args<quasar::ContextualData::SourceFramework,std::piecewise_construct_t const&,std::tuple<quasar::ContextualData::SourceFramework const&>,std::tuple<>>(a1 + 32, &v100, (uint64_t)&std::piecewise_construct, (_DWORD **)v108);
        v108[0] = v36;
        v39 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v38 + 3), (unsigned __int8 *)v36, (uint64_t)&std::piecewise_construct, v108);
        v108[0] = (__int128 *)&v106;
        v40 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v39 + 40), (unsigned __int8 *)&v106, (uint64_t)&std::piecewise_construct, v108);
        v108[0] = (__int128 *)&v105;
        v41 = std::__hash_table<std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v40 + 40), (unsigned __int8 *)&v105, (uint64_t)&std::piecewise_construct, v108);
        *((_DWORD *)v41 + 10) = v29;
        *((_DWORD *)v41 + 11) = v31;
        *((_DWORD *)v41 + 12) = v33;
        v41[52] = v35;
        v36 = (__int128 *)((char *)v36 + 24);
      }
      v80[0] = __p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v80);
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v82.__r_.__value_.__l.__data_);
      quasar::PTree::~PTree((quasar::PTree *)&v101);
      if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v105.__r_.__value_.__l.__data_);
      v19 += 88;
      if (v19 == v79)
        goto LABEL_113;
    }
  }
LABEL_116:
  if (*(char *)(a1 + 175) < 0)
    v42 = *(_QWORD *)(a1 + 160);
  else
    v42 = *(unsigned __int8 *)(a1 + 175);
  if (v42)
  {
    memset(&v101, 0, sizeof(v101));
    if (!kaldi::SplitStringToIntegers<int>(a1 + 152, ",", 1, &v101))
    {
      v98 = 0u;
      v99 = 0u;
      v96 = 0u;
      v97 = 0u;
      v94 = 0u;
      v95 = 0u;
      v92 = 0u;
      v93 = 0u;
      v90 = 0u;
      v91 = 0u;
      v88 = 0u;
      v89 = 0u;
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Contextual data: invalid configuration for supported-categories, configured value: ", 83);
      v74 = *(_BYTE *)(a1 + 175);
      if (v74 >= 0)
        v75 = a1 + 152;
      else
        v75 = *(_QWORD *)(a1 + 152);
      if (v74 >= 0)
        v76 = *(unsigned __int8 *)(a1 + 175);
      else
        v76 = *(_QWORD *)(a1 + 160);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, v75, v76);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    begin = (int *)v101.__begin_;
    for (i = v101.__end_; begin != (int *)i; ++begin)
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(a1 + 112, begin, begin);
    if (quasar::gLogLevel > 3)
    {
      v98 = 0u;
      v99 = 0u;
      v96 = 0u;
      v97 = 0u;
      v94 = 0u;
      v95 = 0u;
      v92 = 0u;
      v93 = 0u;
      v90 = 0u;
      v91 = 0u;
      v88 = 0u;
      v89 = 0u;
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Contextual data: supported categories: ", 39);
      v46 = *(char *)(a1 + 175);
      if (v46 >= 0)
        v47 = a1 + 152;
      else
        v47 = *(_QWORD *)(a1 + 152);
      if (v46 >= 0)
        v48 = *(unsigned __int8 *)(a1 + 175);
      else
        v48 = *(_QWORD *)(a1 + 160);
      v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, v47, v48);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)", number: ", 10);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    if (v101.__begin_)
    {
      v101.__end_ = v101.__begin_;
      operator delete(v101.__begin_);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "contextual-data.category-map");
  v50 = quasar::SystemConfig::getPtreeOptional((uint64_t)v107, (uint64_t)__p);
  v51 = (quasar::PTree *)v50;
  if (SBYTE7(v84) < 0)
  {
    operator delete(__p[0]);
    if (!v51)
      goto LABEL_149;
  }
  else if (!v50)
  {
    goto LABEL_149;
  }
  v52 = (const std::string *)quasar::PTree::begin(v51);
  for (j = quasar::PTree::end(v51); v52 != (const std::string *)j; v52 = (const std::string *)((char *)v54 + 64))
  {
    LODWORD(v106.__r_.__value_.__l.__data_) = 0;
    LODWORD(v106.__r_.__value_.__l.__data_) = std::stoi(v52, 0, 10);
    v54 = (quasar::PTree *)&v52[1];
    v55 = quasar::PTree::getString(v54);
    if (*(char *)(v55 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)v55, *(_QWORD *)(v55 + 8));
    }
    else
    {
      v56 = *(_OWORD *)v55;
      *(_QWORD *)&v84 = *(_QWORD *)(v55 + 16);
      *(_OWORD *)__p = v56;
    }
    v57 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 112), (int *)&v106);
    v58 = (void *)BYTE7(v84);
    v59 = BYTE7(v84);
    if (v57)
    {
      if (SBYTE7(v84) < 0)
        v58 = __p[1];
      if (v58)
      {
        v101.__begin_ = (std::vector<unsigned int>::pointer)&v106;
        v60 = (std::string *)std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 72, (int *)&v106, (uint64_t)&std::piecewise_construct, &v101.__begin_);
        std::string::operator=(v60 + 1, (const std::string *)__p);
        v59 = BYTE7(v84);
      }
    }
    if (v59 < 0)
      operator delete(__p[0]);
  }
LABEL_149:
  std::string::basic_string[abi:ne180100]<0>(__p, "contextual-data.name-average-cost-map");
  v61 = quasar::SystemConfig::getPtreeOptional((uint64_t)v107, (uint64_t)__p);
  v62 = (quasar::PTree *)v61;
  if (SBYTE7(v84) < 0)
  {
    operator delete(__p[0]);
    if (!v62)
      goto LABEL_155;
  }
  else if (!v61)
  {
    goto LABEL_155;
  }
  v63 = quasar::PTree::begin(v62);
  for (k = quasar::PTree::end(v62); v63 != k; v63 += 88)
  {
    Double = quasar::PTree::getDouble((quasar::PTree *)(v63 + 24));
    __p[0] = (void *)v63;
    *((double *)std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 176, (unsigned __int8 *)v63, (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 5) = Double;
  }
LABEL_155:
  std::string::basic_string[abi:ne180100]<0>(__p, "contextual-data.name-deviation-cost-map");
  v66 = quasar::SystemConfig::getPtreeOptional((uint64_t)v107, (uint64_t)__p);
  v67 = (quasar::PTree *)v66;
  if (SBYTE7(v84) < 0)
  {
    operator delete(__p[0]);
    if (!v67)
      goto LABEL_161;
  }
  else if (!v66)
  {
    goto LABEL_161;
  }
  v68 = quasar::PTree::begin(v67);
  for (m = quasar::PTree::end(v67); v68 != m; v68 += 88)
  {
    v70 = quasar::PTree::getDouble((quasar::PTree *)(v68 + 24));
    __p[0] = (void *)v68;
    *((double *)std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 216, (unsigned __int8 *)v68, (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 5) = v70;
  }
LABEL_161:
  if ((*(char *)(a1 + 311) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 311))
      goto LABEL_163;
LABEL_167:
    if (quasar::gLogLevel >= 2)
    {
      v98 = 0u;
      v99 = 0u;
      v96 = 0u;
      v97 = 0u;
      v94 = 0u;
      v95 = 0u;
      v92 = 0u;
      v93 = 0u;
      v90 = 0u;
      v91 = 0u;
      v88 = 0u;
      v89 = 0u;
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Contextual data: sanitizer special character patter is set to empty.", 68);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
    }
    v72 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v72)
      goto LABEL_164;
    goto LABEL_165;
  }
  if (!*(_QWORD *)(a1 + 296))
    goto LABEL_167;
LABEL_163:
  v71 = (quasar::TextSanitizer *)operator new();
  quasar::BasicTextSanitizer::BasicTextSanitizer(v71, (uint64_t *)(a1 + 288));
  v72 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v71;
  if (v72)
LABEL_164:
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
LABEL_165:
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)v107);
}

void sub_1AD956138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v31[10];
  char v32;
  void *v33;
  char v34;
  uint64_t v35;

  if (a30 < 0)
    operator delete(a25);
  quasar::PTree::~PTree((quasar::PTree *)v31);
  if (v32 < 0)
    operator delete(v31[8]);
  if (v34 < 0)
    operator delete(v33);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&v35);
  _Unwind_Resume(a1);
}

void sub_1AD956164()
{
  JUMPOUT(0x1AD9561C4);
}

void sub_1AD956170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  char a67;

  if (a67 < 0)
    operator delete(__p);
  JUMPOUT(0x1AD9561CCLL);
}

void sub_1AD956188(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  JUMPOUT(0x1AD9561A4);
}

void sub_1AD9561A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28)
{
  a18 = (void **)&a28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a18);
  if (a26 < 0)
    JUMPOUT(0x1AD9561C0);
  JUMPOUT(0x1AD9561C4);
}

uint64_t quasar::ContextualData::getIsEnabled(quasar::ContextualData *this)
{
  return *((unsigned __int8 *)this + 312);
}

uint64_t quasar::ContextualData::filterNamedEntity(quasar::ContextualData *this, const quasar::ContextualData::NamedEntity *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const void **v10;
  quasar::ContextualData *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  char *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  int v19;
  void *__p[2];
  char v21;
  unsigned int v22;
  void **v23;

  v2 = *((unsigned __int8 *)a2 + 95);
  if ((v2 & 0x80u) != 0)
    v2 = *((_QWORD *)a2 + 10);
  if (!v2 || *((double *)a2 + 13) < 0.0)
    return 1;
  if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)this + 14, (int *)a2 + 24))return 3;
  v6 = *((unsigned __int8 *)a2 + 95);
  if ((v6 & 0x80u) == 0)
    v7 = *((unsigned __int8 *)a2 + 95);
  else
    v7 = *((_QWORD *)a2 + 10);
  v8 = *((unsigned __int8 *)this + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *((_QWORD *)this + 1);
  if (v7 != v8)
    return 5;
  v10 = (const void **)((char *)a2 + 72);
  if (v9 >= 0)
    v11 = this;
  else
    v11 = *(quasar::ContextualData **)this;
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*v10, v11, *((_QWORD *)a2 + 10)))
      return 5;
  }
  else if (*((_BYTE *)a2 + 95))
  {
    while (*(unsigned __int8 *)v10 == *(unsigned __int8 *)v11)
    {
      v10 = (const void **)((char *)v10 + 1);
      v11 = (quasar::ContextualData *)((char *)v11 + 1);
      if (!--v6)
        goto LABEL_24;
    }
    return 5;
  }
LABEL_24:
  if (*((double *)a2 + 13) < *((double *)this + 32))
    return 6;
  v12 = *((unsigned __int8 *)a2 + 71);
  if ((v12 & 0x80u) != 0)
    v12 = *((_QWORD *)a2 + 7);
  if (!v12)
    return 0;
  v13 = *((unsigned __int8 *)a2 + 47);
  if ((v13 & 0x80u) != 0)
    v13 = *((_QWORD *)a2 + 4);
  if (!v13)
    return 0;
  v22 = 1;
  __p[0] = &v22;
  v14 = std::__hash_table<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::__unordered_map_hasher<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::hash<quasar::ContextualData::SourceFramework>,std::equal_to<quasar::ContextualData::SourceFramework>,true>,std::__unordered_map_equal<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::equal_to<quasar::ContextualData::SourceFramework>,std::hash<quasar::ContextualData::SourceFramework>,true>,std::allocator<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>>::__emplace_unique_key_args<quasar::ContextualData::SourceFramework,std::piecewise_construct_t const&,std::tuple<quasar::ContextualData::SourceFramework const&>,std::tuple<>>((uint64_t)this + 32, &v22, (uint64_t)&std::piecewise_construct, (_DWORD **)__p)+ 3;
  std::string::basic_string[abi:ne180100]<0>(__p, "Dictation");
  v23 = __p;
  v15 = (char *)a2 + 48;
  v16 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v14, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v23)+ 40;
  if (v21 < 0)
    operator delete(__p[0]);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v16, (unsigned __int8 *)a2 + 48))return 4;
  __p[0] = (char *)a2 + 48;
  v17 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v16, (unsigned __int8 *)a2 + 48, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)v17 + 5, (unsigned __int8 *)a2 + 24);
  __p[0] = v15;
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v16, (unsigned __int8 *)v15, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
  if (!v18)
    return 4;
  v19 = *((_DWORD *)v18 + 10);
  *((_DWORD *)v18 + 10) = v19 - 1;
  if (v19 > 0)
    return 0;
  return 2;
}

void sub_1AD956450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ContextualData::filterContacts(quasar::ContextualData *this, const quasar::ContextualData::NamedEntity *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  void *__p[2];
  char v13;
  unsigned int v14;
  void **v15;

  v2 = *((unsigned __int8 *)a2 + 71);
  if ((v2 & 0x80u) != 0)
    v2 = *((_QWORD *)a2 + 7);
  if (!v2)
    return 0;
  v4 = *((unsigned __int8 *)a2 + 47);
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 4);
  if (!v4)
    return 0;
  v14 = 2;
  __p[0] = &v14;
  v5 = std::__hash_table<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::__unordered_map_hasher<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::hash<quasar::ContextualData::SourceFramework>,std::equal_to<quasar::ContextualData::SourceFramework>,true>,std::__unordered_map_equal<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::equal_to<quasar::ContextualData::SourceFramework>,std::hash<quasar::ContextualData::SourceFramework>,true>,std::allocator<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>>::__emplace_unique_key_args<quasar::ContextualData::SourceFramework,std::piecewise_construct_t const&,std::tuple<quasar::ContextualData::SourceFramework const&>,std::tuple<>>((uint64_t)this + 32, &v14, (uint64_t)&std::piecewise_construct, (_DWORD **)__p)+ 3;
  std::string::basic_string[abi:ne180100]<0>(__p, "Dictation");
  v15 = __p;
  v6 = (char *)a2 + 48;
  v7 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v5, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v15)+ 40;
  if (v13 < 0)
    operator delete(__p[0]);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v7, (unsigned __int8 *)a2 + 48))return 4;
  __p[0] = (char *)a2 + 48;
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v7, (unsigned __int8 *)a2 + 48, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)v8 + 5, (unsigned __int8 *)a2 + 24);
  __p[0] = v6;
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v7, (unsigned __int8 *)v6, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
  if (!v9)
    return 4;
  v10 = *((_DWORD *)v9 + 10);
  *((_DWORD *)v9 + 10) = v10 - 1;
  if (v10 > 0)
    return 0;
  return 2;
}

void sub_1AD9565D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ContextualData::filter(quasar::ContextualData *this, const quasar::ContextualData::NamedEntity *a2)
{
  uint64_t v2;
  int v3;

  v2 = *((unsigned __int8 *)a2 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *((_QWORD *)a2 + 1);
  if (!v2)
    return 1;
  v3 = *((_DWORD *)a2 + 28);
  switch(v3)
  {
    case 0:
      return 1;
    case 2:
      return quasar::ContextualData::filterContacts(this, a2);
    case 1:
      return quasar::ContextualData::filterNamedEntity(this, a2);
  }
  return 7;
}

void quasar::ContextualData::getStats(quasar::ContextualData *this@<X0>, uint64_t *a2@<X8>)
{
  quasar::PTree *v4;
  uint64_t *i;
  unsigned int v6;
  quasar::ContextualData *v7;
  unint64_t v8;
  quasar::ContextualData *v9;
  quasar::ContextualData *v10;
  BOOL v11;
  uint64_t v12;
  void *__p;
  std::string v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _BYTE v19[64];
  _BYTE v20[64];

  v4 = (quasar::PTree *)operator new();
  quasar::PTree::PTree(v4);
  *a2 = (uint64_t)v4;
  quasar::PTree::PTree((quasar::PTree *)v20);
  quasar::PTree::PTree((quasar::PTree *)v19);
  for (i = (uint64_t *)*((_QWORD *)this + 42); i; i = (uint64_t *)*i)
  {
    v6 = *((_DWORD *)i + 10);
    LODWORD(__p) = quasar::getType((quasar *)v6);
    std::to_string(&v14, v6);
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 1;
    quasar::PTree::putChild((uint64_t)v20, (uint64_t)(i + 2), (uint64_t)&__p, 1);
    quasar::PTree::~PTree((quasar::PTree *)&__p);
  }
  v7 = (quasar::ContextualData *)*((_QWORD *)this + 33);
  if (v7 != (quasar::ContextualData *)((char *)this + 272))
  {
    do
    {
      v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v7 + 8) - *((_QWORD *)v7 + 7)) >> 3);
      LODWORD(__p) = quasar::getType((quasar *)v8);
      std::to_string(&v14, v8);
      v15 = 0;
      v16 = 0;
      v17 = 0;
      v18 = 1;
      quasar::PTree::putChild((uint64_t)v19, (uint64_t)v7 + 32, (uint64_t)&__p, 1);
      quasar::PTree::~PTree((quasar::PTree *)&__p);
      v9 = (quasar::ContextualData *)*((_QWORD *)v7 + 1);
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = *(quasar::ContextualData **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (quasar::ContextualData *)*((_QWORD *)v7 + 2);
          v11 = *(_QWORD *)v10 == (_QWORD)v7;
          v7 = v10;
        }
        while (!v11);
      }
      v7 = v10;
    }
    while (v10 != (quasar::ContextualData *)((char *)this + 272));
  }
  v12 = *a2;
  std::string::basic_string[abi:ne180100]<0>(&__p, "preprocessingCategoryCounts");
  quasar::PTree::putChild(v12, (uint64_t)&__p, (uint64_t)v20, 0);
  if (v14.__r_.__value_.__s.__data_[15] < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "postprocessingCategoryCounts");
  quasar::PTree::putChild(v12, (uint64_t)&__p, (uint64_t)v19, 0);
  if (v14.__r_.__value_.__s.__data_[15] < 0)
    operator delete(__p);
  quasar::PTree::~PTree((quasar::PTree *)v19);
  quasar::PTree::~PTree((quasar::PTree *)v20);
}

void sub_1AD956844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  quasar::PTree **v28;

  if (a14 < 0)
    operator delete(__p);
  quasar::PTree::~PTree((quasar::PTree *)&a20);
  quasar::PTree::~PTree((quasar::PTree *)&a28);
  std::unique_ptr<quasar::PTree>::reset[abi:ne180100](v28, 0);
  _Unwind_Resume(a1);
}

BOOL quasar::ContextualData::addNamedEntity(uint64_t **this, quasar::ContextualData::NamedEntity *a2)
{
  int *v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  const std::string *v8;
  std::string *v9;
  uint64_t *v10;
  char *v11;
  std::string::size_type v12;
  uint64_t v13;
  uint64_t *v15;
  void *__p[2];
  _OWORD v18[2];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  std::string *v33;
  std::string *v34;
  std::string::value_type *v35;
  std::string v36;
  std::string **v37;
  char v38;
  std::string v39;
  std::string v40;
  int v41;
  uint64_t v42;
  char *v43;
  __int128 v44;

  *((_QWORD *)&v44 + 1) = *MEMORY[0x1E0C80C00];
  v4 = (int *)((char *)a2 + 96);
  std::to_string((std::string *)__p, *((_DWORD *)a2 + 24));
  v39.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  v5 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(this + 40), (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v39);
  ++*((_DWORD *)v5 + 10);
  if (SBYTE7(v18[0]) < 0)
    operator delete(__p[0]);
  v6 = quasar::ContextualData::filter((quasar::ContextualData *)this, a2);
  if (v6)
  {
    if (quasar::gLogLevel >= 5)
    {
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      memset(v18, 0, sizeof(v18));
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Contextual data: failed to add words, status: ", 46);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
    return v6 == 0;
  }
  v7 = *((_DWORD *)a2 + 28);
  if (v7 == 2)
  {
    quasar::LmeDataFactoryBase::Word::Word((quasar::LmeDataFactoryBase::Word *)__p);
    std::string::operator=((std::string *)__p, (const std::string *)a2);
    LODWORD(v19) = 1;
    MEMORY[0x1AF44C914]((char *)v18 + 8, "\\contact-first");
    std::string::basic_string[abi:ne180100]<0>(&v36, "\\NT-contact");
    v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
    v10 = std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 33, (const void **)&v36.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v39);
    if (SBYTE7(v18[0]) < 0)
    {
      std::string::__init_copy_ctor_external(&v39, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    }
    else
    {
      *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v39.__r_.__value_.__r.__words[2] = *(_QWORD *)&v18[0];
    }
    if (SHIBYTE(v18[1]) < 0)
      std::string::__init_copy_ctor_external(&v40, *((const std::string::value_type **)&v18[0] + 1), *(std::string::size_type *)&v18[1]);
    else
      v40 = *(std::string *)((char *)v18 + 8);
    v41 = v19;
    std::map<std::pair<quasar::PronType,std::string>,float>::map[abi:ne180100](&v42, (uint64_t)&v19 + 8);
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v37 = &v33;
    v38 = 0;
    v33 = (std::string *)operator new(0x50uLL);
    v34 = v33;
    v35 = &v33[3].__r_.__value_.__s.__data_[8];
    v34 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::LmeDataFactoryBase::Word>,quasar::LmeDataFactoryBase::Word const*,quasar::LmeDataFactoryBase::Word const*,quasar::LmeDataFactoryBase::Word*>((uint64_t)&v35, (__int128 *)&v39, &v44, v33);
    std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::push_back[abi:ne180100](v10 + 7, (uint64_t)&v33);
    v37 = &v33;
    std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
    v11 = v43;
    goto LABEL_34;
  }
  if (v7 != 1)
    return v6 == 0;
  quasar::LmeDataFactoryBase::Word::Word((quasar::LmeDataFactoryBase::Word *)__p);
  std::string::operator=((std::string *)__p, (const std::string *)a2);
  LODWORD(v19) = 1;
  MEMORY[0x1AF44C914]((char *)v18 + 8, "\\jit");
  std::string::basic_string[abi:ne180100]<0>(&v36, "\\NT-inline");
  if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(this + 9, v4))
  {
    v39.__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
    v8 = (const std::string *)std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(this + 9), v4, (uint64_t)&std::piecewise_construct, &v39);
    std::string::operator=(&v36, v8 + 1);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v36.__r_.__value_.__l.__size_ == 11)
      {
        v9 = (std::string *)v36.__r_.__value_.__r.__words[0];
LABEL_21:
        v12 = v9->__r_.__value_.__r.__words[0];
        v13 = *(std::string::size_type *)((char *)v9->__r_.__value_.__r.__words + 3);
        if (v12 == 0x746E6F632D544E5CLL && v13 == 0x746361746E6F632DLL)
          MEMORY[0x1AF44C914]((char *)v18 + 8, "\\contact-first");
      }
    }
    else if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) == 11)
    {
      v9 = &v36;
      goto LABEL_21;
    }
  }
  v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
  v15 = std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 33, (const void **)&v36.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v39);
  if (SBYTE7(v18[0]) < 0)
  {
    std::string::__init_copy_ctor_external(&v39, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
  }
  else
  {
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v39.__r_.__value_.__r.__words[2] = *(_QWORD *)&v18[0];
  }
  if (SHIBYTE(v18[1]) < 0)
    std::string::__init_copy_ctor_external(&v40, *((const std::string::value_type **)&v18[0] + 1), *(std::string::size_type *)&v18[1]);
  else
    v40 = *(std::string *)((char *)v18 + 8);
  v41 = v19;
  std::map<std::pair<quasar::PronType,std::string>,float>::map[abi:ne180100](&v42, (uint64_t)&v19 + 8);
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v37 = &v33;
  v38 = 0;
  v33 = (std::string *)operator new(0x50uLL);
  v34 = v33;
  v35 = &v33[3].__r_.__value_.__s.__data_[8];
  v34 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::LmeDataFactoryBase::Word>,quasar::LmeDataFactoryBase::Word const*,quasar::LmeDataFactoryBase::Word const*,quasar::LmeDataFactoryBase::Word*>((uint64_t)&v35, (__int128 *)&v39, &v44, v33);
  std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::push_back[abi:ne180100](v15 + 7, (uint64_t)&v33);
  v37 = &v33;
  std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  v11 = v43;
LABEL_34:
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v42, v11);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v19 + 8, (char *)v20);
  if (SHIBYTE(v18[1]) < 0)
    operator delete(*((void **)&v18[0] + 1));
  if (SBYTE7(v18[0]) < 0)
    operator delete(__p[0]);
  return v6 == 0;
}

void sub_1AD956DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (*(char *)(v14 - 137) < 0)
    operator delete(*(void **)(v14 - 160));
  if (*(char *)(v14 - 177) < 0)
    operator delete(*(void **)(v14 - 200));
  quasar::LmeDataFactoryBase::Word::~Word((quasar::LmeDataFactoryBase::Word *)&__p);
  _Unwind_Resume(a1);
}

void **std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  void **result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v16[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<quasar::LmeDataFactoryBase::Word>>::~__split_buffer(v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1AD957000(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::LmeDataFactoryBase::Word>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *quasar::ContextualData::getWords@<X0>(const void ***this@<X0>, uint64_t *a2@<X8>)
{
  return std::map<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>::map[abi:ne180100](a2, this + 33);
}

BOOL quasar::ContextualData::containsWords(quasar::ContextualData *this)
{
  return *((_QWORD *)this + 35) != 0;
}

double quasar::ContextualData::getNamedEntityQueryConfig@<D0>(uint64_t a1@<X0>, __int128 *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unsigned __int8 *v10;
  uint64_t *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  double result;
  unsigned int v15;
  unsigned int *v16;

  v7 = a1 + 32;
  LODWORD(v16) = 1;
  if (!std::__hash_table<quasar::PersonalizedLmData::DocumentType,std::hash<quasar::PersonalizedLmData::DocumentType>,std::equal_to<quasar::PersonalizedLmData::DocumentType>,std::allocator<quasar::PersonalizedLmData::DocumentType>>::find<quasar::PersonalizedLmData::DocumentType>((_QWORD *)(a1 + 32), (unsigned int *)&v16))goto LABEL_5;
  v15 = 1;
  v16 = &v15;
  v8 = std::__hash_table<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::__unordered_map_hasher<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::hash<quasar::ContextualData::SourceFramework>,std::equal_to<quasar::ContextualData::SourceFramework>,true>,std::__unordered_map_equal<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::equal_to<quasar::ContextualData::SourceFramework>,std::hash<quasar::ContextualData::SourceFramework>,true>,std::allocator<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>>::__emplace_unique_key_args<quasar::ContextualData::SourceFramework,std::piecewise_construct_t const&,std::tuple<quasar::ContextualData::SourceFramework const&>,std::tuple<>>(v7, &v15, (uint64_t)&std::piecewise_construct, &v16);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v8 + 3, a3))goto LABEL_5;
  v15 = 1;
  v16 = &v15;
  v9 = std::__hash_table<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::__unordered_map_hasher<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::hash<quasar::ContextualData::SourceFramework>,std::equal_to<quasar::ContextualData::SourceFramework>,true>,std::__unordered_map_equal<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::equal_to<quasar::ContextualData::SourceFramework>,std::hash<quasar::ContextualData::SourceFramework>,true>,std::allocator<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>>::__emplace_unique_key_args<quasar::ContextualData::SourceFramework,std::piecewise_construct_t const&,std::tuple<quasar::ContextualData::SourceFramework const&>,std::tuple<>>(v7, &v15, (uint64_t)&std::piecewise_construct, &v16);
  v16 = (unsigned int *)a3;
  v10 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v9 + 3), a3, (uint64_t)&std::piecewise_construct, (__int128 **)&v16);
  if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)v10 + 5, (unsigned __int8 *)a2))
  {
    v15 = 1;
    v16 = &v15;
    v11 = std::__hash_table<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::__unordered_map_hasher<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::hash<quasar::ContextualData::SourceFramework>,std::equal_to<quasar::ContextualData::SourceFramework>,true>,std::__unordered_map_equal<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::equal_to<quasar::ContextualData::SourceFramework>,std::hash<quasar::ContextualData::SourceFramework>,true>,std::allocator<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>>::__emplace_unique_key_args<quasar::ContextualData::SourceFramework,std::piecewise_construct_t const&,std::tuple<quasar::ContextualData::SourceFramework const&>,std::tuple<>>(v7, &v15, (uint64_t)&std::piecewise_construct, &v16);
    v16 = (unsigned int *)a3;
    v12 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v11 + 3), a3, (uint64_t)&std::piecewise_construct, (__int128 **)&v16);
    v16 = (unsigned int *)a2;
    v13 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v12 + 40), (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v16);
    std::unordered_map<std::string,quasar::ContextualData::QueryConfig>::unordered_map(a4, (uint64_t)(v13 + 40));
  }
  else
  {
LABEL_5:
    result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_DWORD *)(a4 + 32) = 1065353216;
  }
  return result;
}

double quasar::ContextualData::getRankedContactQueryConfig@<D0>(uint64_t a1@<X0>, __int128 *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unsigned __int8 *v10;
  uint64_t *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  double result;
  unsigned int v15;
  unsigned int *v16;

  v7 = a1 + 32;
  LODWORD(v16) = 2;
  if (!std::__hash_table<quasar::PersonalizedLmData::DocumentType,std::hash<quasar::PersonalizedLmData::DocumentType>,std::equal_to<quasar::PersonalizedLmData::DocumentType>,std::allocator<quasar::PersonalizedLmData::DocumentType>>::find<quasar::PersonalizedLmData::DocumentType>((_QWORD *)(a1 + 32), (unsigned int *)&v16))goto LABEL_5;
  v15 = 2;
  v16 = &v15;
  v8 = std::__hash_table<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::__unordered_map_hasher<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::hash<quasar::ContextualData::SourceFramework>,std::equal_to<quasar::ContextualData::SourceFramework>,true>,std::__unordered_map_equal<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::equal_to<quasar::ContextualData::SourceFramework>,std::hash<quasar::ContextualData::SourceFramework>,true>,std::allocator<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>>::__emplace_unique_key_args<quasar::ContextualData::SourceFramework,std::piecewise_construct_t const&,std::tuple<quasar::ContextualData::SourceFramework const&>,std::tuple<>>(v7, &v15, (uint64_t)&std::piecewise_construct, &v16);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v8 + 3, a3))goto LABEL_5;
  v15 = 2;
  v16 = &v15;
  v9 = std::__hash_table<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::__unordered_map_hasher<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::hash<quasar::ContextualData::SourceFramework>,std::equal_to<quasar::ContextualData::SourceFramework>,true>,std::__unordered_map_equal<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::equal_to<quasar::ContextualData::SourceFramework>,std::hash<quasar::ContextualData::SourceFramework>,true>,std::allocator<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>>::__emplace_unique_key_args<quasar::ContextualData::SourceFramework,std::piecewise_construct_t const&,std::tuple<quasar::ContextualData::SourceFramework const&>,std::tuple<>>(v7, &v15, (uint64_t)&std::piecewise_construct, &v16);
  v16 = (unsigned int *)a3;
  v10 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v9 + 3), a3, (uint64_t)&std::piecewise_construct, (__int128 **)&v16);
  if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)v10 + 5, (unsigned __int8 *)a2))
  {
    v15 = 2;
    v16 = &v15;
    v11 = std::__hash_table<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::__unordered_map_hasher<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::hash<quasar::ContextualData::SourceFramework>,std::equal_to<quasar::ContextualData::SourceFramework>,true>,std::__unordered_map_equal<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::equal_to<quasar::ContextualData::SourceFramework>,std::hash<quasar::ContextualData::SourceFramework>,true>,std::allocator<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>>::__emplace_unique_key_args<quasar::ContextualData::SourceFramework,std::piecewise_construct_t const&,std::tuple<quasar::ContextualData::SourceFramework const&>,std::tuple<>>(v7, &v15, (uint64_t)&std::piecewise_construct, &v16);
    v16 = (unsigned int *)a3;
    v12 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v11 + 3), a3, (uint64_t)&std::piecewise_construct, (__int128 **)&v16);
    v16 = (unsigned int *)a2;
    v13 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v12 + 40), (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v16);
    std::unordered_map<std::string,quasar::ContextualData::QueryConfig>::unordered_map(a4, (uint64_t)(v13 + 40));
  }
  else
  {
LABEL_5:
    result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_DWORD *)(a4 + 32) = 1065353216;
  }
  return result;
}

uint64_t quasar::ContextualData::getTemplateToAverageCost@<X0>(quasar::ContextualData *this@<X0>, uint64_t a2@<X8>)
{
  return std::unordered_map<std::string,double>::unordered_map(a2, (uint64_t)this + 176);
}

uint64_t quasar::ContextualData::getTemplateToDeviationCost@<X0>(quasar::ContextualData *this@<X0>, uint64_t a2@<X8>)
{
  return std::unordered_map<std::string,double>::unordered_map(a2, (uint64_t)this + 216);
}

uint64_t std::__hash_table<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::__unordered_map_hasher<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::hash<quasar::ContextualData::SourceFramework>,std::equal_to<quasar::ContextualData::SourceFramework>,true>,std::__unordered_map_equal<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::equal_to<quasar::ContextualData::SourceFramework>,std::hash<quasar::ContextualData::SourceFramework>,true>,std::allocator<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::__unordered_map_hasher<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::hash<quasar::ContextualData::SourceFramework>,std::equal_to<quasar::ContextualData::SourceFramework>,true>,std::__unordered_map_equal<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::equal_to<quasar::ContextualData::SourceFramework>,std::hash<quasar::ContextualData::SourceFramework>,true>,std::allocator<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::__unordered_map_hasher<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::hash<quasar::ContextualData::SourceFramework>,std::equal_to<quasar::ContextualData::SourceFramework>,true>,std::__unordered_map_equal<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::equal_to<quasar::ContextualData::SourceFramework>,std::hash<quasar::ContextualData::SourceFramework>,true>,std::allocator<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>::~__hash_table((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,0>(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::__unordered_map_hasher<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::hash<quasar::ContextualData::SourceFramework>,std::equal_to<quasar::ContextualData::SourceFramework>,true>,std::__unordered_map_equal<quasar::ContextualData::SourceFramework,std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,std::equal_to<quasar::ContextualData::SourceFramework>,std::hash<quasar::ContextualData::SourceFramework>,true>,std::allocator<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>>::__emplace_unique_key_args<quasar::ContextualData::SourceFramework,std::piecewise_construct_t const&,std::tuple<quasar::ContextualData::SourceFramework const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = a1 + 16;
  v14 = (char *)operator new(0x40uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  i = (uint64_t *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return i;
}

void sub_1AD95768C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<quasar::ContextualData::SourceFramework,std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>::~__hash_table((uint64_t)v2 + 24);
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1AD957968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;
  double result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x50uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  result = 0.0;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1AD957A14(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1AD957CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;
  double result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x50uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  result = 0.0;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1AD957D9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_set<std::string>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_1AD958068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1AD958118(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  char *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD v29[2];
  char v30;

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (char *)operator new(0x50uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = v10;
  v18 = *a4;
  v19 = **a4;
  *((_QWORD *)v17 + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)v17 + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 56) = 0u;
  *((_DWORD *)v17 + 18) = 1065353216;
  v30 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v26)
  {
    *(_QWORD *)v29[0] = *v26;
    *v26 = v29[0];
  }
  else
  {
    *(_QWORD *)v29[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v29[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v29[0])
    {
      v27 = *(_QWORD *)(*(_QWORD *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v27 >= v11)
          v27 %= v11;
      }
      else
      {
        v27 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v29[0];
    }
  }
  i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return i;
}

void sub_1AD9583CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

quasar::PTree *std::unique_ptr<quasar::PTree>::reset[abi:ne180100](quasar::PTree **a1, quasar::PTree *a2)
{
  quasar::PTree *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::PTree::~PTree(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::LmeDataFactoryBase::Word>,quasar::LmeDataFactoryBase::Word const*,quasar::LmeDataFactoryBase::Word const*,quasar::LmeDataFactoryBase::Word*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  int v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    v7 = a1;
    do
    {
      std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::Word const&>(v7, v4, v6);
      v6 += 5;
      v4 = (std::string *)((char *)v12 + 80);
      v12 = (std::string *)((char *)v12 + 80);
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmeDataFactoryBase::Word>,quasar::LmeDataFactoryBase::Word*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1AD9584B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmeDataFactoryBase::Word>,quasar::LmeDataFactoryBase::Word*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::Word const&>(int a1, std::string *this, __int128 *a3)
{
  __int128 v5;
  __int128 v6;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a3 + 3), *((_QWORD *)a3 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a3 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  LODWORD(this[2].__r_.__value_.__l.__data_) = *((_DWORD *)a3 + 12);
  return std::map<std::pair<quasar::PronType,std::string>,float>::map[abi:ne180100]((uint64_t *)&this[2].__r_.__value_.__l.__size_, (uint64_t)a3 + 56);
}

void sub_1AD95855C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1AD9585CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>> const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::__construct_node<std::pair<std::string const,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::__construct_node<std::pair<std::string const,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1AD95874C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,quasar::ContextualData::QueryConfig>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,quasar::ContextualData::QueryConfig> const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_1AD9587C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,quasar::ContextualData::QueryConfig> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>>>::__construct_node_hash<std::pair<std::string const,quasar::ContextualData::QueryConfig> const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_1AD958A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

__n128 std::__hash_table<std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::ContextualData::QueryConfig>>>::__construct_node_hash<std::pair<std::string const,quasar::ContextualData::QueryConfig> const&>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;
  __n128 result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x38uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v8 + 4) = *(_QWORD *)(a3 + 16);
  }
  result = *(__n128 *)(a3 + 24);
  *(__n128 *)(v8 + 40) = result;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1AD958AE0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,double>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,double> const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_1AD958B58(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,double> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__construct_node_hash<std::pair<std::string const,double> const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_1AD958DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

double std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__construct_node_hash<std::pair<std::string const,double> const&>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;
  double result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x30uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v8 + 4) = *(_QWORD *)(a3 + 16);
  }
  result = *(double *)(a3 + 24);
  *((double *)v8 + 5) = result;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1AD958E78(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t quasar::PersonalizationRecipe::init(quasar::PersonalizationRecipe *this, quasar::SystemConfig *a2)
{
  BOOL hasParam;
  BOOL v5;
  const std::string *SpeechModelInfo;
  BOOL Categories;
  BOOL v8;
  void *__p[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;

  __p[0] = (void *)quasar::SystemConfig::getConfigFileVersion(a2);
  quasar::SystemConfig::Version::Version(&v27, 87, 0);
  if (quasar::SystemConfig::Version::operator<(__p, &v27))
  {
    if (quasar::gLogLevel >= 1)
    {
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      v13 = 0u;
      v14 = 0u;
      v11 = 0u;
      v12 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Config Version is not high enough for personalization", 53);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
    }
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "personalization-recipe.personalization-version");
  hasParam = quasar::SystemConfig::hasParam((uint64_t)a2, (uint64_t)__p);
  v5 = hasParam;
  if ((SBYTE7(v11) & 0x80000000) == 0)
  {
    if (hasParam)
      goto LABEL_6;
LABEL_14:
    if (quasar::gLogLevel >= 4)
    {
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      v13 = 0u;
      v14 = 0u;
      v11 = 0u;
      v12 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Personalization not configured", 30);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    return 0;
  }
  operator delete(__p[0]);
  if (!v5)
    goto LABEL_14;
LABEL_6:
  SpeechModelInfo = (const std::string *)quasar::SystemConfig::getSpeechModelInfo(a2);
  std::string::operator=((std::string *)((char *)this + 32), SpeechModelInfo + 5);
  std::string::basic_string[abi:ne180100]<0>(__p, "personalization-recipe.");
  quasar::PersonalizationRecipe::registerParams((uint64_t)this, a2, (const void **)__p);
  if (SBYTE7(v11) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "personalization-recipe");
  quasar::SystemConfig::readPtree((uint64_t)a2, (uint64_t)__p, 0, 0);
  if (SBYTE7(v11) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "personalization-recipe.categories");
  Categories = quasar::PersonalizationRecipe::loadCategories((uint64_t)this, a2, (uint64_t)__p);
  v8 = Categories;
  if (SBYTE7(v11) < 0)
  {
    operator delete(__p[0]);
    if (!v8)
      return 0;
  }
  else if (!Categories)
  {
    return 0;
  }
  if (quasar::gLogLevel >= 4)
  {
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Personalization version: ", 25);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  return 1;
}

void sub_1AD95911C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
  _Unwind_Resume(a1);
}

void quasar::PersonalizationRecipe::registerParams(uint64_t a1, quasar::SystemConfig *this, const void **a3)
{
  void *v6[2];
  char v7;
  std::string __p;
  std::string v9;

  quasar::SystemConfig::getPrefix(this, &v9);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v9.__r_.__value_.__l.__data_, a3, (uint64_t)&__p);
  quasar::SystemConfig::setPrefix((std::string *)this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "personalization-version");
  std::string::basic_string[abi:ne180100]<0>(v6, "The version of the categories data");
  quasar::SystemConfig::Register<int>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1, (uint64_t)v6, 1, 87, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(v6[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  quasar::SystemConfig::setPrefix((std::string *)this, &v9);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
}

void sub_1AD959260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL quasar::PersonalizationRecipe::loadCategories(uint64_t a1, quasar::SystemConfig *a2, uint64_t a3)
{
  __int128 *v6;
  uint64_t v7;
  __int128 *v8;
  size_t v9;
  std::string *v10;
  const void *v11;
  std::string *v12;
  std::string::size_type size;
  std::string *v14;
  __int128 v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  quasar::PTree *PtreeOptional;
  std::string v22;
  void *__p[2];
  std::string::size_type v24;
  uint64_t v25;
  std::string v26;
  uint64_t v27;
  std::string *v28;

  PtreeOptional = (quasar::PTree *)quasar::SystemConfig::getPtreeOptional((uint64_t)a2, a3);
  if (PtreeOptional)
  {
    v6 = (__int128 *)quasar::PTree::begin(PtreeOptional);
    v7 = quasar::PTree::end(PtreeOptional);
    if (v6 != (__int128 *)v7)
    {
      v8 = (__int128 *)v7;
      do
      {
        std::pair<std::string,quasar::PTree>::pair[abi:ne180100](&v26, v6);
        quasar::PersonalizationRecipe::registerCategory(a1, a2, (const void **)a3, (std::string::size_type)&v26);
        if (*(char *)(a3 + 23) >= 0)
          v9 = *(unsigned __int8 *)(a3 + 23);
        else
          v9 = *(_QWORD *)(a3 + 8);
        std::string::basic_string[abi:ne180100]((uint64_t)&v22, v9 + 1);
        if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &v22;
        else
          v10 = (std::string *)v22.__r_.__value_.__r.__words[0];
        if (v9)
        {
          if (*(char *)(a3 + 23) >= 0)
            v11 = (const void *)a3;
          else
            v11 = *(const void **)a3;
          memmove(v10, v11, v9);
        }
        *(_WORD *)((char *)&v10->__r_.__value_.__l.__data_ + v9) = 46;
        if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v12 = &v26;
        else
          v12 = (std::string *)v26.__r_.__value_.__r.__words[0];
        if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
        else
          size = v26.__r_.__value_.__l.__size_;
        v14 = std::string::append(&v22, (const std::string::value_type *)v12, size);
        v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        v24 = v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        quasar::getLmeWordTagger(a2, (const void **)__p, &v25);
        v28 = &v26;
        v16 = std::__tree<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 8), (const void **)&v26.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v28);
        v17 = v25;
        v25 = 0;
        v18 = v16[20];
        v16[20] = v17;
        if (v18)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
          v19 = v25;
          v25 = 0;
          if (v19)
            (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        }
        if (SHIBYTE(v24) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v22.__r_.__value_.__l.__data_);
        quasar::PTree::~PTree((quasar::PTree *)&v27);
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v26.__r_.__value_.__l.__data_);
        v6 = (__int128 *)((char *)v6 + 88);
      }
      while (v6 != v8);
    }
  }
  return PtreeOptional != 0;
}

void sub_1AD9594BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  std::pair<std::string,quasar::PTree>::~pair((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void quasar::PersonalizationRecipe::registerCategory(uint64_t a1, quasar::SystemConfig *this, const void **a3, std::string::size_type a4)
{
  std::string *v8;
  __int128 v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  uint64_t **v17;
  uint64_t *v18;
  void **v19;
  void **v20;
  void **v21;
  void **v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  std::string *v29;
  __int128 v30;
  int v31;
  const std::string::value_type *v32;
  std::string::size_type v33;
  std::string *v34;
  __int128 v35;
  void *__p[2];
  _OWORD v37[4];
  __int128 v38;
  __int128 v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;

  quasar::SystemConfig::getPrefix(this, &v43);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v43.__r_.__value_.__l.__data_, a3, (uint64_t)&v40);
  v8 = std::string::append(&v40, ".");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = *(char *)(a4 + 23);
  if (v10 >= 0)
    v11 = (const std::string::value_type *)a4;
  else
    v11 = *(const std::string::value_type **)a4;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a4 + 23);
  else
    v12 = *(_QWORD *)(a4 + 8);
  v13 = std::string::append(&v41, v11, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v42, ".");
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  *(_QWORD *)&v37[0] = *((_QWORD *)&v15->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  quasar::SystemConfig::setPrefix((std::string *)this, (const std::string *)__p);
  if (SBYTE7(v37[0]) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  v38 = 0u;
  v39 = 0u;
  v17 = (uint64_t **)(a1 + 8);
  memset(v37, 0, sizeof(v37));
  *(_OWORD *)__p = 0u;
  v42.__r_.__value_.__r.__words[0] = a4;
  v18 = std::__tree<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17, (const void **)a4, (uint64_t)&std::piecewise_construct, (__int128 **)&v42);
  v19 = (void **)(v18 + 7);
  if (*((char *)v18 + 79) < 0)
    operator delete(*v19);
  v18[9] = *(_QWORD *)&v37[0];
  *(_OWORD *)v19 = *(_OWORD *)__p;
  BYTE7(v37[0]) = 0;
  LOBYTE(__p[0]) = 0;
  v20 = (void **)(v18 + 10);
  if (*((char *)v18 + 103) < 0)
    operator delete(*v20);
  *(_OWORD *)v20 = *(_OWORD *)((char *)v37 + 8);
  v18[12] = *((_QWORD *)&v37[1] + 1);
  v18[13] = 0;
  v21 = (void **)(v18 + 14);
  if (*((char *)v18 + 135) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = *(_OWORD *)((char *)&v37[2] + 8);
  v18[16] = *((_QWORD *)&v37[3] + 1);
  v22 = (void **)(v18 + 17);
  if (*((char *)v18 + 159) < 0)
    operator delete(*v22);
  *(_OWORD *)v22 = v38;
  v18[19] = v39;
  v23 = v18[20];
  v18[20] = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  std::string::basic_string[abi:ne180100]<0>(__p, "chars-to-trim");
  v42.__r_.__value_.__r.__words[0] = a4;
  v24 = std::__tree<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17, (const void **)a4, (uint64_t)&std::piecewise_construct, (__int128 **)&v42);
  std::string::basic_string[abi:ne180100]<0>(&v42, "The characters to be trimmed from the edges of the raw entity string");
  quasar::SystemConfig::Register<std::string>((uint64_t)this, (const void **)__p, (uint64_t)(v24 + 7), (uint64_t)&v42, 1, 88, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SBYTE7(v37[0]) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "chars-to-split");
  v42.__r_.__value_.__r.__words[0] = a4;
  v25 = std::__tree<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17, (const void **)a4, (uint64_t)&std::piecewise_construct, (__int128 **)&v42);
  std::string::basic_string[abi:ne180100]<0>(&v42, "The characters used to split the raw entity string");
  quasar::SystemConfig::Register<std::string>((uint64_t)this, (const void **)__p, (uint64_t)(v25 + 10), (uint64_t)&v42, 1, 88, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SBYTE7(v37[0]) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "frequency");
  v42.__r_.__value_.__r.__words[0] = a4;
  v26 = std::__tree<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17, (const void **)a4, (uint64_t)&std::piecewise_construct, (__int128 **)&v42);
  std::string::basic_string[abi:ne180100]<0>(&v42, "The relative frequency of the data");
  quasar::SystemConfig::Register<double>((uint64_t)this, (const void **)__p, (uint64_t)(v26 + 13), (uint64_t)&v42, 1, 88, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SBYTE7(v37[0]) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "template-name");
  v42.__r_.__value_.__r.__words[0] = a4;
  v27 = std::__tree<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17, (const void **)a4, (uint64_t)&std::piecewise_construct, (__int128 **)&v42);
  std::string::basic_string[abi:ne180100]<0>(&v42, "The template name for LME");
  quasar::SystemConfig::Register<std::string>((uint64_t)this, (const void **)__p, (uint64_t)(v27 + 14), (uint64_t)&v42, 1, 88, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SBYTE7(v37[0]) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "tag-name");
  v42.__r_.__value_.__r.__words[0] = a4;
  v28 = std::__tree<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17, (const void **)a4, (uint64_t)&std::piecewise_construct, (__int128 **)&v42);
  std::string::basic_string[abi:ne180100]<0>(&v42, "The tag name for LME (also important for enumerations)");
  quasar::SystemConfig::Register<std::string>((uint64_t)this, (const void **)__p, (uint64_t)(v28 + 17), (uint64_t)&v42, 1, 88, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SBYTE7(v37[0]) < 0)
    operator delete(__p[0]);
  quasar::SystemConfig::setPrefix((std::string *)this, &v43);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v43.__r_.__value_.__l.__data_, a3, (uint64_t)&v41);
  v29 = std::string::append(&v41, ".");
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  v31 = *(char *)(a4 + 23);
  if (v31 >= 0)
    v32 = (const std::string::value_type *)a4;
  else
    v32 = *(const std::string::value_type **)a4;
  if (v31 >= 0)
    v33 = *(unsigned __int8 *)(a4 + 23);
  else
    v33 = *(_QWORD *)(a4 + 8);
  v34 = std::string::append(&v42, v32, v33);
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  *(_QWORD *)&v37[0] = *((_QWORD *)&v34->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  quasar::SystemConfig::readPtree((uint64_t)this, (uint64_t)__p, 0, 0);
  if (SBYTE7(v37[0]) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
}

void sub_1AD959B0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (a16 < 0)
    operator delete(__p);
  if (*(char *)(v40 - 105) < 0)
    operator delete(*(void **)(v40 - 128));
  if (a40 < 0)
    operator delete(a35);
  if (*(char *)(v40 - 81) < 0)
    operator delete(*(void **)(v40 - 104));
  _Unwind_Resume(exception_object);
}

void quasar::PersonalizationRecipe::Category::~Category(quasar::PersonalizationRecipe::Category *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

uint64_t std::pair<std::string,quasar::PTree>::~pair(uint64_t a1)
{
  quasar::PTree::~PTree((quasar::PTree *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void quasar::PersonalizationRecipe::getPersonalizedData(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X8>)
{
  _QWORD *v6;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t *v10;
  std::string *v11;
  uint64_t v12;
  std::vector<std::string>::pointer end;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer v15;
  std::vector<std::string>::pointer v16;
  __int128 *v17;
  __int128 *v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  BOOL v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t **v41;
  _QWORD *v42;
  void *v44;
  char *v45;
  _QWORD *v46;
  unsigned int v49;
  void *__p;
  uint64_t v51;
  uint64_t v52;
  __int128 *v53;
  __int128 *v54;
  unint64_t v55;
  std::string v56;
  std::vector<std::string> v57;
  std::vector<std::string> v58;
  void *v59[2];
  char v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;

  *(_QWORD *)(a6 + 16) = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)a6 = a6 + 8;
  v6 = (_QWORD *)*a2;
  v40 = a2 + 1;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v41 = (uint64_t **)(a1 + 8);
    v39 = a1 + 16;
    do
    {
      v42 = v6;
      if (v39 == std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)v41, (const void **)v6 + 4))
      {
        if (quasar::gLogLevel >= 4)
        {
          v76 = 0u;
          v77 = 0u;
          v74 = 0u;
          v75 = 0u;
          v72 = 0u;
          v73 = 0u;
          v70 = 0u;
          v71 = 0u;
          v68 = 0u;
          v69 = 0u;
          v66 = 0u;
          v67 = 0u;
          v64 = 0u;
          v65 = 0u;
          v62 = 0u;
          v63 = 0u;
          v61 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v61);
          v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v61, (uint64_t)"Category ", 9);
          v32 = *((char *)v6 + 55);
          if (v32 >= 0)
            v33 = (uint64_t)(v6 + 4);
          else
            v33 = v6[4];
          if (v32 >= 0)
            v34 = *((unsigned __int8 *)v6 + 55);
          else
            v34 = v6[5];
          v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, v33, v34);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" not supported", 14);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v61);
        }
      }
      else
      {
        *(_QWORD *)&v61 = v6 + 4;
        v8 = std::__tree<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v41, (const void **)v6 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&v61);
        v9 = (_QWORD *)v6[7];
        v46 = v6 + 8;
        if (v9 != v6 + 8)
        {
          v10 = v8;
          v45 = (char *)(v8 + 7);
          v11 = (std::string *)(v8 + 10);
          v12 = (uint64_t)(v8 + 17);
          v44 = v8 + 14;
          do
          {
            if (*((char *)v9 + 55) < 0)
            {
              if (!v9[5])
                goto LABEL_47;
            }
            else if (!*((_BYTE *)v9 + 55))
            {
              goto LABEL_47;
            }
            quasar::trimUnicodeCharSet((char *)v9 + 32, v45, v59);
            quasar::getWordBoundarySeparatedString((char *)v59, &v58);
            memset(&v57, 0, sizeof(v57));
            begin = v58.__begin_;
            end = v58.__end_;
            if (v58.__begin_ != v58.__end_)
            {
              do
              {
                if (*((char *)v10 + 103) < 0)
                  std::string::__init_copy_ctor_external(&v56, (const std::string::value_type *)v10[10], v10[11]);
                else
                  v56 = *v11;
                quasar::splitUnicodeCharSet((char *)begin, (char *)&v56, (std::vector<std::string> *)&v61);
                if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v56.__r_.__value_.__l.__data_);
                std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v57, v57.__end_, (std::string *)v61, *((__int128 **)&v61 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v61 + 1) - v61) >> 3));
                v53 = &v61;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
                ++begin;
              }
              while (begin != end);
              v16 = v57.__begin_;
              v15 = v57.__end_;
              v53 = 0;
              v54 = 0;
              v55 = 0;
              while (2)
              {
                if (v16 == v15)
                  goto LABEL_38;
                __p = 0;
                v51 = 0;
                v52 = 0;
                quasar::TextSanitizer::sanitize(a3, (uint64_t)v16, (uint64_t)&__p);
                if (SHIBYTE(v52) < 0)
                {
                  if (!v51)
                    goto LABEL_24;
LABEL_21:
                  v49 = vcvtpd_s64_f64(*((double *)v10 + 13) * (double)*((int *)v9 + 14));
                  quasar::getPronunciationsFromOrthography((uint64_t)&__p, a3, a4, a5, (uint64_t)&v61);
                  v17 = v54;
                  if ((unint64_t)v54 >= v55)
                  {
                    v18 = (__int128 *)std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string &,std::string const&,int &,std::set<std::string> &>((uint64_t *)&v53, (uint64_t)&__p, v12, &v49, (uint64_t)&v61);
                  }
                  else
                  {
                    std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string &,std::string const&,int &,std::set<std::string> &>((uint64_t)&v55, (uint64_t)v54, (uint64_t)&__p, v12, &v49, (uint64_t)&v61);
                    v18 = v17 + 5;
                  }
                  v54 = v18;
                  std::__tree<std::string>::destroy((uint64_t)&v61, *((char **)&v61 + 1));
                }
                else
                {
                  if (HIBYTE(v52))
                    goto LABEL_21;
LABEL_24:
                  if (quasar::gLogLevel >= 4)
                  {
                    v76 = 0u;
                    v77 = 0u;
                    v74 = 0u;
                    v75 = 0u;
                    v72 = 0u;
                    v73 = 0u;
                    v70 = 0u;
                    v71 = 0u;
                    v68 = 0u;
                    v69 = 0u;
                    v66 = 0u;
                    v67 = 0u;
                    v64 = 0u;
                    v65 = 0u;
                    v62 = 0u;
                    v63 = 0u;
                    v61 = 0u;
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v61);
                    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v61, (uint64_t)"Ignoring entry with orthography ", 32);
                    v20 = *((char *)v9 + 55);
                    if (v20 >= 0)
                      v21 = (uint64_t)(v9 + 4);
                    else
                      v21 = v9[4];
                    if (v20 >= 0)
                      v22 = *((unsigned __int8 *)v9 + 55);
                    else
                      v22 = v9[5];
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
                    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v61);
                  }
                }
                if (SHIBYTE(v52) < 0)
                  operator delete(__p);
                ++v16;
                continue;
              }
            }
            v53 = 0;
            v54 = 0;
            v55 = 0;
LABEL_38:
            v23 = v10[20];
            if (v23)
              (*(void (**)(uint64_t, __int128 **))(*(_QWORD *)v23 + 24))(v23, &v53);
            if (v54 != v53)
            {
              __p = v44;
              v24 = std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a6, (const void **)v44, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
              v25 = v24 + 7;
              v26 = v24[8];
              if (v26 >= v24[9])
              {
                v27 = std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__push_back_slow_path<std::vector<quasar::LmeDataFactoryBase::Word> const&>(v25, &v53);
              }
              else
              {
                std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::LmeDataFactoryBase::Word> const&>((uint64_t)v25, &v53);
                v27 = v26 + 24;
              }
              v24[8] = v27;
            }
            *(_QWORD *)&v61 = &v53;
            std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
            *(_QWORD *)&v61 = &v57;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
            *(_QWORD *)&v61 = &v58;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
            if (v60 < 0)
              operator delete(v59[0]);
LABEL_47:
            v28 = (_QWORD *)v9[1];
            if (v28)
            {
              do
              {
                v29 = v28;
                v28 = (_QWORD *)*v28;
              }
              while (v28);
            }
            else
            {
              do
              {
                v29 = (_QWORD *)v9[2];
                v30 = *v29 == (_QWORD)v9;
                v9 = v29;
              }
              while (!v30);
            }
            v9 = v29;
          }
          while (v29 != v46);
        }
      }
      v36 = v42;
      v37 = (_QWORD *)v42[1];
      if (v37)
      {
        do
        {
          v38 = v37;
          v37 = (_QWORD *)*v37;
        }
        while (v37);
      }
      else
      {
        do
        {
          v38 = (_QWORD *)v36[2];
          v30 = *v38 == (_QWORD)v36;
          v36 = v38;
        }
        while (!v30);
      }
      v6 = v38;
    }
    while (v38 != v40);
  }
}

void sub_1AD95A218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50)
{
  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::destroy(a14, *(_QWORD **)(a14 + 8));
  _Unwind_Resume(a1);
}

void quasar::getPersonalizationRecipe(quasar *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = operator new();
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)v5 = 0u;
  *(_QWORD *)(v5 + 8) = v5 + 16;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  v7 = v5;
  if (quasar::PersonalizationRecipe::init((quasar::PersonalizationRecipe *)v5, this))
  {
    *a2 = v7;
  }
  else
  {
    *a2 = 0;
    v6 = v7;
    v7 = 0;
    if (v6)
      std::default_delete<quasar::PersonalizationRecipe>::operator()[abi:ne180100]((uint64_t)&v7, v6);
  }
}

void sub_1AD95A3B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    std::default_delete<quasar::PersonalizationRecipe>::operator()[abi:ne180100]((uint64_t)&a10, v11);
  _Unwind_Resume(exception_object);
}

void quasar::getInputDataFromJson(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 *v6;
  uint64_t i;
  uint64_t *v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t **v11;
  int v12;
  std::string v13;
  std::string __p;
  _BYTE v15[64];
  _BYTE v16[71];
  __int128 *v17[2];

  quasar::PTree::PTree((quasar::PTree *)v16);
  quasar::PTree::readJsonFromFile((uint64_t)v16, a2);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = a3 + 8;
  v6 = (__int128 *)quasar::PTree::begin((quasar::PTree *)v16);
  for (i = quasar::PTree::end((quasar::PTree *)v16); v6 != (__int128 *)i; v6 = (__int128 *)((char *)v6 + 88))
  {
    std::pair<std::string,quasar::PTree>::pair[abi:ne180100](&__p, v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v13, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v13 = __p;
    if (a1 + 16 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 8, (const void **)&v13.__r_.__value_.__l.__data_))
    {
      v17[0] = (__int128 *)&v13;
      v8 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a3, (const void **)&v13.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v17);
      v9 = (__int128 *)quasar::PTree::begin((quasar::PTree *)v15);
      v10 = quasar::PTree::end((quasar::PTree *)v15);
      if (v9 != (__int128 *)v10)
      {
        v11 = (uint64_t **)(v8 + 7);
        do
        {
          v12 = quasar::PTree::getInt<int>((uint64_t)v9 + 24);
          v17[0] = v9;
          *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, (const void **)v9, (uint64_t)&std::piecewise_construct, v17)+ 14) = v12;
          v9 = (__int128 *)((char *)v9 + 88);
        }
        while (v9 != (__int128 *)v10);
      }
    }
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    quasar::PTree::~PTree((quasar::PTree *)v15);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  quasar::PTree::~PTree((quasar::PTree *)v16);
}

void sub_1AD95A584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::__tree<std::__value_type<std::string,std::map<std::string,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,int>>>>::destroy(a10, *(_QWORD **)(a10 + 8));
  quasar::PTree::~PTree((quasar::PTree *)&a29);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

double std::__tree<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;
  double result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0xA8uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  result = 0.0;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1AD95A734(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::PersonalizationRecipe::Category>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::PersonalizationRecipe::Category>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string &,std::string const&,int &,std::set<std::string> &>(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  void *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t *v20;

  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v7 = v6 + 1;
  if (v6 + 1 > 0x333333333333333)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v7)
    v7 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v12 = 0x333333333333333;
  else
    v12 = v7;
  v20 = a1 + 2;
  if (v12)
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>((uint64_t)(a1 + 2), v12);
  else
    v13 = 0;
  v16 = v13;
  v17 = &v13[80 * v6];
  v19 = &v13[80 * v12];
  std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string &,std::string const&,int &,std::set<std::string> &>((uint64_t)(a1 + 2), (uint64_t)v17, a2, a3, a4, a5);
  v18 = v17 + 80;
  std::vector<quasar::LmeDataFactoryBase::Word>::__swap_out_circular_buffer(a1, &v16);
  v14 = a1[1];
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer(&v16);
  return v14;
}

void sub_1AD95A8B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string &,std::string const&,int &,std::set<std::string> &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6)
{
  std::string __p;
  std::string v11;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v11 = *(std::string *)a3;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    __p = *(std::string *)a4;
  quasar::LmeDataFactoryBase::Word::Word(a2, &v11, &__p, *a5, a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1AD95A984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

kaldi::CoreMLInferenceNet *kaldi::CoreMLInferenceNet::CoreMLInferenceNet(kaldi::CoreMLInferenceNet *this, __int128 *a2, int a3, _QWORD *a4)
{
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  id v11;
  void *v12;
  _QWORD v14[34];

  *(_QWORD *)this = &off_1E5D2A6A0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    *((_QWORD *)this + 3) = *((_QWORD *)a2 + 2);
    *(_OWORD *)((char *)this + 8) = v7;
  }
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 8) = *a4;
  *((_QWORD *)this + 6) = -1;
  *((_BYTE *)this + 56) = 0;
  v8 = a4[1];
  *((_QWORD *)this + 9) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *((_BYTE *)this + 56) = a3;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"CoreMLInferenceNet: On-Device ASR: (ANE) Eager Loading and keepANEModelLoaded: ", 79);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v14);
    a3 = *((unsigned __int8 *)this + 56);
  }
  if (a3)
    kaldi::CoreMLInferenceNet::LoadModel(this);
  v11 = objc_alloc_init(MEMORY[0x1E0C9E9A8]);
  v12 = (void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v11;

  return this;
}

void sub_1AD95AAD8(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void kaldi::CoreMLInferenceNet::LoadModel(kaldi::CoreMLInferenceNet *this)
{
  char *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  _QWORD *v24;
  id v25;
  const char *v26;
  size_t v27;
  void *v28;
  id v29;
  _QWORD v30[34];
  id v31[2];

  if (!*((_QWORD *)this + 5))
  {
    v2 = (char *)this + 8;
    if (*((char *)this + 31) < 0)
      v2 = (char *)*((_QWORD *)this + 1);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringByStandardizingPath");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    v5 = (void *)MEMORY[0x1E0C99E98];
    v29 = objc_retainAutorelease(v4);
    objc_msgSend(v5, "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:", objc_msgSend(v29, "fileSystemRepresentation"), 1, 0);
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = *((_QWORD *)this + 8);
    if (v7)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 16))(v7, (char *)this + 8);
    v31[0] = 0;
    objc_msgSend(MEMORY[0x1E0C9E938], "modelWithContentsOfURL:error:", v6, v31, v6);
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = v31[0];
    v10 = (void *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v8;

    v11 = *((_QWORD *)this + 8);
    if (v11)
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v11 + 24))(v11, (char *)this + 8);
      atomic_store(1u, (unsigned __int8 *)(*((_QWORD *)this + 8) + 8));
    }
    v12 = (void *)*((_QWORD *)this + 5);
    if (!v12)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Could not load ", 15);
      objc_msgSend(v9, "description");
      v25 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v26 = (const char *)objc_msgSend(v25, "UTF8String");
      v27 = strlen(v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v26, v27);

      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v30);
    }
    objc_msgSend(v12, "modelDescription");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "inputDescriptionsByName");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("input1"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v15, "multiArrayConstraint");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "shape");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "objectAtIndexedSubscript:", 0);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *((_DWORD *)this + 12) = objc_msgSend(v18, "intValue");

    objc_msgSend(v13, "outputDescriptionsByName");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "objectForKeyedSubscript:", CFSTR("output1"));
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v20, "multiArrayConstraint");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "shape");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "objectAtIndexedSubscript:", 0);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *((_DWORD *)this + 13) = objc_msgSend(v23, "intValue");

  }
}

void sub_1AD95ADE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void kaldi::CoreMLInferenceNet::~CoreMLInferenceNet(id *this)
{
  *this = &off_1E5D2A6A0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 8));

  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)this);
}

{
  kaldi::CoreMLInferenceNet::~CoreMLInferenceNet(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::CoreMLInferenceNet::ClearTemporaryBuffers(kaldi::CoreMLInferenceNet *this)
{
  void *v2;
  uint64_t v3;

  if (!*((_BYTE *)this + 56))
  {
    v2 = (void *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;

    v3 = *((_QWORD *)this + 8);
    if (v3)
      atomic_store(0, (unsigned __int8 *)(v3 + 8));
  }
}

void kaldi::CoreMLInferenceNet::FeedforwardGeneric<kaldi::CuMatrixBase<float>,kaldi::CuMatrix<float>>(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  id v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  _QWORD *v29;
  id v30;
  const char *v31;
  size_t v32;
  _QWORD *v33;
  void *v34;
  id v35;
  const char *v36;
  size_t v37;
  _QWORD *v38;
  id v39;
  const char *v40;
  size_t v41;
  id v42;
  id v43;
  id v44;
  _QWORD v45[34];
  id v46;
  const __CFString *v47;
  _QWORD v48[2];

  v48[1] = *MEMORY[0x1E0C80C00];
  kaldi::CoreMLInferenceNet::LoadModel((kaldi::CoreMLInferenceNet *)a1);
  kaldi::MLMultiArrayFromCu(a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_alloc(MEMORY[0x1E0C9E900]);
  v47 = CFSTR("input1");
  v48[0] = v6;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v48, &v47, 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v46 = 0;
  v9 = (void *)objc_msgSend(v7, "initWithDictionary:error:", v8, &v46);
  v10 = v46;

  if (!v9)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"could not make features: ", 25);
    objc_msgSend(v10, "description");
    v30 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v31 = (const char *)objc_msgSend(v30, "UTF8String");
    v32 = strlen(v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v31, v32);

    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v45);
  }
  v12 = *(_QWORD *)(a1 + 32);
  v11 = *(void **)(a1 + 40);
  v44 = v10;
  objc_msgSend(v11, "predictionFromFeatures:options:error:", v9, v12, &v44);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = v44;

  if (!v13)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"CoreML prediction failed, falling back to CPU inference", 55);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
    }
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "stringByStandardizingPath");
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    v18 = (void *)MEMORY[0x1E0C99E98];
    v19 = objc_retainAutorelease(v17);
    objc_msgSend(v18, "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:", objc_msgSend(v19, "fileSystemRepresentation"), 1, 0);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = v14;
    objc_msgSend(MEMORY[0x1E0C9E938], "modelWithContentsOfURL:error:", v20, &v43);
    v21 = objc_claimAutoreleasedReturnValue();
    v22 = v43;

    v23 = *(void **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v21;

    objc_msgSend(*(id *)(a1 + 32), "setUsesCPUOnly:", 1);
    v25 = *(_QWORD *)(a1 + 32);
    v24 = *(void **)(a1 + 40);
    v42 = v22;
    objc_msgSend(v24, "predictionFromFeatures:options:error:", v9, v25, &v42);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = v42;

    if (!v13)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
      v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"could not predict: ", 19);
      objc_msgSend(v14, "description");
      v39 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v40 = (const char *)objc_msgSend(v39, "UTF8String");
      v41 = strlen(v40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v40, v41);

      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v45);
    }

  }
  objc_msgSend(v13, "featureValueForName:", CFSTR("output1"));
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "multiArrayValue");
  v27 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v27)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"No output from CoreML: ", 23);
    objc_msgSend(v13, "featureNames");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "description");
    v35 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v36 = (const char *)objc_msgSend(v35, "UTF8String");
    v37 = strlen(v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v36, v37);

    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v45);
  }
  v28 = (void *)MEMORY[0x1AF44DFA0]();
  kaldi::MLMultiArrayToCu(v27, a3);
  objc_autoreleasePoolPop(v28);

}

void sub_1AD95B3A0()
{
  void *v0;

  JUMPOUT(0x1AD95B41CLL);
}

void sub_1AD95B3D0()
{
  void *v0;

  JUMPOUT(0x1AD95B41CLL);
}

void sub_1AD95B3DC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1AD95B3FC()
{
  void *v0;
  void *v1;

  JUMPOUT(0x1AD95B408);
}

void kaldi::CoreMLInferenceNet::FeedforwardGeneric<kaldi::CuVectorBase<float>,kaldi::CuVector<float>>(uint64_t a1, uint64_t a2, void *a3)
{
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  id v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  id v41;
  const char *v42;
  size_t v43;
  _QWORD *v44;
  id v45;
  const char *v46;
  size_t v47;
  _QWORD *v48;
  void *v49;
  id v50;
  const char *v51;
  size_t v52;
  _QWORD *v53;
  id v54;
  const char *v55;
  size_t v56;
  _QWORD *v57;
  id v58;
  const char *v59;
  size_t v60;
  _QWORD *v61;
  id v62;
  const char *v63;
  size_t v64;
  void *v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const __CFString *v74;
  void *v75;
  _QWORD v76[3];

  v76[1] = *MEMORY[0x1E0C80C00];
  kaldi::CoreMLInferenceNet::LoadModel((kaldi::CoreMLInferenceNet *)a1);
  v6 = objc_alloc(MEMORY[0x1E0C9E978]);
  v7 = *(_QWORD *)(a2 + 8);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(a2 + 16));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v76[0] = v8;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v76, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v70 = 0;
  v65 = (void *)objc_msgSend(v6, "initWithDataPointer:shape:dataType:strides:deallocator:error:", v7, v9, 65568, &unk_1E5D5BF18, &__block_literal_global_26, &v70);
  v10 = v70;

  if (!v65)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
    v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"Could not make multiarray from vector ", 38);
    objc_msgSend(v10, "description");
    v41 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v42 = (const char *)objc_msgSend(v41, "UTF8String");
    v43 = strlen(v42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v42, v43);

    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v71);
  }

  v11 = objc_alloc(MEMORY[0x1E0C9E900]);
  v74 = CFSTR("input1");
  v75 = v65;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v75, &v74, 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v69 = 0;
  v13 = (void *)objc_msgSend(v11, "initWithDictionary:error:", v12, &v69);
  v14 = v69;

  if (!v13)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
    v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"could not make features: ", 25);
    objc_msgSend(v14, "description");
    v45 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v46 = (const char *)objc_msgSend(v45, "UTF8String");
    v47 = strlen(v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v46, v47);

    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v71);
  }
  v16 = *(_QWORD *)(a1 + 32);
  v15 = *(void **)(a1 + 40);
  v68 = v14;
  objc_msgSend(v15, "predictionFromFeatures:options:error:", v13, v16, &v68);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = v68;

  if (!v17)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"CoreML prediction failed, falling back to CPU inference", 55);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
    }
    v19 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v19 = (_QWORD *)*v19;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "stringByStandardizingPath");
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    v22 = (void *)MEMORY[0x1E0C99E98];
    v23 = objc_retainAutorelease(v21);
    objc_msgSend(v22, "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:", objc_msgSend(v23, "fileSystemRepresentation"), 1, 0);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v67 = v18;
    objc_msgSend(MEMORY[0x1E0C9E938], "modelWithContentsOfURL:error:", v24, &v67);
    v25 = objc_claimAutoreleasedReturnValue();
    v26 = v67;

    v27 = *(void **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v25;

    objc_msgSend(*(id *)(a1 + 32), "setUsesCPUOnly:", 1);
    v29 = *(_QWORD *)(a1 + 32);
    v28 = *(void **)(a1 + 40);
    v66 = v26;
    objc_msgSend(v28, "predictionFromFeatures:options:error:", v13, v29, &v66);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = v66;

    if (!v17)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
      v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"could not predict: ", 19);
      objc_msgSend(v18, "description");
      v62 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v63 = (const char *)objc_msgSend(v62, "UTF8String");
      v64 = strlen(v63);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)v63, v64);

      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v71);
    }

  }
  objc_msgSend(v17, "featureValueForName:", CFSTR("output1"));
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "multiArrayValue");
  v31 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v31)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
    v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"No output from CoreML: ", 23);
    objc_msgSend(v17, "featureNames");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v49, "description");
    v50 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v51 = (const char *)objc_msgSend(v50, "UTF8String");
    v52 = strlen(v51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)v51, v52);

    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v71);
  }
  v32 = (void *)MEMORY[0x1AF44DFA0]();
  v33 = v31;
  objc_msgSend(v33, "shape");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v34, "count") != 1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
    v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"Non-vector shape output from CoreML: ", 37);
    objc_msgSend(v34, "description");
    v54 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v55 = (const char *)objc_msgSend(v54, "UTF8String");
    v56 = strlen(v55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)v55, v56);

    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v71);
  }
  objc_msgSend(v34, "objectAtIndexedSubscript:", 0);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v36 = objc_msgSend(v35, "intValue");

  v37 = objc_msgSend(v33, "dataType");
  if (v37 == 65568)
  {
    v39 = objc_msgSend(objc_retainAutorelease(v33), "dataPointer");
    v73 = 0;
    v71 = v39;
    v72 = v36;
    kaldi::CuVector<float>::Resize((uint64_t)a3, v36, 1);
    kaldi::CuVectorBase<float>::CopyFromVec<float>(a3, (uint64_t)&v71);
  }
  else
  {
    if (v37 != 65600)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
      v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"Unexpected output from CoreML: ", 31);
      objc_msgSend(v33, "description");
      v58 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v59 = (const char *)objc_msgSend(v58, "UTF8String");
      v60 = strlen(v59);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)v59, v60);

      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v71);
    }
    kaldi::CuVector<float>::Resize((uint64_t)a3, v36, 0);
    v38 = objc_msgSend(objc_retainAutorelease(v33), "dataPointer");
    v73 = 0;
    v71 = v38;
    v72 = v36;
    kaldi::CuVectorBase<float>::CopyFromVec<double>((uint64_t)a3, (uint64_t)&v71);
  }

  objc_autoreleasePoolPop(v32);
}

void sub_1AD95BB30(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void kaldi::CoreMLInferenceNet::MultiIOFeedforwardSimple(uint64_t a1, uint64_t a2, uint64_t a3, int32x2_t *a4)
{
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;
  id v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  _QWORD *v32;
  id v33;
  const char *v34;
  size_t v35;
  _QWORD *v36;
  void *v37;
  id v38;
  const char *v39;
  size_t v40;
  _QWORD *v41;
  id v42;
  const char *v43;
  size_t v44;
  id v45;
  id v46;
  id v47;
  id v48;
  _QWORD v49[34];
  _QWORD v50[2];
  _QWORD v51[4];

  v51[2] = *MEMORY[0x1E0C80C00];
  kaldi::CoreMLInferenceNet::LoadModel((kaldi::CoreMLInferenceNet *)a1);
  kaldi::MLMultiArrayFromCu(a2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3 != 8)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"in_extras.size() == 1", 21);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v49);
  }
  kaldi::MLMultiArrayFromCu(**(_QWORD **)a3);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_alloc(MEMORY[0x1E0C9E900]);
  v50[0] = CFSTR("input1");
  v50[1] = CFSTR("input2");
  v51[0] = v8;
  v51[1] = v9;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v51, v50, 2);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v48 = 0;
  v12 = (void *)objc_msgSend(v10, "initWithDictionary:error:", v11, &v48);
  v13 = v48;

  if (!v12)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"could not make features: ", 25);
    objc_msgSend(v13, "description");
    v33 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v34 = (const char *)objc_msgSend(v33, "UTF8String");
    v35 = strlen(v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v34, v35);

    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v49);
  }
  v15 = *(_QWORD *)(a1 + 32);
  v14 = *(void **)(a1 + 40);
  v47 = v13;
  objc_msgSend(v14, "predictionFromFeatures:options:error:", v12, v15, &v47);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = v47;

  if (!v16)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"CoreML prediction failed, falling back to CPU inference", 55);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
    }
    v18 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v18 = (_QWORD *)*v18;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "stringByStandardizingPath");
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    v21 = (void *)MEMORY[0x1E0C99E98];
    v22 = objc_retainAutorelease(v20);
    objc_msgSend(v21, "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:", objc_msgSend(v22, "fileSystemRepresentation"), 1, 0);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v46 = v17;
    objc_msgSend(MEMORY[0x1E0C9E938], "modelWithContentsOfURL:error:", v23, &v46);
    v24 = objc_claimAutoreleasedReturnValue();
    v25 = v46;

    v26 = *(void **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v24;

    objc_msgSend(*(id *)(a1 + 32), "setUsesCPUOnly:", 1);
    v28 = *(_QWORD *)(a1 + 32);
    v27 = *(void **)(a1 + 40);
    v45 = v25;
    objc_msgSend(v27, "predictionFromFeatures:options:error:", v12, v28, &v45);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = v45;

    if (!v16)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
      v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"could not predict: ", 19);
      objc_msgSend(v17, "description");
      v42 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v43 = (const char *)objc_msgSend(v42, "UTF8String");
      v44 = strlen(v43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v43, v44);

      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v49);
    }

  }
  objc_msgSend(v16, "featureValueForName:", CFSTR("output1"));
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "multiArrayValue");
  v30 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v30)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
    v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"No output from CoreML: ", 23);
    objc_msgSend(v16, "featureNames");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "description");
    v38 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v39 = (const char *)objc_msgSend(v38, "UTF8String");
    v40 = strlen(v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v39, v40);

    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v49);
  }
  v31 = (void *)MEMORY[0x1AF44DFA0]();
  kaldi::MLMultiArrayToCu(v30, a4);
  objc_autoreleasePoolPop(v31);

}

void sub_1AD95C144(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

id kaldi::MLMultiArrayFromCu(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD *v12;
  id v13;
  const char *v14;
  size_t v15;
  _QWORD v16[34];
  id v17;
  _QWORD v18[3];
  _QWORD v19[4];

  v19[3] = *MEMORY[0x1E0C80C00];
  v2 = objc_alloc(MEMORY[0x1E0C9E978]);
  v3 = *(_QWORD *)(a1 + 8);
  v19[0] = &unk_1E5D5BD50;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(a1 + 20));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v19[1] = v4;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(a1 + 16));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v19[2] = v5;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v19, 3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v18[0] = &unk_1E5D5BD50;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(a1 + 24));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v18[1] = v7;
  v18[2] = &unk_1E5D5BD50;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v18, 3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = 0;
  v9 = (void *)objc_msgSend(v2, "initWithDataPointer:shape:dataType:strides:deallocator:error:", v3, v6, 65568, v8, &__block_literal_global_0, &v17);
  v10 = v17;

  if (!v9)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Could not make multiarray from matrix ", 38);
    objc_msgSend(v10, "description");
    v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v14 = (const char *)objc_msgSend(v13, "UTF8String");
    v15 = strlen(v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v14, v15);

    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
  }

  return v9;
}

void sub_1AD95C358(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void kaldi::MLMultiArrayToCu(void *a1, int32x2_t *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  const char *v16;
  size_t v17;
  _QWORD *v18;
  id v19;
  const char *v20;
  size_t v21;
  _QWORD v22[34];

  v3 = a1;
  objc_msgSend(v3, "shape");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "strides");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v4, "count");
  if (v6 == 2)
  {
    objc_msgSend(v4, "objectAtIndexedSubscript:", 0);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v11, "intValue");

    objc_msgSend(v4, "objectAtIndexedSubscript:", 1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v12, "intValue");

    objc_msgSend(v5, "objectAtIndexedSubscript:", 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v7, "longValue");
  }
  else
  {
    if (v6 != 1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Unexpected output shape from CoreML: ", 37);
      objc_msgSend(v4, "description");
      v15 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v16 = (const char *)objc_msgSend(v15, "UTF8String");
      v17 = strlen(v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v16, v17);

      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
    }
    objc_msgSend(v4, "objectAtIndexedSubscript:", 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "intValue");
    v9 = 1;
    v10 = v8;
  }

  v13 = objc_msgSend(v3, "dataType");
  if (v13 == 65600)
  {
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)v22, objc_msgSend(objc_retainAutorelease(v3), "dataPointer"), v9, v8, v10);
    kaldi::CuMatrix<float>::Resize(a2, v9, v8, 0, 0);
    kaldi::CuMatrixBase<float>::CopyFromMat<double>((uint64_t)a2, (int *)v22, 111);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v22);
  }
  else
  {
    if (v13 != 65568)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Unexpected output from CoreML: ", 31);
      objc_msgSend(v3, "description");
      v19 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v20 = (const char *)objc_msgSend(v19, "UTF8String");
      v21 = strlen(v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v20, v21);

      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
    }
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)v22, objc_msgSend(objc_retainAutorelease(v3), "dataPointer"), v9, v8, v10);
    kaldi::CuMatrix<float>::operator=(a2, (int *)v22);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v22);
  }

}

void sub_1AD95C664(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t kaldi::CoreMLInferenceNet::OutputDim(kaldi::CoreMLInferenceNet *this)
{
  kaldi::CoreMLInferenceNet::LoadModel(this);
  return *((unsigned int *)this + 13);
}

uint64_t kaldi::CoreMLInferenceNet::InputDim(kaldi::CoreMLInferenceNet *this)
{
  kaldi::CoreMLInferenceNet::LoadModel(this);
  return *((unsigned int *)this + 12);
}

double kaldi::ReadCoreMLModelNet@<D0>(__int128 *a1@<X0>, unsigned __int8 a2@<W1>, _QWORD *a3@<X2>, _OWORD *a4@<X8>)
{
  double result;
  double v6[3];
  unsigned __int8 v7;

  v7 = a2;
  std::allocate_shared[abi:ne180100]<kaldi::CoreMLInferenceNet,std::allocator<kaldi::CoreMLInferenceNet>,std::string const&,BOOL &,std::shared_ptr<kaldi::ModelInitializeContext> &,void>(a1, &v7, a3, v6);
  result = v6[0];
  *a4 = *(_OWORD *)v6;
  return result;
}

uint64_t kaldi::FeedForwardNetItf::IsStreamingWithCache(kaldi::FeedForwardNetItf *this)
{
  return 0;
}

uint64_t kaldi::FeedForwardNetItf::IsStreamingWithMasking(kaldi::FeedForwardNetItf *this)
{
  return 0;
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::CoreMLInferenceNet,std::allocator<kaldi::CoreMLInferenceNet>,std::string const&,BOOL &,std::shared_ptr<kaldi::ModelInitializeContext> &,void>@<X0>(__int128 *a1@<X1>, unsigned __int8 *a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x68uLL);
  result = std::__shared_ptr_emplace<kaldi::CoreMLInferenceNet>::__shared_ptr_emplace[abi:ne180100]<std::string const&,BOOL &,std::shared_ptr<kaldi::ModelInitializeContext> &,std::allocator<kaldi::CoreMLInferenceNet>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1AD95C7F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::CoreMLInferenceNet>::__shared_ptr_emplace[abi:ne180100]<std::string const&,BOOL &,std::shared_ptr<kaldi::ModelInitializeContext> &,std::allocator<kaldi::CoreMLInferenceNet>,0>(_QWORD *a1, __int128 *a2, unsigned __int8 *a3, _QWORD *a4)
{
  char v6;

  a1[2] = 0;
  *a1 = &unk_1E5D41840;
  a1[1] = 0;
  std::allocator<kaldi::CoreMLInferenceNet>::construct[abi:ne180100]<kaldi::CoreMLInferenceNet,std::string const&,BOOL &,std::shared_ptr<kaldi::ModelInitializeContext> &>((int)&v6, (kaldi::CoreMLInferenceNet *)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_1AD95C860(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::CoreMLInferenceNet>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41840;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::CoreMLInferenceNet>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41840;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::CoreMLInferenceNet>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocator<kaldi::CoreMLInferenceNet>::construct[abi:ne180100]<kaldi::CoreMLInferenceNet,std::string const&,BOOL &,std::shared_ptr<kaldi::ModelInitializeContext> &>(int a1, kaldi::CoreMLInferenceNet *this, __int128 *a3, unsigned __int8 *a4, _QWORD *a5)
{
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v11[2];

  v5 = *a4;
  v6 = (std::__shared_weak_count *)a5[1];
  v11[0] = *a5;
  v11[1] = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  kaldi::CoreMLInferenceNet::CoreMLInferenceNet(this, a3, v5 != 0, v11);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1AD95C96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::DummyConfig::getType(quasar::DummyConfig *this)
{
  return 0;
}

uint64_t quasar::DummyConfig::DummyConfig(uint64_t a1, std::string *a2, uint64_t a3)
{
  uint64_t v6;
  size_t v7;
  std::string *p_p;
  const void *v9;
  void *v11[2];
  char v12;
  std::string __p;

  *(_QWORD *)(a1 + 8) = 0x3F80000000000000;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)a1 = off_1E5D343C0;
  *(_QWORD *)(a1 + 120) = 0;
  v6 = a1 + 120;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  quasar::LmBuildConfig::readSysConfig(a1, a2, a3);
  if (*(char *)(a3 + 23) >= 0)
    v7 = *(unsigned __int8 *)(a3 + 23);
  else
    v7 = *(_QWORD *)(a3 + 8);
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v7 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v7)
  {
    if (*(char *)(a3 + 23) >= 0)
      v9 = (const void *)a3;
    else
      v9 = *(const void **)a3;
    memmove(p_p, v9, v7);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v7) = 46;
  quasar::SystemConfig::setPrefix(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "fst-file");
  std::string::basic_string[abi:ne180100]<0>(v11, "LM FST file for dummy experiments");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, v6, (uint64_t)v11, 1, 173, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0)
    operator delete(v11[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  quasar::SystemConfig::readPtree((uint64_t)a2, a3, 0, 0);
  return a1;
}

void sub_1AD95CB0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  void **v23;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if (*(char *)(v22 + 143) < 0)
    operator delete(*v23);
  quasar::LmBuildConfig::~LmBuildConfig((void **)v22);
  _Unwind_Resume(a1);
}

void quasar::FstLmHandle::~FstLmHandle(quasar::FstLmHandle *this, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24)) = a2[1];
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 632);
  quasar::ModelLoader::~ModelLoader((quasar::FstLmHandle *)((char *)this + 8));
}

uint64_t quasar::DummyLmModel::DummyLmModel(uint64_t a1, uint64_t *a2, const std::string *a3, float *a4)
{
  float v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;

  v8 = *a4;
  *(_QWORD *)(a1 + 936) = &unk_1E5D34118;
  *(_BYTE *)(a1 + 944) = 0;
  *(float *)(a1 + 948) = v8;
  *(_DWORD *)(a1 + 952) = 1065353216;
  v9 = a2[1];
  v28 = *a2;
  v29 = (std::__shared_weak_count *)v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  quasar::FstLmHandle::FstLmHandle(a1, (uint64_t *)&off_1E5D15168, &v28, 0);
  v12 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = operator new();
  v16 = v15;
  v17 = a2[1];
  v30 = *a2;
  v31 = (std::__shared_weak_count *)v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  quasar::FstLmHandle::FstLmHandle(v15, &v30, 0, *a4, 1.0);
  v20 = v31;
  if (v31)
  {
    v21 = (unint64_t *)&v31->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (std::__shared_weak_count *)operator new();
  v23->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45F20;
  v23->__shared_owners_ = 0;
  v23->__shared_weak_owners_ = 0;
  v23[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v27 = v23;
  quasar::LmModel2::LmModel2(a1 + 656, (uint64_t *)&off_1E5D15178);
  if (v27)
  {
    v24 = (unint64_t *)&v27->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  *(_QWORD *)a1 = &off_1E5D34C48;
  *(_QWORD *)(a1 + 936) = off_1E5D34CD0;
  *(_QWORD *)(a1 + 656) = off_1E5D34C88;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_QWORD *)(a1 + 928) = 0;
  quasar::LmModel2::setModelSysConfigParams((quasar::LmModel2 *)(a1 + 656), (const quasar::LmBuildConfig::ModelSysConfigParameters *)a4);
  std::string::operator=((std::string *)(a1 + 896), a3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(a1 + 920), a2);
  return a1;
}

void sub_1AD95CE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::FstLmHandle *v9;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  quasar::FstLmHandle::~FstLmHandle(v9, (uint64_t *)&off_1E5D15168);
  _Unwind_Resume(a1);
}

uint64_t quasar::DummyLmModel::DummyLmModel(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v13;

  v4 = *a2 + *(_QWORD *)(*(_QWORD *)*a2 - 24);
  *(_QWORD *)(a1 + 936) = &unk_1E5D34118;
  v5 = *(_QWORD *)(v4 + 8);
  *(_DWORD *)(a1 + 952) = *(_DWORD *)(v4 + 16);
  *(_QWORD *)(a1 + 944) = v5;
  v6 = quasar::FstLmHandle::FstLmHandle(a1, (uint64_t *)&off_1E5D15168, a2) + 656;
  v7 = (std::__shared_weak_count *)a2[1];
  v13 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  quasar::LmModel2::LmModel2(v6, (uint64_t *)&off_1E5D15178);
  if (v13)
  {
    v10 = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  *(_QWORD *)a1 = &off_1E5D34C48;
  *(_QWORD *)(a1 + 936) = off_1E5D34CD0;
  *(_QWORD *)(a1 + 656) = off_1E5D34C88;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_QWORD *)(a1 + 928) = 0;
  return a1;
}

void sub_1AD95CFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::FstLmHandle *v9;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  quasar::FstLmHandle::~FstLmHandle(v9, (uint64_t *)&off_1E5D15168);
  _Unwind_Resume(a1);
}

void quasar::DummyLmModel::AddTo(uint64_t a1, _QWORD *a2, uint64_t *a3, unsigned int a4, int a5, char a6, int a7, uint64_t a8)
{
  quasar::FstLmHandle::AddTo(a1, a2, a3, a4, a5, a6, a7, a8);
}

void `virtual thunk to'quasar::DummyLmModel::AddTo(_QWORD *a1, _QWORD *a2, uint64_t *a3, unsigned int a4, int a5, char a6, int a7, uint64_t a8)
{
  quasar::FstLmHandle::AddTo((uint64_t)a1 + *(_QWORD *)(*a1 - 32), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t quasar::DummyLmModel::writeImpl(uint64_t a1, const void **a2)
{
  size_t v4;
  std::string *v5;
  const void *v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  uint64_t v12;
  std::string __p;
  int v15;
  std::string v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[20];

  v19[19] = *MEMORY[0x1E0C80C00];
  if (*((char *)a2 + 23) >= 0)
    v4 = *((unsigned __int8 *)a2 + 23);
  else
    v4 = (size_t)a2[1];
  v5 = &v16;
  std::string::basic_string[abi:ne180100]((uint64_t)&v16, v4 + 1);
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v5 = (std::string *)v16.__r_.__value_.__r.__words[0];
  if (v4)
  {
    if (*((char *)a2 + 23) >= 0)
      v6 = a2;
    else
      v6 = *a2;
    memmove(v5, v6, v4);
  }
  *(_WORD *)((char *)&v5->__r_.__value_.__l.__data_ + v4) = 47;
  v7 = *(char *)(a1 + 919);
  if (v7 >= 0)
    v8 = (const std::string::value_type *)(a1 + 896);
  else
    v8 = *(const std::string::value_type **)(a1 + 896);
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a1 + 919);
  else
    v9 = *(_QWORD *)(a1 + 904);
  v10 = std::string::append(&v16, v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::ofstream::basic_ofstream(&v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  v12 = *(_QWORD *)(a1 + 920);
  std::string::basic_string[abi:ne180100]<0>(&v16, "");
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  else
    __p = v16;
  v15 = 16777217;
  (*(void (**)(uint64_t, uint64_t *, std::string *))(*(_QWORD *)v12 + 96))(v12, &v17, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  v17 = *MEMORY[0x1E0DE4F48];
  *(uint64_t *)((char *)&v17 + *(_QWORD *)(v17 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
  MEMORY[0x1AF44CA70](&v18);
  std::ostream::~ostream();
  MEMORY[0x1AF44D094](v19);
  return 1;
}

void sub_1AD95D210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23)
{
  if (a21 < 0)
    operator delete(__p);
  std::ofstream::~ofstream(&a23);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'quasar::DummyLmModel::writeImpl(uint64_t a1, const void **a2)
{
  quasar::DummyLmModel::writeImpl(a1 - 656, a2);
  return 1;
}

void quasar::DummyLmModel::getMetadata(quasar::DummyLmModel *this@<X0>, quasar::PTree *a2@<X8>)
{
  _BYTE v4[64];
  void *v5[2];
  char v6;

  quasar::LmModel2::getMetadata((quasar::DummyLmModel *)((char *)this + 656), a2);
  std::string::basic_string[abi:ne180100]<0>(v5, "filename");
  quasar::PTree::PTree(v4, (char *)this + 896);
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)v5, (uint64_t)v4, 1);
  quasar::PTree::~PTree((quasar::PTree *)v4);
  if (v6 < 0)
    operator delete(v5[0]);
}

void sub_1AD95D320(_Unwind_Exception *a1, uint64_t a2, ...)
{
  quasar::PTree *v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  quasar::PTree::~PTree((quasar::PTree *)va);
  if (*(char *)(v3 - 17) < 0)
    operator delete(*(void **)(v3 - 40));
  quasar::PTree::~PTree(v2);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'quasar::DummyLmModel::getMetadata(quasar::DummyLmModel *this@<X0>, quasar::PTree *a2@<X8>)
{
  quasar::DummyLmModel::getMetadata((quasar::DummyLmModel *)((char *)this - 656), a2);
}

void quasar::trainDummyModel(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD v10[3];
  char v11;
  _QWORD v12[3];
  char v13;
  std::string v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  _BYTE v17[624];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  quasar::ModelLoader::ModelLoader((quasar::ModelLoader *)v17);
  quasar::ModelLoader::readFstNetwork((uint64_t)v17, *a1 + 120, &v15);
  quasar::filesystem::Path::Path(v10, (__int128 *)(*a1 + 120));
  quasar::filesystem::Path::filename((quasar::filesystem::Path *)v10, v12);
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)v12, &v14);
  v12[0] = &unk_1E5D343A0;
  if (v13 < 0)
    operator delete((void *)v12[1]);
  v10[0] = &unk_1E5D343A0;
  if (v11 < 0)
    operator delete((void *)v10[1]);
  v4 = *a1;
  v5 = operator new();
  quasar::DummyLmModel::DummyLmModel(v5, &v15, &v14, (float *)(v4 + 8));
  *a2 = v5;
  v6 = (_QWORD *)operator new();
  *v6 = &unk_1E5D45F58;
  v6[1] = 0;
  v6[2] = 0;
  v6[3] = v5;
  a2[1] = (uint64_t)v6;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  v7 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  quasar::ModelLoader::~ModelLoader((quasar::ModelLoader *)v17);
}

void sub_1AD95D4EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,char a31)
{
  uint64_t v31;

  (*(void (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
  if (a28 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  quasar::ModelLoader::~ModelLoader((quasar::ModelLoader *)&a31);
  _Unwind_Resume(a1);
}

void sub_1AD95D5A4()
{
  JUMPOUT(0x1AD95D594);
}

void sub_1AD95D5AC()
{
  JUMPOUT(0x1AD95D59CLL);
}

void quasar::loadDummyModel(uint64_t a1@<X0>, const quasar::LmBuildConfig::ModelSysConfigParameters *a2@<X1>, const void **a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t String;
  __int128 v9;
  double Double;
  size_t v11;
  std::string *v12;
  const void *v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  __int128 v17;
  uint64_t v18;
  float v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::string v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  void *__p[2];
  std::string::size_type v30;
  std::string v31;

  std::string::basic_string[abi:ne180100]<0>(__p, "filename");
  String = quasar::PTree::getString(a1, (__int128 *)__p);
  if (*(char *)(String + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)String, *(_QWORD *)(String + 8));
  }
  else
  {
    v9 = *(_OWORD *)String;
    v31.__r_.__value_.__r.__words[2] = *(_QWORD *)(String + 16);
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v9;
  }
  if (SHIBYTE(v30) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "weight");
  Double = quasar::PTree::getDouble(a1, (__int128 *)__p);
  if (SHIBYTE(v30) < 0)
    operator delete(__p[0]);
  if (*((char *)a3 + 23) >= 0)
    v11 = *((unsigned __int8 *)a3 + 23);
  else
    v11 = (size_t)a3[1];
  v12 = &v26;
  std::string::basic_string[abi:ne180100]((uint64_t)&v26, v11 + 1);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v12 = (std::string *)v26.__r_.__value_.__r.__words[0];
  if (v11)
  {
    if (*((char *)a3 + 23) >= 0)
      v13 = a3;
    else
      v13 = *a3;
    memmove(v12, v13, v11);
  }
  *(_WORD *)((char *)&v12->__r_.__value_.__l.__data_ + v11) = 47;
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &v31;
  else
    v14 = (std::string *)v31.__r_.__value_.__r.__words[0];
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  else
    size = v31.__r_.__value_.__l.__size_;
  v16 = std::string::append(&v26, (const std::string::value_type *)v14, size);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v30 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = operator new();
  v19 = Double;
  quasar::FstLmHandle::FstLmHandle(v18, (uint64_t)__p, 0, v19, 1.0);
  v27 = v18;
  v20 = (std::__shared_weak_count *)operator new();
  v20->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45F20;
  v20->__shared_owners_ = 0;
  v20->__shared_weak_owners_ = 0;
  v20[1].__vftable = (std::__shared_weak_count_vtbl *)v18;
  v28 = v20;
  if (SHIBYTE(v30) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  v21 = operator new();
  quasar::DummyLmModel::DummyLmModel(v21, &v27);
  quasar::LmModel2::setModelSysConfigParams((quasar::LmModel2 *)(v21 + 656), a2);
  *a4 = v21;
  v22 = (_QWORD *)operator new();
  *v22 = &unk_1E5D45F58;
  v22[1] = 0;
  v22[2] = 0;
  v22[3] = v21;
  a4[1] = (uint64_t)v22;
  v23 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
}

void sub_1AD95D84C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  MEMORY[0x1AF44D190](v30, 0x10B3C4048B1336ELL);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void quasar::DummyConfig::~DummyConfig(void **this)
{
  *this = off_1E5D343C0;
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  quasar::LmBuildConfig::~LmBuildConfig(this);
}

{
  *this = off_1E5D343C0;
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  quasar::LmBuildConfig::~LmBuildConfig(this);
  JUMPOUT(0x1AF44D190);
}

void quasar::FstLmHandle::~FstLmHandle(quasar::FstLmHandle *this)
{
  *(_QWORD *)this = &off_1E5D34510;
  *((_QWORD *)this + 82) = &unk_1E5D34548;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 632);
  quasar::ModelLoader::~ModelLoader((quasar::FstLmHandle *)((char *)this + 8));
}

{
  *(_QWORD *)this = &off_1E5D34510;
  *((_QWORD *)this + 82) = &unk_1E5D34548;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 632);
  quasar::ModelLoader::~ModelLoader((quasar::FstLmHandle *)((char *)this + 8));
  JUMPOUT(0x1AF44D190);
}

void `virtual thunk to'quasar::FstLmHandle::~FstLmHandle(quasar::FstLmHandle *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  *v1 = &off_1E5D34510;
  v1[82] = &unk_1E5D34548;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 79));
  quasar::ModelLoader::~ModelLoader((quasar::ModelLoader *)(v1 + 1));
}

{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  *v1 = &off_1E5D34510;
  v1[82] = &unk_1E5D34548;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 79));
  quasar::ModelLoader::~ModelLoader((quasar::ModelLoader *)(v1 + 1));
  JUMPOUT(0x1AF44D190);
}

void quasar::DummyLmModel::~DummyLmModel(quasar::DummyLmModel *this)
{
  quasar::LmModel2 *v2;

  *(_QWORD *)this = &off_1E5D34C48;
  *((_QWORD *)this + 117) = off_1E5D34CD0;
  v2 = (quasar::DummyLmModel *)((char *)this + 656);
  *((_QWORD *)this + 82) = off_1E5D34C88;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 920);
  if (*((char *)this + 919) < 0)
    operator delete(*((void **)this + 112));
  quasar::LmModel2::~LmModel2(v2, (uint64_t *)&off_1E5D15178);
  *(_QWORD *)this = &off_1E5D03D30;
  *((_QWORD *)this + 117) = &unk_1E5D03D68;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 632);
  quasar::ModelLoader::~ModelLoader((quasar::DummyLmModel *)((char *)this + 8));
}

{
  quasar::LmModel2 *v2;

  *(_QWORD *)this = &off_1E5D34C48;
  *((_QWORD *)this + 117) = off_1E5D34CD0;
  v2 = (quasar::DummyLmModel *)((char *)this + 656);
  *((_QWORD *)this + 82) = off_1E5D34C88;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 920);
  if (*((char *)this + 919) < 0)
    operator delete(*((void **)this + 112));
  quasar::LmModel2::~LmModel2(v2, (uint64_t *)&off_1E5D15178);
  *(_QWORD *)this = &off_1E5D03D30;
  *((_QWORD *)this + 117) = &unk_1E5D03D68;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 632);
  quasar::ModelLoader::~ModelLoader((quasar::DummyLmModel *)((char *)this + 8));
  JUMPOUT(0x1AF44D190);
}

void `non-virtual thunk to'quasar::DummyLmModel::~DummyLmModel(quasar::DummyLmModel *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)((char *)this - 656);
  *((_QWORD *)this - 82) = &off_1E5D34C48;
  *((_QWORD *)this + 35) = off_1E5D34CD0;
  *(_QWORD *)this = off_1E5D34C88;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 264);
  if (*((char *)this + 263) < 0)
    operator delete(*((void **)this + 30));
  quasar::LmModel2::~LmModel2(this, (uint64_t *)&off_1E5D15178);
  *v2 = &off_1E5D03D30;
  *((_QWORD *)this + 35) = &unk_1E5D03D68;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this - 24);
  quasar::ModelLoader::~ModelLoader((quasar::DummyLmModel *)((char *)this - 648));
}

{
  _QWORD *v2;

  v2 = (_QWORD *)((char *)this - 656);
  *((_QWORD *)this - 82) = &off_1E5D34C48;
  *((_QWORD *)this + 35) = off_1E5D34CD0;
  *(_QWORD *)this = off_1E5D34C88;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 264);
  if (*((char *)this + 263) < 0)
    operator delete(*((void **)this + 30));
  quasar::LmModel2::~LmModel2(this, (uint64_t *)&off_1E5D15178);
  *v2 = &off_1E5D03D30;
  *((_QWORD *)this + 35) = &unk_1E5D03D68;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this - 24);
  quasar::ModelLoader::~ModelLoader((quasar::DummyLmModel *)((char *)this - 648));
  JUMPOUT(0x1AF44D190);
}

void `virtual thunk to'quasar::DummyLmModel::~DummyLmModel(quasar::DummyLmModel *this)
{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = &off_1E5D34C48;
  *((_QWORD *)v1 + 117) = off_1E5D34CD0;
  *((_QWORD *)v1 + 82) = off_1E5D34C88;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 920));
  if (v1[919] < 0)
    operator delete(*((void **)v1 + 112));
  quasar::LmModel2::~LmModel2((quasar::LmModel2 *)(v1 + 656), (uint64_t *)&off_1E5D15178);
  *(_QWORD *)v1 = &off_1E5D03D30;
  *((_QWORD *)v1 + 117) = &unk_1E5D03D68;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 632));
  quasar::ModelLoader::~ModelLoader((quasar::ModelLoader *)(v1 + 8));
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = &off_1E5D34C48;
  *((_QWORD *)v1 + 117) = off_1E5D34CD0;
  *((_QWORD *)v1 + 82) = off_1E5D34C88;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 920));
  if (v1[919] < 0)
    operator delete(*((void **)v1 + 112));
  quasar::LmModel2::~LmModel2((quasar::LmModel2 *)(v1 + 656), (uint64_t *)&off_1E5D15178);
  *(_QWORD *)v1 = &off_1E5D03D30;
  *((_QWORD *)v1 + 117) = &unk_1E5D03D68;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 632));
  quasar::ModelLoader::~ModelLoader((quasar::ModelLoader *)(v1 + 8));
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_pointer<quasar::FstLmHandle  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<quasar::FstLmHandle  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::FstLmHandle  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

void std::__shared_ptr_pointer<quasar::DummyLmModel  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<quasar::DummyLmModel  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::DummyLmModel  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

double kaldi::nnet1::FixedAttentionComponent::FixedAttentionComponent(kaldi::nnet1::FixedAttentionComponent *this, int a2, int a3)
{
  double result;

  *((_DWORD *)this + 46) = a2;
  *((_DWORD *)this + 47) = a3;
  *((_WORD *)this + 96) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = &off_1E5D2D150;
  *(_OWORD *)((char *)this + 232) = xmmword_1AE13F660;
  *((_DWORD *)this + 62) = -1082130432;
  *(_QWORD *)((char *)this + 252) = 0x100000003;
  *((_WORD *)this + 130) = 0;
  *((_BYTE *)this + 262) = 0;
  *((_QWORD *)this + 1) = -1;
  *(_QWORD *)this = &off_1E5D2F060;
  *((_QWORD *)this + 22) = &off_1E5D2F268;
  result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = &unk_1E5D34170;
  *((_BYTE *)this + 64) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_QWORD *)this + 9) = &unk_1E5D34170;
  *((_BYTE *)this + 112) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_QWORD *)this + 15) = &unk_1E5D34170;
  *((_BYTE *)this + 160) = 0;
  *((_BYTE *)this + 168) = 0;
  return result;
}

kaldi::nnet1::FixedAttentionComponent *kaldi::nnet1::FixedAttentionComponent::FixedAttentionComponent(kaldi::nnet1::FixedAttentionComponent *this, int32x2_t *a2)
{
  uint64_t v4;
  int32x2_t *v5;
  int32x2_t *v6;
  int32x2_t *v7;
  int32x2_t v8;

  v4 = *(_QWORD *)(*(_QWORD *)a2 - 24);
  *((_QWORD *)this + 22) = &off_1E5D2F268;
  *((int32x2_t *)this + 23) = *(int32x2_t *)((char *)&a2[1] + v4);
  *((_WORD *)this + 96) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = &off_1E5D2D150;
  *(_OWORD *)((char *)this + 232) = xmmword_1AE13F660;
  *((_DWORD *)this + 62) = -1082130432;
  *(_QWORD *)((char *)this + 252) = 0x100000003;
  *((_WORD *)this + 130) = 0;
  *((_BYTE *)this + 262) = 0;
  *((_QWORD *)this + 1) = -1;
  *(_QWORD *)this = &off_1E5D2F060;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 3) = &unk_1E5D34170;
  v5 = (int32x2_t *)((char *)this + 24);
  *((_BYTE *)this + 64) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_QWORD *)this + 9) = &unk_1E5D34170;
  v6 = (int32x2_t *)((char *)this + 72);
  *((_BYTE *)this + 112) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_QWORD *)this + 15) = &unk_1E5D34170;
  v7 = (int32x2_t *)((char *)this + 120);
  *((_BYTE *)this + 160) = 0;
  v8 = a2[2];
  *((int32x2_t *)this + 1) = a2[1];
  *((_QWORD *)this + 2) = (*(uint64_t (**)(int32x2_t))(**(_QWORD **)&v8 + 16))(v8);
  kaldi::CuMatrix<float>::operator=(v5, a2 + 3);
  kaldi::CuMatrix<float>::operator=(v6, a2 + 9);
  kaldi::CuMatrix<float>::operator=(v7, a2 + 15);
  *((_BYTE *)this + 168) = a2[21].i8[0];
  return this;
}

void sub_1AD95E15C(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  kaldi::nnet1::UpdatableComponent *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  kaldi::CuMatrix<float>::~CuMatrix(v5);
  kaldi::CuMatrix<float>::~CuMatrix(v4);
  kaldi::CuMatrix<float>::~CuMatrix(v3);
  quasar::Bitmap::~Bitmap(v1);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::FixedAttentionComponent::~FixedAttentionComponent(kaldi::nnet1::FixedAttentionComponent *this, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24)) = a2[3];
  v4 = *((_QWORD *)this + 2);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 2) = 0;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 120);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 72);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 24);
  quasar::Bitmap::~Bitmap(this);
}

void kaldi::nnet1::FixedAttentionComponent::~FixedAttentionComponent(kaldi::nnet1::FixedAttentionComponent *this)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 176));
}

{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 176));
  JUMPOUT(0x1AF44D190);
}

void `virtual thunk to'kaldi::nnet1::FixedAttentionComponent::~FixedAttentionComponent(kaldi::nnet1::FixedAttentionComponent *this)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 176));
}

{
  kaldi::nnet1::FixedAttentionComponent::~FixedAttentionComponent((kaldi::nnet1::FixedAttentionComponent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

uint64_t kaldi::nnet1::FixedAttentionComponent::Copy(int32x2_t *this)
{
  kaldi::nnet1::FixedAttentionComponent *v2;

  v2 = (kaldi::nnet1::FixedAttentionComponent *)operator new();
  kaldi::nnet1::FixedAttentionComponent::FixedAttentionComponent(v2, this);
  return (uint64_t)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
}

void sub_1AD95E304(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10A1C40CEA1F95ALL);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::FixedAttentionComponent::Copy(kaldi::nnet1::FixedAttentionComponent *this)
{
  return kaldi::nnet1::FixedAttentionComponent::Copy((int32x2_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 32)));
}

uint64_t kaldi::nnet1::FixedAttentionComponent::GetType(kaldi::nnet1::FixedAttentionComponent *this)
{
  return 279;
}

uint64_t `virtual thunk to'kaldi::nnet1::FixedAttentionComponent::GetType(kaldi::nnet1::FixedAttentionComponent *this)
{
  return 279;
}

void kaldi::nnet1::FixedAttentionComponent::InitData(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  char *v5;
  _QWORD *v6;
  BOOL v8;
  uint64_t v9;
  void *v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  void **v15;
  void *v16;
  int v17;
  uint64_t v19;
  kaldi::nnet1::Component *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  const void *v24;
  void *v25;
  _QWORD *v26;
  void **v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD v33[35];
  uint64_t v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  void *v38[4];

  memset(v38, 0, 24);
  v4 = a2 + 4;
  v5 = (char *)a1 + 12;
  v6 = a1 + 1;
  while (1)
  {
    if ((*((_BYTE *)v4 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
      goto LABEL_44;
    kaldi::ReadToken(a2, 0, (uint64_t)v38);
    if (SHIBYTE(v38[2]) < 0)
      break;
    if (HIBYTE(v38[2]) == 15)
    {
      v14 = v38[0] == (void *)0x6574744178614D3CLL && *(void **)((char *)v38 + 7) == (void *)0x3E736E6F69746E65;
      v9 = (uint64_t)v5;
      if (!v14)
      {
LABEL_35:
        if (HIBYTE(v38[2]) == 12)
        {
          v15 = v38;
          goto LABEL_39;
        }
        goto LABEL_59;
      }
    }
    else
    {
      if (HIBYTE(v38[2]) != 22)
        goto LABEL_35;
      v8 = v38[0] == (void *)0x53656372756F533CLL
        && v38[1] == (void *)0x656D694465746174
        && *(void **)((char *)&v38[1] + 6) == (void *)0x3E6E6F69736E656DLL;
      v9 = (uint64_t)v6;
      if (!v8)
        goto LABEL_59;
    }
LABEL_34:
    kaldi::ReadBasicType<int>(a2, 0, v9);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v10 = v38[1];
  if (v38[1] != (void *)15)
  {
    if (v38[1] != (void *)22)
      goto LABEL_37;
    v11 = *(_QWORD *)v38[0] == 0x53656372756F533CLL && *((_QWORD *)v38[0] + 1) == 0x656D694465746174;
    v12 = v11 && *(_QWORD *)((char *)v38[0] + 14) == 0x3E6E6F69736E656DLL;
    v9 = (uint64_t)v6;
    if (!v12)
      goto LABEL_37;
    goto LABEL_34;
  }
  v13 = *(_QWORD *)v38[0] == 0x6574744178614D3CLL && *(_QWORD *)((char *)v38[0] + 7) == 0x3E736E6F69746E65;
  v9 = (uint64_t)v5;
  if (v13)
    goto LABEL_34;
  v10 = v38[1];
LABEL_37:
  if (v10 != (void *)12)
    goto LABEL_59;
  v15 = (void **)v38[0];
LABEL_39:
  v16 = *v15;
  v17 = *((_DWORD *)v15 + 2);
  if (v16 != (void *)0x6E6F706D6F432F3CLL || v17 != 1047817829)
  {
LABEL_59:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v33);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Unknown token ", 14);
    if (SHIBYTE(v38[2]) >= 0)
      v27 = v38;
    else
      v27 = (void **)v38[0];
    if (SHIBYTE(v38[2]) >= 0)
      v28 = HIBYTE(v38[2]);
    else
      v28 = (uint64_t)v38[1];
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, v28);
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" (SourceStateDimension|MaxAttentions)", 37);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v33);
  }
LABEL_44:
  v19 = a1[2];
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v35 = 0;
  v36 = 0;
  v37 = 0;
  kaldi::ReadToken(a2, 0, (uint64_t)&v35);
  v20 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&v35);
  v34 = 0;
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v33, 3);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Initializing component of type ", 31);
    if (v37 >= 0)
      v22 = (void **)&v35;
    else
      v22 = v35;
    if (v37 >= 0)
      v23 = HIBYTE(v37);
    else
      v23 = v36;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v33);
  }
  kaldi::ExpectToken(a2, 0, "<InputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v34 + 4);
  kaldi::ExpectToken(a2, 0, "<OutputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v34);
  v24 = (const void *)kaldi::nnet1::Component::NewComponentOfType(v20, HIDWORD(v34), v34);
  a1[2] = v25;
  (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v25 + 96))(v25, a2, a3);
  kaldi::nnet1::FixedAttentionComponent::Check(a1);
  if (SHIBYTE(v37) < 0)
    operator delete(v35);
  if (SHIBYTE(v38[2]) < 0)
    operator delete(v38[0]);
}

void *kaldi::nnet1::FixedAttentionComponent::Check(void *this)
{
  uint64_t v1;
  _DWORD *v2;
  int v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD v11[34];

  if (!*((_BYTE *)this + 168))
  {
    v1 = (uint64_t)this;
    v2 = (_DWORD *)*((_QWORD *)this + 2);
    if (!v2)
      goto LABEL_5;
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, "this is a non-recurrent version, cannot have a recurrent internal component");
      goto LABEL_16;
    }
    if (this)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, "no recursive inclusion");
    }
    else
    {
LABEL_5:
      v3 = *(_DWORD *)(v1 + 12);
      if (v3 < 1 || (v4 = *(_DWORD *)(v1 + 8), v4 <= 0))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"component is not initialized, max attention is ", 47);
        v6 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", source state dimension is ", 28);
        std::ostream::operator<<();
      }
      else
      {
        v5 = v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
        if (*(_DWORD *)(v5 + 8) + v4 * v3 == v2[2])
        {
          if (*(_DWORD *)(v5 + 12) == v2[3])
          {
            *(_BYTE *)(v1 + 168) = 1;
            return this;
          }
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"the output dim of attention component is ", 41);
          v10 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" , however, the internal training component has output dim ", 59);
          std::ostream::operator<<();
        }
        else
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"component has input dim ", 24);
          v7 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", attentions ", 13);
          v8 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", source state dimension ", 25);
          v9 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", however, the internal training component has input dim ", 57);
          std::ostream::operator<<();
        }
      }
    }
LABEL_16:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
  }
  return this;
}

void `virtual thunk to'kaldi::nnet1::FixedAttentionComponent::InitData(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  kaldi::nnet1::FixedAttentionComponent::InitData((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 112)), a2, a3);
}

void kaldi::nnet1::FixedAttentionComponent::ReadData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  char *v6;
  _QWORD *v7;
  BOOL v9;
  uint64_t v10;
  void *v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  void **v16;
  void *v17;
  int v18;
  uint64_t v20;
  const void *v21;
  _QWORD *v22;
  void **v23;
  uint64_t v24;
  _QWORD v27[34];
  void *v28[4];

  memset(v28, 0, 24);
  v6 = (char *)a1 + 12;
  v7 = a1 + 1;
  while (1)
  {
    if (kaldi::Peek(a2, a3) != 60)
      goto LABEL_44;
    kaldi::ReadToken(a2, a3, (uint64_t)v28);
    if (SHIBYTE(v28[2]) < 0)
      break;
    if (HIBYTE(v28[2]) == 15)
    {
      v15 = v28[0] == (void *)0x6574744178614D3CLL && *(void **)((char *)v28 + 7) == (void *)0x3E736E6F69746E65;
      v10 = (uint64_t)v6;
      if (!v15)
      {
LABEL_35:
        if (HIBYTE(v28[2]) == 12)
        {
          v16 = v28;
          goto LABEL_39;
        }
        goto LABEL_51;
      }
    }
    else
    {
      if (HIBYTE(v28[2]) != 22)
        goto LABEL_35;
      v9 = v28[0] == (void *)0x53656372756F533CLL
        && v28[1] == (void *)0x656D694465746174
        && *(void **)((char *)&v28[1] + 6) == (void *)0x3E6E6F69736E656DLL;
      v10 = (uint64_t)v7;
      if (!v9)
        goto LABEL_51;
    }
LABEL_34:
    kaldi::ReadBasicType<int>(a2, a3, v10);
  }
  v11 = v28[1];
  if (v28[1] != (void *)15)
  {
    if (v28[1] != (void *)22)
      goto LABEL_37;
    v12 = *(_QWORD *)v28[0] == 0x53656372756F533CLL && *((_QWORD *)v28[0] + 1) == 0x656D694465746174;
    v13 = v12 && *(_QWORD *)((char *)v28[0] + 14) == 0x3E6E6F69736E656DLL;
    v10 = (uint64_t)v7;
    if (!v13)
      goto LABEL_37;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)v28[0] == 0x6574744178614D3CLL && *(_QWORD *)((char *)v28[0] + 7) == 0x3E736E6F69746E65;
  v10 = (uint64_t)v6;
  if (v14)
    goto LABEL_34;
  v11 = v28[1];
LABEL_37:
  if (v11 != (void *)12)
    goto LABEL_51;
  v16 = (void **)v28[0];
LABEL_39:
  v17 = *v16;
  v18 = *((_DWORD *)v16 + 2);
  if (v17 != (void *)0x6E6F706D6F432F3CLL || v18 != 1047817829)
  {
LABEL_51:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Unrecognized token ", 19);
    if (SHIBYTE(v28[2]) >= 0)
      v23 = v28;
    else
      v23 = (void **)v28[0];
    if (SHIBYTE(v28[2]) >= 0)
      v24 = HIBYTE(v28[2]);
    else
      v24 = (uint64_t)v28[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27);
  }
LABEL_44:
  v20 = a1[2];
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (v21)
  a1[2] = v21;
  kaldi::nnet1::FixedAttentionComponent::Check(a1);
  if (SHIBYTE(v28[2]) < 0)
    operator delete(v28[0]);
}

void sub_1AD95EC30(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::FixedAttentionComponent::ReadData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::FixedAttentionComponent::ReadData((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 176)), a2, a3, a4);
}

uint64_t kaldi::nnet1::FixedAttentionComponent::WriteConfig(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  kaldi::nnet1::Component *v6;
  std::string __p;

  kaldi::WriteToken(a2, a3, "<SourceStateDimension>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<MaxAttentions>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "</Component>");
  v6 = (kaldi::nnet1::Component *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  kaldi::nnet1::Component::TypeToMarker(v6, &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteBasicType<int>(a2, a3);
  return kaldi::WriteBasicType<int>(a2, a3);
}

void sub_1AD95ED50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t `virtual thunk to'kaldi::nnet1::FixedAttentionComponent::WriteConfig(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  return kaldi::nnet1::FixedAttentionComponent::WriteConfig((uint64_t)a1 + *(_QWORD *)(*a1 - 184), a2, a3);
}

uint64_t kaldi::nnet1::FixedAttentionComponent::WriteData(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  ((void (*)(_QWORD **))(*a1)[12])(a1);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*a1[2] + 104))(a1[2], a2, a3, a4);
}

uint64_t `virtual thunk to'kaldi::nnet1::FixedAttentionComponent::WriteData(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD **v7;

  v7 = (_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 120));
  ((void (*)(_QWORD **))(*v7)[12])(v7);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v7[2] + 104))(v7[2], a2, a3, a4);
}

uint64_t kaldi::nnet1::FixedAttentionComponent::NumParams(kaldi::nnet1::FixedAttentionComponent *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 176))(*((_QWORD *)this + 2));
}

uint64_t `virtual thunk to'kaldi::nnet1::FixedAttentionComponent::NumParams(kaldi::nnet1::FixedAttentionComponent *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 192) + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 176))(v1);
}

uint64_t kaldi::nnet1::FixedAttentionComponent::GetParams(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 184))(*(_QWORD *)(a1 + 16));
}

uint64_t `virtual thunk to'kaldi::nnet1::FixedAttentionComponent::GetParams(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 200) + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 184))(v1);
}

uint64_t kaldi::nnet1::FixedAttentionComponent::SetParams(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 192))(*(_QWORD *)(a1 + 16));
}

uint64_t `virtual thunk to'kaldi::nnet1::FixedAttentionComponent::SetParams(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 208) + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 192))(v1);
}

uint64_t kaldi::nnet1::FixedAttentionComponent::SumParams(kaldi::nnet1::FixedAttentionComponent *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 208))(*((_QWORD *)this + 2));
}

uint64_t `virtual thunk to'kaldi::nnet1::FixedAttentionComponent::SumParams(kaldi::nnet1::FixedAttentionComponent *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 224) + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 208))(v1);
}

uint64_t kaldi::nnet1::FixedAttentionComponent::PerturbParams(kaldi::nnet1::FixedAttentionComponent *this, float a2)
{
  return (*(uint64_t (**)(_QWORD, float))(**((_QWORD **)this + 2) + 216))(*((_QWORD *)this + 2), a2);
}

uint64_t `virtual thunk to'kaldi::nnet1::FixedAttentionComponent::PerturbParams(kaldi::nnet1::FixedAttentionComponent *this, float a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 232) + 16);
  return (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v2 + 216))(v2, a2);
}

uint64_t kaldi::nnet1::FixedAttentionComponent::Info(kaldi::nnet1::FixedAttentionComponent *this)
{
  void **v2;
  uint64_t v3;
  void *__p[2];
  unsigned __int8 v6;
  _QWORD v7[11];
  char v8;
  uint64_t v9;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v7);
  (*(void (**)(kaldi::nnet1::FixedAttentionComponent *, _QWORD *, _QWORD))(*(_QWORD *)this + 96))(this, v7, 0);
  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 2) + 64))(__p);
  if ((v6 & 0x80u) == 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  if ((v6 & 0x80u) == 0)
    v3 = v6;
  else
    v3 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v2, v3);
  if ((char)v6 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v7[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v7[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v7[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v8 < 0)
    operator delete((void *)v7[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v9);
}

void sub_1AD95F014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::FixedAttentionComponent::Info(kaldi::nnet1::FixedAttentionComponent *this)
{
  return kaldi::nnet1::FixedAttentionComponent::Info((kaldi::nnet1::FixedAttentionComponent *)((char *)this
                                                                                             + *(_QWORD *)(*(_QWORD *)this - 80)));
}

uint64_t kaldi::nnet1::FixedAttentionComponent::InfoGradient(kaldi::nnet1::FixedAttentionComponent *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
}

uint64_t `virtual thunk to'kaldi::nnet1::FixedAttentionComponent::InfoGradient(kaldi::nnet1::FixedAttentionComponent *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 88) + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 72))(v1);
}

uint64_t kaldi::nnet1::FixedAttentionComponent::SetTrainOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;

  v2 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v3 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v2 + 71) = *(_OWORD *)(a2 + 23);
  *(_OWORD *)(v2 + 56) = v3;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 264))(*(_QWORD *)(a1 + 16));
}

uint64_t `virtual thunk to'kaldi::nnet1::FixedAttentionComponent::SetTrainOptions(_QWORD *a1, uint64_t a2)
{
  char *v2;
  char *v3;
  __int128 v4;

  v2 = (char *)a1 + *(_QWORD *)(*a1 - 280);
  v3 = &v2[*(_QWORD *)(*(_QWORD *)v2 - 24)];
  v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v3 + 71) = *(_OWORD *)(a2 + 23);
  *(_OWORD *)(v3 + 56) = v4;
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)v2 + 2) + 264))(*((_QWORD *)v2 + 2));
}

void kaldi::nnet1::FixedAttentionComponent::SetSourceStates(int32x2_t *a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned __int32 v14;
  unsigned int v15;
  __int32 v16;
  uint64_t v17;
  unsigned __int32 v18;
  int32x2_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v24;
  _QWORD v25[4];
  void *v26;
  __int128 v27;
  __int128 v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  int32x2_t v32;

  kaldi::nnet1::FixedAttentionComponent::Check(a1);
  v24 = a3;
  v6 = a3[1] - *a3;
  v7 = v6 >> 2;
  kaldi::CuMatrix<float>::Resize(a1 + 3, v6 >> 2, *(unsigned int *)(*(_QWORD *)&a1[2] + 8), 0, 0);
  if ((int)(v6 >> 2) >= 1)
  {
    v8 = 0;
    v9 = a1[1].i32[1];
    do
    {
      if (v9 >= 1)
      {
        v10 = *(_DWORD *)(*v24 + 4 * v8);
        if (v10 >= 1)
        {
          v11 = v10 & ~(v10 >> 31);
          v12 = v8 + v7 * (v10 - 1);
          v13 = 1;
          do
          {
            v14 = a1[1].u32[0];
            v15 = v14 * (v13 - 1);
            v16 = a1[6].i32[0];
            v17 = *(_QWORD *)&a1[4] + 4 * v15;
            v18 = a1[6].i32[1] - v15;
            v19 = a1[7];
            *((_QWORD *)&v27 + 1) = __PAIR64__(a1[5].i32[1], v14);
            *(_QWORD *)&v28 = __PAIR64__(v18, v16);
            *((int32x2_t *)&v28 + 1) = v19;
            v29 = &unk_1E5D29D70;
            v26 = &unk_1E5D29D40;
            *(_QWORD *)&v27 = v17;
            v30 = v17 + 4 * v16 * (int)v8;
            v31 = v14;
            v32 = v19;
            v20 = *(_QWORD *)(a2 + 8) + 4 * *(_DWORD *)(a2 + 24) * v12;
            v21 = *(_DWORD *)(a2 + 16);
            v22 = *(_QWORD *)(a2 + 32);
            v25[0] = &unk_1E5D29D70;
            v25[1] = v20;
            v25[3] = v22;
            v25[2] = v21;
            kaldi::CuVectorBase<float>::CopyFromVec(&v29, (uint64_t)v25);
            v29 = &unk_1E5D29D70;
            v30 = 0;
            LODWORD(v31) = 0;
            v32 = 0;
            v26 = &unk_1E5D29D40;
            v27 = 0u;
            v28 = 0u;
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v26);
            v9 = a1[1].i32[1];
            if (v13 >= v9)
              break;
            v12 -= v7;
          }
          while (v11 != v13++);
        }
      }
      ++v8;
    }
    while (v8 != (v6 >> 2));
  }
}

void sub_1AD95F2A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,uint64_t a24)
{
  _OWORD *v24;

  a21 = &unk_1E5D29D70;
  a22 = 0;
  a23 = 0;
  a24 = 0;
  a16 = &unk_1E5D29D40;
  *v24 = 0u;
  v24[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a16);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::FixedAttentionComponent::GetSourceDiffs(uint64_t a1, uint64_t a2, _QWORD *a3, int32x2_t *a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  unsigned __int32 v17;
  int32x2_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[4];

  kaldi::nnet1::FixedAttentionComponent::Check((void *)a1);
  v25 = a3;
  v8 = a3[1] - *a3;
  v9 = v8 >> 2;
  kaldi::CuMatrix<float>::Resize(a4, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0);
  if ((int)(v8 >> 2) >= 1)
  {
    v10 = 0;
    v11 = *(_DWORD *)(a1 + 12);
    do
    {
      if (v11 >= 1)
      {
        v12 = *(_DWORD *)(*v25 + 4 * v10);
        if (v12 >= 1)
        {
          v13 = v12 & ~(v12 >> 31);
          v14 = v10 + v9 * (v12 - 1);
          v15 = 1;
          do
          {
            v16 = *(_QWORD *)&a4[1] + 4 * a4[3].i32[0] * v14;
            v17 = a4[2].u32[0];
            v18 = a4[4];
            v33[0] = &unk_1E5D29D70;
            v33[1] = v16;
            v33[3] = v18;
            v33[2] = v17;
            LODWORD(v16) = *(_DWORD *)(a1 + 8);
            v19 = v16 * (v15 - 1);
            v20 = *(_DWORD *)(a1 + 96);
            v21 = *(_QWORD *)(a1 + 80) + 4 * v19;
            v22 = *(_DWORD *)(a1 + 100) - v19;
            v23 = *(_QWORD *)(a1 + 104);
            *((_QWORD *)&v27 + 1) = __PAIR64__(*(_DWORD *)(a1 + 92), v16);
            *(_QWORD *)&v28 = __PAIR64__(v22, v20);
            *((_QWORD *)&v28 + 1) = v23;
            v29 = &unk_1E5D29D70;
            v26 = &unk_1E5D29D40;
            *(_QWORD *)&v27 = v21;
            v30 = v21 + 4 * (int)(v20 * v10);
            v31 = v16;
            v32 = v23;
            kaldi::CuVectorBase<float>::CopyFromVec(v33, (uint64_t)&v29);
            v29 = &unk_1E5D29D70;
            v30 = 0;
            LODWORD(v31) = 0;
            v32 = 0;
            v26 = &unk_1E5D29D40;
            v27 = 0u;
            v28 = 0u;
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v26);
            v11 = *(_DWORD *)(a1 + 12);
            if (v15 >= v11)
              break;
            v14 -= v9;
          }
          while (v13 != v15++);
        }
      }
      ++v10;
    }
    while (v10 != (v8 >> 2));
  }
}

void sub_1AD95F4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, uint64_t a20)
{
  _OWORD *v20;

  a17 = &unk_1E5D29D70;
  a18 = 0;
  a19 = 0;
  a20 = 0;
  a12 = &unk_1E5D29D40;
  *v20 = 0u;
  v20[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a12);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::FixedAttentionComponent::GetCurrentAlignment()
{
  return 0;
}

uint64_t kaldi::nnet1::FixedAttentionComponent::GetOverallAlignment()
{
  return 0;
}

uint64_t kaldi::nnet1::FixedAttentionComponent::SetSourceVectorDimension(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 8) != a2)
  {
    *(_DWORD *)(this + 8) = a2;
    *(_BYTE *)(this + 168) = 0;
  }
  return this;
}

uint64_t kaldi::nnet1::FixedAttentionComponent::SetMaxAttentions(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 12) != a2)
  {
    *(_DWORD *)(this + 12) = a2;
    *(_BYTE *)(this + 168) = 0;
  }
  return this;
}

void kaldi::nnet1::FixedAttentionComponent::PropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  void *v25;
  _QWORD v26[4];

  kaldi::nnet1::FixedAttentionComponent::Check(a1);
  v6 = *((_DWORD *)a1 + 2);
  v7 = *((_DWORD *)a1 + 11);
  v8 = *(_DWORD *)(a2 + 20) / v7;
  v9 = *((_DWORD *)a1 + 3);
  a1[7] = *(_QWORD *)(a3 + 32);
  if (v8 >= 1)
  {
    v10 = 0;
    v11 = (v6 * v9);
    do
    {
      v12 = a1[4] + 4 * v11;
      v13 = *((_DWORD *)a1 + 13) - v11;
      v14 = a1[7];
      LODWORD(v26[1]) = *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8);
      *(_QWORD *)((char *)&v26[1] + 4) = *(_QWORD *)((char *)a1 + 44);
      HIDWORD(v26[2]) = v13;
      v26[3] = v14;
      v25 = &unk_1E5D29D40;
      v26[0] = v12;
      v15 = *(_DWORD *)(a2 + 24);
      v16 = *(_QWORD *)(a2 + 8) + 4 * (int)(v15 * v10);
      LODWORD(v14) = *(_DWORD *)(a2 + 28) - v15 * v10;
      v17 = *(_QWORD *)(a2 + 32);
      DWORD2(v23) = *(_DWORD *)(a2 + 16);
      HIDWORD(v23) = v7;
      *(_QWORD *)&v24 = __PAIR64__(v14, v15);
      *((_QWORD *)&v24 + 1) = v17;
      v22 = &unk_1E5D29D40;
      *(_QWORD *)&v23 = v16;
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v25, (uint64_t)&v22, 111);
      v22 = &unk_1E5D29D40;
      v23 = 0u;
      v24 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v22);
      v25 = &unk_1E5D29D40;
      memset(v26, 0, sizeof(v26));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v25);
      v18 = *(_DWORD *)(a3 + 24);
      v19 = *(_QWORD *)(a3 + 8) + 4 * (int)(v18 * v10);
      v20 = *(_DWORD *)(a3 + 28) - v18 * v10;
      v21 = *(_QWORD *)(a3 + 32);
      LODWORD(v26[1]) = *(_DWORD *)(a3 + 16);
      HIDWORD(v26[1]) = v7;
      v26[2] = __PAIR64__(v20, v18);
      v26[3] = v21;
      v25 = &unk_1E5D29D40;
      v26[0] = v19;
      (*(void (**)(_QWORD, _QWORD *, void **, _QWORD))(*(_QWORD *)a1[2] + 112))(a1[2], a1 + 3, &v25, 0);
      v25 = &unk_1E5D29D40;
      memset(v26, 0, sizeof(v26));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v25);
      v10 += v7;
      --v8;
    }
    while (v8);
  }
}

void sub_1AD95F6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  _OWORD *v10;
  va_list va;

  va_start(va, a10);
  *v10 = 0u;
  v10[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::FixedAttentionComponent::PropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  kaldi::nnet1::FixedAttentionComponent::PropagateFnc((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 128)), a2, a3);
}

void kaldi::nnet1::FixedAttentionComponent::BackpropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v38;
  void *v39;
  __int128 v40;
  __int128 v41;
  void *v42;
  _QWORD v43[4];
  void *v44;
  _QWORD v45[4];

  kaldi::nnet1::FixedAttentionComponent::Check(a1);
  v8 = *((unsigned int *)a1 + 11);
  v9 = (*((_DWORD *)a1 + 2) * *((_DWORD *)a1 + 3));
  v10 = *(_DWORD *)(a2 + 20) / (int)v8;
  a1[13] = *(_QWORD *)(a5 + 32);
  a1[19] = *(_QWORD *)(a5 + 32);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)a1 + 9, v8, v9, 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)a1 + 15, v8, *(unsigned int *)(a1[2] + 8), 0, 0);
  if (v10 >= 1)
  {
    v11 = 0;
    do
    {
      v38 = v10;
      v12 = a1[2];
      v13 = *(_DWORD *)(a2 + 24);
      v14 = *(_QWORD *)(a2 + 8) + 4 * (int)(v13 * v11);
      v15 = *(_DWORD *)(a2 + 28) - v13 * v11;
      v16 = *(_QWORD *)(a2 + 32);
      LODWORD(v45[1]) = *(_DWORD *)(a2 + 16);
      HIDWORD(v45[1]) = v8;
      v45[2] = __PAIR64__(v15, v13);
      v45[3] = v16;
      v44 = &unk_1E5D29D40;
      v45[0] = v14;
      v17 = *(_DWORD *)(a3 + 24);
      v18 = *(_QWORD *)(a3 + 8) + 4 * (int)(v17 * v11);
      v19 = *(_DWORD *)(a3 + 28) - v17 * v11;
      v20 = *(_QWORD *)(a3 + 32);
      LODWORD(v43[1]) = *(_DWORD *)(a3 + 16);
      HIDWORD(v43[1]) = v8;
      v43[2] = __PAIR64__(v19, v17);
      v43[3] = v20;
      v42 = &unk_1E5D29D40;
      v43[0] = v18;
      v21 = *(_DWORD *)(a4 + 24);
      v22 = *(_QWORD *)(a4 + 8) + 4 * (int)(v21 * v11);
      v23 = *(_DWORD *)(a4 + 28) - v21 * v11;
      v24 = *(_QWORD *)(a4 + 32);
      DWORD2(v40) = *(_DWORD *)(a4 + 16);
      HIDWORD(v40) = v8;
      *(_QWORD *)&v41 = __PAIR64__(v23, v21);
      *((_QWORD *)&v41 + 1) = v24;
      v39 = &unk_1E5D29D40;
      *(_QWORD *)&v40 = v22;
      (*(void (**)(uint64_t, void **, void **, void **, _QWORD *, _QWORD))(*(_QWORD *)v12 + 128))(v12, &v44, &v42, &v39, a1 + 15, 0);
      v39 = &unk_1E5D29D40;
      v40 = 0u;
      v41 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v39);
      v42 = &unk_1E5D29D40;
      memset(v43, 0, sizeof(v43));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v42);
      v44 = &unk_1E5D29D40;
      memset(v45, 0, sizeof(v45));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v44);
      v25 = *(_DWORD *)(a5 + 24);
      v26 = *(_QWORD *)(a5 + 8) + 4 * (int)(v25 * v11);
      v27 = *(_DWORD *)(a5 + 28) - v25 * v11;
      v28 = *(_QWORD *)(a5 + 32);
      LODWORD(v45[1]) = *(_DWORD *)(a5 + 16);
      HIDWORD(v45[1]) = v8;
      v45[2] = __PAIR64__(v27, v25);
      v45[3] = v28;
      v44 = &unk_1E5D29D40;
      v45[0] = v26;
      v29 = a1[16] + 4 * (int)v9;
      v30 = *((_DWORD *)a1 + 37) - v9;
      v31 = a1[19];
      LODWORD(v43[1]) = *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8);
      *(_QWORD *)((char *)&v43[1] + 4) = *(_QWORD *)((char *)a1 + 140);
      HIDWORD(v43[2]) = v30;
      v43[3] = v31;
      v42 = &unk_1E5D29D40;
      v43[0] = v29;
      kaldi::CuMatrixBase<float>::CopyFromMat<float>(v32, (uint64_t)&v42, 111);
      v42 = &unk_1E5D29D40;
      memset(v43, 0, sizeof(v43));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v42);
      v44 = &unk_1E5D29D40;
      memset(v45, 0, sizeof(v45));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v44);
      v33 = a1[16];
      v34 = *((_DWORD *)a1 + 37);
      v35 = a1[19];
      LODWORD(v45[1]) = v9;
      *(_QWORD *)((char *)&v45[1] + 4) = *(_QWORD *)((char *)a1 + 140);
      HIDWORD(v45[2]) = v34;
      v45[3] = v35;
      v44 = &unk_1E5D29D40;
      v45[0] = v33;
      kaldi::CuMatrixBase<float>::AddMat((uint64_t)(a1 + 9), (uint64_t)&v44, 111, 1.0, 1.0);
      v44 = &unk_1E5D29D40;
      memset(v45, 0, sizeof(v45));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v44);
      v11 += v8;
      --v10;
    }
    while (v38 != 1);
  }
}

void sub_1AD95FA74(_Unwind_Exception *a1)
{
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 128) = v2 + 16;
  *v1 = 0u;
  v1[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v3 - 128));
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::FixedAttentionComponent::BackpropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  kaldi::nnet1::FixedAttentionComponent::BackpropagateFnc((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 144)), a2, a3, a4, a5);
}

uint64_t kaldi::nnet1::FixedAttentionComponent::SetGradientNormalization(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 240))(*(_QWORD *)(a1 + 16));
}

uint64_t `virtual thunk to'kaldi::nnet1::FixedAttentionComponent::SetGradientNormalization(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 256) + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 240))(v1);
}

void kaldi::nnet1::FixedAttentionComponent::AccumGradients(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  float v14;
  int v15;
  char *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  __int128 v31;
  __int128 v32;
  void *v33;
  _QWORD v34[4];
  void (**v35)(kaldi::nnet1::NnetTrainOptions *__hidden);
  float v36[10];

  kaldi::nnet1::FixedAttentionComponent::Check(a1);
  v8 = *((_DWORD *)a1 + 2);
  v9 = *((_DWORD *)a1 + 11);
  v10 = *(_DWORD *)(a2 + 20) / v9;
  v11 = *((_DWORD *)a1 + 3);
  a1[7] = a4;
  v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[2] + 272))(a1[2]);
  v35 = &off_1E5D2D150;
  v13 = *(_OWORD *)(v12 + 23);
  *(_OWORD *)v36 = *(_OWORD *)(v12 + 8);
  *(_OWORD *)((char *)&v36[3] + 3) = v13;
  v14 = v36[0];
  v36[0] = v36[0] / (float)v10;
  (*(void (**)(_QWORD, void (***)(kaldi::nnet1::NnetTrainOptions *__hidden)))(*(_QWORD *)a1[2]
                                                                                                  + 264))(a1[2], &v35);
  if (v10 >= 1)
  {
    v15 = 0;
    v29 = (v8 * v11);
    do
    {
      v17 = a1[4] + 4 * v29;
      v18 = *((_DWORD *)a1 + 13) - v29;
      v19 = a1[7];
      LODWORD(v34[1]) = *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8);
      *(_QWORD *)((char *)&v34[1] + 4) = *(_QWORD *)((char *)a1 + 44);
      HIDWORD(v34[2]) = v18;
      v34[3] = v19;
      v33 = &unk_1E5D29D40;
      v34[0] = v17;
      v20 = *(_DWORD *)(a2 + 24);
      v21 = *(_QWORD *)(a2 + 8) + 4 * (int)(v20 * v15);
      LODWORD(v19) = *(_DWORD *)(a2 + 28) - v20 * v15;
      v22 = *(_QWORD *)(a2 + 32);
      DWORD2(v31) = *(_DWORD *)(a2 + 16);
      HIDWORD(v31) = v9;
      *(_QWORD *)&v32 = __PAIR64__(v19, v20);
      *((_QWORD *)&v32 + 1) = v22;
      v30 = &unk_1E5D29D40;
      *(_QWORD *)&v31 = v21;
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v33, (uint64_t)&v30, 111);
      v23 = v16;
      v24 = v16 + 16;
      v30 = v24;
      v31 = 0u;
      v32 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v30);
      v33 = v24;
      memset(v34, 0, sizeof(v34));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v33);
      v25 = *(_DWORD *)(a3 + 24);
      v26 = *(_QWORD *)(a3 + 8) + 4 * (int)(v25 * v15);
      v27 = *(_DWORD *)(a3 + 28) - v25 * v15;
      v28 = *(_QWORD *)(a3 + 32);
      LODWORD(v34[1]) = *(_DWORD *)(a3 + 16);
      HIDWORD(v34[1]) = v9;
      v34[2] = __PAIR64__(v27, v25);
      v34[3] = v28;
      v33 = v24;
      v34[0] = v26;
      (*(void (**)(_QWORD, _QWORD *, void **, uint64_t, _QWORD))(*(_QWORD *)a1[2] + 232))(a1[2], a1 + 3, &v33, a4, 0);
      (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)a1[2] + 256))(a1[2], a4, 0);
      v16 = v23;
      v33 = v23 + 16;
      memset(v34, 0, sizeof(v34));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v33);
      v15 += v9;
      --v10;
    }
    while (v10);
  }
  v36[0] = v14;
  (*(void (**)(_QWORD, void (***)(kaldi::nnet1::NnetTrainOptions *__hidden)))(*(_QWORD *)a1[2]
                                                                                                  + 264))(a1[2], &v35);
  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)&v35);
}

void sub_1AD95FDC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)va);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::FixedAttentionComponent::AccumGradients(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::FixedAttentionComponent::AccumGradients((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 248)), a2, a3, a4);
}

void kaldi::nnet1::FixedAttentionComponent::GetGradient(_DWORD *a1, uint64_t a2, uint64_t a3, void **a4)
{
  const void *v6;
  char *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  _QWORD v28[6];
  void *v29;
  __int128 v30;
  __int128 v31;
  const float *v32[4];

  v6 = (const void *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 64))(a1);
  if (v6)
  else
    v7 = 0;
  v8 = *((_DWORD *)v7 + 11);
  v9 = a1[3];
  v10 = a1[2];
  v11 = *(_DWORD *)(a2 + 20) / v8;
  v12 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 112))(a1);
  kaldi::Vector<float>::Resize(a4, v12, 0);
  v13 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 112))(a1);
  memset(v32, 0, 24);
  kaldi::Vector<float>::Resize((void **)v32, v13, 1);
  if (v11 >= 1)
  {
    v14 = 0;
    v15 = (v10 * v9);
    do
    {
      v16 = *((_QWORD *)v7 + 4) + 4 * v15;
      v17 = *((_DWORD *)v7 + 13) - v15;
      v18 = *((_QWORD *)v7 + 7);
      LODWORD(v28[2]) = *(_DWORD *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8);
      *(_QWORD *)((char *)&v28[2] + 4) = *(_QWORD *)(v7 + 44);
      HIDWORD(v28[3]) = v17;
      v28[4] = v18;
      v28[0] = &unk_1E5D29D40;
      v28[1] = v16;
      v19 = *(_DWORD *)(a2 + 24);
      v20 = *(_QWORD *)(a2 + 8) + 4 * (int)(v19 * v14);
      LODWORD(v18) = *(_DWORD *)(a2 + 28) - v19 * v14;
      v21 = *(_QWORD *)(a2 + 32);
      DWORD2(v30) = *(_DWORD *)(a2 + 16);
      HIDWORD(v30) = v8;
      *(_QWORD *)&v31 = __PAIR64__(v18, v19);
      *((_QWORD *)&v31 + 1) = v21;
      v29 = &unk_1E5D29D40;
      *(_QWORD *)&v30 = v20;
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v28, (uint64_t)&v29, 111);
      v29 = &unk_1E5D29D40;
      v30 = 0u;
      v31 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v29);
      v28[0] = &unk_1E5D29D40;
      memset(&v28[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v28);
      v22 = *(_DWORD *)(a3 + 24);
      v23 = *(_QWORD *)(a3 + 8) + 4 * (int)(v22 * v14);
      v24 = *(_DWORD *)(a3 + 28) - v22 * v14;
      v25 = *(_QWORD *)(a3 + 32);
      DWORD2(v30) = *(_DWORD *)(a3 + 16);
      HIDWORD(v30) = v8;
      *(_QWORD *)&v31 = __PAIR64__(v24, v22);
      *((_QWORD *)&v31 + 1) = v25;
      v29 = &unk_1E5D29D40;
      *(_QWORD *)&v30 = v23;
      kaldi::CuMatrix<float>::CuMatrix(v28, &v29, 111);
      v29 = &unk_1E5D29D40;
      v30 = 0u;
      v31 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v29);
      (*(void (**)(char *, char *, _QWORD *, const float **))(*(_QWORD *)v7 + 168))(v7, v7 + 24, v28, v32);
      kaldi::VectorBase<float>::AddVec<float>((uint64_t)a4, v32, 1.0);
      kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v28);
      v14 += v8;
      --v11;
    }
    while (v11);
  }
  (*(void (**)(char *))(*(_QWORD *)v7 + 8))(v7);
  kaldi::Vector<float>::Destroy((uint64_t)v32);
}

void sub_1AD9600AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  _OWORD *v12;
  uint64_t v13;
  va_list va;

  va_start(va, a12);
  *v12 = 0u;
  v12[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  kaldi::Vector<float>::Destroy(v13 - 112);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::FixedAttentionComponent::GetGradient(_QWORD *a1, uint64_t a2, uint64_t a3, void **a4)
{
  kaldi::nnet1::FixedAttentionComponent::GetGradient((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 240)), a2, a3, a4);
}

uint64_t kaldi::nnet1::AttentionBaseComponent::SetSourceVectorDimension(uint64_t this, int a2)
{
  *(_DWORD *)(this + 8) = a2;
  return this;
}

uint64_t kaldi::nnet1::AttentionBaseComponent::SetMaxAttentions(uint64_t this, int a2)
{
  *(_DWORD *)(this + 12) = a2;
  return this;
}

__n128 kaldi::nnet1::UpdatableComponent::SetTrainOptions(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 8);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 23);
  *(__n128 *)(a1 + 56) = result;
  return result;
}

uint64_t kaldi::nnet1::UpdatableComponent::GetTrainOptions(kaldi::nnet1::UpdatableComponent *this)
{
  return (uint64_t)this + 48;
}

void kaldi::DecodableInterface::NumFramesReady(kaldi::DecodableInterface *this)
{
  _QWORD v1[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "NumFramesReady() not implemented for this decodable type.");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

uint64_t kaldi::DecodableInterface::SkipFrame(kaldi::DecodableInterface *this)
{
  return 0;
}

uint64_t kaldi::DecodableInterface::NumFramesSkipped(kaldi::DecodableInterface *this)
{
  return 0;
}

uint64_t kaldi::DecodableInterface::HasSilencePosterior(kaldi::DecodableInterface *this)
{
  return 0;
}

float kaldi::DecodableInterface::GetSilencePosterior(kaldi::DecodableInterface *this)
{
  return 0.0;
}

uint64_t kaldi::DecodableInterface::HasEndpointerScore(kaldi::DecodableInterface *this)
{
  return 0;
}

float kaldi::DecodableInterface::GetEndpointerScore(kaldi::DecodableInterface *this)
{
  return 0.0;
}

void std::vector<kaldi::Vector<float>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<kaldi::Vector<float>>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, *a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::Vector<float>>,kaldi::Vector<float>*,kaldi::Vector<float>*,kaldi::Vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      kaldi::Vector<float>::Resize((void **)v4, *(unsigned int *)(v6 + 8), 1);
      kaldi::VectorBase<float>::CopyFromVec(v4, (const void **)v6);
      v6 += 24;
      v4 = v11 + 24;
      v11 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::Vector<float>>,kaldi::Vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1AD9602AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::Vector<float>>,kaldi::Vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::Vector<float>>,kaldi::Vector<float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::Vector<float>>,kaldi::Vector<float>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::Vector<float>>,kaldi::Vector<float>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 24;
    kaldi::Vector<float>::Destroy(v1);
  }
}

void quasar::PhoneticMatchDecoder::loadModelOverrides(quasar::PhoneticMatchDecoder *this, quasar::SystemConfig *a2)
{
  const void **v4;
  uint64_t Ptree;
  void **v6;
  int JsonFile;
  uint64_t SpeechModelInfo;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const void **v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  const void **v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  void *p_ConfigFileVersion;
  uint64_t v67;
  _QWORD *v68;
  void **v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  void *v73;
  uint64_t v74;
  _QWORD *v75;
  void **v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  void *v80;
  uint64_t v81;
  _QWORD *v82;
  void **v83;
  uint64_t v84;
  void *v85[2];
  char v86;
  void *v87[2];
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  void *ConfigFileVersion;
  uint64_t v105;
  uint64_t v106;
  __int128 __p;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  void **v124;
  uint64_t v125;
  uint64_t v126;
  void **v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;

  v4 = (const void **)((char *)this + 8);
  Ptree = quasar::SystemConfig::getPtree((uint64_t)a2, (uint64_t)this + 8);
  std::string::basic_string[abi:ne180100]<0>(&v130, "model-override-json");
  quasar::PTree::getStringOptional(Ptree, (uint64_t)&v130, (std::string *)&__p);
  if (BYTE8(v108))
  {
    *(_OWORD *)v87 = __p;
    *(_QWORD *)&v88 = v108;
    *(_QWORD *)&v108 = 0;
    __p = 0uLL;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v87, "");
  }
  v6 = (void **)((char *)this + 816);
  if (*((char *)this + 839) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = *(_OWORD *)v87;
  *((_QWORD *)this + 104) = v88;
  BYTE7(v88) = 0;
  LOBYTE(v87[0]) = 0;
  if (BYTE8(v108) && SBYTE7(v108) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v132) < 0)
    operator delete(v130);
  if (*((char *)this + 839) < 0)
  {
    if (!*((_QWORD *)this + 103))
      goto LABEL_19;
  }
  else if (!*((_BYTE *)this + 839))
  {
LABEL_19:
    if (quasar::gLogLevel >= 5)
    {
      v122 = 0u;
      v123 = 0u;
      v120 = 0u;
      v121 = 0u;
      v118 = 0u;
      v119 = 0u;
      v116 = 0u;
      v117 = 0u;
      v114 = 0u;
      v115 = 0u;
      v112 = 0u;
      v113 = 0u;
      v110 = 0u;
      v111 = 0u;
      v108 = 0u;
      v109 = 0u;
      __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Not applying override because model-override-json is empty or does not exist", 76);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__p);
    }
    return;
  }
  if (!quasar::filesystem::exists((char *)this + 816))
    goto LABEL_19;
  v130 = 0;
  v131 = 0;
  v132 = 0;
  v127 = 0;
  v128 = 0;
  v129 = 0;
  v124 = 0;
  v125 = 0;
  v126 = 0;
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)&__p);
  ConfigFileVersion = 0;
  v105 = 0;
  v106 = 0;
  *(_OWORD *)v87 = 0u;
  v88 = 0u;
  LODWORD(v89) = 1065353216;
  JsonFile = quasar::SystemConfig::readJsonFile((uint64_t)&__p, (uint64_t)v6, (uint64_t *)&ConfigFileVersion, (uint64_t)v87, 0, 0);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v87);
  v87[0] = &ConfigFileVersion;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v87);
  if (JsonFile != 2)
  {
    SpeechModelInfo = quasar::SystemConfig::getSpeechModelInfo((quasar::SystemConfig *)&__p);
    v9 = quasar::SystemConfig::getSpeechModelInfo(a2);
    v10 = *(unsigned __int8 *)(SpeechModelInfo + 143);
    if ((v10 & 0x80u) == 0)
      v11 = *(unsigned __int8 *)(SpeechModelInfo + 143);
    else
      v11 = *(_QWORD *)(SpeechModelInfo + 128);
    v12 = *(unsigned __int8 *)(v9 + 143);
    v13 = (char)v12;
    if ((v12 & 0x80u) != 0)
      v12 = *(_QWORD *)(v9 + 128);
    if (v11 == v12)
    {
      v14 = (const void **)(SpeechModelInfo + 120);
      v17 = *(unsigned __int8 **)(v9 + 120);
      v15 = (unsigned __int8 *)(v9 + 120);
      v16 = v17;
      if (v13 >= 0)
        v18 = v15;
      else
        v18 = v16;
      if ((v10 & 0x80) == 0)
      {
        if (*(_BYTE *)(SpeechModelInfo + 143))
        {
          while (*(unsigned __int8 *)v14 == *v18)
          {
            v14 = (const void **)((char *)v14 + 1);
            ++v18;
            if (!--v10)
              goto LABEL_49;
          }
          goto LABEL_36;
        }
LABEL_49:
        v36 = quasar::SystemConfig::getSpeechModelInfo((quasar::SystemConfig *)&__p);
        v37 = quasar::SystemConfig::getSpeechModelInfo(a2);
        v38 = *(unsigned __int8 *)(v36 + 167);
        if ((v38 & 0x80u) == 0)
          v39 = *(unsigned __int8 *)(v36 + 167);
        else
          v39 = *(_QWORD *)(v36 + 152);
        v40 = *(unsigned __int8 *)(v37 + 167);
        v41 = (char)v40;
        if ((v40 & 0x80u) != 0)
          v40 = *(_QWORD *)(v37 + 152);
        if (v39 == v40)
        {
          v42 = (const void **)(v36 + 144);
          v45 = *(unsigned __int8 **)(v37 + 144);
          v43 = (unsigned __int8 *)(v37 + 144);
          v44 = v45;
          if (v41 >= 0)
            v46 = v43;
          else
            v46 = v44;
          if ((v38 & 0x80) == 0)
          {
            if (*(_BYTE *)(v36 + 167))
            {
              while (*(unsigned __int8 *)v42 == *v46)
              {
                v42 = (const void **)((char *)v42 + 1);
                ++v46;
                if (!--v38)
                  goto LABEL_86;
              }
              goto LABEL_64;
            }
LABEL_86:
            v87[0] = (void *)quasar::SystemConfig::getConfigFileVersion((quasar::SystemConfig *)&__p);
            ConfigFileVersion = (void *)quasar::SystemConfig::getConfigFileVersion(a2);
            if (quasar::SystemConfig::Version::operator>(v87, &ConfigFileVersion))
            {
              if (quasar::gLogLevel < 5)
                goto LABEL_79;
              v102 = 0u;
              v103 = 0u;
              v100 = 0u;
              v101 = 0u;
              v98 = 0u;
              v99 = 0u;
              v96 = 0u;
              v97 = 0u;
              v94 = 0u;
              v95 = 0u;
              v92 = 0u;
              v93 = 0u;
              v90 = 0u;
              v91 = 0u;
              v88 = 0u;
              v89 = 0u;
              *(_OWORD *)v87 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v87);
              v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"Not applying override because the override config version: ", 59);
              ConfigFileVersion = (void *)quasar::SystemConfig::getConfigFileVersion((quasar::SystemConfig *)&__p);
              v62 = (_QWORD *)quasar::operator<<((uint64_t)v61);
              v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)" is greater than the datapack's config version: ", 48);
              v85[0] = (void *)quasar::SystemConfig::getConfigFileVersion(a2);
              quasar::operator<<((uint64_t)v63);
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(v87, "phonetic-match-building");
              quasar::SystemConfig::enforceMinVersion((uint64_t)&__p, 210, 0, (uint64_t)v87);
              if (SBYTE7(v88) < 0)
                operator delete(v87[0]);
              std::string::basic_string[abi:ne180100]<0>(v87, "phonetic-match-building.");
              quasar::SystemConfig::setPrefix((std::string *)&__p, (const std::string *)v87);
              if (SBYTE7(v88) < 0)
                operator delete(v87[0]);
              std::string::basic_string[abi:ne180100]<0>(v87, "lg-fst-name");
              std::string::basic_string[abi:ne180100]<0>(&ConfigFileVersion, "LG FST name");
              quasar::SystemConfig::Register<std::string>((uint64_t)&__p, (const void **)v87, (uint64_t)&v130, (uint64_t)&ConfigFileVersion, 1, 210, 0, 0x7FFFFFFF, 0x7FFFFFFF);
              if (SHIBYTE(v106) < 0)
                operator delete(ConfigFileVersion);
              if (SBYTE7(v88) < 0)
                operator delete(v87[0]);
              std::string::basic_string[abi:ne180100]<0>(v87, "l-fst-name");
              std::string::basic_string[abi:ne180100]<0>(&ConfigFileVersion, "L FST name");
              quasar::SystemConfig::Register<std::string>((uint64_t)&__p, (const void **)v87, (uint64_t)&v127, (uint64_t)&ConfigFileVersion, 1, 210, 0, 0x7FFFFFFF, 0x7FFFFFFF);
              if (SHIBYTE(v106) < 0)
                operator delete(ConfigFileVersion);
              if (SBYTE7(v88) < 0)
                operator delete(v87[0]);
              std::string::basic_string[abi:ne180100]<0>(v87, "g-osyms-name");
              std::string::basic_string[abi:ne180100]<0>(&ConfigFileVersion, "G output symbol name");
              quasar::SystemConfig::Register<std::string>((uint64_t)&__p, (const void **)v87, (uint64_t)&v124, (uint64_t)&ConfigFileVersion, 1, 210, 0, 0x7FFFFFFF, 0x7FFFFFFF);
              if (SHIBYTE(v106) < 0)
                operator delete(ConfigFileVersion);
              if (SBYTE7(v88) < 0)
                operator delete(v87[0]);
              std::string::basic_string[abi:ne180100]<0>(v87, "phonetic-match-building");
              quasar::SystemConfig::readPtree((uint64_t)&__p, (uint64_t)v87, 0, 0);
              if (SBYTE7(v88) < 0)
                operator delete(v87[0]);
              quasar::SystemConfig::makePathAbsolute((quasar::SystemConfig *)&__p, (uint64_t)&v130, 1);
              std::string::basic_string[abi:ne180100]<0>(&ConfigFileVersion, "");
              v64 = quasar::SystemConfig::getPtree((uint64_t)a2, (uint64_t)&ConfigFileVersion);
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(".lg-fst-file", v4, v85);
              quasar::PTree::PTree(v87, &v130);
              quasar::PTree::putChild(v64, (uint64_t)v85, (uint64_t)v87, 1);
              quasar::PTree::~PTree((quasar::PTree *)v87);
              if (v86 < 0)
                operator delete(v85[0]);
              if (SHIBYTE(v106) < 0)
                operator delete(ConfigFileVersion);
              if (quasar::gLogLevel >= 5)
              {
                v102 = 0u;
                v103 = 0u;
                v100 = 0u;
                v101 = 0u;
                v98 = 0u;
                v99 = 0u;
                v96 = 0u;
                v97 = 0u;
                v94 = 0u;
                v95 = 0u;
                v92 = 0u;
                v93 = 0u;
                v90 = 0u;
                v91 = 0u;
                v88 = 0u;
                v89 = 0u;
                *(_OWORD *)v87 = 0u;
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v87);
                v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"Overriding ", 11);
                std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(".lg-fst-file to ", v4, &ConfigFileVersion);
                if (v106 >= 0)
                  p_ConfigFileVersion = &ConfigFileVersion;
                else
                  p_ConfigFileVersion = ConfigFileVersion;
                if (v106 >= 0)
                  v67 = HIBYTE(v106);
                else
                  v67 = v105;
                v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)p_ConfigFileVersion, v67);
                if (v132 >= 0)
                  v69 = &v130;
                else
                  v69 = (void **)v130;
                if (v132 >= 0)
                  v70 = HIBYTE(v132);
                else
                  v70 = v131;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)v69, v70);
                if (SHIBYTE(v106) < 0)
                  operator delete(ConfigFileVersion);
                quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v87);
              }
              quasar::SystemConfig::makePathAbsolute((quasar::SystemConfig *)&__p, (uint64_t)&v124, 1);
              std::string::basic_string[abi:ne180100]<0>(&ConfigFileVersion, "");
              v71 = quasar::SystemConfig::getPtree((uint64_t)a2, (uint64_t)&ConfigFileVersion);
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(".word-syms-map-file", v4, v85);
              quasar::PTree::PTree(v87, &v124);
              quasar::PTree::putChild(v71, (uint64_t)v85, (uint64_t)v87, 1);
              quasar::PTree::~PTree((quasar::PTree *)v87);
              if (v86 < 0)
                operator delete(v85[0]);
              if (SHIBYTE(v106) < 0)
                operator delete(ConfigFileVersion);
              if (quasar::gLogLevel >= 5)
              {
                v102 = 0u;
                v103 = 0u;
                v100 = 0u;
                v101 = 0u;
                v98 = 0u;
                v99 = 0u;
                v96 = 0u;
                v97 = 0u;
                v94 = 0u;
                v95 = 0u;
                v92 = 0u;
                v93 = 0u;
                v90 = 0u;
                v91 = 0u;
                v88 = 0u;
                v89 = 0u;
                *(_OWORD *)v87 = 0u;
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v87);
                v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"Overriding ", 11);
                std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(".word-syms-map-file to ", v4, &ConfigFileVersion);
                if (v106 >= 0)
                  v73 = &ConfigFileVersion;
                else
                  v73 = ConfigFileVersion;
                if (v106 >= 0)
                  v74 = HIBYTE(v106);
                else
                  v74 = v105;
                v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)v73, v74);
                if (v126 >= 0)
                  v76 = (void **)&v124;
                else
                  v76 = v124;
                if (v126 >= 0)
                  v77 = HIBYTE(v126);
                else
                  v77 = v125;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)v76, v77);
                if (SHIBYTE(v106) < 0)
                  operator delete(ConfigFileVersion);
                quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v87);
              }
              quasar::SystemConfig::makePathAbsolute((quasar::SystemConfig *)&__p, (uint64_t)&v127, 1);
              std::string::basic_string[abi:ne180100]<0>(&ConfigFileVersion, "");
              v78 = quasar::SystemConfig::getPtree((uint64_t)a2, (uint64_t)&ConfigFileVersion);
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(".l-fst-file", v4, v85);
              quasar::PTree::PTree(v87, &v127);
              quasar::PTree::putChild(v78, (uint64_t)v85, (uint64_t)v87, 1);
              quasar::PTree::~PTree((quasar::PTree *)v87);
              if (v86 < 0)
                operator delete(v85[0]);
              if (SHIBYTE(v106) < 0)
                operator delete(ConfigFileVersion);
              if (quasar::gLogLevel < 5)
                goto LABEL_79;
              v102 = 0u;
              v103 = 0u;
              v100 = 0u;
              v101 = 0u;
              v98 = 0u;
              v99 = 0u;
              v96 = 0u;
              v97 = 0u;
              v94 = 0u;
              v95 = 0u;
              v92 = 0u;
              v93 = 0u;
              v90 = 0u;
              v91 = 0u;
              v88 = 0u;
              v89 = 0u;
              *(_OWORD *)v87 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v87);
              v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"Overriding ", 11);
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(".l-fst-file to ", v4, &ConfigFileVersion);
              if (v106 >= 0)
                v80 = &ConfigFileVersion;
              else
                v80 = ConfigFileVersion;
              if (v106 >= 0)
                v81 = HIBYTE(v106);
              else
                v81 = v105;
              v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)v80, v81);
              if (v129 >= 0)
                v83 = (void **)&v127;
              else
                v83 = v127;
              if (v129 >= 0)
                v84 = HIBYTE(v129);
              else
                v84 = v128;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)v83, v84);
              if (SHIBYTE(v106) < 0)
                operator delete(ConfigFileVersion);
            }
            goto LABEL_78;
          }
          if (!memcmp(*v42, v46, *(_QWORD *)(v36 + 152)))
            goto LABEL_86;
        }
LABEL_64:
        if (quasar::gLogLevel < 5)
          goto LABEL_79;
        v102 = 0u;
        v103 = 0u;
        v100 = 0u;
        v101 = 0u;
        v98 = 0u;
        v99 = 0u;
        v96 = 0u;
        v97 = 0u;
        v94 = 0u;
        v95 = 0u;
        v92 = 0u;
        v93 = 0u;
        v90 = 0u;
        v91 = 0u;
        v88 = 0u;
        v89 = 0u;
        *(_OWORD *)v87 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v87);
        v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"Not applying override because the override phoneset: ", 53);
        v48 = quasar::SystemConfig::getSpeechModelInfo((quasar::SystemConfig *)&__p);
        v51 = *(_QWORD *)(v48 + 144);
        v49 = v48 + 144;
        v50 = v51;
        v52 = *(char *)(v49 + 23);
        if (v52 >= 0)
          v53 = v49;
        else
          v53 = v50;
        if (v52 >= 0)
          v54 = *(unsigned __int8 *)(v49 + 23);
        else
          v54 = *(_QWORD *)(v49 + 8);
        v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, v53, v54);
        v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)" is different from the datapack's phoneset: ", 44);
        v56 = quasar::SystemConfig::getSpeechModelInfo(a2);
        v59 = *(_QWORD *)(v56 + 144);
        v57 = v56 + 144;
        v58 = v59;
        v60 = *(char *)(v57 + 23);
        if (v60 >= 0)
          v34 = v57;
        else
          v34 = v58;
        if (v60 >= 0)
          v35 = *(unsigned __int8 *)(v57 + 23);
        else
          v35 = *(_QWORD *)(v57 + 8);
        goto LABEL_77;
      }
      if (!memcmp(*v14, v18, *(_QWORD *)(SpeechModelInfo + 128)))
        goto LABEL_49;
    }
LABEL_36:
    if (quasar::gLogLevel < 5)
      goto LABEL_79;
    v102 = 0u;
    v103 = 0u;
    v100 = 0u;
    v101 = 0u;
    v98 = 0u;
    v99 = 0u;
    v96 = 0u;
    v97 = 0u;
    v94 = 0u;
    v95 = 0u;
    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    *(_OWORD *)v87 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v87);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"Not applying override because the override language: ", 53);
    v20 = quasar::SystemConfig::getSpeechModelInfo((quasar::SystemConfig *)&__p);
    v23 = *(_QWORD *)(v20 + 120);
    v21 = v20 + 120;
    v22 = v23;
    v24 = *(char *)(v21 + 23);
    if (v24 >= 0)
      v25 = v21;
    else
      v25 = v22;
    if (v24 >= 0)
      v26 = *(unsigned __int8 *)(v21 + 23);
    else
      v26 = *(_QWORD *)(v21 + 8);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v25, v26);
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" is different from the datapack's language: ", 44);
    v29 = quasar::SystemConfig::getSpeechModelInfo(a2);
    v32 = *(_QWORD *)(v29 + 120);
    v30 = v29 + 120;
    v31 = v32;
    v33 = *(char *)(v30 + 23);
    if (v33 >= 0)
      v34 = v30;
    else
      v34 = v31;
    if (v33 >= 0)
      v35 = *(unsigned __int8 *)(v30 + 23);
    else
      v35 = *(_QWORD *)(v30 + 8);
LABEL_77:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v34, v35);
    goto LABEL_78;
  }
  if (quasar::gLogLevel >= 5)
  {
    v102 = 0u;
    v103 = 0u;
    v100 = 0u;
    v101 = 0u;
    v98 = 0u;
    v99 = 0u;
    v96 = 0u;
    v97 = 0u;
    v94 = 0u;
    v95 = 0u;
    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    *(_OWORD *)v87 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v87);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"Not applying override because override configuration's version is unsupported", 77);
LABEL_78:
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v87);
  }
LABEL_79:
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&__p);
  if (SHIBYTE(v126) < 0)
    operator delete(v124);
  if (SHIBYTE(v129) < 0)
    operator delete(v127);
  if (SHIBYTE(v132) < 0)
    operator delete(v130);
}

void sub_1AD960F18(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,uint64_t a50,uint64_t a51)
{
  _OWORD *v51;
  uint64_t v52;
  void *v55;
  void *v56;
  _QWORD *v57;
  const char *v58;
  size_t v59;
  void *v60;
  void *v61;
  _QWORD *v62;
  const char *v63;
  size_t v64;

  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a13);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&a51);
  if (*(char *)(v52 - 113) < 0)
    operator delete(*(void **)(v52 - 136));
  if (*(char *)(v52 - 89) < 0)
    operator delete(*(void **)(v52 - 112));
  if (*(char *)(v52 - 65) < 0)
    operator delete(*(void **)(v52 - 88));
  if (a2 == 2)
  {
    v55 = __cxa_begin_catch(a1);
    if (quasar::gLogLevel >= 1)
    {
      v56 = v55;
      v51[34] = 0u;
      v51[35] = 0u;
      v51[32] = 0u;
      v51[33] = 0u;
      v51[30] = 0u;
      v51[31] = 0u;
      v51[28] = 0u;
      v51[29] = 0u;
      v51[26] = 0u;
      v51[27] = 0u;
      v51[24] = 0u;
      v51[25] = 0u;
      v51[22] = 0u;
      v51[23] = 0u;
      v51[20] = 0u;
      v51[21] = 0u;
      v51[19] = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a51);
      v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a51, (uint64_t)"Error reading JSON config file: ", 32);
      v58 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v56 + 16))(v56);
      v59 = strlen(v58);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)v58, v59);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a51);
    }
  }
  else
  {
    if (a2 != 1)
      _Unwind_Resume(a1);
    v60 = __cxa_begin_catch(a1);
    if (quasar::gLogLevel >= 1)
    {
      v61 = v60;
      v51[34] = 0u;
      v51[35] = 0u;
      v51[32] = 0u;
      v51[33] = 0u;
      v51[30] = 0u;
      v51[31] = 0u;
      v51[28] = 0u;
      v51[29] = 0u;
      v51[26] = 0u;
      v51[27] = 0u;
      v51[24] = 0u;
      v51[25] = 0u;
      v51[22] = 0u;
      v51[23] = 0u;
      v51[20] = 0u;
      v51[21] = 0u;
      v51[19] = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a51);
      v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a51, (uint64_t)"Internal C++ exception: ", 24);
      v63 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v61 + 16))(v61);
      v64 = strlen(v63);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)v63, v64);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a51);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x1AD960864);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(char *__s@<X1>, const void **a2@<X0>, void **a3@<X8>)
{
  size_t v6;
  size_t v7;
  uint64_t result;
  const void *v9;
  char *v10;

  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = strlen(__s);
  result = std::string::basic_string[abi:ne180100]((uint64_t)a3, v6 + v7);
  if (*((char *)a3 + 23) < 0)
    a3 = (void **)*a3;
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *a2;
    result = (uint64_t)memmove(a3, v9, v6);
  }
  v10 = (char *)a3 + v6;
  if (v7)
    result = (uint64_t)memmove(v10, __s, v7);
  v10[v7] = 0;
  return result;
}

uint64_t quasar::PhoneticMatchDecoder::registerParams(quasar::PhoneticMatchDecoder *this, quasar::SystemConfig *a2)
{
  void *v5[2];
  char v6;
  void *__p[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(__p, "phonetic-match");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 48, 0, (uint64_t)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  quasar::PhoneticMatchDecoder::loadModelOverrides(this, a2);
  kaldi::quasar::SymbolDecoderOptions::Register((uint64_t)this + 888, (uint64_t)a2);
  quasar::QsrTextSymbolTable::Register(*((quasar::QsrTextSymbolTable **)this + 105), a2, 70, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  std::string::basic_string[abi:ne180100]<0>(__p, "output-symtab-file");
  std::string::basic_string[abi:ne180100]<0>(v5, "Output symbol table file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 448, (uint64_t)v5, 1, 48, 0, 69, 0);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "lg-fst-file");
  std::string::basic_string[abi:ne180100]<0>(v5, "LG FST file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 472, (uint64_t)v5, 1, 48, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "phonomap-file");
  std::string::basic_string[abi:ne180100]<0>(v5, "Phonomap file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 520, (uint64_t)v5, 1, 48, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "sys-select-bias");
  std::string::basic_string[abi:ne180100]<0>(v5, "System selection bias");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 640, (uint64_t)v5, 1, 48, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "sys-select-lm-scale");
  std::string::basic_string[abi:ne180100]<0>(v5, "System selection LM scale");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 644, (uint64_t)v5, 1, 94, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "regex-list-file");
  std::string::basic_string[abi:ne180100]<0>(v5, "List of regular expressions that will be used to catch inputs for phonetic match.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 544, (uint64_t)v5, 1, 59, 0, 68, 0);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "regex-whitelist-file");
  std::string::basic_string[abi:ne180100]<0>(v5, "Regex whitelist");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 568, (uint64_t)v5, 1, 69, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "regex-blacklist-file");
  std::string::basic_string[abi:ne180100]<0>(v5, "Regex blacklist");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 592, (uint64_t)v5, 1, 69, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "lm-logprob-threshold");
  std::string::basic_string[abi:ne180100]<0>(v5, "Only do PM if LVCSR's LM logprob is less than this.");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 660, (uint64_t)v5, 1, 69, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "entity-tags-tsv-file");
  std::string::basic_string[abi:ne180100]<0>(v5, "File containing start and end entity tags");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 616, (uint64_t)v5, 1, 74, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "sys-select-score-scale");
  std::string::basic_string[abi:ne180100]<0>(v5, "Scale factor for PM-overallScore for addition to confidences");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 648, (uint64_t)v5, 1, 101, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "sys-select-score-min");
  std::string::basic_string[abi:ne180100]<0>(v5, "Minimum PM-overallScore at which to discard the PM result");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 652, (uint64_t)v5, 1, 101, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "sys-select-length-norm");
  std::string::basic_string[abi:ne180100]<0>(v5, "Divide PM-overallScore by phone sequence length");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 656, (uint64_t)v5, 1, 104, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "do-use-confmodel");
  std::string::basic_string[abi:ne180100]<0>(v5, "Flag for whether or not to use a confidence model, if true confidence-model-file must also be set");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 664, (uint64_t)v5, 1, 114, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "confidence-model-file");
  std::string::basic_string[abi:ne180100]<0>(v5, "Filename for confidence model file, format <FEATURE> <WEIGHT> (one per line)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 672, (uint64_t)v5, 0, 114, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "l-fst-file");
  std::string::basic_string[abi:ne180100]<0>(v5, "L FST file (if specified per-word segmentation will be output)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 496, (uint64_t)v5, 0, 119, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "max-align-total-tokens");
  std::string::basic_string[abi:ne180100]<0>(v5, "Maximum number of tokens used just for alignment pass");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 728, (uint64_t)v5, 0, 130, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "protect-lme-tags");
  std::string::basic_string[abi:ne180100]<0>(v5, "Comma separated list of trailing strings which can be used identify tokens to be protected from replacement by phonetic match");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 736, (uint64_t)v5, 0, 157, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "wildcard-symbol");
  std::string::basic_string[abi:ne180100]<0>(v5, "The wildcard symbol is used to specify a partial match. It will always align with a single phone. Normally set to ~ if you wish to allow phonetic match to do a partial match (filling in the words recognised pre-PM where the wildcard occurs)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 760, (uint64_t)v5, 0, 193, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "wildcard-scale");
  std::string::basic_string[abi:ne180100]<0>(v5, "The wildcard scale is a multiplier applied to the negative log likelihoods in the phonomap corresponding to the wildcard-symbol");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 784, (uint64_t)v5, 0, 193, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "placeholders-file");
  std::string::basic_string[abi:ne180100]<0>(v5, "Each line in the file contains a regexes which to match a token in PM-input. The regex should be followed by <TAB> and then a new token which used to get a pron for the replacement. The original token will be switched back when added to the choice list (after PM-output). e.g. (.*)\\artist-first<TAB>any_artist. l-fst-file must be specified and contain a prob forthe word given");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 792, (uint64_t)v5, 0, 202, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "model-override-json");
  std::string::basic_string[abi:ne180100]<0>(v5, "The JSON config file that stores Phonetic-Match model overrides");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 816, (uint64_t)v5, 0, 214, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  *(_QWORD *)((char *)this + 644) = 0;
  *((_DWORD *)this + 163) = 0;
  *((_BYTE *)this + 656) = 1;
  *((_BYTE *)this + 664) = 0;
  *((_DWORD *)this + 165) = 1148846080;
  *((_DWORD *)this + 182) = 1178599424;
  MEMORY[0x1AF44C914]((char *)this + 736, "");
  MEMORY[0x1AF44C914]((char *)this + 760, "");
  *((_DWORD *)this + 196) = 1065353216;
  return MEMORY[0x1AF44C914]((char *)this + 792, "");
}

void sub_1AD961E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::SymbolDecoderOptions::Register(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "Symbol decoder beam");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-active");
  std::string::basic_string[abi:ne180100]<0>(__p, "Symbol decoder max active states");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 4, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "beam-delta");
  std::string::basic_string[abi:ne180100]<0>(__p, "Symbol decoder beam delta");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 8, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "hash-ratio");
  std::string::basic_string[abi:ne180100]<0>(__p, "Symbol decoder hash ratio");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 12, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "ac-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Symbol decoder acoustic scale");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 16, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-total-tokens");
  std::string::basic_string[abi:ne180100]<0>(__p, "Max total allocated tokens at any time.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 20, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1AD962130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::PhoneticMatchDecoder::getJoinedRegexpsFromFile@<X0>(_QWORD *a1@<X8>)
{
  char v2;
  std::locale::id *v3;
  const std::locale::facet *v4;
  unsigned __int8 v5;
  _QWORD *v6;
  std::string::size_type size;
  std::string *v8;
  __int128 v9;
  const std::string::value_type *locale;
  std::string::size_type v11;
  std::string::size_type v12;
  char v13;
  std::string v15;
  std::locale v16[2];
  int64_t v17;
  std::string v18;
  std::string __p;
  _QWORD v20[2];
  uint64_t v21;
  _QWORD v22[21];

  v22[19] = *MEMORY[0x1E0C80C00];
  std::ifstream::basic_ifstream(v20);
  memset(&__p, 0, sizeof(__p));
  v2 = 1;
  memset(&v18, 0, sizeof(v18));
  v3 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(_QWORD *)(v20[0] - 24)));
    v4 = std::locale::use_facet(v16, v3);
    v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
    std::locale::~locale(v16);
    v6 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v20, (uint64_t)&__p, v5);
    if ((*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 5) != 0)
      break;
    quasar::trim(&__p);
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (size)
    {
      if ((v2 & 1) == 0)
        std::string::append(&v18, "|");
      std::operator+<char>();
      v8 = std::string::append(&v15, ")");
      v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v17 = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v16[0].__locale_ = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      if (v17 >= 0)
        locale = (const std::string::value_type *)v16;
      else
        locale = (const std::string::value_type *)v16[0].__locale_;
      if (v17 >= 0)
        v11 = HIBYTE(v17);
      else
        v11 = (std::string::size_type)v16[1].__locale_;
      std::string::append(&v18, locale, v11);
      if (SHIBYTE(v17) < 0)
        operator delete(v16[0].__locale_);
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v15.__r_.__value_.__l.__data_);
      v2 = 0;
    }
  }
  v12 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  v13 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v12 = v18.__r_.__value_.__l.__size_;
  if (v12)
  {
    std::allocate_shared[abi:ne180100]<quasar::URegularExpressionWrapper,std::allocator<quasar::URegularExpressionWrapper>,std::string &,void>(a1);
    if ((*((_BYTE *)&v18.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_24;
    goto LABEL_23;
  }
  *a1 = 0;
  a1[1] = 0;
  if (v13 < 0)
LABEL_23:
    operator delete(v18.__r_.__value_.__l.__data_);
LABEL_24:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v20[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v20 + *(_QWORD *)(v20[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1AF44CA70](&v21);
  std::istream::~istream();
  return MEMORY[0x1AF44D094](v22);
}

void sub_1AD9623E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35)
{
  if (a28 < 0)
    operator delete(__p);
  if (a34 < 0)
    operator delete(a29);
  std::ifstream::~ifstream(&a35);
  _Unwind_Resume(a1);
}

uint64_t quasar::PhoneticMatchDecoder::finishInit(quasar::PhoneticMatchDecoder *this)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  std::string **v31;
  std::string **i;
  std::string *v33;
  unsigned __int8 *v34;
  uint64_t result;
  const std::locale::facet *v36;
  unsigned __int8 v37;
  _QWORD *v38;
  uint64_t v39;
  __int128 v40;
  int v41;
  int *v42;
  int *v43;
  std::vector<std::string>::pointer end;
  __int128 v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  __int128 v51;
  std::string *v52;
  _QWORD *v53;
  void **v54;
  _QWORD *v55;
  void **v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  std::string *v60;
  std::string::size_type v61;
  _QWORD *v62;
  _QWORD *v63;
  std::string *v64;
  std::string::size_type v65;
  std::__shared_weak_count *v66;
  unint64_t *p_shared_owners;
  unint64_t v68;
  _QWORD *v69;
  char v70;
  char *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  std::string *v75;
  std::string::size_type size;
  _QWORD *v77;
  _QWORD *v78;
  std::string *v79;
  std::string::size_type v80;
  _QWORD *v81;
  _QWORD *v82;
  int v83;
  char *v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87[2];
  uint64_t v88;
  std::__shared_weak_count *v89;
  void *v90[2];
  int64_t v91;
  std::vector<std::string> v92;
  void *v93;
  int *v94;
  std::string v95;
  std::string v96;
  _QWORD v97[3];
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  std::string v118;
  void *__p[2];
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  _QWORD v136[23];

  v136[20] = *MEMORY[0x1E0C80C00];
  quasar::SystemConfig::Version::Version(__p, 70, 0);
  if (quasar::SystemConfig::Version::operator>=((_DWORD *)this + 8, __p))
  {
    quasar::QsrTextSymbolTable::init(*((const std::string **)this + 105), (quasar::PhoneticMatchDecoder *)((char *)this + 32), 1, 0, 1);
  }
  else
  {
    quasar::ModelLoader::readSymbolTable(*((_QWORD *)this + 46), (uint64_t)this + 448, 4, 0, (uint64_t *)&v98);
    LODWORD(v115) = 3;
    std::allocate_shared[abi:ne180100]<quasar::QsrTextSymbolTable,std::allocator<quasar::QsrTextSymbolTable>,std::shared_ptr<fst::SymbolTable>,quasar::TextEncoding,void>((uint64_t *)&v98, (int *)&v115, __p);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 840, (__int128 *)__p);
    v2 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v3 = (unint64_t *)((char *)__p[1] + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = (std::__shared_weak_count *)*((_QWORD *)&v98 + 1);
    if (*((_QWORD *)&v98 + 1))
    {
      v6 = (unint64_t *)(*((_QWORD *)&v98 + 1) + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (*((char *)this + 519) < 0)
  {
    if (!*((_QWORD *)this + 63))
      goto LABEL_22;
  }
  else if (!*((_BYTE *)this + 519))
  {
    goto LABEL_22;
  }
  (*(void (**)(void **__return_ptr, _QWORD, char *))(**((_QWORD **)this + 46) + 16))(__p, *((_QWORD *)this + 46), (char *)this + 496);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 856, (__int128 *)__p);
  v8 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v9 = (unint64_t *)((char *)__p[1] + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
LABEL_22:
  quasar::SystemConfig::Version::Version(__p, 158, 0);
  if (quasar::SystemConfig::Version::operator<((_DWORD *)this + 8, __p))
  {
    if (quasar::gLogLevel >= 4)
    {
      v134 = 0u;
      v135 = 0u;
      v132 = 0u;
      v133 = 0u;
      v130 = 0u;
      v131 = 0u;
      v128 = 0u;
      v129 = 0u;
      v126 = 0u;
      v127 = 0u;
      v124 = 0u;
      v125 = 0u;
      v122 = 0u;
      v123 = 0u;
      v120 = 0u;
      v121 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Config version < 158 so using FST compatibility mode so subroutine states with no outgoing arcs denotes an exit state", 117);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    v11 = 1;
  }
  else
  {
    if (quasar::gLogLevel >= 4)
    {
      v134 = 0u;
      v135 = 0u;
      v132 = 0u;
      v133 = 0u;
      v130 = 0u;
      v131 = 0u;
      v128 = 0u;
      v129 = 0u;
      v126 = 0u;
      v127 = 0u;
      v124 = 0u;
      v125 = 0u;
      v122 = 0u;
      v123 = 0u;
      v120 = 0u;
      v121 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Config version >= 158 so exit states in subroutines are expected to be proper final states - phonetic match will fail otherwise", 127);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    v11 = 0;
  }
  *((_BYTE *)this + 912) = v11;
  (*(void (**)(void **__return_ptr, _QWORD, char *))(**((_QWORD **)this + 46) + 16))(__p, *((_QWORD *)this + 46), (char *)this + 472);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 872, (__int128 *)__p);
  v12 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v13 = (unint64_t *)((char *)__p[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (_QWORD *)operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  kaldi::quasar::Phonomap::Phonomap(v15, (uint64_t)this + 520, (uint64_t)__p, 1.0);
  *(_QWORD *)&v98 = v15;
  if (SBYTE7(v120) < 0)
  {
    operator delete(__p[0]);
    v15 = (_QWORD *)v98;
  }
  *(_QWORD *)&v98 = 0;
  v16 = (uint64_t *)*((_QWORD *)this + 118);
  *((_QWORD *)this + 118) = v15;
  if (v16)
  {
    std::default_delete<kaldi::quasar::Phonomap>::operator()[abi:ne180100]((uint64_t)this + 944, v16);
    v17 = (uint64_t *)v98;
    *(_QWORD *)&v98 = 0;
    if (v17)
      std::default_delete<kaldi::quasar::Phonomap>::operator()[abi:ne180100]((uint64_t)&v98, v17);
  }
  v18 = (_QWORD *)operator new();
  kaldi::quasar::Phonomap::Phonomap(v18, (uint64_t)this + 520, (uint64_t)this + 760, *((float *)this + 196));
  __p[0] = 0;
  v19 = (uint64_t *)*((_QWORD *)this + 117);
  *((_QWORD *)this + 117) = v18;
  if (v19)
  {
    std::default_delete<kaldi::quasar::Phonomap>::operator()[abi:ne180100]((uint64_t)this + 936, v19);
    v20 = (uint64_t *)__p[0];
    __p[0] = 0;
    if (v20)
      std::default_delete<kaldi::quasar::Phonomap>::operator()[abi:ne180100]((uint64_t)__p, v20);
  }
  std::allocate_shared[abi:ne180100]<kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>,std::allocator<kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,kaldi::quasar::Phonomap&,kaldi::quasar::SymbolDecoderOptions &,void>(*((_QWORD *)this + 109), *((_QWORD *)this + 117), (__int128 *)((char *)this + 888), __p);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 920, (__int128 *)__p);
  v21 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v22 = (unint64_t *)((char *)__p[1] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if ((*((char *)this + 567) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 567))
      goto LABEL_49;
LABEL_54:
    quasar::PhoneticMatchDecoder::getJoinedRegexpsFromFile(__p);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 952, (__int128 *)__p);
    v27 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v28 = (unint64_t *)((char *)__p[1] + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    quasar::PhoneticMatchDecoder::getJoinedRegexpsFromFile(__p);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 968, (__int128 *)__p);
    v24 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      goto LABEL_64;
    v30 = (unint64_t *)((char *)__p[1] + 8);
    do
      v26 = __ldaxr(v30);
    while (__stlxr(v26 - 1, v30));
    goto LABEL_62;
  }
  if (!*((_QWORD *)this + 69))
    goto LABEL_54;
LABEL_49:
  quasar::PhoneticMatchDecoder::getJoinedRegexpsFromFile(__p);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 952, (__int128 *)__p);
  v24 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v25 = (unint64_t *)((char *)__p[1] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
LABEL_62:
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
LABEL_64:
  quasar::readTsvFile(1, (uint64_t *)__p);
  v31 = (std::string **)__p[0];
  for (i = (std::string **)__p[1]; v31 != i; v31 += 3)
  {
    v33 = *v31;
    v115 = v33;
    v34 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 984, (unsigned __int8 *)v33, (uint64_t)&std::piecewise_construct, (__int128 **)&v115);
    std::string::operator=((std::string *)(v34 + 40), v33 + 1);
  }
  *(_QWORD *)&v98 = __p;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v98);
  if (*((_BYTE *)this + 664))
  {
    if (*((char *)this + 695) < 0)
      std::string::__init_copy_ctor_external(&v118, *((const std::string::value_type **)this + 84), *((_QWORD *)this + 85));
    else
      v118 = *(std::string *)((_BYTE *)this + 28);
    quasar::PhoneticMatchDecoder::loadConfidenceModel(this, (uint64_t)&v118);
    if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v118.__r_.__value_.__l.__data_);
  }
  quasar::SystemConfig::Version::Version(__p, 111, 0);
  result = quasar::SystemConfig::Version::operator<((_DWORD *)this + 8, __p);
  if ((_DWORD)result
    && ((*(_QWORD *)(*((_QWORD *)this + 115) + 152) - *(_QWORD *)(*((_QWORD *)this + 115) + 144)) & 0x3FFFFFFFCLL) != 0)
  {
    v134 = 0u;
    v135 = 0u;
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    v128 = 0u;
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    v122 = 0u;
    v123 = 0u;
    v120 = 0u;
    v121 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Phonetic match decoder is using subroutine feature but config version < 111");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  if (*((char *)this + 815) < 0)
  {
    if (!*((_QWORD *)this + 100))
      return result;
  }
  else if (!*((_BYTE *)this + 815))
  {
    return result;
  }
  std::ifstream::basic_ifstream(__p);
  v115 = 0;
  v116 = 0;
  v117 = 0;
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)__p + *((_QWORD *)__p[0] - 3)));
    v36 = std::locale::use_facet((const std::locale *)&v98, MEMORY[0x1E0DE4A90]);
    v37 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
    std::locale::~locale((std::locale *)&v98);
    v38 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, (uint64_t)&v115, v37);
    if ((*((_BYTE *)v38 + *(_QWORD *)(*v38 - 24) + 32) & 5) != 0)
      break;
    if (SHIBYTE(v117) < 0)
    {
      if (v116)
      {
LABEL_84:
        if (!*((_QWORD *)this + 107))
        {
          v113 = 0u;
          v114 = 0u;
          v111 = 0u;
          v112 = 0u;
          v109 = 0u;
          v110 = 0u;
          v107 = 0u;
          v108 = 0u;
          v105 = 0u;
          v106 = 0u;
          v103 = 0u;
          v104 = 0u;
          v101 = 0u;
          v102 = 0u;
          v99 = 0u;
          v100 = 0u;
          v98 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v98);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v98, (uint64_t)"Must specify an l-fst-file in order to lookup prons for placeholders", 68);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v98);
        }
        std::string::basic_string[abi:ne180100]<0>(&v98, "\t");
        quasar::split((uint64_t)&v115, (uint64_t *)&v98, 0, (uint64_t)v97);
        if (SBYTE7(v99) < 0)
          operator delete((void *)v98);
        v39 = v97[0];
        if (v97[1] - v97[0] != 48)
        {
          v113 = 0u;
          v114 = 0u;
          v111 = 0u;
          v112 = 0u;
          v109 = 0u;
          v110 = 0u;
          v107 = 0u;
          v108 = 0u;
          v105 = 0u;
          v106 = 0u;
          v103 = 0u;
          v104 = 0u;
          v101 = 0u;
          v102 = 0u;
          v99 = 0u;
          v100 = 0u;
          v98 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v98);
          v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v98, (uint64_t)"Placeholders not formatted correctly in ", 40);
          v70 = *((_BYTE *)this + 815);
          if (v70 >= 0)
            v71 = (char *)this + 792;
          else
            v71 = (char *)*((_QWORD *)this + 99);
          if (v70 >= 0)
            v72 = *((unsigned __int8 *)this + 815);
          else
            v72 = *((_QWORD *)this + 100);
          v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)v71, v72);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Expected each line contain a regex to match followed by a placeholder word, e.g. (.*)\\room-first<TAB>kitchen", 108);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v98);
        }
        if (*(char *)(v97[0] + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v96, *(const std::string::value_type **)v97[0], *(_QWORD *)(v97[0] + 8));
          v39 = v97[0];
        }
        else
        {
          v40 = *(_OWORD *)v97[0];
          v96.__r_.__value_.__r.__words[2] = *(_QWORD *)(v97[0] + 16);
          *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v40;
        }
        if (*(char *)(v39 + 47) < 0)
          std::string::__init_copy_ctor_external(&v95, *(const std::string::value_type **)(v39 + 24), *(_QWORD *)(v39 + 32));
        else
          v95 = *(std::string *)(v39 + 24);
        v41 = quasar::QsrTextSymbolTable::Find(*((_QWORD *)this + 105), (uint64_t)&v95);
        if (v41 == -1)
        {
          v113 = 0u;
          v114 = 0u;
          v111 = 0u;
          v112 = 0u;
          v109 = 0u;
          v110 = 0u;
          v107 = 0u;
          v108 = 0u;
          v105 = 0u;
          v106 = 0u;
          v103 = 0u;
          v104 = 0u;
          v101 = 0u;
          v102 = 0u;
          v99 = 0u;
          v100 = 0u;
          v98 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v98);
          v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v98, (uint64_t)"Replacement word '", 18);
          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v75 = &v95;
          else
            v75 = (std::string *)v95.__r_.__value_.__r.__words[0];
          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v95.__r_.__value_.__r.__words[2]);
          else
            size = v95.__r_.__value_.__l.__size_;
          v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)v75, size);
          v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"' in placeholder regex '", 24);
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v79 = &v96;
          else
            v79 = (std::string *)v96.__r_.__value_.__r.__words[0];
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v80 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
          else
            v80 = v96.__r_.__value_.__l.__size_;
          v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)v79, v80);
          v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"' is not present in '", 21);
          v83 = *((char *)this + 471);
          if (v83 >= 0)
            v84 = (char *)this + 448;
          else
            v84 = (char *)*((_QWORD *)this + 56);
          if (v83 >= 0)
            v85 = *((unsigned __int8 *)this + 471);
          else
            v85 = *((_QWORD *)this + 57);
          v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)v84, v85);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)"'", 1);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v98);
        }
        kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::GetSinglePron(*((_QWORD *)this + 107), v41, (char **)&v93);
        memset(&v92, 0, sizeof(v92));
        v43 = (int *)v93;
        v42 = v94;
        while (v43 != v42)
        {
          (*(void (**)(void **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)this + 117) + 32)
                                                                      + 88))(v90, *(_QWORD *)(*((_QWORD *)this + 117) + 32), *v43);
          end = v92.__end_;
          if (v92.__end_ >= v92.__end_cap_.__value_)
          {
            v46 = 0xAAAAAAAAAAAAAAABLL * (((char *)v92.__end_ - (char *)v92.__begin_) >> 3);
            v47 = v46 + 1;
            if (v46 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * (((char *)v92.__end_cap_.__value_ - (char *)v92.__begin_) >> 3) > v47)
              v47 = 0x5555555555555556 * (((char *)v92.__end_cap_.__value_ - (char *)v92.__begin_) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v92.__end_cap_.__value_ - (char *)v92.__begin_) >> 3) >= 0x555555555555555)
              v48 = 0xAAAAAAAAAAAAAAALL;
            else
              v48 = v47;
            *(_QWORD *)&v100 = &v92.__end_cap_;
            if (v48)
              v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v92.__end_cap_, v48);
            else
              v49 = 0;
            v50 = &v49[24 * v46];
            *(_QWORD *)&v98 = v49;
            *((_QWORD *)&v98 + 1) = v50;
            *((_QWORD *)&v99 + 1) = &v49[24 * v48];
            v51 = *(_OWORD *)v90;
            *((_QWORD *)v50 + 2) = v91;
            *(_OWORD *)v50 = v51;
            v90[1] = 0;
            v91 = 0;
            v90[0] = 0;
            *(_QWORD *)&v99 = v50 + 24;
            std::vector<std::string>::__swap_out_circular_buffer(&v92, (std::__split_buffer<std::string> *)&v98);
            v52 = v92.__end_;
            std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&v98);
            v92.__end_ = v52;
            if (SHIBYTE(v91) < 0)
              operator delete(v90[0]);
          }
          else
          {
            v45 = *(_OWORD *)v90;
            v92.__end_->__r_.__value_.__r.__words[2] = v91;
            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v45;
            v92.__end_ = end + 1;
          }
          ++v43;
        }
        std::allocate_shared[abi:ne180100]<quasar::URegularExpressionWrapper,std::allocator<quasar::URegularExpressionWrapper>,std::string &,void>(&v88);
        v90[0] = " ";
        v90[1] = (void *)1;
        quasar::join<std::vector<std::string>>((uint64_t *)&v92, (uint64_t *)v90);
        v87[0] = &v88;
        v53 = std::__hash_table<std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,std::__unordered_map_hasher<std::shared_ptr<quasar::URegularExpressionWrapper>,std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,std::hash<std::shared_ptr<quasar::URegularExpressionWrapper>>,std::equal_to<std::shared_ptr<quasar::URegularExpressionWrapper>>,true>,std::__unordered_map_equal<std::shared_ptr<quasar::URegularExpressionWrapper>,std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,std::equal_to<std::shared_ptr<quasar::URegularExpressionWrapper>>,std::hash<std::shared_ptr<quasar::URegularExpressionWrapper>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>>>::__emplace_unique_key_args<std::shared_ptr<quasar::URegularExpressionWrapper>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<quasar::URegularExpressionWrapper> const&>,std::tuple<>>((uint64_t)this + 1024, &v88, (uint64_t)&std::piecewise_construct, v87);
        v54 = (void **)(v53 + 4);
        if (*((char *)v53 + 55) < 0)
          operator delete(*v54);
        *(_OWORD *)v54 = v98;
        v54[2] = (void *)v99;
        if (quasar::gLogLevel >= 4)
        {
          v113 = 0u;
          v114 = 0u;
          v111 = 0u;
          v112 = 0u;
          v109 = 0u;
          v110 = 0u;
          v107 = 0u;
          v108 = 0u;
          v105 = 0u;
          v106 = 0u;
          v103 = 0u;
          v104 = 0u;
          v101 = 0u;
          v102 = 0u;
          v99 = 0u;
          v100 = 0u;
          v98 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v98);
          v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v98, (uint64_t)"Found pron=\"", 12);
          v87[0] = " ";
          v87[1] = (_QWORD *)1;
          quasar::join<std::vector<std::string>>((uint64_t *)&v92, (uint64_t *)v87);
          if (v91 >= 0)
            v56 = v90;
          else
            v56 = (void **)v90[0];
          if (v91 >= 0)
            v57 = HIBYTE(v91);
          else
            v57 = (uint64_t)v90[1];
          v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)v56, v57);
          v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"\" for word=", 11);
          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v60 = &v95;
          else
            v60 = (std::string *)v95.__r_.__value_.__r.__words[0];
          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v61 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
          else
            v61 = v95.__r_.__value_.__l.__size_;
          v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)v60, v61);
          v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)" in placeholder regex=", 22);
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v64 = &v96;
          else
            v64 = (std::string *)v96.__r_.__value_.__r.__words[0];
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v65 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
          else
            v65 = v96.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)v64, v65);
          if (SHIBYTE(v91) < 0)
            operator delete(v90[0]);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v98);
        }
        v66 = v89;
        if (v89)
        {
          p_shared_owners = (unint64_t *)&v89->__shared_owners_;
          do
            v68 = __ldaxr(p_shared_owners);
          while (__stlxr(v68 - 1, p_shared_owners));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
            std::__shared_weak_count::__release_weak(v66);
          }
        }
        *(_QWORD *)&v98 = &v92;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v98);
        if (v93)
        {
          v94 = (int *)v93;
          operator delete(v93);
        }
        if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v95.__r_.__value_.__l.__data_);
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v96.__r_.__value_.__l.__data_);
        *(_QWORD *)&v98 = v97;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v98);
      }
    }
    else if (HIBYTE(v117))
    {
      goto LABEL_84;
    }
  }
  if (SHIBYTE(v117) < 0)
    operator delete(v115);
  __p[0] = *(void **)MEMORY[0x1E0DE4F40];
  *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1AF44CA70](&v120);
  std::istream::~istream();
  return MEMORY[0x1AF44D094](v136);
}

void sub_1AD9632AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  void **v39;
  char v40;
  void *v41[40];
  char v42;
  uint64_t v43;

  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a38);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  a16 = &a19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a30 < 0)
    operator delete(a25);
  if (v40 < 0)
    operator delete(v39);
  v39 = v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v39);
  if (v42 < 0)
    operator delete(v41[38]);
  std::ifstream::~ifstream(&v43);
  _Unwind_Resume(a1);
}

void sub_1AD9632CC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0)
    operator delete(__p);
  JUMPOUT(0x1AD96334CLL);
}

void sub_1AD9632F8()
{
  JUMPOUT(0x1AD9633D8);
}

void sub_1AD963300(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0)
    operator delete(__p);
  JUMPOUT(0x1AD963408);
}

void sub_1AD963318(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1AD963420);
}

void sub_1AD963328()
{
  JUMPOUT(0x1AD963420);
}

void sub_1AD963330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *__p, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,...)
{
  va_list va;

  va_start(va, a29);
  if (a13 < 0)
    operator delete(__p);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)va);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a6);
  JUMPOUT(0x1AD9633B8);
}

void sub_1AD963358(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,std::locale a35)
{
  std::locale::~locale(&a35);
  JUMPOUT(0x1AD963408);
}

void sub_1AD963368()
{
  JUMPOUT(0x1AD963408);
}

void sub_1AD963370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void **a35)
{
  a35 = (void **)&STACK[0x220];
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&a35);
  JUMPOUT(0x1AD963420);
}

void sub_1AD963388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *__p, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t *__pa, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,uint64_t a27,void *a28,uint64_t a29,std::__split_buffer<std::wstring> *a30)
{
  if (SHIBYTE(a21) < 0)
    operator delete(__pa);
  __pa = &a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  if (a25)
  {
    a26 = a25;
    operator delete(a25);
  }
  if (SHIBYTE(a30) < 0)
    operator delete(a28);
  JUMPOUT(0x1AD9633E8);
}

void quasar::PhoneticMatchDecoder::loadConfidenceModel(_DWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t FeatureMap;
  int v6;
  std::locale::id *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  unsigned __int8 v10;
  _QWORD *v11;
  int64_t size;
  std::string *p_str;
  _BYTE *v14;
  std::string *v15;
  _BYTE *v16;
  std::string::size_type v17;
  int64_t v18;
  std::string *v19;
  _BYTE *v20;
  size_t v21;
  std::string *v22;
  _BYTE *v23;
  std::string::size_type v24;
  size_t v25;
  std::string *v26;
  unint64_t v27;
  char *v28;
  quasar::PhoneticMatchConfFeatures *v29;
  double v30;
  void *v31;
  float v32;
  std::string *v33;
  std::string::size_type v34;
  int v35;
  _QWORD *v37;
  unsigned __int8 *v38;
  quasar::PhoneticMatchConfFeatures *v39;
  _QWORD *v40;
  _QWORD *v41;
  std::string *v42;
  std::string::size_type v43;
  _QWORD *v44;
  _QWORD *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  std::string *v52;
  std::string::size_type v53;
  _QWORD *v54;
  float *v55;
  std::string v56[11];
  std::string v57;
  _BYTE v58[15];
  char v59;
  std::string __str;
  char v61[9];

  v4 = a1 + 176;
  FeatureMap = quasar::PhoneticMatchConfFeatures::GetFeatureMap((quasar::PhoneticMatchConfFeatures *)a1);
  std::vector<float>::resize((uint64_t)v4, *(_QWORD *)(FeatureMap + 24), &quasar::kConfidenceFeatureDefaultLow);
  v55 = (float *)a1;
  a1[174] = -1027080192;
  memset(&__str, 0, sizeof(__str));
  v59 = 0;
  kaldi::Input::Input(v58, a2, &v59);
  v6 = 0;
  v7 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    v8 = (_QWORD *)kaldi::Input::Stream((kaldi::Input *)v58);
    std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(*v8 - 24)));
    v9 = std::locale::use_facet((const std::locale *)v56, v7);
    v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
    std::locale::~locale((std::locale *)v56);
    v11 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, (uint64_t)&__str, v10);
    if ((*((_BYTE *)v11 + *(_QWORD *)(*v11 - 24) + 32) & 5) != 0)
      break;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      size = __str.__r_.__value_.__l.__size_;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_str = &__str;
    else
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    v14 = (char *)p_str + size;
    if (size >= 1)
    {
      v15 = p_str;
      do
      {
        v16 = memchr(v15, 32, size);
        if (!v16)
          break;
        if (*v16 == 32)
          goto LABEL_15;
        v15 = (std::string *)(v16 + 1);
        size = v14 - (_BYTE *)v15;
      }
      while (v14 - (_BYTE *)v15 > 0);
    }
    v16 = v14;
LABEL_15:
    if (v16 == v14)
      v17 = -1;
    else
      v17 = v16 - (_BYTE *)p_str;
    std::string::basic_string(&v57, &__str, 0, v17, (std::allocator<char> *)v56);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      v18 = __str.__r_.__value_.__l.__size_;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &__str;
    else
      v19 = (std::string *)__str.__r_.__value_.__r.__words[0];
    v20 = (char *)v19 + v18;
    if (v18 < 1)
    {
      v24 = 0;
    }
    else
    {
      v21 = v18;
      v22 = v19;
      do
      {
        v23 = memchr(v22, 32, v21);
        if (!v23)
          break;
        if (*v23 == 32)
          goto LABEL_30;
        v22 = (std::string *)(v23 + 1);
        v21 = v20 - (_BYTE *)v22;
      }
      while (v20 - (_BYTE *)v22 > 0);
      v23 = (char *)v19 + v18;
LABEL_30:
      if (v23 == v20)
        v24 = 0;
      else
        v24 = v23 - (_BYTE *)v19 + 1;
      v25 = v18;
      v26 = v19;
      do
      {
        v27 = (unint64_t)memchr(v26, 32, v25);
        if (!v27)
          break;
        if (*(_BYTE *)v27 == 32)
          goto LABEL_40;
        v26 = (std::string *)(v27 + 1);
        v25 = v20 - (_BYTE *)v26;
      }
      while (v20 - (_BYTE *)v26 > 0);
    }
    v27 = (unint64_t)v19 + v18;
LABEL_40:
    v28 = (char *)v19 + ~v27;
    if ((_BYTE *)v27 == v20)
      v28 = 0;
    std::string::basic_string(v56, &__str, v24, (std::string::size_type)&v28[v18], (std::allocator<char> *)v61);
    if (SHIBYTE(v56[0].__r_.__value_.__r.__words[2]) < 0)
    {
      v31 = (void *)v56[0].__r_.__value_.__r.__words[0];
      v30 = atof(v56[0].__r_.__value_.__l.__data_);
      operator delete(v31);
    }
    else
    {
      v30 = atof((const char *)v56);
    }
    v32 = v30;
    if ((*((_BYTE *)&v57.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (v57.__r_.__value_.__l.__size_ == 8 && *(_QWORD *)v57.__r_.__value_.__l.__data_ == 0x746E6174736E6F63)
        goto LABEL_68;
      if (v57.__r_.__value_.__l.__size_ != 9)
        goto LABEL_57;
      v33 = (std::string *)v57.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (HIBYTE(v57.__r_.__value_.__r.__words[2]) == 8)
      {
        if (v57.__r_.__value_.__r.__words[0] != 0x746E6174736E6F63)
          goto LABEL_57;
        goto LABEL_68;
      }
      if (HIBYTE(v57.__r_.__value_.__r.__words[2]) != 9)
        goto LABEL_57;
      v33 = &v57;
    }
    v34 = v33->__r_.__value_.__r.__words[0];
    v35 = v33->__r_.__value_.__s.__data_[8];
    if (v34 != 0x7065637265746E69 || v35 != 116)
    {
LABEL_57:
      v37 = (_QWORD *)quasar::PhoneticMatchConfFeatures::GetFeatureMap(v29);
      v38 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v37, (unsigned __int8 *)&v57);
      v39 = (quasar::PhoneticMatchConfFeatures *)quasar::PhoneticMatchConfFeatures::GetFeatureMap((quasar::PhoneticMatchConfFeatures *)v38);
      if (!v38)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v56);
        v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"Feature ", 8);
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v52 = &v57;
        else
          v52 = (std::string *)v57.__r_.__value_.__r.__words[0];
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v53 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
        else
          v53 = v57.__r_.__value_.__l.__size_;
        v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v52, v53);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)" is not in the model definition.", 32);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v56);
      }
      v40 = (_QWORD *)quasar::PhoneticMatchConfFeatures::GetFeatureMap(v39);
      *(float *)(*v4
               + 4
               * *((unsigned int *)std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v40, (unsigned __int8 *)&v57)+ 10)) = v32;
      if (kaldi::g_kaldi_verbose_level >= 2)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v56, 2);
        v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"Setting ", 8);
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v42 = &v57;
        else
          v42 = (std::string *)v57.__r_.__value_.__r.__words[0];
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v43 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
        else
          v43 = v57.__r_.__value_.__l.__size_;
        v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v42, v43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)" to ", 4);
        std::ostream::operator<<();
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v56);
      }
      ++v6;
      goto LABEL_70;
    }
LABEL_68:
    v55[174] = v32;
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v56);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"Setting constant term/intercept to ", 35);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v56);
    }
LABEL_70:
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v56);
    v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"Read in Confidence Model ", 25);
    v46 = *(char *)(a2 + 23);
    if (v46 >= 0)
      v47 = a2;
    else
      v47 = *(_QWORD *)a2;
    if (v46 >= 0)
      v48 = *(unsigned __int8 *)(a2 + 23);
    else
      v48 = *(_QWORD *)(a2 + 8);
    v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, v47, v48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)" added ", 7);
    v50 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" features", 9);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v56);
  }
  kaldi::Input::~Input((kaldi::Input *)v58);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1AD963960(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va);
  JUMPOUT(0x1AD963998);
}

void sub_1AD963980(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  JUMPOUT(0x1AD963998);
}

void sub_1AD963994(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 153) < 0)
    operator delete(*(void **)(v1 - 176));
  kaldi::Input::~Input((kaldi::Input *)(v1 - 152));
  if (*(char *)(v1 - 113) < 0)
    operator delete(*(void **)(v1 - 136));
  _Unwind_Resume(a1);
}

void sub_1AD9639AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12)
{
  uint64_t v12;

  std::locale::~locale(&a12);
  kaldi::Input::~Input((kaldi::Input *)(v12 - 152));
  if (*(char *)(v12 - 113) < 0)
    operator delete(*(void **)(v12 - 136));
  _Unwind_Resume(a1);
}

_QWORD *kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::GetSinglePron@<X0>(uint64_t a1@<X1>, int a2@<W2>, char **a3@<X8>)
{
  int v6;
  int v7;
  _QWORD *v8;
  unint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  __n128 v12;
  int *v13;
  int v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  int v25;
  int v26;
  _QWORD *result;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  void (**v33)(void **, uint64_t, uint64_t *, __n128);
  uint64_t v34;
  void *v35;
  _QWORD *v36;
  int v37;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v35);
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v33);
  v6 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddState((uint64_t)&v35);
  v7 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddState((uint64_t)&v35);
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)&v35);
  v8 = v36;
  *((_DWORD *)v36 + 22) = v6;
  v9 = (*(uint64_t (**)(_QWORD *))(*v8 + 24))(v8);
  v8[1] = v9 & 0xCCFFFFF0007 | (((v9 >> 35) & 1) << 37) | v8[1] & 4;
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetFinal((uint64_t)&v35, v7, 0.0);
  LODWORD(v29) = a2;
  HIDWORD(v29) = a2;
  LODWORD(v30) = 0;
  HIDWORD(v30) = v7;
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)&v35);
  fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(v36, v6, (float *)&v29);
  LOBYTE(v29) = 1;
  HIDWORD(v29) = 0;
  fst::Compose<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, (uint64_t)&v35, (uint64_t)&v33, (uint64_t)&v29);
  v10 = (_DWORD *)v34;
  v11 = *(int *)(v34 + 88);
  LODWORD(v29) = **(_DWORD **)(*(_QWORD *)(v34 + 64) + 8 * v11);
  v37 = 2139095040;
  for (v12.n128_u32[0] = v29; *(float *)&v29 == INFINITY; v12.n128_u32[0] = v29)
  {
    v32 = 0;
    v33[17]((void **)&v33, v11, &v29, v12);
    if (v29)
      v13 = (int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 32))(v29);
    else
      v13 = (int *)(v30 + 16 * v32);
    v14 = *v13;
    if (*v13)
    {
      v16 = a3[1];
      v15 = (unint64_t)a3[2];
      if ((unint64_t)v16 >= v15)
      {
        v18 = *a3;
        v19 = (v16 - *a3) >> 2;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v21 = v15 - (_QWORD)v18;
        if (v21 >> 1 > v20)
          v20 = v21 >> 1;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
          v22 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        if (v22)
        {
          v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a3 + 2), v22);
          v18 = *a3;
          v16 = a3[1];
          v14 = *v13;
        }
        else
        {
          v23 = 0;
        }
        v24 = &v23[4 * v19];
        *(_DWORD *)v24 = v14;
        v17 = v24 + 4;
        while (v16 != v18)
        {
          v25 = *((_DWORD *)v16 - 1);
          v16 -= 4;
          *((_DWORD *)v24 - 1) = v25;
          v24 -= 4;
        }
        *a3 = v24;
        a3[1] = v17;
        a3[2] = &v23[4 * v22];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *(_DWORD *)v16 = v14;
        v17 = v16 + 4;
      }
      a3[1] = v17;
    }
    v11 = v13[3];
    if (v29)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    }
    else if (v31)
    {
      --*v31;
    }
    v10 = (_DWORD *)v34;
    LODWORD(v29) = **(_DWORD **)(*(_QWORD *)(v34 + 64) + 8 * (int)v11);
    v37 = 2139095040;
  }
  v33 = (void (**)(void **, uint64_t, uint64_t *, __n128))&unk_1E5D256C0;
  v26 = v10[14] - 1;
  v10[14] = v26;
  if (!v26)
    (*(void (**)(_DWORD *, __n128))(*(_QWORD *)v10 + 8))(v10, v12);
  v35 = &unk_1E5D256C0;
  result = v36;
  if (v36)
  {
    v28 = *((_DWORD *)v36 + 14) - 1;
    *((_DWORD *)v36 + 14) = v28;
    if (!v28)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_1AD963CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _DWORD *a15, uint64_t a16, _DWORD *a17)
{
  uint64_t v17;
  int v19;
  int v20;
  void *v21;

  if (a15)
  {
    v19 = a15[14] - 1;
    a15[14] = v19;
    if (!v19)
      (*(void (**)(_DWORD *))(*(_QWORD *)a15 + 8))(a15);
  }
  if (a17)
  {
    v20 = a17[14] - 1;
    a17[14] = v20;
    if (!v20)
      (*(void (**)(_DWORD *))(*(_QWORD *)a17 + 8))(a17);
  }
  v21 = *(void **)v17;
  if (*(_QWORD *)v17)
  {
    *(_QWORD *)(v17 + 8) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::PhoneticMatchConfFeatures::GetFeatureMap(quasar::PhoneticMatchConfFeatures *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&quasar::PhoneticMatchConfFeatures::GetFeatureMap(void)::flag);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&quasar::PhoneticMatchConfFeatures::GetFeatureMap(void)::flag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<quasar::PhoneticMatchConfFeatures::GetFeatureMap(void)::{lambda(void)#1} &&>>);
  }
  return quasar::PhoneticMatchConfFeatures::GetFeatureMap(void)::m_heap;
}

void quasar::PhoneticMatchDecoder::joinTokens(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  std::string::size_type size;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::string *v22;
  unint64_t v23;
  std::string v24;
  std::string __str;
  void **v26;

  memset(&__str, 0, sizeof(__str));
  memset(&v24, 0, sizeof(v24));
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v7 = a2[1];
  if (*a2 != v7)
  {
    v8 = *a2 + 48;
    do
    {
      size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v24.__r_.__value_.__l.__size_;
      if (size)
        std::string::append(&v24, " ");
      v10 = *(char *)(v8 + 23);
      if (v10 >= 0)
        v11 = (const std::string::value_type *)v8;
      else
        v11 = *(const std::string::value_type **)v8;
      if (v10 >= 0)
        v12 = *(unsigned __int8 *)(v8 + 23);
      else
        v12 = *(_QWORD *)(v8 + 8);
      std::string::append(&v24, v11, v12);
      v13 = v8 + 176;
      v8 += 224;
    }
    while (v13 != v7);
  }
  v14 = *a3;
  v15 = a3[1];
  while (v14 != v15)
  {
    if (*(char *)(v14 + 23) < 0)
    {
      if (!*(_QWORD *)(v14 + 8))
        goto LABEL_27;
    }
    else if (!*(_BYTE *)(v14 + 23))
    {
      goto LABEL_27;
    }
    v16 = v22;
    if ((unint64_t)v22 >= v23)
    {
      v18 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v21, (__int128 *)v14);
    }
    else
    {
      if ((*(_BYTE *)(v14 + 23) & 0x80) != 0)
      {
        std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)v14, *(_QWORD *)(v14 + 8));
      }
      else
      {
        v17 = *(_OWORD *)v14;
        v22->__r_.__value_.__r.__words[2] = *(_QWORD *)(v14 + 16);
        *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
      }
      v18 = v16 + 1;
    }
    v22 = v18;
LABEL_27:
    v14 += 224;
  }
  kaldi::JoinVectorToString(&v21, "~w00", 1, (__int128 *)&__str);
  std::string::operator=((std::string *)a4, &__str);
  v19 = *a3;
  if (*a3 == a3[1])
  {
    *(_DWORD *)(a4 + 28) = 0;
    *(_QWORD *)(a4 + 36) = 0;
    MEMORY[0x1AF44C914](a4 + 48, "");
  }
  else
  {
    v20 = a2[1];
    *(_DWORD *)(a4 + 28) = *(_DWORD *)(*a2 + 28);
    *(_QWORD *)(a4 + 32) = *(_QWORD *)(v20 - 192);
    *(_DWORD *)(a4 + 40) = *(_DWORD *)(v19 + 40);
    std::string::operator=((std::string *)(a4 + 48), &v24);
  }
  v26 = (void **)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v26);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1AD963FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  *(_QWORD *)(v23 - 56) = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 56));
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

BOOL quasar::lowestGraphCostSort(uint64_t a1, uint64_t a2)
{
  return *(float *)(a1 + 4) < *(float *)(a2 + 4);
}

void quasar::PhoneticMatchDecoder::FetchResults(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  int v8;
  __n128 v9;
  __int128 *v10;
  __int128 *v11;
  unsigned __int8 **v12;
  __int128 *v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  _QWORD v17[3];
  std::string __p;
  _DWORD v19[2];
  uint64_t v20[3];
  _QWORD v21[3];
  _QWORD v22[3];
  __int128 v23;
  _BYTE v24[55];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  void **v30[3];

  v29 = 0;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  memset(v24, 0, sizeof(v24));
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
  memset(v20, 0, sizeof(v20));
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v20, 0, 0, 0);
  memset(v21, 0, sizeof(v21));
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v21, *((uint64_t *)&v26 + 1), v27, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v27 - *((_QWORD *)&v26 + 1)) >> 5));
  memset(v22, 0, sizeof(v22));
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v22, v28, *((uint64_t *)&v28 + 1), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&v28 + 1) - v28) >> 5));
  v16 = v23;
  memset(v17, 0, sizeof(v17));
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__init_with_size[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan*,quasar::PhoneticMatchAlignmentSpan*>(v17, *(uint64_t **)v24, *(uint64_t **)&v24[8], 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)&v24[8] - *(_QWORD *)v24) >> 3));
  if ((v24[47] & 0x80000000) != 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)&v24[24], *(std::string::size_type *)&v24[32]);
  else
    __p = *(std::string *)&v24[24];
  v19[0] = *(_DWORD *)&v24[48];
  *(_DWORD *)((char *)v19 + 3) = *(_DWORD *)&v24[51];
  quasar::PhoneticMatchDecoder::FetchResultsImpl(a1, a2, a3, v8, 0, v20, &v16, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v30[0] = (void **)v17;
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100](v30);
  v30[0] = (void **)v22;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v30);
  v30[0] = (void **)v21;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v30);
  v30[0] = (void **)v20;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v30);
  v10 = (__int128 *)*a4;
  v11 = (__int128 *)a4[1];
  if ((__int128 *)*a4 == v11)
  {
    v13 = (__int128 *)*a4;
  }
  else
  {
    v12 = (unsigned __int8 **)(a1 + 760);
    do
    {
      quasar::PhoneticMatchResult::cleanupPartialSpans((uint64_t)v10, v12);
      v10 = (__int128 *)((char *)v10 + 72);
    }
    while (v10 != v11);
    v13 = (__int128 *)*a4;
    v10 = (__int128 *)a4[1];
  }
  v14 = 126 - 2 * __clz(0x8E38E38E38E38E39 * (((char *)v10 - (char *)v13) >> 3));
  v30[0] = (void **)quasar::lowestGraphCostSort;
  if (v10 == v13)
    v15 = 0;
  else
    v15 = v14;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*,false>(v13, v10, (uint64_t (**)(__int128 *, __int128 *))v30, v15, 1, v9);
  if ((v24[47] & 0x80000000) != 0)
    operator delete(*(void **)&v24[24]);
  v30[0] = (void **)v24;
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100](v30);
  *(_QWORD *)&v23 = &v28;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  *(_QWORD *)&v23 = (char *)&v26 + 8;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  *(_QWORD *)&v23 = &v25;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
}

void sub_1AD964338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)(v28 - 104) = v27;
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 104));
  quasar::PhoneticMatchAlignmentSpan::~PhoneticMatchAlignmentSpan(&a18);
  quasar::PhoneticMatchResult::~PhoneticMatchResult(&a27);
  quasar::PhoneticMatchAlignmentSpan::~PhoneticMatchAlignmentSpan((void **)(v28 - 176));
  _Unwind_Resume(a1);
}

void quasar::PhoneticMatchDecoder::FetchResultsImpl(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, int a5, uint64_t *a6, __int128 *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v11;
  unint64_t v14;
  unint64_t v15;
  int *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *matched;
  uint64_t v22;
  std::string *v23;
  std::string *v24;
  std::string *v25;
  int v26;
  std::string::pointer data;
  std::string *v28;
  void **v29;
  std::string::size_type v30;
  double v31;
  int v32;
  unsigned int v33;
  std::string *v34;
  std::string *v35;
  std::string *v36;
  char v37;
  std::string *v38;
  std::string *v39;
  std::string::pointer v40;
  void **v41;
  std::string::size_type v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  unsigned __int8 **v54;
  std::string *v55;
  _DWORD *v57;
  unint64_t v61;
  int *v62;
  uint64_t v63;
  __int128 v64;
  _QWORD v65[3];
  std::string v66;
  _DWORD v67[2];
  _QWORD v68[3];
  _QWORD v69[3];
  _QWORD v70[3];
  void *v71[2];
  __int128 v72;
  __int128 v73;
  void *__p[2];
  _OWORD v75[2];
  void *v76[2];
  _OWORD v77[2];
  void *v78[2];
  __int128 v79;
  void *v80[2];
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  unsigned __int8 v90;
  int v91;
  int v92;
  void *v93[2];
  unsigned __int8 v94;
  uint64_t v95;
  void *v96;
  char v97;
  uint64_t v98;
  void *v99;
  char v100;
  void *v101;
  char v102;
  __int128 v103;
  uint64_t *v104;
  uint64_t *v105;
  unint64_t v106;
  std::string v107;
  _BYTE v108[7];
  std::string *v109;
  std::string *v110;
  unint64_t v111;
  std::string *v112;
  std::string *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 64) + 8 * a4) + 24);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 64) + 8 * a4) + 32) - v8;
  if (v9)
  {
    v11 = a7;
    v14 = v9 / 20;
    v55 = (std::string *)((char *)a7 + 40);
    v57 = a7 + 4;
    v54 = (unsigned __int8 **)(a1 + 760);
    v53 = (uint64_t)(a8 + 2);
    if (v14 <= 1)
      v14 = 1;
    v15 = v14 - 1;
    v16 = (int *)(v8 + 16);
    while (1)
    {
      v61 = v15;
      v62 = v16;
      v17 = *((_QWORD *)v16 - 2);
      v18 = *(v16 - 2);
      v63 = *v16;
      v109 = 0;
      v110 = 0;
      v111 = 0;
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v109, *a6, a6[1], 0x6DB6DB6DB6DB6DB7 * ((a6[1] - *a6) >> 5));
      v112 = 0;
      v113 = 0;
      v114 = 0;
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v112, a6[3], a6[4], 0x6DB6DB6DB6DB6DB7 * ((a6[4] - a6[3]) >> 5));
      v115 = 0;
      v116 = 0;
      v117 = 0;
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v115, a6[6], a6[7], 0x6DB6DB6DB6DB6DB7 * ((a6[7] - a6[6]) >> 5));
      v103 = *v11;
      v105 = 0;
      v106 = 0;
      v104 = 0;
      std::vector<quasar::PhoneticMatchAlignmentSpan>::__init_with_size[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan*,quasar::PhoneticMatchAlignmentSpan*>(&v104, *((uint64_t **)v11 + 2), *((uint64_t **)v11 + 3), 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)v11 + 3) - *((_QWORD *)v11 + 2)) >> 3));
      if (*((char *)v11 + 63) < 0)
        std::string::__init_copy_ctor_external(&v107, *((const std::string::value_type **)v11 + 5), *((_QWORD *)v11 + 6));
      else
        v107 = *v55;
      *(_DWORD *)v108 = *v57;
      *(_DWORD *)&v108[3] = *(_DWORD *)((char *)v57 + 3);
      quasar::PhoneticMatchDecoder::getAlignmentPhoneToken(a2, a5, v17 > 0xFF, (uint64_t)&v88);
      if (v17 >= 0x100 && (_BYTE)v17 && HIDWORD(v17))
      {
        v19 = v90;
        if ((v90 & 0x80u) != 0)
          v19 = v89;
        if (v19)
        {
          if (!quasar::PhoneticMatchAlignmentSpan::empty((quasar::PhoneticMatchAlignmentSpan *)&v109))
          {
            v20 = v105;
            if ((unint64_t)v105 >= v106)
            {
              matched = (uint64_t *)std::vector<quasar::PhoneticMatchAlignmentSpan>::__push_back_slow_path<quasar::PhoneticMatchAlignmentSpan const&>((uint64_t *)&v104, (uint64_t *)&v109);
            }
            else
            {
              std::allocator<quasar::PhoneticMatchAlignmentSpan>::construct[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan,quasar::PhoneticMatchAlignmentSpan const&>((uint64_t)&v106, v105, (uint64_t *)&v109);
              matched = v20 + 9;
            }
            v105 = matched;
          }
          quasar::PhoneticMatchAlignmentSpan::clear((quasar::PhoneticMatchAlignmentSpan *)&v109);
        }
      }
      else if (v17 < 0x100)
      {
        goto LABEL_45;
      }
      v22 = v90;
      if ((v90 & 0x80u) != 0)
        v22 = v89;
      if (v22)
      {
        v23 = v110;
        if ((unint64_t)v110 < v111)
        {
          quasar::Token::Token(v110, (const quasar::Token *)&v88);
          goto LABEL_27;
        }
LABEL_33:
        v24 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)&v109, (const quasar::Token *)&v88);
        goto LABEL_34;
      }
      v23 = v109;
      v25 = v110;
      if (v109 == v110)
      {
        if ((unint64_t)v109 >= v111)
          goto LABEL_33;
        quasar::Token::Token(v109, (const quasar::Token *)&v88);
LABEL_27:
        v24 = (std::string *)((char *)v23 + 224);
LABEL_34:
        v110 = v24;
        goto LABEL_45;
      }
      v26 = v92;
      LODWORD(v110[-8].__r_.__value_.__l.__data_) = v92;
      HIDWORD(v25[-8].__r_.__value_.__r.__words[0]) = v26;
      if (v25[-7].__r_.__value_.__s.__data_[15] < 0)
        data = v25[-7].__r_.__value_.__l.__data_;
      else
        data = (std::string::pointer)v25[-7].__r_.__value_.__s.__data_[15];
      v28 = (std::string *)((char *)v25 - 176);
      if (data)
        std::string::append((std::string *)((char *)v25 - 176), " ");
      if ((v94 & 0x80u) == 0)
        v29 = v93;
      else
        v29 = (void **)v93[0];
      if ((v94 & 0x80u) == 0)
        v30 = v94;
      else
        v30 = (std::string::size_type)v93[1];
      std::string::append(v28, (const std::string::value_type *)v29, v30);
LABEL_45:
      if (!HIDWORD(v17))
      {
        v33 = a5;
        if ((_BYTE)v17)
        {
          v34 = v113;
          if (v112 == v113)
          {
            quasar::Token::Token((quasar::Token *)v71);
            HIDWORD(v72) = v91;
            v35 = v113;
            if ((unint64_t)v113 >= v114)
            {
              v36 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)&v112, (const quasar::Token *)v71);
            }
            else
            {
              quasar::Token::Token(v113, (const quasar::Token *)v71);
              v36 = (std::string *)((char *)v35 + 224);
            }
            v113 = v36;
            if (SBYTE7(v81) < 0)
              operator delete(v80[0]);
            if (SBYTE7(v79) < 0)
              operator delete(v78[0]);
            *(_QWORD *)&v86 = (char *)v77 + 8;
            std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v86);
            if (SBYTE7(v77[0]) < 0)
              operator delete(v76[0]);
            *(_QWORD *)&v86 = (char *)v75 + 8;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v86);
            if (SBYTE7(v75[0]) < 0)
              operator delete(__p[0]);
            if (SBYTE7(v72) < 0)
              operator delete(v71[0]);
            v34 = v113;
          }
          if (v34[-7].__r_.__value_.__s.__data_[15] < 0)
            v40 = v34[-7].__r_.__value_.__l.__data_;
          else
            v40 = (std::string::pointer)v34[-7].__r_.__value_.__s.__data_[15];
          if (v40)
            std::string::append((std::string *)((char *)v34 - 176), " ");
          (*(void (**)(void **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 936) + 32)
                                                                      + 88))(v71, *(_QWORD *)(*(_QWORD *)(a1 + 936) + 32), v17);
          if ((SBYTE7(v72) & 0x80u) == 0)
            v41 = v71;
          else
            v41 = (void **)v71[0];
          if ((SBYTE7(v72) & 0x80u) == 0)
            v42 = BYTE7(v72);
          else
            v42 = (std::string::size_type)v71[1];
          std::string::append((std::string *)((char *)v34 - 176), (const std::string::value_type *)v41, v42);
          if (SBYTE7(v72) < 0)
            operator delete(v71[0]);
          v43 = v92;
          LODWORD(v34[-8].__r_.__value_.__l.__data_) = v92;
          HIDWORD(v34[-8].__r_.__value_.__r.__words[0]) = v43;
          v33 = a5;
        }
        goto LABEL_101;
      }
      v31 = quasar::Token::Token((quasar::Token *)v71);
      v32 = v91;
      DWORD1(v73) = v92;
      HIDWORD(v72) = v91;
      LODWORD(v73) = v92;
      if ((_BYTE)v17)
      {
        (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, double))(**(_QWORD **)(*(_QWORD *)(a1 + 936)
                                                                                             + 32)
                                                                               + 88))(&v86, *(_QWORD *)(*(_QWORD *)(a1 + 936) + 32), v17, v31);
        v33 = a5;
        if (SBYTE7(v75[0]) < 0)
          operator delete(__p[0]);
        *(_OWORD *)__p = v86;
        *(_QWORD *)&v75[0] = v87;
        v32 = v91;
      }
      else
      {
        v33 = a5;
      }
      HIDWORD(v72) = v32;
      BYTE13(v73) = 0;
      quasar::QsrTextSymbolTable::Find(*(quasar::QsrTextSymbolTable **)(a1 + 840), &v86);
      if (SBYTE7(v72) < 0)
        operator delete(v71[0]);
      *(_QWORD *)&v72 = v87;
      *(_OWORD *)v71 = v86;
      if (SHIBYTE(v87) < 0)
      {
        if (!v71[1])
        {
LABEL_61:
          v37 = 0;
          goto LABEL_62;
        }
      }
      else if (!HIBYTE(v87))
      {
        goto LABEL_61;
      }
      v37 = 1;
LABEL_62:
      BYTE12(v73) = v37;
      v38 = v113;
      if ((unint64_t)v113 >= v114)
      {
        v39 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)&v112, (const quasar::Token *)v71);
      }
      else
      {
        quasar::Token::Token(v113, (const quasar::Token *)v71);
        v39 = (std::string *)((char *)v38 + 224);
      }
      v113 = v39;
      if (SBYTE7(v81) < 0)
        operator delete(v80[0]);
      if (SBYTE7(v79) < 0)
        operator delete(v78[0]);
      *(_QWORD *)&v86 = (char *)v77 + 8;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v86);
      if (SBYTE7(v77[0]) < 0)
        operator delete(v76[0]);
      *(_QWORD *)&v86 = (char *)v75 + 8;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v86);
      if (SBYTE7(v75[0]) < 0)
        operator delete(__p[0]);
      if (SBYTE7(v72) < 0)
        operator delete(v71[0]);
LABEL_101:
      if (v17 <= 0xFF)
        v44 = v33;
      else
        v44 = v33 + 1;
      v45 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 64) + 8 * v63);
      v46 = *(_QWORD *)(v45 + 24);
      v47 = *(_QWORD *)(v45 + 32);
      if (v47 == v46)
      {
        if (!quasar::PhoneticMatchAlignmentSpan::empty((quasar::PhoneticMatchAlignmentSpan *)&v109))
        {
          v48 = v105;
          if ((unint64_t)v105 >= v106)
          {
            v49 = (uint64_t *)std::vector<quasar::PhoneticMatchAlignmentSpan>::__push_back_slow_path<quasar::PhoneticMatchAlignmentSpan const&>((uint64_t *)&v104, (uint64_t *)&v109);
          }
          else
          {
            std::allocator<quasar::PhoneticMatchAlignmentSpan>::construct[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan,quasar::PhoneticMatchAlignmentSpan const&>((uint64_t)&v106, v105, (uint64_t *)&v109);
            v49 = v48 + 9;
          }
          v105 = v49;
        }
        kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)a1, (std::string *)v71);
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v107.__r_.__value_.__l.__data_);
        *(_OWORD *)&v107.__r_.__value_.__l.__data_ = *(_OWORD *)v71;
        v107.__r_.__value_.__r.__words[2] = v72;
        LODWORD(v103) = v18;
        if (quasar::gLogLevel >= 4)
        {
          v84 = 0u;
          v85 = 0u;
          v82 = 0u;
          v83 = 0u;
          *(_OWORD *)v80 = 0u;
          v81 = 0u;
          *(_OWORD *)v78 = 0u;
          v79 = 0u;
          memset(v77, 0, sizeof(v77));
          *(_OWORD *)v76 = 0u;
          *(_OWORD *)__p = 0u;
          memset(v75, 0, sizeof(v75));
          v72 = 0u;
          v73 = 0u;
          *(_OWORD *)v71 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v71);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"numWildcardWordMatches=", 23);
          quasar::PhoneticMatchResult::numWildcardWordMatches((uint64_t)&v103, v54);
          std::ostream::operator<<();
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v71);
        }
        v108[5] = (int)quasar::PhoneticMatchResult::numWildcardWordMatches((uint64_t)&v103, v54) > 0;
        v50 = a8[1];
        if (v50 >= a8[2])
        {
          v51 = std::vector<quasar::PhoneticMatchResult>::__push_back_slow_path<quasar::PhoneticMatchResult const&>(a8, (uint64_t)&v103);
        }
        else
        {
          std::allocator<quasar::PhoneticMatchResult>::construct[abi:ne180100]<quasar::PhoneticMatchResult,quasar::PhoneticMatchResult const&>(v53, a8[1], (uint64_t)&v103);
          v51 = v50 + 72;
          a8[1] = v50 + 72;
        }
        a8[1] = v51;
      }
      else
      {
        memset(v68, 0, sizeof(v68));
        std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v68, (uint64_t)v109, (uint64_t)v110, 0x6DB6DB6DB6DB6DB7 * (((char *)v110 - (char *)v109) >> 5));
        memset(v69, 0, sizeof(v69));
        std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v69, (uint64_t)v112, (uint64_t)v113, 0x6DB6DB6DB6DB6DB7 * (((char *)v113 - (char *)v112) >> 5));
        memset(v70, 0, sizeof(v70));
        std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v70, v115, v116, 0x6DB6DB6DB6DB6DB7 * ((v116 - v115) >> 5));
        v64 = v103;
        memset(v65, 0, sizeof(v65));
        std::vector<quasar::PhoneticMatchAlignmentSpan>::__init_with_size[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan*,quasar::PhoneticMatchAlignmentSpan*>(v65, v104, v105, 0x8E38E38E38E38E39 * (v105 - v104));
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v66, v107.__r_.__value_.__l.__data_, v107.__r_.__value_.__l.__size_);
        else
          v66 = v107;
        v67[0] = *(_DWORD *)v108;
        *(_DWORD *)((char *)v67 + 3) = *(_DWORD *)&v108[3];
        quasar::PhoneticMatchDecoder::FetchResultsImpl(a1, a2, a3, v63, v44, v68, &v64, a8);
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v66.__r_.__value_.__l.__data_);
        v71[0] = v65;
        std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
        v71[0] = v70;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
        v71[0] = v69;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
        v71[0] = v68;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
      }
      if (v102 < 0)
        operator delete(v101);
      if (v100 < 0)
        operator delete(v99);
      v71[0] = &v98;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
      if (v97 < 0)
        operator delete(v96);
      v71[0] = &v95;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
      if ((char)v94 < 0)
        operator delete(v93[0]);
      if ((char)v90 < 0)
        operator delete(v88);
      if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v107.__r_.__value_.__l.__data_);
      v71[0] = &v104;
      std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
      v71[0] = &v115;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
      v71[0] = &v112;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
      v71[0] = &v109;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
      v52 = v47 == v46;
      v11 = a7;
      if (!v52)
      {
        v16 = v62 + 5;
        v15 = v61 - 1;
        if (v61)
          continue;
      }
      return;
    }
  }
}

void sub_1AD964E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p)
{
  uint64_t v53;

  quasar::Token::~Token(&__p);
  quasar::Token::~Token((void **)&STACK[0x290]);
  quasar::PhoneticMatchResult::~PhoneticMatchResult((void **)(v53 - 256));
  quasar::PhoneticMatchAlignmentSpan::~PhoneticMatchAlignmentSpan((void **)(v53 - 184));
  _Unwind_Resume(a1);
}

void quasar::PhoneticMatchResult::~PhoneticMatchResult(void **this)
{
  void **v2;

  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  v2 = this + 2;
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void quasar::PhoneticMatchAlignmentSpan::~PhoneticMatchAlignmentSpan(void **this)
{
  void **v2;

  v2 = this + 6;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 3;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void quasar::PhoneticMatchDecoder::getAlignmentPhoneToken(uint64_t *a1@<X1>, int a2@<W2>, char a3@<W3>, uint64_t a4@<X8>)
{
  double v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  float v12;
  __int128 v13;
  __int128 v14;
  int v15;
  __int128 v16;
  __int128 v17;
  void *v18[2];
  uint64_t v19;
  _BYTE v20[22];
  void *v21[2];
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  void *v25[2];
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  void *v29[2];
  uint64_t v30;
  int v31;
  __int16 v32;
  void *__p[2];
  uint64_t v34;
  __int128 v35;
  int v36;
  void **v37;

  v8 = quasar::Token::Token((quasar::Token *)v18);
  v9 = *a1;
  if ((a3 & 1) == 0)
  {
    v10 = a1[1];
LABEL_6:
    if (v9 == v10)
    {
      *(_QWORD *)&v20[8] = 0;
      *(_DWORD *)&v20[4] = 0;
      *(_OWORD *)a4 = *(_OWORD *)v18;
      *(_QWORD *)(a4 + 16) = v19;
      v18[0] = 0;
      v18[1] = 0;
      v19 = 0;
      *(_OWORD *)(a4 + 24) = *(_OWORD *)v20;
      *(_QWORD *)(a4 + 38) = *(_QWORD *)&v20[14];
      *(_QWORD *)(a4 + 64) = v22;
      *(_OWORD *)(a4 + 48) = *(_OWORD *)v21;
LABEL_15:
      v21[0] = 0;
      v21[1] = 0;
      *(_OWORD *)(a4 + 72) = v23;
      *(_QWORD *)(a4 + 88) = v24;
      v22 = 0;
      v23 = 0uLL;
      v24 = 0;
      v13 = *(_OWORD *)v25;
      *(_QWORD *)(a4 + 112) = v26;
      *(_OWORD *)(a4 + 96) = v13;
      v25[0] = 0;
      v25[1] = 0;
      *(_OWORD *)(a4 + 120) = v27;
      *(_QWORD *)(a4 + 136) = v28;
      v26 = 0;
      v27 = 0uLL;
      v28 = 0;
      v14 = *(_OWORD *)v29;
      *(_QWORD *)(a4 + 160) = v30;
      *(_OWORD *)(a4 + 144) = v14;
      v29[0] = 0;
      v29[1] = 0;
      v15 = v31;
      *(_WORD *)(a4 + 172) = v32;
      *(_DWORD *)(a4 + 168) = v15;
      v16 = *(_OWORD *)__p;
      *(_QWORD *)(a4 + 192) = v34;
      *(_OWORD *)(a4 + 176) = v16;
      v30 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v34 = 0;
      v17 = v35;
      *(_DWORD *)(a4 + 216) = v36;
      *(_OWORD *)(a4 + 200) = v17;
      goto LABEL_16;
    }
    if (a2)
    {
      if (0x6DB6DB6DB6DB6DB7 * ((v10 - v9) >> 5) <= (unint64_t)a2)
      {
        v12 = (float)*(unsigned int *)(v10 - 192);
        goto LABEL_14;
      }
      v11 = (double)(*(_DWORD *)(v9 + 224 * a2 + 28) + *(_DWORD *)(v9 + 224 * a2 - 192));
    }
    else
    {
      LODWORD(v8) = *(_DWORD *)(v9 + 28);
      v11 = (double)*(unint64_t *)&v8;
    }
    v12 = v11 * 0.5;
LABEL_14:
    *(_DWORD *)&v20[8] = v12;
    *(_DWORD *)&v20[12] = v12;
    *(_DWORD *)&v20[4] = v12;
    *(_OWORD *)a4 = *(_OWORD *)v18;
    *(_QWORD *)(a4 + 16) = v19;
    v18[0] = 0;
    v18[1] = 0;
    v19 = 0;
    *(_OWORD *)(a4 + 24) = *(_OWORD *)v20;
    *(_QWORD *)(a4 + 38) = *(_QWORD *)&v20[14];
    *(_OWORD *)(a4 + 48) = *(_OWORD *)v21;
    *(_QWORD *)(a4 + 64) = v22;
    goto LABEL_15;
  }
  v10 = a1[1];
  if (0x6DB6DB6DB6DB6DB7 * ((v10 - v9) >> 5) < (unint64_t)a2)
    goto LABEL_6;
  quasar::Token::Token((std::string *)a4, (const quasar::Token *)(v9 + 224 * a2));
  if (SHIBYTE(v34) < 0)
    operator delete(__p[0]);
LABEL_16:
  if (SHIBYTE(v30) < 0)
    operator delete(v29[0]);
  v37 = (void **)&v27;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v37);
  if (SHIBYTE(v26) < 0)
    operator delete(v25[0]);
  v37 = (void **)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v37);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  if (SHIBYTE(v19) < 0)
    operator delete(v18[0]);
}

void sub_1AD9652B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  quasar::Token::~Token((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::Token>::push_back[abi:ne180100](uint64_t *a1, const quasar::Token *a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    result = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(a1, a2);
  }
  else
  {
    quasar::Token::Token((std::string *)a1[1], a2);
    result = v3 + 224;
    a1[1] = v3 + 224;
  }
  a1[1] = result;
  return result;
}

void sub_1AD965310(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void quasar::PhoneticMatchDecoder::applyPlaceholders(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *i;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  _OWORD v20[17];
  std::string v21;
  std::string v22;
  uint64_t v23;
  void *v24;
  char v25;
  uint64_t v26;
  void *v27;
  char v28;
  void *__p;
  char v30;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      quasar::Token::Token(&v21, (const quasar::Token *)v3);
      for (i = *(uint64_t **)(a1 + 1040); i; i = (uint64_t *)*i)
      {
        if (quasar::URegularExpressionWrapper::isMatch((URegularExpression **)i[2], v3))
        {
          if (quasar::gLogLevel >= 4)
          {
            memset(v20, 0, sizeof(v20));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
            v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Matched placeholder for word=", 29);
            v8 = *(char *)(v3 + 23);
            if (v8 >= 0)
              v9 = v3;
            else
              v9 = *(_QWORD *)v3;
            if (v8 >= 0)
              v10 = *(unsigned __int8 *)(v3 + 23);
            else
              v10 = *(_QWORD *)(v3 + 8);
            v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
            v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" replacing with pron=\"", 22);
            v13 = *((char *)i + 55);
            if (v13 >= 0)
              v14 = (uint64_t)(i + 4);
            else
              v14 = i[4];
            if (v13 >= 0)
              v15 = *((unsigned __int8 *)i + 55);
            else
              v15 = i[5];
            v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\"", 1);
            quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v20);
          }
          std::string::operator=(&v22, (const std::string *)(i + 4));
        }
      }
      v17 = a3[1];
      if (v17 >= a3[2])
      {
        v18 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(a3, (const quasar::Token *)&v21);
      }
      else
      {
        quasar::Token::Token((std::string *)a3[1], (const quasar::Token *)&v21);
        v18 = v17 + 224;
        a3[1] = v17 + 224;
      }
      a3[1] = v18;
      if (v30 < 0)
        operator delete(__p);
      if (v28 < 0)
        operator delete(v27);
      *(_QWORD *)&v20[0] = &v26;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v20);
      if (v25 < 0)
        operator delete(v24);
      *(_QWORD *)&v20[0] = &v23;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v20);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v22.__r_.__value_.__l.__data_);
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v21.__r_.__value_.__l.__data_);
      v3 += 224;
    }
    while (v3 != v4);
  }
}

void sub_1AD96553C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46)
{
  quasar::Token::~Token(&a46);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

void quasar::PhoneticMatchDecoder::getPhoneSegmentation(uint64_t a1, __int128 **a2, float *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t i;
  uint64_t v10;
  __int128 *v11;
  float v12;
  unsigned int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  unint64_t v24;
  uint64_t v25;
  float v26;
  unint64_t v27;
  float *v28;
  float *v29;
  float *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  float *v36;
  int v37;
  _QWORD *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v48;
  __int128 *v49;
  void *v50[2];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  std::string __p;
  int v68;
  int v69;
  int v70;
  int v71;
  std::string v72;
  uint64_t v73;
  void *v74;
  char v75;
  uint64_t v76;
  void *v77;
  char v78;
  void *v79;
  char v80;
  std::string __str;
  uint64_t v82;
  uint64_t v83;

  v10 = *a4;
  for (i = a4[1]; i != v10; quasar::Token::~Token((void **)(i - 224)))
    ;
  a4[1] = v10;
  v11 = *a2;
  v49 = a2[1];
  if (v49 != *a2)
  {
    v12 = *a3 / (float)(unint64_t)(0x6DB6DB6DB6DB6DB7 * (((char *)v49 - (char *)v11) >> 5));
    while (1)
    {
      v13 = *((_DWORD *)v11 + 7);
      quasar::copyAndTrim((uint64_t)(v11 + 3), (std::string *)v50);
      std::string::basic_string[abi:ne180100]<0>(&__p, " ");
      quasar::split((uint64_t)v50, (uint64_t *)&__p, 0, (uint64_t)&v82);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SBYTE7(v51) < 0)
        operator delete(v50[0]);
      v14 = *((_DWORD *)v11 + 9);
      v15 = *((_DWORD *)v11 + 7);
      v17 = v82;
      v16 = v83;
      if (*((char *)v11 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
        v20 = v82;
        v19 = v83;
      }
      else
      {
        v18 = *v11;
        __str.__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v18;
        v19 = v83;
        v20 = v82;
      }
      if (v20 != v19)
        break;
LABEL_63:
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v50[0] = &v82;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v50);
      v11 += 14;
      if (v11 == v49)
        return;
    }
    v21 = (float)v13;
    v22 = (float)(v14 - v15) / (float)(0xAAAAAAAAAAAAAAABLL * ((v16 - v17) >> 3));
    while (1)
    {
      if (*(char *)(v20 + 23) < 0)
      {
        if (*(_QWORD *)(v20 + 8))
        {
LABEL_17:
          quasar::Token::Token((quasar::Token *)&__p);
          std::string::operator=(&v72, (const std::string *)v20);
          v71 = *((_DWORD *)v11 + 10);
          std::string::operator=(&__p, &__str);
          v23 = v22 + v21;
          v70 = (int)(float)(v22 + v21);
          v68 = (int)v21;
          v69 = v70;
          v24 = a4[1];
          if (v24 >= a4[2])
          {
            v25 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(a4, (const quasar::Token *)&__p);
          }
          else
          {
            quasar::Token::Token((std::string *)a4[1], (const quasar::Token *)&__p);
            v25 = v24 + 224;
            a4[1] = v24 + 224;
          }
          a4[1] = v25;
          v26 = v12 / (float)(0xAAAAAAAAAAAAAAABLL * ((v83 - v82) >> 3));
          v28 = *(float **)(a5 + 8);
          v27 = *(_QWORD *)(a5 + 16);
          if ((unint64_t)v28 >= v27)
          {
            v30 = *(float **)a5;
            v31 = ((uint64_t)v28 - *(_QWORD *)a5) >> 2;
            v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v33 = v27 - (_QWORD)v30;
            if (v33 >> 1 > v32)
              v32 = v33 >> 1;
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
              v34 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v34 = v32;
            if (v34)
            {
              v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a5 + 16, v34);
              v30 = *(float **)a5;
              v28 = *(float **)(a5 + 8);
            }
            else
            {
              v35 = 0;
            }
            v36 = (float *)&v35[4 * v31];
            *v36 = v26;
            v29 = v36 + 1;
            while (v28 != v30)
            {
              v37 = *((_DWORD *)v28-- - 1);
              *((_DWORD *)v36-- - 1) = v37;
            }
            *(_QWORD *)a5 = v36;
            *(_QWORD *)(a5 + 8) = v29;
            *(_QWORD *)(a5 + 16) = &v35[4 * v34];
            if (v30)
              operator delete(v30);
          }
          else
          {
            *v28 = v26;
            v29 = v28 + 1;
          }
          *(_QWORD *)(a5 + 8) = v29;
          if (quasar::gLogLevel >= 4)
          {
            v65 = 0u;
            v66 = 0u;
            v63 = 0u;
            v64 = 0u;
            v61 = 0u;
            v62 = 0u;
            v59 = 0u;
            v60 = 0u;
            v57 = 0u;
            v58 = 0u;
            v55 = 0u;
            v56 = 0u;
            v53 = 0u;
            v54 = 0u;
            v51 = 0u;
            v52 = 0u;
            *(_OWORD *)v50 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v50);
            v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"phone=", 6);
            v39 = *(char *)(v20 + 23);
            if (v39 >= 0)
              v40 = v20;
            else
              v40 = *(_QWORD *)v20;
            if (v39 >= 0)
              v41 = *(unsigned __int8 *)(v20 + 23);
            else
              v41 = *(_QWORD *)(v20 + 8);
            v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, v40, v41);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" start=", 7);
            v43 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)" end=", 5);
            v44 = (_QWORD *)std::ostream::operator<<();
            v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)" token=", 7);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_p = &__p;
            else
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              size = __p.__r_.__value_.__l.__size_;
            v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)p_p, size);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)" confidence=", 12);
            std::ostream::operator<<();
            quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v50);
          }
          MEMORY[0x1AF44C914](&__str, "");
          if (v80 < 0)
            operator delete(v79);
          if (v78 < 0)
            operator delete(v77);
          v50[0] = &v76;
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v50);
          if (v75 < 0)
            operator delete(v74);
          v50[0] = &v73;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v50);
          if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v72.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_62;
        }
      }
      else if (*(_BYTE *)(v20 + 23))
      {
        goto LABEL_17;
      }
      v23 = v21;
LABEL_62:
      v20 += 24;
      v21 = v23;
      if (v20 == v19)
        goto LABEL_63;
    }
  }
}

void sub_1AD965A34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  uint64_t v55;

  __p = (void *)(v55 - 160);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t quasar::PhoneticMatchDecoder::doPm(uint64_t a1, unint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _BYTE *a6, float *a7, float *a8, float a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int v29;
  quasar::StopWatch *v30;
  clockid_t v31;
  clockid_t v32;
  clockid_t v33;
  double v34;
  float v35;
  _QWORD *v36;
  clockid_t v37;
  clockid_t v38;
  clockid_t v39;
  clockid_t v40;
  _DWORD *v41;
  double v42;
  float v43;
  char v44;
  uint64_t v45;
  _QWORD *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  quasar::PhoneticMatchResult *v56;
  quasar::PhoneticMatchResult *v57;
  char *v58;
  char *v59;
  float v60;
  int v61;
  uint64_t v62;
  int v63;
  float v65;
  uint64_t v66;
  int v67;
  float *v70;
  uint64_t *v71;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  void *v90;
  uint64_t v91;
  _BYTE v92[24];
  int v93;
  double v94;
  double v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  _BYTE v113[25];
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD *v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  _BYTE v124[24];
  int v125;
  double v126;
  double v127;
  char *v128;
  char *v129;
  char *v130;

  v128 = 0;
  v129 = 0;
  v130 = 0;
  v15 = *a5;
  v16 = a5[1];
  if (v16 != *a5)
  {
    do
    {
      v16 -= 72;
      std::allocator<quasar::PhoneticMatchResult>::destroy[abi:ne180100]((uint64_t)(a5 + 2), v16);
    }
    while (v16 != v15);
  }
  v70 = a8;
  v71 = a5;
  a5[1] = v15;
  *a7 = 0.0;
  *a8 = 0.0;
  v17 = *a3;
  v18 = a3[1];
  if (*a3 == v18)
  {
LABEL_27:
    v30 = quasar::StopWatch::StopWatch((quasar::StopWatch *)v124, (clockid_t)a2);
    quasar::StopWatch::resume(v30, v31);
    if (v129 == v128)
    {
      if (quasar::gLogLevel >= 4)
      {
        v111 = 0u;
        v112 = 0u;
        v109 = 0u;
        v110 = 0u;
        v107 = 0u;
        v108 = 0u;
        v105 = 0u;
        v106 = 0u;
        v103 = 0u;
        v104 = 0u;
        v101 = 0u;
        v102 = 0u;
        v99 = 0u;
        v100 = 0u;
        v97 = 0u;
        v98 = 0u;
        v96 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v96);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96, (uint64_t)"Number of phones is 0", 21);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v96);
      }
      v45 = 0;
      goto LABEL_101;
    }
    fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v122);
    if ((kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::Decode(*(_QWORD *)(a1 + 920), (uint64_t *)&v128, a4, (uint64_t)&v122) & 1) == 0)
    {
      if (quasar::gLogLevel >= 4)
      {
        v111 = 0u;
        v112 = 0u;
        v109 = 0u;
        v110 = 0u;
        v107 = 0u;
        v108 = 0u;
        v105 = 0u;
        v106 = 0u;
        v103 = 0u;
        v104 = 0u;
        v101 = 0u;
        v102 = 0u;
        v99 = 0u;
        v100 = 0u;
        v97 = 0u;
        v98 = 0u;
        v96 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v96);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96, (uint64_t)"PM Failed.", 10);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v96);
      }
      v45 = 0;
      goto LABEL_98;
    }
    quasar::StopWatch::pause((quasar::StopWatch *)v124, v32);
    v34 = v127;
    if (v125)
      v34 = v34 + kaldi::Timer::GetSeconds((kaldi::Timer *)5, v33) - v126;
    v35 = v34;
    *a7 = v35;
    if (quasar::gLogLevel >= 4)
    {
      v111 = 0u;
      v112 = 0u;
      v109 = 0u;
      v110 = 0u;
      v107 = 0u;
      v108 = 0u;
      v105 = 0u;
      v106 = 0u;
      v103 = 0u;
      v104 = 0u;
      v101 = 0u;
      v102 = 0u;
      v99 = 0u;
      v100 = 0u;
      v97 = 0u;
      v98 = 0u;
      v96 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v96);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96, (uint64_t)"PM ELAPSED: ", 12);
      v36 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" num_phones=", 12);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v96);
    }
    v120 = 0;
    v119 = 0;
    v121 = 0;
    quasar::PhoneticMatchDecoder::FetchResults(a1, a3, (uint64_t)&v122, (uint64_t *)&v119);
    *a6 = 0;
    if (!*(_QWORD *)(a1 + 856))
    {
      if (&v119 != (_DWORD **)v71)
        std::vector<quasar::PhoneticMatchResult>::__assign_with_size[abi:ne180100]<quasar::PhoneticMatchResult*,quasar::PhoneticMatchResult*>((uint64_t)v71, (uint64_t)v119, v120, 0x8E38E38E38E38E39 * ((v120 - (uint64_t)v119) >> 3));
LABEL_77:
      v56 = (quasar::PhoneticMatchResult *)*v71;
      v57 = (quasar::PhoneticMatchResult *)v71[1];
      if (v57 != (quasar::PhoneticMatchResult *)*v71)
      {
        v58 = v128;
        v59 = v129;
        if (v128 == v129)
        {
          v60 = 0.0;
        }
        else
        {
          v60 = 0.0;
          do
          {
            v61 = *(_DWORD *)v58;
            if (quasar::gLogLevel >= 5)
            {
              v111 = 0u;
              v112 = 0u;
              v109 = 0u;
              v110 = 0u;
              v107 = 0u;
              v108 = 0u;
              v105 = 0u;
              v106 = 0u;
              v103 = 0u;
              v104 = 0u;
              v101 = 0u;
              v102 = 0u;
              v99 = 0u;
              v100 = 0u;
              v97 = 0u;
              v98 = 0u;
              v96 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v96);
              (*(uint64_t (**)(_QWORD, const char *))(**(_QWORD **)(*(_QWORD *)(a1 + 936) + 32) + 104))(*(_QWORD *)(*(_QWORD *)(a1 + 936) + 32), "~");
              std::ostream::operator<<();
              quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v96);
            }
            v62 = *(_QWORD *)(a1 + 944);
            v63 = (*(uint64_t (**)(_QWORD, const char *))(**(_QWORD **)(*(_QWORD *)(a1 + 936) + 32) + 104))(*(_QWORD *)(*(_QWORD *)(a1 + 936) + 32), "~");
            if (*(_DWORD *)(v62 + 48) != v63 || v61 == 0)
              v65 = -0.0;
            else
              v65 = 0.0;
            v60 = v60 + (float)(*(float *)(*(_QWORD *)(*(_QWORD *)(v62 + 8) + 24 * v61) + 4 * v63) + v65);
            v58 += 4;
          }
          while (v58 != v59);
          v56 = (quasar::PhoneticMatchResult *)*v71;
          v57 = (quasar::PhoneticMatchResult *)v71[1];
        }
        for (; v56 != v57; v56 = (quasar::PhoneticMatchResult *)((char *)v56 + 72))
          quasar::PhoneticMatchResult::computeScores(v56, -1227133513 * ((unint64_t)(a3[1] - *a3) >> 5), *(unsigned __int8 *)(a1 + 656), (float **)(a1 + 704), *(unsigned __int8 *)(a1 + 664), a9, v60, *(float *)(a1 + 652), *(float *)(a1 + 644), *(float *)(a1 + 640), *(float *)(a1 + 696));
        v45 = 1;
        goto LABEL_97;
      }
      if (quasar::gLogLevel >= 4)
      {
        v111 = 0u;
        v112 = 0u;
        v109 = 0u;
        v110 = 0u;
        v107 = 0u;
        v108 = 0u;
        v105 = 0u;
        v106 = 0u;
        v103 = 0u;
        v104 = 0u;
        v101 = 0u;
        v102 = 0u;
        v99 = 0u;
        v100 = 0u;
        v97 = 0u;
        v98 = 0u;
        v96 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v96);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96, (uint64_t)"PM Failed to get any results from lattice", 41);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v96);
      }
LABEL_92:
      v45 = 0;
LABEL_97:
      *(_QWORD *)&v96 = &v119;
      std::vector<quasar::PhoneticMatchResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
LABEL_98:
      v122 = &unk_1E5D25580;
      v66 = v123;
      if (v123)
      {
        v67 = *(_DWORD *)(v123 + 56) - 1;
        *(_DWORD *)(v123 + 56) = v67;
        if (!v67)
          (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
      }
LABEL_101:
      *(_QWORD *)&v96 = v124;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
      goto LABEL_102;
    }
    v117 = 0;
    v116 = 0;
    v118 = 0;
    fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v114);
    *(_OWORD *)&v113[9] = *(_OWORD *)(a1 + 897);
    *(_OWORD *)v113 = *(_OWORD *)(a1 + 888);
    *(_DWORD *)&v113[20] = (int)*(float *)(a1 + 728);
    kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::MakeLGFromResultLattice(*(_QWORD *)(a1 + 920), *(_QWORD *)(a1 + 856), (uint64_t)&v122, (uint64_t)&v114);
    kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::SymbolDecoder((uint64_t)&v96, (uint64_t)&v114, *(_QWORD *)(a1 + 936), (__int128 *)v113);
    quasar::StopWatch::StopWatch((quasar::StopWatch *)v92, v37);
    quasar::StopWatch::resume((quasar::StopWatch *)v92, v38);
    fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v90);
    if (kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::Decode((uint64_t)&v96, (uint64_t *)&v128, a4, (uint64_t)&v90))
    {
      quasar::StopWatch::pause((quasar::StopWatch *)v92, v39);
      quasar::PhoneticMatchDecoder::FetchResults(a1, a3, (uint64_t)&v90, &v116);
      v40 = v116;
      if (v117 != v116)
      {
        if (v117 - v116 == 72)
        {
          v41 = v119;
          if (v120 - (_QWORD)v119 == 72)
          {
            if (&v116 != v71)
            {
              std::vector<quasar::PhoneticMatchResult>::__assign_with_size[abi:ne180100]<quasar::PhoneticMatchResult*,quasar::PhoneticMatchResult*>((uint64_t)v71, v116, v117, 1uLL);
              v41 = v119;
            }
            *(_DWORD *)*v71 = *v41;
            v42 = v95;
            if (v93)
              v42 = v42 + kaldi::Timer::GetSeconds((kaldi::Timer *)5, v40) - v94;
            v43 = v42;
            *v70 = v43;
            if (quasar::gLogLevel >= 4)
            {
              v88 = 0u;
              v89 = 0u;
              v86 = 0u;
              v87 = 0u;
              v84 = 0u;
              v85 = 0u;
              v82 = 0u;
              v83 = 0u;
              v80 = 0u;
              v81 = 0u;
              v78 = 0u;
              v79 = 0u;
              v76 = 0u;
              v77 = 0u;
              v74 = 0u;
              v75 = 0u;
              v73 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v73);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v73, (uint64_t)"PM ALIGN ELAPSED: ", 18);
              std::ostream::operator<<();
              quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v73);
            }
            v44 = 1;
            *a6 = 1;
LABEL_70:
            v90 = &unk_1E5D25580;
            v52 = v91;
            if (v91)
            {
              v53 = *(_DWORD *)(v91 + 56) - 1;
              *(_DWORD *)(v91 + 56) = v53;
              if (!v53)
                (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
            }
            *(_QWORD *)&v73 = v92;
            std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
            kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::~SymbolDecoder((uint64_t *)&v96);
            v114 = &unk_1E5D256C0;
            v54 = v115;
            if (v115)
            {
              v55 = *(_DWORD *)(v115 + 56) - 1;
              *(_DWORD *)(v115 + 56) = v55;
              if (!v55)
                (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
            }
            *(_QWORD *)&v96 = &v116;
            std::vector<quasar::PhoneticMatchResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
            if ((v44 & 1) == 0)
              goto LABEL_92;
            goto LABEL_77;
          }
        }
        if (quasar::gLogLevel >= 4)
        {
          v88 = 0u;
          v89 = 0u;
          v86 = 0u;
          v87 = 0u;
          v84 = 0u;
          v85 = 0u;
          v82 = 0u;
          v83 = 0u;
          v80 = 0u;
          v81 = 0u;
          v78 = 0u;
          v79 = 0u;
          v76 = 0u;
          v77 = 0u;
          v74 = 0u;
          v75 = 0u;
          v73 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v73);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v73, (uint64_t)"Mismatched number of non-aligned and aligned phonetic match result ", 67);
          v51 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)" != ", 4);
          std::ostream::operator<<();
          goto LABEL_68;
        }
LABEL_69:
        v44 = 0;
        goto LABEL_70;
      }
      if (quasar::gLogLevel < 4)
        goto LABEL_69;
      v88 = 0u;
      v89 = 0u;
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v73 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v73);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v73, (uint64_t)"PM Alignment failed - no results", 32);
    }
    else
    {
      if (quasar::gLogLevel < 4)
        goto LABEL_69;
      v88 = 0u;
      v89 = 0u;
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v73 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v73);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v73, (uint64_t)"PM Alignment failed", 19);
    }
LABEL_68:
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v73);
    goto LABEL_69;
  }
  while ((*(char *)(v17 + 71) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v17 + 71))
      goto LABEL_8;
LABEL_26:
    v17 += 224;
    if (v17 == v18)
      goto LABEL_27;
  }
  if (!*(_QWORD *)(v17 + 56))
    goto LABEL_26;
LABEL_8:
  v19 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 936) + 40) + 96))(*(_QWORD *)(*(_QWORD *)(a1 + 936) + 40), v17 + 48);
  v20 = v19;
  if (v19 != -1)
  {
    v21 = v129;
    if (v129 >= v130)
    {
      v23 = v128;
      v24 = (v129 - v128) >> 2;
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v26 = v130 - v128;
      if ((v130 - v128) >> 1 > v25)
        v25 = v26 >> 1;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
        a2 = 0x3FFFFFFFFFFFFFFFLL;
      else
        a2 = v25;
      if (a2)
      {
        v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v130, a2);
        v23 = v128;
        v21 = v129;
      }
      else
      {
        v27 = 0;
      }
      v28 = &v27[4 * v24];
      *(_DWORD *)v28 = v20;
      v22 = v28 + 4;
      while (v21 != v23)
      {
        v29 = *((_DWORD *)v21 - 1);
        v21 -= 4;
        *((_DWORD *)v28 - 1) = v29;
        v28 -= 4;
      }
      v128 = v28;
      v129 = v22;
      v130 = &v27[4 * a2];
      if (v23)
        operator delete(v23);
    }
    else
    {
      *(_DWORD *)v129 = v19;
      v22 = v21 + 4;
    }
    v129 = v22;
    goto LABEL_26;
  }
  if (quasar::gLogLevel >= 4)
  {
    v111 = 0u;
    v112 = 0u;
    v109 = 0u;
    v110 = 0u;
    v107 = 0u;
    v108 = 0u;
    v105 = 0u;
    v106 = 0u;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    v98 = 0u;
    v96 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v96);
    v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96, (uint64_t)"Phone '", 7);
    v47 = *(char *)(v17 + 71);
    if (v47 >= 0)
      v48 = v17 + 48;
    else
      v48 = *(_QWORD *)(v17 + 48);
    if (v47 >= 0)
      v49 = *(unsigned __int8 *)(v17 + 71);
    else
      v49 = *(_QWORD *)(v17 + 56);
    v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, v48, v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"' is not a valid phone symbol", 29);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v96);
  }
  v45 = 0;
LABEL_102:
  if (v128)
  {
    v129 = v128;
    operator delete(v128);
  }
  return v45;
}

void sub_1AD96654C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void **a61)
{
  uint64_t v61;
  uint64_t v63;
  int v64;
  _DWORD *v65;
  int v66;
  _DWORD *v67;
  int v68;
  void *v69;

  a48 = &unk_1E5D25580;
  v63 = a49;
  if (a49)
  {
    v64 = *(_DWORD *)(a49 + 56) - 1;
    *(_DWORD *)(a49 + 56) = v64;
    if (!v64)
      (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  }
  a13 = (void **)&a50;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&a13);
  kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::~SymbolDecoder((uint64_t *)&a61);
  STACK[0x2E8] = (unint64_t)&unk_1E5D256C0;
  v65 = (_DWORD *)STACK[0x2F0];
  if (STACK[0x2F0])
  {
    v66 = v65[14] - 1;
    v65[14] = v66;
    if (!v66)
      (*(void (**)(_DWORD *))(*(_QWORD *)v65 + 8))(v65);
  }
  a61 = (void **)&STACK[0x2F8];
  std::vector<quasar::PhoneticMatchResult>::__destroy_vector::operator()[abi:ne180100](&a61);
  a61 = (void **)&STACK[0x310];
  std::vector<quasar::PhoneticMatchResult>::__destroy_vector::operator()[abi:ne180100](&a61);
  *(_QWORD *)(v61 - 248) = &unk_1E5D25580;
  v67 = *(_DWORD **)(v61 - 240);
  if (v67)
  {
    v68 = v67[14] - 1;
    v67[14] = v68;
    if (!v68)
      (*(void (**)(_DWORD *))(*(_QWORD *)v67 + 8))(v67);
  }
  a61 = (void **)(v61 - 232);
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&a61);
  v69 = *(void **)(v61 - 144);
  if (v69)
  {
    *(_QWORD *)(v61 - 136) = v69;
    operator delete(v69);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::Decode(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  fst *v18;
  _QWORD *v19;
  fst *v20;
  _QWORD *v21;
  fst *v23;
  _QWORD *v24;
  fst *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *__p[2];
  char v29;
  char v30;

  v8 = *(_QWORD *)(a1 + 56);
  if (v8 != -1)
  {
    v9 = *(_QWORD *)(a1 + 72);
    do
    {
      v10 = (uint64_t *)(v9 + 16 * v8);
      v10[1] = 0;
      v8 = *v10;
    }
    while (v8 != -1);
  }
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = -1;
  if (v11)
  {
    v12 = *(_QWORD *)(a1 + 96);
    do
    {
      v13 = v11;
      v11 = *(_QWORD *)(v11 + 8);
      *(_QWORD *)(v13 + 8) = v12;
      v12 = v13;
    }
    while (v11);
    *(_QWORD *)(a1 + 96) = v13;
  }
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 32) = 0;
  v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 24))(*(_QWORD *)(a1 + 128));
  if (v14 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    v23 = fst::LogMessage::LogMessage((fst *)&v30, (uint64_t)__p);
    v24 = (_QWORD *)fst::cerr(v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Cannot perform phonetic match since LG FST is empty", 51);
  }
  else
  {
    if (a2[1] - *a2 == a3[1] - *a3)
    {
      kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::insertTracebackLink((_QWORD *)a1, v14, 0, 0, -1, 0, 0, 0.0);
      kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::ProcessNonemitting((uint64_t *)a1, *(float *)(a1 + 168));
      v15 = *a2;
      if (a2[1] != *a2)
      {
        v16 = 0;
        do
        {
          if (kaldi::g_kaldi_verbose_level >= 5)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Frame ", 6);
            std::ostream::operator<<();
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
            v15 = *a2;
          }
          v17 = kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::ProcessEmitting(a1, *(_DWORD *)(v15 + 4 * v16), *(float *)(*a3 + 4 * v16));
          kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::ProcessNonemitting((uint64_t *)a1, v17);
          ++v16;
          v15 = *a2;
        }
        while (v16 != (a2[1] - *a2) >> 2);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v18 = fst::LogMessage::LogMessage((fst *)&v30, (uint64_t)__p);
      v19 = (_QWORD *)fst::cerr(v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Allocated max tokens ", 21);
      std::ostream::operator<<();
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v30);
      if (v29 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v20 = fst::LogMessage::LogMessage((fst *)&v30, (uint64_t)__p);
      v21 = (_QWORD *)fst::cerr(v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Max tokens ", 11);
      std::ostream::operator<<();
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v30);
      if (v29 < 0)
        operator delete(__p[0]);
      return kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::GetBestPath(a1, a4);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    v25 = fst::LogMessage::LogMessage((fst *)&v30, (uint64_t)__p);
    v26 = (_QWORD *)fst::cerr(v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Phone features size of ", 23);
    v27 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" != wildcard LM costs size of ", 30);
    std::ostream::operator<<();
  }
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v30);
  if (v29 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1AD966A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1AD966A7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a9);
  JUMPOUT(0x1AD966A98);
}

void sub_1AD966A90(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v15;
  void *v16;
  fst *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  const char *v21;
  size_t v22;

  if (a2 == 1)
  {
    v16 = __cxa_begin_catch(a1);
    std::deque<int>::clear((_QWORD *)(v14 + 200));
    std::string::basic_string[abi:ne180100]<0>(&__p, "INFO");
    v17 = fst::LogMessage::LogMessage((fst *)(v15 - 65), (uint64_t)&__p);
    v18 = (_QWORD *)fst::cerr(v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Max tokens ", 11);
    v19 = (_QWORD *)std::ostream::operator<<();
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" exceeded - ", 12);
    v21 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v16 + 16))(v16);
    v22 = strlen(v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
    fst::LogMessage::~LogMessage((fst::LogMessage *)(v15 - 65));
    if (a14 < 0)
      operator delete(__p);
    __cxa_end_catch();
    JUMPOUT(0x1AD966A10);
  }
  JUMPOUT(0x1AD966A70);
}

void sub_1AD966B48(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1AD966A70);
}

uint64_t kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::MakeLGFromResultLattice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t result;
  int v9;
  _DWORD v10[2];
  uint64_t (**v11)(void **);
  uint64_t v12;

  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v11);
  fst::ConvertLattice<fst::LatticeWeightTpl<float>,fst::TropicalWeightTpl<float>>(a3, (uint64_t)&v11);
  fst::ArcMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>((uint64_t)&v11);
  fst::RemoveEpsLocal<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)&v11);
  v10[0] = 2;
  fst::ArcMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ProjectMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>((uint64_t)&v11, v10);
  v7 = v11[15]((void **)&v11);
  ((void (*)(uint64_t (***)(void **), uint64_t))v11[35])(&v11, v7);
  LOBYTE(v10[0]) = 1;
  v10[1] = 0;
  fst::Compose<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a2, (uint64_t)&v11, a4, (uint64_t)v10);
  v11 = (uint64_t (**)(void **))&unk_1E5D256C0;
  result = v12;
  if (v12)
  {
    v9 = *(_DWORD *)(v12 + 56) - 1;
    *(_DWORD *)(v12 + 56) = v9;
    if (!v9)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_1AD966C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12)
{
  int v13;

  if (a12)
  {
    v13 = a12[14] - 1;
    a12[14] = v13;
    if (!v13)
      (*(void (**)(_DWORD *))(*(_QWORD *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::PhoneticMatchDecoder::runImpl(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  float v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int v21;
  __int128 **v22;
  _QWORD *v23;
  __int128 *v24;
  uint64_t v25;
  _QWORD *v26;
  URegularExpression **v27;
  URegularExpression **v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t i;
  uint64_t v33;
  std::string *v34;
  __int128 v35;
  std::string::size_type v36;
  std::string *v37;
  quasar::PhoneticMatchResult *v38;
  uint64_t v39;
  unsigned __int8 **v40;
  quasar::PhoneticMatchResult *v41;
  uint64_t v42;
  unint64_t matched;
  quasar::PhoneticMatchResult *v44;
  quasar::PhoneticMatchResult *v45;
  int v46;
  _QWORD *v47;
  __int128 *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  __int128 *v52;
  __int128 *v53;
  std::string *v54;
  __int128 v55;
  std::string::size_type v56;
  std::string *v57;
  _QWORD *v58;
  __int128 *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  std::string *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  __int128 *v72;
  uint64_t v73;
  uint64_t *v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77[2];
  __int128 v78;
  uint64_t v79;
  std::string v80;
  _QWORD v81[3];
  __int128 v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  std::string *v87;
  unint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  _DWORD v92[8];
  uint64_t *v93;
  std::string *v94;
  unint64_t v95;
  quasar::PhoneticMatchResult *v96;
  quasar::PhoneticMatchResult *v97;
  uint64_t v98;
  void *v99;
  void *v100;
  uint64_t v101;
  __int128 *v102[3];
  _QWORD v103[3];
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD v107[3];
  char v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  float v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  uint64_t v133;
  std::string v134;
  char v135;
  BOOL v136;
  BOOL v137;
  __int128 __p;
  uint64_t v139;
  char v140;
  float v141;
  float v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145[5];

  v8 = *(std::__shared_weak_count **)(*a3 + 432);
  v126 = *(_QWORD *)(*a3 + 424);
  v127 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  quasar::PhoneticMatchDecoder::FactoryChoirJournalistNursery::FactoryChoirJournalistNursery((uint64_t)&v128, &v126);
  v11 = v127;
  if (v127)
  {
    v12 = (unint64_t *)&v127->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v140 = *(_BYTE *)(a2 + 656) ^ 1;
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)a1, (std::string *)&v109);
  if (SHIBYTE(v139) < 0)
    operator delete((void *)__p);
  __p = v109;
  v139 = v110;
  MEMORY[0x1AF44C914](&v129, "n/a");
  MEMORY[0x1AF44C914](&v134, "n/a");
  v131 = 0;
  v128 = 0.0;
  v136 = 0;
  v14 = *a3;
  if (!*(_BYTE *)(*a3 + 628))
  {
    if (quasar::gLogLevel >= 2)
    {
      v124 = 0u;
      v125 = 0u;
      v122 = 0u;
      v123 = 0u;
      v120 = 0u;
      v121 = 0u;
      v118 = 0u;
      v119 = 0u;
      v116 = 0u;
      v117 = 0u;
      v114 = 0u;
      v115 = 0u;
      v112 = 0u;
      v113 = 0u;
      v110 = 0u;
      v111 = 0u;
      v109 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v109);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v109, (uint64_t)"No LM cost found. Skipping PM. Hint: Did you include lattice-lm-rescore?", 72);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v109);
    }
    goto LABEL_38;
  }
  v128 = -*(float *)(v14 + 632);
  v15 = *(float *)(a1 + 660);
  v137 = v15 < v128;
  if (v15 < v128)
  {
    if (quasar::gLogLevel < 4)
    {
LABEL_16:
      v18 = 0;
      goto LABEL_39;
    }
    v124 = 0u;
    v125 = 0u;
    v122 = 0u;
    v123 = 0u;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v116 = 0u;
    v117 = 0u;
    v114 = 0u;
    v115 = 0u;
    v112 = 0u;
    v113 = 0u;
    v110 = 0u;
    v111 = 0u;
    v109 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v109);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v109, (uint64_t)"LVCSR LM logprob=", 17);
    v16 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" is greater than threshold ", 27);
    v17 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)". Skipping PM.", 14);
LABEL_15:
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v109);
    goto LABEL_16;
  }
  v19 = *(uint64_t **)(v14 + 352);
  if (!v19)
  {
    quasar::Decoder::calculateNBest(a2, a3, *(_DWORD *)(*(_QWORD *)a4 + 16));
    v19 = *(uint64_t **)(*a3 + 352);
  }
  v20 = *v19;
  if (v19[1] == *v19)
  {
LABEL_38:
    v18 = 2;
    goto LABEL_39;
  }
  v21 = *(unsigned __int8 *)(a2 + 656);
  v22 = (__int128 **)(v20 + 24 * *(unsigned __int8 *)(a2 + 656));
  quasar::TextProc::GetOrthography(v22, 1, (std::string *)&v109);
  if (SHIBYTE(v130) < 0)
    operator delete((void *)v129);
  v129 = v109;
  v130 = v110;
  if (quasar::gLogLevel >= 5)
  {
    v124 = 0u;
    v125 = 0u;
    v122 = 0u;
    v123 = 0u;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v116 = 0u;
    v117 = 0u;
    v114 = 0u;
    v115 = 0u;
    v112 = 0u;
    v113 = 0u;
    v110 = 0u;
    v111 = 0u;
    v109 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v109);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v109, (uint64_t)"pmInput=\"", 9);
    if (v130 >= 0)
      v24 = &v129;
    else
      v24 = (__int128 *)v129;
    if (v130 >= 0)
      v25 = HIBYTE(v130);
    else
      v25 = *((_QWORD *)&v129 + 1);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"\"", 1);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v109);
  }
  v27 = *(URegularExpression ***)(a1 + 952);
  if (v27 && !quasar::URegularExpressionWrapper::isMatch(v27, (uint64_t)&v129))
  {
    v18 = 0;
    LODWORD(v131) = 0;
    if (quasar::gLogLevel < 4)
      goto LABEL_39;
    v124 = 0u;
    v125 = 0u;
    v122 = 0u;
    v123 = 0u;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v116 = 0u;
    v117 = 0u;
    v114 = 0u;
    v115 = 0u;
    v112 = 0u;
    v113 = 0u;
    v110 = 0u;
    v111 = 0u;
    v109 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v109);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v109, (uint64_t)"Not a match with the regex whitelist. Skipping PM.", 50);
    goto LABEL_15;
  }
  LODWORD(v131) = 1;
  v28 = *(URegularExpression ***)(a1 + 968);
  if (v28 && quasar::URegularExpressionWrapper::isMatch(v28, (uint64_t)&v129))
  {
    HIDWORD(v131) = 1;
    if (quasar::gLogLevel < 4)
      goto LABEL_16;
    v124 = 0u;
    v125 = 0u;
    v122 = 0u;
    v123 = 0u;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v116 = 0u;
    v117 = 0u;
    v114 = 0u;
    v115 = 0u;
    v112 = 0u;
    v113 = 0u;
    v110 = 0u;
    v111 = 0u;
    v109 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v109);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v109, (uint64_t)"Matches the regex blacklist. Skipping PM.", 41);
    goto LABEL_15;
  }
  HIDWORD(v131) = 0;
  v108 = 0;
  memset(v107, 0, sizeof(v107));
  v104 = 0;
  v105 = 0;
  v106 = 0;
  memset(v103, 0, sizeof(v103));
  quasar::PhoneticMatchDecoder::applyPlaceholders(a1, (uint64_t *)v22, (uint64_t *)v102);
  v99 = 0;
  v100 = 0;
  v101 = 0;
  quasar::PhoneticMatchDecoder::getPhoneSegmentation(v30, v102, (float *)(*a3 + 632), &v104, (uint64_t)&v99);
  v96 = 0;
  v97 = 0;
  v98 = 0;
  if ((quasar::PhoneticMatchDecoder::doPm(a1, v31, &v104, &v99, (uint64_t *)&v96, &v108, &v141, &v142, *(float *)(*a3 + 632)) & 1) == 0)
  {
    v18 = 2;
    goto LABEL_91;
  }
  v93 = 0;
  v94 = 0;
  v95 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v89, ",");
  quasar::split(a1 + 736, (uint64_t *)&v89, 0, (uint64_t)&v109);
  v74 = (uint64_t *)v22;
  v75 = v21;
  if (SBYTE7(v90) < 0)
    operator delete((void *)v89);
  v33 = *((_QWORD *)&v109 + 1);
  for (i = v109; i != v33; i += 24)
  {
    if (*(char *)(i + 23) < 0)
    {
      v36 = *(_QWORD *)(i + 8);
      if (!v36)
        continue;
      v34 = v94;
      if ((unint64_t)v94 >= v95)
      {
LABEL_53:
        v37 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v93, (__int128 *)i);
        goto LABEL_54;
      }
      std::string::__init_copy_ctor_external(v94, *(const std::string::value_type **)i, v36);
    }
    else
    {
      if (!*(_BYTE *)(i + 23))
        continue;
      v34 = v94;
      if ((unint64_t)v94 >= v95)
        goto LABEL_53;
      v35 = *(_OWORD *)i;
      v94->__r_.__value_.__r.__words[2] = *(_QWORD *)(i + 16);
      *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v35;
    }
    v37 = v34 + 1;
LABEL_54:
    v94 = v37;
  }
  v73 = v20;
  v76 = a2;
  *(_QWORD *)&v89 = &v109;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
  v39 = (uint64_t)v96;
  v38 = v97;
  if (v96 == v97)
    goto LABEL_85;
  v40 = (unsigned __int8 **)(a1 + 760);
  do
  {
    quasar::PhoneticMatchResult::processRawOutput(v39, &v93, (_QWORD *)(a1 + 760), a1 + 1024);
    v39 += 72;
  }
  while ((quasar::PhoneticMatchResult *)v39 != v38);
  v42 = (uint64_t)v96;
  v41 = v97;
  if (v96 == v97)
    goto LABEL_85;
  matched = v144;
  do
  {
    if (matched >= v145[0])
    {
      matched = std::vector<quasar::PhoneticMatchResult>::__push_back_slow_path<quasar::PhoneticMatchResult const&>(&v143, v42);
    }
    else
    {
      std::allocator<quasar::PhoneticMatchResult>::construct[abi:ne180100]<quasar::PhoneticMatchResult,quasar::PhoneticMatchResult const&>((uint64_t)v145, matched, v42);
      matched += 72;
    }
    v144 = matched;
    v42 += 72;
  }
  while ((quasar::PhoneticMatchResult *)v42 != v41);
  v44 = v96;
  v45 = v97;
  if (v96 == v97)
  {
LABEL_85:
    v91 = 0u;
    memset(v92, 0, 23);
    v89 = 0u;
    v90 = 0u;
LABEL_86:
    if (quasar::gLogLevel >= 4)
    {
      v124 = 0u;
      v125 = 0u;
      v122 = 0u;
      v123 = 0u;
      v120 = 0u;
      v121 = 0u;
      v118 = 0u;
      v119 = 0u;
      v116 = 0u;
      v117 = 0u;
      v114 = 0u;
      v115 = 0u;
      v112 = 0u;
      v113 = 0u;
      v110 = 0u;
      v111 = 0u;
      v109 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v109);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v109, (uint64_t)"No good phonetic match results", 30);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v109);
    }
    goto LABEL_88;
  }
  v46 = quasar::gLogLevel;
  do
  {
    if (v46 >= 4)
    {
      v124 = 0u;
      v125 = 0u;
      v122 = 0u;
      v123 = 0u;
      v120 = 0u;
      v121 = 0u;
      v118 = 0u;
      v119 = 0u;
      v116 = 0u;
      v117 = 0u;
      v114 = 0u;
      v115 = 0u;
      v112 = 0u;
      v113 = 0u;
      v110 = 0u;
      v111 = 0u;
      v109 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v109);
      v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v109, (uint64_t)"**PM JSON RESULT:", 17);
      quasar::PhoneticMatchResult::toJSONString(v44, 0);
      if ((SBYTE7(v90) & 0x80u) == 0)
        v48 = &v89;
      else
        v48 = (__int128 *)v89;
      if ((SBYTE7(v90) & 0x80u) == 0)
        v49 = BYTE7(v90);
      else
        v49 = *((_QWORD *)&v89 + 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)v48, v49);
      if (SBYTE7(v90) < 0)
        operator delete((void *)v89);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v109);
      v46 = quasar::gLogLevel;
    }
    v44 = (quasar::PhoneticMatchResult *)((char *)v44 + 72);
  }
  while (v44 != v45);
  v50 = (uint64_t)v96;
  v91 = 0u;
  memset(v92, 0, 23);
  v89 = 0u;
  v90 = 0u;
  if (v96 == v97)
    goto LABEL_86;
  while (!*(_BYTE *)(v50 + 70))
  {
    v50 += 72;
    if ((quasar::PhoneticMatchResult *)v50 == v97)
      goto LABEL_86;
  }
  v89 = *(_OWORD *)v50;
  if ((__int128 *)v50 != &v89)
    std::vector<quasar::PhoneticMatchAlignmentSpan>::__assign_with_size[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan*,quasar::PhoneticMatchAlignmentSpan*>((uint64_t)&v90, *(uint64_t **)(v50 + 16), *(uint64_t **)(v50 + 24), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v50 + 24) - *(_QWORD *)(v50 + 16)) >> 3));
  std::string::operator=((std::string *)((char *)&v91 + 8), (const std::string *)(v50 + 40));
  v51 = *(_DWORD *)(v50 + 64);
  *(_DWORD *)((char *)&v92[4] + 3) = *(_DWORD *)(v50 + 67);
  v92[4] = v51;
  quasar::PhoneticMatchResult::outputToks((std::string *)&v89, &v86);
  quasar::tokens2Str(&v86, (std::string *)&v109);
  if (SHIBYTE(v133) < 0)
    operator delete((void *)v132);
  v132 = v109;
  v133 = v110;
  BYTE7(v110) = 0;
  LOBYTE(v109) = 0;
  *(_QWORD *)&v84 = &v86;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
  v86 = 0;
  v87 = 0;
  v88 = 0;
  quasar::PhoneticMatchResult::outputToks((std::string *)&v89, (uint64_t *)&v109);
  v53 = (__int128 *)*((_QWORD *)&v109 + 1);
  v52 = (__int128 *)v109;
  while (2)
  {
    if (v52 != v53)
    {
      if (*((char *)v52 + 23) < 0)
      {
        v56 = *((_QWORD *)v52 + 1);
        if (v56)
        {
          v54 = v87;
          if ((unint64_t)v87 >= v88)
            goto LABEL_108;
          std::string::__init_copy_ctor_external(v87, *(const std::string::value_type **)v52, v56);
LABEL_107:
          v57 = v54 + 1;
LABEL_109:
          v87 = v57;
        }
      }
      else if (*((_BYTE *)v52 + 23))
      {
        v54 = v87;
        if ((unint64_t)v87 < v88)
        {
          v55 = *v52;
          v87->__r_.__value_.__r.__words[2] = *((_QWORD *)v52 + 2);
          *(_OWORD *)&v54->__r_.__value_.__l.__data_ = v55;
          goto LABEL_107;
        }
LABEL_108:
        v57 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v86, v52);
        goto LABEL_109;
      }
      v52 += 14;
      continue;
    }
    break;
  }
  *(_QWORD *)&v84 = &v109;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
  *(_QWORD *)&v84 = " ";
  *((_QWORD *)&v84 + 1) = 1;
  quasar::join<std::vector<std::string>>(&v86, (uint64_t *)&v84);
  if (SHIBYTE(v133) < 0)
    operator delete((void *)v132);
  v132 = v109;
  v133 = v110;
  if (quasar::gLogLevel >= 4)
  {
    v124 = 0u;
    v125 = 0u;
    v122 = 0u;
    v123 = 0u;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v116 = 0u;
    v117 = 0u;
    v114 = 0u;
    v115 = 0u;
    v112 = 0u;
    v113 = 0u;
    v110 = 0u;
    v111 = 0u;
    v109 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v109);
    v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v109, (uint64_t)"pmOutput=\"", 10);
    if (v133 >= 0)
      v59 = &v132;
    else
      v59 = (__int128 *)v132;
    if (v133 >= 0)
      v60 = HIBYTE(v133);
    else
      v60 = *((_QWORD *)&v132 + 1);
    v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)v59, v60);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"\"", 1);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v109);
  }
  if (*((float *)&v89 + 3) <= *(float *)(a1 + 652))
  {
    if (*(_BYTE *)(v76 + 656) && *((float *)&v89 + 3) > *(float *)(v76 + 660))
    {
      v140 = 1;
      *(_DWORD *)(v76 + 660) = HIDWORD(v89);
    }
    if (quasar::gLogLevel >= 4)
    {
      v124 = 0u;
      v125 = 0u;
      v122 = 0u;
      v123 = 0u;
      v120 = 0u;
      v121 = 0u;
      v118 = 0u;
      v119 = 0u;
      v116 = 0u;
      v117 = 0u;
      v114 = 0u;
      v115 = 0u;
      v112 = 0u;
      v113 = 0u;
      v110 = 0u;
      v111 = 0u;
      v109 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v109);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v109, (uint64_t)"Score low. Discarding PM result.", 32);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v109);
    }
  }
  else
  {
    quasar::PhoneticMatchResult::outputToks((std::string *)&v89, (uint64_t *)&v84);
    v82 = 0uLL;
    v83 = 0;
    quasar::SystemConfig::Version::Version(&v109, 74, 0);
    if (quasar::SystemConfig::Version::operator>=((_DWORD *)(a1 + 32), &v109))
    {
      quasar::PhoneticMatchResult::preItnOutputToks((std::string *)&v89, (uint64_t *)&v109);
      std::vector<quasar::Token>::__vdeallocate((void **)&v84);
      v84 = v109;
      v85 = v110;
      *(_QWORD *)&v110 = 0;
      v109 = 0uLL;
      v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&v109;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
      quasar::PhoneticMatchResult::getItnOverrides((std::string *)&v89, (_QWORD *)(a1 + 984), (uint64_t *)&v109);
      std::vector<quasar::ItnOverride>::__vdeallocate((void **)&v82);
      v82 = v109;
      v83 = v110;
      *(_QWORD *)&v110 = 0;
      v109 = 0uLL;
      v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&v109;
      std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
    }
    if (v108)
    {
      quasar::TextProc::GetOrthography((__int128 **)&v84, 0, (std::string *)&v109);
      if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v134.__r_.__value_.__l.__data_);
      *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v109;
      v134.__r_.__value_.__r.__words[2] = v110;
    }
    else
    {
      quasar::Token::Token((quasar::Token *)&v109);
      memset(v81, 0, sizeof(v81));
      v62 = *(_QWORD *)(v73 + 24 * v75 + 8);
      v63 = std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v81, *v74, v62, 0x6DB6DB6DB6DB6DB7 * ((v62 - *v74) >> 5));
      quasar::PhoneticMatchDecoder::joinTokens((uint64_t)v63, v81, (uint64_t *)&v84, (uint64_t)&v109);
      v80.__r_.__value_.__r.__words[0] = (std::string::size_type)v81;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
      quasar::TextProc::GetOrthography((__int128 **)&v84, 0, &v80);
      if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v134.__r_.__value_.__l.__data_);
      v134 = v80;
      v64 = *((_QWORD *)&v84 + 1);
      v65 = v84;
      while (v64 != v65)
        quasar::Token::~Token((void **)(v64 - 224));
      *((_QWORD *)&v84 + 1) = v65;
      memset(&v80, 0, sizeof(v80));
      v66 = v105;
      if (v104 != v105)
      {
        v67 = 0;
        v68 = v104 + 48;
        do
        {
          if ((unint64_t)v67 >= v80.__r_.__value_.__r.__words[2])
          {
            v67 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v80, (__int128 *)v68);
          }
          else
          {
            if (*(char *)(v68 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v67, *(const std::string::value_type **)v68, *(_QWORD *)(v68 + 8));
            }
            else
            {
              v69 = *(_OWORD *)v68;
              v67->__r_.__value_.__r.__words[2] = *(_QWORD *)(v68 + 16);
              *(_OWORD *)&v67->__r_.__value_.__l.__data_ = v69;
            }
            ++v67;
          }
          v80.__r_.__value_.__l.__size_ = (std::string::size_type)v67;
          v70 = v68 + 176;
          v68 += 224;
        }
        while (v70 != v66);
      }
      v77[0] = (uint64_t)" ";
      v77[1] = 1;
      quasar::join<std::vector<std::string>>((uint64_t *)&v80, v77);
      if (SBYTE7(v113) < 0)
        operator delete((void *)v112);
      v112 = v78;
      *(_QWORD *)&v113 = v79;
      std::vector<quasar::Token>::push_back[abi:ne180100]((uint64_t *)&v84, (const quasar::Token *)&v109);
      *(_QWORD *)&v78 = &v80;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
      quasar::Token::~Token((void **)&v109);
    }
    if (*(_BYTE *)(v76 + 656))
    {
      if (*((float *)&v89 + 3) > *(float *)(v76 + 660))
      {
        v140 = 1;
        v71 = *a3;
        v72 = **(__int128 ***)(*a3 + 352);
        if (v72 != &v84)
        {
          std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)v72, v84, *((uint64_t *)&v84 + 1), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&v84 + 1) - v84) >> 5));
          goto LABEL_155;
        }
        goto LABEL_156;
      }
    }
    else
    {
      v140 = 1;
      std::vector<std::vector<quasar::Token>>::insert(*(uint64_t **)(*a3 + 352), **(uint64_t ***)(*a3 + 352), (uint64_t *)&v84);
LABEL_155:
      v71 = *a3;
LABEL_156:
      if ((__int128 *)(v71 + 656) != &v82)
        std::vector<quasar::ItnOverride>::__assign_with_size[abi:ne180100]<quasar::ItnOverride*,quasar::ItnOverride*>(v71 + 656, (std::string *)v82, *((__int128 **)&v82 + 1), 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)&v82 + 1) - v82) >> 3));
    }
    v135 = 1;
    if (v140)
    {
      if (quasar::gLogLevel >= 4)
      {
        v124 = 0u;
        v125 = 0u;
        v122 = 0u;
        v123 = 0u;
        v120 = 0u;
        v121 = 0u;
        v118 = 0u;
        v119 = 0u;
        v116 = 0u;
        v117 = 0u;
        v114 = 0u;
        v115 = 0u;
        v112 = 0u;
        v113 = 0u;
        v110 = 0u;
        v111 = 0u;
        v109 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v109);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v109, (uint64_t)"Switching to phonetic match decoder output", 42);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v109);
      }
      *(_BYTE *)(v76 + 656) = 1;
      *(_DWORD *)(v76 + 660) = HIDWORD(v89);
      v136 = quasar::PhoneticMatchResult::numWildcardWordMatches((uint64_t)&v89, v40) != 0;
    }
    *(_QWORD *)&v109 = &v82;
    std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
    *(_QWORD *)&v109 = &v84;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
  }
  *(_QWORD *)&v109 = &v86;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
LABEL_88:
  if (SHIBYTE(v92[3]) < 0)
    operator delete(*((void **)&v91 + 1));
  *(_QWORD *)&v109 = &v90;
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
  *(_QWORD *)&v109 = &v93;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
  v18 = 0;
LABEL_91:
  *(_QWORD *)&v109 = &v96;
  std::vector<quasar::PhoneticMatchResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
  if (v99)
  {
    v100 = v99;
    operator delete(v99);
  }
  *(_QWORD *)&v109 = v102;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
  *(_QWORD *)&v109 = v103;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
  *(_QWORD *)&v109 = &v104;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
  *(_QWORD *)&v109 = v107;
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
LABEL_39:
  quasar::PhoneticMatchDecoder::FactoryChoirJournalistNursery::~FactoryChoirJournalistNursery((quasar::PhoneticMatchDecoder::FactoryChoirJournalistNursery *)&v128);
  return v18;
}

void sub_1AD967BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,char a63)
{
  uint64_t a67;

  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a67);
  a67 = (uint64_t)&a25;
  std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&a67);
  a67 = (uint64_t)&a29;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a67);
  a29 = (uint64_t)&a32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  quasar::PhoneticMatchResult::~PhoneticMatchResult(&a35);
  a35 = &a45;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  a35 = &a48;
  std::vector<quasar::PhoneticMatchResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  if (__p)
  {
    a52 = (uint64_t)__p;
    operator delete(__p);
  }
  a35 = &a54;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  a35 = &a57;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  a35 = &a60;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  a35 = &a63;
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  quasar::PhoneticMatchDecoder::FactoryChoirJournalistNursery::~FactoryChoirJournalistNursery((quasar::PhoneticMatchDecoder::FactoryChoirJournalistNursery *)&STACK[0x2F0]);
  _Unwind_Resume(a1);
}

void quasar::PhoneticMatchDecoder::FactoryChoirJournalistNursery::~FactoryChoirJournalistNursery(quasar::PhoneticMatchDecoder::FactoryChoirJournalistNursery *this)
{
  uint64_t v2;
  std::string *v3;
  __int128 v4;
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  const quasar::PhoneticMatchResult *v13;
  const quasar::PhoneticMatchResult *v14;
  std::string v15;
  std::string __p;
  void *v17[2];
  char v18;

  if (*((_BYTE *)this + 120))
  {
    v2 = *((_QWORD *)this + 20);
    std::string::basic_string[abi:ne180100]<0>(v17, "PM-input");
    std::operator+<char>();
    v3 = std::string::append(&v15, "\"");
    v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    quasar::SpeechRequestResultData::addDumpAA(v2, (__int128 *)v17, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
    if (v18 < 0)
      operator delete(v17[0]);
    v5 = *((_QWORD *)this + 20);
    std::string::basic_string[abi:ne180100]<0>(v17, "PM-output");
    std::operator+<char>();
    v6 = std::string::append(&v15, "\"");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    quasar::SpeechRequestResultData::addDumpAA(v5, (__int128 *)v17, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
    if (v18 < 0)
      operator delete(v17[0]);
    v8 = *((_QWORD *)this + 20);
    std::string::basic_string[abi:ne180100]<0>(v17, "PM-used");
    v9 = 0.0;
    if (*((_BYTE *)this + 88))
      v9 = 1.0;
    quasar::SpeechRequestResultData::addDumpAA(v8, (__int128 *)v17, 1, v9);
    if (v18 < 0)
      operator delete(v17[0]);
    v10 = *((_QWORD *)this + 20);
    std::string::basic_string[abi:ne180100]<0>(v17, "PM-partial");
    v11 = 0.0;
    if (*((_BYTE *)this + 89))
      v11 = 1.0;
    quasar::SpeechRequestResultData::addDumpAA(v10, (__int128 *)v17, 1, v11);
    if (v18 < 0)
      operator delete(v17[0]);
    v12 = *((_QWORD *)this + 20);
    std::string::basic_string[abi:ne180100]<0>(v17, "PM-decoder");
    quasar::SpeechRequestResultData::addDumpAA(v12, (__int128 *)v17, (const std::string *)this + 4);
    if (v18 < 0)
      operator delete(v17[0]);
  }
  v13 = (const quasar::PhoneticMatchResult *)*((_QWORD *)this + 17);
  v14 = (const quasar::PhoneticMatchResult *)*((_QWORD *)this + 18);
  while (v13 != v14)
  {
    if (*((_BYTE *)v13 + 70))
      quasar::SpeechRequestResultData::storePhoneticMatchResult(*((std::mutex **)this + 20), v13);
    v13 = (const quasar::PhoneticMatchResult *)((char *)v13 + 72);
  }
  quasar::SpeechRequestResultData::storePhoneticMatchDecoderStats(*((_QWORD *)this + 20), (__int128 *)this + 6, *((_BYTE *)this + 90), *((_DWORD *)this + 8) != 0, *((_DWORD *)this + 9) != 0, *((float *)this + 31), *((float *)this + 32));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 160);
  v17[0] = (char *)this + 136;
  std::vector<quasar::PhoneticMatchResult>::__destroy_vector::operator()[abi:ne180100]((void ***)v17);
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

uint64_t quasar::PhoneticMatchDecoder::supportsEager(quasar::PhoneticMatchDecoder *this)
{
  return 1;
}

void quasar::PhoneticMatchDecoder::~PhoneticMatchDecoder(quasar::PhoneticMatchDecoder *this)
{
  quasar::PhoneticMatchDecoder::~PhoneticMatchDecoder(this);
  JUMPOUT(0x1AF44D190);
}

{
  uint64_t *v2;
  uint64_t *v3;
  void *v4;

  *(_QWORD *)this = &off_1E5D37B68;
  std::__hash_table<std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,std::__unordered_map_hasher<std::shared_ptr<quasar::URegularExpressionWrapper>,std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,std::hash<std::shared_ptr<quasar::URegularExpressionWrapper>>,std::equal_to<std::shared_ptr<quasar::URegularExpressionWrapper>>,true>,std::__unordered_map_equal<std::shared_ptr<quasar::URegularExpressionWrapper>,std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,std::equal_to<std::shared_ptr<quasar::URegularExpressionWrapper>>,std::hash<std::shared_ptr<quasar::URegularExpressionWrapper>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>>>::~__hash_table((uint64_t)this + 1024);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 984);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 968);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 952);
  v2 = (uint64_t *)*((_QWORD *)this + 118);
  *((_QWORD *)this + 118) = 0;
  if (v2)
    std::default_delete<kaldi::quasar::Phonomap>::operator()[abi:ne180100]((uint64_t)this + 944, v2);
  v3 = (uint64_t *)*((_QWORD *)this + 117);
  *((_QWORD *)this + 117) = 0;
  if (v3)
    std::default_delete<kaldi::quasar::Phonomap>::operator()[abi:ne180100]((uint64_t)this + 936, v3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 920);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 872);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 856);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 840);
  if (*((char *)this + 839) < 0)
    operator delete(*((void **)this + 102));
  if (*((char *)this + 815) < 0)
    operator delete(*((void **)this + 99));
  if (*((char *)this + 783) < 0)
    operator delete(*((void **)this + 95));
  if (*((char *)this + 759) < 0)
    operator delete(*((void **)this + 92));
  v4 = (void *)*((_QWORD *)this + 88);
  if (v4)
  {
    *((_QWORD *)this + 89) = v4;
    operator delete(v4);
  }
  if (*((char *)this + 695) < 0)
    operator delete(*((void **)this + 84));
  if (*((char *)this + 639) < 0)
    operator delete(*((void **)this + 77));
  if (*((char *)this + 615) < 0)
    operator delete(*((void **)this + 74));
  if (*((char *)this + 591) < 0)
    operator delete(*((void **)this + 71));
  if (*((char *)this + 567) < 0)
    operator delete(*((void **)this + 68));
  if (*((char *)this + 543) < 0)
    operator delete(*((void **)this + 65));
  if (*((char *)this + 519) < 0)
    operator delete(*((void **)this + 62));
  if (*((char *)this + 495) < 0)
    operator delete(*((void **)this + 59));
  if (*((char *)this + 471) < 0)
    operator delete(*((void **)this + 56));
  quasar::Decoder::~Decoder((void **)this);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<quasar::PhoneticMatchConfFeatures::GetFeatureMap(void)::{lambda(void)#1} &&>>()
{
  quasar::PhoneticMatchConfFeatures::GetFeatureMap(void)::{lambda(void)#1}::operator()();
}

void quasar::PhoneticMatchConfFeatures::GetFeatureMap(void)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  void *__p[2];
  char v2;
  void **v3;

  v0 = operator new();
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_DWORD *)(v0 + 32) = 1065353216;
  quasar::PhoneticMatchConfFeatures::GetFeatureMap(void)::m_heap = v0;
  std::string::basic_string[abi:ne180100]<0>(__p, "pm_overall_score");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 0;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "slm_mean_confidence");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 1;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "trans_slm_mean_confidence");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 2;
  if (v2 < 0)
    operator delete(__p[0]);
  if (*(_QWORD *)(v0 + 24) != 3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "m.size() == PhoneticMatchConfFeatures::kFeatureCount");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
}

void sub_1AD968328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

uint64_t quasar::PhoneticMatchDecoder::FactoryChoirJournalistNursery::FactoryChoirJournalistNursery(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  *(_DWORD *)a1 = -971228160;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "<n/a>");
  *(_QWORD *)(a1 + 32) = -1;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 40), "<n/a>");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 64), "<n/a>");
  *(_WORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 90) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 96), "<n/a>");
  *(_BYTE *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 124) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v4 = a2[1];
  *(_QWORD *)(a1 + 160) = *a2;
  *(_QWORD *)(a1 + 168) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return a1;
}

void sub_1AD968404(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;

  if (v1[87] < 0)
    operator delete(*v4);
  if (v1[63] < 0)
    operator delete(*v3);
  if (v1[31] < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,std::__unordered_map_hasher<std::shared_ptr<quasar::URegularExpressionWrapper>,std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,std::hash<std::shared_ptr<quasar::URegularExpressionWrapper>>,std::equal_to<std::shared_ptr<quasar::URegularExpressionWrapper>>,true>,std::__unordered_map_equal<std::shared_ptr<quasar::URegularExpressionWrapper>,std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,std::equal_to<std::shared_ptr<quasar::URegularExpressionWrapper>>,std::hash<std::shared_ptr<quasar::URegularExpressionWrapper>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,std::__unordered_map_hasher<std::shared_ptr<quasar::URegularExpressionWrapper>,std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,std::hash<std::shared_ptr<quasar::URegularExpressionWrapper>>,std::equal_to<std::shared_ptr<quasar::URegularExpressionWrapper>>,true>,std::__unordered_map_equal<std::shared_ptr<quasar::URegularExpressionWrapper>,std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,std::equal_to<std::shared_ptr<quasar::URegularExpressionWrapper>>,std::hash<std::shared_ptr<quasar::URegularExpressionWrapper>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,std::__unordered_map_hasher<std::shared_ptr<quasar::URegularExpressionWrapper>,std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,std::hash<std::shared_ptr<quasar::URegularExpressionWrapper>>,std::equal_to<std::shared_ptr<quasar::URegularExpressionWrapper>>,true>,std::__unordered_map_equal<std::shared_ptr<quasar::URegularExpressionWrapper>,std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,std::equal_to<std::shared_ptr<quasar::URegularExpressionWrapper>>,std::hash<std::shared_ptr<quasar::URegularExpressionWrapper>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<quasar::URegularExpressionWrapper> const,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<quasar::URegularExpressionWrapper> const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1);
}

void std::default_delete<kaldi::quasar::Phonomap>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  void **v4;

  if (a2)
  {
    v4 = (void **)(a2 + 1);
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v4);
    v3 = *a2;
    *a2 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    MEMORY[0x1AF44D190](a2, 0x1060C40D0C22456);
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::URegularExpressionWrapper,std::allocator<quasar::URegularExpressionWrapper>,std::string &,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x20uLL);
  result = std::__shared_ptr_emplace<quasar::URegularExpressionWrapper>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<quasar::URegularExpressionWrapper>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD968714(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::URegularExpressionWrapper>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<quasar::URegularExpressionWrapper>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D444E0;
  a1[1] = 0;
  quasar::URegularExpressionWrapper::URegularExpressionWrapper(a1 + 3);
  return a1;
}

void sub_1AD968760(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::quasar::Phonomap::Phonomap(_QWORD *a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  float *v21;
  uint64_t v22;
  float v23;
  fst *v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  void *__p[2];
  char v33;
  char v34;
  void *v35;
  void *v36;
  uint64_t v37;

  v8 = a1 + 1;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  v9 = fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Read(a2);
  v10 = *a1;
  *a1 = v9;
  if (v10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v9 = (_QWORD *)*a1;
  }
  a1[5] = (*(uint64_t (**)(_QWORD *))(*v9 + 112))(v9);
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 120))(*a1);
  a1[4] = v11;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 120))(v11);
  std::vector<float>::resize((uint64_t)&v35, v12);
  v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[5] + 120))(a1[5]);
  std::vector<std::vector<float>>::resize(v8, v13, (uint64_t)&v35);
  v14 = *(_QWORD *)(*(_QWORD *)(*a1 + 8) + 72) - *(_QWORD *)(*(_QWORD *)(*a1 + 8) + 64);
  if ((int)(v14 >> 3) >= 1)
  {
    v15 = 0;
    v16 = (v14 >> 3);
    do
    {
      v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8) + 64) + 8 * v15) + 24);
      v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8) + 64) + 8 * v15) + 32) - v17;
      if (v18)
      {
        v19 = v18 >> 4;
        if (v19 <= 1)
          v20 = 1;
        else
          v20 = v19;
        v21 = (float *)(v17 + 4);
        do
        {
          v22 = *(int *)v21;
          if ((*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)a1[4] + 96))(a1[4], a3) == v22)
            v23 = a4;
          else
            v23 = 1.0;
          *(float *)(*(_QWORD *)(*v8 + 24 * *((int *)v21 - 1)) + 4 * *(int *)v21) = v21[1] * v23;
          v21 += 4;
          --v20;
        }
        while (v20);
      }
      ++v15;
    }
    while (v15 != v16);
  }
  *((_DWORD *)a1 + 12) = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)a1[4] + 96))(a1[4], a3);
  if ((unint64_t)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[5] + 120))(a1[5]) >= 0x101)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    v24 = fst::LogMessage::LogMessage((fst *)&v34, (uint64_t)__p);
    v25 = (_QWORD *)fst::cerr(v24);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Greated than 256 rec symbols (phones) in phonomap ", 50);
    v27 = *(char *)(a2 + 23);
    v28 = v27 >= 0 ? a2 : *(_QWORD *)a2;
    v29 = v27 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(_QWORD *)(a2 + 8);
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" can't be supported", 19);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v34);
    if (v33 < 0)
      operator delete(__p[0]);
  }
  if (v35)
  {
    v36 = v35;
    operator delete(v35);
  }
  return a1;
}

void sub_1AD9689CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21)
{
  uint64_t *v21;
  uint64_t v23;

  if (a15 < 0)
    operator delete(__p);
  if (a20)
  {
    a21 = (uint64_t)a20;
    operator delete(a20);
  }
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  v23 = *v21;
  *v21 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<float>>::resize(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = a2 >= v5;
  v7 = a2 - v5;
  if (v7 != 0 && v6)
  {
    std::vector<std::vector<float>>::__append(a1, v7, a3);
  }
  else if (!v6)
  {
    v8 = *a1 + 24 * a2;
    if (v4 != v8)
    {
      v9 = a1[1];
      do
      {
        v11 = *(void **)(v9 - 24);
        v9 -= 24;
        v10 = v11;
        if (v11)
        {
          *(_QWORD *)(v4 - 16) = v10;
          operator delete(v10);
        }
        v4 = v9;
      }
      while (v9 != v8);
    }
    a1[1] = v8;
  }
}

_QWORD *std::vector<std::vector<float>>::__append(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  _QWORD *v21;

  v8 = a1[2];
  result = a1 + 2;
  v7 = v8;
  v9 = (_QWORD *)*(result - 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)v9) >> 3) >= a2)
  {
    if (a2)
    {
      v15 = &v9[3 * a2];
      v16 = 24 * a2;
      do
      {
        *v9 = 0;
        v9[1] = 0;
        v9[2] = 0;
        result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v9, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
        v9 += 3;
        v16 -= 24;
      }
      while (v16);
      v9 = v15;
    }
    a1[1] = (uint64_t)v9;
  }
  else
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *a1) >> 3);
    v11 = v10 + a2;
    if (v10 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    v21 = result;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, v13);
    else
      v14 = 0;
    v17 = v14;
    v18 = &v14[24 * v10];
    v19 = v18;
    v20 = &v14[24 * v13];
    std::__split_buffer<std::vector<float>>::__construct_at_end(&v17, a2, a3);
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, &v17);
    return (_QWORD *)std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&v17);
  }
  return result;
}

void sub_1AD968C28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__split_buffer<std::vector<float>>::__construct_at_end(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;

  v3 = result;
  v4 = (_QWORD *)result[2];
  if (a2)
  {
    v6 = &v4[3 * a2];
    v7 = 24 * a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v4, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
      v4 += 3;
      v7 -= 24;
    }
    while (v7);
    v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_1AD968CC0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>,std::allocator<kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,kaldi::quasar::Phonomap&,kaldi::quasar::SymbolDecoderOptions &,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, __int128 *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x130uLL);
  result = std::__shared_ptr_emplace<kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,kaldi::quasar::Phonomap&,kaldi::quasar::SymbolDecoderOptions &,std::allocator<kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1AD968D24(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,kaldi::quasar::Phonomap&,kaldi::quasar::SymbolDecoderOptions &,std::allocator<kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  a1[2] = 0;
  *a1 = &unk_1E5D41E28;
  a1[1] = 0;
  kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::SymbolDecoder((uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_1AD968D70(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41E28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41E28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t *std::__shared_ptr_emplace<kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>>::__on_zero_shared(uint64_t a1)
{
  return kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::~SymbolDecoder((uint64_t *)(a1 + 24));
}

_QWORD *std::__hash_table<std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,std::__unordered_map_hasher<std::shared_ptr<quasar::URegularExpressionWrapper>,std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,std::hash<std::shared_ptr<quasar::URegularExpressionWrapper>>,std::equal_to<std::shared_ptr<quasar::URegularExpressionWrapper>>,true>,std::__unordered_map_equal<std::shared_ptr<quasar::URegularExpressionWrapper>,std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,std::equal_to<std::shared_ptr<quasar::URegularExpressionWrapper>>,std::hash<std::shared_ptr<quasar::URegularExpressionWrapper>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>>>::__emplace_unique_key_args<std::shared_ptr<quasar::URegularExpressionWrapper>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<quasar::URegularExpressionWrapper> const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD v30[2];
  char v31;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2)
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v15 = a1 + 16;
  v16 = operator new(0x38uLL);
  v30[0] = v16;
  v30[1] = a1 + 16;
  *v16 = 0;
  v16[1] = v9;
  v17 = *a4;
  v16[2] = **a4;
  v18 = v17[1];
  v16[3] = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v16[4] = 0;
  v16[5] = 0;
  v16[6] = 0;
  v31 = 1;
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (!v10 || (float)(v22 * (float)v10) < v21)
  {
    v23 = 1;
    if (v10 >= 3)
      v23 = (v10 & (v10 - 1)) != 0;
    v24 = v23 | (2 * v10);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      v26 = v25;
    else
      v26 = v24;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v26);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)v30[0] = *v27;
    *v27 = v30[0];
  }
  else
  {
    *(_QWORD *)v30[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v30[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v15;
    if (*(_QWORD *)v30[0])
    {
      v28 = *(_QWORD *)(*(_QWORD *)v30[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v28 >= v10)
          v28 %= v10;
      }
      else
      {
        v28 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v30[0];
    }
  }
  v13 = (_QWORD *)v30[0];
  v30[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v30, 0);
  return v13;
}

void sub_1AD969078(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<quasar::URegularExpressionWrapper>,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<quasar::URegularExpressionWrapper> const,std::string>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*,false>(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5, __n128 a6)
{
  __int128 *matched;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;
  char v22;
  char v23;

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(_OWORD *a1, _OWORD *a2, uint64_t (**a3)(__int128 *, uint64_t))
{
  _OWORD *v3;
  _OWORD *v5;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  char v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  _DWORD v28[2];
  void **v29;

  if (a1 != a2)
  {
    v3 = a2;
    v5 = (_OWORD *)((char *)a1 + 72);
    if ((_OWORD *)((char *)a1 + 72) != a2)
    {
      v7 = 0;
      v8 = a1;
      do
      {
        v9 = v5;
        if ((*a3)(v5, (uint64_t)v8))
        {
          v10 = *(_OWORD *)((char *)v8 + 88);
          v23 = *v9;
          v24 = v10;
          v25 = *((_QWORD *)v8 + 13);
          *((_QWORD *)v8 + 11) = 0;
          *((_QWORD *)v8 + 12) = 0;
          v26 = v8[7];
          v27 = *((_QWORD *)v8 + 16);
          *((_QWORD *)v8 + 13) = 0;
          *((_QWORD *)v8 + 14) = 0;
          *((_QWORD *)v8 + 15) = 0;
          *((_QWORD *)v8 + 16) = 0;
          v11 = *((_DWORD *)v8 + 34);
          *(_DWORD *)((char *)v28 + 3) = *(_DWORD *)((char *)v8 + 139);
          v12 = v7;
          v28[0] = v11;
          while (1)
          {
            v13 = v12;
            v14 = (uint64_t)a1 + v12;
            *(_OWORD *)((char *)a1 + v12 + 72) = *(_OWORD *)((char *)a1 + v12);
            std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate((void ***)((char *)a1 + v12 + 88));
            *(_OWORD *)(v14 + 88) = *(_OWORD *)(v14 + 16);
            *(_QWORD *)(v14 + 104) = *(_QWORD *)(v14 + 32);
            *(_QWORD *)(v14 + 24) = 0;
            *(_QWORD *)(v14 + 32) = 0;
            *(_QWORD *)(v14 + 16) = 0;
            v15 = (void **)(v14 + 112);
            if (*(char *)(v14 + 135) < 0)
              operator delete(*v15);
            *(_OWORD *)v15 = *(_OWORD *)(v14 + 40);
            *(_QWORD *)(v14 + 128) = *(_QWORD *)(v14 + 56);
            *(_BYTE *)(v14 + 63) = 0;
            *(_BYTE *)(v14 + 40) = 0;
            *(_DWORD *)(v14 + 136) = *(_DWORD *)(v14 + 64);
            *(_DWORD *)(v14 + 139) = *(_DWORD *)(v14 + 67);
            if (!v13)
              break;
            v16 = (*a3)(&v23, (uint64_t)a1 + v13 - 72);
            v12 = v13 - 72;
            if ((v16 & 1) == 0)
            {
              v17 = (_OWORD *)((char *)a1 + v13);
              goto LABEL_12;
            }
          }
          v17 = a1;
LABEL_12:
          *v17 = v23;
          v18 = (uint64_t)a1 + v13;
          std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate((void ***)(v18 + 16));
          v19 = *((_QWORD *)&v24 + 1);
          *(_QWORD *)(v18 + 16) = v24;
          v20 = v25;
          *((_QWORD *)v17 + 3) = v19;
          *((_QWORD *)v17 + 4) = v20;
          v25 = 0;
          v24 = 0uLL;
          v21 = (void **)(v18 + 40);
          if (*((char *)v17 + 63) < 0)
            operator delete(*v21);
          *(_OWORD *)v21 = v26;
          *(_QWORD *)(v18 + 56) = v27;
          HIBYTE(v27) = 0;
          LOBYTE(v26) = 0;
          *(_DWORD *)(v18 + 64) = v28[0];
          *(_DWORD *)(v18 + 67) = *(_DWORD *)((char *)v28 + 3);
          v29 = (void **)&v24;
          std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100](&v29);
          v3 = a2;
        }
        v5 = (_OWORD *)((char *)v9 + 72);
        v7 += 72;
        v8 = v9;
      }
      while ((_OWORD *)((char *)v9 + 72) != v3);
    }
  }
}

void sub_1AD969660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  quasar::PhoneticMatchResult::~PhoneticMatchResult((void **)va);
  _Unwind_Resume(a1);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(_OWORD *a1, _OWORD *a2, uint64_t (**a3)(__int128 *, uint64_t))
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  int v10;
  uint64_t v11;
  void **v12;
  char v13;
  void **v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  _DWORD v20[2];
  void **v21;

  if (a1 != a2)
  {
    v4 = a1;
    v5 = (_OWORD *)((char *)a1 + 72);
    if ((_OWORD *)((char *)a1 + 72) != a2)
    {
      v7 = (uint64_t)a1 - 72;
      do
      {
        v8 = v5;
        if ((*a3)(v5, (uint64_t)v4))
        {
          v9 = *(_OWORD *)((char *)v4 + 88);
          v15 = *v8;
          v16 = v9;
          v17 = *((_QWORD *)v4 + 13);
          *((_QWORD *)v4 + 11) = 0;
          *((_QWORD *)v4 + 12) = 0;
          v18 = v4[7];
          v19 = *((_QWORD *)v4 + 16);
          *((_QWORD *)v4 + 13) = 0;
          *((_QWORD *)v4 + 14) = 0;
          *((_QWORD *)v4 + 15) = 0;
          *((_QWORD *)v4 + 16) = 0;
          v10 = *((_DWORD *)v4 + 34);
          *(_DWORD *)((char *)v20 + 3) = *(_DWORD *)((char *)v4 + 139);
          v11 = v7;
          v20[0] = v10;
          do
          {
            *(_OWORD *)(v11 + 144) = *(_OWORD *)(v11 + 72);
            std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate((void ***)(v11 + 160));
            *(_OWORD *)(v11 + 160) = *(_OWORD *)(v11 + 88);
            *(_QWORD *)(v11 + 176) = *(_QWORD *)(v11 + 104);
            *(_QWORD *)(v11 + 96) = 0;
            *(_QWORD *)(v11 + 104) = 0;
            *(_QWORD *)(v11 + 88) = 0;
            v12 = (void **)(v11 + 184);
            if (*(char *)(v11 + 207) < 0)
              operator delete(*v12);
            *(_OWORD *)v12 = *(_OWORD *)(v11 + 112);
            *(_QWORD *)(v11 + 200) = *(_QWORD *)(v11 + 128);
            *(_BYTE *)(v11 + 135) = 0;
            *(_BYTE *)(v11 + 112) = 0;
            *(_DWORD *)(v11 + 208) = *(_DWORD *)(v11 + 136);
            *(_DWORD *)(v11 + 211) = *(_DWORD *)(v11 + 139);
            v13 = (*a3)(&v15, v11);
            v11 -= 72;
          }
          while ((v13 & 1) != 0);
          *(_OWORD *)(v11 + 144) = v15;
          std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate((void ***)(v11 + 160));
          *(_OWORD *)(v11 + 160) = v16;
          *(_QWORD *)(v11 + 176) = v17;
          v17 = 0;
          v16 = 0uLL;
          v14 = (void **)(v11 + 184);
          if (*(char *)(v11 + 207) < 0)
            operator delete(*v14);
          *(_OWORD *)v14 = v18;
          *(_QWORD *)(v11 + 200) = v19;
          HIBYTE(v19) = 0;
          LOBYTE(v18) = 0;
          *(_DWORD *)(v11 + 208) = v20[0];
          *(_DWORD *)(v11 + 211) = *(_DWORD *)((char *)v20 + 3);
          v21 = (void **)&v16;
          std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100](&v21);
        }
        v5 = (_OWORD *)((char *)v8 + 72);
        v7 += 72;
        v4 = v8;
      }
      while ((_OWORD *)((char *)v8 + 72) != a2);
    }
  }
}

void sub_1AD969848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  quasar::PhoneticMatchResult::~PhoneticMatchResult(&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t (**a4)(__int128 *, __int128 *))
{
  char v8;
  uint64_t result;
  __int128 *v10;
  __int128 *v11;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    std::swap[abi:ne180100]<quasar::PhoneticMatchResult>(a2, a3);
    if (!(*a4)(a2, a1))
      return 1;
    v10 = a1;
    v11 = a2;
    goto LABEL_9;
  }
  if (!(_DWORD)result)
  {
    std::swap[abi:ne180100]<quasar::PhoneticMatchResult>(a1, a2);
    if (!(*a4)(a3, a2))
      return 1;
    v10 = a2;
    v11 = a3;
LABEL_9:
    std::swap[abi:ne180100]<quasar::PhoneticMatchResult>(v10, v11);
    return 2;
  }
  std::swap[abi:ne180100]<quasar::PhoneticMatchResult>(a1, a3);
  return 1;
}

__int128 *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,quasar::PhoneticMatchResult *,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&)>(uint64_t a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  __int128 *v4;
  void ***v6;
  __int128 v7;
  __int128 v8;
  int v9;
  _DWORD *v10;
  __int128 *v11;
  __int128 *v12;
  int v13;
  __int128 *v14;
  void **v15;
  __int128 v16;
  int v17;
  void **v18;
  __int128 v19;
  int v20;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  void *__p[2];
  uint64_t v26;
  _BYTE v27[7];
  void **v28;

  v4 = a2;
  v6 = (void ***)(a1 + 16);
  v7 = *(_OWORD *)(a1 + 16);
  v22 = *(_OWORD *)a1;
  v23 = v7;
  v24 = *(_QWORD *)(a1 + 32);
  v8 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)__p = v8;
  v26 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v10 = (_DWORD *)(a1 + 64);
  v9 = *(_DWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)&v27[3] = *(_DWORD *)(a1 + 67);
  *(_DWORD *)v27 = v9;
  if (((*a3)(&v22, (__int128 *)((char *)a2 - 72)) & 1) != 0)
  {
    v11 = (__int128 *)a1;
    do
      v11 = (__int128 *)((char *)v11 + 72);
    while (((*a3)(&v22, v11) & 1) == 0);
  }
  else
  {
    v12 = (__int128 *)(a1 + 72);
    do
    {
      v11 = v12;
      if (v12 >= v4)
        break;
      v13 = (*a3)(&v22, v12);
      v12 = (__int128 *)((char *)v11 + 72);
    }
    while (!v13);
  }
  if (v11 < v4)
  {
    do
      v4 = (__int128 *)((char *)v4 - 72);
    while (((*a3)(&v22, v4) & 1) != 0);
  }
  while (v11 < v4)
  {
    std::swap[abi:ne180100]<quasar::PhoneticMatchResult>(v11, v4);
    do
      v11 = (__int128 *)((char *)v11 + 72);
    while (!(*a3)(&v22, v11));
    do
      v4 = (__int128 *)((char *)v4 - 72);
    while (((*a3)(&v22, v4) & 1) != 0);
  }
  v14 = (__int128 *)((char *)v11 - 72);
  if ((__int128 *)((char *)v11 - 72) != (__int128 *)a1)
  {
    v15 = (void **)(a1 + 40);
    *(_OWORD *)a1 = *v14;
    std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate(v6);
    *(_OWORD *)(a1 + 16) = *(__int128 *)((char *)v11 - 56);
    *(_QWORD *)(a1 + 32) = *((_QWORD *)v11 - 5);
    *((_QWORD *)v11 - 7) = 0;
    *((_QWORD *)v11 - 6) = 0;
    *((_QWORD *)v11 - 5) = 0;
    if (*(char *)(a1 + 63) < 0)
      operator delete(*v15);
    v16 = *(v11 - 2);
    *(_QWORD *)(a1 + 56) = *((_QWORD *)v11 - 2);
    *(_OWORD *)v15 = v16;
    *((_BYTE *)v11 - 9) = 0;
    *((_BYTE *)v11 - 32) = 0;
    v17 = *((_DWORD *)v11 - 2);
    *(_DWORD *)((char *)v10 + 3) = *(_DWORD *)((char *)v11 - 5);
    *v10 = v17;
  }
  *v14 = v22;
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate((void ***)v11 - 7);
  *(__int128 *)((char *)v11 - 56) = v23;
  *((_QWORD *)v11 - 5) = v24;
  v23 = 0uLL;
  v24 = 0;
  v18 = (void **)(v11 - 2);
  if (*((char *)v11 - 9) < 0)
    operator delete(*v18);
  v19 = *(_OWORD *)__p;
  *((_QWORD *)v11 - 2) = v26;
  *(_OWORD *)v18 = v19;
  HIBYTE(v26) = 0;
  LOBYTE(__p[0]) = 0;
  v20 = *(_DWORD *)v27;
  *(_DWORD *)((char *)v11 - 5) = *(_DWORD *)&v27[3];
  *((_DWORD *)v11 - 2) = v20;
  if (SHIBYTE(v26) < 0)
    operator delete(__p[0]);
  v28 = (void **)&v23;
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100](&v28);
  return v11;
}

void sub_1AD969B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  quasar::PhoneticMatchResult::~PhoneticMatchResult(&a9);
  _Unwind_Resume(a1);
}

char *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,quasar::PhoneticMatchResult *,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&)>(uint64_t a1, __int128 *a2, uint64_t (**a3)(uint64_t, __int128 *))
{
  uint64_t v6;
  void ***v7;
  __int128 v8;
  __int128 v9;
  _DWORD *v10;
  char v11;
  unint64_t v12;
  __int128 *v13;
  __int128 *v14;
  __int128 *v15;
  __int128 v16;
  int v17;
  void **v18;
  __int128 v19;
  int v20;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  void *__p[2];
  uint64_t v27;
  _BYTE v28[7];
  void **v29;

  v6 = 0;
  v7 = (void ***)(a1 + 16);
  v8 = *(_OWORD *)(a1 + 16);
  v23 = *(_OWORD *)a1;
  v24 = v8;
  v25 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = 0;
  v9 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v22 = a1 + 40;
  *(_OWORD *)__p = v9;
  v27 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)&v28[3] = *(_DWORD *)(a1 + 67);
  v10 = (_DWORD *)(a1 + 64);
  *(_DWORD *)v28 = *(_DWORD *)(a1 + 64);
  do
  {
    v11 = (*a3)(a1 + v6 + 72, &v23);
    v6 += 72;
  }
  while ((v11 & 1) != 0);
  v12 = a1 + v6;
  if (v6 == 72)
  {
    do
    {
      if (v12 >= (unint64_t)a2)
        break;
      a2 = (__int128 *)((char *)a2 - 72);
    }
    while (((*a3)((uint64_t)a2, &v23) & 1) == 0);
  }
  else
  {
    do
      a2 = (__int128 *)((char *)a2 - 72);
    while (!(*a3)((uint64_t)a2, &v23));
  }
  v13 = (__int128 *)(a1 + v6);
  if (v12 < (unint64_t)a2)
  {
    v14 = a2;
    do
    {
      std::swap[abi:ne180100]<quasar::PhoneticMatchResult>(v13, v14);
      do
        v13 = (__int128 *)((char *)v13 + 72);
      while (((*a3)((uint64_t)v13, &v23) & 1) != 0);
      do
        v14 = (__int128 *)((char *)v14 - 72);
      while (!(*a3)((uint64_t)v14, &v23));
    }
    while (v13 < v14);
  }
  v15 = (__int128 *)((char *)v13 - 72);
  if ((__int128 *)((char *)v13 - 72) != (__int128 *)a1)
  {
    *(_OWORD *)a1 = *v15;
    std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate(v7);
    *(_OWORD *)(a1 + 16) = *(__int128 *)((char *)v13 - 56);
    *(_QWORD *)(a1 + 32) = *((_QWORD *)v13 - 5);
    *((_QWORD *)v13 - 7) = 0;
    *((_QWORD *)v13 - 6) = 0;
    *((_QWORD *)v13 - 5) = 0;
    if (*(char *)(a1 + 63) < 0)
      operator delete(*(void **)v22);
    v16 = *(v13 - 2);
    *(_QWORD *)(v22 + 16) = *((_QWORD *)v13 - 2);
    *(_OWORD *)v22 = v16;
    *((_BYTE *)v13 - 9) = 0;
    *((_BYTE *)v13 - 32) = 0;
    v17 = *((_DWORD *)v13 - 2);
    *(_DWORD *)((char *)v10 + 3) = *(_DWORD *)((char *)v13 - 5);
    *v10 = v17;
  }
  *v15 = v23;
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate((void ***)v13 - 7);
  *(__int128 *)((char *)v13 - 56) = v24;
  *((_QWORD *)v13 - 5) = v25;
  v24 = 0uLL;
  v25 = 0;
  v18 = (void **)(v13 - 2);
  if (*((char *)v13 - 9) < 0)
    operator delete(*v18);
  v19 = *(_OWORD *)__p;
  *((_QWORD *)v13 - 2) = v27;
  *(_OWORD *)v18 = v19;
  HIBYTE(v27) = 0;
  LOBYTE(__p[0]) = 0;
  v20 = *(_DWORD *)v28;
  *(_DWORD *)((char *)v13 - 5) = *(_DWORD *)&v28[3];
  *((_DWORD *)v13 - 2) = v20;
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
  v29 = (void **)&v24;
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100](&v29);
  return (char *)v13 - 72;
}

void sub_1AD969E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  quasar::PhoneticMatchResult::~PhoneticMatchResult((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  __int128 *v4;
  _BOOL8 v6;
  __int128 *v7;
  __int128 *v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void **v16;
  char v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  __int128 *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _DWORD v30[2];
  void **v31;

  v4 = a2;
  v6 = 1;
  switch(0x8E38E38E38E38E39 * (((char *)a2 - (char *)a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v6;
    case 2uLL:
      if ((*a3)((__int128 *)((char *)a2 - 72), a1))
        std::swap[abi:ne180100]<quasar::PhoneticMatchResult>(a1, (__int128 *)((char *)v4 - 72));
      return v6;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(a1, (__int128 *)((char *)a1 + 72), (__int128 *)((char *)a2 - 72), a3);
      return v6;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(a1, (__int128 *)((char *)a1 + 72), a1 + 9, (__int128 *)((char *)a2 - 72), a3);
      return v6;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(a1, (__int128 *)((char *)a1 + 72), a1 + 9, (__int128 *)((char *)a1 + 216), (__int128 *)((char *)a2 - 72), a3);
      return v6;
    default:
      v7 = a1 + 9;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(a1, (__int128 *)((char *)a1 + 72), a1 + 9, a3);
      v8 = (__int128 *)((char *)a1 + 216);
      if ((__int128 *)((char *)a1 + 216) == v4)
        return 1;
      v9 = 0;
      v10 = 0;
      v24 = v4;
      break;
  }
  while (!(*a3)(v8, v7))
  {
LABEL_18:
    v7 = v8;
    v9 += 72;
    v8 = (__int128 *)((char *)v8 + 72);
    if (v8 == v4)
      return 1;
  }
  v11 = v8[1];
  v25 = *v8;
  v26 = v11;
  v27 = *((_QWORD *)v8 + 4);
  *((_QWORD *)v8 + 2) = 0;
  *((_QWORD *)v8 + 3) = 0;
  v12 = *(__int128 *)((char *)v8 + 40);
  *((_QWORD *)v8 + 4) = 0;
  *((_QWORD *)v8 + 5) = 0;
  v28 = v12;
  v29 = *((_QWORD *)v8 + 7);
  *(_DWORD *)((char *)v30 + 3) = *(_DWORD *)((char *)v8 + 67);
  v30[0] = *((_DWORD *)v8 + 16);
  v13 = v9;
  *((_QWORD *)v8 + 6) = 0;
  *((_QWORD *)v8 + 7) = 0;
  while (1)
  {
    v14 = v13;
    v15 = (char *)a1 + v13;
    *(__int128 *)((char *)a1 + v13 + 216) = *(__int128 *)((char *)a1 + v13 + 144);
    std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate((void ***)((char *)a1 + v13 + 232));
    *(_OWORD *)(v15 + 232) = *((_OWORD *)v15 + 10);
    *((_QWORD *)v15 + 31) = *((_QWORD *)v15 + 22);
    *((_QWORD *)v15 + 21) = 0;
    *((_QWORD *)v15 + 22) = 0;
    *((_QWORD *)v15 + 20) = 0;
    v16 = (void **)(v15 + 256);
    if (v15[279] < 0)
      operator delete(*v16);
    *(_OWORD *)v16 = *(_OWORD *)(v15 + 184);
    *((_QWORD *)v15 + 34) = *((_QWORD *)v15 + 25);
    v15[207] = 0;
    v15[184] = 0;
    *((_DWORD *)v15 + 70) = *((_DWORD *)v15 + 52);
    *(_DWORD *)(v15 + 283) = *(_DWORD *)(v15 + 211);
    if (v14 == -144)
      break;
    v17 = (*a3)(&v25, (__int128 *)((char *)a1 + v14 + 72));
    v13 = v14 - 72;
    if ((v17 & 1) == 0)
    {
      v18 = (uint64_t)a1 + v13 + 216;
      goto LABEL_14;
    }
  }
  v18 = (uint64_t)a1;
LABEL_14:
  *(_OWORD *)v18 = v25;
  v19 = (char *)a1 + v14;
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate((void ***)v19 + 20);
  v20 = *((_QWORD *)&v26 + 1);
  *((_QWORD *)v19 + 20) = v26;
  v21 = v27;
  *(_QWORD *)(v18 + 24) = v20;
  *(_QWORD *)(v18 + 32) = v21;
  v27 = 0;
  v26 = 0uLL;
  v22 = (void **)(v19 + 184);
  if (*(char *)(v18 + 63) < 0)
    operator delete(*v22);
  *(_OWORD *)v22 = v28;
  *((_QWORD *)v19 + 25) = v29;
  HIBYTE(v29) = 0;
  LOBYTE(v28) = 0;
  *((_DWORD *)v19 + 52) = v30[0];
  *(_DWORD *)(v19 + 211) = *(_DWORD *)((char *)v30 + 3);
  if (++v10 != 8)
  {
    v31 = (void **)&v26;
    std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100](&v31);
    v4 = v24;
    goto LABEL_18;
  }
  v6 = (__int128 *)((char *)v8 + 72) == v24;
  v31 = (void **)&v26;
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100](&v31);
  return v6;
}

void sub_1AD96A168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  quasar::PhoneticMatchResult::~PhoneticMatchResult((void **)va);
  _Unwind_Resume(a1);
}

void std::swap[abi:ne180100]<quasar::PhoneticMatchResult>(__int128 *a1, __int128 *a2)
{
  __int128 v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _DWORD *v9;
  void **v10;
  __int128 v11;
  int v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  _BYTE v20[7];
  void **v21;

  v4 = *a1;
  v17 = 0;
  v5 = a1 + 1;
  v6 = *((_QWORD *)a1 + 2);
  v15 = v6;
  v13 = *(__int128 *)((char *)a1 + 24);
  v14 = v4;
  v16 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 2) = 0;
  *((_QWORD *)a1 + 3) = 0;
  *((_QWORD *)a1 + 4) = 0;
  v7 = (uint64_t)a1 + 40;
  v18 = *(__int128 *)((char *)a1 + 40);
  v19 = *((_QWORD *)a1 + 7);
  *((_QWORD *)a1 + 6) = 0;
  *((_QWORD *)a1 + 7) = 0;
  v9 = a1 + 4;
  v8 = *((_DWORD *)a1 + 16);
  *((_QWORD *)a1 + 5) = 0;
  *(_DWORD *)&v20[3] = *(_DWORD *)((char *)a1 + 67);
  *(_DWORD *)v20 = v8;
  *a1 = *a2;
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate((void ***)a1 + 2);
  *v5 = a2[1];
  *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  if (*((char *)a1 + 63) < 0)
    operator delete(*(void **)v7);
  v10 = (void **)a2 + 5;
  v11 = *(__int128 *)((char *)a2 + 40);
  *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 7);
  *(_OWORD *)v7 = v11;
  *((_BYTE *)a2 + 63) = 0;
  v12 = *((_DWORD *)a2 + 16);
  *((_BYTE *)a2 + 40) = 0;
  *(_DWORD *)((char *)v9 + 3) = *(_DWORD *)((char *)a2 + 67);
  *v9 = v12;
  *a2 = v14;
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate((void ***)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  *(__int128 *)((char *)a2 + 24) = v13;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  if (*((char *)a2 + 63) < 0)
    operator delete(*v10);
  *(_OWORD *)v10 = v18;
  *((_QWORD *)a2 + 7) = v19;
  HIBYTE(v19) = 0;
  LOBYTE(v18) = 0;
  *((_DWORD *)a2 + 16) = *(_DWORD *)v20;
  *(_DWORD *)((char *)a2 + 67) = *(_DWORD *)&v20[3];
  v21 = (void **)&v15;
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100](&v21);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t (**a5)(__int128 *, __int128 *))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(a1, a2, a3, a5);
  if ((*a5)(a4, a3))
  {
    std::swap[abi:ne180100]<quasar::PhoneticMatchResult>(a3, a4);
    if ((*a5)(a3, a2))
    {
      std::swap[abi:ne180100]<quasar::PhoneticMatchResult>(a2, a3);
      if ((*a5)(a2, a1))
        std::swap[abi:ne180100]<quasar::PhoneticMatchResult>(a1, a2);
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5, uint64_t (**a6)(__int128 *, __int128 *))
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(a1, a2, a3, a4, a6);
  if ((*a6)(a5, a4))
  {
    std::swap[abi:ne180100]<quasar::PhoneticMatchResult>(a4, a5);
    if ((*a6)(a4, a3))
    {
      std::swap[abi:ne180100]<quasar::PhoneticMatchResult>(a3, a4);
      if ((*a6)(a3, a2))
      {
        std::swap[abi:ne180100]<quasar::PhoneticMatchResult>(a2, a3);
        if ((*a6)(a2, a1))
          std::swap[abi:ne180100]<quasar::PhoneticMatchResult>(a1, a2);
      }
    }
  }
}

__int128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*,quasar::PhoneticMatchResult*>(__int128 *a1, __int128 *a2, __int128 *a3, unsigned int (**a4)(uint64_t, uint64_t), __n128 matched)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 *v13;
  uint64_t v14;
  __int128 *v15;
  unint64_t v16;

  if (a1 != a2)
  {
    v7 = (uint64_t)a2;
    v9 = (char *)a2 - (char *)a1;
    v10 = ((char *)a2 - (char *)a1) / 72;
    if ((char *)a2 - (char *)a1 >= 73)
    {
      v11 = (unint64_t)(v10 - 2) >> 1;
      v12 = v11 + 1;
      v13 = (__int128 *)((char *)a1 + 72 * v11);
      do
      {
        matched = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>((uint64_t)a1, a4, v10, v13);
        v13 = (__int128 *)((char *)v13 - 72);
        --v12;
      }
      while (v12);
    }
    v14 = v7;
    if ((__int128 *)v7 != a3)
    {
      v15 = (__int128 *)v7;
      do
      {
        if (((unsigned int (*)(__int128 *, __int128 *, __n128))*a4)(v15, a1, matched))
        {
          std::swap[abi:ne180100]<quasar::PhoneticMatchResult>(v15, a1);
          matched = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>((uint64_t)a1, a4, v10, a1);
        }
        v15 = (__int128 *)((char *)v15 + 72);
      }
      while (v15 != a3);
      v14 = (uint64_t)a3;
    }
    if (v9 >= 73)
    {
      v16 = v9 / 0x48uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>((uint64_t)a1, v7, a4, v16);
        v7 -= 72;
      }
      while (v16-- > 2);
    }
    return (__int128 *)v14;
  }
  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3, __int128 *a4)
{
  unint64_t v4;
  __int128 *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  __int128 v13;
  __int128 v14;
  __int128 *v15;
  void ***v16;
  void **v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  void **v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _BYTE v30[7];
  void **v31;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v24 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0x8E38E38E38E38E39 * (((uint64_t)a4 - a1) >> 3)))
    {
      v9 = (0x1C71C71C71C71C72 * (((uint64_t)a4 - a1) >> 3)) | 1;
      v10 = a1 + 72 * v9;
      v11 = 0x1C71C71C71C71C72 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v11 < a3 && (*a2)(a1 + 72 * v9, v10 + 72))
      {
        v10 += 72;
        v9 = v11;
      }
      if ((((uint64_t (*)(uint64_t, __int128 *))*a2)(v10, v5) & 1) == 0)
      {
        v13 = v5[1];
        v25 = *v5;
        v26 = v13;
        v27 = *((_QWORD *)v5 + 4);
        *((_QWORD *)v5 + 2) = 0;
        *((_QWORD *)v5 + 3) = 0;
        v14 = *(__int128 *)((char *)v5 + 40);
        *((_QWORD *)v5 + 4) = 0;
        *((_QWORD *)v5 + 5) = 0;
        v28 = v14;
        v29 = *((_QWORD *)v5 + 7);
        *(_DWORD *)&v30[3] = *(_DWORD *)((char *)v5 + 67);
        *(_DWORD *)v30 = *((_DWORD *)v5 + 16);
        *((_QWORD *)v5 + 6) = 0;
        *((_QWORD *)v5 + 7) = 0;
        do
        {
          v15 = (__int128 *)v10;
          *v5 = *(_OWORD *)v10;
          std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate((void ***)v5 + 2);
          v16 = (void ***)(v10 + 16);
          v5[1] = *(_OWORD *)(v10 + 16);
          *((_QWORD *)v5 + 4) = *(_QWORD *)(v10 + 32);
          *(_QWORD *)(v10 + 16) = 0;
          *(_QWORD *)(v10 + 24) = 0;
          *(_QWORD *)(v10 + 32) = 0;
          v17 = (void **)v5 + 5;
          if (*((char *)v5 + 63) < 0)
            operator delete(*v17);
          v18 = *(__int128 *)((char *)v15 + 40);
          *((_QWORD *)v5 + 7) = *((_QWORD *)v15 + 7);
          *(_OWORD *)v17 = v18;
          v19 = *((_DWORD *)v15 + 16);
          *((_BYTE *)v15 + 63) = 0;
          *((_BYTE *)v15 + 40) = 0;
          *(_DWORD *)((char *)v5 + 67) = *(_DWORD *)((char *)v15 + 67);
          *((_DWORD *)v5 + 16) = v19;
          if (v24 < v9)
            break;
          v20 = (2 * v9) | 1;
          v10 = a1 + 72 * v20;
          v9 = 2 * v9 + 2;
          if (v9 >= a3)
          {
            v9 = v20;
          }
          else if ((*a2)(a1 + 72 * v20, v10 + 72))
          {
            v10 += 72;
          }
          else
          {
            v9 = v20;
          }
          v5 = v15;
        }
        while (!(*a2)(v10, (uint64_t)&v25));
        v21 = (void **)v15 + 5;
        *v15 = v25;
        std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate(v16);
        v15[1] = v26;
        *((_QWORD *)v15 + 4) = v27;
        v26 = 0uLL;
        v27 = 0;
        if (*((char *)v15 + 63) < 0)
          operator delete(*v21);
        v22 = v28;
        *((_QWORD *)v15 + 7) = v29;
        *(_OWORD *)v21 = v22;
        HIBYTE(v29) = 0;
        LOBYTE(v28) = 0;
        v23 = *(_DWORD *)&v30[3];
        *((_DWORD *)v15 + 16) = *(_DWORD *)v30;
        *(_DWORD *)((char *)v15 + 67) = v23;
        v31 = (void **)&v26;
        std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100](&v31);
      }
    }
  }
  return result;
}

void sub_1AD96A854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  quasar::PhoneticMatchResult::~PhoneticMatchResult((void **)va);
  _Unwind_Resume(a1);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(uint64_t a1, uint64_t a2, unsigned int (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  __int128 v7;
  uint64_t matched;
  _OWORD *v9;
  void ***v10;
  _QWORD *v11;
  void **v12;
  void **v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  void **v17;
  __int128 v18;
  int v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  void *__p[2];
  uint64_t v24;
  _BYTE v25[7];
  void **v26;

  if (a4 >= 2)
  {
    v20 = *(_OWORD *)a1;
    v21 = *(_OWORD *)(a1 + 16);
    v22 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    v7 = *(_OWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_OWORD *)__p = v7;
    v24 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_DWORD *)&v25[3] = *(_DWORD *)(a1 + 67);
    *(_DWORD *)v25 = *(_DWORD *)(a1 + 64);
    matched = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(a1, a3, a4);
    v9 = (_OWORD *)(a2 - 72);
    v10 = (void ***)(matched + 16);
    if (matched == a2 - 72)
    {
      *(_OWORD *)matched = v20;
      std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate(v10);
      *(_OWORD *)(matched + 16) = v21;
      *(_QWORD *)(matched + 32) = v22;
      v21 = 0uLL;
      v22 = 0;
      v17 = (void **)(matched + 40);
      if (*(char *)(matched + 63) < 0)
        operator delete(*v17);
      v18 = *(_OWORD *)__p;
      *(_QWORD *)(matched + 56) = v24;
      *(_OWORD *)v17 = v18;
      HIBYTE(v24) = 0;
      LOBYTE(__p[0]) = 0;
      v19 = *(_DWORD *)&v25[3];
      *(_DWORD *)(matched + 64) = *(_DWORD *)v25;
      *(_DWORD *)(matched + 67) = v19;
    }
    else
    {
      *(_OWORD *)matched = *v9;
      std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate(v10);
      v11 = (_QWORD *)(a2 - 56);
      *(_OWORD *)(matched + 16) = *(_OWORD *)(a2 - 56);
      *(_QWORD *)(matched + 32) = *(_QWORD *)(a2 - 40);
      *v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
      v12 = (void **)(matched + 40);
      if (*(char *)(matched + 63) < 0)
        operator delete(*v12);
      v13 = (void **)(a2 - 32);
      v14 = *(_OWORD *)(a2 - 32);
      *(_QWORD *)(matched + 56) = *(_QWORD *)(a2 - 16);
      *(_OWORD *)v12 = v14;
      v15 = *(_DWORD *)(a2 - 8);
      *(_BYTE *)(a2 - 9) = 0;
      *(_BYTE *)(a2 - 32) = 0;
      *(_DWORD *)(matched + 67) = *(_DWORD *)(a2 - 5);
      *(_DWORD *)(matched + 64) = v15;
      v16 = matched + 72;
      *v9 = v20;
      std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate((void ***)(a2 - 56));
      *(_OWORD *)(a2 - 56) = v21;
      *(_QWORD *)(a2 - 40) = v22;
      v22 = 0;
      v21 = 0uLL;
      if (*(char *)(a2 - 9) < 0)
        operator delete(*v13);
      *(_OWORD *)v13 = *(_OWORD *)__p;
      *(_QWORD *)(a2 - 16) = v24;
      HIBYTE(v24) = 0;
      LOBYTE(__p[0]) = 0;
      *(_DWORD *)(a2 - 8) = *(_DWORD *)v25;
      *(_DWORD *)(a2 - 5) = *(_DWORD *)&v25[3];
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(a1, v16, (uint64_t (**)(__int128 *, __int128 *))a3, 0x8E38E38E38E38E39 * ((v16 - a1) >> 3));
      if (SHIBYTE(v24) < 0)
        operator delete(__p[0]);
    }
    v26 = (void **)&v21;
    std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100](&v26);
  }
}

void sub_1AD96AAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  quasar::PhoneticMatchResult::~PhoneticMatchResult((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  __int128 v13;
  int v14;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = a1 + 72 * v6 + 72;
    v10 = 2 * v6;
    v6 = (2 * v6) | 1;
    v11 = v10 + 2;
    if (v10 + 2 < a3 && (*a2)(v9, v9 + 72))
    {
      v9 += 72;
      v6 = v11;
    }
    *(_OWORD *)a1 = *(_OWORD *)v9;
    std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate((void ***)(a1 + 16));
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(v9 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v9 + 32);
    *(_QWORD *)(v9 + 16) = 0;
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 32) = 0;
    v12 = (void **)(a1 + 40);
    if (*(char *)(a1 + 63) < 0)
      operator delete(*v12);
    v13 = *(_OWORD *)(v9 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v9 + 56);
    *(_OWORD *)v12 = v13;
    *(_BYTE *)(v9 + 63) = 0;
    *(_BYTE *)(v9 + 40) = 0;
    v14 = *(_DWORD *)(v9 + 64);
    *(_DWORD *)(a1 + 67) = *(_DWORD *)(v9 + 67);
    *(_DWORD *)(a1 + 64) = v14;
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  __int128 v11;
  __int128 v12;
  __int128 *v13;
  void ***v14;
  void **v15;
  __int128 v16;
  int v17;
  void **v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  _BYTE v24[7];
  void **v25;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v8 = v4 >> 1;
    v9 = (__int128 *)(a1 + 72 * (v4 >> 1));
    v10 = (__int128 *)(a2 - 72);
    if ((*a3)(v9, (__int128 *)(a2 - 72)))
    {
      v11 = *(_OWORD *)(a2 - 56);
      v19 = *v10;
      v20 = v11;
      v21 = *(_QWORD *)(a2 - 40);
      *(_QWORD *)(a2 - 56) = 0;
      *(_QWORD *)(a2 - 48) = 0;
      v12 = *(_OWORD *)(a2 - 32);
      *(_QWORD *)(a2 - 40) = 0;
      *(_QWORD *)(a2 - 32) = 0;
      v22 = v12;
      v23 = *(_QWORD *)(a2 - 16);
      *(_QWORD *)(a2 - 24) = 0;
      *(_QWORD *)(a2 - 16) = 0;
      *(_DWORD *)&v24[3] = *(_DWORD *)(a2 - 5);
      *(_DWORD *)v24 = *(_DWORD *)(a2 - 8);
      do
      {
        v13 = v9;
        *v10 = *v9;
        std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate((void ***)v10 + 2);
        v14 = (void ***)(v9 + 1);
        v10[1] = v9[1];
        *((_QWORD *)v10 + 4) = *((_QWORD *)v9 + 4);
        *((_QWORD *)v9 + 2) = 0;
        *((_QWORD *)v9 + 3) = 0;
        *((_QWORD *)v9 + 4) = 0;
        v15 = (void **)v10 + 5;
        if (*((char *)v10 + 63) < 0)
          operator delete(*v15);
        v16 = *(__int128 *)((char *)v13 + 40);
        *((_QWORD *)v10 + 7) = *((_QWORD *)v13 + 7);
        *(_OWORD *)v15 = v16;
        v17 = *((_DWORD *)v13 + 16);
        *((_BYTE *)v13 + 63) = 0;
        *((_BYTE *)v13 + 40) = 0;
        *(_DWORD *)((char *)v10 + 67) = *(_DWORD *)((char *)v13 + 67);
        *((_DWORD *)v10 + 16) = v17;
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = (__int128 *)(a1 + 72 * v8);
        v10 = v13;
      }
      while (((*a3)(v9, &v19) & 1) != 0);
      v18 = (void **)v13 + 5;
      *v13 = v19;
      std::vector<quasar::PhoneticMatchAlignmentSpan>::__vdeallocate(v14);
      v13[1] = v20;
      *((_QWORD *)v13 + 4) = v21;
      v21 = 0;
      v20 = 0uLL;
      if (*((char *)v13 + 63) < 0)
        operator delete(*v18);
      *(_OWORD *)v18 = v22;
      *((_QWORD *)v13 + 7) = v23;
      HIBYTE(v23) = 0;
      LOBYTE(v22) = 0;
      *((_DWORD *)v13 + 16) = *(_DWORD *)v24;
      *(_DWORD *)((char *)v13 + 67) = *(_DWORD *)&v24[3];
      v25 = (void **)&v20;
      std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100](&v25);
    }
  }
}

void sub_1AD96ADB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  quasar::PhoneticMatchResult::~PhoneticMatchResult((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::PhoneticMatchAlignmentSpan>::__push_back_slow_path<quasar::PhoneticMatchAlignmentSpan const&>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3);
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 3) >= 0x1C71C71C71C71C7)
    v6 = 0x38E38E38E38E38ELL;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationToken>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[72 * v3];
  v13 = &v7[72 * v6];
  std::allocator<quasar::PhoneticMatchAlignmentSpan>::construct[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan,quasar::PhoneticMatchAlignmentSpan const&>((uint64_t)(a1 + 2), v11, a2);
  v12 = v11 + 72;
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<quasar::PhoneticMatchAlignmentSpan>::~__split_buffer(&v10);
  return v8;
}

void sub_1AD96AED4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::PhoneticMatchAlignmentSpan>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::allocator<quasar::PhoneticMatchAlignmentSpan>::construct[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan,quasar::PhoneticMatchAlignmentSpan const&>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a2, *a3, a3[1], 0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 5));
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a2 + 3, a3[3], a3[4], 0x6DB6DB6DB6DB6DB7 * ((a3[4] - a3[3]) >> 5));
  a2[6] = 0;
  a2[7] = 0;
  a2[8] = 0;
  return std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a2 + 6, a3[6], a3[7], 0x6DB6DB6DB6DB6DB7 * ((a3[7] - a3[6]) >> 5));
}

void sub_1AD96AF8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::PhoneticMatchAlignmentSpan>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::PhoneticMatchAlignmentSpan>,std::reverse_iterator<quasar::PhoneticMatchAlignmentSpan*>,std::reverse_iterator<quasar::PhoneticMatchAlignmentSpan*>,std::reverse_iterator<quasar::PhoneticMatchAlignmentSpan*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::PhoneticMatchAlignmentSpan>,std::reverse_iterator<quasar::PhoneticMatchAlignmentSpan*>,std::reverse_iterator<quasar::PhoneticMatchAlignmentSpan*>,std::reverse_iterator<quasar::PhoneticMatchAlignmentSpan*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 72;
      std::allocator<quasar::PhoneticMatchAlignmentSpan>::construct[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan,quasar::PhoneticMatchAlignmentSpan>(a1, (_QWORD *)(v7 - 72), v9);
      v7 = *((_QWORD *)&v16 + 1) - 72;
      *((_QWORD *)&v16 + 1) -= 72;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchAlignmentSpan>,std::reverse_iterator<quasar::PhoneticMatchAlignmentSpan*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

__n128 std::allocator<quasar::PhoneticMatchAlignmentSpan>::construct[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan,quasar::PhoneticMatchAlignmentSpan>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  __n128 result;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  *(_OWORD *)(a2 + 3) = *(_OWORD *)(a3 + 24);
  a2[5] = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  a2[6] = 0;
  a2[7] = 0;
  a2[8] = 0;
  result = *(__n128 *)(a3 + 48);
  *((__n128 *)a2 + 3) = result;
  a2[8] = *(_QWORD *)(a3 + 64);
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchAlignmentSpan>,std::reverse_iterator<quasar::PhoneticMatchAlignmentSpan*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchAlignmentSpan>,std::reverse_iterator<quasar::PhoneticMatchAlignmentSpan*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchAlignmentSpan>,std::reverse_iterator<quasar::PhoneticMatchAlignmentSpan*>>::operator()[abi:ne180100](uint64_t *a1)
{
  void **v1;
  void **v2;
  uint64_t v3;

  v1 = *(void ***)(a1[2] + 8);
  v2 = *(void ***)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<quasar::PhoneticMatchAlignmentSpan>::destroy[abi:ne180100](v3, v1);
      v1 += 9;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::PhoneticMatchAlignmentSpan>::~__split_buffer(void **a1)
{
  std::__split_buffer<quasar::PhoneticMatchAlignmentSpan>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<quasar::PhoneticMatchAlignmentSpan>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 72;
    std::allocator<quasar::PhoneticMatchAlignmentSpan>::destroy[abi:ne180100](v4, (void **)(i - 72));
  }
}

uint64_t std::vector<quasar::PhoneticMatchResult>::__push_back_slow_path<quasar::PhoneticMatchResult const&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3);
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 3) >= 0x1C71C71C71C71C7)
    v6 = 0x38E38E38E38E38ELL;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationToken>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[72 * v3];
  v13 = &v7[72 * v6];
  std::allocator<quasar::PhoneticMatchResult>::construct[abi:ne180100]<quasar::PhoneticMatchResult,quasar::PhoneticMatchResult const&>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 72;
  std::vector<quasar::PhoneticMatchResult>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<quasar::PhoneticMatchResult>::~__split_buffer(&v10);
  return v8;
}

void sub_1AD96B34C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::PhoneticMatchResult>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::PhoneticMatchResult>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::PhoneticMatchResult>,std::reverse_iterator<quasar::PhoneticMatchResult*>,std::reverse_iterator<quasar::PhoneticMatchResult*>,std::reverse_iterator<quasar::PhoneticMatchResult*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::insertTracebackLink(_QWORD *a1, int a2, int a3, int a4, int a5, int a6, int a7, float a8)
{
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t i;
  int v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD v33[36];

  v10 = a1 + 6;
  v11 = a2;
  v12 = a1[9];
  v13 = (unint64_t)a2 % a1[8];
  v14 = *(_QWORD *)(v12 + 16 * v13 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(v12 + 16 * v13);
    v16 = a1 + 6;
    if (v15 != -1)
      v16 = (uint64_t *)(*(_QWORD *)(v12 + 16 * v15 + 8) + 8);
    v17 = *(_QWORD *)(v14 + 8);
    for (i = *v16; i != v17; i = *(_QWORD *)(i + 8))
    {
      if (*(_DWORD *)i == a2)
      {
        if (*(float *)(*a1 + 28 * (*(_DWORD *)(i + 4) - 1) + 20) <= a8)
          return 0;
        *(_DWORD *)(i + 4) = kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::NewToken((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
        if (kaldi::g_kaldi_verbose_level < 5)
          return 1;
        goto LABEL_14;
      }
    }
  }
  v19 = kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::NewToken((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
  v20 = v11 % a1[8];
  v21 = (_QWORD *)(a1[9] + 16 * v20);
  v22 = kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::New(v10);
  *(_DWORD *)v22 = a2;
  *(_DWORD *)(v22 + 4) = v19;
  v23 = v21 + 1;
  v24 = v21[1];
  if (v24)
  {
    *(_QWORD *)(v22 + 8) = *(_QWORD *)(v24 + 8);
    *(_QWORD *)(v24 + 8) = v22;
    *v23 = v22;
  }
  else
  {
    v25 = a1[7];
    if (v25 != -1)
      v10 = (uint64_t *)(*(_QWORD *)(a1[9] + 16 * v25 + 8) + 8);
    *v10 = v22;
    *(_QWORD *)(v22 + 8) = 0;
    *v23 = v22;
    *v21 = v25;
    a1[7] = v20;
  }
  if (kaldi::g_kaldi_verbose_level >= 5)
  {
LABEL_14:
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v33, 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"id=", 3);
    v26 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" prev_id=", 9);
    v27 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" nextstate=", 11);
    v28 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" weight=", 8);
    v29 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" ilabel=", 8);
    v30 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" olabel=", 8);
    v31 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" phone=", 7);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v33);
  }
  return 1;
}

void sub_1AD96B724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a9);
  _Unwind_Resume(a1);
}

void kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::ProcessNonemitting(uint64_t *a1, float a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t i;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  float *v17;
  float v18;
  float v19;
  uint64_t v20;
  int v21;
  int *v22;
  int v23;
  float v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned int *v28;
  __int128 *v29;
  int v30;
  float v31;
  int v32;
  int v33;
  __int128 v34;
  unsigned int v35;
  _QWORD v36[3];
  _DWORD *v37;
  unint64_t v38;

  if (kaldi::g_kaldi_verbose_level >= 5)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v36, 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Process non-emitting with cutoff=", 33);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v36);
  }
  v4 = a1[6];
  if (!v4)
    return;
  do
  {
    std::deque<int>::push_back(a1 + 25, (_DWORD *)v4);
    v4 = *(_QWORD *)(v4 + 8);
  }
  while (v4);
  v5 = a1[30];
  if (!v5)
    return;
  do
  {
    v6 = v5 - 1;
    v7 = a1[29] + v6;
    v8 = *(_QWORD *)(a1[26] + ((v7 >> 7) & 0x1FFFFFFFFFFFFF8));
    v35 = 0;
    v35 = *(_DWORD *)(v8 + 4 * (v7 & 0x3FF));
    a1[30] = v6;
    std::deque<int>::__maybe_remove_back_spare[abi:ne180100](a1 + 25, 1);
    v9 = a1[9];
    v10 = *(_QWORD *)(v9 + 16 * ((int)v35 % (unint64_t)a1[8]));
    v11 = a1 + 6;
    if (v10 != -1)
      v11 = (uint64_t *)(*(_QWORD *)(v9 + 16 * v10 + 8) + 8);
    for (i = *v11; *(_DWORD *)i != v35; i = *(_QWORD *)(i + 8))
      ;
    v13 = *(_DWORD *)(i + 4);
    v14 = *a1;
    v15 = v13 - 1;
    v16 = *a1 + 28 * (v13 - 1);
    v18 = *(float *)(v16 + 20);
    v17 = (float *)(v16 + 20);
    if (v18 > a2)
      goto LABEL_35;
    v19 = kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::finalWeight((uint64_t)a1, (__int32 *)&v35);
    *(float *)v36 = v19;
    LODWORD(v34) = 2139095040;
    if (v19 != INFINITY)
    {
      v20 = v14 + 28 * v15;
      v23 = *(_DWORD *)(v20 + 24);
      v22 = (int *)(v20 + 24);
      v21 = v23;
      if (v23 != -1)
      {
        v24 = v19 + *v17;
        if (kaldi::g_kaldi_verbose_level >= 5)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v36, 5);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Exit subroutine state=", 22);
          v25 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" nextstate=", 11);
          v26 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" weight=", 8);
          std::ostream::operator<<();
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v36);
          v21 = *v22;
        }
        if (kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::insertTracebackLink(a1, v21, 0, 0, -1, v13, 0, v24))
        {
          LODWORD(v36[0]) = *v22;
          std::deque<int>::push_front((uint64_t)(a1 + 25), v36);
        }
      }
    }
    v27 = a1[16];
    v38 = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)v27 + 136))(v27, v35, v36);
    v28 = (unsigned int *)(v14 + 28 * v15 + 24);
    while (1)
    {
      if (!v36[0])
      {
        if (v38 >= v36[2])
          goto LABEL_33;
LABEL_24:
        v29 = (__int128 *)(v36[1] + 16 * v38);
        goto LABEL_25;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v36[0] + 24))(v36[0]))
        break;
      if (!v36[0])
        goto LABEL_24;
      v29 = (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)v36[0] + 32))();
LABEL_25:
      v34 = *v29;
      v33 = HIDWORD(v34);
      v30 = kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::modifyArcForSubroutineEntry((uint64_t)a1, SDWORD1(v34), &v33, *v28);
      v32 = *(_DWORD *)(**(_QWORD **)(a1[5] + 8) + 4 * (int)v34);
      v31 = kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::ComputeWeight(a1, (uint64_t)&v34, (float *)&v32, v13);
      if (v31 < a2
        && kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::insertTracebackLink(a1, v33, v34, SDWORD1(v34), v30, v13, 0, v31))
      {
        std::deque<int>::push_front((uint64_t)(a1 + 25), &v33);
      }
      if (v36[0])
        (*(void (**)(_QWORD))(*(_QWORD *)v36[0] + 40))(v36[0]);
      else
        ++v38;
    }
    if (v36[0])
    {
      (*(void (**)(void))(*(_QWORD *)v36[0] + 8))();
      goto LABEL_35;
    }
LABEL_33:
    if (v37)
      --*v37;
LABEL_35:
    v5 = a1[30];
  }
  while (v5);
}

void sub_1AD96BAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

float kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::ProcessEmitting(uint64_t a1, int a2, float a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  float v10;
  float v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  float *v17;
  float v18;
  float *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  float v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  float *v29;
  float v30;
  float v31;
  uint64_t v32;
  int v33;
  int *v34;
  int v35;
  uint64_t v36;
  BOOL v37;
  float v38;
  float v39;
  float v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  int *v44;
  float *v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  float v49;
  float v50;
  float v51;
  float v52;
  int v53;
  float v54;
  uint64_t v55;
  BOOL v56;
  float *v57;
  float v58;
  float v59;
  uint64_t v60;
  unsigned int v62;
  unsigned int *v63;
  float v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _DWORD *v69;
  unint64_t v70;
  int v71[3];

  if (kaldi::g_kaldi_verbose_level >= 5)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v66, 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v66, (uint64_t)"Process emitting isym=", 22);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v66);
  }
  v6 = *(_QWORD *)(a1 + 56);
  if (v6 != -1)
  {
    v7 = *(_QWORD *)(a1 + 72);
    do
    {
      v8 = (uint64_t *)(v7 + 16 * v6);
      v8[1] = 0;
      v6 = *v8;
    }
    while (v6 != -1);
  }
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = -1;
  v65 = 0;
  v64 = 0.0;
  v63 = 0;
  kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::GetCutoff(a1, v9, &v65, &v64, &v63, a3);
  v11 = v10;
  v12 = (unint64_t)(float)(*(float *)(a1 + 180) * (float)v65);
  if (*(_QWORD *)(a1 + 64) < v12)
    kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::SetSize(a1 + 48, v12);
  if (!v63)
  {
    v18 = 1.0e10;
    if (!v9)
      return v18;
    goto LABEL_36;
  }
  v13 = *v63;
  v14 = *(_QWORD *)a1;
  v15 = v63[1] - 1;
  v16 = *(_QWORD *)(a1 + 128);
  v70 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v16 + 136))(v16, v13, &v66);
  v17 = (float *)(v14 + 28 * v15 + 20);
  v18 = 1.0e10;
  while (1)
  {
    if (!v66)
    {
      if (v70 >= v68)
        goto LABEL_31;
      goto LABEL_15;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v66 + 24))(v66))
      break;
    if (v66)
    {
      v19 = (float *)(*(uint64_t (**)(void))(*(_QWORD *)v66 + 32))();
      goto LABEL_16;
    }
LABEL_15:
    v19 = (float *)(v67 + 16 * v70);
LABEL_16:
    v20 = *(int *)v19;
    if ((_DWORD)v20)
    {
      v21 = *(_QWORD *)(a1 + 40);
      v22 = *(_DWORD *)(v21 + 48) != (_DWORD)v20 || a2 == 0;
      v23 = *(_QWORD *)(*(_QWORD *)(v21 + 8) + 24 * a2);
      if (v22)
        v24 = -0.0;
      else
        v24 = a3;
      if ((float)(v64 + (float)((float)(*(float *)(v23 + 4 * v20) + v24) + (float)(v19[2] + *v17))) < v18)
        v18 = v64 + (float)((float)(*(float *)(v23 + 4 * v20) + v24) + (float)(v19[2] + *v17));
    }
    if (v66)
      (*(void (**)(uint64_t))(*(_QWORD *)v66 + 40))(v66);
    else
      ++v70;
  }
  if (v66)
  {
    (*(void (**)(void))(*(_QWORD *)v66 + 8))();
    if (!v9)
      return v18;
    goto LABEL_36;
  }
LABEL_31:
  if (v69)
    --*v69;
  if (!v9)
    return v18;
LABEL_36:
  while (2)
  {
    v62 = 0;
    v25 = *(_DWORD *)(v9 + 4);
    v62 = *(_DWORD *)v9;
    v26 = *(_QWORD *)a1;
    v27 = v25 - 1;
    v28 = *(_QWORD *)a1 + 28 * (v25 - 1);
    v30 = *(float *)(v28 + 20);
    v29 = (float *)(v28 + 20);
    if (v30 >= v11)
      goto LABEL_83;
    v31 = kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::finalWeight(a1, (__int32 *)&v62);
    *(float *)&v66 = v31;
    v71[0] = 2139095040;
    if (v31 != INFINITY)
    {
      v32 = v26 + 28 * v27;
      v35 = *(_DWORD *)(v32 + 24);
      v34 = (int *)(v32 + 24);
      v33 = v35;
      if (v35 != -1)
      {
        v36 = *(_QWORD *)(a1 + 40);
        if (*(_DWORD *)(v36 + 48))
          v37 = 1;
        else
          v37 = a2 == 0;
        v38 = *v29;
        v39 = **(float **)(*(_QWORD *)(v36 + 8) + 24 * a2);
        if (v37)
          v40 = -0.0;
        else
          v40 = 0.0;
        if (kaldi::g_kaldi_verbose_level >= 5)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v66, 5);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v66, (uint64_t)"Exit subroutine state=", 22);
          v41 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" nextstate=", 11);
          v42 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" weight=", 8);
          std::ostream::operator<<();
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v66);
          v33 = *v34;
        }
        kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::insertTracebackLink((_QWORD *)a1, v33, 0, 0, -1, *(_DWORD *)(v9 + 4), a2, v31 + (float)(v38 + (float)(v39 + v40)));
      }
    }
    v43 = *(_QWORD *)(a1 + 128);
    v70 = 0;
    (*(void (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)v43 + 136))(v43, v62, &v66);
    v44 = (int *)(v26 + 28 * v27 + 24);
    while (2)
    {
      if (!v66)
      {
        if (v70 >= v68)
          goto LABEL_71;
        goto LABEL_54;
      }
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v66 + 24))(v66))
      {
        if (v66)
        {
          v45 = (float *)(*(uint64_t (**)(void))(*(_QWORD *)v66 + 32))();
          goto LABEL_55;
        }
LABEL_54:
        v45 = (float *)(v67 + 16 * v70);
LABEL_55:
        v71[0] = (int)v45[3];
        v46 = *(int *)v45;
        if ((_DWORD)v46)
        {
          v47 = *(_QWORD *)(a1 + 40);
          v48 = *(_DWORD *)(v47 + 48) != (_DWORD)v46 || a2 == 0;
          v49 = v45[2];
          v50 = *v29;
          v51 = *(float *)(*(_QWORD *)(*(_QWORD *)(v47 + 8) + 24 * a2) + 4 * v46);
          v52 = v48 ? -0.0 : a3;
          v53 = kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::modifyArcForSubroutineEntry(a1, *((_DWORD *)v45 + 1), v71, *v44);
          v54 = (float)(v49 + v50) + (float)(v51 + v52);
          if (v54 < v18)
          {
            if ((float)(v54 + v64) < v18)
              v18 = v54 + v64;
            kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::insertTracebackLink((_QWORD *)a1, v71[0], *(_DWORD *)v45, *((_DWORD *)v45 + 1), v53, *(_DWORD *)(v9 + 4), a2, v54);
          }
        }
        if (v66)
          (*(void (**)(uint64_t))(*(_QWORD *)v66 + 40))(v66);
        else
          ++v70;
        continue;
      }
      break;
    }
    if (v66)
    {
      (*(void (**)(void))(*(_QWORD *)v66 + 8))();
      goto LABEL_73;
    }
LABEL_71:
    if (v69)
      --*v69;
LABEL_73:
    v55 = *(_QWORD *)(a1 + 40);
    if (*(_DWORD *)(v55 + 48))
      v56 = 1;
    else
      v56 = a2 == 0;
    v57 = *(float **)(*(_QWORD *)(v55 + 8) + 24 * a2);
    v58 = 0.0;
    if (v56)
      v58 = -0.0;
    v59 = *v29 + (float)(*v57 + v58);
    if (v59 < v18)
    {
      if ((float)(v59 + v64) < v18)
        v18 = v59 + v64;
      kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::insertTracebackLink((_QWORD *)a1, v62, a2, 0, *v44, *(_DWORD *)(v9 + 4), a2, v59);
    }
LABEL_83:
    v60 = *(_QWORD *)(v9 + 8);
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 96) = v9;
    v9 = v60;
    if (v60)
      continue;
    return v18;
  }
}

void sub_1AD96C0F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void std::deque<int>::clear(_QWORD *a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (void **)a1[1];
  v3 = a1[2];
  a1[5] = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 512;
  }
  else
  {
    if (v4 >> 3 != 2)
      return;
    v6 = 1024;
  }
  a1[4] = v6;
}

uint64_t kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::GetBestPath(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int v5;
  float v6;
  uint64_t v7;
  unsigned int v8;
  float v9;
  float v10;
  float v11;
  BOOL v12;
  float v13;
  BOOL v14;
  unint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  unsigned int *v21;
  double v22;
  float v23;
  float v24;
  _DWORD *v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  fst *v33;
  _QWORD *v34;
  _DWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  void *__p;
  _BYTE *v40;
  unint64_t v41;

  if ((kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::ReachedFinal((uint64_t *)a1) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "INFO");
    v33 = fst::LogMessage::LogMessage((fst *)&v36, (uint64_t)&__p);
    v34 = (_QWORD *)fst::cerr(v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Failed to reach final state", 27);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v36);
    if (SHIBYTE(v41) < 0)
      operator delete(__p);
    return 0;
  }
  v4 = *(unsigned int **)(a1 + 48);
  if (!v4)
    return 0;
  v5 = 0;
  v6 = INFINITY;
  do
  {
    v7 = *(_QWORD *)a1;
    v8 = v4[1] - 1;
    v9 = *(float *)(*(_QWORD *)a1 + 28 * v8 + 20);
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 128) + 32))(*(_QWORD *)(a1 + 128), *v4);
    v11 = NAN;
    if (v9 != -INFINITY && v10 != -INFINITY)
    {
      v11 = INFINITY;
      v12 = v10 == INFINITY || v9 == INFINITY;
      v13 = v9 + v10;
      if (!v12)
        v11 = v13;
    }
    *(float *)&__p = v11;
    LODWORD(v36) = 2139095040;
    v14 = v11 != INFINITY && v11 < v6;
    if (v14 && *(_DWORD *)(v7 + 28 * v8 + 24) == -1)
    {
      v5 = v4[1];
      v6 = v11;
    }
    v4 = (unsigned int *)*((_QWORD *)v4 + 1);
  }
  while (v4);
  if (!v5)
    return 0;
  v15 = 0;
  __p = 0;
  v40 = 0;
  v41 = 0;
  v16 = (unsigned int *)(*(_QWORD *)a1 + 28 * (v5 - 1));
  do
  {
    v17 = *(_QWORD *)a1;
    v18 = v5 - 1;
    v19 = *(_QWORD *)a1 + 28 * (v5 - 1);
    v21 = (unsigned int *)(v19 + 12);
    v20 = *(_DWORD *)(v19 + 12);
    if (v20)
      v22 = *(float *)(v17 + 28 * (v20 - 1) + 20);
    else
      v22 = 0.0;
    v23 = *(float *)(v19 + 20);
    v24 = v23 - v22;
    v25 = (_DWORD *)(v17 + 28 * v18);
    v26 = v25[4];
    v27 = v25[1];
    LODWORD(v25) = v25[2];
    v28 = *(_DWORD *)v19;
    LODWORD(v36) = v27 + (v26 << 8);
    HIDWORD(v36) = (_DWORD)v25;
    *(float *)&v37 = v23;
    *((float *)&v37 + 1) = v24 - v23;
    v38 = v28;
    if (v15 >= v41)
    {
      v15 = std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const&>((uint64_t *)&__p, (uint64_t)&v36);
    }
    else
    {
      *(_QWORD *)v15 = v36;
      *(_QWORD *)(v15 + 8) = v37;
      *(_DWORD *)(v15 + 16) = v38;
      v15 += 20;
    }
    v40 = (_BYTE *)v15;
    v5 = *v21;
  }
  while (v5);
  v40 = (_BYTE *)(v15 - 20);
  v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, v29);
  if (v40 - (_BYTE *)__p >= 1)
  {
    v30 = (v40 - (_BYTE *)__p) / 0x14uLL + 1;
    v31 = 20 * ((v40 - (_BYTE *)__p) / 0x14uLL);
    do
    {
      v36 = *(_QWORD *)((char *)__p + v31 - 20);
      v37 = *(_QWORD *)((char *)__p + v31 - 12);
      v38 = *(_DWORD *)((char *)__p + v31 - 4);
      v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
      if (SHIDWORD(v36) >= 1 && HIDWORD(v36) <= *(_DWORD *)(a1 + 136))
        HIDWORD(v36) = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 208))(a2, v29, &v36);
      v29 = v38;
      --v30;
      v31 -= 20;
    }
    while (v30 > 1);
  }
  v35[0] = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 128) + 32))(*(_QWORD *)(a1 + 128), *v16);
  v35[1] = 0;
  (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)a2 + 184))(a2, v29, v35);
  if (__p)
  {
    v40 = __p;
    operator delete(__p);
  }
  return 1;
}

void sub_1AD96C5F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::NewToken(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, float a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  std::runtime_error *exception;

  v8 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(a1 + 8) == v8)
  {
    v10 = *(_QWORD *)(a1 + 32);
    if (v10 >= *(int *)(a1 + 188))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      kaldi::quasar::TooManyTokensError::TooManyTokensError(exception, "Ran out of token storage");
    }
    v9 = v10 + 1;
    *(_QWORD *)(a1 + 32) = v9;
  }
  else
  {
    v9 = *(unsigned int *)(v8 - 4);
    *(_QWORD *)(a1 + 16) = v8 - 4;
  }
  v11 = *(_QWORD *)a1 + 28 * (v9 - 1);
  *(_DWORD *)v11 = a2;
  *(_DWORD *)(v11 + 4) = a3;
  *(_DWORD *)(v11 + 8) = a4;
  *(_DWORD *)(v11 + 12) = a6;
  *(float *)(v11 + 20) = a8;
  *(_DWORD *)(v11 + 16) = a7;
  *(_DWORD *)(v11 + 24) = a5;
  return v9;
}

void sub_1AD96C6DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::New(_QWORD *a1)
{
  uint64_t result;
  char **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  result = a1[6];
  if (!result)
  {
    v3 = (char **)(a1 + 7);
    do
    {
      v4 = operator new[]();
      v5 = v4;
      v6 = -16368;
      do
      {
        *(_QWORD *)(v4 + v6 + 16376) = v4 + v6 + 0x4000;
        v6 += 16;
      }
      while (v6);
      *(_QWORD *)(v4 + 16376) = 0;
      a1[6] = v4;
      v8 = (uint64_t *)a1[8];
      v7 = a1[9];
      if ((unint64_t)v8 >= v7)
      {
        v10 = ((char *)v8 - *v3) >> 3;
        if ((unint64_t)(v10 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v11 = v7 - (_QWORD)*v3;
        v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1))
          v12 = v10 + 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
          v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 9), v13);
        else
          v14 = 0;
        v15 = (uint64_t *)&v14[8 * v10];
        *v15 = v5;
        v9 = v15 + 1;
        v17 = (char *)a1[7];
        v16 = (char *)a1[8];
        if (v16 != v17)
        {
          do
          {
            v18 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            *--v15 = v18;
          }
          while (v16 != v17);
          v16 = *v3;
        }
        a1[7] = v15;
        a1[8] = v9;
        a1[9] = &v14[8 * v13];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *v8 = v4;
        v9 = v8 + 1;
      }
      a1[8] = v9;
      result = a1[6];
    }
    while (!result);
  }
  a1[6] = *(_QWORD *)(result + 8);
  return result;
}

float kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::finalWeight(uint64_t a1, __int32 *a2)
{
  uint64_t v4;
  uint64_t v5;
  float v6;
  __int32 *v7;
  __int32 *v8;
  __int32 *v9;
  _QWORD v11[3];
  _DWORD *v12;
  unint64_t v13;

  if (!*(_BYTE *)(a1 + 192))
    return (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 128) + 32))(*(_QWORD *)(a1 + 128), *a2);
  v4 = *(_QWORD *)(a1 + 128);
  v5 = *a2;
  v13 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v4 + 136))(v4, v5, v11);
  if (v11[0])
  {
    if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)v11[0] + 24))(v11[0]))
      goto LABEL_11;
  }
  else if (v13 < v11[2])
  {
LABEL_11:
    v6 = INFINITY;
    goto LABEL_12;
  }
  v7 = *(__int32 **)(a1 + 152);
  v8 = wmemchr(*(__int32 **)(a1 + 144), *a2, ((uint64_t)v7 - *(_QWORD *)(a1 + 144)) >> 2);
  if (v8)
    v9 = v8;
  else
    v9 = v7;
  if (v9 != *(__int32 **)(a1 + 152))
    goto LABEL_11;
  v6 = 0.0;
LABEL_12:
  if (v11[0])
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v11[0] + 8))(v11[0]);
  }
  else if (v12)
  {
    --*v12;
  }
  return v6;
}

void sub_1AD96C93C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  else
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::modifyArcForSubroutineEntry(uint64_t a1, int a2, _DWORD *a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  char v13;
  void *__p[2];
  char v15;

  v4 = a4;
  if (a2 < 1 || *(_DWORD *)(a1 + 136) < a2)
    return a4;
  v5 = *a3;
  *a3 = *(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * (a2 - 1));
  if (kaldi::g_kaldi_verbose_level >= 5)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"subroutine=", 11);
    v6 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" prevnextstate=", 15);
    v7 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" nextstate=", 11);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
  }
  if (v4 != -1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    v8 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
    v9 = (_QWORD *)fst::cerr(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Cannot enter subroutine=", 24);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ret_state=", 11);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" (nesting not allowed)", 22);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
    if (v15 < 0)
      operator delete(__p[0]);
  }
  return v5;
}

void sub_1AD96CACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::ComputeWeight(_QWORD *a1, uint64_t a2, float *a3, int a4)
{
  float v4;
  float result;
  float v6;
  float v7;
  BOOL v8;
  float v9;
  BOOL v10;
  float v11;

  if (!a4)
  {
    v7 = *(float *)(a2 + 8);
    result = NAN;
    if (v7 == -INFINITY)
      return result;
    v9 = *a3;
    result = NAN;
    if (*a3 == -INFINITY)
      return result;
    goto LABEL_13;
  }
  v4 = *(float *)(*a1 + 28 * (a4 - 1) + 20);
  result = NAN;
  if (v4 != -INFINITY)
  {
    v6 = *(float *)(a2 + 8);
    result = NAN;
    if (v6 != -INFINITY)
    {
      v7 = INFINITY;
      v8 = v4 == INFINITY || v6 == INFINITY;
      if (v8 || (v7 = v4 + v6, result = NAN, (float)(v4 + v6) != -INFINITY))
      {
        v9 = *a3;
        result = NAN;
        if (*a3 != -INFINITY)
        {
LABEL_13:
          result = INFINITY;
          v10 = v9 == INFINITY || v7 == INFINITY;
          v11 = v7 + v9;
          if (!v10)
            return v11;
        }
      }
    }
  }
  return result;
}

uint64_t kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::GetCutoff(uint64_t result, uint64_t a2, _QWORD *a3, float *a4, _QWORD *a5, float a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  BOOL v12;
  void **v13;
  uint64_t v14;
  float v15;
  float v16;
  unint64_t v17;
  float *v18;
  float *v19;
  float *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  float *v26;
  float v27;
  BOOL v28;
  float *v29;
  unint64_t v30;
  unint64_t v31;
  float *v32;
  float v33;
  float v34;
  float v35;

  v7 = a2;
  v8 = result;
  if (*(_DWORD *)(result + 172) == 0x7FFFFFFF)
  {
    v9 = 0;
    v10 = 1.0e10;
    if (a2)
    {
      do
      {
        v11 = *(float *)(*(_QWORD *)result + 28 * (*(_DWORD *)(v7 + 4) - 1) + 20);
        if (v11 >= v10)
        {
          v12 = 1;
        }
        else
        {
          v10 = *(float *)(*(_QWORD *)result + 28 * (*(_DWORD *)(v7 + 4) - 1) + 20);
          v12 = a5 == 0;
        }
        if (!v12)
        {
          *a5 = v7;
          v10 = v11;
        }
        v7 = *(_QWORD *)(v7 + 8);
        ++v9;
      }
      while (v7);
    }
    if (a3)
      *a3 = v9;
    if (a4)
      *a4 = *(float *)(result + 168);
  }
  else
  {
    v13 = (void **)(result + 248);
    *(_QWORD *)(result + 256) = *(_QWORD *)(result + 248);
    v14 = 0;
    if (a2)
    {
      v15 = 1.0e10;
      do
      {
        v16 = *(float *)(*(_QWORD *)v8 + 28 * (*(_DWORD *)(v7 + 4) - 1) + 20);
        v18 = *(float **)(v8 + 256);
        v17 = *(_QWORD *)(v8 + 264);
        if ((unint64_t)v18 >= v17)
        {
          v20 = (float *)*v13;
          v21 = ((char *)v18 - (_BYTE *)*v13) >> 2;
          v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v23 = v17 - (_QWORD)v20;
          if (v23 >> 1 > v22)
            v22 = v23 >> 1;
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
            v24 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v24 = v22;
          if (v24)
          {
            v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v8 + 264, v24);
            v20 = *(float **)(v8 + 248);
            v18 = *(float **)(v8 + 256);
          }
          else
          {
            v25 = 0;
          }
          v26 = (float *)&v25[4 * v21];
          *v26 = v16;
          v19 = v26 + 1;
          while (v18 != v20)
          {
            v27 = *--v18;
            a6 = v27;
            *--v26 = v27;
          }
          *(_QWORD *)(v8 + 248) = v26;
          *(_QWORD *)(v8 + 256) = v19;
          *(_QWORD *)(v8 + 264) = &v25[4 * v24];
          if (v20)
            operator delete(v20);
        }
        else
        {
          *v18 = v16;
          v19 = v18 + 1;
        }
        *(_QWORD *)(v8 + 256) = v19;
        if (v16 >= v15)
        {
          v28 = 1;
        }
        else
        {
          v15 = v16;
          v28 = a5 == 0;
        }
        if (!v28)
        {
          *a5 = v7;
          v15 = v16;
        }
        v7 = *(_QWORD *)(v7 + 8);
        ++v14;
      }
      while (v7);
    }
    else
    {
      v15 = 1.0e10;
    }
    if (a3)
      *a3 = v14;
    result = *(_QWORD *)(v8 + 248);
    v29 = *(float **)(v8 + 256);
    v30 = ((uint64_t)v29 - result) >> 2;
    v31 = *(int *)(v8 + 172);
    if (v30 <= v31)
    {
      if (a4)
        *a4 = *(float *)(v8 + 168);
    }
    else
    {
      if (v30 > *(_QWORD *)(v8 + 272))
        *(_QWORD *)(v8 + 272) = v30;
      v32 = (float *)(result + 4 * v31);
      if (v32 != v29)
      {
        std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>((float *)result, v32, v29, a6);
        result = *(_QWORD *)(v8 + 248);
        v31 = *(int *)(v8 + 172);
      }
      v33 = *(float *)(v8 + 168);
      v34 = v15 + v33;
      if (*(float *)(result + 4 * v31) < (float)(v15 + v33))
        v34 = *(float *)(result + 4 * v31);
      if (a4)
      {
        v35 = *(float *)(v8 + 176);
        if ((float)((float)(v34 - v15) + v35) < v33)
          v33 = (float)(v34 - v15) + v35;
        *a4 = v33;
      }
    }
  }
  return result;
}

float std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(float *a1, float *a2, float *a3, float result)
{
  float *v4;
  unint64_t v7;
  float *v8;
  float *v9;
  int v10;
  float *v11;
  float *v12;
  float *v13;
  float v14;
  float v15;
  float *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float *v21;
  float v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  float *v27;
  float v28;
  float v29;
  float v30;

  if (a3 != a2)
  {
    v4 = a3;
    do
    {
      v7 = v4 - a1;
      if (v7 < 2)
        break;
      if (v7 == 3)
      {
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(a1, a1 + 1, v4 - 1);
        return result;
      }
      if (v7 == 2)
      {
        result = *(v4 - 1);
        v30 = *a1;
        if (result < *a1)
        {
          *a1 = result;
          *(v4 - 1) = v30;
        }
        return result;
      }
      if ((char *)v4 - (char *)a1 <= 31)
        return std::__selection_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(a1, v4, result);
      v8 = &a1[v7 >> 1];
      v9 = v4 - 1;
      v10 = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(a1, v8, v4 - 1);
      result = *a1;
      if (*a1 >= *v8)
      {
        v11 = v4 - 1;
        while (--v11 != a1)
        {
          if (*v11 < *v8)
          {
            *a1 = *v11;
            *v11 = result;
            ++v10;
            goto LABEL_13;
          }
        }
        v21 = a1 + 1;
        if (result >= *v9)
        {
          while (v21 != v9)
          {
            v22 = *v21;
            if (result < *v21)
            {
              *v21++ = *v9;
              *v9 = v22;
              goto LABEL_45;
            }
            ++v21;
          }
          return result;
        }
LABEL_45:
        if (v21 == v9)
          return result;
        while (1)
        {
          v25 = *a1;
          do
          {
            v26 = *v21++;
            result = v26;
          }
          while (v25 >= v26);
          v27 = v21 - 1;
          do
          {
            v28 = *--v9;
            v29 = v28;
          }
          while (v25 < v28);
          if (v27 >= v9)
            break;
          *v27 = v29;
          *v9 = result;
        }
        a1 = v21 - 1;
        if (v27 > a2)
          return result;
      }
      else
      {
        v11 = v4 - 1;
LABEL_13:
        v12 = a1 + 1;
        if (a1 + 1 >= v11)
        {
          v16 = a1 + 1;
        }
        else
        {
          v13 = a1 + 1;
          while (1)
          {
            v14 = *v8;
            do
            {
              v15 = *v13++;
              result = v15;
            }
            while (v15 < v14);
            v16 = v13 - 1;
            do
            {
              v17 = *--v11;
              v18 = v17;
            }
            while (v17 >= v14);
            if (v16 >= v11)
              break;
            *v16 = v18;
            *v11 = result;
            ++v10;
            if (v16 == v8)
              v8 = v11;
          }
        }
        if (v16 != v8)
        {
          result = *v8;
          v19 = *v16;
          if (*v8 < *v16)
          {
            *v16 = result;
            *v8 = v19;
            ++v10;
          }
        }
        if (v16 == a2)
          return result;
        if (!v10)
        {
          if (v16 <= a2)
          {
            v23 = v16 + 1;
            while (v23 != v4)
            {
              v24 = *(v23 - 1);
              result = *v23++;
              if (result < v24)
                goto LABEL_29;
            }
          }
          else
          {
            while (v12 != v16)
            {
              v20 = *(v12 - 1);
              result = *v12++;
              if (result < v20)
                goto LABEL_29;
            }
          }
          return result;
        }
LABEL_29:
        if (v16 <= a2)
          a1 = v16 + 1;
        else
          v4 = v16;
      }
    }
    while (v4 != a2);
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(float *a1, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4)
      return 1;
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = *a1;
    if (*a2 >= *a1)
      return 1;
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

float std::__selection_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(float *a1, float *a2, float result)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float v7;
  float v8;

  while (a1 != a2 - 1)
  {
    v3 = a1++;
    if (v3 != a2 && a1 != a2)
    {
      result = *v3;
      v4 = a1;
      v5 = v3;
      v6 = a1;
      do
      {
        v7 = *v6++;
        v8 = v7;
        if (v7 < result)
        {
          result = v8;
          v5 = v4;
        }
        v4 = v6;
      }
      while (v6 != a2);
      if (v5 != v3)
      {
        result = *v3;
        *v3 = *v5;
        *v5 = result;
      }
    }
  }
  return result;
}

void kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::SetSize(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 24);
  v2 = a1 + 24;
  *(_QWORD *)(v2 - 8) = a2;
  if (a2 > (*(_QWORD *)(v2 + 8) - v3) >> 4)
  {
    v4 = 0uLL;
    std::vector<kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::HashBucket,std::allocator<kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::HashBucket>>::resize(v2, a2, &v4);
  }
}

void std::vector<kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::HashBucket,std::allocator<kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::HashBucket>>::resize(uint64_t a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::HashBucket,std::allocator<kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::HashBucket>>::__append((void **)a1, a2 - v3, a3);
  }
}

void std::vector<kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::HashBucket,std::allocator<kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::HashBucket>>::__append(void **a1, unint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _OWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _OWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_OWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 4)
  {
    if (a2)
    {
      v16 = 16 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 16;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 4);
    if (v11 >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 4;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 3 > v11)
      v11 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[16 * v12];
    v19 = &v18[16 * a2];
    v20 = 16 * a2;
    v21 = v18;
    do
    {
      *(_OWORD *)v21 = *a3;
      v21 += 16;
      v20 -= 16;
    }
    while (v20);
    v22 = &v15[16 * v14];
    v24 = (char *)*a1;
    v23 = (char *)a1[1];
    if (v23 != *a1)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v23 - 1);
        v18 -= 16;
        v23 -= 16;
      }
      while (v23 != v24);
      v23 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

uint64_t kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::ReachedFinal(uint64_t *a1)
{
  unsigned int *v1;
  uint64_t v3;
  unsigned int v4;
  float v5;
  float v6;
  float v7;
  BOOL v8;
  float v9;

  v1 = (unsigned int *)a1[6];
  if (!v1)
    return 0;
  while (1)
  {
    v3 = *a1;
    v4 = v1[1] - 1;
    v5 = *(float *)(*a1 + 28 * v4 + 20);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1[16] + 32))(a1[16], *v1);
    v7 = NAN;
    if (v5 != -INFINITY && v6 != -INFINITY)
    {
      v7 = INFINITY;
      v8 = v6 == INFINITY || v5 == INFINITY;
      v9 = v5 + v6;
      if (!v8)
        v7 = v9;
    }
    if (v7 != INFINITY && *(_DWORD *)(v3 + 28 * v4 + 24) == -1)
      break;
    v1 = (unsigned int *)*((_QWORD *)v1 + 1);
    if (!v1)
      return 0;
  }
  return 1;
}

uint64_t fst::ConvertLattice<fst::LatticeWeightTpl<float>,fst::TropicalWeightTpl<float>>(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t result;
  int v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  int v17;
  float v18;
  BOOL v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  int v24;
  _QWORD v25[3];
  _DWORD *v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  float v30;
  int v31;

  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
  if (v4 < 1)
  {
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, v21);
  }
  v5 = v4;
  v6 = v4;
  do
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
    --v6;
  }
  while (v6);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, v7);
  v8 = 0;
  do
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v28, a1, v8);
    LODWORD(v22) = HIDWORD(v28);
    LODWORD(v25[0]) = v28;
    v31 = 2139095040;
    v30 = INFINITY;
    if (*(float *)&v28 != INFINITY || (v9.n128_u32[0] = v22, *(float *)&v22 != v30))
    {
      v9.n128_u32[0] = 2143289344;
      if (*(float *)&v28 != -INFINITY && *((float *)&v28 + 1) != -INFINITY)
      {
        v9.n128_u32[0] = 2139095040;
        if (*((float *)&v28 + 1) != INFINITY && *(float *)&v28 != INFINITY)
          v9.n128_f32[0] = *(float *)&v28 + *((float *)&v28 + 1);
      }
      (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)a2 + 184))(a2, v8, v9);
    }
    v27 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *, __n128))(*(_QWORD *)a1 + 136))(a1, v8, v25, v9);
    while (1)
    {
      result = v25[0];
      if (!v25[0])
      {
        if (v27 >= v25[2])
          goto LABEL_34;
LABEL_21:
        v13 = v25[1] + 20 * v27;
        goto LABEL_22;
      }
      v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v25[0] + 24))(v25[0]);
      result = v25[0];
      if (v12)
        break;
      if (!v25[0])
        goto LABEL_21;
      v13 = (*(uint64_t (**)(void))(*(_QWORD *)v25[0] + 32))();
LABEL_22:
      v14 = *(_QWORD *)v13;
      v15 = *(float *)(v13 + 8);
      v16 = *(float *)(v13 + 12);
      v17 = *(_DWORD *)(v13 + 16);
      *(float *)&v22 = v15;
      v31 = LODWORD(v16);
      v30 = INFINITY;
      v29 = 2139095040;
      v18 = NAN;
      if (v15 != -INFINITY && v16 != -INFINITY)
      {
        v18 = INFINITY;
        v19 = v16 == INFINITY || v15 == INFINITY;
        v20 = v15 + v16;
        if (!v19)
          v18 = v20;
      }
      v23 = v18;
      v22 = v14;
      v24 = v17;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 208))(a2, v8, &v22);
      if (v25[0])
        (*(void (**)(_QWORD))(*(_QWORD *)v25[0] + 40))(v25[0]);
      else
        ++v27;
    }
    if (v25[0])
    {
      result = (*(uint64_t (**)(void))(*(_QWORD *)v25[0] + 8))();
      goto LABEL_36;
    }
LABEL_34:
    if (v26)
      --*v26;
LABEL_36:
    v8 = (v8 + 1);
  }
  while ((_DWORD)v8 != v5);
  return result;
}

void sub_1AD96D7BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14)
{
  if (a11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  }
  else if (a14)
  {
    --*a14;
  }
  _Unwind_Resume(exception_object);
}

void fst::RemoveEpsLocal<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *__p;
  void *v5;

  fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::RemoveEpsLocalClass(&v1, a1);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
  if (v2)
  {
    v3 = v2;
    operator delete(v2);
  }
}

uint64_t fst::ArcMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  unint64_t v7;
  __n128 v8;
  _QWORD v9[2];
  uint64_t v10;
  int v11;
  float v12;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result != -1)
  {
    v3 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1) >= 1)
    {
      v4 = 0;
      do
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 296))(a1, v4, &v10);
        while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10))
        {
          v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
          v12 = 0.0;
          v12 = *(float *)(v5 + 8);
          v11 = 2139095040;
          v6 = INFINITY;
          if (v12 != INFINITY)
            v6 = 0.0;
          v7 = LODWORD(v6) | ((unint64_t)*(unsigned int *)(v5 + 12) << 32);
          v9[0] = *(_QWORD *)v5;
          v9[1] = v7;
          (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v10 + 88))(v10, v9);
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
        }
        if (v10)
          (*(void (**)(void))(*(_QWORD *)v10 + 8))();
        LODWORD(v9[0]) = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v4);
        LODWORD(v10) = 2139095040;
        v8.n128_u32[0] = 2139095040;
        if (*(float *)v9 != INFINITY)
          v8.n128_f32[0] = 0.0;
        (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)a1 + 184))(a1, v4, v8);
        v4 = (v4 + 1);
      }
      while ((int)v4 < (*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1));
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v3 & 0x3FFCFFFF0007 | 0x200000000, 0x3FFFFFFF0007);
  }
  return result;
}

void sub_1AD96DA14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

uint64_t *fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::RemoveEpsLocalClass(uint64_t *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  unint64_t i;

  *a1 = a2;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) != -1)
  {
    *((_DWORD *)a1 + 2) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 200))(*a1);
    fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::InitNumArcs(a1);
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 160))(*a1);
    if (v4 >= 1)
    {
      v5 = 0;
      do
      {
        for (i = 0; i < (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, v5); ++i)
          fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::RemoveEps(a1, v5, i);
        v5 = (v5 + 1);
      }
      while ((_DWORD)v5 != v4);
    }
    fst::Connect<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a2);
  }
  return a1;
}

void sub_1AD96DB24(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = (void *)v1[5];
  if (v4)
  {
    v1[6] = v4;
    operator delete(v4);
  }
  v5 = *v2;
  if (*v2)
  {
    v1[3] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::InitNumArcs(_QWORD *a1)
{
  int v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t i;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];
  _DWORD *v11;
  unint64_t v12;
  int v13;

  v2 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 160))(*a1);
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 2), v2);
  v3 = a1 + 5;
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 5), v2);
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
  ++*(_DWORD *)(a1[2] + 4 * (int)result);
  if (v2 < 1)
    return result;
  for (i = 0; i != v2; ++i)
  {
    LODWORD(v10[0]) = (*(float (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, i);
    v13 = 2139095040;
    if (*(float *)v10 != INFINITY)
      ++*(_DWORD *)(*v3 + 4 * i);
    v6 = *a1;
    v12 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v6 + 136))(v6, i, v10);
    while (1)
    {
      result = v10[0];
      if (!v10[0])
      {
        if (v12 >= v10[2])
          goto LABEL_17;
LABEL_11:
        v9 = 0;
        v8 = v10[1] + 16 * v12;
        goto LABEL_12;
      }
      v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v10[0] + 24))(v10[0]);
      result = v10[0];
      if (v7)
        break;
      if (!v10[0])
        goto LABEL_11;
      v8 = (*(uint64_t (**)(void))(*(_QWORD *)v10[0] + 32))();
      v9 = v10[0];
LABEL_12:
      ++*(_DWORD *)(a1[2] + 4 * *(int *)(v8 + 12));
      ++*(_DWORD *)(*v3 + 4 * i);
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
      else
        ++v12;
    }
    if (v10[0])
    {
      result = (*(uint64_t (**)(void))(*(_QWORD *)v10[0] + 8))();
      continue;
    }
LABEL_17:
    if (v11)
      --*v11;
  }
  return result;
}

void sub_1AD96DD40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _DWORD **v9;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  else
    quasar::InverseTextNormalizer::getNumTokens(v9);
  _Unwind_Resume(a1);
}

void fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::RemoveEps(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v13;
  _QWORD v15[3];
  _DWORD *v16;
  uint64_t v17;

  v6 = *a1;
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v6 + 136))(v6, a2, v15);
  if (!v15[0])
  {
    v17 = a3;
    v10 = a3;
LABEL_7:
    v11 = (uint64_t *)(v15[1] + 16 * v10);
    v8 = *v11;
    v9 = v11[1];
    goto LABEL_8;
  }
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v15[0] + 64))(v15[0], a3);
  if (!v15[0])
  {
    v10 = v17;
    goto LABEL_7;
  }
  v7 = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v15[0] + 32))(v15[0]);
  v8 = *v7;
  v9 = v7[1];
  if (v15[0])
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v15[0] + 8))(v15[0]);
    goto LABEL_10;
  }
LABEL_8:
  if (v16)
    --*v16;
LABEL_10:
  if (HIDWORD(v9) != (_DWORD)a2 && *((_DWORD *)a1 + 2) != HIDWORD(v9))
  {
    v13 = *(_DWORD *)(a1[5] + 4 * (v9 >> 32));
    if (*(_DWORD *)(a1[2] + 4 * (v9 >> 32)) != 1 || v13 < 2)
    {
      if (v13 == 1)
        fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::RemoveEpsPattern2(a1, a2, a3, v8, v9);
    }
    else
    {
      fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::RemoveEpsPattern1(a1, a2, a3, v8, v9);
    }
  }
}

void sub_1AD96DEAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  else
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::RemoveEpsPattern1(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  __n128 v13;
  float v14;
  char *v15;
  char *v16;
  float v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __n128 v27;
  float v28;
  float v30;
  uint64_t v33;
  __n128 v34;
  float v35;
  BOOL v37;
  float v38;
  float v41;
  BOOL v43;
  float v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;

  v54 = a4;
  v55 = a5;
  v9 = HIDWORD(a5);
  v51 = 0;
  v52 = 0;
  v53 = 0;
  (*(void (**)(_QWORD, unint64_t, uint64_t *))(*(_QWORD *)*a1 + 296))(*a1, HIDWORD(a5), &v50);
  v10 = a5 >> 32;
  v11 = INFINITY;
  v12 = INFINITY;
  while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v50 + 24))(v50))
  {
    v49 = *(_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 32))(v50);
    if (HIDWORD(v49) != *((_DWORD *)a1 + 2))
    {
      if (fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::CanCombineArcs((uint64_t)a1, (float *)&v54, (float *)&v49, (uint64_t)&v48))
      {
        v14 = NAN;
        v13.n128_u32[0] = -8388608;
        if (v12 != -INFINITY)
        {
          v13.n128_u32[0] = DWORD2(v49);
          v14 = NAN;
          if (*((float *)&v49 + 2) != -INFINITY)
          {
            if (v12 >= *((float *)&v49 + 2))
              v14 = *((float *)&v49 + 2);
            else
              v14 = v12;
          }
        }
        --*(_DWORD *)(a1[5] + 4 * v10);
        --*(_DWORD *)(a1[2] + 4 * SHIDWORD(v49));
        HIDWORD(v49) = *((_DWORD *)a1 + 2);
        (*(void (**)(uint64_t, __int128 *, __n128))(*(_QWORD *)v50 + 88))(v50, &v49, v13);
        v15 = v52;
        if (v52 >= v53)
        {
          v18 = (v52 - v51) >> 4;
          v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v20 = v53 - v51;
          if ((v53 - v51) >> 3 > v19)
            v19 = v20 >> 3;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
            v21 = 0xFFFFFFFFFFFFFFFLL;
          else
            v21 = v19;
          if (v21)
            v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v53, v21);
          else
            v22 = 0;
          v23 = &v22[16 * v18];
          *(_OWORD *)v23 = v48;
          v25 = v51;
          v24 = v52;
          v26 = v23;
          if (v52 != v51)
          {
            do
            {
              *((_OWORD *)v26 - 1) = *((_OWORD *)v24 - 1);
              v26 -= 16;
              v24 -= 16;
            }
            while (v24 != v25);
            v24 = v51;
          }
          v16 = v23 + 16;
          v51 = v26;
          v52 = v23 + 16;
          v53 = &v22[16 * v21];
          if (v24)
            operator delete(v24);
        }
        else
        {
          *(_OWORD *)v52 = v48;
          v16 = v15 + 16;
        }
        v52 = v16;
        v17 = v11;
      }
      else
      {
        v17 = NAN;
        v14 = v12;
        if (v11 != -INFINITY)
        {
          v17 = NAN;
          v14 = v12;
          if (*((float *)&v49 + 2) != -INFINITY)
          {
            if (v11 >= *((float *)&v49 + 2))
              v17 = *((float *)&v49 + 2);
            else
              v17 = v11;
            v14 = v12;
          }
        }
      }
      v11 = v17;
      v12 = v14;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 40))(v50);
  }
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v27.n128_f32[0] = (*(float (**)(_QWORD, unint64_t))(*(_QWORD *)*a1 + 32))(*a1, v9);
  LODWORD(v49) = v27.n128_u32[0];
  LODWORD(v48) = 2139095040;
  if (v27.n128_f32[0] != INFINITY)
  {
    if (v54)
    {
      if (v11 >= v27.n128_f32[0])
        v38 = v27.n128_f32[0];
      else
        v38 = v11;
      if (v27.n128_f32[0] == -INFINITY || v11 == -INFINITY)
        v11 = NAN;
      else
        v11 = v38;
    }
    else
    {
      v28 = NAN;
      if (*(float *)&v55 != -INFINITY && v27.n128_f32[0] != -INFINITY)
      {
        if (*(float *)&v55 == INFINITY || v27.n128_f32[0] == INFINITY)
          v28 = INFINITY;
        else
          v28 = v27.n128_f32[0] + *(float *)&v55;
      }
      if (v12 >= v27.n128_f32[0])
        v30 = v27.n128_f32[0];
      else
        v30 = v12;
      if (v27.n128_f32[0] == -INFINITY || v12 == -INFINITY)
        v12 = NAN;
      else
        v12 = v30;
      LODWORD(v49) = (*(float (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, a2);
      LODWORD(v48) = 2139095040;
      if (*(float *)&v49 == INFINITY)
        ++*(_DWORD *)(a1[5] + 4 * (int)a2);
      v33 = *a1;
      v34.n128_f32[0] = (*(float (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, a2);
      if (v34.n128_f32[0] >= v28)
        v35 = v28;
      else
        v35 = v34.n128_f32[0];
      v37 = v28 == -INFINITY || v34.n128_f32[0] == -INFINITY;
      v34.n128_u32[0] = 2143289344;
      if (!v37)
        v34.n128_f32[0] = v35;
      (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v33 + 184))(v33, a2, v34);
      --*(_DWORD *)(a1[5] + 4 * v10);
      (*(void (**)(_QWORD, unint64_t, float))(*(_QWORD *)*a1 + 184))(*a1, v9, INFINITY);
    }
  }
  *(float *)&v49 = v12;
  LODWORD(v48) = 2139095040;
  v27.n128_f32[0] = v12;
  if (v12 != INFINITY)
  {
    *(float *)&v49 = v11;
    LODWORD(v48) = 2139095040;
    if (v11 == INFINITY)
    {
      --*(_DWORD *)(a1[5] + 4 * (int)a2);
      --*(_DWORD *)(a1[2] + 4 * SHIDWORD(v55));
      HIDWORD(v55) = *((_DWORD *)a1 + 2);
      (*(void (**)(_QWORD, uint64_t, __int128 *, float))(*(_QWORD *)*a1 + 296))(*a1, a2, &v49, v11);
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v49 + 64))(v49, a3);
      (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)v49 + 88))(v49, &v54);
      if ((_QWORD)v49)
        (*(void (**)(_QWORD))(*(_QWORD *)v49 + 8))(v49);
    }
    else
    {
      if (v12 >= v11)
        v41 = v11;
      else
        v41 = v12;
      v43 = v11 == -INFINITY || v12 == -INFINITY;
      v44 = NAN;
      if (v43)
        v41 = NAN;
      if (v11 != -INFINITY)
      {
        if ((LODWORD(v41) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
        {
          v44 = INFINITY;
          if (v11 != INFINITY)
            v44 = v11 - v41;
        }
        else
        {
          v44 = NAN;
        }
      }
      fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::Reweight(a1, a2, a3, v44);
    }
  }
  v45 = v52;
  if (v52 != v51)
  {
    v46 = 0;
    v47 = 0;
    v45 = v51;
    do
    {
      ++*(_DWORD *)(a1[5] + 4 * (int)a2);
      ++*(_DWORD *)(a1[2] + 4 * *(int *)&v45[v46 + 12]);
      (*(void (**)(_QWORD, uint64_t, __n128))(*(_QWORD *)*a1 + 208))(*a1, a2, v27);
      ++v47;
      v45 = v51;
      v46 += 16;
    }
    while (v47 < (v52 - v51) >> 4);
  }
  if (v45)
  {
    v52 = v45;
    operator delete(v45);
  }
}

void sub_1AD96E504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::RemoveEpsPattern2(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float v5;
  unint64_t v10;
  uint64_t v11;
  int v12;
  float v13;
  float v14;
  BOOL v15;
  float v16;
  uint64_t v17;
  __n128 v18;
  float v19;
  BOOL v21;
  int CanCombineArcs;
  _DWORD v23[3];
  int v24;
  float v25[6];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = *(float *)&a5;
  v27 = a4;
  v28 = a5;
  v10 = HIDWORD(a5);
  v11 = a5 >> 32;
  v12 = *(_DWORD *)(a1[2] + 4 * (a5 >> 32));
  v13 = (*(float (**)(_QWORD, unint64_t))(*(_QWORD *)*a1 + 32))(*a1, HIDWORD(a5));
  v25[0] = v13;
  v23[0] = 2139095040;
  if (v13 != INFINITY)
  {
    if (a4)
      return;
    v14 = NAN;
    if (v5 != -INFINITY && v13 != -INFINITY)
    {
      v15 = v5 == INFINITY || v13 == INFINITY;
      v16 = v13 + v5;
      if (v15)
        v14 = INFINITY;
      else
        v14 = v16;
    }
    v25[0] = (*(float (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, a2);
    v23[0] = 2139095040;
    if (v25[0] == INFINITY)
      ++*(_DWORD *)(a1[5] + 4 * (int)a2);
    v17 = *a1;
    v18.n128_f32[0] = (*(float (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, a2);
    if (v18.n128_f32[0] >= v14)
      v19 = v14;
    else
      v19 = v18.n128_f32[0];
    v21 = v14 == -INFINITY || v18.n128_f32[0] == -INFINITY;
    v18.n128_u32[0] = 2143289344;
    if (!v21)
      v18.n128_f32[0] = v19;
    (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v17 + 184))(v17, a2, v18);
    if (v12 == 1)
    {
      --*(_DWORD *)(a1[5] + 4 * v11);
      (*(void (**)(_QWORD, unint64_t, float))(*(_QWORD *)*a1 + 184))(*a1, v10, INFINITY);
    }
    goto LABEL_36;
  }
  (*(void (**)(_QWORD, unint64_t, uint64_t *))(*(_QWORD *)*a1 + 296))(*a1, v10, &v26);
  while (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26) + 12) == *((_DWORD *)a1 + 2))
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 40))(v26);
  *(_OWORD *)v25 = *(_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26);
  CanCombineArcs = fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::CanCombineArcs((uint64_t)a1, (float *)&v27, v25, (uint64_t)v23);
  if (CanCombineArcs)
  {
    if (v12 == 1)
    {
      --*(_DWORD *)(a1[5] + 4 * v11);
      --*(_DWORD *)(a1[2] + 4 * SLODWORD(v25[3]));
      v25[3] = *((float *)a1 + 2);
      (*(void (**)(uint64_t, float *))(*(_QWORD *)v26 + 88))(v26, v25);
    }
    ++*(_DWORD *)(a1[5] + 4 * (int)a2);
    ++*(_DWORD *)(a1[2] + 4 * v24);
    (*(void (**)(_QWORD, uint64_t, _DWORD *))(*(_QWORD *)*a1 + 208))(*a1, a2, v23);
  }
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  if (CanCombineArcs)
  {
LABEL_36:
    --*(_DWORD *)(a1[5] + 4 * (int)a2);
    --*(_DWORD *)(a1[2] + 4 * v11);
    HIDWORD(v28) = *((_DWORD *)a1 + 2);
    (*(void (**)(_QWORD, uint64_t, float *))(*(_QWORD *)*a1 + 296))(*a1, a2, v25);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)v25 + 64))(*(_QWORD *)v25, a3);
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)v25 + 88))(*(_QWORD *)v25, &v27);
    if (*(_QWORD *)v25)
      (*(void (**)(_QWORD))(**(_QWORD **)v25 + 8))(*(_QWORD *)v25);
  }
}

void sub_1AD96E8D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  _Unwind_Resume(exception_object);
}

uint64_t fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::CanCombineArcs(uint64_t a1, float *a2, float *a3, uint64_t a4)
{
  BOOL v4;
  float v6;
  float v7;
  float v8;
  BOOL v9;
  float v10;
  float v11;
  int v12;
  int v13;

  if (*(_DWORD *)a2)
    v4 = *(_DWORD *)a3 == 0;
  else
    v4 = 1;
  if (!v4)
    return 0;
  if (*((_DWORD *)a2 + 1) && *((_DWORD *)a3 + 1) != 0)
    return 0;
  v6 = a2[2];
  v7 = NAN;
  if (v6 != -INFINITY)
  {
    v8 = a3[2];
    v7 = NAN;
    if (v8 != -INFINITY)
    {
      v7 = INFINITY;
      v9 = v8 == INFINITY || v6 == INFINITY;
      v10 = v6 + v8;
      if (!v9)
        v7 = v10;
    }
  }
  *(float *)(a4 + 8) = v7;
  v11 = *a3;
  v12 = *((_DWORD *)a2 + 1);
  if (*(_DWORD *)a2)
    v11 = *a2;
  *(float *)a4 = v11;
  v13 = *((_DWORD *)a3 + 1);
  if (v12)
    v13 = v12;
  *(_DWORD *)(a4 + 4) = v13;
  *(float *)(a4 + 12) = a3[3];
  return 1;
}

uint64_t fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::Reweight(_QWORD *a1, uint64_t a2, uint64_t a3, float a4)
{
  __n128 v7;
  float v8;
  BOOL v9;
  float v10;
  float v11;
  float v12;
  uint64_t result;
  float v14[6];
  uint64_t v15;
  __n128 v16;
  uint64_t v17;

  (*(void (**)(_QWORD, uint64_t, uint64_t *))(*(_QWORD *)*a1 + 296))(*a1, a2, &v17);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 64))(v17, a3);
  v7 = *(__n128 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17);
  v16 = v7;
  v7.n128_u32[0] = v7.n128_u32[2];
  v8 = NAN;
  if (v7.n128_f32[2] != -INFINITY && a4 != -INFINITY)
  {
    v8 = INFINITY;
    v9 = v16.n128_f32[2] == INFINITY || a4 == INFINITY;
    v7.n128_f32[0] = a4 + v16.n128_f32[2];
    if (!v9)
      v8 = a4 + v16.n128_f32[2];
  }
  v16.n128_f32[2] = v8;
  (*(void (**)(uint64_t, __n128 *, __n128))(*(_QWORD *)v17 + 88))(v17, &v16, v7);
  (*(void (**)(_QWORD, _QWORD, uint64_t *))(*(_QWORD *)*a1 + 296))(*a1, v16.n128_u32[3], &v15);
  while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
  {
    *(_OWORD *)v14 = *(_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
    if (LODWORD(v14[3]) != *((_DWORD *)a1 + 2))
    {
      v10 = v14[2] - a4;
      if (v14[2] == INFINITY)
        v10 = INFINITY;
      if (v14[2] == -INFINITY || (LODWORD(a4) & 0x7FFFFFFFu) > 0x7F7FFFFF)
        v10 = NAN;
      v14[2] = v10;
      (*(void (**)(uint64_t, float *))(*(_QWORD *)v15 + 88))(v15, v14);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  }
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v11 = (*(float (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, v16.n128_u32[3]);
  v14[0] = v11;
  LODWORD(v15) = 2139095040;
  if (v11 != INFINITY)
  {
    if (v11 == -INFINITY || (LODWORD(a4) & 0x7FFFFFFFu) > 0x7F7FFFFF)
    {
      v12 = NAN;
    }
    else
    {
      v12 = INFINITY;
      if (v11 != INFINITY)
        v12 = v11 - a4;
    }
    (*(void (**)(_QWORD, _QWORD, float))(*(_QWORD *)*a1 + 184))(*a1, v16.n128_u32[3], v12);
  }
  result = v17;
  if (v17)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  return result;
}

void sub_1AD96EC34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ArcMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ProjectMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unint64_t v10;
  _QWORD v11[2];
  uint64_t v12;

  if (*a2 == 1 || ((*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 280))(a1, 0), *a2 != 2))
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 288))(a1, 0);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result != -1)
  {
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1) >= 1)
    {
      v6 = 0;
      do
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 296))(a1, v6, &v12);
        while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12))
        {
          v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
          v8 = *(_QWORD *)(v7 + 8);
          if (*a2 == 1)
            v9 = (unsigned int *)v7;
          else
            v9 = (unsigned int *)(v7 + 4);
          v11[0] = *v9 | ((unint64_t)*v9 << 32);
          v11[1] = v8;
          (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v12 + 88))(v12, v11);
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
        }
        if (v12)
          (*(void (**)(void))(*(_QWORD *)v12 + 8))();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v6);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 184))(a1, v6);
        v6 = (v6 + 1);
      }
      while ((int)v6 < (*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1));
    }
    v10 = fst::ProjectProperties(v5, *a2 == 1);
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v10, 0x3FFFFFFF0007);
  }
  return result;
}

void sub_1AD96EE50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::SymbolDecoder(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  __int128 v8;
  __int128 v9;

  is_mul_ok(*((int *)a4 + 5), 0x1CuLL);
  *(_QWORD *)a1 = operator new[]();
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 56) = xmmword_1AE146E50;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = a2;
  *(_DWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v8 = *a4;
  v9 = *(__int128 *)((char *)a4 + 12);
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 180) = v9;
  *(_OWORD *)(a1 + 168) = v8;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::SetSize(a1 + 48, 0x3E8uLL);
  kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::FindSubroutines(a1);
  return a1;
}

void sub_1AD96EF64(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  void **v5;
  void *v7;
  void *v8;
  void *v9;

  v7 = (void *)v1[31];
  if (v7)
  {
    v1[32] = v7;
    operator delete(v7);
  }
  std::deque<int>::~deque[abi:ne180100](v3);
  v8 = *v5;
  if (*v5)
  {
    v1[19] = v8;
    operator delete(v8);
  }
  kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::~HashList(v2);
  v9 = *v4;
  if (*v4)
  {
    v1[2] = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::FindSubroutines(uint64_t a1)
{
  uint64_t v2;
  float *v3;
  float v4;
  unint64_t v5;
  unint64_t v6;
  fst *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  fst *v14;
  _QWORD *v15;
  _QWORD *v16;
  fst *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *__p[2];
  char v21;
  char v22;
  void *v23[2];
  unint64_t v24;
  _DWORD *v25;
  unint64_t v26;
  void *v27;
  unint64_t v28;
  uint64_t v29;

  v27 = 0;
  v28 = 0;
  v29 = 0;
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 24))(*(_QWORD *)(a1 + 128)) == -1)
    goto LABEL_33;
  v2 = *(_QWORD *)(a1 + 128);
  v26 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 136))(v2);
  while (1)
  {
    if (!v23[0])
    {
      if (v26 >= v24)
        goto LABEL_24;
LABEL_8:
      v3 = (float *)((char *)v23[1] + 16 * v26);
      goto LABEL_9;
    }
    if ((*(unsigned int (**)(void *))(*(_QWORD *)v23[0] + 24))(v23[0]))
      break;
    if (!v23[0])
      goto LABEL_8;
    v3 = (float *)(*(uint64_t (**)(void))(*(_QWORD *)v23[0] + 32))();
LABEL_9:
    if (!*(_DWORD *)v3)
    {
      v4 = v3[2];
      if (v4 > 9900.0 && v4 < 10100.0)
      {
        v5 = *((unsigned int *)v3 + 1);
        v6 = (v5 - 1);
        ++*(_DWORD *)(a1 + 136);
        if (v28 > v6 && ((*(_QWORD *)((char *)v27 + ((v6 >> 3) & 0x1FFFFFF8)) >> (v5 - 1)) & 1) != 0)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
          v7 = fst::LogMessage::LogMessage((fst *)&v22, (uint64_t)__p);
          v8 = (_QWORD *)fst::cerr(v7);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Subroutine index ", 17);
          v9 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" already defined", 16);
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v22);
          if (v21 < 0)
            operator delete(__p[0]);
        }
        v10 = *(_QWORD *)(a1 + 144);
        if (v5 > (*(_QWORD *)(a1 + 152) - v10) >> 2)
        {
          std::vector<BOOL>::resize((uint64_t)&v27, v5, 0);
          std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 144), v5);
          v10 = *(_QWORD *)(a1 + 144);
        }
        *(float *)(v10 + 4 * v6) = v3[3];
        *(_QWORD *)((char *)v27 + ((v6 >> 3) & 0x1FFFFFF8)) |= 1 << (v5 - 1);
      }
    }
    if (v23[0])
      (*(void (**)(void *))(*(_QWORD *)v23[0] + 40))(v23[0]);
    else
      ++v26;
  }
  if (v23[0])
  {
    (*(void (**)(void))(*(_QWORD *)v23[0] + 8))();
    goto LABEL_26;
  }
LABEL_24:
  if (v25)
    --*v25;
LABEL_26:
  v11 = v28;
  if (v28)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      if (((*(_QWORD *)((char *)v27 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(v23, "FATAL");
        v14 = fst::LogMessage::LogMessage((fst *)__p, (uint64_t)v23);
        v15 = (_QWORD *)fst::cerr(v14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Subroutine index ", 17);
        v16 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" not used - subroutines indexes must be consecutive", 51);
        fst::LogMessage::~LogMessage((fst::LogMessage *)__p);
        if (SHIBYTE(v24) < 0)
          operator delete(v23[0]);
        v11 = v28;
      }
      v12 = ++v13;
    }
    while (v11 > v13);
  }
LABEL_33:
  std::string::basic_string[abi:ne180100]<0>(v23, "INFO");
  v17 = fst::LogMessage::LogMessage((fst *)__p, (uint64_t)v23);
  v18 = (_QWORD *)fst::cerr(v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Found ", 6);
  v19 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" phonetic match subroutines ", 28);
  fst::LogMessage::~LogMessage((fst::LogMessage *)__p);
  if (SHIBYTE(v24) < 0)
    operator delete(v23[0]);
  if (v27)
    operator delete(v27);
}

void sub_1AD96F318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::~HashList(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _BYTE *v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  _QWORD v13[34];

  v2 = a1[6];
  if (v2)
  {
    v3 = 0;
    do
    {
      ++v3;
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  v4 = (_QWORD *)a1[7];
  v5 = (_BYTE *)a1[8];
  if (v5 == (_BYTE *)v4)
  {
    v7 = 0;
    v4 = (_QWORD *)a1[8];
  }
  else
  {
    v6 = 0;
    v7 = 0;
    do
    {
      if (v4[v6])
      {
        MEMORY[0x1AF44D160](v4[v6], 0x1020C805730B0C9);
        v4 = (_QWORD *)a1[7];
        v5 = (_BYTE *)a1[8];
      }
      ++v6;
      v7 += 1024;
    }
    while (v6 < (v5 - (_BYTE *)v4) >> 3);
  }
  if (v3 != v7 && kaldi::g_kaldi_verbose_level > -2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Possible memory leak: ", 22);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" != ", 4);
    v9 = (_QWORD *)std::ostream::operator<<();
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)": you might have forgotten to call Delete on ", 45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"some Elems", 10);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    v4 = (_QWORD *)a1[7];
  }
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  v11 = (void *)a1[3];
  if (v11)
  {
    a1[4] = v11;
    operator delete(v11);
  }
  return a1;
}

uint64_t *kaldi::quasar::SymbolDecoder<kaldi::quasar::Phonomap>::~SymbolDecoder(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;

  v2 = a1[7];
  if (v2 != -1)
  {
    v3 = a1[9];
    do
    {
      v4 = (uint64_t *)(v3 + 16 * v2);
      v4[1] = 0;
      v2 = *v4;
    }
    while (v2 != -1);
  }
  v5 = a1[6];
  a1[6] = 0;
  a1[7] = -1;
  if (v5)
  {
    v6 = a1[12];
    do
    {
      v7 = v5;
      v5 = *(_QWORD *)(v5 + 8);
      *(_QWORD *)(v7 + 8) = v6;
      v6 = v7;
    }
    while (v5);
    a1[12] = v7;
  }
  v8 = *a1;
  a1[2] = a1[1];
  a1[4] = 0;
  if (v8)
    MEMORY[0x1AF44D160](v8, 0x1000C8027586B93);
  v9 = (void *)a1[31];
  if (v9)
  {
    a1[32] = (uint64_t)v9;
    operator delete(v9);
  }
  std::deque<int>::~deque[abi:ne180100](a1 + 25);
  v10 = (void *)a1[18];
  if (v10)
  {
    a1[19] = (uint64_t)v10;
    operator delete(v10);
  }
  kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::~HashList(a1 + 6);
  v11 = (void *)a1[1];
  if (v11)
  {
    a1[2] = (uint64_t)v11;
    operator delete(v11);
  }
  return a1;
}

void std::vector<quasar::PhoneticMatchResult>::__assign_with_size[abi:ne180100]<quasar::PhoneticMatchResult*,quasar::PhoneticMatchResult*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t matched;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<quasar::PhoneticMatchResult>::__vdeallocate((void **)a1);
    if (a4 > 0x38E38E38E38E38ELL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x1C71C71C71C71C72 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x1C71C71C71C71C7)
      v11 = 0x38E38E38E38E38ELL;
    else
      v11 = v10;
    std::vector<quasar::TranslationToken>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    matched = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::PhoneticMatchResult>,quasar::PhoneticMatchResult*,quasar::PhoneticMatchResult*,quasar::PhoneticMatchResult*>(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::PhoneticMatchResult *,quasar::PhoneticMatchResult *,quasar::PhoneticMatchResult *>((uint64_t)&v17, a2, v13, (uint64_t)v9);
    matched = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::PhoneticMatchResult>,quasar::PhoneticMatchResult*,quasar::PhoneticMatchResult*,quasar::PhoneticMatchResult*>(v8, v13, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = matched;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::PhoneticMatchResult *,quasar::PhoneticMatchResult *,quasar::PhoneticMatchResult *>((uint64_t)&v18, a2, a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 72;
      std::allocator<quasar::PhoneticMatchResult>::destroy[abi:ne180100](v8, v16);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1AD96F78C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1AD96F794(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<quasar::PhoneticMatchResult>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 72;
        std::allocator<quasar::PhoneticMatchResult>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::PhoneticMatchResult>,quasar::PhoneticMatchResult*,quasar::PhoneticMatchResult*,quasar::PhoneticMatchResult*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::allocator<quasar::PhoneticMatchResult>::construct[abi:ne180100]<quasar::PhoneticMatchResult,quasar::PhoneticMatchResult&>(a1, v4, v6);
      v6 += 72;
      v4 = v12 + 72;
      v12 += 72;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchResult>,quasar::PhoneticMatchResult*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1AD96F89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchResult>,quasar::PhoneticMatchResult*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::PhoneticMatchResult>::construct[abi:ne180100]<quasar::PhoneticMatchResult,quasar::PhoneticMatchResult&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string *v5;
  __int128 v6;
  int v7;

  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__init_with_size[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan*,quasar::PhoneticMatchAlignmentSpan*>((_QWORD *)(a2 + 16), *(uint64_t **)(a3 + 16), *(uint64_t **)(a3 + 24), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a3 + 24) - *(_QWORD *)(a3 + 16)) >> 3));
  v5 = (std::string *)(a2 + 40);
  if (*(char *)(a3 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 40), *(_QWORD *)(a3 + 48));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 40);
    *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = *(_DWORD *)(a3 + 64);
  *(_DWORD *)(a2 + 67) = *(_DWORD *)(a3 + 67);
  *(_DWORD *)(a2 + 64) = v7;
}

void sub_1AD96F958(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<quasar::PhoneticMatchAlignmentSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::PhoneticMatchResult *,quasar::PhoneticMatchResult *,quasar::PhoneticMatchResult *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  if (a2 == a3)
    return a2;
  v5 = a3;
  v6 = a2 + 24;
  do
  {
    v7 = v6 - 24;
    *(_OWORD *)a4 = *(_OWORD *)(v6 - 24);
    if (a4 != v6 - 24)
      std::vector<quasar::PhoneticMatchAlignmentSpan>::__assign_with_size[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan*,quasar::PhoneticMatchAlignmentSpan*>(a4 + 16, *(uint64_t **)(v6 - 8), *(uint64_t **)v6, 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)v6 - *(_QWORD *)(v6 - 8)) >> 3));
    std::string::operator=((std::string *)(a4 + 40), (const std::string *)(v6 + 16));
    v8 = *(_DWORD *)(v6 + 43);
    *(_DWORD *)(a4 + 64) = *(_DWORD *)(v6 + 40);
    *(_DWORD *)(a4 + 67) = v8;
    a4 += 72;
    v6 += 72;
  }
  while (v7 + 72 != v5);
  return v5;
}

void std::vector<quasar::ItnOverride>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 72;
        std::allocator<quasar::ItnOverride>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<quasar::ItnOverride>::__assign_with_size[abi:ne180100]<quasar::ItnOverride*,quasar::ItnOverride*>(uint64_t a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<quasar::ItnOverride>::__vdeallocate((void **)a1);
    if (a4 > 0x38E38E38E38E38ELL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x1C71C71C71C71C72 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x1C71C71C71C71C7)
      v11 = 0x38E38E38E38E38ELL;
    else
      v11 = v10;
    std::vector<quasar::TranslationToken>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::ItnOverride>,quasar::ItnOverride*,quasar::ItnOverride*,quasar::ItnOverride*>(v8, (__int128 *)__str, a3, *(std::string **)(a1 + 8));
    goto LABEL_11;
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::ItnOverride *,quasar::ItnOverride *,quasar::ItnOverride *>((int)&v17, __str, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::ItnOverride>,quasar::ItnOverride*,quasar::ItnOverride*,quasar::ItnOverride*>(v8, (__int128 *)v13, a3, *(std::string **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::ItnOverride *,quasar::ItnOverride *,quasar::ItnOverride *>((int)&v18, __str, (std::string *)a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 72;
      std::allocator<quasar::ItnOverride>::destroy[abi:ne180100](v8, v16);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1AD96FC24(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1AD96FC2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::ItnOverride *,quasar::ItnOverride *,quasar::ItnOverride *>(int a1, std::string *__str, std::string *a3, std::string *this)
{
  std::string *v5;
  std::string *v6;

  v5 = __str;
  if (__str == a3)
    return __str;
  v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    std::string::operator=(this + 1, v5 + 1);
    std::string::operator=(this + 2, v5 + 2);
    this += 3;
    v5 += 3;
  }
  while (v5 != v6);
  return v6;
}

std::string *quasar::PhonesetMapping::PhonesetMapping(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  return this;
}

void quasar::PhonesetMapping::removeExtraSpaces(int a1, std::string *this)
{
  std::string::size_type size;
  __int32 *v4;
  int v5;
  std::string::size_type v6;
  std::__wrap_iter<const char *> v7;
  std::__wrap_iter<const char *> v8;
  std::__shared_weak_count *cntrl;
  uint64_t *p_shared_owners;
  unint64_t v11;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type v12;
  std::match_results<const wchar_t *> __p;

  kaldi::Trim(this);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](&v12.__traits_, "\\s{2,}", 0);
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 41);
  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v4 = (__int32 *)this;
  else
    v4 = (__int32 *)this->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = this->__r_.__value_.__l.__size_;
  v5 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)&v12, v4, (__int32 *)((char *)v4 + size), &__p, 0);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  if (v5)
  {
    memset(&__p, 0, 24);
    v6 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((v6 & 0x80u) == 0)
      v7.__i_ = (std::__wrap_iter<const char *>::iterator_type)this;
    else
      v7.__i_ = (std::__wrap_iter<const char *>::iterator_type)this->__r_.__value_.__r.__words[0];
    if ((v6 & 0x80u) != 0)
      v6 = this->__r_.__value_.__l.__size_;
    v8.__i_ = &v7.__i_[v6];
    std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>((std::string *)&__p, v7, v8, &v12, " ", 0);
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      operator delete(this->__r_.__value_.__l.__data_);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__matches_.__begin_;
    this->__r_.__value_.__r.__words[2] = (std::string::size_type)__p.__matches_.__end_cap_.__value_;
  }
  cntrl = v12.__start_.__cntrl_;
  if (v12.__start_.__cntrl_)
  {
    p_shared_owners = &v12.__start_.__cntrl_->__shared_owners_;
    do
      v11 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v11 - 1, (unint64_t *)p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
      std::__shared_weak_count::__release_weak(cntrl);
    }
  }
  std::locale::~locale(&v12.__traits_.__loc_);
}

void sub_1AD96FE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::locale::~locale((std::locale *)&a9);
  _Unwind_Resume(a1);
}

void quasar::PhonesetMapping::checkForSilencePhones(uint64_t a1, std::string *a2)
{
  uint64_t size;
  BOOL v3;
  std::string *v4;
  char *v6;
  std::string *v7;
  char *v8;
  std::string::size_type v10;
  int v11;
  _OWORD v12[17];

  size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v3 = (size & 0x80u) != 0;
  if ((size & 0x80u) != 0)
    size = a2->__r_.__value_.__l.__size_;
  if (v3)
    v4 = (std::string *)a2->__r_.__value_.__r.__words[0];
  else
    v4 = a2;
  if (size >= 3)
  {
    v6 = (char *)v4 + size;
    v7 = v4;
    do
    {
      v8 = (char *)memchr(v7, 115, size - 2);
      if (!v8)
        break;
      if (*(_WORD *)v8 == 26995 && v8[2] == 108)
      {
        if (v8 != v6)
        {
          v10 = v8 - (char *)v4;
          if (v10 != -1)
          {
            if (quasar::gLogLevel >= 5)
            {
              memset(v12, 0, sizeof(v12));
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Ignoring silence phone \"sil\"", 28);
              quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v12);
            }
            v11 = std::string::erase(a2, v10, 3uLL);
            quasar::PhonesetMapping::removeExtraSpaces(v11, a2);
          }
        }
        return;
      }
      v7 = (std::string *)(v8 + 1);
      size = v6 - (char *)v7;
    }
    while (v6 - (char *)v7 >= 3);
  }
}

void sub_1AD96FFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::PhonesetMapping::checkLanguageAndPhoneset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  quasar::PhonesetMapping::checkForSilencePhones(a1, (std::string *)a3);
  v6 = *(unsigned __int8 *)(a3 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a3 + 8);
  if (!v6)
  {
    if (quasar::gLogLevel < 5)
      return 0;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v13 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"ASR prons are empty", 19);
LABEL_21:
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v13);
    return 0;
  }
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 23))
      goto LABEL_6;
    goto LABEL_11;
  }
  if (!*(_QWORD *)(a1 + 8))
  {
LABEL_11:
    if (quasar::gLogLevel < 5)
      return 0;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v13 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Language not provided", 21);
    goto LABEL_21;
  }
LABEL_6:
  if (*(_QWORD *)(a2 + 24))
    return 1;
  if (quasar::gLogLevel >= 5)
  {
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v13 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v13);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Unsupported language: \"", 23);
    v9 = *(char *)(a1 + 23);
    if (v9 >= 0)
      v10 = a1;
    else
      v10 = *(_QWORD *)a1;
    if (v9 >= 0)
      v11 = *(unsigned __int8 *)(a1 + 23);
    else
      v11 = *(_QWORD *)(a1 + 8);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\"", 1);
    goto LABEL_21;
  }
  return 0;
}

void sub_1AD970180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  _Unwind_Resume(a1);
}

void quasar::PhonesetMapping::getMappedPhonemes(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  const std::string::value_type *v12;
  const std::string::value_type *v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  int v17;
  char v18;
  std::string::size_type size;
  char v20;
  _QWORD *v21;
  std::string *v22;
  std::string::size_type v23;
  _QWORD *v24;
  void *__p[2];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  std::string v42;
  std::string __str;
  char v44[9];

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __str = *(std::string *)a3;
  quasar::PhonesetMapping::removeExtraSpaces(a1, &__str);
  if ((quasar::PhonesetMapping::checkLanguageAndPhoneset(a1, (uint64_t)a2, (uint64_t)&__str) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(a4, "");
    goto LABEL_45;
  }
  v7 = 0;
  v8 = 0;
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  memset(&v42, 0, sizeof(v42));
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    v9 = __str.__r_.__value_.__r.__words[1];
  while (v8 <= ~v7 + v9)
  {
    std::string::basic_string((std::string *)__p, &__str, v7, v9 - v8 - v7, (std::allocator<char> *)v44);
    std::string::operator=(&v42, (const std::string *)__p);
    v10 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a2, (unsigned __int8 *)__p);
    if (!v10)
    {
      ++v8;
LABEL_25:
      v18 = 1;
      goto LABEL_26;
    }
    v13 = (const std::string::value_type *)*((_QWORD *)v10 + 5);
    v11 = v10 + 40;
    v12 = v13;
    v14 = (char)v11[23];
    if (v14 >= 0)
      v15 = (const std::string::value_type *)v11;
    else
      v15 = v12;
    if (v14 >= 0)
      v16 = v11[23];
    else
      v16 = *((_QWORD *)v11 + 1);
    std::string::append(a4, v15, v16);
    if ((SBYTE7(v26) & 0x80u) == 0)
      v17 = BYTE7(v26);
    else
      v17 = (int)__p[1];
    MEMORY[0x1AF44C914](&v42, "");
    v7 += v17;
    if (v9 - v8 <= v9 - 1)
    {
      if (*std::string::at(&__str, v9 - v8) == 32)
        ++v7;
      std::string::append(a4, ".");
      v8 = 0;
      goto LABEL_25;
    }
    v18 = 0;
LABEL_26:
    if (SBYTE7(v26) < 0)
    {
      operator delete(__p[0]);
      if ((v18 & 1) == 0)
        break;
    }
    else if ((v18 & 1) == 0)
    {
      break;
    }
  }
  size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
  v20 = HIBYTE(v42.__r_.__value_.__r.__words[2]);
  if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v42.__r_.__value_.__l.__size_;
  if (size)
  {
    if (quasar::gLogLevel >= 4)
    {
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unknown phone: \"", 16);
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = &v42;
      else
        v22 = (std::string *)v42.__r_.__value_.__r.__words[0];
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = HIBYTE(v42.__r_.__value_.__r.__words[2]);
      else
        v23 = v42.__r_.__value_.__l.__size_;
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\"", 1);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    MEMORY[0x1AF44C914](a4, "");
    v20 = HIBYTE(v42.__r_.__value_.__r.__words[2]);
  }
  if (v20 < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
LABEL_45:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1AD970448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v15;

  if (*(char *)(v15 - 129) < 0)
    operator delete(*(void **)(v15 - 152));
  if (*(char *)(v14 + 23) < 0)
    operator delete(*(void **)v14);
  if (*(char *)(v15 - 105) < 0)
    operator delete(*(void **)(v15 - 128));
  _Unwind_Resume(exception_object);
}

uint64_t quasar::PhonesetMapping::getIpaPhoneSequence@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v21[17];
  _QWORD v22[5];

  quasar::PhonesetMapPerLanguage::getAsrToIpaMap(a1, a2);
  quasar::PhonesetMapping::getMappedPhonemes(a1, v22, a2, (std::string *)a3);
  if (quasar::gLogLevel >= 5)
  {
    memset(v21, 0, sizeof(v21));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Language = ", 11);
    v7 = *(char *)(a1 + 23);
    if (v7 >= 0)
      v8 = a1;
    else
      v8 = *(_QWORD *)a1;
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(a1 + 23);
    else
      v9 = *(_QWORD *)(a1 + 8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", IPA prons=", 12);
    v12 = *(char *)(a3 + 23);
    if (v12 >= 0)
      v13 = a3;
    else
      v13 = *(_QWORD *)a3;
    if (v12 >= 0)
      v14 = *(unsigned __int8 *)(a3 + 23);
    else
      v14 = *(_QWORD *)(a3 + 8);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", ASR prons=", 12);
    v17 = *(char *)(a2 + 23);
    if (v17 >= 0)
      v18 = a2;
    else
      v18 = *(_QWORD *)a2;
    if (v17 >= 0)
      v19 = *(unsigned __int8 *)(a2 + 23);
    else
      v19 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v21);
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v22);
}

void sub_1AD9705F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v2 - 72);
  _Unwind_Resume(a1);
}

double quasar::PhonesetMapPerLanguage::getAsrToIpaMap(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v11;
  _QWORD *v12;
  _DWORD *v13;
  int v17;
  int v18;
  int v21;
  int v22;
  double result;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unsigned __int8 *v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t i;
  uint64_t j;
  uint64_t v43;
  unsigned __int8 *v44;
  uint64_t k;
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t m;
  unsigned __int8 v49[48];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[7];

  v2 = (_QWORD *)MEMORY[0x1E0C80A78](a1, a2);
  v3 = v2;
  v5 = v4;
  v205[6] = *MEMORY[0x1E0C80C00];
  v6 = *((unsigned __int8 *)v2 + 23);
  if (*((char *)v2 + 23) < 0)
  {
    if (v2[1] != 5)
      goto LABEL_53;
    v13 = (_DWORD *)*v2;
    if (*(_DWORD *)*v2 != 1432317541 || *(_BYTE *)(*v2 + 4) != 83)
    {
      if (*v13 != 1130326138 || *((_BYTE *)v13 + 4) != 78)
      {
        if (*v13 != 1096773221 || *((_BYTE *)v13 + 4) != 85)
        {
          v17 = *v13;
          v18 = *((unsigned __int8 *)v13 + 4);
          if (v17 != 1197436517 || v18 != 66)
          {
            if (v2[1] != 5)
              goto LABEL_53;
            v12 = (_QWORD *)*v2;
            if (*(_DWORD *)*v2 != 1163883365 || *(_BYTE *)(*v2 + 4) != 83)
            {
              if ((v6 & 0x80) == 0)
              {
                v12 = v2;
                if (v6 != 5)
                  goto LABEL_53;
              }
              goto LABEL_49;
            }
LABEL_121:
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v49, "AA", "ˈa");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v50, "AU", "ˈa w");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v51, "AY", "ˈa j");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v52, "EE", "ˈe");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v53, "EY", "ˈe j");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v54, "II", "ˈi");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v55, "OO", "ˈo");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v56, "OY", "ˈo j");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v57, "UU", "ˈu");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v58, "UY", "ˈu i");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v59, "Z", "θ");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v60, "aa", "a");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v61, "b", "b");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v62, "ch", "t͡ʃ");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v63, "d", "ð");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v64, "ee", "e");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v65, "f", "f");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v66, "g", "g");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v67, "ii", "i");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v68, "j", "x");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v69, "k", "k");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v70, "ks", "ks");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v71, "l", "l");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v72, "m", "m");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v73, "n", "n");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v74, "nn", "ɲ");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v75, "oo", "o");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v76, "p", "p");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v77, "r", "ɾ");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v78, "rr", "r");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v79, "s", "s");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v80, "t", "t");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v81, "uu", "u");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v82, "w", "w");
            std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v83, "y", "j");
            std::unordered_map<std::string,std::string>::unordered_map(v5, v49, 35);
            v43 = 1680;
            do
            {
              v44 = &v49[v43];
              if ((char)v49[v43 - 1] < 0)
                operator delete(*((void **)v44 - 3));
              if ((char)*(v44 - 25) < 0)
                operator delete(*((void **)v44 - 6));
              v43 -= 48;
            }
            while (v43);
            return result;
          }
LABEL_106:
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v49, "AA", "ˈæ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[12],0>(v50, "AE", "ˈɛ͡ə ɻ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v51, "AH", "ˈɑ ɻ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v52, "AW", "ˈɒ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v53, "AWH", "ˈɔ ɻ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v54, "AY", "ˈa͡ɪ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v55, "EE", "ˈi");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v56, "EH", "ˈɛ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v57, "EY", "ˈe͡ɪ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v58, "IH", "ˈɪ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v59, "OH", "ˈo͡ʊ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v60, "OO", "ˈʊ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v61, "OOH", "ˈu");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v62, "OW", "ˈa͡ʊ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[9],0>(v63, "OY", "ˈɔ͡ɪ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v64, "UH", "ˈʌ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v65, "UR", "ˈɜ ɻ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v66, "b", "b");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v67, "ch", "t͡ʃ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v68, "d", "d");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v69, "dh", "ð");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v70, "ee", "i");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v71, "eh", "ɪ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v72, "f", "f");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v73, "g", "g");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v74, "h", "h");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v75, "ih", "ɪ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[6],0>(v76, "j", "d͡ʒ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v77, "k", "k");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v78, "l", "l");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v79, "m", "m");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v80, "n", "n");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v81, "ng", "ŋ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v82, "oh", "o͡ʊ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v83, "p", "p");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v84, "r", "ɻ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v85, "s", "s");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v86, "sh", "ʃ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v87, "t", "t");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v88, "th", "θ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v89, "uh", "ə");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v90, "ul", "ə l");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v91, "um", "ə m");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v92, "un", "ə n");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v93, "ur", "ə ɻ");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v94, "v", "v");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v95, "w", "w");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v96, "y", "j");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v97, "z", "z");
          std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v98, "zh", "ʒ");
          std::unordered_map<std::string,std::string>::unordered_map(v5, v49, 50);
          v39 = 2400;
          do
          {
            v40 = &v49[v39];
            if ((char)v49[v39 - 1] < 0)
              operator delete(*((void **)v40 - 3));
            if ((char)*(v40 - 25) < 0)
              operator delete(*((void **)v40 - 6));
            v39 -= 48;
          }
          while (v39);
          return result;
        }
LABEL_91:
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v49, "AA", "ˈæ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[12],0>(v50, "AE", "ˈɛ͡ə ɻ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v51, "AH", "ˈɑ ɻ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v52, "AW", "ˈɒ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v53, "AWH", "ˈɔ ɻ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v54, "AY", "ˈa͡ɪ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v55, "EE", "ˈi");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v56, "EH", "ˈɛ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v57, "EY", "ˈe͡ɪ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v58, "IH", "ˈɪ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v59, "OH", "ˈo͡ʊ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v60, "OO", "ˈʊ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v61, "OOH", "ˈu");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v62, "OW", "ˈa͡ʊ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[9],0>(v63, "OY", "ˈɔ͡ɪ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v64, "UH", "ˈʌ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v65, "UR", "ˈɜ ɻ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v66, "b", "b");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v67, "ch", "t͡ʃ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v68, "d", "d");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v69, "dh", "ð");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v70, "ee", "i");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v71, "eh", "ɪ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v72, "f", "f");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v73, "g", "g");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v74, "h", "h");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v75, "ih", "ɪ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[6],0>(v76, "j", "d͡ʒ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v77, "k", "k");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v78, "l", "l");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v79, "m", "m");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v80, "n", "n");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v81, "ng", "ŋ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v82, "oh", "o͡ʊ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v83, "p", "p");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v84, "r", "ɻ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v85, "s", "s");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v86, "sh", "ʃ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v87, "t", "t");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v88, "th", "θ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v89, "uh", "ə");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v90, "ul", "ə l");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v91, "um", "ə m");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v92, "un", "ə n");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v93, "ur", "ə ɻ");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v94, "v", "v");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v95, "w", "w");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v96, "y", "j");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v97, "z", "z");
        std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v98, "zh", "ʒ");
        std::unordered_map<std::string,std::string>::unordered_map(v5, v49, 50);
        v35 = 2400;
        do
        {
          v36 = &v49[v35];
          if ((char)v49[v35 - 1] < 0)
            operator delete(*((void **)v36 - 3));
          if ((char)*(v36 - 25) < 0)
            operator delete(*((void **)v36 - 6));
          v35 -= 48;
        }
        while (v35);
        return result;
      }
LABEL_84:
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v49, "A1", "a˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v50, "A2", "a˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v51, "A3", "a˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v52, "A4", "a˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v53, "A5", "a˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v54, "AG1", "ɑŋ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v55, "AG2", "ɑŋ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[11],0>(v56, "AG3", "ɑŋ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v57, "AG4", "ɑŋ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v58, "AG5", "ɑŋ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v59, "AI1", "a͡ɪ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v60, "AI2", "a͡ɪ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[12],0>(v61, "AI3", "a͡ɪ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v62, "AI4", "a͡ɪ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v63, "AI5", "a͡ɪ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v64, "AN1", "an˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v65, "AN2", "an˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v66, "AN3", "an˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v67, "AN4", "an˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v68, "AN5", "an˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v69, "AO1", "a͡ʊ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v70, "AO2", "a͡ʊ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[12],0>(v71, "AO3", "a͡ʊ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v72, "AO4", "a͡ʊ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v73, "AO5", "a͡ʊ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v74, "B", "p");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v75, "BI", "pj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v76, "BU", "p");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[7],0>(v77, "C", "t͡sʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v78, "CH", "t͡ʂʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v79, "CHU", "t͡ʂʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v80, "CU", "t͡sʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v81, "D", "t");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v82, "DI", "tj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v83, "DU", "tw");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v84, "E1", "ɤ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v85, "E2", "ɤ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[9],0>(v86, "E3", "ɤ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v87, "E4", "ɤ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v88, "E5", "ɤ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v89, "EG1", "əŋ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v90, "EG2", "əŋ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[11],0>(v91, "EG3", "əŋ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v92, "EG4", "əŋ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v93, "EG5", "əŋ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v94, "EI1", "e͡ɪ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v95, "EI2", "e͡ɪ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[12],0>(v96, "EI3", "e͡ɪ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v97, "EI4", "e͡ɪ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v98, "EI5", "e͡ɪ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v99, "EN1", "ən˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v100, "EN2", "ən˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v101, "EN3", "ən˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v102, "EN4", "ən˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v103, "EN5", "ən˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v104, "ER2", "ə˞˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[11],0>(v105, "ER3", "ə˞˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v106, "ER4", "ə˞˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v107, "ER5", "ə˞˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v108, "F", "f");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v109, "G", "k");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[1],0>(v110, "GS", "");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v111, "GU", "kw");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v112, "H", "χ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v113, "HU", "χw");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v114, "I1", "i˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v115, "I2", "i˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v116, "I3", "i˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v117, "I4", "i˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v118, "I5", "i˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v119, "IE1", "ɛ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v120, "IE2", "ɛ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v121, "IE3", "ɛ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v122, "IE4", "ɛ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v123, "IE5", "ɛ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v124, "IG1", "iŋ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v125, "IG2", "iŋ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v126, "IG3", "iŋ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v127, "IG4", "iŋ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v128, "IG5", "iŋ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v129, "IH1", "ɪ̈˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v130, "IH2", "ɪ̈˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[11],0>(v131, "IH3", "ɪ̱˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v132, "IH4", "ɪ̈˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v133, "IH5", "ɪ̱˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v134, "IN1", "in˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v135, "IN2", "in˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v136, "IN3", "in˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v137, "IN4", "in˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v138, "IN5", "in˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v139, "JI", "t͡ɕj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v140, "JU", "t͡ɕy");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[4],0>(v141, "K", "kʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v142, "KU", "kʰw");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v143, "L", "l");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v144, "LI", "lj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v145, "LU", "l");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v146, "LYU", "ly");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v147, "M", "m");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v148, "MI", "mj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v149, "MU", "m");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v150, "N", "n");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v151, "NI", "nj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v152, "NU", "n");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v153, "NYU", "ny");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v154, "O1", "ɔ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v155, "O2", "ɔ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[9],0>(v156, "O3", "ɔ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v157, "O4", "ɔ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v158, "O5", "ɔ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v159, "OG1", "oŋ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v160, "OG2", "oŋ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v161, "OG3", "oŋ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v162, "OG4", "oŋ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v163, "OG5", "oŋ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v164, "OU1", "o͡ʊ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v165, "OU2", "o͡ʊ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[12],0>(v166, "OU3", "o͡ʊ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v167, "OU4", "o͡ʊ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v168, "OU5", "o͡ʊ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[4],0>(v169, "P", "pʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v170, "PI", "pʰj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[9],0>(v171, "QI", "t͡ɕʰj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[9],0>(v172, "QU", "t͡ɕʰy");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v173, "R", "ʐ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v174, "RU", "ʐ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v175, "S", "s");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v176, "SH", "ʂ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v177, "SHU", "ʂ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v178, "SU", "sw");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[4],0>(v179, "T", "tʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v180, "TI", "tʰj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v181, "TU", "tʰw");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v182, "U1", "u˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v183, "U2", "u˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v184, "U3", "u˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v185, "U4", "u˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v186, "U5", "u˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v187, "UN1", "wn˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v188, "UN2", "wn˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v189, "UN3", "wn˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v190, "UN4", "wn˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v191, "UN5", "wn˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v192, "W", "w");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v193, "XI", "ɕj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v194, "XU", "ɕy");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v195, "Y", "j");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v196, "YU", "jy");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v197, "YU1", "˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v198, "YU2", "˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v199, "YU3", "˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v200, "YU4", "˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v201, "YU5", "˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[5],0>(v202, "Z", "t͡s");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v203, "ZH", "t͡ʂ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v204, "ZHU", "t͡ʂ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v205, "ZU", "t͡sw");
      std::unordered_map<std::string,std::string>::unordered_map(v5, v49, 157);
      v33 = 7536;
      do
      {
        v34 = &v49[v33];
        if ((char)v49[v33 - 1] < 0)
          operator delete(*((void **)v34 - 3));
        if ((char)*(v34 - 25) < 0)
          operator delete(*((void **)v34 - 6));
        v33 -= 48;
      }
      while (v33);
      return result;
    }
LABEL_69:
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v49, "AA", "ˈæ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v50, "AE", "ˈɛ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v51, "AH", "ˈɑ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v52, "AW", "ˈɑ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v53, "AWH", "ˈɔ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v54, "AY", "ˈa͡ɪ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v55, "EE", "ˈi");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v56, "EH", "ˈɛ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v57, "EY", "ˈe͡ɪ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v58, "IH", "ˈɪ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v59, "OH", "ˈo͡ʊ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v60, "OO", "ˈʊ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v61, "OOH", "ˈu");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v62, "OW", "ˈa͡ʊ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[9],0>(v63, "OY", "ˈɔ͡ɪ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v64, "UH", "ˈʌ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v65, "UR", "ˈɜ ɻ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v66, "b", "b");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v67, "ch", "t͡ʃ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v68, "d", "d");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v69, "dh", "ð");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v70, "ee", "i");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v71, "eh", "ɛ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v72, "f", "f");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v73, "g", "g");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v74, "h", "h");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v75, "ih", "ɪ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[6],0>(v76, "j", "d͡ʒ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v77, "k", "k");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v78, "l", "l");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v79, "m", "m");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v80, "n", "n");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v81, "ng", "ŋ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v82, "oh", "o͡ʊ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v83, "p", "p");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v84, "r", "ɻ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v85, "s", "s");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v86, "sh", "ʃ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v87, "t", "t");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v88, "th", "θ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v89, "uh", "ə");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v90, "ul", "ə l");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v91, "um", "ə m");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v92, "un", "ə n");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v93, "ur", "ə ɻ");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v94, "v", "v");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v95, "w", "w");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v96, "y", "j");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v97, "z", "z");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v98, "zh", "ʒ");
    std::unordered_map<std::string,std::string>::unordered_map(v5, v49, 50);
    v29 = 2400;
    do
    {
      v30 = &v49[v29];
      if ((char)v49[v29 - 1] < 0)
        operator delete(*((void **)v30 - 3));
      if ((char)*(v30 - 25) < 0)
        operator delete(*((void **)v30 - 6));
      v29 -= 48;
    }
    while (v29);
    return result;
  }
  if (v6 != 5)
    goto LABEL_53;
  if (*(_DWORD *)v2 == 1432317541 && *((_BYTE *)v2 + 4) == 83)
    goto LABEL_69;
  if (*(_DWORD *)v2 == 1130326138 && *((_BYTE *)v2 + 4) == 78)
    goto LABEL_84;
  if (*(_DWORD *)v2 == 1096773221 && *((_BYTE *)v2 + 4) == 85)
    goto LABEL_91;
  if (*(_DWORD *)v2 == 1197436517 && *((_BYTE *)v2 + 4) == 66)
    goto LABEL_106;
  v11 = *(_DWORD *)v2 == 1163883365 && *((_BYTE *)v2 + 4) == 83;
  v12 = v2;
  if (v11)
    goto LABEL_121;
LABEL_49:
  v21 = *(_DWORD *)v12;
  v22 = *((unsigned __int8 *)v12 + 4);
  if (v21 != 1432318821 || v22 != 83)
  {
LABEL_53:
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "fr_CA"))
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v49, "ACI", "ɑ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v50, "AE", "ə");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v51, "AGR", "a");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v52, "AN", "an");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v53, "EAC", "e");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v54, "ECI", "ɛ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v55, "EN", "ẽ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v56, "II", "i");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v57, "OCI", "o");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v58, "OE", "ə");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v59, "OEE", "ø");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v60, "OEN", "œn");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v61, "ON", "ən");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v62, "OO", "ɔ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v63, "QQ", "ə");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v64, "UGR", "u");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v65, "UY", "y");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v66, "b", "b");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v67, "d", "d");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v68, "f", "f");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v69, "g", "g");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v70, "ge", "ʒ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v71, "gn", "ɲ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v72, "k", "k");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v73, "l", "l");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v74, "m", "m");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v75, "n", "n");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v76, "ng", "ŋ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v77, "p", "p");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v78, "r", "ʀ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v79, "s", "s");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v80, "sh", "ʃ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v81, "t", "t");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v82, "v", "v");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v83, "w", "w");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v84, "y", "j");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v85, "yw", "ɥ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v86, "z", "z");
      std::unordered_map<std::string,std::string>::unordered_map(v5, v49, 38);
      v25 = 1824;
      do
      {
        v26 = &v49[v25];
        if ((char)v49[v25 - 1] < 0)
          operator delete(*((void **)v26 - 3));
        if ((char)*(v26 - 25) < 0)
          operator delete(*((void **)v26 - 6));
        v25 -= 48;
      }
      while (v25);
    }
    else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "fr_FR"))
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v49, "ACI", "a");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v50, "AE", "ə");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v51, "AGR", "a");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v52, "AN", "ɑ̃");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v53, "EAC", "e");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v54, "ECI", "ɛ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v55, "EN", "ɛ̃");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v56, "II", "i");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v57, "OCI", "o");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v58, "OE", "œ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v59, "OEE", "ø");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v60, "OEN", "œ̃");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v61, "ON", "ɔ̃");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v62, "OO", "ɔ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v63, "QQ", "ə");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v64, "UGR", "u");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v65, "UY", "y");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v66, "b", "b");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v67, "d", "d");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v68, "f", "f");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v69, "g", "g");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v70, "ge", "ʒ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v71, "gn", "ɲ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v72, "k", "k");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v73, "l", "l");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v74, "m", "m");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v75, "n", "n");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v76, "ng", "ŋg");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v77, "p", "p");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v78, "r", "ʀ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v79, "s", "s");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v80, "sh", "ʃ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v81, "t", "t");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v82, "v", "v");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v83, "w", "w");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v84, "y", "j");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v85, "yw", "ɥ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v86, "z", "z");
      std::unordered_map<std::string,std::string>::unordered_map(v5, v49, 38);
      v27 = 1824;
      do
      {
        v28 = &v49[v27];
        if ((char)v49[v27 - 1] < 0)
          operator delete(*((void **)v28 - 3));
        if ((char)*(v28 - 25) < 0)
          operator delete(*((void **)v28 - 6));
        v27 -= 48;
      }
      while (v27);
    }
    else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "it_IT"))
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v49, "AA", "ˈa");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v50, "AI", "ˈa j");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v51, "AU", "ˈa w");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v52, "EE", "ˈe");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v53, "EI", "ˈe j");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v54, "ETT", "ˈɛ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v55, "II", "ˈi");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v56, "OI", "ˈo j");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v57, "OO", "ˈo");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v58, "OTT", "ˈɔ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v59, "UU", "ˈu");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v60, "aa", "a");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v61, "b", "b");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v62, "ci", "t͡ʃ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v63, "d", "d");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v64, "ee", "e");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v65, "f", "f");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v66, "g", "g");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v67, "gi", "d͡ʒ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v68, "gl", "ʎː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v69, "gn", "ɲː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v70, "ii", "i");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v71, "j", "j");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v72, "k", "k");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v73, "l", "l");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v74, "m", "m");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v75, "n", "n");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v76, "oo", "o");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v77, "p", "p");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v78, "r", "r");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v79, "rr", "r");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v80, "s", "s");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v81, "sci", "ʃ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v82, "t", "t");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v83, "uu", "u");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v84, "v", "v");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v85, "w", "w");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v86, "z", "z");
      std::unordered_map<std::string,std::string>::unordered_map(v5, v49, 38);
      v31 = 1824;
      do
      {
        v32 = &v49[v31];
        if ((char)v49[v31 - 1] < 0)
          operator delete(*((void **)v32 - 3));
        if ((char)*(v32 - 25) < 0)
          operator delete(*((void **)v32 - 6));
        v31 -= 48;
      }
      while (v31);
    }
    else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "ja-JP"))
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[5],0>(v49, "A", "ɑː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v50, "E", "i");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[4],0>(v51, "I", "iː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v52, "N", "ɴ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v53, "O", "ɯ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v54, "Qb", "bː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v55, "Qch", "t͡ɕː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v56, "Qd", "dː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v57, "Qf", "ɸːw");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v58, "Qg", "gː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v59, "Qh", "hː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v60, "Qj", "zj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v61, "Qk", "kː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v62, "Qky", "kːj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v63, "Qp", "pː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v64, "Qpy", "pːj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v65, "Qs", "sː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v66, "Qsh", "ʃː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v67, "Qt", "tː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v68, "Qts", "t͡sː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v69, "Qz", "z");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v70, "U", "ɯ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v71, "a", "ɑ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v72, "b", "b");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v73, "by", "bj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v74, "ch", "t͡ʃ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v75, "d", "d");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v76, "dy", "d");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v77, "e", "e");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v78, "f", "ɸ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v79, "g", "ŋ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v80, "gy", "ŋj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v81, "h", "h");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v82, "hy", "çj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v83, "i", "i");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v84, "j", "ʒ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v85, "k", "k");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v86, "ky", "kj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v87, "m", "m");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v88, "my", "mj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v89, "n", "n");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v90, "ny", "ɲj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v91, "o", "o");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v92, "p", "p");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v93, "py", "pj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v94, "r", "ɾ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v95, "ry", "ɾj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v96, "s", "s");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v97, "sh", "ɕ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v98, "t", "t");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v99, "ts", "t͡s");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v100, "u", "ɯ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v101, "w", "w");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v102, "y", "j");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v103, "z", "z");
      std::unordered_map<std::string,std::string>::unordered_map(v5, v49, 55);
      v37 = 2640;
      do
      {
        v38 = &v49[v37];
        if ((char)v49[v37 - 1] < 0)
          operator delete(*((void **)v38 - 3));
        if ((char)*(v38 - 25) < 0)
          operator delete(*((void **)v38 - 6));
        v37 -= 48;
      }
      while (v37);
    }
    else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "ko_KR"))
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v49, "A", "a");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v50, "E", "ɛ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v51, "I", "ɯ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v52, "U", "ɔ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v53, "b", "p");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v54, "d", "d");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v55, "dZ", "ɟ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v56, "e", "e");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v57, "g", "k");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v58, "h", "ɦ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v59, "i", "i");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v60, "j", "j");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[4],0>(v61, "k", "kʼ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v62, "kH", "kʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v63, "l", "l");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v64, "m", "m");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v65, "n", "n");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v66, "ng", "ŋ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v67, "o", "o");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[4],0>(v68, "p", "pʼ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v69, "pH", "pʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[4],0>(v70, "s", "sʼ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[4],0>(v71, "t", "tʼ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v72, "tH", "tʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v73, "tS", "cʼ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v74, "tSH", "cʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v75, "u", "u");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v76, "w", "w");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v77, "z", "s");
      std::unordered_map<std::string,std::string>::unordered_map(v5, v49, 29);
      for (i = 1344; i != -48; i -= 48)
        std::pair<std::string,std::string>::~pair((uint64_t)&v49[i]);
    }
    else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "zh_HK"))
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v49, "a1", "ɐ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v50, "a2", "ɐ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v51, "a3", "ɐ˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v52, "a4", "ɐ˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v53, "a5", "ɐ˩˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v54, "a6", "ɐ˨");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v55, "aa1", "a˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v56, "aa2", "a˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v57, "aa3", "a˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v58, "aa4", "a˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v59, "aa5", "a˩˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v60, "aa6", "a˨");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[7],0>(v61, "aai1", "a͡i˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[9],0>(v62, "aai2", "a͡i˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[7],0>(v63, "aai3", "a͡i˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[9],0>(v64, "aai4", "a͡i˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[9],0>(v65, "aai5", "a͡i˩˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[7],0>(v66, "aai6", "a͡i˨");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[7],0>(v67, "aau1", "a͡u˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[9],0>(v68, "aau2", "a͡u˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[7],0>(v69, "aau3", "a͡u˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[9],0>(v70, "aau4", "a͡u˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[9],0>(v71, "aau5", "a͡u˩˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[7],0>(v72, "aau6", "a͡u˨");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v73, "ai1", "ɐ͡i˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v74, "ai2", "ɐ͡i˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v75, "ai3", "ɐ͡i˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v76, "ai4", "ɐ͡i˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v77, "ai5", "ɐ͡i˩˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v78, "ai6", "ɐ͡i˨");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v79, "au1", "ɐ͡u˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v80, "au2", "ɐ͡u˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v81, "au3", "ɐ͡u˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v82, "au4", "ɐ͡u˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v83, "au5", "ɐ͡u˩˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v84, "au6", "ɐ͡u˨");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v85, "b", "p");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[7],0>(v86, "c", "t͡sʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v87, "d", "t");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v88, "e1", "ɛ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v89, "e2", "ɛ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v90, "e3", "ɛ˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v91, "e4", "ɛ˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v92, "e5", "ɛ˩˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v93, "e6", "ɛ˨");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v94, "ei1", "e͡i˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v95, "ei2", "e͡i˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v96, "ei3", "e͡i˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v97, "ei4", "e͡i˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v98, "ei5", "e͡i˩˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v99, "ei6", "e͡i˨");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v100, "eo1", "œ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v101, "eo2", "œ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v102, "eo3", "œ˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v103, "eo4", "œ˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v104, "eo5", "œ˩˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v105, "eo6", "œ˨");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[8],0>(v106, "eoi1", "ɵ͡y˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[10],0>(v107, "eoi2", "ɵ͡y˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[8],0>(v108, "eoi3", "ɵ͡y˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[10],0>(v109, "eoi4", "ɵ͡y˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[10],0>(v110, "eoi5", "ɵ͡y˩˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[8],0>(v111, "eoi6", "ɵ͡y˨");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v112, "f", "f");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v113, "g", "k");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v114, "gw", "kʷ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v115, "h", "h");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v116, "i1", "i˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v117, "i2", "i˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v118, "i3", "i˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v119, "i4", "i˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v120, "i5", "i˩˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v121, "i6", "i˨");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v122, "iu1", "i͡u˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v123, "iu2", "i͡u˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v124, "iu3", "i͡u˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v125, "iu4", "i͡u˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v126, "iu5", "i͡u˩˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v127, "iu6", "i͡u˨");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v128, "j", "j");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[4],0>(v129, "k", "kʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v130, "kw", "kʷʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v131, "l", "l");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v132, "m", "m");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v133, "m4", "m˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v134, "m5", "ŋ˩˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v135, "n", "n");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v136, "ng", "ŋ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v137, "ng4", "ŋ˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v138, "ng5", "ŋ˩˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v139, "ng6", "ŋ˨");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v140, "o1", "ɔ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v141, "o2", "ɔ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v142, "o3", "ɔ˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v143, "o4", "ɔ˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v144, "o5", "ɔ˩˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v145, "o6", "ɔ˨");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v146, "oe1", "œ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v147, "oe2", "œ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v148, "oe3", "œ˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v149, "oe4", "œ˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v150, "oe5", "œ˩˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v151, "oe6", "œ˨");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v152, "oi1", "ɔ͡i˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v153, "oi2", "ɔ͡i˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v154, "oi3", "ɔ͡i˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v155, "oi4", "ɔ͡i˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v156, "oi5", "ɔ͡i˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v157, "oi6", "ɔ͡i˨");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v158, "ou1", "o͡u˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v159, "ou2", "o͡u˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v160, "ou3", "o͡u˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v161, "ou4", "o͡u˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v162, "ou5", "o͡u˩˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v163, "ou6", "o͡u˨");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[4],0>(v164, "p", "pʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v165, "s", "s");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[4],0>(v166, "t", "tʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v167, "u1", "u˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v168, "u2", "u˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v169, "u3", "u˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v170, "u4", "u˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v171, "u5", "u˩˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v172, "u6", "u˨");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v173, "ui1", "u͡i˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v174, "ui2", "u͡i˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v175, "ui3", "u͡i˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v176, "ui4", "u͡i˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v177, "ui5", "u͡i˩˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v178, "ui6", "u͡i˨");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v179, "w", "w");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v180, "yu1", "y˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v181, "yu2", "y˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v182, "yu3", "y˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v183, "yu4", "y˨˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v184, "yu5", "y˩˧");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v185, "yu6", "y˨");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[5],0>(v186, "z", "t͡s");
      std::unordered_map<std::string,std::string>::unordered_map(v5, v49, 138);
      for (j = 0; j != -828; j -= 6)
        std::pair<std::string,std::string>::~pair((uint64_t)&v186[j]);
    }
    else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "zh_TW"))
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v49, "A1", "a˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v50, "A2", "a˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v51, "A3", "a˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v52, "A4", "a˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v53, "A5", "a˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v54, "AG1", "ɑŋ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v55, "AG2", "ɑŋ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[11],0>(v56, "AG3", "ɑŋ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v57, "AG4", "ɑŋ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v58, "AG5", "ɑŋ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v59, "AI1", "a͡ɪ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v60, "AI2", "a͡ɪ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[12],0>(v61, "AI3", "a͡ɪ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v62, "AI4", "a͡ɪ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v63, "AI5", "a͡ɪ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v64, "AN1", "an˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v65, "AN2", "an˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v66, "AN3", "an˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v67, "AN4", "an˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v68, "AN5", "an˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v69, "AO1", "a͡ʊ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v70, "AO2", "a͡ʊ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[12],0>(v71, "AO3", "a͡ʊ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v72, "AO4", "a͡ʊ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v73, "AO5", "a͡ʊ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v74, "B", "p");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v75, "BI", "pj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v76, "BU", "p");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[7],0>(v77, "C", "t͡sʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v78, "CH", "t͡ʂʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v79, "CHU", "t͡ʂʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v80, "CU", "t͡sʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v81, "D", "t");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v82, "DI", "tj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v83, "DU", "tw");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v84, "E1", "ɤ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v85, "E2", "ɤ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[9],0>(v86, "E3", "ɤ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v87, "E4", "ɤ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v88, "E5", "ɤ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v89, "EG1", "əŋ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v90, "EG2", "əŋ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[11],0>(v91, "EG3", "əŋ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v92, "EG4", "əŋ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v93, "EG5", "əŋ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v94, "EI1", "e͡ɪ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v95, "EI2", "e͡ɪ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[12],0>(v96, "EI3", "e͡ɪ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v97, "EI4", "e͡ɪ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v98, "EI5", "e͡ɪ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v99, "EN1", "ən˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v100, "EN2", "ən˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v101, "EN3", "ən˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v102, "EN4", "ən˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v103, "EN5", "ən˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v104, "ER2", "ə˞˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[11],0>(v105, "ER3", "ə˞˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v106, "ER4", "ə˞˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v107, "ER5", "ə˞˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v108, "F", "f");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v109, "G", "k");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[1],0>(v110, "GS", "");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v111, "GU", "kw");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v112, "H", "χ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v113, "HU", "χw");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v114, "I1", "i˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v115, "I2", "i˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v116, "I3", "i˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v117, "I4", "i˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v118, "I5", "i˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v119, "IE1", "ɛ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v120, "IE2", "ɛ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v121, "IE3", "ɛ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v122, "IE4", "ɛ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v123, "IE5", "ɛ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v124, "IG1", "iŋ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v125, "IG2", "iŋ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v126, "IG3", "iŋ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v127, "IG4", "iŋ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v128, "IG5", "iŋ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v129, "IH1", "ɪ̈˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v130, "IH2", "ɪ̈˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[11],0>(v131, "IH3", "ɪ̱˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v132, "IH4", "ɪ̈˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v133, "IH5", "ɪ̱˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v134, "IN1", "in˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v135, "IN2", "in˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v136, "IN3", "in˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v137, "IN4", "in˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v138, "IN5", "in˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v139, "JI", "t͡ɕj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v140, "JU", "t͡ɕy");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[4],0>(v141, "K", "kʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v142, "KU", "kʰw");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v143, "L", "l");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v144, "LI", "lj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v145, "LU", "l");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v146, "LYU", "ly");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v147, "M", "m");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v148, "MI", "mj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v149, "MU", "m");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v150, "N", "n");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v151, "NI", "nj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v152, "NU", "n");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v153, "NYU", "ny");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v154, "O1", "ɔ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v155, "O2", "ɔ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[9],0>(v156, "O3", "ɔ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(v157, "O4", "ɔ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v158, "O5", "ɔ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v159, "OG1", "oŋ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v160, "OG2", "oŋ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v161, "OG3", "oŋ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v162, "OG4", "oŋ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v163, "OG5", "oŋ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v164, "OU1", "o͡ʊ˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v165, "OU2", "o͡ʊ˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[12],0>(v166, "OU3", "o͡ʊ˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(v167, "OU4", "o͡ʊ˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v168, "OU5", "o͡ʊ˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[4],0>(v169, "P", "pʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v170, "PI", "pʰj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[9],0>(v171, "QI", "t͡ɕʰj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[9],0>(v172, "QU", "t͡ɕʰy");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v173, "R", "ʐ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v174, "RU", "ʐ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v175, "S", "s");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v176, "SH", "ʂ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v177, "SHU", "ʂ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v178, "SU", "sw");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[4],0>(v179, "T", "tʰ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v180, "TI", "tʰj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v181, "TU", "tʰw");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v182, "U1", "u˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v183, "U2", "u˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v184, "U3", "u˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v185, "U4", "u˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v186, "U5", "u˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v187, "UN1", "wn˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v188, "UN2", "wn˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(v189, "UN3", "wn˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v190, "UN4", "wn˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v191, "UN5", "wn˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v192, "W", "w");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v193, "XI", "ɕj");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v194, "XU", "ɕy");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v195, "Y", "j");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v196, "YU", "jy");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v197, "YU1", "˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v198, "YU2", "˧˥");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v199, "YU3", "˨˩˦");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v200, "YU4", "˥˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v201, "YU5", "˩");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[5],0>(v202, "Z", "t͡s");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v203, "ZH", "t͡ʂ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v204, "ZHU", "t͡ʂ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v205, "ZU", "t͡sw");
      std::unordered_map<std::string,std::string>::unordered_map(v5, v49, 157);
      for (k = 0; k != -942; k -= 6)
        std::pair<std::string,std::string>::~pair((uint64_t)&v205[k]);
    }
    else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "de_DE"))
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v49, "@@", "ə");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v50, "AEH", "ˈɛ:");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v51, "AH", "ˈaː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v52, "ATT", "ˈa");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v53, "EH", "ˈeː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v54, "ETT", "ˈɛ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(v55, "EU", "ˈɔ͡y");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v56, "IH", "ˈiː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v57, "ITT", "ˈɪ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v58, "OE", "ˈœ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v59, "OEH", "ˈø");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v60, "OH", "ˈoː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v61, "OTT", "ˈɔ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v62, "UE", "ˈʏ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v63, "UEH", "ˈyː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v64, "UH", "ˈuː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v65, "UTT", "ˈʊ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v66, "ach", "x");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v67, "att", "a");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v68, "b", "b");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v69, "d", "d");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v70, "ett", "ɛ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v71, "eu", "ɔ͡y");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v72, "f", "f");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v73, "g", "g");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v74, "h", "h");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v75, "hr", "ʀ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v76, "ich", "ç");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v77, "itt", "ɪ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v78, "j", "j");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v79, "k", "k");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v80, "l", "l");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v81, "m", "m");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v82, "n", "n");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v83, "ng", "ŋ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v84, "oe", "ø");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v85, "ott", "oː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v86, "p", "p");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v87, "r", "ʀ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v88, "s", "s");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v89, "sch", "ʃ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v90, "t", "t");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v91, "ue", "yː");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v92, "utt", "ʊ");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v93, "w", "v");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(v94, "wu", "a͡u");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v95, "z", "z");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v96, "zh", "ʒ");
      std::unordered_map<std::string,std::string>::unordered_map(v5, v49, 48);
      for (m = 2256; m != -48; m -= 48)
        std::pair<std::string,std::string>::~pair((uint64_t)&v49[m]);
    }
    else
    {
      result = 0.0;
      *(_OWORD *)v5 = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      *(_DWORD *)(v5 + 32) = 1065353216;
    }
    return result;
  }
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v49, "AA", "ˈa");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v50, "AU", "ˈa w");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v51, "AY", "ˈa j");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v52, "EE", "ˈe");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v53, "EY", "ˈe j");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v54, "II", "ˈi");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v55, "OO", "ˈo");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v56, "OY", "ˈo j");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(v57, "UU", "ˈu");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v58, "UY", "w ˈi");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v59, "Z", "s");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v60, "aa", "a");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v61, "b", "β");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v62, "ch", "t͡ʃ");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v63, "d", "ð");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v64, "ee", "e");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v65, "f", "f");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v66, "g", "ɣ");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v67, "ii", "i");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v68, "j", "x");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v69, "k", "k");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v70, "ks", "ks");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v71, "l", "l");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v72, "m", "m");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v73, "n", "n");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v74, "nn", "ɲ");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v75, "oo", "o");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v76, "p", "p");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(v77, "r", "ɾ");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v78, "rr", "r");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v79, "s", "s");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v80, "t", "t");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v81, "uu", "u");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v82, "w", "w");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[6],0>(v83, "y", "d͡ʒ");
  std::unordered_map<std::string,std::string>::unordered_map(v5, v49, 35);
  v46 = 1680;
  do
  {
    v47 = &v49[v46];
    if ((char)v49[v46 - 1] < 0)
      operator delete(*((void **)v47 - 3));
    if ((char)*(v47 - 25) < 0)
      operator delete(*((void **)v47 - 6));
    v46 -= 48;
  }
  while (v46);
  return result;
}

void sub_1AD9778B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 2256; i != -48; i -= 48)
    std::pair<std::string,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

uint64_t quasar::PhonesetMapping::getNvASRPhoneSequence@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v21[17];
  _QWORD v22[5];

  quasar::PhonesetMapPerLanguage::getXSampaToNvASRMap(v22);
  quasar::PhonesetMapping::getMappedPhonemes(a1, v22, a2, (std::string *)a3);
  if (quasar::gLogLevel >= 5)
  {
    memset(v21, 0, sizeof(v21));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Language = ", 11);
    v7 = *(char *)(a1 + 23);
    if (v7 >= 0)
      v8 = a1;
    else
      v8 = *(_QWORD *)a1;
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(a1 + 23);
    else
      v9 = *(_QWORD *)(a1 + 8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", NvASR prons=", 14);
    v12 = *(char *)(a3 + 23);
    if (v12 >= 0)
      v13 = a3;
    else
      v13 = *(_QWORD *)a3;
    if (v12 >= 0)
      v14 = *(unsigned __int8 *)(a3 + 23);
    else
      v14 = *(_QWORD *)(a3 + 8);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", XSAMPA prons=", 15);
    v17 = *(char *)(a2 + 23);
    if (v17 >= 0)
      v18 = a2;
    else
      v18 = *(_QWORD *)a2;
    if (v17 >= 0)
      v19 = *(unsigned __int8 *)(a2 + 23);
    else
      v19 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v21);
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v22);
}

void sub_1AD977DA8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v2 - 72);
  _Unwind_Resume(a1);
}

#error "1AD977DE4: too big function (funcsize=0)"

void sub_1AD9A4080(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 2304; i != -48; i -= 48)
    std::pair<std::string,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

uint64_t quasar::PhonesetMapping::getSupportedXsampaProns@<X0>(std::vector<std::string> *a1@<X8>)
{
  uint64_t *v3;
  _QWORD v5[2];
  uint64_t *v6;
  std::string v7;
  std::vector<std::string> *i;

  a1->__begin_ = 0;
  a1->__end_ = 0;
  a1->__end_cap_.__value_ = 0;
  quasar::PhonesetMapPerLanguage::getXSampaToNvASRMap(v5);
  v3 = v6;
  for (i = a1; v3; v3 = (uint64_t *)*v3)
  {
    if (*((char *)v3 + 39) < 0)
      std::string::__init_copy_ctor_external(&v7, (const std::string::value_type *)v3[2], v3[3]);
    else
      v7 = *(std::string *)(v3 + 2);
    std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](&i, (__int128 *)&v7);
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v7.__r_.__value_.__l.__data_);
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v5);
}

void sub_1AD9A48D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v21 - 24) = v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 24));
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[5],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A4944(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A4994(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[8],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A49E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[4],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A4A34(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A4A84(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[9],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A4AD4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A4B24(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A4B74(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A4BC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A4C14(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[6],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A4C64(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[3],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A4CB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A4D04(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[9],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A4D54(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[11],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A4DA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A4DF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[10],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A4E44(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[12],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A4E94(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[7],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A4EE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[7],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A4F34(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A4F84(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[1],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A4FD4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[4],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A5024(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A5074(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[5],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A50C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[12],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A5114(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A5164(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[7],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A51B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[9],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A5204(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[8],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A5254(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[10],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A52A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[1],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A52F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A5344(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A5394(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[4],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A53E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A5434(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[4],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A5484(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[4],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A54D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[4],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A5524(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[4],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A5574(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[4],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A55C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[2],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A5614(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A5664(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[2],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A56B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[1],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A5704(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[1],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A5754(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A57A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A57F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A5844(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[3],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A5894(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A58E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[9],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A5934(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[9],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A5984(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[8],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A59D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[10],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A5A24(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A5A74(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A5AC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[7],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A5B14(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[9],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A5B64(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[8],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A5BB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A5C04(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A5C54(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[7],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A5CA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[6],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A5CF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[9],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A5D44(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[10],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A5D94(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A5DE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A5E34(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A5E84(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[10],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A5ED4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A5F24(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[8],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A5F74(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[6],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A5FC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[9],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A6014(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[7],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A6064(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A60B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[6],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A6104(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A6154(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A61A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A61F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A6244(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[3],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A6294(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A62E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[6],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A6334(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A6384(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A63D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A6424(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A6474(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[3],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A64C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[6],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A6514(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A6564(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A65B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A6604(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[8],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A6654(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A66A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A66F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A6744(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1AD9A6794(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void Vocab::~Vocab(Vocab *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E5D173F0;
  LHash<unsigned int,float>::clear((_QWORD *)this + 7, 0);
  LHash<unsigned int,float>::clear((_QWORD *)this + 6, 0);
  v2 = *((_QWORD *)this + 3);
  if (v2)
    MEMORY[0x1AF44D160](v2, 0x50C80EE9192B6);
  LHash<char const*,unsigned int>::clear((_QWORD *)this + 1, 0);
}

{
  Vocab::~Vocab(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t Vocab::numWords(Vocab *this)
{
  _DWORD *v1;

  v1 = (_DWORD *)*((_QWORD *)this + 1);
  if (v1)
    return *v1 >> 5;
  else
    return 0;
}

uint64_t Vocab::unkIndex(Vocab *this)
{
  return *((unsigned int *)this + 16);
}

{
  return (uint64_t)this + 64;
}

uint64_t Vocab::ssIndex(Vocab *this)
{
  return *((unsigned int *)this + 17);
}

{
  return (uint64_t)this + 68;
}

uint64_t Vocab::seIndex(Vocab *this)
{
  return *((unsigned int *)this + 18);
}

{
  return (uint64_t)this + 72;
}

uint64_t Vocab::pauseIndex(Vocab *this)
{
  return *((unsigned int *)this + 19);
}

{
  return (uint64_t)this + 76;
}

uint64_t Vocab::isNonEvent(Vocab *this, const char *a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(Vocab *, const char *, uint64_t))(*(_QWORD *)this + 40))(this, a2, 0xFFFFFFFFLL);
  return (*(uint64_t (**)(Vocab *, uint64_t))(*(_QWORD *)this + 176))(this, v3);
}

uint64_t Vocab::addNonEvent(Vocab *this, const char *a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(Vocab *, const char *))(*(_QWORD *)this + 16))(this, a2);
  return (*(uint64_t (**)(Vocab *, uint64_t))(*(_QWORD *)this + 184))(this, v3);
}

BOOL Vocab::isMetaTag(Vocab *this, unsigned int a2)
{
  int v3;

  v3 = 0;
  return LHash<unsigned int,float>::locate((_DWORD **)this + 7, a2, &v3) != 0;
}

uint64_t Vocab::typeOfMetaTag(Vocab *this, unsigned int a2)
{
  _QWORD *v2;
  unsigned int v4;

  v2 = (_QWORD *)((char *)this + 56);
  v4 = 0;
  if (LHash<unsigned int,float>::locate((_DWORD **)this + 7, a2, &v4))
    return *(unsigned int *)(*v2 + 8 * v4 + 4);
  else
    return 0xFFFFFFFFLL;
}

_QWORD *Vocab::use(Vocab *this)
{
  _QWORD **v2;
  _QWORD *result;

  v2 = (_QWORD **)_ZTWN5Vocab14outputVocabTLSE();
  result = *v2;
  if (!*v2)
  {
    result = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
    *v2 = result;
  }
  *result = this;
  return result;
}

uint64_t quasar::corrective_reranking::VoiceEditingWFST::Edge::Edge(uint64_t a1, int a2, std::string *this, const std::string *a4, double a5)
{
  std::string *v10;
  std::string *v11;
  void *__p[2];
  char v14;
  const std::string *v15[3];
  std::string __str;

  *(_OWORD *)(a1 + 8) = 0u;
  v10 = (std::string *)(a1 + 8);
  v11 = (std::string *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__str, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
  else
    __str = *this;
  if (std::string::find(this, 35, 0) != -1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "#");
    quasar::splitStringSimple((uint64_t)this, (uint64_t *)__p, (uint64_t *)v15);
    if (v14 < 0)
      operator delete(__p[0]);
    if (v15[1] == v15[0])
      std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
    std::string::operator=(&__str, v15[0]);
    __p[0] = v15;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  *(_DWORD *)a1 = a2;
  std::string::operator=(v10, &__str);
  std::string::operator=(v11, a4);
  *(double *)(a1 + 56) = a5;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1AD9A6ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  void **v24;
  void **v25;

  if (*(char *)(v23 + 55) < 0)
    operator delete(*v25);
  if (*(char *)(v23 + 31) < 0)
    operator delete(*v24);
  _Unwind_Resume(exception_object);
}

BOOL quasar::corrective_reranking::VoiceEditingWFST::Edge::accepts(uint64_t a1, unsigned __int8 *a2)
{
  const void **v4;
  size_t v5;
  size_t v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  BOOL v19;
  _BOOL8 result;
  size_t v21;
  size_t v22;
  const void *v23;

  v4 = (const void **)(a1 + 8);
  v5 = strlen(quasar::corrective_reranking::VoiceEditingWFST::star[0]);
  v6 = v5;
  v7 = *(unsigned __int8 *)(a1 + 31);
  if (*(char *)(a1 + 31) < 0)
  {
    if (v5 != *(_QWORD *)(a1 + 16))
      goto LABEL_9;
    if (v5 == -1)
      goto LABEL_39;
    v8 = *v4;
  }
  else
  {
    if (v5 != v7)
      goto LABEL_9;
    v8 = v4;
    if (v6 == -1)
LABEL_39:
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (!memcmp(v8, quasar::corrective_reranking::VoiceEditingWFST::star[0], v6))
  {
    v21 = strlen(quasar::corrective_reranking::VoiceEditingWFST::eps[0]);
    v22 = v21;
    if ((char)a2[23] < 0)
    {
      if (v21 != *((_QWORD *)a2 + 1))
        return 1;
      if (v21 == -1)
        goto LABEL_40;
      v23 = *(const void **)a2;
    }
    else
    {
      if (v21 != a2[23])
        return 1;
      v23 = a2;
      if (v22 == -1)
LABEL_40:
        std::string::__throw_out_of_range[abi:ne180100]();
    }
    if (!memcmp(v23, quasar::corrective_reranking::VoiceEditingWFST::eps[0], v22))
      goto LABEL_9;
    return 1;
  }
LABEL_9:
  if ((v7 & 0x80u) == 0)
    v9 = v7;
  else
    v9 = *(_QWORD *)(a1 + 16);
  v10 = a2[23];
  v11 = (char)v10;
  if ((v10 & 0x80u) != 0)
    v10 = *((_QWORD *)a2 + 1);
  if (v9 != v10)
    return 0;
  if (v11 >= 0)
    v12 = a2;
  else
    v12 = *(unsigned __int8 **)a2;
  if ((v7 & 0x80) != 0)
    return memcmp(*v4, v12, *(_QWORD *)(a1 + 16)) == 0;
  if (!(_DWORD)v7)
    return 1;
  v13 = v7 - 1;
  do
  {
    v15 = *(unsigned __int8 *)v4;
    v4 = (const void **)((char *)v4 + 1);
    v14 = v15;
    v17 = *v12++;
    v16 = v17;
    v19 = v13-- != 0;
    result = v14 == v16;
  }
  while (v14 == v16 && v19);
  return result;
}

uint64_t quasar::corrective_reranking::VoiceEditingWFST::Path::Path(uint64_t a1, int a2, uint64_t a3)
{
  void **v5;
  unint64_t v6;
  char *v7;
  char **v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  v5 = (void **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  if (a1 + 16 == a3)
  {
    v7 = 0;
    v6 = 0;
    v8 = (char **)(a1 + 48);
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 16), *(std::string **)a3, *(__int128 **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
    v7 = *(char **)(a1 + 48);
    v6 = *(_QWORD *)(a1 + 56);
    v8 = (char **)(a1 + 48);
    if ((unint64_t)v7 < v6)
    {
      *(_DWORD *)v7 = a2;
      v9 = v7 + 4;
      goto LABEL_19;
    }
  }
  v10 = *(char **)(a1 + 40);
  v11 = (v7 - v10) >> 2;
  v12 = v11 + 1;
  if ((unint64_t)(v11 + 1) >> 62)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v13 = v6 - (_QWORD)v10;
  if (v13 >> 1 > v12)
    v12 = v13 >> 1;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
    v14 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v14 = v12;
  if (v14)
  {
    v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 56, v14);
    v7 = *v8;
    v10 = (char *)*v5;
  }
  else
  {
    v15 = 0;
  }
  v16 = &v15[4 * v11];
  v17 = &v15[4 * v14];
  *(_DWORD *)v16 = a2;
  v9 = v16 + 4;
  while (v7 != v10)
  {
    v18 = *((_DWORD *)v7 - 1);
    v7 -= 4;
    *((_DWORD *)v16 - 1) = v18;
    v16 -= 4;
  }
  *v5 = v16;
  *v8 = v9;
  *(_QWORD *)(a1 + 56) = v17;
  if (v10)
    operator delete(v10);
LABEL_19:
  *(_QWORD *)(a1 + 48) = v9;
  return a1;
}

void sub_1AD9A6E50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 48) = v5;
    operator delete(v5);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::VoiceEditingWFST::Path::advance(uint64_t a1, uint64_t a2)
{
  size_t v4;
  void *v5;
  int v6;
  __int128 v7;
  _OWORD *v8;
  size_t v9;
  void *v10;
  int v11;
  int v12;
  std::string __s1;
  std::string *p_s1;

  *(double *)(a1 + 8) = *(double *)(a2 + 56) + *(double *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&__s1, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  else
    __s1 = *(std::string *)(a2 + 8);
  v4 = strlen(quasar::corrective_reranking::VoiceEditingWFST::eps[0]);
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v4 == __s1.__r_.__value_.__l.__size_)
    {
      if (v4 != -1)
      {
        v5 = (void *)__s1.__r_.__value_.__r.__words[0];
        v6 = memcmp(__s1.__r_.__value_.__l.__data_, quasar::corrective_reranking::VoiceEditingWFST::eps[0], v4);
        operator delete(v5);
        if (!v6)
          goto LABEL_16;
        goto LABEL_14;
      }
      goto LABEL_35;
    }
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
  else if (v4 == HIBYTE(__s1.__r_.__value_.__r.__words[2]))
  {
    if (v4 != -1)
    {
      if (!memcmp(&__s1, quasar::corrective_reranking::VoiceEditingWFST::eps[0], v4))
        goto LABEL_16;
      goto LABEL_14;
    }
LABEL_35:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
LABEL_14:
  memset(&__s1, 0, sizeof(__s1));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__s1, *(__int128 **)(a1 + 16), *(__int128 **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3));
  v7 = *(_OWORD *)&__s1.__r_.__value_.__l.__data_;
  p_s1 = &__s1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_s1);
  if (*((_QWORD *)&v7 + 1) != (_QWORD)v7)
    quasar::corrective_reranking::VoiceEditingWFST::Path::removeTopInToken((quasar::corrective_reranking::VoiceEditingWFST::Path *)a1);
LABEL_16:
  v8 = (_OWORD *)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(&__s1, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = *v8;
    __s1.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 48);
  }
  v9 = strlen(quasar::corrective_reranking::VoiceEditingWFST::eps[0]);
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v9 == __s1.__r_.__value_.__l.__size_)
    {
      if (v9 == -1)
        goto LABEL_36;
      v10 = (void *)__s1.__r_.__value_.__r.__words[0];
      v11 = memcmp(__s1.__r_.__value_.__l.__data_, quasar::corrective_reranking::VoiceEditingWFST::eps[0], v9);
      operator delete(v10);
      if (!v11)
        goto LABEL_34;
    }
    else
    {
      operator delete(__s1.__r_.__value_.__l.__data_);
    }
  }
  else if (v9 == HIBYTE(__s1.__r_.__value_.__r.__words[2]))
  {
    if (v9 != -1)
    {
      if (!memcmp(&__s1, quasar::corrective_reranking::VoiceEditingWFST::eps[0], v9))
        goto LABEL_34;
      goto LABEL_29;
    }
LABEL_36:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
LABEL_29:
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(&__s1, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = *v8;
    __s1.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 48);
  }
  quasar::corrective_reranking::VoiceEditingWFST::Path::appendOutput((uint64_t *)a1, (__int128 *)&__s1);
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s1.__r_.__value_.__l.__data_);
LABEL_34:
  v12 = *(_DWORD *)a2;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  quasar::corrective_reranking::VoiceEditingWFST::Path::appendCurrentNode((quasar::corrective_reranking::VoiceEditingWFST::Path *)a1, v12);
}

void sub_1AD9A70EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::VoiceEditingWFST::Path::removeTopInToken(quasar::corrective_reranking::VoiceEditingWFST::Path *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v5, (__int128 *)(*((_QWORD *)this + 2) + 24), *((__int128 **)this + 3), *((_QWORD *)this + 2));
  v3 = v2;
  v4 = *((_QWORD *)this + 3);
  if (v4 != v2)
  {
    do
    {
      if (*(char *)(v4 - 1) < 0)
        operator delete(*(void **)(v4 - 24));
      v4 -= 24;
    }
    while (v4 != v3);
  }
  *((_QWORD *)this + 3) = v3;
}

uint64_t quasar::corrective_reranking::VoiceEditingWFST::Path::appendOutput(uint64_t *a1, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;

  v3 = a1 + 8;
  v4 = a1[9];
  if (v4 >= a1[10])
  {
    result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v3, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v3, a2);
    result = v4 + 24;
  }
  a1[9] = result;
  return result;
}

void quasar::corrective_reranking::VoiceEditingWFST::Path::appendCurrentNode(quasar::corrective_reranking::VoiceEditingWFST::Path *this, int a2)
{
  char *v4;
  unint64_t v5;
  char *v6;
  _DWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;

  v4 = (char *)this + 56;
  v5 = *((_QWORD *)this + 7);
  v6 = (char *)*((_QWORD *)this + 6);
  if ((unint64_t)v6 >= v5)
  {
    v8 = (char *)*((_QWORD *)this + 5);
    v9 = (v6 - v8) >> 2;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v5 - (_QWORD)v8;
    v11 = (uint64_t)(v5 - (_QWORD)v8) >> 1;
    if (v11 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v4, v12);
      v8 = (char *)*((_QWORD *)this + 5);
      v6 = (char *)*((_QWORD *)this + 6);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = a2;
    v7 = v14 + 4;
    while (v6 != v8)
    {
      v16 = *((_DWORD *)v6 - 1);
      v6 -= 4;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *((_QWORD *)this + 5) = v14;
    *((_QWORD *)this + 6) = v7;
    *((_QWORD *)this + 7) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_DWORD *)v6 = a2;
    v7 = v6 + 4;
  }
  *((_QWORD *)this + 6) = v7;
}

double quasar::corrective_reranking::VoiceEditingWFST::Path::getWeight(quasar::corrective_reranking::VoiceEditingWFST::Path *this)
{
  return *((double *)this + 1);
}

std::string *quasar::corrective_reranking::VoiceEditingWFST::Path::getOutputs@<X0>(__int128 **this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, this[8], this[9], 0xAAAAAAAAAAAAAAABLL * (((char *)this[9] - (char *)this[8]) >> 3));
}

uint64_t quasar::corrective_reranking::VoiceEditingWFST::VoiceEditingWFST(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t **v6;
  uint64_t v7;
  std::locale::id *v8;
  const std::locale::facet *v9;
  unsigned __int8 v10;
  _QWORD *v11;
  std::locale::__imp *locale;
  std::locale::id *v13;
  const std::locale::facet *v14;
  unsigned __int8 v15;
  _QWORD *v16;
  int v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  const std::string *v22;
  double v23;
  uint64_t v24;
  double v25;
  float *v26;
  float v27;
  std::locale::__imp *v28;
  std::locale::__imp *v29;
  _QWORD *v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  int v45;
  const std::string *v46[3];
  void *v47;
  uint64_t v48;
  uint64_t v49;
  void *__p[2];
  __int128 v51;
  void *v52[2];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  void *v67[2];
  uint64_t v68;
  void **v69;
  std::locale v70[2];
  __int128 v71;
  _BYTE v72[392];
  uint64_t v73;
  _QWORD v74[2];
  _BYTE v75[408];
  _QWORD v76[22];

  v76[19] = *MEMORY[0x1E0C80C00];
  *(_BYTE *)a1 = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  v6 = (uint64_t **)(a1 + 8);
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  v43 = a1 + 32;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(_OWORD *)(a1 + 72) = 0u;
  v44 = a1 + 72;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 1065353216;
  std::ifstream::basic_ifstream(v74);
  v7 = v74[0];
  if ((v75[*(_QWORD *)(v74[0] - 24) + 16] & 5) != 0)
  {
    v71 = 0u;
    memset(v72, 0, 240);
    *(_OWORD *)&v70[0].__locale_ = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v70);
    v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"Could not open isyms file ", 26);
    v35 = *(char *)(a3 + 23);
    if (v35 >= 0)
      v36 = a3;
    else
      v36 = *(_QWORD *)a3;
    if (v35 >= 0)
      v37 = *(unsigned __int8 *)(a3 + 23);
    else
      v37 = *(_QWORD *)(a3 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, v36, v37);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v70);
  }
  v67[0] = 0;
  v67[1] = 0;
  v68 = 0;
  v8 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v74 + *(_QWORD *)(v7 - 24)));
    v9 = std::locale::use_facet(v70, v8);
    v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
    std::locale::~locale(v70);
    v11 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v74, (uint64_t)v67, v10);
    if ((*((_BYTE *)v11 + *(_QWORD *)(*v11 - 24) + 32) & 5) != 0)
      break;
    std::string::basic_string[abi:ne180100]<0>(__p, " \t");
    quasar::splitStringSimple((uint64_t)v67, (uint64_t *)__p, (uint64_t *)v70);
    if (v70[1].__locale_ == v70[0].__locale_)
      std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v6, (const void **)v70[0].__locale_, (uint64_t)v70[0].__locale_);
    v47 = v70;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
    if (SBYTE7(v51) < 0)
      operator delete(__p[0]);
    v7 = v74[0];
  }
  if (!*(_QWORD *)(a1 + 24))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v70);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"_vocab.size() > 0", 17);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v70);
  }
  std::ifstream::basic_ifstream(v70);
  locale = v70[0].__locale_;
  if ((v72[*((_QWORD *)v70[0].__locale_ - 3)] & 5) != 0)
  {
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    *(_OWORD *)v52 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not open fst text file ", 29);
    v39 = *(char *)(a2 + 23);
    if (v39 >= 0)
      v40 = a2;
    else
      v40 = *(_QWORD *)a2;
    if (v39 >= 0)
      v41 = *(unsigned __int8 *)(a2 + 23);
    else
      v41 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, v40, v41);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v13 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v70 + *((_QWORD *)locale - 3)));
    v14 = std::locale::use_facet((const std::locale *)__p, v13);
    v15 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
    std::locale::~locale((std::locale *)__p);
    v16 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v70, (uint64_t)&v47, v15);
    if ((*((_BYTE *)v16 + *(_QWORD *)(*v16 - 24) + 32) & 5) != 0)
      break;
    std::string::basic_string[abi:ne180100]<0>(__p, " \t");
    quasar::splitStringSimple((uint64_t)&v47, (uint64_t *)__p, (uint64_t *)v46);
    if (SBYTE7(v51) < 0)
      operator delete(__p[0]);
    switch(-1 - 0x5555555555555555 * (((char *)v46[1] - (char *)v46[0]) >> 3))
    {
      case 0:
        LODWORD(__p[0]) = 0;
        LODWORD(__p[0]) = std::stoi(v46[0], 0, 10);
        v69 = __p;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v44, (int *)__p, (uint64_t)&std::piecewise_construct, (_DWORD **)&v69)+ 5) = 0;
        goto LABEL_26;
      case 1:
        LODWORD(__p[0]) = 0;
        LODWORD(__p[0]) = std::stoi(v46[0], 0, 10);
        v25 = std::stod(v46[0] + 1, 0);
        v69 = __p;
        v26 = (float *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v44, (int *)__p, (uint64_t)&std::piecewise_construct, (_DWORD **)&v69);
        v27 = v25;
        v26[5] = v27;
        goto LABEL_26;
      case 3:
        v45 = 0;
        v45 = std::stoi(v46[0], 0, 10);
        v17 = std::stoi(v46[0] + 1, 0, 10);
        quasar::corrective_reranking::VoiceEditingWFST::Edge::Edge((uint64_t)__p, v17, (std::string *)&v46[0][2], v46[0] + 3, 0.0);
        v69 = (void **)&v45;
        v18 = std::__hash_table<std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v43, &v45, (uint64_t)&std::piecewise_construct, (_DWORD **)&v69);
        v19 = v18[4];
        v20 = (uint64_t)(v18 + 5);
        if (v19 < v18[5])
          goto LABEL_19;
        goto LABEL_21;
      case 4:
        v45 = 0;
        v45 = std::stoi(v46[0], 0, 10);
        v21 = std::stoi(v46[0] + 1, 0, 10);
        v22 = v46[0];
        v23 = std::stod(v46[0] + 4, 0);
        quasar::corrective_reranking::VoiceEditingWFST::Edge::Edge((uint64_t)__p, v21, (std::string *)&v22[2], v22 + 3, v23);
        v69 = (void **)&v45;
        v18 = std::__hash_table<std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v43, &v45, (uint64_t)&std::piecewise_construct, (_DWORD **)&v69);
        v19 = v18[4];
        v20 = (uint64_t)(v18 + 5);
        if (v19 >= v18[5])
        {
LABEL_21:
          v24 = std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>::__push_back_slow_path<quasar::corrective_reranking::VoiceEditingWFST::Edge const&>(v18 + 3, (uint64_t)__p);
        }
        else
        {
LABEL_19:
          std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>::construct[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Edge,quasar::corrective_reranking::VoiceEditingWFST::Edge const&>(v20, v19, (uint64_t)__p);
          v24 = v19 + 64;
          v18[4] = v19 + 64;
        }
        v18[4] = v24;
        if (SBYTE7(v53) < 0)
          operator delete(v52[0]);
        if (SHIBYTE(v51) < 0)
          operator delete(__p[1]);
LABEL_26:
        __p[0] = v46;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        locale = v70[0].__locale_;
        break;
      default:
        v65 = 0u;
        v66 = 0u;
        v63 = 0u;
        v64 = 0u;
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        *(_OWORD *)v52 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"VoiceEditingWFST corrupted for line ", 36);
        if (v49 >= 0)
          v32 = &v47;
        else
          v32 = v47;
        if (v49 >= 0)
          v33 = HIBYTE(v49);
        else
          v33 = v48;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
  }
  if (!*(_QWORD *)(a1 + 56))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"!edgeLists.empty()", 18);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  if (SHIBYTE(v49) < 0)
    operator delete(v47);
  v70[0] = *(std::locale *)MEMORY[0x1E0DE4F40];
  v28 = v70[0].__locale_;
  v29 = *(std::locale::__imp **)(MEMORY[0x1E0DE4F40] + 24);
  *(std::locale::__imp **)((char *)&v70[0].__locale_ + *((_QWORD *)v70[0].__locale_ - 3)) = v29;
  MEMORY[0x1AF44CA70](&v71);
  std::istream::~istream();
  MEMORY[0x1AF44D094](&v73);
  if (SHIBYTE(v68) < 0)
    operator delete(v67[0]);
  v74[0] = v28;
  *(_QWORD *)((char *)v74 + *((_QWORD *)v28 - 3)) = v29;
  MEMORY[0x1AF44CA70](v75);
  std::istream::~istream();
  MEMORY[0x1AF44D094](v76);
  return a1;
}

void sub_1AD9A7B4C(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1AD9A7BB8);
}

void quasar::corrective_reranking::VoiceEditingWFST::search(std::string *a1@<X0>, std::allocator<std::string> *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  std::string::pointer data;
  uint64_t *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  std::vector<std::string>::pointer v19;
  __int128 v20;
  std::vector<std::string>::pointer end;
  __int128 v22;
  std::string *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  std::string *v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  std::string::size_type v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  std::string *v42;
  std::string::size_type v43;
  __int128 v44;
  _BOOL4 v45;
  _BOOL4 v46;
  __int128 v47;
  char v48;
  void *v49;
  std::string *v50;
  std::string *v51;
  std::string::pointer v52;
  std::string::pointer v53;
  int v54;
  std::string *v55;
  int64_t size;
  int64_t v57;
  char *v58;
  char *v59;
  int v60;
  std::string *v61;
  int64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  _OWORD *v68;
  _OWORD *v69;
  uint64_t v70;
  std::__split_buffer<std::string>::pointer first;
  std::__split_buffer<std::string>::pointer begin;
  uint64_t v73;
  std::__split_buffer<std::string>::pointer v74;
  char *v75;
  std::__split_buffer<std::string>::pointer v76;
  char *v77;
  _OWORD *v79;
  _OWORD *v80;
  __int128 *v81;
  __int128 *v82;
  std::__split_buffer<std::string>::pointer v83;
  std::__split_buffer<std::string>::pointer v84;
  uint64_t v85;
  std::__split_buffer<std::string>::pointer v86;
  char *v87;
  std::__split_buffer<std::string>::pointer v88;
  char *v89;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  std::allocator<std::string> *v100;
  std::string *v102;
  std::string::size_type v103;
  uint64_t v104;
  _OWORD *v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  std::__split_buffer<std::string> __v;
  void *v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  std::string __p;
  std::string v117;
  std::vector<std::string> v118;
  char v119;
  std::__split_buffer<std::string>::pointer *p_begin;
  std::string *v121;
  unint64_t v122;
  uint64_t v123;
  std::string *p_p;

  v119 = a4;
  if (a4 && *(_QWORD *)a2 == *((_QWORD *)a2 + 1))
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    return;
  }
  if ((a3 & 0xFF00000000) == 0)
  {
    data = a1[2].__r_.__value_.__l.__data_;
    v9 = *(uint64_t **)data;
    if (a1->__r_.__value_.__s.__data_[0])
    {
      for (; v9; v9 = (uint64_t *)*v9)
      {
        LODWORD(__v.__first_) = *((_DWORD *)data + 4);
        memset(&__v.__begin_, 0, 24);
        std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Edge*,quasar::corrective_reranking::VoiceEditingWFST::Edge*>(&__v.__begin_, *((_QWORD *)data + 3), *((_QWORD *)data + 4), (uint64_t)(*((_QWORD *)data + 4) - *((_QWORD *)data + 3)) >> 6);
        LODWORD(p_begin) = *((_DWORD *)v9 + 4);
        v122 = 0;
        v123 = 0;
        v121 = 0;
        std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Edge*,quasar::corrective_reranking::VoiceEditingWFST::Edge*>(&v121, v9[3], v9[4], (v9[4] - v9[3]) >> 6);
        v10 = (int)p_begin;
        v118.__begin_ = (std::vector<std::string>::pointer)&v121;
        std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
        p_begin = &__v.__begin_;
        std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_begin);
        if (SLODWORD(__v.__first_) < v10)
          data = (std::string::pointer)v9;
      }
    }
    else
    {
      for (; v9; v9 = (uint64_t *)*v9)
      {
        LODWORD(__v.__first_) = *((_DWORD *)v9 + 4);
        memset(&__v.__begin_, 0, 24);
        std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Edge*,quasar::corrective_reranking::VoiceEditingWFST::Edge*>(&__v.__begin_, v9[3], v9[4], (v9[4] - v9[3]) >> 6);
        LODWORD(p_begin) = *((_DWORD *)data + 4);
        v122 = 0;
        v123 = 0;
        v121 = 0;
        std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Edge*,quasar::corrective_reranking::VoiceEditingWFST::Edge*>(&v121, *((_QWORD *)data + 3), *((_QWORD *)data + 4), (uint64_t)(*((_QWORD *)data + 4) - *((_QWORD *)data + 3)) >> 6);
        v11 = (int)p_begin;
        v118.__begin_ = (std::vector<std::string>::pointer)&v121;
        std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
        p_begin = &__v.__begin_;
        std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_begin);
        if (SLODWORD(__v.__first_) < v11)
          data = (std::string::pointer)v9;
      }
    }
    LODWORD(a3) = *((_DWORD *)data + 4);
  }
  v107 = a3;
  v99 = a6;
  p_begin = 0;
  v121 = 0;
  v122 = 0;
  memset(&v118, 0, sizeof(v118));
  v12 = *(_QWORD *)a2;
  v13 = *((_QWORD *)a2 + 1);
  v100 = a2;
  if (*(_QWORD *)a2 != v13)
  {
    do
    {
      if (*(char *)(v12 + 23) < 0)
      {
        v15 = *(char **)v12;
        v14 = *(_QWORD *)(v12 + 8);
      }
      else
      {
        v14 = *(unsigned __int8 *)(v12 + 23);
        v15 = (char *)v12;
      }
      quasar::utf8::convertToLowerCaseOrEmpty(v15, v14, &v117);
      v16 = v121;
      if ((unint64_t)v121 >= v122)
      {
        v18 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&p_begin, (__int128 *)&v117);
      }
      else
      {
        if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v121, v117.__r_.__value_.__l.__data_, v117.__r_.__value_.__l.__size_);
        }
        else
        {
          v17 = *(_OWORD *)&v117.__r_.__value_.__l.__data_;
          v121->__r_.__value_.__r.__words[2] = v117.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
        }
        v18 = v16 + 1;
      }
      v121 = v18;
      if (&a1->__r_.__value_.__r.__words[2] == (std::string::size_type *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&a1->__r_.__value_.__l.__size_, (const void **)&v117.__r_.__value_.__l.__data_))
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, quasar::corrective_reranking::VoiceEditingWFST::unk);
        end = v118.__end_;
        if (v118.__end_ >= v118.__end_cap_.__value_)
        {
          v24 = 0xAAAAAAAAAAAAAAABLL * (((char *)v118.__end_ - (char *)v118.__begin_) >> 3);
          v25 = v24 + 1;
          if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * (((char *)v118.__end_cap_.__value_ - (char *)v118.__begin_) >> 3) > v25)
            v25 = 0x5555555555555556 * (((char *)v118.__end_cap_.__value_ - (char *)v118.__begin_) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v118.__end_cap_.__value_ - (char *)v118.__begin_) >> 3) >= 0x555555555555555)
            v26 = 0xAAAAAAAAAAAAAAALL;
          else
            v26 = v25;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v118.__end_cap_;
          if (v26)
            v27 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v118.__end_cap_, v26);
          else
            v27 = 0;
          v28 = v27 + v24;
          __v.__first_ = v27;
          __v.__begin_ = v28;
          __v.__end_cap_.__value_ = &v27[v26];
          v29 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v28->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
          memset(&__p, 0, sizeof(__p));
          __v.__end_ = v28 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v118, &__v);
          v30 = v118.__end_;
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
          v118.__end_ = v30;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        else
        {
          v22 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v118.__end_->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v22;
          v118.__end_ = end + 1;
        }
      }
      else
      {
        v19 = v118.__end_;
        if (v118.__end_ >= v118.__end_cap_.__value_)
        {
          v23 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v118, (__int128 *)&v117);
        }
        else
        {
          if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v118.__end_, v117.__r_.__value_.__l.__data_, v117.__r_.__value_.__l.__size_);
          }
          else
          {
            v20 = *(_OWORD *)&v117.__r_.__value_.__l.__data_;
            v118.__end_->__r_.__value_.__r.__words[2] = v117.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
          }
          v23 = v19 + 1;
        }
        v118.__end_ = v23;
      }
      if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v117.__r_.__value_.__l.__data_);
      v12 += 24;
    }
    while (v12 != v13);
  }
  if (v119)
  {
    v31 = operator new();
    *(_QWORD *)(v31 + 64) = 0;
    *(_OWORD *)(v31 + 32) = 0u;
    *(_OWORD *)(v31 + 48) = 0u;
    *(_OWORD *)v31 = 0u;
    *(_OWORD *)(v31 + 16) = 0u;
    *(_DWORD *)(v31 + 64) = 1065353216;
    *(_QWORD *)v31 = &unk_1E5D475B0;
  }
  else
  {
    v31 = operator new();
    *(_QWORD *)v31 = &unk_1E5D47600;
    *(_QWORD *)(v31 + 56) = 0;
    *(_QWORD *)(v31 + 64) = 0;
    *(_OWORD *)(v31 + 8) = 0u;
    *(_OWORD *)(v31 + 24) = 0u;
    *(_OWORD *)(v31 + 40) = 0u;
    *(_DWORD *)(v31 + 64) = 1065353216;
  }
  if (v119)
  {
    v32 = operator new();
    *(_QWORD *)(v32 + 64) = 0;
    *(_OWORD *)(v32 + 32) = 0u;
    *(_OWORD *)(v32 + 48) = 0u;
    *(_OWORD *)v32 = 0u;
    *(_OWORD *)(v32 + 16) = 0u;
    *(_DWORD *)(v32 + 64) = 1065353216;
    *(_QWORD *)v32 = &unk_1E5D47628;
  }
  else
  {
    v32 = operator new();
    *(_QWORD *)v32 = &unk_1E5D47600;
    *(_QWORD *)(v32 + 56) = 0;
    *(_QWORD *)(v32 + 64) = 0;
    *(_OWORD *)(v32 + 8) = 0u;
    *(_OWORD *)(v32 + 24) = 0u;
    *(_OWORD *)(v32 + 40) = 0u;
    *(_DWORD *)(v32 + 64) = 1065353216;
  }
  v115 = v32;
  quasar::corrective_reranking::VoiceEditingWFST::Path::Path((uint64_t)&__v, v107, (uint64_t)&v118);
  quasar::corrective_reranking::Paths::add((quasar::corrective_reranking::Paths *)v31, (const quasar::corrective_reranking::VoiceEditingWFST::Path *)&__v);
  v117.__r_.__value_.__r.__words[0] = (std::string::size_type)&v114;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
  if (v112)
  {
    v113 = v112;
    operator delete(v112);
  }
  v117.__r_.__value_.__r.__words[0] = (std::string::size_type)&__v.__end_;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
  v33 = (uint64_t *)(v31 + 8);
  if (*(_QWORD *)(v31 + 16) != *(_QWORD *)(v31 + 8))
  {
    v34 = (int)a5;
    while (1)
    {
      if (v119)
      {
        v35 = operator new();
        *(_QWORD *)(v35 + 64) = 0;
        *(_OWORD *)(v35 + 32) = 0u;
        *(_OWORD *)(v35 + 48) = 0u;
        *(_OWORD *)v35 = 0u;
        *(_OWORD *)(v35 + 16) = 0u;
        *(_DWORD *)(v35 + 64) = 1065353216;
        *(_QWORD *)v35 = &unk_1E5D475B0;
      }
      else
      {
        v35 = operator new();
        *(_QWORD *)v35 = &unk_1E5D47600;
        *(_QWORD *)(v35 + 56) = 0;
        *(_QWORD *)(v35 + 64) = 0;
        *(_OWORD *)(v35 + 8) = 0u;
        *(_OWORD *)(v35 + 24) = 0u;
        *(_OWORD *)(v35 + 40) = 0u;
        *(_DWORD *)(v35 + 64) = 1065353216;
      }
      v110 = v35;
      __v.__first_ = a1;
      __v.__begin_ = (std::__split_buffer<std::string>::pointer)&v110;
      __v.__end_ = (std::__split_buffer<std::string>::pointer)&v115;
      __v.__end_cap_.__value_ = (std::string *)&v119;
      __v.__end_cap_.__value_ = v100;
      v36 = *v33;
      v104 = *(_QWORD *)(v31 + 16);
      v108 = v31;
      v37 = a5 & 0xFF00000000;
      if (v36 != v104)
        break;
      v110 = 0;
LABEL_124:
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
      v64 = v110;
      v110 = 0;
      if (v64)
        (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
LABEL_126:
      v33 = (uint64_t *)(v35 + 8);
      v31 = v35;
      if (*(_QWORD *)(v35 + 16) == *(_QWORD *)(v35 + 8))
        goto LABEL_129;
    }
LABEL_65:
    LODWORD(v117.__r_.__value_.__l.__data_) = *(_DWORD *)v36;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
    v38 = std::__hash_table<std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)&a1[1].__r_.__value_.__l.__size_, (int *)&v117, (uint64_t)&std::piecewise_construct, &__p);
    v40 = v38[3];
    v39 = v38[4];
    while (1)
    {
      if (v40 == v39)
      {
        v36 += 88;
        if (v36 == v104)
        {
          v35 = v110;
          v110 = 0;
          if (!v31)
            goto LABEL_126;
          goto LABEL_124;
        }
        goto LABEL_65;
      }
      memset(&v117, 0, sizeof(v117));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v117, *(__int128 **)(v36 + 16), *(__int128 **)(v36 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v36 + 24) - *(_QWORD *)(v36 + 16)) >> 3));
      if (v117.__r_.__value_.__l.__size_ == v117.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      }
      else
      {
        memset(&__p, 0, sizeof(__p));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__p, *(__int128 **)(v36 + 16), *(__int128 **)(v36 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v36 + 24) - *(_QWORD *)(v36 + 16)) >> 3));
        v41 = quasar::corrective_reranking::VoiceEditingWFST::Edge::accepts(v40, (unsigned __int8 *)__p.__r_.__value_.__l.__data_);
        p_p = &__p;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        if (v41)
          goto LABEL_85;
      }
      if (v119)
      {
        if (!v37)
          goto LABEL_80;
        memset(&v117, 0, sizeof(v117));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v117, *(__int128 **)(v36 + 16), *(__int128 **)(v36 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v36 + 24) - *(_QWORD *)(v36 + 16)) >> 3));
        if (v117.__r_.__value_.__l.__size_ - v117.__r_.__value_.__r.__words[0] == 24
          && ((v42 = v121, SHIBYTE(v121[-1].__r_.__value_.__r.__words[2]) < 0)
            ? (v43 = v121[-1].__r_.__value_.__l.__size_)
            : (v43 = HIBYTE(v121[-1].__r_.__value_.__r.__words[2])),
              v43 >= v34))
        {
          if (*(char *)(v40 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v40 + 8), *(_QWORD *)(v40 + 16));
            v42 = v121;
          }
          else
          {
            v47 = *(_OWORD *)(v40 + 8);
            __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v40 + 24);
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v47;
          }
          v48 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          v49 = (void *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v50 = &__p;
          else
            v50 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v53 = v42[-1].__r_.__value_.__l.__data_;
          v51 = v42 - 1;
          v52 = v53;
          v54 = SHIBYTE(v51->__r_.__value_.__r.__words[2]);
          if (v54 >= 0)
            v55 = v51;
          else
            v55 = (std::string *)v52;
          if (v54 >= 0)
            size = HIBYTE(v51->__r_.__value_.__r.__words[2]);
          else
            size = v51->__r_.__value_.__l.__size_;
          if (size)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v57 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              v57 = __p.__r_.__value_.__l.__size_;
            v58 = (char *)v50 + v57;
            if (v57 >= size)
            {
              v102 = v50;
              v103 = __p.__r_.__value_.__r.__words[0];
              v60 = v55->__r_.__value_.__s.__data_[0];
              v61 = v50;
              do
              {
                v62 = v57 - size;
                if (v62 == -1)
                  break;
                v63 = (char *)memchr(v61, v60, v62 + 1);
                if (!v63)
                  break;
                v59 = v63;
                if (!memcmp(v63, v55, size))
                  goto LABEL_111;
                v61 = (std::string *)(v59 + 1);
                v57 = v58 - (v59 + 1);
              }
              while (v57 >= size);
              v59 = v58;
LABEL_111:
              v50 = v102;
              v49 = (void *)v103;
            }
            else
            {
              v59 = (char *)v50 + v57;
            }
            if (v59 == v58)
              size = -1;
            else
              size = v59 - (char *)v50;
            v37 = a5 & 0xFF00000000;
          }
          v34 = (int)a5;
          if (v48 < 0)
            operator delete(v49);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          v31 = v108;
          if (!size)
            goto LABEL_85;
        }
        else
        {
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        }
        if (v119)
        {
LABEL_80:
          memset(&v117, 0, sizeof(v117));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v117, *(__int128 **)(v36 + 16), *(__int128 **)(v36 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v36 + 24) - *(_QWORD *)(v36 + 16)) >> 3));
          v44 = *(_OWORD *)&v117.__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          if ((_QWORD)v44 == *((_QWORD *)&v44 + 1))
            goto LABEL_85;
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&v117, quasar::corrective_reranking::VoiceEditingWFST::eps[0]);
      v45 = quasar::corrective_reranking::VoiceEditingWFST::Edge::accepts(v40, (unsigned __int8 *)&v117);
      v46 = v45;
      if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v117.__r_.__value_.__l.__data_);
        if (!v46)
          goto LABEL_86;
LABEL_85:
        quasar::corrective_reranking::VoiceEditingWFST::search(std::vector<std::string> const&,std::optional<int>,BOOL,std::optional<int>)::$_2::operator()((uint64_t *)&__v, (__int128 *)v36, v40);
        goto LABEL_86;
      }
      if (v45)
        goto LABEL_85;
LABEL_86:
      v40 += 64;
    }
  }
  v35 = v31;
LABEL_129:
  v65 = v35;
  v66 = v115;
  v67 = v99;
  v99[1] = 0;
  v99[2] = 0;
  *v99 = 0;
  std::vector<quasar::corrective_reranking::VoiceEditingWFST::Path>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path*,quasar::corrective_reranking::VoiceEditingWFST::Path*>(v99, *(_QWORD *)(v66 + 8), *(_QWORD *)(v66 + 16), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(v66 + 16) - *(_QWORD *)(v66 + 8)) >> 3));
  if (v119)
  {
    v109 = v35;
    v69 = (_OWORD *)*v99;
    v68 = (_OWORD *)v99[1];
    if ((_OWORD *)*v99 == v68)
      goto LABEL_174;
    v70 = v99[1];
    while (1)
    {
      memset(&__v, 0, 24);
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__v, *((__int128 **)v69 + 8), *((__int128 **)v69 + 9), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v69 + 9) - *((_QWORD *)v69 + 8)) >> 3));
      first = __v.__first_;
      begin = __v.__begin_;
LABEL_133:
      if (first == begin)
        break;
      if (SHIBYTE(first->__r_.__value_.__r.__words[2]) < 0)
      {
        v74 = (std::__split_buffer<std::string>::pointer)first->__r_.__value_.__r.__words[0];
        v73 = first->__r_.__value_.__l.__size_;
      }
      else
      {
        v73 = HIBYTE(first->__r_.__value_.__r.__words[2]);
        v74 = first;
      }
      if (v73 >= 6)
      {
        v75 = (char *)v74 + v73;
        v76 = v74;
        do
        {
          v77 = (char *)memchr(v76, 84, v73 - 5);
          if (!v77)
            break;
          if (*(_DWORD *)v77 == 1196573012 && *((_WORD *)v77 + 2) == 21573)
          {
            if (v77 != v75 && v77 - (char *)v74 != -1)
            {
              ++first;
              goto LABEL_133;
            }
            break;
          }
          v76 = (std::__split_buffer<std::string>::pointer)(v77 + 1);
          v73 = v75 - (char *)v76;
        }
        while (v75 - (char *)v76 >= 6);
      }
      v117.__r_.__value_.__r.__words[0] = (std::string::size_type)&__v;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
      v69 = (_OWORD *)((char *)v69 + 88);
      if (v69 == v68)
        goto LABEL_175;
    }
    v117.__r_.__value_.__r.__words[0] = (std::string::size_type)&__v;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
    if (v69 == v68)
      goto LABEL_175;
    v79 = (_OWORD *)((char *)v69 + 88);
    if ((_OWORD *)((char *)v69 + 88) == v68)
    {
LABEL_174:
      v70 = (uint64_t)v69;
    }
    else
    {
      v70 = (uint64_t)v69;
      v106 = v68;
      do
      {
        v80 = v79;
        v81 = (__int128 *)*((_QWORD *)v69 + 19);
        v82 = (__int128 *)*((_QWORD *)v69 + 20);
        memset(&__v, 0, 24);
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__v, v81, v82, 0xAAAAAAAAAAAAAAABLL * (((char *)v82 - (char *)v81) >> 3));
        v84 = __v.__first_;
        v83 = __v.__begin_;
        if (__v.__first_ == __v.__begin_)
        {
LABEL_170:
          v117.__r_.__value_.__r.__words[0] = (std::string::size_type)&__v;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
        }
        else
        {
LABEL_155:
          if (SHIBYTE(v84->__r_.__value_.__r.__words[2]) < 0)
          {
            v86 = (std::__split_buffer<std::string>::pointer)v84->__r_.__value_.__r.__words[0];
            v85 = v84->__r_.__value_.__l.__size_;
          }
          else
          {
            v85 = HIBYTE(v84->__r_.__value_.__r.__words[2]);
            v86 = v84;
          }
          if (v85 >= 6)
          {
            v87 = (char *)v86 + v85;
            v88 = v86;
            do
            {
              v89 = (char *)memchr(v88, 84, v85 - 5);
              if (!v89)
                break;
              if (*(_DWORD *)v89 == 1196573012 && *((_WORD *)v89 + 2) == 21573)
              {
                if (v89 == v87 || v89 - (char *)v86 == -1)
                  break;
                ++v84;
                v68 = v106;
                if (v84 != v83)
                  goto LABEL_155;
                goto LABEL_170;
              }
              v88 = (std::__split_buffer<std::string>::pointer)(v89 + 1);
              v85 = v87 - (char *)v88;
            }
            while (v87 - (char *)v88 >= 6);
          }
          v117.__r_.__value_.__r.__words[0] = (std::string::size_type)&__v;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
          *(_OWORD *)v70 = *v80;
          std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v70 + 16));
          *(_OWORD *)(v70 + 16) = *(_OWORD *)((char *)v69 + 104);
          *(_QWORD *)(v70 + 32) = *((_QWORD *)v69 + 15);
          *((_QWORD *)v69 + 13) = 0;
          *((_QWORD *)v69 + 14) = 0;
          *((_QWORD *)v69 + 15) = 0;
          std::vector<int>::__move_assign(v70 + 40, (__n128 *)v69 + 8);
          std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v70 + 64));
          *(_OWORD *)(v70 + 64) = *(_OWORD *)((char *)v69 + 152);
          *(_QWORD *)(v70 + 80) = *((_QWORD *)v69 + 21);
          *((_QWORD *)v69 + 19) = 0;
          *((_QWORD *)v69 + 20) = 0;
          *((_QWORD *)v69 + 21) = 0;
          v70 += 88;
          v68 = v106;
        }
        v79 = (_OWORD *)((char *)v80 + 88);
        v69 = v80;
      }
      while ((_OWORD *)((char *)v80 + 88) != v68);
    }
LABEL_175:
    v67 = v99;
    v65 = v109;
    std::vector<quasar::corrective_reranking::VoiceEditingWFST::Path>::erase((uint64_t)v99, v70, v99[1]);
  }
  v91 = *v67;
  v92 = (char *)v67[1];
  v93 = (uint64_t)&v92[-*v67];
  v94 = 0x2E8BA2E8BA2E8BA3 * (v93 >> 3);
  if (v93 < 1)
  {
    v95 = 0;
    v97 = 0;
  }
  else
  {
    v95 = std::get_temporary_buffer[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path>(0x2E8BA2E8BA2E8BA3 * (v93 >> 3));
    v97 = v96;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,quasar::corrective_reranking::VoiceEditingWFST::search(std::vector<std::string> const&,std::optional<int>,BOOL,std::optional<int>)::$_3 &,std::__wrap_iter<quasar::corrective_reranking::VoiceEditingWFST::Path *>>(v91, v92, v94, (uint64_t)v95, v97);
  if (v95)
    operator delete(v95);
  v98 = v115;
  v115 = 0;
  if (v98)
    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v118;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&p_begin;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_1AD9A890C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__split_buffer<std::wstring> *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  uint64_t v29;

  (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  *(_QWORD *)(v29 - 192) = v29 - 168;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 192));
  *(_QWORD *)(v29 - 168) = v29 - 136;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 168));
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::Paths::add(quasar::corrective_reranking::Paths *this, const quasar::corrective_reranking::VoiceEditingWFST::Path *a2)
{
  unint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  double v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *__p[2];
  unsigned __int8 v16;
  void **v17;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)this + 16))(__p);
  v4 = v16;
  if ((v16 & 0x80u) != 0)
    v4 = (unint64_t)__p[1];
  if (!v4)
  {
    v10 = *((_QWORD *)this + 2);
    if (v10 < *((_QWORD *)this + 3))
    {
      std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>::construct[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path,quasar::corrective_reranking::VoiceEditingWFST::Path const&>((uint64_t)this + 24, *((_QWORD *)this + 2), (uint64_t)a2);
      v11 = v10 + 88;
LABEL_13:
      *((_QWORD *)this + 2) = v11;
LABEL_15:
      *((_QWORD *)this + 2) = v11;
      goto LABEL_16;
    }
LABEL_14:
    v11 = std::vector<quasar::corrective_reranking::VoiceEditingWFST::Path>::__emplace_back_slow_path<quasar::corrective_reranking::VoiceEditingWFST::Path const&>((uint64_t *)this + 1, (uint64_t)a2);
    goto LABEL_15;
  }
  v5 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)this + 4, (unsigned __int8 *)__p);
  if (!v5)
  {
    v12 = *((_QWORD *)this + 1);
    v13 = *((_QWORD *)this + 2);
    v17 = __p;
    *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v17)+ 5) = 0x2E8BA2E8BA2E8BA3 * ((v13 - v12) >> 3);
    v14 = *((_QWORD *)this + 2);
    if (v14 < *((_QWORD *)this + 3))
    {
      std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>::construct[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path,quasar::corrective_reranking::VoiceEditingWFST::Path const&>((uint64_t)this + 24, *((_QWORD *)this + 2), (uint64_t)a2);
      v11 = v14 + 88;
      goto LABEL_13;
    }
    goto LABEL_14;
  }
  v6 = *((_QWORD *)this + 1);
  v7 = *((_QWORD *)v5 + 5);
  if (0x2E8BA2E8BA2E8BA3 * ((*((_QWORD *)this + 2) - v6) >> 3) <= v7)
    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
  v8 = v6 + 88 * v7;
  v9 = *(double *)(v8 + 8);
  if (*((double *)a2 + 1) < v9)
    v9 = *((double *)a2 + 1);
  *(double *)(v8 + 8) = v9;
LABEL_16:
  if ((char)v16 < 0)
    operator delete(__p[0]);
}

void sub_1AD9A8C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v15 + 16) = v16;
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::VoiceEditingWFST::Path::~Path(quasar::corrective_reranking::VoiceEditingWFST::Path *this)
{
  void *v2;
  void **v3;

  v3 = (void **)((char *)this + 64);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void quasar::corrective_reranking::VoiceEditingWFST::search(std::vector<std::string> const&,std::optional<int>,BOOL,std::optional<int>)::$_2::operator()(uint64_t *a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t *v8;
  quasar::corrective_reranking::Paths ***v9;
  std::string::size_type v10;
  uint64_t v11;
  std::string v12;
  uint64_t v13;
  uint64_t v14;
  void *__p;
  void *v16;
  uint64_t v17;
  std::string v18;
  __int128 v19;
  std::string v20;
  void *v21;
  _BYTE *v22;
  uint64_t v23;
  std::string v24;
  std::string *v25;

  v6 = *a1;
  v19 = *a2;
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *((__int128 **)a2 + 2), *((__int128 **)a2 + 3), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2)) >> 3));
  v21 = 0;
  v22 = 0;
  v23 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v21, *((const void **)a2 + 5), *((_QWORD *)a2 + 6), (uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 2);
  memset(&v24, 0, sizeof(v24));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v24, *((__int128 **)a2 + 8), *((__int128 **)a2 + 9), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 9) - *((_QWORD *)a2 + 8)) >> 3));
  quasar::corrective_reranking::VoiceEditingWFST::Path::advance((uint64_t)&v19, a3);
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, (__int128 *)v20.__r_.__value_.__l.__data_, (__int128 *)v20.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20.__r_.__value_.__l.__size_ - v20.__r_.__value_.__r.__words[0]) >> 3));
  v7 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
  v25 = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (*((_QWORD *)&v7 + 1) != (_QWORD)v7)
  {
    quasar::corrective_reranking::Paths::add(*(quasar::corrective_reranking::Paths **)a1[1], (const quasar::corrective_reranking::VoiceEditingWFST::Path *)&v19);
    goto LABEL_12;
  }
  LODWORD(v12.__r_.__value_.__l.__data_) = v19;
  v8 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(v6 + 72), (int *)&v12);
  if (v8)
  {
    *((double *)&v19 + 1) = *((double *)&v19 + 1) + *((float *)v8 + 5);
    v9 = (quasar::corrective_reranking::Paths ***)(a1 + 2);
LABEL_11:
    quasar::corrective_reranking::Paths::add(**v9, (const quasar::corrective_reranking::VoiceEditingWFST::Path *)&v19);
    goto LABEL_12;
  }
  if (!*(_BYTE *)a1[3]
    || (memset(&v12, 0, sizeof(v12)),
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, (__int128 *)v24.__r_.__value_.__l.__data_, (__int128 *)v24.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24.__r_.__value_.__l.__size_ - v24.__r_.__value_.__r.__words[0]) >> 3)), v10 = v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0], v11 = *(_QWORD *)(a1[4] + 8) - *(_QWORD *)a1[4], v25 = &v12, std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25), v10 != v11))
  {
    v9 = (quasar::corrective_reranking::Paths ***)(a1 + 1);
    goto LABEL_11;
  }
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v19;
  v13 = 0;
  v14 = 0;
  v12.__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v12.__r_.__value_.__r.__words[2], (__int128 *)v20.__r_.__value_.__l.__data_, (__int128 *)v20.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20.__r_.__value_.__l.__size_ - v20.__r_.__value_.__r.__words[0]) >> 3));
  __p = 0;
  v16 = 0;
  v17 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v21, (uint64_t)v22, (v22 - (_BYTE *)v21) >> 2);
  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, (__int128 *)v24.__r_.__value_.__l.__data_, (__int128 *)v24.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24.__r_.__value_.__l.__size_ - v24.__r_.__value_.__r.__words[0]) >> 3));
  *(double *)&v12.__r_.__value_.__l.__size_ = *(double *)&v12.__r_.__value_.__l.__size_ + 1000000.0;
  quasar::corrective_reranking::Paths::add(*(quasar::corrective_reranking::Paths **)a1[2], (const quasar::corrective_reranking::VoiceEditingWFST::Path *)&v12);
  v25 = &v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  v25 = (std::string *)&v12.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
LABEL_12:
  v12.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  v12.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
}

void sub_1AD9A8FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  quasar::corrective_reranking::VoiceEditingWFST::Path::~Path((quasar::corrective_reranking::VoiceEditingWFST::Path *)&a9);
  quasar::corrective_reranking::VoiceEditingWFST::Path::~Path((quasar::corrective_reranking::VoiceEditingWFST::Path *)&a21);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Edge*,quasar::corrective_reranking::VoiceEditingWFST::Edge*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>,quasar::corrective_reranking::VoiceEditingWFST::Edge*,quasar::corrective_reranking::VoiceEditingWFST::Edge*,quasar::corrective_reranking::VoiceEditingWFST::Edge*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1AD9A9094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 58)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(a2 << 6);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>,quasar::corrective_reranking::VoiceEditingWFST::Edge*,quasar::corrective_reranking::VoiceEditingWFST::Edge*,quasar::corrective_reranking::VoiceEditingWFST::Edge*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>::construct[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Edge,quasar::corrective_reranking::VoiceEditingWFST::Edge&>(a1, v4, v6);
      v6 += 64;
      v4 = v12 + 64;
      v12 += 64;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>,quasar::corrective_reranking::VoiceEditingWFST::Edge*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1AD9A91BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>,quasar::corrective_reranking::VoiceEditingWFST::Edge*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>::construct[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Edge,quasar::corrective_reranking::VoiceEditingWFST::Edge&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  double result;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  v5 = (std::string *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = (std::string *)(a2 + 32);
  if (*(char *)(a3 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a3 + 32), *(_QWORD *)(a3 + 40));
  }
  else
  {
    v8 = *(_OWORD *)(a3 + 32);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  result = *(double *)(a3 + 56);
  *(double *)(a2 + 56) = result;
  return result;
}

void sub_1AD9A9264(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>,quasar::corrective_reranking::VoiceEditingWFST::Edge*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>,quasar::corrective_reranking::VoiceEditingWFST::Edge*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>,quasar::corrective_reranking::VoiceEditingWFST::Edge*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 64;
      std::allocator<quasar::ProcessingConnection>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        std::allocator<quasar::ProcessingConnection>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<quasar::corrective_reranking::VoiceEditingWFST::Path>::__emplace_back_slow_path<quasar::corrective_reranking::VoiceEditingWFST::Path const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x2E8BA2E8BA2E8BALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 3)) >= 0x1745D1745D1745DLL)
    v6 = 0x2E8BA2E8BA2E8BALL;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,quasar::PTree>>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[88 * v3];
  v13 = &v7[88 * v6];
  std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>::construct[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path,quasar::corrective_reranking::VoiceEditingWFST::Path const&>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 88;
  std::vector<quasar::corrective_reranking::VoiceEditingWFST::Path>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<quasar::corrective_reranking::VoiceEditingWFST::Path>::~__split_buffer(&v10);
  return v8;
}

void sub_1AD9A9498(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::corrective_reranking::VoiceEditingWFST::Path>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

std::string *std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>::construct[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path,quasar::corrective_reranking::VoiceEditingWFST::Path const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 16), *(__int128 **)(a3 + 16), *(__int128 **)(a3 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 24) - *(_QWORD *)(a3 + 16)) >> 3));
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a2 + 40), *(const void **)(a3 + 40), *(_QWORD *)(a3 + 48), (uint64_t)(*(_QWORD *)(a3 + 48) - *(_QWORD *)(a3 + 40)) >> 2);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 64), *(__int128 **)(a3 + 64), *(__int128 **)(a3 + 72), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 72) - *(_QWORD *)(a3 + 64)) >> 3));
}

void sub_1AD9A9558(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 48) = v5;
    operator delete(v5);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::corrective_reranking::VoiceEditingWFST::Path>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Path*>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Path*>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Path*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Path*>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Path*>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Path*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 88;
      std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>::construct[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path,quasar::corrective_reranking::VoiceEditingWFST::Path>(a1, v7 - 88, v9);
      v7 = *((_QWORD *)&v16 + 1) - 88;
      *((_QWORD *)&v16 + 1) -= 88;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Path*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

__n128 std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>::construct[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path,quasar::corrective_reranking::VoiceEditingWFST::Path>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  result = *(__n128 *)(a3 + 64);
  *(__n128 *)(a2 + 64) = result;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Path*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Path*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Path*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>::destroy[abi:ne180100](v3, v1);
      v1 += 88;
    }
    while (v1 != v2);
  }
}

void std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void **v4;

  v4 = (void **)(a2 + 64);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v3 = *(void **)(a2 + 40);
  if (v3)
  {
    *(_QWORD *)(a2 + 48) = v3;
    operator delete(v3);
  }
  v4 = (void **)(a2 + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void **std::__split_buffer<quasar::corrective_reranking::VoiceEditingWFST::Path>::~__split_buffer(void **a1)
{
  std::__split_buffer<quasar::corrective_reranking::VoiceEditingWFST::Path>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<quasar::corrective_reranking::VoiceEditingWFST::Path>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 88;
    std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>::destroy[abi:ne180100](v4, i - 88);
  }
}

uint64_t std::vector<quasar::corrective_reranking::VoiceEditingWFST::Path>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  if (a2 != a3)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path *,quasar::corrective_reranking::VoiceEditingWFST::Path *,quasar::corrective_reranking::VoiceEditingWFST::Path *>((uint64_t)&v9, a3, *(_QWORD *)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 88;
        std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>::destroy[abi:ne180100](a1 + 16, v7);
      }
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path *,quasar::corrective_reranking::VoiceEditingWFST::Path *,quasar::corrective_reranking::VoiceEditingWFST::Path *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    *(_OWORD *)a4 = *(_OWORD *)v5;
    std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a4 + 16));
    *(_OWORD *)(a4 + 16) = *(_OWORD *)(v5 + 16);
    *(_QWORD *)(a4 + 32) = *(_QWORD *)(v5 + 32);
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 32) = 0;
    std::vector<int>::__move_assign(a4 + 40, (__n128 *)(v5 + 40));
    std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a4 + 64));
    *(_OWORD *)(a4 + 64) = *(_OWORD *)(v5 + 64);
    *(_QWORD *)(a4 + 80) = *(_QWORD *)(v5 + 80);
    *(_QWORD *)(v5 + 64) = 0;
    *(_QWORD *)(v5 + 72) = 0;
    *(_QWORD *)(v5 + 80) = 0;
    a4 += 88;
    v5 += 88;
  }
  while (v5 != v6);
  return v6;
}

__int128 *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  __int128 v7;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0)
        operator delete(*(void **)a4);
      v7 = *v5;
      *(_QWORD *)(a4 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a4 = v7;
      a4 += 24;
      *((_BYTE *)v5 + 23) = 0;
      *(_BYTE *)v5 = 0;
      v5 = (__int128 *)((char *)v5 + 24);
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>>>::__deallocate_node(a1, *(char **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>>>::__deallocate_node(uint64_t a1, char *a2)
{
  char *v2;
  char *v3;
  void **v4;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *(char **)v2;
      v4 = (void **)(v2 + 24);
      std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>::__destroy_vector::operator()[abi:ne180100](&v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *v11 = *v21;
LABEL_38:
    *v21 = v11;
    goto LABEL_39;
  }
  *v11 = *v13;
  *v13 = v11;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    v22 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1AD9A9CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  void **v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = __p + 3;
    std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p)
    operator delete(__p);
}

uint64_t std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>::__push_back_slow_path<quasar::corrective_reranking::VoiceEditingWFST::Edge const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  void *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t *v15;

  v3 = (a1[1] - *a1) >> 6;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v6 = a1[2] - *a1;
  if (v6 >> 5 > v4)
    v4 = v6 >> 5;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFC0)
    v7 = 0x3FFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  v15 = a1 + 2;
  if (v7)
    v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>>((uint64_t)(a1 + 2), v7);
  else
    v8 = 0;
  v11 = v8;
  v12 = &v8[64 * v3];
  v14 = &v8[64 * v7];
  std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>::construct[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Edge,quasar::corrective_reranking::VoiceEditingWFST::Edge const&>((uint64_t)(a1 + 2), (uint64_t)v12, a2);
  v13 = v12 + 64;
  std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>::__swap_out_circular_buffer(a1, &v11);
  v9 = a1[1];
  std::__split_buffer<quasar::corrective_reranking::VoiceEditingWFST::Edge>::~__split_buffer(&v11);
  return v9;
}

void sub_1AD9A9E00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::corrective_reranking::VoiceEditingWFST::Edge>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

double std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>::construct[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Edge,quasar::corrective_reranking::VoiceEditingWFST::Edge const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  double result;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  v5 = (std::string *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = (std::string *)(a2 + 32);
  if (*(char *)(a3 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a3 + 32), *(_QWORD *)(a3 + 40));
  }
  else
  {
    v8 = *(_OWORD *)(a3 + 32);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  result = *(double *)(a3 + 56);
  *(double *)(a2 + 56) = result;
  return result;
}

void sub_1AD9A9EA8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Edge*>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Edge*>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Edge*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Edge*>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Edge*>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Edge*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = a7 + v7;
      v9 = a3 + v7;
      *(_DWORD *)(v8 - 64) = *(_DWORD *)(a3 + v7 - 64);
      v10 = *(_OWORD *)(a3 + v7 - 56);
      *(_QWORD *)(v8 - 40) = *(_QWORD *)(a3 + v7 - 40);
      *(_OWORD *)(v8 - 56) = v10;
      *(_QWORD *)(v9 - 48) = 0;
      *(_QWORD *)(v9 - 40) = 0;
      *(_QWORD *)(v9 - 56) = 0;
      v11 = *(_OWORD *)(a3 + v7 - 32);
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(a3 + v7 - 16);
      *(_OWORD *)(v8 - 32) = v11;
      *(_QWORD *)(v9 - 24) = 0;
      *(_QWORD *)(v9 - 16) = 0;
      *(_QWORD *)(v9 - 32) = 0;
      *(_QWORD *)(v8 - 8) = *(_QWORD *)(a3 + v7 - 8);
      v7 -= 64;
    }
    while (a3 + v7 != a5);
    *((_QWORD *)&v17 + 1) = a7 + v7;
    v12 = v17;
  }
  v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Edge*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Edge*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Edge*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Edge*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<quasar::ProcessingConnection>::destroy[abi:ne180100](v3, v1);
      v1 += 64;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::corrective_reranking::VoiceEditingWFST::Edge>::~__split_buffer(void **a1)
{
  std::__split_buffer<quasar::corrective_reranking::VoiceEditingWFST::Edge>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<quasar::corrective_reranking::VoiceEditingWFST::Edge>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 64;
    std::allocator<quasar::ProcessingConnection>::destroy[abi:ne180100](v4, i - 64);
  }
}

void quasar::corrective_reranking::UniqueSearchPaths::~UniqueSearchPaths(quasar::corrective_reranking::UniqueSearchPaths *this)
{
  void **v1;
  void **v2;

  *(_QWORD *)this = &unk_1E5D47600;
  v1 = (void **)((char *)this + 8);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 32);
  v2 = v1;
  std::vector<quasar::corrective_reranking::VoiceEditingWFST::Path>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void **v2;
  void **v3;

  *(_QWORD *)this = &unk_1E5D47600;
  v2 = (void **)((char *)this + 8);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 32);
  v3 = v2;
  std::vector<quasar::corrective_reranking::VoiceEditingWFST::Path>::__destroy_vector::operator()[abi:ne180100](&v3);
  MEMORY[0x1AF44D190](this, 0x10A1C403B35B87FLL);
}

void quasar::corrective_reranking::UniqueSearchPaths::getKey(quasar::corrective_reranking::UniqueSearchPaths *this, __int128 **a2)
{
  std::vector<std::string>::pointer end;
  __int128 v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  std::string *v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  std::vector<std::string>::pointer v12;
  __int128 v13;
  std::string *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  std::string *v18;
  std::string *v19;
  __int128 v20;
  std::vector<std::string>::pointer v21;
  __int128 v22;
  std::string *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  std::string *v27;
  std::string *v28;
  __int128 v29;
  std::string v30;
  std::vector<std::string> v31;
  std::string v32;
  std::string v33;
  std::__split_buffer<std::string> __v;

  memset(&v33, 0, sizeof(v33));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v33, a2[2], a2[3], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[3] - (char *)a2[2]) >> 3));
  memset(&v32, 0, sizeof(v32));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v32, a2[8], a2[9], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[9] - (char *)a2[8]) >> 3));
  memset(&v31, 0, sizeof(v31));
  std::to_string(&v30, *(_DWORD *)a2);
  end = v31.__end_;
  if (v31.__end_ >= v31.__end_cap_.__value_)
  {
    v5 = 0xAAAAAAAAAAAAAAABLL * (((char *)v31.__end_ - (char *)v31.__begin_) >> 3);
    v6 = v5 + 1;
    if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    if (0x5555555555555556 * (((char *)v31.__end_cap_.__value_ - (char *)v31.__begin_) >> 3) > v6)
      v6 = 0x5555555555555556 * (((char *)v31.__end_cap_.__value_ - (char *)v31.__begin_) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v31.__end_cap_.__value_ - (char *)v31.__begin_) >> 3) >= 0x555555555555555)
      v7 = 0xAAAAAAAAAAAAAAALL;
    else
      v7 = v6;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v31.__end_cap_;
    if (v7)
      v8 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v31.__end_cap_, v7);
    else
      v8 = 0;
    v9 = v8 + v5;
    __v.__first_ = v8;
    __v.__begin_ = v9;
    __v.__end_cap_.__value_ = &v8[v7];
    v10 = *(_OWORD *)&v30.__r_.__value_.__l.__data_;
    v9->__r_.__value_.__r.__words[2] = v30.__r_.__value_.__r.__words[2];
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
    memset(&v30, 0, sizeof(v30));
    __v.__end_ = v9 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(&v31, &__v);
    v11 = v31.__end_;
    std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
    v31.__end_ = v11;
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
  }
  else
  {
    v4 = *(_OWORD *)&v30.__r_.__value_.__l.__data_;
    v31.__end_->__r_.__value_.__r.__words[2] = v30.__r_.__value_.__r.__words[2];
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v4;
    v31.__end_ = end + 1;
  }
  std::to_string(&v30, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33.__r_.__value_.__l.__size_ - v33.__r_.__value_.__r.__words[0]) >> 3));
  v12 = v31.__end_;
  if (v31.__end_ >= v31.__end_cap_.__value_)
  {
    v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)v31.__end_ - (char *)v31.__begin_) >> 3);
    v16 = v15 + 1;
    if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    if (0x5555555555555556 * (((char *)v31.__end_cap_.__value_ - (char *)v31.__begin_) >> 3) > v16)
      v16 = 0x5555555555555556 * (((char *)v31.__end_cap_.__value_ - (char *)v31.__begin_) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v31.__end_cap_.__value_ - (char *)v31.__begin_) >> 3) >= 0x555555555555555)
      v17 = 0xAAAAAAAAAAAAAAALL;
    else
      v17 = v16;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v31.__end_cap_;
    if (v17)
      v18 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v31.__end_cap_, v17);
    else
      v18 = 0;
    v19 = v18 + v15;
    __v.__first_ = v18;
    __v.__begin_ = v19;
    __v.__end_cap_.__value_ = &v18[v17];
    v20 = *(_OWORD *)&v30.__r_.__value_.__l.__data_;
    v19->__r_.__value_.__r.__words[2] = v30.__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
    memset(&v30, 0, sizeof(v30));
    __v.__end_ = v19 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(&v31, &__v);
    v14 = v31.__end_;
    std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
    v31.__end_ = v14;
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v30.__r_.__value_.__l.__data_);
      v14 = v31.__end_;
    }
  }
  else
  {
    v13 = *(_OWORD *)&v30.__r_.__value_.__l.__data_;
    v31.__end_->__r_.__value_.__r.__words[2] = v30.__r_.__value_.__r.__words[2];
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    v14 = v12 + 1;
    v31.__end_ = v12 + 1;
  }
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&v31, v14, (std::string *)v33.__r_.__value_.__l.__data_, (__int128 *)v33.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33.__r_.__value_.__l.__size_ - v33.__r_.__value_.__r.__words[0]) >> 3));
  std::to_string(&v30, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32.__r_.__value_.__l.__size_ - v32.__r_.__value_.__r.__words[0]) >> 3));
  v21 = v31.__end_;
  if (v31.__end_ >= v31.__end_cap_.__value_)
  {
    v24 = 0xAAAAAAAAAAAAAAABLL * (((char *)v31.__end_ - (char *)v31.__begin_) >> 3);
    v25 = v24 + 1;
    if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    if (0x5555555555555556 * (((char *)v31.__end_cap_.__value_ - (char *)v31.__begin_) >> 3) > v25)
      v25 = 0x5555555555555556 * (((char *)v31.__end_cap_.__value_ - (char *)v31.__begin_) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v31.__end_cap_.__value_ - (char *)v31.__begin_) >> 3) >= 0x555555555555555)
      v26 = 0xAAAAAAAAAAAAAAALL;
    else
      v26 = v25;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v31.__end_cap_;
    if (v26)
      v27 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v31.__end_cap_, v26);
    else
      v27 = 0;
    v28 = v27 + v24;
    __v.__first_ = v27;
    __v.__begin_ = v28;
    __v.__end_cap_.__value_ = &v27[v26];
    v29 = *(_OWORD *)&v30.__r_.__value_.__l.__data_;
    v28->__r_.__value_.__r.__words[2] = v30.__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
    memset(&v30, 0, sizeof(v30));
    __v.__end_ = v28 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(&v31, &__v);
    v23 = v31.__end_;
    std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
    v31.__end_ = v23;
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v30.__r_.__value_.__l.__data_);
      v23 = v31.__end_;
    }
  }
  else
  {
    v22 = *(_OWORD *)&v30.__r_.__value_.__l.__data_;
    v31.__end_->__r_.__value_.__r.__words[2] = v30.__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
    v23 = v21 + 1;
    v31.__end_ = v21 + 1;
  }
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&v31, v23, (std::string *)v32.__r_.__value_.__l.__data_, (__int128 *)v32.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32.__r_.__value_.__l.__size_ - v32.__r_.__value_.__r.__words[0]) >> 3));
  __v.__first_ = (std::__split_buffer<std::string>::pointer)" ";
  __v.__begin_ = (std::__split_buffer<std::string>::pointer)1;
  quasar::join<std::vector<std::string>>((uint64_t *)&v31, (uint64_t *)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  __v.__first_ = &v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  __v.__first_ = &v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_1AD9AA60C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char ***__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char **a16, uint64_t a17, uint64_t a18, char *a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;

  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)(v22 - 88));
  if (a15 < 0)
    operator delete(__p);
  __p = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a16 = &a19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a19 = &a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::Paths::~Paths(quasar::corrective_reranking::Paths *this)
{
  void **v1;
  void **v2;

  *(_QWORD *)this = &unk_1E5D47600;
  v1 = (void **)((char *)this + 8);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 32);
  v2 = v1;
  std::vector<quasar::corrective_reranking::VoiceEditingWFST::Path>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void **v2;
  void **v3;

  *(_QWORD *)this = &unk_1E5D47600;
  v2 = (void **)((char *)this + 8);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 32);
  v3 = v2;
  std::vector<quasar::corrective_reranking::VoiceEditingWFST::Path>::__destroy_vector::operator()[abi:ne180100](&v3);
  MEMORY[0x1AF44D190](this, 0x10A1C403B35B87FLL);
}

void quasar::corrective_reranking::Paths::getKey(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void quasar::corrective_reranking::UniqueOutputPaths::~UniqueOutputPaths(quasar::corrective_reranking::UniqueOutputPaths *this)
{
  void **v1;
  void **v2;

  *(_QWORD *)this = &unk_1E5D47600;
  v1 = (void **)((char *)this + 8);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 32);
  v2 = v1;
  std::vector<quasar::corrective_reranking::VoiceEditingWFST::Path>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void **v2;
  void **v3;

  *(_QWORD *)this = &unk_1E5D47600;
  v2 = (void **)((char *)this + 8);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 32);
  v3 = v2;
  std::vector<quasar::corrective_reranking::VoiceEditingWFST::Path>::__destroy_vector::operator()[abi:ne180100](&v3);
  MEMORY[0x1AF44D190](this, 0x10A1C403B35B87FLL);
}

void quasar::corrective_reranking::UniqueOutputPaths::getKey(quasar::corrective_reranking::UniqueOutputPaths *this, __int128 **a2)
{
  void **v2[2];
  std::string v3;

  memset(&v3, 0, sizeof(v3));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v3, a2[8], a2[9], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[9] - (char *)a2[8]) >> 3));
  v2[0] = (void **)" ";
  v2[1] = (void **)1;
  quasar::join<std::vector<std::string>>((uint64_t *)&v3, (uint64_t *)v2);
  v2[0] = (void **)&v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v2);
}

void sub_1AD9AA88C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<quasar::corrective_reranking::VoiceEditingWFST::Path>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path*,quasar::corrective_reranking::VoiceEditingWFST::Path*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::pair<std::string,quasar::PTree>>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>,quasar::corrective_reranking::VoiceEditingWFST::Path*,quasar::corrective_reranking::VoiceEditingWFST::Path*,quasar::corrective_reranking::VoiceEditingWFST::Path*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1AD9AA908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<quasar::corrective_reranking::VoiceEditingWFST::Path>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>,quasar::corrective_reranking::VoiceEditingWFST::Path*,quasar::corrective_reranking::VoiceEditingWFST::Path*,quasar::corrective_reranking::VoiceEditingWFST::Path*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>::construct[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path,quasar::corrective_reranking::VoiceEditingWFST::Path&>(a1, v4, v6);
      v6 += 88;
      v4 = v12 + 88;
      v12 += 88;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>,quasar::corrective_reranking::VoiceEditingWFST::Path*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1AD9AA9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>,quasar::corrective_reranking::VoiceEditingWFST::Path*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>::construct[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path,quasar::corrective_reranking::VoiceEditingWFST::Path&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 16), *(__int128 **)(a3 + 16), *(__int128 **)(a3 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 24) - *(_QWORD *)(a3 + 16)) >> 3));
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a2 + 40), *(const void **)(a3 + 40), *(_QWORD *)(a3 + 48), (uint64_t)(*(_QWORD *)(a3 + 48) - *(_QWORD *)(a3 + 40)) >> 2);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 64), *(__int128 **)(a3 + 64), *(__int128 **)(a3 + 72), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 72) - *(_QWORD *)(a3 + 64)) >> 3));
}

void sub_1AD9AAA7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 48) = v5;
    operator delete(v5);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>,quasar::corrective_reranking::VoiceEditingWFST::Path*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>,quasar::corrective_reranking::VoiceEditingWFST::Path*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>,quasar::corrective_reranking::VoiceEditingWFST::Path*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 88;
      std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void std::vector<quasar::corrective_reranking::VoiceEditingWFST::Path>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Path>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::get_temporary_buffer[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path>(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0x1745D1745D1745DLL)
    v1 = 0x1745D1745D1745DLL;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  while (1)
  {
    result = operator new(88 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

void std::__stable_sort<std::_ClassicAlgPolicy,quasar::corrective_reranking::VoiceEditingWFST::search(std::vector<std::string> const&,std::optional<int>,BOOL,std::optional<int>)::$_3 &,std::__wrap_iter<quasar::corrective_reranking::VoiceEditingWFST::Path *>>(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  std::vector<std::wstring> *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  std::vector<std::wstring> *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  void *__p[2];
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  void **v44;

  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      if (*((double *)a2 - 10) < *(double *)(a1 + 8))
        std::swap[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path>((std::vector<std::wstring> *)a1, (uint64_t)(a2 - 88));
    }
    else if ((uint64_t)a3 <= 0)
    {
      if ((char *)a1 != a2)
      {
        v13 = (_OWORD *)(a1 + 88);
        if ((char *)(a1 + 88) != a2)
        {
          v14 = 0;
          v15 = a1;
          do
          {
            v16 = v13;
            if (*(double *)(v15 + 96) < *(double *)(v15 + 8))
            {
              v17 = *(_OWORD *)(v15 + 104);
              v37 = *v13;
              v38 = v17;
              v39 = *(_QWORD *)(v15 + 120);
              *(_QWORD *)(v15 + 104) = 0;
              *(_QWORD *)(v15 + 112) = 0;
              *(_OWORD *)__p = *(_OWORD *)(v15 + 128);
              v41 = *(_QWORD *)(v15 + 144);
              *(_QWORD *)(v15 + 120) = 0;
              *(_QWORD *)(v15 + 128) = 0;
              *(_QWORD *)(v15 + 136) = 0;
              *(_QWORD *)(v15 + 144) = 0;
              v42 = *(_OWORD *)(v15 + 152);
              v43 = *(_QWORD *)(v15 + 168);
              *(_QWORD *)(v15 + 152) = 0;
              *(_QWORD *)(v15 + 160) = 0;
              v18 = v14;
              *(_QWORD *)(v15 + 168) = 0;
              while (1)
              {
                v19 = a1 + v18;
                *(_OWORD *)(a1 + v18 + 88) = *(_OWORD *)(a1 + v18);
                std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a1 + v18 + 104));
                *(_OWORD *)(v19 + 104) = *(_OWORD *)(v19 + 16);
                *(_QWORD *)(v19 + 120) = *(_QWORD *)(v19 + 32);
                *(_QWORD *)(v19 + 24) = 0;
                *(_QWORD *)(v19 + 32) = 0;
                *(_QWORD *)(v19 + 16) = 0;
                std::vector<int>::__move_assign(v19 + 128, (__n128 *)(v19 + 40));
                std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a1 + v18 + 152));
                *(_OWORD *)(v19 + 152) = *(_OWORD *)(v19 + 64);
                *(_QWORD *)(v19 + 168) = *(_QWORD *)(v19 + 80);
                *(_QWORD *)(v19 + 72) = 0;
                *(_QWORD *)(v19 + 80) = 0;
                *(_QWORD *)(v19 + 64) = 0;
                if (!v18)
                  break;
                v18 -= 88;
                if (*((double *)&v37 + 1) >= *(double *)(v19 - 80))
                {
                  v20 = a1 + v18 + 88;
                  goto LABEL_17;
                }
              }
              v20 = a1;
LABEL_17:
              *(_OWORD *)v20 = v37;
              std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v19 + 16));
              *(_QWORD *)(v19 + 16) = v38;
              *(_QWORD *)(v20 + 24) = *((_QWORD *)&v38 + 1);
              *(_QWORD *)(v20 + 32) = v39;
              v38 = 0uLL;
              v39 = 0;
              v23 = *(void **)(v19 + 40);
              v22 = (std::vector<std::wstring> *)(v19 + 40);
              v21 = v23;
              if (v23)
              {
                *(_QWORD *)(v20 + 48) = v21;
                operator delete(v21);
                v22->__begin_ = 0;
                v22->__end_ = 0;
                v22->__end_cap_.__value_ = 0;
              }
              v22->__begin_ = (std::vector<std::wstring>::pointer)__p[0];
              *(void **)(v20 + 48) = __p[1];
              *(_QWORD *)(v20 + 56) = v41;
              __p[0] = 0;
              __p[1] = 0;
              v41 = 0;
              std::vector<std::string>::__vdeallocate(v22 + 1);
              v22[1].__begin_ = (std::vector<std::wstring>::pointer)v42;
              *(_QWORD *)(v20 + 72) = *((_QWORD *)&v42 + 1);
              *(_QWORD *)(v20 + 80) = v43;
              v42 = 0uLL;
              v43 = 0;
              v44 = (void **)&v42;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v44);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
              v44 = (void **)&v38;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v44);
            }
            v13 = (_OWORD *)((char *)v16 + 88);
            v14 += 88;
            v15 = (uint64_t)v16;
          }
          while ((char *)v16 + 88 != a2);
        }
      }
    }
    else
    {
      v10 = a3 >> 1;
      v11 = a1 + 88 * (a3 >> 1);
      if ((uint64_t)a3 <= a5)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,quasar::corrective_reranking::VoiceEditingWFST::search(std::vector<std::string> const&,std::optional<int>,BOOL,std::optional<int>)::$_3 &,std::__wrap_iter<quasar::corrective_reranking::VoiceEditingWFST::Path *>>(a1, (char *)(a1 + 88 * (a3 >> 1)), a3 >> 1, a4);
        v24 = a4 + 88 * v10;
        std::__stable_sort_move<std::_ClassicAlgPolicy,quasar::corrective_reranking::VoiceEditingWFST::search(std::vector<std::string> const&,std::optional<int>,BOOL,std::optional<int>)::$_3 &,std::__wrap_iter<quasar::corrective_reranking::VoiceEditingWFST::Path *>>(a1 + 88 * (a3 >> 1), a2, a3 - v10, v24);
        *(_QWORD *)&v37 = a3;
        v25 = (_QWORD *)(a4 + 88 * a3);
        v26 = (_QWORD *)(a1 + 80);
        v27 = v24;
        v28 = a4;
        while ((_QWORD *)v27 != v25)
        {
          v29 = v26 - 10;
          v30 = (std::vector<std::wstring> *)(v26 - 8);
          if (*(double *)(v27 + 8) >= *(double *)(v28 + 8))
          {
            *v29 = *(_OWORD *)v28;
            std::vector<std::string>::__vdeallocate(v30);
            *((_OWORD *)v26 - 4) = *(_OWORD *)(v28 + 16);
            *(v26 - 6) = *(_QWORD *)(v28 + 32);
            *(_QWORD *)(v28 + 16) = 0;
            *(_QWORD *)(v28 + 24) = 0;
            *(_QWORD *)(v28 + 32) = 0;
            std::vector<int>::__move_assign((uint64_t)(v26 - 5), (__n128 *)(v28 + 40));
            std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v26 - 2));
            *((_OWORD *)v26 - 1) = *(_OWORD *)(v28 + 64);
            *v26 = *(_QWORD *)(v28 + 80);
            *(_QWORD *)(v28 + 64) = 0;
            *(_QWORD *)(v28 + 72) = 0;
            *(_QWORD *)(v28 + 80) = 0;
            v28 += 88;
          }
          else
          {
            *v29 = *(_OWORD *)v27;
            std::vector<std::string>::__vdeallocate(v30);
            *((_OWORD *)v26 - 4) = *(_OWORD *)(v27 + 16);
            *(v26 - 6) = *(_QWORD *)(v27 + 32);
            *(_QWORD *)(v27 + 16) = 0;
            *(_QWORD *)(v27 + 24) = 0;
            *(_QWORD *)(v27 + 32) = 0;
            std::vector<int>::__move_assign((uint64_t)(v26 - 5), (__n128 *)(v27 + 40));
            std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v26 - 2));
            *((_OWORD *)v26 - 1) = *(_OWORD *)(v27 + 64);
            *v26 = *(_QWORD *)(v27 + 80);
            *(_QWORD *)(v27 + 64) = 0;
            *(_QWORD *)(v27 + 72) = 0;
            *(_QWORD *)(v27 + 80) = 0;
            v27 += 88;
          }
          v26 += 11;
          if (v28 == v24)
          {
            if ((_QWORD *)v27 != v25)
            {
              v31 = 0;
              do
              {
                v32 = (_QWORD *)(v27 + v31);
                v33 = &v26[v31 / 8];
                *(_OWORD *)&v26[v31 / 8 - 10] = *(_OWORD *)(v27 + v31);
                std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)&v26[v31 / 8 - 8]);
                *((_OWORD *)v33 - 4) = *(_OWORD *)(v27 + v31 + 16);
                *(v33 - 6) = *(_QWORD *)(v27 + v31 + 32);
                v32[2] = 0;
                v32[3] = 0;
                v32[4] = 0;
                std::vector<int>::__move_assign((uint64_t)&v26[v31 / 8 - 5], (__n128 *)(v27 + v31 + 40));
                std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)&v26[v31 / 8 - 2]);
                *((_OWORD *)v33 - 1) = *(_OWORD *)(v27 + v31 + 64);
                *v33 = *(_QWORD *)(v27 + v31 + 80);
                v32[8] = 0;
                v32[9] = 0;
                v32[10] = 0;
                v31 += 88;
              }
              while (v32 + 11 != v25);
            }
            goto LABEL_37;
          }
        }
        if (v28 != v24)
        {
          v34 = 0;
          do
          {
            v35 = (_QWORD *)(v28 + v34);
            v36 = &v26[v34 / 8];
            *(_OWORD *)&v26[v34 / 8 - 10] = *(_OWORD *)(v28 + v34);
            std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)&v26[v34 / 8 - 8]);
            *((_OWORD *)v36 - 4) = *(_OWORD *)(v28 + v34 + 16);
            *(v36 - 6) = *(_QWORD *)(v28 + v34 + 32);
            v35[2] = 0;
            v35[3] = 0;
            v35[4] = 0;
            std::vector<int>::__move_assign((uint64_t)&v26[v34 / 8 - 5], (__n128 *)(v28 + v34 + 40));
            std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)&v26[v34 / 8 - 2]);
            *((_OWORD *)v36 - 1) = *(_OWORD *)(v28 + v34 + 64);
            *v36 = *(_QWORD *)(v28 + v34 + 80);
            v35[8] = 0;
            v35[9] = 0;
            v35[10] = 0;
            v34 += 88;
          }
          while (v35 + 11 != (_QWORD *)v24);
        }
LABEL_37:
        if (a4)
          std::__destruct_n::__process[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path>((unint64_t *)&v37, a4);
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,quasar::corrective_reranking::VoiceEditingWFST::search(std::vector<std::string> const&,std::optional<int>,BOOL,std::optional<int>)::$_3 &,std::__wrap_iter<quasar::corrective_reranking::VoiceEditingWFST::Path *>>(a1, a1 + 88 * (a3 >> 1), a3 >> 1, a4, a5);
        v12 = a3 - v10;
        std::__stable_sort<std::_ClassicAlgPolicy,quasar::corrective_reranking::VoiceEditingWFST::search(std::vector<std::string> const&,std::optional<int>,BOOL,std::optional<int>)::$_3 &,std::__wrap_iter<quasar::corrective_reranking::VoiceEditingWFST::Path *>>(v11, a2, v12, a4, a5);
        std::__inplace_merge<std::_ClassicAlgPolicy,quasar::corrective_reranking::VoiceEditingWFST::search(std::vector<std::string> const&,std::optional<int>,BOOL,std::optional<int>)::$_3 &,std::__wrap_iter<quasar::corrective_reranking::VoiceEditingWFST::Path *>>(a1, v11, (uint64_t)a2, v10, v12, a4, a5);
      }
    }
  }
}

void sub_1AD9AB164(_Unwind_Exception *exception_object, ...)
{
  uint64_t v1;
  va_list va;

  va_start(va, exception_object);
  if (v1)
    std::__destruct_n::__process[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path>((unint64_t *)va, v1);
  _Unwind_Resume(exception_object);
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,quasar::corrective_reranking::VoiceEditingWFST::search(std::vector<std::string> const&,std::optional<int>,BOOL,std::optional<int>)::$_3 &,std::__wrap_iter<quasar::corrective_reranking::VoiceEditingWFST::Path *>>(uint64_t a1, char *a2, unint64_t a3, uint64_t a4)
{
  _OWORD *v7;
  __n128 *v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  char *v13;
  __n128 result;
  unint64_t *v15;
  _OWORD *v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  _OWORD *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  char *v30;
  _OWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  char *v36;
  _QWORD *v37;
  __int128 v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  __int128 v42;

  if (a3)
  {
    v7 = (_OWORD *)a1;
    if (a3 == 2)
    {
      v9 = a2 - 88;
      v10 = (_QWORD *)(a4 + 16);
      v11 = (_QWORD *)(a4 + 40);
      v12 = (_QWORD *)(a4 + 64);
      if (*((double *)a2 - 10) >= *(double *)(a1 + 8))
      {
        *(_OWORD *)a4 = *(_OWORD *)a1;
        *(_QWORD *)(a4 + 24) = 0;
        *(_QWORD *)(a4 + 32) = 0;
        *v10 = 0;
        *(_OWORD *)(a4 + 16) = *(_OWORD *)(a1 + 16);
        *(_QWORD *)(a4 + 32) = *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 32) = 0;
        *v11 = 0;
        *(_QWORD *)(a4 + 48) = 0;
        *(_QWORD *)(a4 + 56) = 0;
        *(_OWORD *)(a4 + 40) = *(_OWORD *)(a1 + 40);
        *(_QWORD *)(a4 + 56) = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 40) = 0;
        *(_QWORD *)(a1 + 48) = 0;
        *(_QWORD *)(a1 + 56) = 0;
        *v12 = 0;
        *(_QWORD *)(a4 + 72) = 0;
        *(_QWORD *)(a4 + 80) = 0;
        *(_OWORD *)(a4 + 64) = *(_OWORD *)(a1 + 64);
        *(_QWORD *)(a4 + 80) = *(_QWORD *)(a1 + 80);
        *(_QWORD *)(a1 + 64) = 0;
        *(_QWORD *)(a1 + 72) = 0;
        *(_QWORD *)(a1 + 80) = 0;
        *(_OWORD *)(a4 + 88) = *(_OWORD *)v9;
        *(_QWORD *)(a4 + 112) = 0;
        *(_QWORD *)(a4 + 120) = 0;
        *(_QWORD *)(a4 + 104) = 0;
        *(_OWORD *)(a4 + 104) = *(_OWORD *)(a2 - 72);
        *(_QWORD *)(a4 + 120) = *((_QWORD *)a2 - 7);
        *((_QWORD *)a2 - 9) = 0;
        *((_QWORD *)a2 - 8) = 0;
        *((_QWORD *)a2 - 7) = 0;
        *(_QWORD *)(a4 + 128) = 0;
        *(_QWORD *)(a4 + 136) = 0;
        *(_QWORD *)(a4 + 144) = 0;
        *(_OWORD *)(a4 + 128) = *((_OWORD *)a2 - 3);
        *(_QWORD *)(a4 + 144) = *((_QWORD *)a2 - 4);
        *((_QWORD *)a2 - 6) = 0;
        *((_QWORD *)a2 - 5) = 0;
        *((_QWORD *)a2 - 4) = 0;
        *(_QWORD *)(a4 + 168) = 0;
        v8 = (__n128 *)(a4 + 168);
        *(_QWORD *)(a4 + 152) = 0;
        *(_QWORD *)(a4 + 160) = 0;
        result = *(__n128 *)(a2 - 24);
        *(__n128 *)(a4 + 152) = result;
        v15 = (unint64_t *)(a2 - 8);
        v13 = a2 - 24;
        goto LABEL_23;
      }
      *(_OWORD *)a4 = *(_OWORD *)v9;
      *(_QWORD *)(a4 + 24) = 0;
      *(_QWORD *)(a4 + 32) = 0;
      *v10 = 0;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)(a2 - 72);
      *(_QWORD *)(a4 + 32) = *((_QWORD *)a2 - 7);
      *((_QWORD *)a2 - 9) = 0;
      *((_QWORD *)a2 - 8) = 0;
      *((_QWORD *)a2 - 7) = 0;
      *v11 = 0;
      *(_QWORD *)(a4 + 48) = 0;
      *(_QWORD *)(a4 + 56) = 0;
      *(_OWORD *)(a4 + 40) = *((_OWORD *)a2 - 3);
      *(_QWORD *)(a4 + 56) = *((_QWORD *)a2 - 4);
      *((_QWORD *)a2 - 6) = 0;
      *((_QWORD *)a2 - 5) = 0;
      *((_QWORD *)a2 - 4) = 0;
      *v12 = 0;
      *(_QWORD *)(a4 + 72) = 0;
      *(_QWORD *)(a4 + 80) = 0;
      *(_OWORD *)(a4 + 64) = *(_OWORD *)(a2 - 24);
      *(_QWORD *)(a4 + 80) = *((_QWORD *)a2 - 1);
      *((_QWORD *)a2 - 3) = 0;
      *((_QWORD *)a2 - 2) = 0;
      *((_QWORD *)a2 - 1) = 0;
      *(_OWORD *)(a4 + 88) = *(_OWORD *)a1;
      *(_QWORD *)(a4 + 112) = 0;
      *(_QWORD *)(a4 + 120) = 0;
      *(_QWORD *)(a4 + 104) = 0;
      *(_OWORD *)(a4 + 104) = *(_OWORD *)(a1 + 16);
      *(_QWORD *)(a4 + 120) = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a4 + 128) = 0;
      *(_QWORD *)(a4 + 136) = 0;
      *(_QWORD *)(a4 + 144) = 0;
      *(_OWORD *)(a4 + 128) = *(_OWORD *)(a1 + 40);
      *(_QWORD *)(a4 + 144) = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 40) = 0;
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 56) = 0;
      *(_QWORD *)(a4 + 168) = 0;
      v8 = (__n128 *)(a4 + 168);
LABEL_7:
      v8[-1].n128_u64[0] = 0;
      v8[-1].n128_u64[1] = 0;
      v13 = (char *)(a1 + 64);
      result = *(__n128 *)(a1 + 64);
      v8[-1] = result;
      v15 = (unint64_t *)(a1 + 80);
LABEL_23:
      v8->n128_u64[0] = *v15;
      *(_QWORD *)v13 = 0;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = 0;
      return result;
    }
    if (a3 == 1)
    {
      *(_OWORD *)a4 = *(_OWORD *)a1;
      *(_QWORD *)(a4 + 24) = 0;
      *(_QWORD *)(a4 + 32) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)(a1 + 16);
      *(_QWORD *)(a4 + 32) = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a4 + 40) = 0;
      *(_QWORD *)(a4 + 48) = 0;
      *(_QWORD *)(a4 + 56) = 0;
      *(_OWORD *)(a4 + 40) = *(_OWORD *)(a1 + 40);
      *(_QWORD *)(a4 + 56) = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 40) = 0;
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 56) = 0;
      *(_QWORD *)(a4 + 80) = 0;
      v8 = (__n128 *)(a4 + 80);
      goto LABEL_7;
    }
    if ((uint64_t)a3 > 8)
    {
      v27 = 88 * (a3 >> 1);
      v28 = (_QWORD *)(a1 + v27);
      std::__stable_sort<std::_ClassicAlgPolicy,quasar::corrective_reranking::VoiceEditingWFST::search(std::vector<std::string> const&,std::optional<int>,BOOL,std::optional<int>)::$_3 &,std::__wrap_iter<quasar::corrective_reranking::VoiceEditingWFST::Path *>>(a1, a1 + v27, a3 >> 1, a4, a3 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,quasar::corrective_reranking::VoiceEditingWFST::search(std::vector<std::string> const&,std::optional<int>,BOOL,std::optional<int>)::$_3 &,std::__wrap_iter<quasar::corrective_reranking::VoiceEditingWFST::Path *>>((char *)v7 + v27, a2, a3 - (a3 >> 1), a4 + v27, a3 - (a3 >> 1));
      v29 = (_QWORD *)(a4 + 80);
      v30 = (char *)v7 + v27;
      while (v30 != a2)
      {
        v31 = v29 - 10;
        v32 = v29 - 8;
        v33 = v29 - 5;
        v34 = v29 - 2;
        if (*((double *)v30 + 1) >= *((double *)v7 + 1))
        {
          *v31 = *v7;
          *(v29 - 7) = 0;
          *(v29 - 6) = 0;
          *v32 = 0;
          *((_OWORD *)v29 - 4) = v7[1];
          *(v29 - 6) = *((_QWORD *)v7 + 4);
          *((_QWORD *)v7 + 2) = 0;
          *((_QWORD *)v7 + 3) = 0;
          *((_QWORD *)v7 + 4) = 0;
          *v33 = 0;
          *(v29 - 4) = 0;
          *(v29 - 3) = 0;
          *(_OWORD *)(v29 - 5) = *(_OWORD *)((char *)v7 + 40);
          *(v29 - 3) = *((_QWORD *)v7 + 7);
          *((_QWORD *)v7 + 5) = 0;
          *((_QWORD *)v7 + 6) = 0;
          *((_QWORD *)v7 + 7) = 0;
          *v34 = 0;
          *(v29 - 1) = 0;
          *v29 = 0;
          result = *((__n128 *)v7 + 4);
          *((__n128 *)v29 - 1) = result;
          *v29 = *((_QWORD *)v7 + 10);
          *((_QWORD *)v7 + 8) = 0;
          *((_QWORD *)v7 + 9) = 0;
          *((_QWORD *)v7 + 10) = 0;
          v7 = (_OWORD *)((char *)v7 + 88);
        }
        else
        {
          *v31 = *(_OWORD *)v30;
          *(v29 - 7) = 0;
          *(v29 - 6) = 0;
          *v32 = 0;
          *((_OWORD *)v29 - 4) = *((_OWORD *)v30 + 1);
          *(v29 - 6) = *((_QWORD *)v30 + 4);
          *((_QWORD *)v30 + 2) = 0;
          *((_QWORD *)v30 + 3) = 0;
          *((_QWORD *)v30 + 4) = 0;
          *v33 = 0;
          *(v29 - 4) = 0;
          *(v29 - 3) = 0;
          *(_OWORD *)(v29 - 5) = *(_OWORD *)(v30 + 40);
          *(v29 - 3) = *((_QWORD *)v30 + 7);
          *((_QWORD *)v30 + 5) = 0;
          *((_QWORD *)v30 + 6) = 0;
          *((_QWORD *)v30 + 7) = 0;
          *v34 = 0;
          *(v29 - 1) = 0;
          *v29 = 0;
          result = *((__n128 *)v30 + 4);
          *((__n128 *)v29 - 1) = result;
          *v29 = *((_QWORD *)v30 + 10);
          *((_QWORD *)v30 + 8) = 0;
          *((_QWORD *)v30 + 9) = 0;
          *((_QWORD *)v30 + 10) = 0;
          v30 += 88;
        }
        v29 += 11;
        if (v7 == (_OWORD *)v28)
        {
          if (v30 != a2)
          {
            v35 = 0;
            do
            {
              v36 = &v30[v35];
              v37 = &v29[v35 / 8];
              v38 = *(_OWORD *)&v30[v35];
              *(v37 - 7) = 0;
              *(v37 - 6) = 0;
              *(v37 - 8) = 0;
              *((_OWORD *)v37 - 5) = v38;
              *((_OWORD *)v37 - 4) = *(_OWORD *)&v30[v35 + 16];
              *(v37 - 6) = *(_QWORD *)&v30[v35 + 32];
              *((_QWORD *)v36 + 2) = 0;
              *((_QWORD *)v36 + 3) = 0;
              *((_QWORD *)v36 + 4) = 0;
              *(v37 - 5) = 0;
              *(v37 - 4) = 0;
              *(v37 - 3) = 0;
              *(_OWORD *)(v37 - 5) = *(_OWORD *)&v30[v35 + 40];
              *(v37 - 3) = *(_QWORD *)&v30[v35 + 56];
              *((_QWORD *)v36 + 5) = 0;
              *((_QWORD *)v36 + 6) = 0;
              *((_QWORD *)v36 + 7) = 0;
              *(v37 - 2) = 0;
              *(v37 - 1) = 0;
              *v37 = 0;
              result = *(__n128 *)&v30[v35 + 64];
              *((__n128 *)v37 - 1) = result;
              *v37 = *(_QWORD *)&v30[v35 + 80];
              *((_QWORD *)v36 + 8) = 0;
              *((_QWORD *)v36 + 9) = 0;
              *((_QWORD *)v36 + 10) = 0;
              v35 += 88;
            }
            while (v36 + 88 != a2);
          }
          return result;
        }
      }
      if (v7 != (_OWORD *)v28)
      {
        v39 = 0;
        do
        {
          v40 = &v29[v39 / 8];
          v41 = (_QWORD *)((char *)v7 + v39);
          v42 = *(_OWORD *)((char *)v7 + v39);
          *(v40 - 7) = 0;
          *(v40 - 6) = 0;
          *(v40 - 8) = 0;
          *((_OWORD *)v40 - 5) = v42;
          *((_OWORD *)v40 - 4) = *(_OWORD *)((char *)v7 + v39 + 16);
          *(v40 - 6) = *(_QWORD *)((char *)v7 + v39 + 32);
          v41[2] = 0;
          v41[3] = 0;
          v41[4] = 0;
          *(v40 - 5) = 0;
          *(v40 - 4) = 0;
          *(v40 - 3) = 0;
          *(_OWORD *)(v40 - 5) = *(_OWORD *)((char *)v7 + v39 + 40);
          *(v40 - 3) = *(_QWORD *)((char *)v7 + v39 + 56);
          v41[5] = 0;
          v41[6] = 0;
          v41[7] = 0;
          *(v40 - 2) = 0;
          *(v40 - 1) = 0;
          *v40 = 0;
          result = *(__n128 *)((char *)v7 + v39 + 64);
          *((__n128 *)v40 - 1) = result;
          *v40 = *(_QWORD *)((char *)v7 + v39 + 80);
          v41[8] = 0;
          v41[9] = 0;
          v41[10] = 0;
          v39 += 88;
        }
        while (v41 + 11 != v28);
      }
    }
    else if ((char *)a1 != a2)
    {
      *(_OWORD *)a4 = *(_OWORD *)a1;
      *(_QWORD *)(a4 + 24) = 0;
      *(_QWORD *)(a4 + 32) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)(a1 + 16);
      *(_QWORD *)(a4 + 32) = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a4 + 40) = 0;
      *(_QWORD *)(a4 + 48) = 0;
      *(_QWORD *)(a4 + 56) = 0;
      *(_OWORD *)(a4 + 40) = *(_OWORD *)(a1 + 40);
      *(_QWORD *)(a4 + 56) = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 40) = 0;
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 56) = 0;
      *(_QWORD *)(a4 + 64) = 0;
      *(_QWORD *)(a4 + 72) = 0;
      *(_QWORD *)(a4 + 80) = 0;
      result = *(__n128 *)(a1 + 64);
      *(__n128 *)(a4 + 64) = result;
      *(_QWORD *)(a4 + 80) = *(_QWORD *)(a1 + 80);
      *(_QWORD *)(a1 + 64) = 0;
      *(_QWORD *)(a1 + 72) = 0;
      *(_QWORD *)(a1 + 80) = 0;
      v16 = (_OWORD *)(a1 + 88);
      if ((char *)(a1 + 88) != a2)
      {
        v17 = 0;
        v18 = (_OWORD *)a4;
        do
        {
          v19 = v16;
          v20 = (_OWORD *)((char *)v18 + 88);
          if (*((double *)v7 + 12) >= *((double *)v18 + 1))
          {
            *v20 = *v16;
            *((_QWORD *)v18 + 14) = 0;
            *((_QWORD *)v18 + 15) = 0;
            *((_QWORD *)v18 + 13) = 0;
            *(_OWORD *)((char *)v18 + 104) = *(_OWORD *)((char *)v7 + 104);
            *((_QWORD *)v18 + 15) = *((_QWORD *)v7 + 15);
            *((_QWORD *)v7 + 13) = 0;
            *((_QWORD *)v7 + 14) = 0;
            *((_QWORD *)v7 + 15) = 0;
            *((_QWORD *)v18 + 16) = 0;
            *((_QWORD *)v18 + 17) = 0;
            *((_QWORD *)v18 + 18) = 0;
            v18[8] = v7[8];
            *((_QWORD *)v18 + 18) = *((_QWORD *)v7 + 18);
            *((_QWORD *)v7 + 16) = 0;
            *((_QWORD *)v7 + 17) = 0;
            *((_QWORD *)v7 + 18) = 0;
            *((_QWORD *)v18 + 19) = 0;
            *((_QWORD *)v18 + 20) = 0;
            *((_QWORD *)v18 + 21) = 0;
            v26 = *(_OWORD *)((char *)v7 + 152);
            v24 = (_QWORD *)v7 + 19;
            result.n128_u64[0] = v26;
            *(_OWORD *)((char *)v18 + 152) = v26;
            *((_QWORD *)v18 + 21) = v24[2];
          }
          else
          {
            v21 = v18[1];
            *v20 = *v18;
            *(_OWORD *)((char *)v18 + 104) = v21;
            *((_QWORD *)v18 + 15) = *((_QWORD *)v18 + 4);
            *((_QWORD *)v18 + 2) = 0;
            *((_QWORD *)v18 + 3) = 0;
            v18[8] = *(_OWORD *)((char *)v18 + 40);
            *((_QWORD *)v18 + 18) = *((_QWORD *)v18 + 7);
            *((_QWORD *)v18 + 4) = 0;
            *((_QWORD *)v18 + 5) = 0;
            *((_QWORD *)v18 + 6) = 0;
            *((_QWORD *)v18 + 7) = 0;
            *(_OWORD *)((char *)v18 + 152) = v18[4];
            *((_QWORD *)v18 + 21) = *((_QWORD *)v18 + 10);
            *((_QWORD *)v18 + 8) = 0;
            *((_QWORD *)v18 + 9) = 0;
            v22 = a4;
            *((_QWORD *)v18 + 10) = 0;
            if (v18 != (_OWORD *)a4)
            {
              v23 = v17;
              while (1)
              {
                v22 = a4 + v23;
                if (*((double *)v7 + 12) >= *(double *)(a4 + v23 - 80))
                  break;
                *(_OWORD *)v22 = *(_OWORD *)(v22 - 88);
                std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v22 + 16));
                *(_OWORD *)(v22 + 16) = *(_OWORD *)(v22 - 72);
                *(_QWORD *)(v22 + 32) = *(_QWORD *)(v22 - 56);
                *(_QWORD *)(v22 - 64) = 0;
                *(_QWORD *)(v22 - 56) = 0;
                *(_QWORD *)(v22 - 72) = 0;
                std::vector<int>::__move_assign(v22 + 40, (__n128 *)(v22 - 48));
                std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v22 + 64));
                *(_OWORD *)(v22 + 64) = *(_OWORD *)(v22 - 24);
                *(_QWORD *)(v22 + 80) = *(_QWORD *)(v22 - 8);
                *(_QWORD *)(v22 - 16) = 0;
                *(_QWORD *)(v22 - 8) = 0;
                *(_QWORD *)(v22 - 24) = 0;
                v23 -= 88;
                if (!v23)
                {
                  v22 = a4;
                  break;
                }
              }
            }
            *(_OWORD *)v22 = *v19;
            std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v22 + 16));
            *(_OWORD *)(v22 + 16) = *(_OWORD *)((char *)v7 + 104);
            *(_QWORD *)(v22 + 32) = *((_QWORD *)v7 + 15);
            *((_QWORD *)v7 + 13) = 0;
            *((_QWORD *)v7 + 14) = 0;
            *((_QWORD *)v7 + 15) = 0;
            std::vector<int>::__move_assign(v22 + 40, (__n128 *)v7 + 8);
            std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v22 + 64));
            v25 = *(_OWORD *)((char *)v7 + 152);
            v24 = (_QWORD *)v7 + 19;
            result.n128_u64[0] = v25;
            *(_OWORD *)(v22 + 64) = v25;
            *(_QWORD *)(v22 + 80) = v24[2];
          }
          v16 = (_OWORD *)((char *)v19 + 88);
          *v24 = 0;
          v24[1] = 0;
          v24[2] = 0;
          v17 += 88;
          v18 = v20;
          v7 = v19;
        }
        while ((char *)v19 + 88 != a2);
      }
    }
  }
  return result;
}

void std::__inplace_merge<std::_ClassicAlgPolicy,quasar::corrective_reranking::VoiceEditingWFST::search(std::vector<std::string> const&,std::optional<int>,BOOL,std::optional<int>)::$_3 &,std::__wrap_iter<quasar::corrective_reranking::VoiceEditingWFST::Path *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::vector<std::wstring> *v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  double v23;
  std::vector<std::wstring> *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::vector<std::wstring> *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  std::vector<std::wstring> *v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  double v52;
  _OWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  std::vector<std::wstring> *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _QWORD v68[4];

  if (!a5)
    return;
  v8 = a5;
  while (v8 > a7 && a4 > a7)
  {
    if (!a4)
      return;
    v12 = 0;
    v13 = -a4;
    while (1)
    {
      v14 = a1 + v12;
      if (*(double *)(a2 + 8) < *(double *)(a1 + v12 + 8))
        break;
      v12 += 88;
      if (__CFADD__(v13++, 1))
        return;
    }
    v16 = -v13;
    v65 = a3;
    v66 = a6;
    if (-v13 >= v8)
    {
      if (v13 == -1)
      {
        std::swap[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path>((std::vector<std::wstring> *)(a1 + v12), a2);
        return;
      }
      if (v13 > 0)
        v16 = 1 - v13;
      v26 = v16 >> 1;
      v25 = a2;
      if (a2 != a3)
      {
        v27 = 0x2E8BA2E8BA2E8BA3 * ((a3 - a2) >> 3);
        v25 = a2;
        do
        {
          v28 = v27 >> 1;
          v29 = v25 + 88 * (v27 >> 1);
          v30 = *(double *)(v29 + 8);
          v31 = v29 + 88;
          v27 += ~(v27 >> 1);
          if (v30 < *(double *)(a1 + 88 * v26 + v12 + 8))
            v25 = v31;
          else
            v27 = v28;
        }
        while (v27);
      }
      v19 = (std::vector<std::wstring> *)(a1 + 88 * v26 + v12);
      v18 = 0x2E8BA2E8BA2E8BA3 * ((v25 - a2) >> 3);
    }
    else
    {
      if (v8 >= 0)
        v17 = v8;
      else
        v17 = v8 + 1;
      v18 = v17 >> 1;
      v19 = (std::vector<std::wstring> *)a2;
      if (a2 - a1 != v12)
      {
        v20 = 0x2E8BA2E8BA2E8BA3 * ((a2 - a1 - v12) >> 3);
        v19 = (std::vector<std::wstring> *)(a1 + v12);
        do
        {
          v21 = v20 >> 1;
          v22 = (char *)v19 + 88 * (v20 >> 1);
          v23 = *((double *)v22 + 1);
          v24 = (std::vector<std::wstring> *)(v22 + 88);
          v20 += ~(v20 >> 1);
          if (*(double *)(a2 + 88 * v18 + 8) < v23)
            v20 = v21;
          else
            v19 = v24;
        }
        while (v20);
      }
      v25 = a2 + 88 * v18;
      v26 = 0x2E8BA2E8BA2E8BA3 * (((uint64_t)v19 - a1 - v12) >> 3);
    }
    if (v19 == (std::vector<std::wstring> *)a2)
    {
      v36 = v25;
    }
    else if (v25 == a2)
    {
      v36 = (uint64_t)v19;
    }
    else
    {
      v32 = a7;
      v33 = v26;
      v34 = v18;
      v35 = std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<quasar::corrective_reranking::VoiceEditingWFST::Path *>>(v19, a2, v25);
      v18 = v34;
      v26 = v33;
      a7 = v32;
      v36 = (uint64_t)v35;
    }
    a4 = -(v26 + v13);
    v37 = v8 - v18;
    if (v26 + v18 >= v8 - (v26 + v18) - v13)
    {
      v40 = v25;
      a6 = v66;
      v41 = v26;
      v42 = v18;
      v39 = a7;
      std::__inplace_merge<std::_ClassicAlgPolicy,quasar::corrective_reranking::VoiceEditingWFST::search(std::vector<std::string> const&,std::optional<int>,BOOL,std::optional<int>)::$_3 &,std::__wrap_iter<quasar::corrective_reranking::VoiceEditingWFST::Path *>>(v36, v40, v65, -(v26 + v13), v37, v66);
      a2 = (uint64_t)v19;
      v37 = v42;
      a4 = v41;
      a3 = v36;
    }
    else
    {
      v38 = a1 + v12;
      v39 = a7;
      std::__inplace_merge<std::_ClassicAlgPolicy,quasar::corrective_reranking::VoiceEditingWFST::search(std::vector<std::string> const&,std::optional<int>,BOOL,std::optional<int>)::$_3 &,std::__wrap_iter<quasar::corrective_reranking::VoiceEditingWFST::Path *>>(v38, v19, v36, v26, v18, v66);
      v14 = v36;
      a2 = v25;
      a6 = v66;
      a3 = v65;
    }
    v8 = v37;
    a1 = v14;
    a7 = v39;
    if (!v37)
      return;
  }
  if (a4 <= v8)
  {
    if (a1 != a2)
    {
      v56 = 0;
      v57 = 0;
      do
      {
        v58 = (_QWORD *)(a1 + v56);
        v59 = a6 + v56;
        *(_OWORD *)v59 = *(_OWORD *)(a1 + v56);
        *(_QWORD *)(v59 + 24) = 0;
        *(_QWORD *)(v59 + 32) = 0;
        *(_QWORD *)(v59 + 16) = 0;
        *(_OWORD *)(v59 + 16) = *(_OWORD *)(a1 + v56 + 16);
        *(_QWORD *)(v59 + 32) = *(_QWORD *)(a1 + v56 + 32);
        v58[2] = 0;
        v58[3] = 0;
        v58[4] = 0;
        *(_QWORD *)(v59 + 40) = 0;
        *(_QWORD *)(v59 + 48) = 0;
        *(_QWORD *)(v59 + 56) = 0;
        *(_OWORD *)(v59 + 40) = *(_OWORD *)(a1 + v56 + 40);
        *(_QWORD *)(v59 + 56) = *(_QWORD *)(a1 + v56 + 56);
        v58[5] = 0;
        v58[6] = 0;
        v58[7] = 0;
        *(_QWORD *)(v59 + 64) = 0;
        *(_QWORD *)(v59 + 72) = 0;
        *(_QWORD *)(v59 + 80) = 0;
        *(_OWORD *)(v59 + 64) = *(_OWORD *)(a1 + v56 + 64);
        *(_QWORD *)(v59 + 80) = *(_QWORD *)(a1 + v56 + 80);
        v58[8] = 0;
        v58[9] = 0;
        v58[10] = 0;
        ++v57;
        v56 += 88;
      }
      while (v58 + 11 != (_QWORD *)a2);
      v67 = v57;
      if (v56)
      {
        v60 = a6 + v56;
        v61 = a6;
        while (a2 != a3)
        {
          v62 = (std::vector<std::wstring> *)(a1 + 16);
          if (*(double *)(a2 + 8) >= *(double *)(v61 + 8))
          {
            *(_OWORD *)a1 = *(_OWORD *)v61;
            v64 = a2;
            std::vector<std::string>::__vdeallocate(v62);
            *(_OWORD *)(a1 + 16) = *(_OWORD *)(v61 + 16);
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(v61 + 32);
            *(_QWORD *)(v61 + 16) = 0;
            *(_QWORD *)(v61 + 24) = 0;
            *(_QWORD *)(v61 + 32) = 0;
            std::vector<int>::__move_assign(a1 + 40, (__n128 *)(v61 + 40));
            std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a1 + 64));
            a2 = v64;
            *(_OWORD *)(a1 + 64) = *(_OWORD *)(v61 + 64);
            *(_QWORD *)(a1 + 80) = *(_QWORD *)(v61 + 80);
            *(_QWORD *)(v61 + 64) = 0;
            *(_QWORD *)(v61 + 72) = 0;
            *(_QWORD *)(v61 + 80) = 0;
            v61 += 88;
          }
          else
          {
            *(_OWORD *)a1 = *(_OWORD *)a2;
            v63 = a2;
            std::vector<std::string>::__vdeallocate(v62);
            *(_OWORD *)(a1 + 16) = *(_OWORD *)(v63 + 16);
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(v63 + 32);
            *(_QWORD *)(v63 + 16) = 0;
            *(_QWORD *)(v63 + 24) = 0;
            *(_QWORD *)(v63 + 32) = 0;
            std::vector<int>::__move_assign(a1 + 40, (__n128 *)(v63 + 40));
            std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a1 + 64));
            *(_OWORD *)(a1 + 64) = *(_OWORD *)(v63 + 64);
            *(_QWORD *)(a1 + 80) = *(_QWORD *)(v63 + 80);
            *(_QWORD *)(v63 + 64) = 0;
            *(_QWORD *)(v63 + 72) = 0;
            *(_QWORD *)(v63 + 80) = 0;
            a2 = v63 + 88;
          }
          a1 += 88;
          if (v60 == v61)
            goto LABEL_77;
        }
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path *,quasar::corrective_reranking::VoiceEditingWFST::Path *,quasar::corrective_reranking::VoiceEditingWFST::Path *>((uint64_t)v68, v61, v60, a1);
      }
      goto LABEL_77;
    }
  }
  else if (a3 != a2)
  {
    v43 = 0;
    v44 = 0;
    do
    {
      v45 = (_QWORD *)(a2 + v43);
      v46 = a6 + v43;
      *(_OWORD *)v46 = *(_OWORD *)(a2 + v43);
      *(_QWORD *)(v46 + 24) = 0;
      *(_QWORD *)(v46 + 32) = 0;
      *(_QWORD *)(v46 + 16) = 0;
      *(_OWORD *)(v46 + 16) = *(_OWORD *)(a2 + v43 + 16);
      *(_QWORD *)(v46 + 32) = *(_QWORD *)(a2 + v43 + 32);
      v45[2] = 0;
      v45[3] = 0;
      v45[4] = 0;
      *(_QWORD *)(v46 + 40) = 0;
      *(_QWORD *)(v46 + 48) = 0;
      *(_QWORD *)(v46 + 56) = 0;
      *(_OWORD *)(v46 + 40) = *(_OWORD *)(a2 + v43 + 40);
      *(_QWORD *)(v46 + 56) = *(_QWORD *)(a2 + v43 + 56);
      v45[5] = 0;
      v45[6] = 0;
      v45[7] = 0;
      *(_QWORD *)(v46 + 64) = 0;
      *(_QWORD *)(v46 + 72) = 0;
      *(_QWORD *)(v46 + 80) = 0;
      *(_OWORD *)(v46 + 64) = *(_OWORD *)(a2 + v43 + 64);
      *(_QWORD *)(v46 + 80) = *(_QWORD *)(a2 + v43 + 80);
      v45[8] = 0;
      v45[9] = 0;
      v45[10] = 0;
      ++v44;
      v43 += 88;
    }
    while (v45 + 11 != (_QWORD *)a3);
    v67 = v44;
    if (v43)
    {
      v47 = a6 + v43;
      v48 = (std::vector<std::wstring> *)(a3 - 24);
      v49 = a3;
      v50 = a6 + v43;
      while (a2 != a1)
      {
        v51 = *(double *)(v50 - 80);
        v52 = *(double *)(a2 - 80);
        if (v51 < v52)
          v53 = (_OWORD *)(a2 - 88);
        else
          v53 = (_OWORD *)(v50 - 88);
        if (v51 < v52)
          v54 = a2;
        else
          v54 = v50;
        if (v51 < v52)
          v55 = a2 - 88;
        else
          v55 = a2;
        if (v51 >= v52)
          v50 -= 88;
        *(_OWORD *)&v48[-3].__end_ = *v53;
        std::vector<std::string>::__vdeallocate(v48 - 2);
        *(_OWORD *)&v48[-2].__begin_ = *(_OWORD *)(v54 - 72);
        v48[-2].__end_cap_.__value_ = *(std::wstring **)(v54 - 56);
        *(_QWORD *)(v54 - 72) = 0;
        *(_QWORD *)(v54 - 64) = 0;
        *(_QWORD *)(v54 - 56) = 0;
        std::vector<int>::__move_assign((uint64_t)&v48[-1], (__n128 *)(v54 - 48));
        std::vector<std::string>::__vdeallocate(v48);
        a2 = v55;
        *(_OWORD *)&v48->__begin_ = *(_OWORD *)(v54 - 24);
        v48->__end_cap_.__value_ = *(std::wstring **)(v54 - 8);
        *(_QWORD *)(v54 - 24) = 0;
        *(_QWORD *)(v54 - 16) = 0;
        *(_QWORD *)(v54 - 8) = 0;
        v49 -= 88;
        v48 = (std::vector<std::wstring> *)((char *)v48 - 88);
        if (v50 == a6)
          goto LABEL_77;
      }
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Path *>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Path *>,std::reverse_iterator<std::__wrap_iter<quasar::corrective_reranking::VoiceEditingWFST::Path *>>>(v47, v50, a6, a3, v49, v68);
    }
    goto LABEL_77;
  }
  v67 = 0;
LABEL_77:
  if (a6)
    std::__destruct_n::__process[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path>(&v67, a6);
}

void sub_1AD9ABEA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  uint64_t v11;

  if (v11)
    std::__destruct_n::__process[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path>(&a11, v11);
  _Unwind_Resume(exception_object);
}

void std::swap[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path>(std::vector<std::wstring> *this, uint64_t a2)
{
  std::__compressed_pair<std::wstring *> *p_end_cap;
  __n128 *v5;
  std::__compressed_pair<std::wstring *> *v6;
  std::vector<std::wstring>::pointer begin;
  std::vector<std::wstring>::pointer v8;
  std::wstring *v9;
  std::vector<std::wstring> *v10;
  std::vector<std::wstring>::pointer v11;
  void *v12;
  __int128 v13;
  std::vector<std::wstring>::pointer end;
  std::vector<std::wstring>::pointer v15;
  std::vector<std::wstring>::pointer v16;
  std::vector<std::wstring>::pointer v17;
  std::wstring *value;
  std::wstring *v19;
  __int128 v20;
  void *v21[3];
  void *__p;
  void *v23;
  std::vector<std::wstring>::pointer v24;
  std::wstring *v25;
  std::vector<std::wstring>::pointer v26;
  std::vector<std::wstring>::pointer v27;
  void **v28[2];

  v20 = *(_OWORD *)&this->__begin_;
  end = this[1].__end_;
  p_end_cap = &this->__end_cap_;
  v13 = *(_OWORD *)&this->__end_cap_.__value_;
  v5 = (__n128 *)(a2 + 40);
  this[1].__begin_ = 0;
  this[1].__end_ = 0;
  this->__end_cap_.__value_ = 0;
  v6 = &this[1].__end_cap_;
  begin = this[2].__begin_;
  v8 = this[2].__end_;
  value = this[1].__end_cap_.__value_;
  __p = value;
  v23 = begin;
  v16 = begin;
  this[1].__end_cap_.__value_ = 0;
  v10 = (std::vector<std::wstring> *)((char *)this + 64);
  v9 = this[2].__end_cap_.__value_;
  this[2].__begin_ = 0;
  this[2].__end_ = 0;
  v24 = v8;
  v25 = v9;
  v19 = v9;
  v11 = this[3].__end_;
  v17 = this[3].__begin_;
  v26 = v17;
  v27 = v11;
  v15 = v11;
  this[2].__end_cap_.__value_ = 0;
  this[3].__begin_ = 0;
  this[3].__end_ = 0;
  *(_OWORD *)&this->__begin_ = *(_OWORD *)a2;
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)&this->__end_cap_);
  *(_OWORD *)&p_end_cap->__value_ = *(_OWORD *)(a2 + 16);
  this[1].__end_ = *(std::vector<std::wstring>::pointer *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  std::vector<int>::__move_assign((uint64_t)v6, v5);
  std::vector<std::string>::__vdeallocate(v10);
  *(_OWORD *)&v10->__begin_ = *(_OWORD *)(a2 + 64);
  this[3].__end_ = *(std::vector<std::wstring>::pointer *)(a2 + 80);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_OWORD *)a2 = v20;
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a2 + 16));
  *(_OWORD *)(a2 + 16) = v13;
  *(_QWORD *)(a2 + 32) = end;
  memset(v21, 0, sizeof(v21));
  v12 = *(void **)(a2 + 40);
  if (v12)
  {
    *(_QWORD *)(a2 + 48) = v12;
    operator delete(v12);
  }
  *(_QWORD *)(a2 + 40) = value;
  *(_QWORD *)(a2 + 48) = v16;
  *(_QWORD *)(a2 + 56) = v8;
  v23 = 0;
  v24 = 0;
  __p = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a2 + 64));
  *(_QWORD *)(a2 + 64) = v19;
  *(_QWORD *)(a2 + 72) = v17;
  *(_QWORD *)(a2 + 80) = v15;
  v26 = 0;
  v27 = 0;
  v25 = 0;
  v28[0] = (void **)&v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v28);
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  v28[0] = v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v28);
}

void std::__destruct_n::__process[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path>(unint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  void **v4;
  void *v5;
  void **v6;

  if (*a1)
  {
    v3 = 0;
    v4 = (void **)(a2 + 64);
    do
    {
      v6 = v4;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
      v5 = *(v4 - 3);
      if (v5)
      {
        *(v4 - 2) = v5;
        operator delete(v5);
      }
      v6 = v4 - 6;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
      ++v3;
      v4 += 11;
    }
    while (v3 < *a1);
  }
}

void std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Path *>,std::reverse_iterator<quasar::corrective_reranking::VoiceEditingWFST::Path *>,std::reverse_iterator<std::__wrap_iter<quasar::corrective_reranking::VoiceEditingWFST::Path *>>>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, _QWORD *a6@<X8>)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = a2;
  if (a2 != a3)
  {
    v12 = 0;
    do
    {
      v13 = v8 + v12;
      v14 = a5 + v12;
      *(_OWORD *)(a5 + v12 - 88) = *(_OWORD *)(v8 + v12 - 88);
      std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a5 + v12 - 72));
      *(_OWORD *)(v14 - 72) = *(_OWORD *)(v8 + v12 - 72);
      *(_QWORD *)(v14 - 56) = *(_QWORD *)(v8 + v12 - 56);
      *(_QWORD *)(v13 - 72) = 0;
      *(_QWORD *)(v13 - 64) = 0;
      *(_QWORD *)(v13 - 56) = 0;
      std::vector<int>::__move_assign(a5 + v12 - 48, (__n128 *)(v8 + v12 - 48));
      std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a5 + v12 - 24));
      *(_OWORD *)(v14 - 24) = *(_OWORD *)(v8 + v12 - 24);
      *(_QWORD *)(v14 - 8) = *(_QWORD *)(v8 + v12 - 8);
      *(_QWORD *)(v13 - 24) = 0;
      *(_QWORD *)(v13 - 16) = 0;
      *(_QWORD *)(v13 - 8) = 0;
      v12 -= 88;
    }
    while (v8 + v12 != a3);
    a5 += v12;
    v8 = a3;
  }
  *a6 = a1;
  a6[1] = v8;
  a6[2] = a4;
  a6[3] = a5;
}

std::vector<std::wstring> *std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<quasar::corrective_reranking::VoiceEditingWFST::Path *>>(std::vector<std::wstring> *a1, uint64_t a2, uint64_t a3)
{
  std::vector<std::wstring> *v4;
  std::vector<std::wstring> *v6;
  uint64_t i;
  std::vector<std::wstring> *v8;
  uint64_t v9;

  v4 = (std::vector<std::wstring> *)a2;
  std::swap[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path>(a1, a2);
  v6 = (std::vector<std::wstring> *)((char *)a1 + 88);
  for (i = (uint64_t)&v4[3].__end_cap_; i != a3; i += 88)
  {
    if (v6 == v4)
      v4 = (std::vector<std::wstring> *)i;
    std::swap[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path>(v6, i);
    v6 = (std::vector<std::wstring> *)((char *)v6 + 88);
  }
  if (v6 != v4)
  {
    v8 = v6;
    v9 = (uint64_t)v4;
    do
    {
      while (1)
      {
        std::swap[abi:ne180100]<quasar::corrective_reranking::VoiceEditingWFST::Path>(v8, v9);
        v8 = (std::vector<std::wstring> *)((char *)v8 + 88);
        v9 += 88;
        if (v9 == a3)
          break;
        if (v8 == v4)
          v4 = (std::vector<std::wstring> *)v9;
      }
      v9 = (uint64_t)v4;
    }
    while (v8 != v4);
  }
  return v6;
}

uint64_t parseProb(const char *a1, double *a2)
{
  uint64_t result;
  uint64_t v4;

  v4 = 0;
  result = sscanf(a1, "%lf", &v4);
  if ((_DWORD)result)
  {
    *(_QWORD *)a2 = v4;
    return 1;
  }
  return result;
}

BOOL parseLogP(const char *a1, double *a2)
{
  int v2;
  BOOL v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  int v13;
  double v15;
  const char *v16;
  const char *v17;
  unint64_t v18;
  int v19;
  double v20;

  v2 = *(unsigned __int8 *)a1;
  if (!*a1)
    return 0;
  v5 = v2 == 45 || v2 == 43;
  v6 = v5;
  if (v5)
    v7 = a1 + 1;
  else
    v7 = a1;
  v8 = *(unsigned __int8 *)v7;
  if (*v7 < 0)
    goto LABEL_15;
  v9 = 0;
  v10 = 0;
  v11 = &a1[v6 + 1];
  v12 = *(unsigned __int8 *)v7;
  while ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v12 + 60) & 0x400) != 0)
  {
    v10 = v12 + 10 * v10 - 48;
    v13 = v11[v9];
    v12 = v11[v9++];
    if (v13 < 0)
      goto LABEL_15;
  }
  if (v12 == 46)
  {
    v16 = &a1[v6];
    if (v16[v9 + 1] < 0)
      goto LABEL_15;
    v12 = v16[v9 + 1];
    v17 = v16 + 2;
    v18 = 1;
    while ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v12 + 60) & 0x400) != 0)
    {
      v10 = v12 + 10 * v10 - 48;
      v18 *= 10;
      v19 = v17[v9];
      v12 = v17[v9++];
      if (v19 < 0)
        goto LABEL_15;
    }
  }
  else
  {
    v18 = 1;
  }
  if (v12 || v9 > 8)
  {
LABEL_15:
    if (v8 != 105 && v8 != 73 && (v8 != 49 || v7[1] != 46 || v7[2] != 35)
      || strncmp(v7, "Inf", 3uLL) && strncmp(v7, "inf", 3uLL) && strncmp(v7, "1.#INF", 6uLL))
    {
      return sscanf(a1, "%lf", a2) == 1;
    }
    v15 = INFINITY;
    if (v2 == 45)
      v15 = -INFINITY;
    goto LABEL_40;
  }
  v20 = (double)(unint64_t)v10;
  if (v2 == 45)
    v20 = -(double)(unint64_t)v10;
  v15 = v20 / (double)v18;
LABEL_40:
  *a2 = v15;
  return 1;
}

double PQCodebook::getProb(PQCodebook *this, unsigned int a2)
{
  if (*(_DWORD *)this <= a2)
    return INFINITY;
  else
    return *(double *)Array<double>::operator[]((int *)this + 2, a2);
}

_QWORD *quasar::ProcessingGraph::ProcessingGraph(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *a1 = off_1E5D35B88;
  a1[2] = 0;
  a1[1] = a1 + 2;
  a1[3] = 0;
  v3 = a2[1];
  a1[4] = *a2;
  a1[5] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  quasar::ProcessingGraph::registerBlockType<quasar::MergerBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::NullBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::PDecTranslatorBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::PDecPhraseBookBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::AlternativesProcessorBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::AlignmentProcessorBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::DoNotTranslateBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::AmbiguityAnnotatorBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::SimpleTokenizerBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::PhraseBookBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::InputHammerBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::RomanizerBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::SentencePieceBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::QualityEstimatorBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::PDecForceAlignBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::FilterBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::SelectBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::CaseMapBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::GenderVerifierBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::PlaceholderBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::DumpBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::StructuredPredictionBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::LinkAlternativesBlock>((uint64_t)a1);
  quasar::ProcessingGraph::registerBlockType<quasar::TokenizerBlock>((uint64_t)a1);
  return a1;
}

void sub_1AD9AC624(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  char **v3;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v2);
  std::__tree<std::string>::destroy(v1, *v3);
  _Unwind_Resume(a1);
}

void quasar::ProcessingGraph::registerBlockType<quasar::MergerBlock>(uint64_t a1)
{
  uint64_t **v1;
  void *__p[2];
  char v3;
  void **v4;

  v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "MergerBlock");
  v4 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::MergerBlock>;
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_1AD9AC6B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::NullBlock>(uint64_t a1)
{
  uint64_t **v1;
  void *__p[2];
  char v3;
  void **v4;

  v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "NullBlock");
  v4 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::NullBlock>;
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_1AD9AC748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::PDecTranslatorBlock>(uint64_t a1)
{
  uint64_t **v1;
  void *__p[2];
  char v3;
  void **v4;

  v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "PDecTranslatorBlock");
  v4 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::PDecTranslatorBlock>;
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_1AD9AC7D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::PDecPhraseBookBlock>(uint64_t a1)
{
  uint64_t **v1;
  void *__p[2];
  char v3;
  void **v4;

  v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "PDecPhraseBookBlock");
  v4 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::PDecPhraseBookBlock>;
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_1AD9AC868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::AlternativesProcessorBlock>(uint64_t a1)
{
  uint64_t **v1;
  void *__p[2];
  char v3;
  void **v4;

  v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "AlternativesProcessorBlock");
  v4 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::AlternativesProcessorBlock>;
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_1AD9AC8F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::AlignmentProcessorBlock>(uint64_t a1)
{
  uint64_t **v1;
  void *__p[2];
  char v3;
  void **v4;

  v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "AlignmentProcessorBlock");
  v4 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::AlignmentProcessorBlock>;
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_1AD9AC988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::DoNotTranslateBlock>(uint64_t a1)
{
  uint64_t **v1;
  void *__p[2];
  char v3;
  void **v4;

  v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "DoNotTranslateBlock");
  v4 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::DoNotTranslateBlock>;
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_1AD9ACA18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::AmbiguityAnnotatorBlock>(uint64_t a1)
{
  uint64_t **v1;
  void *__p[2];
  char v3;
  void **v4;

  v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "AmbiguityAnnotatorBlock");
  v4 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::AmbiguityAnnotatorBlock>;
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_1AD9ACAA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::SimpleTokenizerBlock>(uint64_t a1)
{
  uint64_t **v1;
  void *__p[2];
  char v3;
  void **v4;

  v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "SimpleTokenizerBlock");
  v4 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::SimpleTokenizerBlock>;
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_1AD9ACB38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::PhraseBookBlock>(uint64_t a1)
{
  uint64_t **v1;
  void *__p[2];
  char v3;
  void **v4;

  v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "PhraseBookBlock");
  v4 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::PhraseBookBlock>;
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_1AD9ACBC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::InputHammerBlock>(uint64_t a1)
{
  uint64_t **v1;
  void *__p[2];
  char v3;
  void **v4;

  v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "InputHammerBlock");
  v4 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::InputHammerBlock>;
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_1AD9ACC58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::RomanizerBlock>(uint64_t a1)
{
  uint64_t **v1;
  void *__p[2];
  char v3;
  void **v4;

  v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "RomanizerBlock");
  v4 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::RomanizerBlock>;
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_1AD9ACCE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::SentencePieceBlock>(uint64_t a1)
{
  uint64_t **v1;
  void *__p[2];
  char v3;
  void **v4;

  v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "SentencePieceBlock");
  v4 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::SentencePieceBlock>;
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_1AD9ACD78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::QualityEstimatorBlock>(uint64_t a1)
{
  uint64_t **v1;
  void *__p[2];
  char v3;
  void **v4;

  v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "QualityEstimatorBlock");
  v4 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::QualityEstimatorBlock>;
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_1AD9ACE08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::PDecForceAlignBlock>(uint64_t a1)
{
  uint64_t **v1;
  void *__p[2];
  char v3;
  void **v4;

  v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "PDecForceAlignBlock");
  v4 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::PDecForceAlignBlock>;
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_1AD9ACE98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::FilterBlock>(uint64_t a1)
{
  uint64_t **v1;
  void *__p[2];
  char v3;
  void **v4;

  v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "FilterBlock");
  v4 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::FilterBlock>;
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_1AD9ACF28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::SelectBlock>(uint64_t a1)
{
  uint64_t **v1;
  void *__p[2];
  char v3;
  void **v4;

  v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "SelectBlock");
  v4 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::SelectBlock>;
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_1AD9ACFB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::CaseMapBlock>(uint64_t a1)
{
  uint64_t **v1;
  void *__p[2];
  char v3;
  void **v4;

  v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "CaseMapBlock");
  v4 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::CaseMapBlock>;
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_1AD9AD048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::GenderVerifierBlock>(uint64_t a1)
{
  uint64_t **v1;
  void *__p[2];
  char v3;
  void **v4;

  v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "GenderVerifierBlock");
  v4 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::GenderVerifierBlock>;
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_1AD9AD0D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::PlaceholderBlock>(uint64_t a1)
{
  uint64_t **v1;
  void *__p[2];
  char v3;
  void **v4;

  v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "PlaceholderBlock");
  v4 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::PlaceholderBlock>;
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_1AD9AD168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::DumpBlock>(uint64_t a1)
{
  uint64_t **v1;
  void *__p[2];
  char v3;
  void **v4;

  v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "DumpBlock");
  v4 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::DumpBlock>;
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_1AD9AD1F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::StructuredPredictionBlock>(uint64_t a1)
{
  uint64_t **v1;
  void *__p[2];
  char v3;
  void **v4;

  v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "StructuredPredictionBlock");
  v4 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::StructuredPredictionBlock>;
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_1AD9AD288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::LinkAlternativesBlock>(uint64_t a1)
{
  uint64_t **v1;
  void *__p[2];
  char v3;
  void **v4;

  v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "LinkAlternativesBlock");
  v4 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::LinkAlternativesBlock>;
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_1AD9AD318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::ProcessingGraph::registerBlockType<quasar::TokenizerBlock>(uint64_t a1)
{
  uint64_t **v1;
  void *__p[2];
  char v3;
  void **v4;

  v1 = (uint64_t **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "TokenizerBlock");
  v4 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4)+ 7) = quasar::ProcessingGraph::creator<quasar::TokenizerBlock>;
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_1AD9AD3A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

quasar::ProcessingGraph *quasar::ProcessingGraph::ProcessingGraph(quasar::ProcessingGraph *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD v6[2];

  v2 = (std::__shared_weak_count *)operator new(0x38uLL);
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42C28;
  *(_OWORD *)&v2[1].__shared_weak_owners_ = 0u;
  v2[1].std::__shared_count = 0u;
  v6[0] = v2 + 1;
  v6[1] = v2;
  quasar::ProcessingGraph::ProcessingGraph(this, v6);
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return this;
}

void sub_1AD9AD468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void quasar::ProcessingGraph::~ProcessingGraph(char **this)
{
  *this = (char *)off_1E5D35B88;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 4));
  std::__tree<std::string>::destroy((uint64_t)(this + 1), this[2]);
}

void quasar::ProcessingGraph::createBlock(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  _OWORD v22[17];

  v6 = (uint64_t **)(a1 + 8);
  if (!std::__tree<std::string>::__count_unique<std::string>(a1 + 8, a2))
  {
    memset(v22, 0, sizeof(v22));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"ProcessingGraph: Unknown blocktype '", 36);
    v16 = *((char *)a2 + 23);
    if (v16 >= 0)
      v17 = (uint64_t)a2;
    else
      v17 = (uint64_t)*a2;
    if (v16 >= 0)
      v18 = *((unsigned __int8 *)a2 + 23);
    else
      v18 = (uint64_t)a2[1];
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v19, "', did you forget to call 'registerBlockType'?");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v22);
  }
  *(_QWORD *)&v22[0] = a2;
  v7 = std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (__int128 **)v22);
  ((void (*)(void))v7[7])();
  v8 = *a3;
  v9 = *(std::__shared_weak_count **)(a1 + 40);
  v20 = *(_QWORD *)(a1 + 32);
  v21 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 56))(v8, &v20);
  v12 = v21;
  if (v21)
  {
    v13 = (unint64_t *)&v21->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1AD9AD628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v11;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  v11 = *v9;
  *v9 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  _Unwind_Resume(a1);
}

void quasar::ProcessingGraph::run(_QWORD *a1, uint64_t *a2, __int128 *a3)
{
  _QWORD v4[3];
  __int128 v5;
  uint64_t v6;
  char v7;
  void **v8;

  LOBYTE(v5) = 0;
  v7 = 0;
  if (*((_BYTE *)a3 + 24))
  {
    v5 = *a3;
    v6 = *((_QWORD *)a3 + 2);
    *((_QWORD *)a3 + 1) = 0;
    *((_QWORD *)a3 + 2) = 0;
    *(_QWORD *)a3 = 0;
    v7 = 1;
  }
  memset(v4, 0, sizeof(v4));
  std::vector<quasar::TranslationPhraseInternal>::__init_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(v4, *a2, a2[1], 0x8F5C28F5C28F5C29 * ((a2[1] - *a2) >> 3));
  quasar::ProcessingGraph::contextWrapper<&quasar::ProcessingGraph::runInternal,quasar::ProcessingBlock::ValueType>(a1, (uint64_t)&v5, (uint64_t)v4);
  v8 = (void **)v4;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v8);
  if (v7)
  {
    v8 = (void **)&v5;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  }
}

void sub_1AD9AD724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v17 - 40) = v16;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 40));
  if (a16)
  {
    *(_QWORD *)(v17 - 40) = &a13;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 40));
  }
  _Unwind_Resume(a1);
}

void quasar::ProcessingGraph::contextWrapper<&quasar::ProcessingGraph::runInternal,quasar::ProcessingBlock::ValueType>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  __int128 *v6;
  __int128 *v7;
  std::string *v8;
  unint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_size;
  unint64_t v15;
  std::string v16;
  std::string *v17;
  std::string *v18;
  std::string *v19;

  v17 = 0;
  v18 = 0;
  if (!*(_BYTE *)(a2 + 24) || (v6 = *(__int128 **)a2, v7 = *(__int128 **)(a2 + 8), v6 == v7))
  {
    v8 = 0;
  }
  else
  {
    memset(&v16, 0, sizeof(v16));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, v6, v7, 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v6) >> 3));
    v8 = (std::string *)operator new(0x30uLL);
    v8->__r_.__value_.__r.__words[2] = 0;
    v9 = &v8->__r_.__value_.__r.__words[2];
    v8->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D44F98;
    v8->__r_.__value_.__l.__size_ = 0;
    v8[1] = v16;
    memset(&v16, 0, sizeof(v16));
    v17 = v8 + 1;
    v18 = v8;
    v19 = &v16;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
    v10 = (_QWORD *)a1[4];
    do
      v11 = __ldxr(v9);
    while (__stxr(v11 + 1, v9));
    do
      v12 = __ldxr(v9);
    while (__stxr(v12 + 1, v9));
    v13 = (std::__shared_weak_count *)v10[1];
    *v10 = v8 + 1;
    v10[1] = v8;
    if (v13)
      std::__shared_weak_count::__release_weak(v13);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v8);
  }
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 32))(a1, a3);
  if (v8)
  {
    p_size = &v8->__r_.__value_.__l.__size_;
    do
      v15 = __ldaxr(p_size);
    while (__stlxr(v15 - 1, p_size));
    if (!v15)
    {
      (*(void (**)(std::string *))(v8->__r_.__value_.__r.__words[0] + 16))(v8);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v8);
    }
  }
}

void sub_1AD9AD8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void quasar::ProcessingGraph::run(_QWORD *a1, const void ***a2, __int128 *a3)
{
  uint64_t v4[3];
  __int128 v5;
  uint64_t v6;
  char v7;
  void **v8;

  LOBYTE(v5) = 0;
  v7 = 0;
  if (*((_BYTE *)a3 + 24))
  {
    v5 = *a3;
    v6 = *((_QWORD *)a3 + 2);
    *((_QWORD *)a3 + 1) = 0;
    *((_QWORD *)a3 + 2) = 0;
    *(_QWORD *)a3 = 0;
    v7 = 1;
  }
  std::map<std::string,quasar::ProcessingBlock::ValueType>::map[abi:ne180100](v4, a2);
  quasar::ProcessingGraph::contextWrapper<&quasar::ProcessingGraph::runInternal,std::map<std::string,quasar::ProcessingBlock::ValueType>>(a1, (uint64_t)&v5, (uint64_t)v4);
  std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::destroy((uint64_t)v4, (_QWORD *)v4[1]);
  if (v7)
  {
    v8 = (void **)&v5;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  }
}

void sub_1AD9AD984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;

  std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::destroy((uint64_t)&a10, a11);
  if (a16)
  {
    *(_QWORD *)(v16 - 24) = &a13;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v16 - 24));
  }
  _Unwind_Resume(a1);
}

void quasar::ProcessingGraph::contextWrapper<&quasar::ProcessingGraph::runInternal,std::map<std::string,quasar::ProcessingBlock::ValueType>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  __int128 *v6;
  __int128 *v7;
  std::string *v8;
  unint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_size;
  unint64_t v15;
  std::string v16;
  std::string *v17;
  std::string *v18;
  std::string *v19;

  v17 = 0;
  v18 = 0;
  if (!*(_BYTE *)(a2 + 24) || (v6 = *(__int128 **)a2, v7 = *(__int128 **)(a2 + 8), v6 == v7))
  {
    v8 = 0;
  }
  else
  {
    memset(&v16, 0, sizeof(v16));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, v6, v7, 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v6) >> 3));
    v8 = (std::string *)operator new(0x30uLL);
    v8->__r_.__value_.__r.__words[2] = 0;
    v9 = &v8->__r_.__value_.__r.__words[2];
    v8->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D44F98;
    v8->__r_.__value_.__l.__size_ = 0;
    v8[1] = v16;
    memset(&v16, 0, sizeof(v16));
    v17 = v8 + 1;
    v18 = v8;
    v19 = &v16;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
    v10 = (_QWORD *)a1[4];
    do
      v11 = __ldxr(v9);
    while (__stxr(v11 + 1, v9));
    do
      v12 = __ldxr(v9);
    while (__stxr(v12 + 1, v9));
    v13 = (std::__shared_weak_count *)v10[1];
    *v10 = v8 + 1;
    v10[1] = v8;
    if (v13)
      std::__shared_weak_count::__release_weak(v13);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v8);
  }
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, a3);
  if (v8)
  {
    p_size = &v8->__r_.__value_.__l.__size_;
    do
      v15 = __ldaxr(p_size);
    while (__stlxr(v15 - 1, p_size));
    if (!v15)
    {
      (*(void (**)(std::string *))(v8->__r_.__value_.__r.__words[0] + 16))(v8);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v8);
    }
  }
}

void sub_1AD9ADB1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void quasar::LinearProcessingGraph::runInternal(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v6;
  quasar::ProcessingBlock **v7;
  quasar::ProcessingBlock **v8;
  char *v9;
  quasar::ProcessingBlock *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  quasar::ProcessingSink *v13;
  quasar::ProcessingBlock *v14;
  uint64_t v15;
  quasar::ProcessingBlock *v16;
  _BOOL4 hasValue;
  uint64_t **Value;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  void *v25[2];
  char v26;
  void *v27[2];
  char v28;
  const void *v29;
  void *v30;
  char v31;
  void *__p;
  char v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  char *v36;
  std::__shared_weak_count *v37;

  v6 = (_QWORD *)operator new();
  v6[1] = 0;
  v6[2] = 0;
  *v6 = 0;
  std::vector<quasar::TranslationPhraseInternal>::__init_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(v6, *a2, a2[1], 0x8F5C28F5C28F5C29 * ((a2[1] - *a2) >> 3));
  v24 = a3;
  *a3 = (uint64_t)v6;
  v7 = *(quasar::ProcessingBlock ***)(a1 + 48);
  v8 = *(quasar::ProcessingBlock ***)(a1 + 56);
  if (v7 != v8)
  {
    do
    {
      v9 = (char *)operator new(0x70uLL);
      *((_QWORD *)v9 + 1) = 0;
      *((_QWORD *)v9 + 2) = 0;
      *((_QWORD *)v9 + 3) = &off_1E5D35448;
      v10 = (quasar::ProcessingBlock *)(v9 + 24);
      *(_QWORD *)v9 = &unk_1E5D42AA0;
      *(_OWORD *)(v9 + 56) = 0u;
      *(_OWORD *)(v9 + 72) = 0u;
      *(_OWORD *)(v9 + 40) = 0u;
      *((_QWORD *)v9 + 4) = v9 + 40;
      *((_QWORD *)v9 + 7) = 0;
      *((_QWORD *)v9 + 8) = 0;
      *((_QWORD *)v9 + 9) = 0;
      v9[80] = 1;
      *((_QWORD *)v9 + 13) = 0;
      *((_QWORD *)v9 + 12) = 0;
      *((_QWORD *)v9 + 11) = v9 + 96;
      v36 = v9 + 24;
      v37 = (std::__shared_weak_count *)v9;
      v11 = (std::__shared_weak_count *)operator new(0x70uLL);
      v11->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      v11->__shared_weak_owners_ = 0;
      v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42AA0;
      v11[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E5D35448;
      v13 = (quasar::ProcessingSink *)&v11[1];
      *(_OWORD *)&v11[2].__shared_owners_ = 0u;
      v11[3].std::__shared_count = 0u;
      *(_OWORD *)&v11[1].__shared_weak_owners_ = 0u;
      v11[1].__shared_owners_ = (uint64_t)&v11[1].__shared_weak_owners_;
      v11[2].__shared_owners_ = 0;
      v11[2].__shared_weak_owners_ = 0;
      v11[3].__vftable = 0;
      LOBYTE(v11[3].__shared_owners_) = 1;
      v11[4].__shared_owners_ = 0;
      v11[4].__vftable = 0;
      v11[3].__shared_weak_owners_ = (uint64_t)&v11[4];
      v34 = v11 + 1;
      v35 = v11;
      quasar::ProcessingBlock::connectOutput(*v7, v10);
      v14 = *v7;
      std::string::basic_string[abi:ne180100]<0>(v27, "in");
      std::string::basic_string[abi:ne180100]<0>(v25, "final");
      quasar::ProcessingConnection::ProcessingConnection(&v29, &v11[1], v27, v25);
      quasar::ProcessingBlock::connectOutput((uint64_t *)v14, &v29);
      if (v33 < 0)
        operator delete(__p);
      if (v31 < 0)
        operator delete(v30);
      if (v26 < 0)
        operator delete(v25[0]);
      if (v28 < 0)
        operator delete(v27[0]);
      v15 = *v24;
      quasar::ProcessingBlock::receive(*v7, *v24);
      quasar::ProcessingBlock::disconnectOutput(*v7, v10);
      v16 = *v7;
      std::string::basic_string[abi:ne180100]<0>(v27, "in");
      std::string::basic_string[abi:ne180100]<0>(v25, "final");
      quasar::ProcessingConnection::ProcessingConnection(&v29, v13, v27, v25);
      quasar::ProcessingBlock::disconnectOutput((uint64_t)v16, (uint64_t *)&v29);
      if (v33 < 0)
        operator delete(__p);
      if (v31 < 0)
        operator delete(v30);
      if (v26 < 0)
        operator delete(v25[0]);
      if (v28 < 0)
        operator delete(v27[0]);
      hasValue = quasar::ProcessingSink::hasValue(v13);
      if (hasValue)
        Value = (uint64_t **)quasar::ProcessingSink::getValue(v13);
      else
        Value = (uint64_t **)quasar::ProcessingSink::getValue(v10);
      if ((uint64_t **)v15 != Value)
        std::vector<quasar::TranslationPhraseInternal>::__assign_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(v15, *Value, Value[1], 0x8F5C28F5C28F5C29 * (Value[1] - *Value));
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v20 = v37;
      if (v37)
      {
        v21 = (unint64_t *)&v37->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v23 = ++v7 == v8 || hasValue;
    }
    while ((v23 & 1) == 0);
  }
}

void sub_1AD9ADEE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  uint64_t v25;

  MEMORY[0x1AF44D190](v25, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

uint64_t quasar::LinearProcessingGraph::appendBlock(int64x2_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t *v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  int64x2_t v19;
  uint64_t v20;
  uint64_t v21;
  std::string __p;
  uint64_t v24;
  uint64_t v25;
  int64x2_t v26;
  char *v27;
  int64x2_t *v28;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  quasar::ProcessingGraph::createBlock((uint64_t)a1, (const void **)&__p.__r_.__value_.__l.__data_, &v24);
  v3 = a1[4].u64[0];
  v4 = (uint64_t *)a1[3].i64[1];
  if ((unint64_t)v4 >= v3)
  {
    v7 = a1[3].i64[0];
    v8 = ((uint64_t)v4 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v9 = v3 - v7;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    v28 = a1 + 4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)a1[4].i64, v11);
    else
      v12 = 0;
    v13 = (uint64_t *)&v12[8 * v8];
    v14 = &v12[8 * v11];
    v27 = v14;
    v15 = v24;
    v24 = 0;
    *v13 = v15;
    v6 = v13 + 1;
    v26.i64[1] = (uint64_t)(v13 + 1);
    v17 = (_QWORD *)a1[3].i64[0];
    v16 = (_QWORD *)a1[3].i64[1];
    if (v16 == v17)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *--v13 = v18;
      }
      while (v16 != v17);
      v19 = a1[3];
      v6 = (_QWORD *)v26.i64[1];
      v14 = v27;
    }
    a1[3].i64[0] = (uint64_t)v13;
    a1[3].i64[1] = (uint64_t)v6;
    v26 = v19;
    v20 = a1[4].i64[0];
    a1[4].i64[0] = (uint64_t)v14;
    v27 = (char *)v20;
    v25 = v19.i64[0];
    std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v25);
  }
  else
  {
    v5 = v24;
    v24 = 0;
    *v4 = v5;
    v6 = v4 + 1;
  }
  a1[3].i64[1] = (uint64_t)v6;
  v21 = v24;
  v24 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return *(_QWORD *)(a1[3].i64[1] - 8);
}

void sub_1AD9AE12C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16)
{
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::DirectedProcessingGraph::DirectedProcessingGraph(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t i;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  _QWORD v17[2];
  void *__p[2];
  char v19;
  __int128 v20;
  _QWORD v21[3];
  _QWORD v22[3];

  v22[2] = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a2[1];
  v17[0] = *a2;
  v17[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  quasar::ProcessingGraph::ProcessingGraph((_QWORD *)a1, v17);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  *(_QWORD *)a1 = &off_1E5D39338;
  v8 = (char *)operator new(0x58uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &unk_1E5D42EC8;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *((_QWORD *)v8 + 4) = v8 + 40;
  *((_QWORD *)v8 + 7) = 0;
  *((_QWORD *)v8 + 8) = 0;
  *((_QWORD *)v8 + 9) = 0;
  v8[80] = 1;
  *((_QWORD *)v8 + 3) = &unk_1E5D36168;
  *(_QWORD *)&v16 = v8 + 24;
  *((_QWORD *)&v16 + 1) = v8;
  std::string::basic_string[abi:ne180100]<0>(__p, "graph-input");
  v20 = v16;
  v16 = 0uLL;
  v9 = (char *)operator new(0x70uLL);
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = &unk_1E5D42AA0;
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 3) = &off_1E5D35448;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  *((_QWORD *)v9 + 4) = v9 + 40;
  *((_QWORD *)v9 + 7) = 0;
  *((_QWORD *)v9 + 8) = 0;
  *((_QWORD *)v9 + 9) = 0;
  v9[80] = 1;
  *((_QWORD *)v9 + 13) = 0;
  *((_QWORD *)v9 + 12) = 0;
  *((_QWORD *)v9 + 11) = v9 + 96;
  std::string::basic_string[abi:ne180100]<0>(v21, "graph-output");
  v22[0] = v9 + 24;
  v22[1] = v9;
  std::map<std::string,std::shared_ptr<quasar::ProcessingBlock>>::map[abi:ne180100](a1 + 48, (const void **)__p, 2);
  for (i = 0; i != -10; i -= 5)
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v22[i]);
    if (SHIBYTE(v21[i + 2]) < 0)
      operator delete((void *)v21[i]);
  }
  if (*((_QWORD *)&v16 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v16 + 1) + 16))(*((_QWORD *)&v16 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v16 + 1));
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "graph-output");
  *(_QWORD *)&v16 = __p;
  v13 = *((_QWORD *)std::__tree<std::__value_type<std::string,std::shared_ptr<void>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<void>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<void>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 48), (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v16)+ 7);
  if (v19 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 72) = v13;
  std::string::basic_string[abi:ne180100]<0>(__p, "graph-input");
  *(_QWORD *)&v16 = __p;
  v14 = *((_QWORD *)std::__tree<std::__value_type<std::string,std::shared_ptr<void>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<void>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<void>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 48), (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v16)+ 7);
  if (v19 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 80) = v14;
  return a1;
}

void sub_1AD9AE494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  uint64_t v24;

  if (a23 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(v24, *(_QWORD **)(v23 + 56));
  quasar::ProcessingGraph::~ProcessingGraph((char **)v23);
  _Unwind_Resume(a1);
}

void sub_1AD9AE548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x1AD9AE540);
}

uint64_t std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>>::~pair(uint64_t a1)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

quasar::DirectedProcessingGraph *quasar::DirectedProcessingGraph::DirectedProcessingGraph(quasar::DirectedProcessingGraph *this)
{
  quasar::ProcessingGraph *v2;
  uint64_t **v3;
  char *v4;
  char *v5;
  uint64_t i;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  void *__p[2];
  char v14;
  __int128 v15;
  _QWORD v16[3];
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  v2 = quasar::ProcessingGraph::ProcessingGraph(this);
  *(_QWORD *)v2 = &off_1E5D39338;
  v3 = (uint64_t **)((char *)v2 + 48);
  v4 = (char *)operator new(0x58uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &unk_1E5D42EC8;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *((_QWORD *)v4 + 4) = v4 + 40;
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 8) = 0;
  *((_QWORD *)v4 + 9) = 0;
  v4[80] = 1;
  *((_QWORD *)v4 + 3) = &unk_1E5D36168;
  *(_QWORD *)&v12 = v4 + 24;
  *((_QWORD *)&v12 + 1) = v4;
  std::string::basic_string[abi:ne180100]<0>(__p, "graph-input");
  v15 = v12;
  v12 = 0uLL;
  v5 = (char *)operator new(0x70uLL);
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &unk_1E5D42AA0;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 3) = &off_1E5D35448;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *((_QWORD *)v5 + 4) = v5 + 40;
  *((_QWORD *)v5 + 7) = 0;
  *((_QWORD *)v5 + 8) = 0;
  *((_QWORD *)v5 + 9) = 0;
  v5[80] = 1;
  *((_QWORD *)v5 + 13) = 0;
  *((_QWORD *)v5 + 12) = 0;
  *((_QWORD *)v5 + 11) = v5 + 96;
  std::string::basic_string[abi:ne180100]<0>(v16, "graph-output");
  v17[0] = v5 + 24;
  v17[1] = v5;
  std::map<std::string,std::shared_ptr<quasar::ProcessingBlock>>::map[abi:ne180100]((uint64_t)v3, (const void **)__p, 2);
  for (i = 0; i != -10; i -= 5)
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v17[i]);
    if (SHIBYTE(v16[i + 2]) < 0)
      operator delete((void *)v16[i]);
  }
  if (*((_QWORD *)&v12 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v12 + 1) + 16))(*((_QWORD *)&v12 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v12 + 1));
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "graph-output");
  *(_QWORD *)&v12 = __p;
  v9 = *((_QWORD *)std::__tree<std::__value_type<std::string,std::shared_ptr<void>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<void>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<void>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v3, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v12)+ 7);
  if (v14 < 0)
    operator delete(__p[0]);
  *((_QWORD *)this + 9) = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "graph-input");
  *(_QWORD *)&v12 = __p;
  v10 = *((_QWORD *)std::__tree<std::__value_type<std::string,std::shared_ptr<void>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<void>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<void>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v3, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v12)+ 7);
  if (v14 < 0)
    operator delete(__p[0]);
  *((_QWORD *)this + 10) = v10;
  return this;
}

void sub_1AD9AE85C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;

  if (a21 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(v22, *(_QWORD **)(v21 + 56));
  quasar::ProcessingGraph::~ProcessingGraph((char **)v21);
  _Unwind_Resume(a1);
}

_QWORD *quasar::DirectedProcessingGraph::runInternal@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  uint64_t *Value;
  _QWORD *v11;
  _QWORD *result;

  quasar::ProcessingSink::resetValue(*(uint64_t ***)(a1 + 72));
  quasar::ProcessingBlock::receive(*(_BYTE **)(a1 + 80), a2);
  v6 = *(_QWORD **)(a1 + 48);
  if (v6 != (_QWORD *)(a1 + 56))
  {
    do
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v6[7] + 40))(v6[7]);
      v7 = (_QWORD *)v6[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v6[2];
          v9 = *v8 == (_QWORD)v6;
          v6 = v8;
        }
        while (!v9);
      }
      v6 = v8;
    }
    while (v8 != (_QWORD *)(a1 + 56));
  }
  Value = (uint64_t *)quasar::ProcessingSink::getValue(*(quasar::ProcessingSink **)(a1 + 72));
  v11 = (_QWORD *)operator new();
  v11[1] = 0;
  v11[2] = 0;
  *v11 = 0;
  result = std::vector<quasar::TranslationPhraseInternal>::__init_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(v11, *Value, Value[1], 0x8F5C28F5C28F5C29 * ((Value[1] - *Value) >> 3));
  *a3 = v11;
  return result;
}

void sub_1AD9AEA04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

_QWORD *quasar::DirectedProcessingGraph::runInternal@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t *Value;
  _QWORD *v16;
  _QWORD *result;

  quasar::ProcessingSink::resetValue(*(uint64_t ***)(a1 + 72));
  v8 = (_QWORD *)*a2;
  v6 = a2 + 1;
  v7 = v8;
  if (v8 != v6)
  {
    do
    {
      quasar::ProcessingBlock::receive(*(_BYTE **)(a1 + 80), (uint64_t)(v7 + 4), (uint64_t)(v7 + 7));
      v9 = (_QWORD *)v7[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v7[2];
          v11 = *v10 == (_QWORD)v7;
          v7 = v10;
        }
        while (!v11);
      }
      v7 = v10;
    }
    while (v10 != v6);
  }
  v12 = *(_QWORD **)(a1 + 48);
  if (v12 != (_QWORD *)(a1 + 56))
  {
    do
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v12[7] + 40))(v12[7]);
      v13 = (_QWORD *)v12[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v12[2];
          v11 = *v14 == (_QWORD)v12;
          v12 = v14;
        }
        while (!v11);
      }
      v12 = v14;
    }
    while (v14 != (_QWORD *)(a1 + 56));
  }
  Value = (uint64_t *)quasar::ProcessingSink::getValue(*(quasar::ProcessingSink **)(a1 + 72));
  v16 = (_QWORD *)operator new();
  v16[1] = 0;
  v16[2] = 0;
  *v16 = 0;
  result = std::vector<quasar::TranslationPhraseInternal>::__init_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(v16, *Value, Value[1], 0x8F5C28F5C28F5C29 * ((Value[1] - *Value) >> 3));
  *a3 = v16;
  return result;
}

void sub_1AD9AEB60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

uint64_t *quasar::DirectedProcessingGraph::runMultiOutInternal@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t **a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  const void ***ValueMap;
  uint64_t *v16;
  uint64_t *result;

  quasar::ProcessingSink::resetValue(*(uint64_t ***)(a1 + 72));
  v8 = (_QWORD *)*a2;
  v6 = a2 + 1;
  v7 = v8;
  if (v8 != v6)
  {
    do
    {
      quasar::ProcessingBlock::receive(*(_BYTE **)(a1 + 80), (uint64_t)(v7 + 4), (uint64_t)(v7 + 7));
      v9 = (_QWORD *)v7[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v7[2];
          v11 = *v10 == (_QWORD)v7;
          v7 = v10;
        }
        while (!v11);
      }
      v7 = v10;
    }
    while (v10 != v6);
  }
  v12 = *(_QWORD **)(a1 + 48);
  if (v12 != (_QWORD *)(a1 + 56))
  {
    do
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v12[7] + 40))(v12[7]);
      v13 = (_QWORD *)v12[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v12[2];
          v11 = *v14 == (_QWORD)v12;
          v12 = v14;
        }
        while (!v11);
      }
      v12 = v14;
    }
    while (v14 != (_QWORD *)(a1 + 56));
  }
  ValueMap = (const void ***)quasar::ProcessingSink::getValueMap(*(quasar::ProcessingSink **)(a1 + 72));
  v16 = (uint64_t *)operator new();
  result = std::map<std::string,quasar::ProcessingBlock::ValueType>::map[abi:ne180100](v16, ValueMap);
  *a3 = v16;
  return result;
}

void sub_1AD9AEC98(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t quasar::DirectedProcessingGraph::addBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  const std::string::value_type *v7;
  uint64_t v8;
  int v9;
  std::string::size_type v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  _QWORD *v17;
  std::string __p;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  v6 = *(char *)(a2 + 23);
  if (v6 < 0)
  {
    if (*(_QWORD *)(a2 + 8) != 12)
      goto LABEL_10;
    v7 = *(const std::string::value_type **)a2;
  }
  else
  {
    v7 = (const std::string::value_type *)a2;
    if (v6 != 12)
      goto LABEL_10;
  }
  v8 = *(_QWORD *)v7;
  v9 = *((_DWORD *)v7 + 2);
  if (v8 == 0x756F2D6870617267 && v9 == 1953853556)
    goto LABEL_27;
LABEL_10:
  if (std::__tree<std::string>::__count_unique<std::string>(a1 + 48, (const void **)a2))
  {
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v20 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Block ID already exist: ", 24);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v16, a2);
    goto LABEL_30;
  }
  if (*(char *)(a3 + 23) < 0)
  {
    v11 = *(_QWORD *)(a3 + 8);
    if (v11)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, v11);
      goto LABEL_16;
    }
    goto LABEL_29;
  }
  if (!*(_BYTE *)(a3 + 23))
  {
LABEL_29:
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v20 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Missing (or empty) block-type for block ID: ", 44);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v17, a2);
LABEL_30:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v20);
  }
  __p = *(std::string *)a3;
LABEL_16:
  quasar::ProcessingGraph::createBlock(a1, (const void **)&__p.__r_.__value_.__l.__data_, &v19);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v20, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    v20 = *(_OWORD *)a2;
    *(_QWORD *)&v21 = *(_QWORD *)(a2 + 16);
  }
  v12 = v19;
  v19 = 0;
  *((_QWORD *)&v21 + 1) = v12;
  std::__tree<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::unique_ptr<quasar::ProcessingBlock>>>((uint64_t **)(a1 + 48), (const void **)&v20, &v20);
  v13 = *((_QWORD *)&v21 + 1);
  *((_QWORD *)&v21 + 1) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (SBYTE7(v21) < 0)
    operator delete((void *)v20);
  v14 = v19;
  v19 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_27:
  *(_QWORD *)&v20 = a2;
  return std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 48), (const void **)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v20)[7];
}

void quasar::DirectedProcessingGraph::addConnection(uint64_t a1, uint64_t a2, uint64_t a3, const std::string *a4)
{
  std::string::size_type size;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  std::string *v23;
  std::string::size_type v24;
  uint64_t **v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  void *v32[2];
  __int128 v33;
  void *__p[2];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[13];
  char v56;
  uint64_t v57;
  std::string v58;
  __int128 *v59;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v58 = *(std::string *)a3;
  size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v58.__r_.__value_.__l.__size_;
  if (!size)
    MEMORY[0x1AF44C914](&v58, "in");
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v55, a4, 24);
  v52 = 0;
  v53 = 0;
  v54 = 0;
  std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v55, (uint64_t)&v52, 0x3Au);
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v8 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v55, (uint64_t)&v49, 0x3Au);
  if ((*((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 32) & 5) != 0)
    MEMORY[0x1AF44C914](&v49, "out");
  if (quasar::gLogLevel >= 5)
  {
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    *(_OWORD *)__p = 0u;
    *(_OWORD *)v32 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Creating graph connection: ", 27);
    if (v54 >= 0)
      v10 = &v52;
    else
      v10 = v52;
    if (v54 >= 0)
      v11 = HIBYTE(v54);
    else
      v11 = v53;
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)":", 1);
    if (v51 >= 0)
      v14 = &v49;
    else
      v14 = v49;
    if (v51 >= 0)
      v15 = HIBYTE(v51);
    else
      v15 = v50;
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" -> ", 4);
    v18 = *(char *)(a2 + 23);
    if (v18 >= 0)
      v19 = a2;
    else
      v19 = *(_QWORD *)a2;
    if (v18 >= 0)
      v20 = *(unsigned __int8 *)(a2 + 23);
    else
      v20 = *(_QWORD *)(a2 + 8);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)":", 1);
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = &v58;
    else
      v23 = (std::string *)v58.__r_.__value_.__r.__words[0];
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
    else
      v24 = v58.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v32);
  }
  v25 = (uint64_t **)(a1 + 48);
  if (a1 + 56 == std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 48, (const void **)&v52))
  {
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    *(_OWORD *)__p = 0u;
    *(_OWORD *)v32 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Unknown block identifier in 'receives-from': ", 45);
    if (v54 >= 0)
      v30 = &v52;
    else
      v30 = v52;
    if (v54 >= 0)
      v31 = HIBYTE(v54);
    else
      v31 = v53;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v32);
  }
  v32[0] = &v52;
  v26 = (uint64_t *)std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 48), (const void **)&v52, (uint64_t)&std::piecewise_construct, (__int128 **)v32)[7];
  v59 = (__int128 *)a2;
  v27 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v25, (const void **)a2, (uint64_t)&std::piecewise_construct, &v59);
  quasar::ProcessingConnection::ProcessingConnection(v32, v27[7], &v58, &v49);
  quasar::ProcessingBlock::connectOutput(v26, (const void **)v32);
  if (SBYTE7(v35) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v33) < 0)
    operator delete(v32[1]);
  if (SHIBYTE(v51) < 0)
    operator delete(v49);
  if (SHIBYTE(v54) < 0)
    operator delete(v52);
  v55[0] = *MEMORY[0x1E0DE4F50];
  v28 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v55 + *(_QWORD *)(v55[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v55[2] = v28;
  v55[3] = MEMORY[0x1E0DE4FB8] + 16;
  if (v56 < 0)
    operator delete((void *)v55[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1AF44D094](&v57);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
}

void sub_1AD9AF330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,char a56)
{
  uint64_t v56;

  if (*(char *)(v56 - 57) < 0)
    operator delete(*(void **)(v56 - 80));
  _Unwind_Resume(exception_object);
}

void quasar::DirectedProcessingGraph::updateConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void **a5)
{
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v15;
  uint64_t ChildOptional;
  quasar::PTree *v17;
  const std::string *String;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const std::string *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  std::string *v27;
  __int128 v28;
  std::string v29;
  std::string v30;
  void *__p[2];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;

  v10 = *(char *)(a2 + 23);
  if (v10 < 0)
  {
    if (*(_QWORD *)(a2 + 8) != 11)
      goto LABEL_10;
    v11 = *(uint64_t **)a2;
  }
  else
  {
    v11 = (uint64_t *)a2;
    if (v10 != 11)
      goto LABEL_10;
  }
  v12 = *v11;
  v13 = *(uint64_t *)((char *)v11 + 3);
  if (v12 == 0x6E692D6870617267 && v13 == 0x7475706E692D6870)
  {
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"No config block allowed for '", 29);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"graph-input", 11);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, "'");
    goto LABEL_26;
  }
LABEL_10:
  if (!std::__tree<std::string>::__count_unique<std::string>(a1 + 48, (const void **)a2))
  {
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"updateConfiguration called for nonexisting block id: ", 53);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v23, a2);
    goto LABEL_26;
  }
  __p[0] = (void *)a2;
  v15 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 48), (const void **)a2, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
  (*(void (**)(uint64_t, uint64_t, uint64_t, const void **))(*(_QWORD *)v15[7] + 32))(v15[7], a3, a4, a5);
  std::string::basic_string[abi:ne180100]<0>(__p, "receive-from");
  ChildOptional = quasar::PTree::getChildOptional(a4, (uint64_t)__p);
  v17 = (quasar::PTree *)ChildOptional;
  if (SBYTE7(v32) < 0)
  {
    operator delete(__p[0]);
    if (!v17)
      return;
  }
  else if (!ChildOptional)
  {
    return;
  }
  if (quasar::PTree::isLeaf(v17))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "in");
    String = (const std::string *)quasar::PTree::getString(v17);
    quasar::DirectedProcessingGraph::addConnection(a1, a2, (uint64_t)__p, String);
    if (SBYTE7(v32) < 0)
      operator delete(__p[0]);
    return;
  }
  if (!quasar::PTree::isDict(v17))
  {
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Invalid connection syntax in: ", 30);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(".", a5, (void **)&v29.__r_.__value_.__l.__data_);
    v27 = std::string::append(&v29, "receive-from");
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v26, (uint64_t)&v30);
    std::string::~string(&v30);
    std::string::~string(&v29);
LABEL_26:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v19 = quasar::PTree::begin(v17);
  v20 = quasar::PTree::end(v17);
  if (v19 != v20)
  {
    v21 = v20;
    do
    {
      v22 = (const std::string *)quasar::PTree::getString((quasar::PTree *)(v19 + 24));
      quasar::DirectedProcessingGraph::addConnection(a1, a2, v19, v22);
      v19 += 88;
    }
    while (v19 != v21);
  }
}

void quasar::DirectedProcessingGraph::checkGraph(quasar::DirectedProcessingGraph *this)
{
  char *v1;
  char *v2;
  int v3;
  int *v4;
  const char *v5;
  void *v6;
  int *v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t **v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  _QWORD *v39;
  _QWORD *v40;
  char *v41;
  char *v42;
  _QWORD *v43;
  void *__s1[2];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;

  v1 = (char *)*((_QWORD *)this + 6);
  v2 = (char *)this + 56;
  if (v1 != (char *)this + 56)
  {
    v3 = 0;
    v4 = &quasar::gLogLevel;
    while (1)
    {
      v5 = (const char *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v1 + 7) + 16))(*((_QWORD *)v1 + 7));
      std::string::basic_string[abi:ne180100]<0>(__s1, "NullBlock");
      v6 = (void *)strlen(v5);
      if (SBYTE7(v45) < 0)
      {
        if (v6 == __s1[1])
        {
          if (v6 == (void *)-1)
LABEL_88:
            std::string::__throw_out_of_range[abi:ne180100]();
          v7 = v4;
          v8 = __s1[0];
          v9 = memcmp(__s1[0], v5, (size_t)v6);
          v10 = v8;
          v4 = v7;
          operator delete(v10);
          if (!v9)
            goto LABEL_80;
        }
        else
        {
          operator delete(__s1[0]);
        }
      }
      else if (v6 == (void *)BYTE7(v45))
      {
        if (v6 == (void *)-1)
          goto LABEL_88;
        if (!memcmp(__s1, v5, (size_t)v6))
          goto LABEL_80;
      }
      v11 = (uint64_t **)(v1 + 32);
      v12 = v1[55];
      if (v1[55] < 0)
      {
        if (*((_QWORD *)v1 + 5) != 12)
          goto LABEL_22;
        v13 = *v11;
      }
      else
      {
        v13 = (uint64_t *)(v1 + 32);
        if (v12 != 12)
          goto LABEL_22;
      }
      v14 = *v13;
      v15 = *((unsigned int *)v13 + 2);
      v16 = v14 == 0x756F2D6870617267 && v15 == 1953853556;
      if (v16)
      {
LABEL_23:
        if ((v12 & 0x80) == 0)
          goto LABEL_24;
        goto LABEL_35;
      }
LABEL_22:
      if (*(_QWORD *)(*((_QWORD *)v1 + 7) + 32) != *(_QWORD *)(*((_QWORD *)v1 + 7) + 40))
        goto LABEL_23;
      if (*v4 >= 1)
      {
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        *(_OWORD *)__s1 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__s1);
        v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s1, (uint64_t)"Block has no outgoing connections: ", 35);
        v19 = v1[55];
        if (v19 >= 0)
          v20 = (uint64_t)(v1 + 32);
        else
          v20 = *((_QWORD *)v1 + 4);
        if (v19 >= 0)
          v21 = v1[55];
        else
          v21 = *((_QWORD *)v1 + 5);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__s1);
        v12 = v1[55];
      }
      ++v3;
      if ((v12 & 0x80) == 0)
      {
LABEL_24:
        v17 = (uint64_t *)(v1 + 32);
        if (v12 != 12)
          goto LABEL_47;
        goto LABEL_37;
      }
LABEL_35:
      if (*((_QWORD *)v1 + 5) != 12)
        goto LABEL_49;
      v17 = *v11;
LABEL_37:
      v22 = *v17;
      v23 = *((unsigned int *)v17 + 2);
      v24 = v22 == 0x756F2D6870617267 && v23 == 1953853556;
      if (v24 && *(_QWORD *)(*((_QWORD *)v1 + 7) + 32) != *(_QWORD *)(*((_QWORD *)v1 + 7) + 40))
      {
        if (*v4 >= 1)
        {
          v59 = 0u;
          v60 = 0u;
          v57 = 0u;
          v58 = 0u;
          v55 = 0u;
          v56 = 0u;
          v53 = 0u;
          v54 = 0u;
          v51 = 0u;
          v52 = 0u;
          v49 = 0u;
          v50 = 0u;
          v47 = 0u;
          v48 = 0u;
          v45 = 0u;
          v46 = 0u;
          *(_OWORD *)__s1 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__s1);
          v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s1, (uint64_t)"'", 1);
          v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"graph-output", 12);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"' can have no outgoing connections", 34);
          quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__s1);
          v12 = v1[55];
        }
        ++v3;
      }
      if ((v12 & 0x80) == 0)
      {
LABEL_47:
        if (v12 != 11)
          goto LABEL_55;
        v27 = (uint64_t *)(v1 + 32);
        goto LABEL_51;
      }
LABEL_49:
      if (*((_QWORD *)v1 + 5) != 11)
        goto LABEL_55;
      v27 = *v11;
LABEL_51:
      v28 = *v27;
      v29 = *(uint64_t *)((char *)v27 + 3);
      if (v28 == 0x6E692D6870617267 && v29 == 0x7475706E692D6870)
      {
LABEL_56:
        if ((v12 & 0x80) == 0)
          goto LABEL_57;
        goto LABEL_68;
      }
LABEL_55:
      if (*(_QWORD *)(*((_QWORD *)v1 + 7) + 24))
        goto LABEL_56;
      if (*v4 >= 1)
      {
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        *(_OWORD *)__s1 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__s1);
        v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s1, (uint64_t)"Block has no incoming connections: ", 35);
        v33 = v1[55];
        if (v33 >= 0)
          v34 = (uint64_t)(v1 + 32);
        else
          v34 = *((_QWORD *)v1 + 4);
        if (v33 >= 0)
          v35 = v1[55];
        else
          v35 = *((_QWORD *)v1 + 5);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v34, v35);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__s1);
        v12 = v1[55];
      }
      ++v3;
      if ((v12 & 0x80) == 0)
      {
LABEL_57:
        v31 = (uint64_t *)(v1 + 32);
        if (v12 == 11)
          goto LABEL_70;
        goto LABEL_79;
      }
LABEL_68:
      if (*((_QWORD *)v1 + 5) == 11)
      {
        v31 = *v11;
LABEL_70:
        v36 = *v31;
        v37 = *(uint64_t *)((char *)v31 + 3);
        v38 = v36 == 0x6E692D6870617267 && v37 == 0x7475706E692D6870;
        if (v38 && *(_QWORD *)(*((_QWORD *)v1 + 7) + 24))
        {
          if (*v4 >= 1)
          {
            v59 = 0u;
            v60 = 0u;
            v57 = 0u;
            v58 = 0u;
            v55 = 0u;
            v56 = 0u;
            v53 = 0u;
            v54 = 0u;
            v51 = 0u;
            v52 = 0u;
            v49 = 0u;
            v50 = 0u;
            v47 = 0u;
            v48 = 0u;
            v45 = 0u;
            v46 = 0u;
            *(_OWORD *)__s1 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__s1);
            v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s1, (uint64_t)"'", 1);
            v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"graph-input", 11);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"' can have no incoming connections", 34);
            quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__s1);
          }
          ++v3;
        }
      }
LABEL_79:
      v3 += (*(uint64_t (**)(_QWORD, _QWORD *))(**((_QWORD **)v1 + 7) + 48))(*((_QWORD *)v1 + 7), (_QWORD *)v1 + 4);
LABEL_80:
      v41 = (char *)*((_QWORD *)v1 + 1);
      if (v41)
      {
        do
        {
          v42 = v41;
          v41 = *(char **)v41;
        }
        while (v41);
      }
      else
      {
        do
        {
          v42 = (char *)*((_QWORD *)v1 + 2);
          v16 = *(_QWORD *)v42 == (_QWORD)v1;
          v1 = v42;
        }
        while (!v16);
      }
      v1 = v42;
      if (v42 == v2)
      {
        if (v3)
        {
          v59 = 0u;
          v60 = 0u;
          v57 = 0u;
          v58 = 0u;
          v55 = 0u;
          v56 = 0u;
          v53 = 0u;
          v54 = 0u;
          v51 = 0u;
          v52 = 0u;
          v49 = 0u;
          v50 = 0u;
          v47 = 0u;
          v48 = 0u;
          v45 = 0u;
          v46 = 0u;
          *(_OWORD *)__s1 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__s1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s1, (uint64_t)"Found ", 6);
          v43 = (_QWORD *)std::ostream::operator<<();
          std::operator<<[abi:ne180100]<std::char_traits<char>>(v43, " graph connectivity error(s)");
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__s1);
        }
        return;
      }
    }
  }
}

void sub_1AD9AFC8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::ProcessingGraph::getBlock(uint64_t a1)
{
  _OWORD v3[17];

  if (quasar::gLogLevel >= 1)
  {
    memset(v3, 0, sizeof(v3));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Block name lookup not supported for this graph type!", 52);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v3);
  }
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(a1, 0);
}

void sub_1AD9AFD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  _Unwind_Resume(a1);
}

void quasar::LinearProcessingGraph::~LinearProcessingGraph(char **this)
{
  void **v2;

  *this = (char *)off_1E5D38510;
  v2 = (void **)(this + 6);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v2);
  *this = (char *)off_1E5D35B88;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 4));
  std::__tree<std::string>::destroy((uint64_t)(this + 1), this[2]);
}

{
  void **v2;

  *this = (char *)off_1E5D38510;
  v2 = (void **)(this + 6);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v2);
  *this = (char *)off_1E5D35B88;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 4));
  std::__tree<std::string>::destroy((uint64_t)(this + 1), this[2]);
  MEMORY[0x1AF44D190](this, 0x10A1C406EFA2AE8);
}

uint64_t quasar::LinearProcessingGraph::getBlock(quasar::LinearProcessingGraph *this, int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 6);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 7) - v2) >> 3))
    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
  return *(_QWORD *)(v2 + 8 * a2);
}

uint64_t quasar::LinearProcessingGraph::runInternal(uint64_t a1, _QWORD *a2)
{
  _OWORD v3[17];

  if (a2[2] != 1)
  {
    memset(v3, 0, sizeof(v3));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "Multiple inputs not supported for (legacy) block config format");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v3);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, *a2 + 56);
}

void quasar::LinearProcessingGraph::runMultiOutInternal()
{
  _OWORD v0[17];

  memset(v0, 0, sizeof(v0));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Multiple inputs not supported for (legacy) block config format");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v0);
}

void quasar::DirectedProcessingGraph::~DirectedProcessingGraph(quasar::DirectedProcessingGraph *this)
{
  *(_QWORD *)this = &off_1E5D39338;
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 48, *((_QWORD **)this + 7));
  *(_QWORD *)this = off_1E5D35B88;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  std::__tree<std::string>::destroy((uint64_t)this + 8, *((char **)this + 2));
}

{
  *(_QWORD *)this = &off_1E5D39338;
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 48, *((_QWORD **)this + 7));
  *(_QWORD *)this = off_1E5D35B88;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  std::__tree<std::string>::destroy((uint64_t)this + 8, *((char **)this + 2));
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::DirectedProcessingGraph::getBlock(quasar::DirectedProcessingGraph *this, int a2)
{
  _QWORD *v2;
  int i;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  _OWORD v8[17];

  v2 = (_QWORD *)*((_QWORD *)this + 6);
  if (a2 >= 1)
  {
    for (i = 0; i != a2; ++i)
    {
      v4 = (_QWORD *)v2[1];
      v5 = v2;
      if (v4)
      {
        do
        {
          v2 = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v2 = (_QWORD *)v5[2];
          v6 = *v2 == (_QWORD)v5;
          v5 = v2;
        }
        while (!v6);
      }
      if (v2 == (_QWORD *)((char *)this + 56))
      {
        memset(v8, 0, sizeof(v8));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Invalid block index: ", 21);
        std::ostream::operator<<();
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v8);
      }
    }
  }
  return v2[7];
}

uint64_t quasar::DirectedProcessingGraph::getBlock(uint64_t a1, __int128 *a2)
{
  __int128 *v3;

  v3 = a2;
  return std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 48), (const void **)a2, (uint64_t)&std::piecewise_construct, &v3)[7];
}

void std::__shared_ptr_emplace<quasar::Context>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44F98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::Context>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44F98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::Context>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ***std::unique_ptr<quasar::ProcessingBlock::ValueType>::reset[abi:ne180100](void ***result, void **a2)
{
  void **v2;
  void **v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = v2;
    std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v3);
    return (void ***)MEMORY[0x1AF44D190](v2, 0x20C40960023A9);
  }
  return result;
}

quasar::MergerOptions *quasar::ProcessingGraph::creator<quasar::MergerBlock>@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  quasar::MergerOptions *result;

  v2 = operator new();
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_QWORD *)(v2 + 232) = 0;
  *(_QWORD *)(v2 + 240) = 0;
  *(_QWORD *)(v2 + 184) = off_1E5D35B18;
  *(_QWORD *)(v2 + 200) = 0;
  *(_QWORD *)(v2 + 192) = v2 + 200;
  *(_QWORD *)(v2 + 208) = 0;
  *(_QWORD *)(v2 + 216) = 0;
  *(_QWORD *)(v2 + 224) = 0;
  *(_BYTE *)(v2 + 240) = 1;
  *(_QWORD *)v2 = off_1E5D03918;
  *(_QWORD *)(v2 + 184) = &unk_1E5D039A0;
  result = quasar::MergerOptions::MergerOptions((quasar::MergerOptions *)(v2 + 8));
  *(_QWORD *)v2 = off_1E5D345F8;
  *(_QWORD *)(v2 + 184) = &off_1E5D346A0;
  *a1 = v2 + 184;
  return result;
}

void sub_1AD9B02FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  char **v2;

  quasar::ProcessingBlock::~ProcessingBlock(v2);
  MEMORY[0x1AF44D190](v1, 0x10F3C40CA96DD08);
  _Unwind_Resume(a1);
}

quasar::MergerOptions *quasar::MergerOptions::MergerOptions(quasar::MergerOptions *this)
{
  std::string __p;
  std::string v4;
  std::string v5;

  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E5D34EB0;
  std::string::basic_string[abi:ne180100]<0>(&v5, "merge-style");
  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "type of merge performed");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 16, &v5, &v4, &__p, 131);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  return this;
}

void sub_1AD9B03DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OptionValue<std::string>::OptionValue(uint64_t a1, const std::string *a2, const std::string *a3, const std::string *a4, int a5)
{
  std::string *v10;
  std::string *v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  void *__p[2];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  *(_OWORD *)(a1 + 8) = 0u;
  v10 = (std::string *)(a1 + 8);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_QWORD *)a1 = &unk_1E5D347F0;
  *(_OWORD *)(a1 + 104) = 0u;
  v11 = (std::string *)(a1 + 104);
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = a1 + 144;
  *(_QWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  v12 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v12 < 0)
  {
    if (a2->__r_.__value_.__l.__size_ != 9)
      goto LABEL_10;
    v13 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
  }
  else
  {
    v13 = (uint64_t *)a2;
    if (v12 != 9)
      goto LABEL_10;
  }
  v14 = *v13;
  v15 = *((unsigned __int8 *)v13 + 8);
  if (v14 == 0x656469727265766FLL && v15 == 115)
  {
    v33 = 0uLL;
    v34 = 0uLL;
    v31 = 0uLL;
    v32 = 0uLL;
    v29 = 0uLL;
    v30 = 0uLL;
    v27 = 0uLL;
    v28 = 0uLL;
    v25 = 0uLL;
    v26 = 0uLL;
    v23 = 0uLL;
    v24 = 0uLL;
    v21 = 0uLL;
    v22 = 0uLL;
    v19 = 0uLL;
    v20 = 0uLL;
    *(_OWORD *)__p = 0uLL;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"overrides option name is reserved", 33);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
LABEL_10:
  std::string::basic_string[abi:ne180100]<0>(__p, "<default>");
  std::string::operator=(v11, a3);
  std::string::operator=((std::string *)(a1 + 32), (const std::string *)__p);
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  std::string::operator=((std::string *)(a1 + 56), a4);
  *(_DWORD *)(a1 + 80) = a5;
  std::string::operator=(v10, a2);
  return a1;
}

void sub_1AD9B05D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void **v15;
  uint64_t v16;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v16, *(_QWORD **)(v14 + 144));
  if (*(char *)(v14 + 127) < 0)
    operator delete(*v15);
  quasar::OptionValueBase::~OptionValueBase((void **)v14);
  _Unwind_Resume(a1);
}

void quasar::OptionValueBase::~OptionValueBase(void **this)
{
  *this = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 11));
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

double quasar::ProcessingGraph::creator<quasar::NullBlock>@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_BYTE *)(v2 + 56) = 1;
  *(_QWORD *)v2 = &unk_1E5D3BF58;
  *(_QWORD *)(v2 + 8) = v2 + 16;
  *a1 = v2;
  return result;
}

quasar::PDecTranslatorBlock *quasar::ProcessingGraph::creator<quasar::PDecTranslatorBlock>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  quasar::PDecTranslatorBlock *result;

  v2 = (_QWORD *)operator new();
  bzero(v2, 0x6658uLL);
  result = quasar::PDecTranslatorBlock::PDecTranslatorBlock((quasar::PDecTranslatorBlock *)v2);
  *a1 = (char *)v2 + *(_QWORD *)(*v2 - 24);
  return result;
}

void sub_1AD9B0744(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C407AB0DB06);
  _Unwind_Resume(a1);
}

quasar::PDecTranslatorBlock *quasar::PDecTranslatorBlock::PDecTranslatorBlock(quasar::PDecTranslatorBlock *this)
{
  *((_QWORD *)this + 3267) = off_1E5D35B18;
  *((_QWORD *)this + 3269) = 0;
  *((_QWORD *)this + 3271) = 0;
  *((_QWORD *)this + 3270) = 0;
  *((_QWORD *)this + 3268) = (char *)this + 26152;
  *((_QWORD *)this + 3273) = 0;
  *((_QWORD *)this + 3272) = 0;
  *((_BYTE *)this + 26192) = 1;
  *(_QWORD *)this = &unk_1E5D04B38;
  *((_QWORD *)this + 3267) = &unk_1E5D04BC0;
  quasar::TranslatorOptions::TranslatorOptions((quasar::PDecTranslatorBlock *)((char *)this + 8));
  *((_QWORD *)this + 1094) = 0;
  *((_QWORD *)this + 1093) = 0;
  *(_OWORD *)((char *)this + 8712) = 0u;
  *(_OWORD *)((char *)this + 8728) = 0u;
  *(_OWORD *)((char *)this + 8680) = 0u;
  *(_OWORD *)((char *)this + 8696) = 0u;
  *(_QWORD *)this = off_1E5D37628;
  *((_QWORD *)this + 3267) = &off_1E5D376E0;
  *((_QWORD *)this + 1096) = 0;
  *((_QWORD *)this + 1095) = 0;
  quasar::TranslatorOptions::TranslatorOptions((quasar::PDecTranslatorBlock *)((char *)this + 8776));
  quasar::TranslatorOptions::TranslatorOptions((quasar::PDecTranslatorBlock *)((char *)this + 17448));
  *(_OWORD *)((char *)this + 26120) = 0u;
  return this;
}

void sub_1AD9B0864(_Unwind_Exception *a1)
{
  uint64_t v1;
  quasar::TranslatorOptions *v2;
  quasar::PDecEngineBlockMixin *v3;
  quasar::TranslatorOptions *v4;
  uint64_t v5;
  uint64_t v6;
  quasar::TranslatorOptions *v7;
  uint64_t v9;

  v7 = v4;
  quasar::TranslatorOptions::~TranslatorOptions(v7);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1 + 8760);
  v9 = *(_QWORD *)(v1 + 8752);
  *(_QWORD *)(v1 + 8752) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
  quasar::PDecEngineBlockMixin::~PDecEngineBlockMixin(v3);
  *(_QWORD *)v1 = v5;
  *(_QWORD *)(v1 + *(_QWORD *)(v5 - 24)) = v6;
  quasar::TranslatorOptions::~TranslatorOptions(v2);
  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 26136));
  _Unwind_Resume(a1);
}

void quasar::PDecEngineBlockMixin::~PDecEngineBlockMixin(quasar::PDecEngineBlockMixin *this)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 56);
  std::unique_ptr<kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::reset[abi:ne180100]((uint64_t *)this + 4, 0);
  std::unique_ptr<kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::reset[abi:ne180100]((uint64_t *)this + 3, 0);
  std::unique_ptr<kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::reset[abi:ne180100]((uint64_t *)this + 2, 0);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

quasar::TranslatorOptions *quasar::TranslatorOptions::TranslatorOptions(quasar::TranslatorOptions *this)
{
  _DWORD *v2;
  _QWORD *v4;
  std::string v5[2];
  std::string v6;
  std::string v7;

  *(_QWORD *)quasar::PDecOptions::PDecOptions(this) = &off_1E5D367E0;
  std::string::basic_string[abi:ne180100]<0>(v5, "model-file");
  std::string::basic_string[abi:ne180100]<0>(&v7, "");
  std::string::basic_string[abi:ne180100]<0>(&v6, "mt model file name");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 2944, v5, &v7, &v6, 35);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v5, "beam");
  LODWORD(v6.__r_.__value_.__l.__data_) = 4;
  std::string::basic_string[abi:ne180100]<0>(&v7, "maximum number of active beams in pruning");
  v4 = (_QWORD *)((char *)this + 3104);
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 3104, v5, &v6, &v7, 35);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v5, "as-beam");
  v6.__r_.__value_.__r.__words[0] = 0x41E0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v7, "as_beam pruning value");
  quasar::OptionValue<double>::OptionValue((uint64_t)this + 3248, v5, &v6, &v7, 96);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v5, "rs-beam");
  v6.__r_.__value_.__r.__words[0] = 0x41E0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v7, "rs_beam pruning value");
  quasar::OptionValue<double>::OptionValue((uint64_t)this + 3392, v5, &v6, &v7, 96);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v5, "beam-batch");
  LODWORD(v6.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v7, "beam batch size for (espresso) decoder model (0 = off, -1 = any)");
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 3536, v5, &v6, &v7, 213);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v5, "confidence-threshold");
  v6.__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v7, "confidence threshold");
  quasar::OptionValue<double>::OptionValue((uint64_t)this + 3680, v5, &v6, &v7, 35);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v5, "lm-model-file");
  std::string::basic_string[abi:ne180100]<0>(&v7, "");
  std::string::basic_string[abi:ne180100]<0>(&v6, "path to language model file");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 3824, v5, &v7, &v6, 35);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v5, "lm-weight");
  v6.__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v7, "language model weight");
  quasar::OptionValue<double>::OptionValue((uint64_t)this + 3984, v5, &v6, &v7, 35);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v5, "veto-factor");
  v6.__r_.__value_.__r.__words[0] = 0x3FE0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v7, "MT defcoding veto factor");
  quasar::OptionValue<double>::OptionValue((uint64_t)this + 4128, v5, &v6, &v7, 35);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v5, "veto-factor-exclude-input-tags");
  v6.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v7, "MT decoding, exclude input tags in  veto factor computation");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 4272, v5, &v6, &v7, 138);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v5, "veto-factor-num-external-input-tags");
  LODWORD(v6.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v7, "MT decoding, num externally provided tags to exclude for veto factor");
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 4416, v5, &v6, &v7, 138);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v5, "norm-costs");
  v6.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v7, "normalize costs in mt decoding? (backward compatible version)");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 4560, v5, &v6, &v7, 35);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v5, "norm-mode");
  std::string::basic_string[abi:ne180100]<0>(&v7, "off");
  std::string::basic_string[abi:ne180100]<0>(&v6, "normalize costs in mt decoding? (off|length|gnmt)");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 4704, v5, &v7, &v6, 97);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v5, "norm-alpha");
  v6.__r_.__value_.__r.__words[0] = 0x3FF0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v7, "normalization alpha parameter");
  quasar::OptionValue<double>::OptionValue((uint64_t)this + 4864, v5, &v6, &v7, 97);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v5, "norm-sigma");
  v6.__r_.__value_.__r.__words[0] = 0x4014000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v7, "normalization sigma parameter");
  quasar::OptionValue<double>::OptionValue((uint64_t)this + 5008, v5, &v6, &v7, 97);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v5, "unk-replace");
  v6.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v7, "oov");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 5152, v5, &v6, &v7, 35);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v5, "max-seq-length");
  LODWORD(v6.__r_.__value_.__l.__data_) = 100;
  std::string::basic_string[abi:ne180100]<0>(&v7, "maximum decoding sequence length");
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 5296, v5, &v6, &v7, 35);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v5, "max-seq-length-relative");
  v6.__r_.__value_.__r.__words[0] = 0xBFF0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v7, "maximum decoding sequence length as factor of input length");
  quasar::OptionValue<double>::OptionValue((uint64_t)this + 5440, v5, &v6, &v7, 160);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v5, "max-seq-length-floor");
  LODWORD(v6.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v7, "maximum decoding sequence length floor (used with input length factor)");
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 5584, v5, &v6, &v7, 160);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v5, "lm-mode");
  std::string::basic_string[abi:ne180100]<0>(&v7, "");
  std::string::basic_string[abi:ne180100]<0>(&v6, "lm mode");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 5728, v5, &v7, &v6, 35);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v5, "confidence-model-file");
  std::string::basic_string[abi:ne180100]<0>(&v7, "");
  std::string::basic_string[abi:ne180100]<0>(&v6, "confidence model file");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 5888, v5, &v7, &v6, 35);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v5, "stop-mode");
  std::string::basic_string[abi:ne180100]<0>(&v7, "");
  std::string::basic_string[abi:ne180100]<0>(&v6, "stop mode in mt decoding (nbeam|best|finished_score)");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 6048, v5, &v7, &v6, 99);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v5, "block-control");
  std::string::basic_string[abi:ne180100]<0>(&v7, "");
  std::string::basic_string[abi:ne180100]<0>(&v6, "flow control for block sequence (<empty>|optional|optional_stop_on_success)");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 6208, v5, &v7, &v6, 106);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v5, "shortlist-lang-pair");
  std::string::basic_string[abi:ne180100]<0>(&v7, "");
  std::string::basic_string[abi:ne180100]<0>(&v6, "language pair used for shortlist");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 6368, v5, &v7, &v6, 121);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v5, "shortlist-cond-n");
  LODWORD(v6.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v7, "top n in condition table used for shortlist");
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 6528, v5, &v6, &v7, 121);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v5, "shortlist-freq-n");
  LODWORD(v6.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v7, "top n in freq words used for shortlist");
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 6672, v5, &v6, &v7, 121);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v5, "nbest");
  std::string::basic_string[abi:ne180100]<0>(&v7, "maximum entries in nbest list to produce (default to same as 'beam'}");
  v2 = (_DWORD *)quasar::OptionValue<int>::value(v4);
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 6816, v5, v2, &v7, 35);
  *((_QWORD *)this + 866) = v4;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v5, "stop-mode-finished-score-beam");
  LODWORD(v6.__r_.__value_.__l.__data_) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v7, "number of finished hypotheses considered for finished score stop mode (default: 1)");
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 6960, v5, &v6, &v7, 99);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v5, "stream-buffer-n");
  LODWORD(v6.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v7, "stream decoding initial read length (effective read buffer)");
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 7104, v5, &v6, &v7, 129);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v5, "stream-block-m");
  LODWORD(v6.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v7, "stream decoding read/write length (block size for looped read/write calls)");
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 7248, v5, &v6, &v7, 129);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v5, "stream-stabilize");
  v6.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v7, "stabilize partial stream decoding results after each read/write block");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 7392, v5, &v6, &v7, 129);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v7, "partial-input-override");
  quasar::PTree::PTree((quasar::PTree *)v5);
  std::string::basic_string[abi:ne180100]<0>(&v6, "optional override parameter block to change parameter settings for partial-input processing");
  quasar::OptionValue<quasar::PTree>::OptionValue((uint64_t)this + 7536, &v7, (uint64_t)v5, &v6, 229);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  quasar::PTree::~PTree((quasar::PTree *)v5);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v5, "timing-meta-info");
  v6.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v7, "include decoder timing information in meta info json");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 7736, v5, &v6, &v7, 240);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v5, "repetition-threshold");
  v6.__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v7, "probility threshold for detecting repetitions");
  quasar::OptionValue<double>::OptionValue((uint64_t)this + 7880, v5, &v6, &v7, 269);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v5, "abort-on-repetitions");
  v6.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v7, "abort decoding on detecting repetitions");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 8024, v5, &v6, &v7, 269);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v5, "redecode-on-repetitions");
  v6.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v7, "retry decoding without shortlist on detecting repetitions");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 8168, v5, &v6, &v7, 269);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v7, "redecode-override");
  quasar::PTree::PTree((quasar::PTree *)v5);
  std::string::basic_string[abi:ne180100]<0>(&v6, "optional override parameter block to change parameter settings for redecode");
  quasar::OptionValue<quasar::PTree>::OptionValue((uint64_t)this + 8312, &v7, (uint64_t)v5, &v6, 269);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  quasar::PTree::~PTree((quasar::PTree *)v5);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v5, "shortlist-suppress-tokens");
  memset(&v7, 0, sizeof(v7));
  quasar::OptionValue<std::vector<std::string>>::OptionValue((uint64_t)this + 8512, v5, (uint64_t)&v7, &v6, 121);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  v6.__r_.__value_.__r.__words[0] = (std::string::size_type)&v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
  if (SHIBYTE(v5[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5[0].__r_.__value_.__l.__data_);
  return this;
}

void sub_1AD9B1978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  quasar::PDecOptions *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  if (*(char *)(v46 - 113) < 0)
    operator delete(*(void **)(v46 - 136));
  *(_QWORD *)(v46 - 136) = v46 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v46 - 136));
  if (*(char *)(v46 - 177) < 0)
    operator delete(*(void **)(v46 - 200));
  quasar::OptionValue<quasar::PTree>::~OptionValue(v40);
  quasar::OptionValue<BOOL>::~OptionValue(v39);
  quasar::OptionValue<BOOL>::~OptionValue(v37);
  quasar::OptionValue<double>::~OptionValue(v45);
  quasar::OptionValue<BOOL>::~OptionValue(v44);
  quasar::OptionValue<quasar::PTree>::~OptionValue(v43);
  quasar::OptionValue<BOOL>::~OptionValue(v42);
  quasar::OptionValue<int>::~OptionValue(v41);
  quasar::OptionValue<int>::~OptionValue(v38);
  quasar::OptionValue<int>::~OptionValue(a10);
  quasar::OptionValue<int>::~OptionValue(a11);
  quasar::OptionValue<int>::~OptionValue(a12);
  quasar::OptionValue<int>::~OptionValue(a13);
  quasar::OptionValue<std::string>::~OptionValue(a14);
  quasar::OptionValue<std::string>::~OptionValue(a15);
  quasar::OptionValue<std::string>::~OptionValue(a16);
  quasar::OptionValue<std::string>::~OptionValue(a17);
  quasar::OptionValue<std::string>::~OptionValue(a18);
  quasar::OptionValue<int>::~OptionValue(a19);
  quasar::OptionValue<double>::~OptionValue(a20);
  quasar::OptionValue<int>::~OptionValue(a21);
  quasar::OptionValue<BOOL>::~OptionValue(a22);
  quasar::OptionValue<double>::~OptionValue(a23);
  quasar::OptionValue<double>::~OptionValue(a24);
  quasar::OptionValue<std::string>::~OptionValue(a25);
  quasar::OptionValue<BOOL>::~OptionValue(a26);
  quasar::OptionValue<int>::~OptionValue(a27);
  quasar::OptionValue<BOOL>::~OptionValue(a28);
  quasar::OptionValue<double>::~OptionValue(a29);
  quasar::OptionValue<double>::~OptionValue(a30);
  quasar::OptionValue<std::string>::~OptionValue(a31);
  quasar::OptionValue<double>::~OptionValue(a32);
  quasar::OptionValue<int>::~OptionValue(a33);
  quasar::OptionValue<double>::~OptionValue(a34);
  quasar::OptionValue<double>::~OptionValue(a35);
  quasar::OptionValue<int>::~OptionValue(*(_QWORD *)(v46 - 208));
  quasar::OptionValue<std::string>::~OptionValue(a36);
  quasar::PDecOptions::~PDecOptions(v36);
  _Unwind_Resume(a1);
}

void sub_1AD9B1B3C()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    operator delete(*(void **)(v0 - 112));
  if (*(char *)(v0 - 177) < 0)
    operator delete(*(void **)(v0 - 200));
  JUMPOUT(0x1AD9B1A14);
}

void sub_1AD9B1B6C()
{
  JUMPOUT(0x1AD9B1A14);
}

void sub_1AD9B1B74()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    operator delete(*(void **)(v0 - 112));
  if (*(char *)(v0 - 177) < 0)
    operator delete(*(void **)(v0 - 200));
  JUMPOUT(0x1AD9B1A1CLL);
}

void sub_1AD9B1BA4()
{
  JUMPOUT(0x1AD9B1A1CLL);
}

void sub_1AD9B1BAC()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    operator delete(*(void **)(v0 - 112));
  if (*(char *)(v0 - 177) < 0)
    operator delete(*(void **)(v0 - 200));
  JUMPOUT(0x1AD9B1A24);
}

void sub_1AD9B1BDC()
{
  JUMPOUT(0x1AD9B1A24);
}

void sub_1AD9B1BE4()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    operator delete(*(void **)(v0 - 112));
  if (*(char *)(v0 - 177) < 0)
    operator delete(*(void **)(v0 - 200));
  JUMPOUT(0x1AD9B1A2CLL);
}

void sub_1AD9B1C14()
{
  JUMPOUT(0x1AD9B1A2CLL);
}

void sub_1AD9B1C1C()
{
  uint64_t v0;

  if (*(char *)(v0 - 113) < 0)
    operator delete(*(void **)(v0 - 136));
  quasar::PTree::~PTree((quasar::PTree *)(v0 - 200));
  if (*(char *)(v0 - 89) < 0)
    operator delete(*(void **)(v0 - 112));
  JUMPOUT(0x1AD9B1A34);
}

void sub_1AD9B1C5C()
{
  JUMPOUT(0x1AD9B1A34);
}

void sub_1AD9B1C64()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    operator delete(*(void **)(v0 - 112));
  if (*(char *)(v0 - 177) < 0)
    operator delete(*(void **)(v0 - 200));
  JUMPOUT(0x1AD9B1A3CLL);
}

void sub_1AD9B1C94()
{
  JUMPOUT(0x1AD9B1A3CLL);
}

void sub_1AD9B1C9C()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    operator delete(*(void **)(v0 - 112));
  if (*(char *)(v0 - 177) < 0)
    operator delete(*(void **)(v0 - 200));
  JUMPOUT(0x1AD9B1A44);
}

void sub_1AD9B1CCC()
{
  JUMPOUT(0x1AD9B1A44);
}

void sub_1AD9B1CD4()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    operator delete(*(void **)(v0 - 112));
  if (*(char *)(v0 - 177) < 0)
    operator delete(*(void **)(v0 - 200));
  JUMPOUT(0x1AD9B1A4CLL);
}

void sub_1AD9B1D04()
{
  JUMPOUT(0x1AD9B1A4CLL);
}

void sub_1AD9B1D0C()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    operator delete(*(void **)(v0 - 112));
  if (*(char *)(v0 - 177) < 0)
    operator delete(*(void **)(v0 - 200));
  JUMPOUT(0x1AD9B1A54);
}

void sub_1AD9B1D3C()
{
  JUMPOUT(0x1AD9B1A54);
}

void sub_1AD9B1D44()
{
  uint64_t v0;

  if (*(char *)(v0 - 177) < 0)
    operator delete(*(void **)(v0 - 200));
  JUMPOUT(0x1AD9B1A5CLL);
}

quasar::PDecOptions *quasar::PDecOptions::PDecOptions(quasar::PDecOptions *this)
{
  char *v2;
  const std::string *v3;
  const std::string *v4;
  const std::string *v5;
  std::string __p;
  std::string v8;
  std::string v9;

  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = &unk_1E5D34908;
  std::string::basic_string[abi:ne180100]<0>(&v9, "model-type");
  std::string::basic_string[abi:ne180100]<0>(&v8, "kaldi");
  std::string::basic_string[abi:ne180100]<0>(&__p, "translation model type (kaldi/espresso)");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 16, &v9, &v8, &__p, 213);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v9, "enable-memory-map");
  __p.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v8, "use memory map");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 176, &v9, &__p, &v8, 35);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v9, "phrase-book-mode");
  std::string::basic_string[abi:ne180100]<0>(&v8, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "phrase book mode");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 320, &v9, &v8, &__p, 35);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v9, "pron-guide-model-file");
  std::string::basic_string[abi:ne180100]<0>(&v8, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "pron guide model file");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 480, &v9, &v8, &__p, 35);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v9, "pron-guide-preprocessing");
  __p.__r_.__value_.__s.__data_[0] = 1;
  std::string::basic_string[abi:ne180100]<0>(&v8, "pron guide preprocessing (splitting into characters and <space> insertion)");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 640, &v9, &__p, &v8, 35);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v9, "romanizer");
  std::string::basic_string[abi:ne180100]<0>(&v8, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "romanizer");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 784, &v9, &v8, &__p, 35);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v9, "phrasebook-case-sensitve");
  __p.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v8, "case sensitive phrase book?");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 944, &v9, &__p, &v8, 35);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v9, "filter-list-file");
  std::string::basic_string[abi:ne180100]<0>(&v8, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "filter list file");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 1088, &v9, &v8, &__p, 35);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v9, "pb-file-list");
  std::string::basic_string[abi:ne180100]<0>(&v8, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "phrase book file list");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 1248, &v9, &v8, &__p, 35);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v9, "nbest");
  LODWORD(__p.__r_.__value_.__l.__data_) = 3;
  std::string::basic_string[abi:ne180100]<0>(&v8, "maximum entries in nbest list to produce");
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 1408, &v9, &__p, &v8, 35);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v9, "reset-meta-info");
  __p.__r_.__value_.__s.__data_[0] = 1;
  std::string::basic_string[abi:ne180100]<0>(&v8, "reset metaInfo json");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 1552, &v9, &__p, &v8, 131);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v9, "source-locale");
  std::string::basic_string[abi:ne180100]<0>(&v8, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "source locale");
  v2 = (char *)this + 1696;
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 1696, &v9, &v8, &__p, 35);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v9, "target-locale");
  std::string::basic_string[abi:ne180100]<0>(&v8, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "target locale");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 1856, &v9, &v8, &__p, 35);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v9, "source-token");
  std::string::basic_string[abi:ne180100]<0>(&v8, "source tag for multilingual model");
  v3 = (const std::string *)quasar::OptionValue<std::string>::value((_QWORD *)this + 212);
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 2016, &v9, v3, &v8, 35);
  *((_QWORD *)this + 268) = v2;
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v9, "target-token");
  std::string::basic_string[abi:ne180100]<0>(&v8, "target tag for multilingual model");
  v4 = (const std::string *)quasar::OptionValue<std::string>::value((_QWORD *)this + 232);
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 2176, &v9, v4, &v8, 35);
  *((_QWORD *)this + 288) = (char *)this + 1856;
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v9, "dynamic-switch-key");
  std::string::basic_string[abi:ne180100]<0>(&v8, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "dynamic weight switching key for espresso model");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 2336, &v9, &v8, &__p, 267);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v9, "source-model-tag");
  std::string::basic_string[abi:ne180100]<0>(&v8, "source tag for multilingual model switching");
  v5 = (const std::string *)quasar::OptionValue<std::string>::value((_QWORD *)this + 212);
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 2496, &v9, v5, &v8, 35);
  *((_QWORD *)this + 328) = v2;
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v9, "share-translation-model");
  __p.__r_.__value_.__s.__data_[0] = 1;
  std::string::basic_string[abi:ne180100]<0>(&v8, "share translation model");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 2656, &v9, &__p, &v8, 194);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v9, "use-sentencepiece-ids");
  __p.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v8, "use sentencepiece ids directly, drop dictionaries");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 2800, &v9, &__p, &v8, 242);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  return this;
}

void sub_1AD9B2C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (a29 < 0)
    operator delete(__p);
  if (*(char *)(v38 - 81) < 0)
    operator delete(*(void **)(v38 - 104));
  quasar::OptionValue<BOOL>::~OptionValue(v37);
  quasar::OptionValue<std::string>::~OptionValue(v36);
  quasar::OptionValue<std::string>::~OptionValue(v35);
  quasar::OptionValue<std::string>::~OptionValue(v34);
  quasar::OptionValue<std::string>::~OptionValue(v33);
  quasar::OptionValue<std::string>::~OptionValue(v32);
  quasar::OptionValue<std::string>::~OptionValue(v31);
  quasar::OptionValue<BOOL>::~OptionValue(v30);
  quasar::OptionValue<int>::~OptionValue(v29);
  quasar::OptionValue<std::string>::~OptionValue(a9);
  quasar::OptionValue<std::string>::~OptionValue(a10);
  quasar::OptionValue<BOOL>::~OptionValue(a11);
  quasar::OptionValue<std::string>::~OptionValue(a12);
  quasar::OptionValue<BOOL>::~OptionValue(a13);
  quasar::OptionValue<std::string>::~OptionValue(a14);
  quasar::OptionValue<std::string>::~OptionValue(a15);
  quasar::OptionValue<BOOL>::~OptionValue(a16);
  quasar::OptionValue<std::string>::~OptionValue(a17);
  _Unwind_Resume(a1);
}

void sub_1AD9B31C4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a26 < 0)
    operator delete(__p);
  if (*(char *)(v26 - 81) < 0)
    operator delete(*(void **)(v26 - 104));
  JUMPOUT(0x1AD9B314CLL);
}

void sub_1AD9B31EC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a26 < 0)
    operator delete(__p);
  if (*(char *)(v26 - 81) < 0)
    operator delete(*(void **)(v26 - 104));
  JUMPOUT(0x1AD9B3154);
}

uint64_t quasar::OptionValue<quasar::PTree>::~OptionValue(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E5D347B8;
  std::__tree<std::__value_type<std::string,quasar::PTree>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PTree>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::PTree>>>::destroy(a1 + 176, *(_QWORD **)(a1 + 184));
  quasar::PTree::~PTree((quasar::PTree *)(a1 + 104));
  *(_QWORD *)a1 = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 88);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t quasar::OptionValue<BOOL>::~OptionValue(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E5D34860;
  std::__tree<std::string>::destroy(a1 + 120, *(char **)(a1 + 128));
  *(_QWORD *)a1 = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 88);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t quasar::OptionValue<double>::~OptionValue(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E5D34898;
  std::__tree<std::string>::destroy(a1 + 120, *(char **)(a1 + 128));
  *(_QWORD *)a1 = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 88);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t quasar::OptionValue<int>::~OptionValue(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E5D348D0;
  std::__tree<std::string>::destroy(a1 + 120, *(char **)(a1 + 128));
  *(_QWORD *)a1 = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 88);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t quasar::OptionValue<std::string>::~OptionValue(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 136, *(_QWORD **)(a1 + 144));
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  *(_QWORD *)a1 = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 88);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void quasar::PDecOptions::~PDecOptions(quasar::PDecOptions *this)
{
  *(_QWORD *)this = &unk_1E5D34908;
  *((_QWORD *)this + 350) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 2920, *((char **)this + 366));
  *((_QWORD *)this + 350) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 2888);
  if (*((char *)this + 2879) < 0)
    operator delete(*((void **)this + 357));
  if (*((char *)this + 2855) < 0)
    operator delete(*((void **)this + 354));
  if (*((char *)this + 2831) < 0)
    operator delete(*((void **)this + 351));
  *((_QWORD *)this + 332) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 2776, *((char **)this + 348));
  *((_QWORD *)this + 332) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 2744);
  if (*((char *)this + 2735) < 0)
    operator delete(*((void **)this + 339));
  if (*((char *)this + 2711) < 0)
    operator delete(*((void **)this + 336));
  if (*((char *)this + 2687) < 0)
    operator delete(*((void **)this + 333));
  *((_QWORD *)this + 312) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 2632, *((_QWORD **)this + 330));
  if (*((char *)this + 2623) < 0)
    operator delete(*((void **)this + 325));
  *((_QWORD *)this + 312) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 2584);
  if (*((char *)this + 2575) < 0)
    operator delete(*((void **)this + 319));
  if (*((char *)this + 2551) < 0)
    operator delete(*((void **)this + 316));
  if (*((char *)this + 2527) < 0)
    operator delete(*((void **)this + 313));
  *((_QWORD *)this + 292) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 2472, *((_QWORD **)this + 310));
  if (*((char *)this + 2463) < 0)
    operator delete(*((void **)this + 305));
  *((_QWORD *)this + 292) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 2424);
  if (*((char *)this + 2415) < 0)
    operator delete(*((void **)this + 299));
  if (*((char *)this + 2391) < 0)
    operator delete(*((void **)this + 296));
  if (*((char *)this + 2367) < 0)
    operator delete(*((void **)this + 293));
  *((_QWORD *)this + 272) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 2312, *((_QWORD **)this + 290));
  if (*((char *)this + 2303) < 0)
    operator delete(*((void **)this + 285));
  *((_QWORD *)this + 272) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 2264);
  if (*((char *)this + 2255) < 0)
    operator delete(*((void **)this + 279));
  if (*((char *)this + 2231) < 0)
    operator delete(*((void **)this + 276));
  if (*((char *)this + 2207) < 0)
    operator delete(*((void **)this + 273));
  *((_QWORD *)this + 252) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 2152, *((_QWORD **)this + 270));
  if (*((char *)this + 2143) < 0)
    operator delete(*((void **)this + 265));
  *((_QWORD *)this + 252) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 2104);
  if (*((char *)this + 2095) < 0)
    operator delete(*((void **)this + 259));
  if (*((char *)this + 2071) < 0)
    operator delete(*((void **)this + 256));
  if (*((char *)this + 2047) < 0)
    operator delete(*((void **)this + 253));
  *((_QWORD *)this + 232) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 1992, *((_QWORD **)this + 250));
  if (*((char *)this + 1983) < 0)
    operator delete(*((void **)this + 245));
  *((_QWORD *)this + 232) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1944);
  if (*((char *)this + 1935) < 0)
    operator delete(*((void **)this + 239));
  if (*((char *)this + 1911) < 0)
    operator delete(*((void **)this + 236));
  if (*((char *)this + 1887) < 0)
    operator delete(*((void **)this + 233));
  *((_QWORD *)this + 212) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 1832, *((_QWORD **)this + 230));
  if (*((char *)this + 1823) < 0)
    operator delete(*((void **)this + 225));
  *((_QWORD *)this + 212) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1784);
  if (*((char *)this + 1775) < 0)
    operator delete(*((void **)this + 219));
  if (*((char *)this + 1751) < 0)
    operator delete(*((void **)this + 216));
  if (*((char *)this + 1727) < 0)
    operator delete(*((void **)this + 213));
  *((_QWORD *)this + 194) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 1672, *((char **)this + 210));
  *((_QWORD *)this + 194) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1640);
  if (*((char *)this + 1631) < 0)
    operator delete(*((void **)this + 201));
  if (*((char *)this + 1607) < 0)
    operator delete(*((void **)this + 198));
  if (*((char *)this + 1583) < 0)
    operator delete(*((void **)this + 195));
  *((_QWORD *)this + 176) = &unk_1E5D348D0;
  std::__tree<std::string>::destroy((uint64_t)this + 1528, *((char **)this + 192));
  *((_QWORD *)this + 176) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1496);
  if (*((char *)this + 1487) < 0)
    operator delete(*((void **)this + 183));
  if (*((char *)this + 1463) < 0)
    operator delete(*((void **)this + 180));
  if (*((char *)this + 1439) < 0)
    operator delete(*((void **)this + 177));
  *((_QWORD *)this + 156) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 1384, *((_QWORD **)this + 174));
  if (*((char *)this + 1375) < 0)
    operator delete(*((void **)this + 169));
  *((_QWORD *)this + 156) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1336);
  if (*((char *)this + 1327) < 0)
    operator delete(*((void **)this + 163));
  if (*((char *)this + 1303) < 0)
    operator delete(*((void **)this + 160));
  if (*((char *)this + 1279) < 0)
    operator delete(*((void **)this + 157));
  *((_QWORD *)this + 136) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 1224, *((_QWORD **)this + 154));
  if (*((char *)this + 1215) < 0)
    operator delete(*((void **)this + 149));
  *((_QWORD *)this + 136) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1176);
  if (*((char *)this + 1167) < 0)
    operator delete(*((void **)this + 143));
  if (*((char *)this + 1143) < 0)
    operator delete(*((void **)this + 140));
  if (*((char *)this + 1119) < 0)
    operator delete(*((void **)this + 137));
  *((_QWORD *)this + 118) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 1064, *((char **)this + 134));
  *((_QWORD *)this + 118) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1032);
  if (*((char *)this + 1023) < 0)
    operator delete(*((void **)this + 125));
  if (*((char *)this + 999) < 0)
    operator delete(*((void **)this + 122));
  if (*((char *)this + 975) < 0)
    operator delete(*((void **)this + 119));
  *((_QWORD *)this + 98) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 920, *((_QWORD **)this + 116));
  if (*((char *)this + 911) < 0)
    operator delete(*((void **)this + 111));
  *((_QWORD *)this + 98) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 872);
  if (*((char *)this + 863) < 0)
    operator delete(*((void **)this + 105));
  if (*((char *)this + 839) < 0)
    operator delete(*((void **)this + 102));
  if (*((char *)this + 815) < 0)
    operator delete(*((void **)this + 99));
  *((_QWORD *)this + 80) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 760, *((char **)this + 96));
  *((_QWORD *)this + 80) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 728);
  if (*((char *)this + 719) < 0)
    operator delete(*((void **)this + 87));
  if (*((char *)this + 695) < 0)
    operator delete(*((void **)this + 84));
  if (*((char *)this + 671) < 0)
    operator delete(*((void **)this + 81));
  *((_QWORD *)this + 60) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 616, *((_QWORD **)this + 78));
  if (*((char *)this + 607) < 0)
    operator delete(*((void **)this + 73));
  *((_QWORD *)this + 60) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 568);
  if (*((char *)this + 559) < 0)
    operator delete(*((void **)this + 67));
  if (*((char *)this + 535) < 0)
    operator delete(*((void **)this + 64));
  if (*((char *)this + 511) < 0)
    operator delete(*((void **)this + 61));
  *((_QWORD *)this + 40) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 456, *((_QWORD **)this + 58));
  if (*((char *)this + 447) < 0)
    operator delete(*((void **)this + 53));
  *((_QWORD *)this + 40) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 408);
  if (*((char *)this + 399) < 0)
    operator delete(*((void **)this + 47));
  if (*((char *)this + 375) < 0)
    operator delete(*((void **)this + 44));
  if (*((char *)this + 351) < 0)
    operator delete(*((void **)this + 41));
  *((_QWORD *)this + 22) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 296, *((char **)this + 38));
  *((_QWORD *)this + 22) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 264);
  if (*((char *)this + 255) < 0)
    operator delete(*((void **)this + 29));
  if (*((char *)this + 231) < 0)
    operator delete(*((void **)this + 26));
  if (*((char *)this + 207) < 0)
    operator delete(*((void **)this + 23));
  *((_QWORD *)this + 2) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 152, *((_QWORD **)this + 20));
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  *((_QWORD *)this + 2) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

uint64_t quasar::OptionValue<int>::OptionValue(uint64_t a1, const std::string *a2, _DWORD *a3, const std::string *a4, int a5)
{
  std::string *v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  void *__p[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  *(_OWORD *)(a1 + 8) = 0u;
  v10 = (std::string *)(a1 + 8);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_QWORD *)a1 = &unk_1E5D348D0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = a1 + 128;
  *(_QWORD *)(a1 + 136) = 0;
  v11 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v11 < 0)
  {
    if (a2->__r_.__value_.__l.__size_ != 9)
      goto LABEL_10;
    v12 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
  }
  else
  {
    v12 = (uint64_t *)a2;
    if (v11 != 9)
      goto LABEL_10;
  }
  v13 = *v12;
  v14 = *((unsigned __int8 *)v12 + 8);
  if (v13 == 0x656469727265766FLL && v14 == 115)
  {
    v32 = 0uLL;
    v33 = 0uLL;
    v30 = 0uLL;
    v31 = 0uLL;
    v28 = 0uLL;
    v29 = 0uLL;
    v26 = 0uLL;
    v27 = 0uLL;
    v24 = 0uLL;
    v25 = 0uLL;
    v22 = 0uLL;
    v23 = 0uLL;
    v20 = 0uLL;
    v21 = 0uLL;
    v18 = 0uLL;
    v19 = 0uLL;
    *(_OWORD *)__p = 0uLL;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"overrides option name is reserved", 33);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
LABEL_10:
  std::string::basic_string[abi:ne180100]<0>(__p, "<default>");
  *(_DWORD *)(a1 + 104) = *a3;
  std::string::operator=((std::string *)(a1 + 32), (const std::string *)__p);
  if (SBYTE7(v18) < 0)
    operator delete(__p[0]);
  std::string::operator=((std::string *)(a1 + 56), a4);
  *(_DWORD *)(a1 + 80) = a5;
  std::string::operator=(v10, a2);
  return a1;
}

void sub_1AD9B3D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v15;

  std::__tree<std::string>::destroy(v15, *(char **)(v14 + 128));
  quasar::OptionValueBase::~OptionValueBase((void **)v14);
  _Unwind_Resume(a1);
}

uint64_t quasar::OptionValue<double>::OptionValue(uint64_t a1, const std::string *a2, _QWORD *a3, const std::string *a4, int a5)
{
  std::string *v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  void *__p[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  *(_OWORD *)(a1 + 8) = 0u;
  v10 = (std::string *)(a1 + 8);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_QWORD *)a1 = &unk_1E5D34898;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = a1 + 128;
  *(_QWORD *)(a1 + 136) = 0;
  v11 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v11 < 0)
  {
    if (a2->__r_.__value_.__l.__size_ != 9)
      goto LABEL_10;
    v12 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
  }
  else
  {
    v12 = (uint64_t *)a2;
    if (v11 != 9)
      goto LABEL_10;
  }
  v13 = *v12;
  v14 = *((unsigned __int8 *)v12 + 8);
  if (v13 == 0x656469727265766FLL && v14 == 115)
  {
    v32 = 0uLL;
    v33 = 0uLL;
    v30 = 0uLL;
    v31 = 0uLL;
    v28 = 0uLL;
    v29 = 0uLL;
    v26 = 0uLL;
    v27 = 0uLL;
    v24 = 0uLL;
    v25 = 0uLL;
    v22 = 0uLL;
    v23 = 0uLL;
    v20 = 0uLL;
    v21 = 0uLL;
    v18 = 0uLL;
    v19 = 0uLL;
    *(_OWORD *)__p = 0uLL;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"overrides option name is reserved", 33);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
LABEL_10:
  std::string::basic_string[abi:ne180100]<0>(__p, "<default>");
  *(_QWORD *)(a1 + 104) = *a3;
  std::string::operator=((std::string *)(a1 + 32), (const std::string *)__p);
  if (SBYTE7(v18) < 0)
    operator delete(__p[0]);
  std::string::operator=((std::string *)(a1 + 56), a4);
  *(_DWORD *)(a1 + 80) = a5;
  std::string::operator=(v10, a2);
  return a1;
}

void sub_1AD9B3F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v15;

  std::__tree<std::string>::destroy(v15, *(char **)(v14 + 128));
  quasar::OptionValueBase::~OptionValueBase((void **)v14);
  _Unwind_Resume(a1);
}

uint64_t quasar::OptionValue<BOOL>::OptionValue(uint64_t a1, const std::string *a2, _BYTE *a3, const std::string *a4, int a5)
{
  std::string *v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  void *__p[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  *(_OWORD *)(a1 + 8) = 0u;
  v10 = (std::string *)(a1 + 8);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_QWORD *)a1 = &unk_1E5D34860;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = a1 + 128;
  *(_QWORD *)(a1 + 136) = 0;
  v11 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v11 < 0)
  {
    if (a2->__r_.__value_.__l.__size_ != 9)
      goto LABEL_10;
    v12 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
  }
  else
  {
    v12 = (uint64_t *)a2;
    if (v11 != 9)
      goto LABEL_10;
  }
  v13 = *v12;
  v14 = *((unsigned __int8 *)v12 + 8);
  if (v13 == 0x656469727265766FLL && v14 == 115)
  {
    v32 = 0uLL;
    v33 = 0uLL;
    v30 = 0uLL;
    v31 = 0uLL;
    v28 = 0uLL;
    v29 = 0uLL;
    v26 = 0uLL;
    v27 = 0uLL;
    v24 = 0uLL;
    v25 = 0uLL;
    v22 = 0uLL;
    v23 = 0uLL;
    v20 = 0uLL;
    v21 = 0uLL;
    v18 = 0uLL;
    v19 = 0uLL;
    *(_OWORD *)__p = 0uLL;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"overrides option name is reserved", 33);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
LABEL_10:
  std::string::basic_string[abi:ne180100]<0>(__p, "<default>");
  *(_BYTE *)(a1 + 104) = *a3;
  std::string::operator=((std::string *)(a1 + 32), (const std::string *)__p);
  if (SBYTE7(v18) < 0)
    operator delete(__p[0]);
  std::string::operator=((std::string *)(a1 + 56), a4);
  *(_DWORD *)(a1 + 80) = a5;
  std::string::operator=(v10, a2);
  return a1;
}

void sub_1AD9B413C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v15;

  std::__tree<std::string>::destroy(v15, *(char **)(v14 + 128));
  quasar::OptionValueBase::~OptionValueBase((void **)v14);
  _Unwind_Resume(a1);
}

uint64_t quasar::OptionValue<quasar::PTree>::OptionValue(uint64_t a1, const std::string *a2, uint64_t a3, const std::string *a4, int a5)
{
  std::string *v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  void *__p[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  *(_OWORD *)(a1 + 8) = 0u;
  v10 = (std::string *)(a1 + 8);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_QWORD *)a1 = &unk_1E5D347B8;
  quasar::PTree::PTree((quasar::PTree *)(a1 + 104));
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  v11 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v11 < 0)
  {
    if (a2->__r_.__value_.__l.__size_ != 9)
      goto LABEL_10;
    v12 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
  }
  else
  {
    v12 = (uint64_t *)a2;
    if (v11 != 9)
      goto LABEL_10;
  }
  v13 = *v12;
  v14 = *((unsigned __int8 *)v12 + 8);
  if (v13 == 0x656469727265766FLL && v14 == 115)
  {
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"overrides option name is reserved", 33);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
LABEL_10:
  std::string::basic_string[abi:ne180100]<0>(__p, "<default>");
  quasar::OptionValue<quasar::PTree>::update(a1, a3, (const std::string *)__p);
  if (SBYTE7(v18) < 0)
    operator delete(__p[0]);
  std::string::operator=((std::string *)(a1 + 56), a4);
  *(_DWORD *)(a1 + 80) = a5;
  std::string::operator=(v10, a2);
  return a1;
}

void sub_1AD9B4324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void **v14;
  quasar::PTree *v15;
  uint64_t v16;
  _QWORD **v17;

  std::__tree<std::__value_type<std::string,quasar::PTree>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PTree>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::PTree>>>::destroy(v16, *v17);
  quasar::PTree::~PTree(v15);
  quasar::OptionValueBase::~OptionValueBase(v14);
  _Unwind_Resume(a1);
}

std::string *quasar::OptionValue<quasar::PTree>::update(uint64_t a1, uint64_t a2, const std::string *a3)
{
  uint64_t v6;

  *(_DWORD *)(a1 + 104) = *(_DWORD *)a2;
  v6 = a1 + 104;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(a2 + 8));
  if (v6 != a2)
    std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(a1 + 136, *(std::string **)(a2 + 32), *(std::string **)(a2 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 56);
  return std::string::operator=((std::string *)(a1 + 32), a3);
}

uint64_t quasar::OptionValue<std::vector<std::string>>::OptionValue(uint64_t a1, const std::string *a2, uint64_t a3, const std::string *a4, int a5)
{
  std::string *v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  void *__p[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  *(_OWORD *)(a1 + 8) = 0u;
  v10 = (std::string *)(a1 + 8);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_QWORD *)a1 = &unk_1E5D34828;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = a1 + 144;
  *(_QWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  v11 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v11 < 0)
  {
    if (a2->__r_.__value_.__l.__size_ != 9)
      goto LABEL_10;
    v12 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
  }
  else
  {
    v12 = (uint64_t *)a2;
    if (v11 != 9)
      goto LABEL_10;
  }
  v13 = *v12;
  v14 = *((unsigned __int8 *)v12 + 8);
  if (v13 == 0x656469727265766FLL && v14 == 115)
  {
    v32 = 0uLL;
    v33 = 0uLL;
    v30 = 0uLL;
    v31 = 0uLL;
    v28 = 0uLL;
    v29 = 0uLL;
    v26 = 0uLL;
    v27 = 0uLL;
    v24 = 0uLL;
    v25 = 0uLL;
    v22 = 0uLL;
    v23 = 0uLL;
    v20 = 0uLL;
    v21 = 0uLL;
    v18 = 0uLL;
    v19 = 0uLL;
    *(_OWORD *)__p = 0uLL;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"overrides option name is reserved", 33);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
LABEL_10:
  std::string::basic_string[abi:ne180100]<0>(__p, "<default>");
  quasar::OptionValue<std::vector<std::string>>::update(a1, a3, (std::string *)__p);
  if (SBYTE7(v18) < 0)
    operator delete(__p[0]);
  std::string::operator=((std::string *)(a1 + 56), a4);
  *(_DWORD *)(a1 + 80) = a5;
  std::string::operator=(v10, a2);
  return a1;
}

void sub_1AD9B4594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v15;

  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(v15, *(_QWORD **)(v14 + 144));
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  quasar::OptionValueBase::~OptionValueBase((void **)v14);
  _Unwind_Resume(a1);
}

std::string *quasar::OptionValue<std::vector<std::string>>::update(uint64_t a1, uint64_t a2, std::string *__str)
{
  std::vector<std::wstring> *v5;

  v5 = (std::vector<std::wstring> *)(a1 + 104);
  if (v5 != (std::vector<std::wstring> *)a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v5, *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  return std::string::operator=((std::string *)(a1 + 32), __str);
}

void quasar::OptionValue<std::vector<std::string>>::updateOptionalFromPtree(std::string *a1, uint64_t a2, const void **a3)
{
  std::string::size_type *p_size;
  size_t v6;
  std::string *v7;
  const void *v8;
  int v9;
  const std::string::value_type *size;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string v14;
  std::string __p;
  std::string v16;
  char v17;

  p_size = &a1->__r_.__value_.__l.__size_;
  quasar::getOptional<std::vector<std::string>>(a2, (uint64_t)&a1->__r_.__value_.__l.__size_, &v16);
  if (*((char *)a3 + 23) >= 0)
    v6 = *((unsigned __int8 *)a3 + 23);
  else
    v6 = (size_t)a3[1];
  v7 = &v14;
  std::string::basic_string[abi:ne180100]((uint64_t)&v14, v6 + 1);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v14.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*((char *)a3 + 23) >= 0)
      v8 = a3;
    else
      v8 = *a3;
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 46;
  v9 = a1[1].__r_.__value_.__s.__data_[7];
  if (v9 >= 0)
    size = (const std::string::value_type *)p_size;
  else
    size = (const std::string::value_type *)a1->__r_.__value_.__l.__size_;
  if (v9 >= 0)
    v11 = a1[1].__r_.__value_.__s.__data_[7];
  else
    v11 = a1->__r_.__value_.__r.__words[2];
  v12 = std::string::append(&v14, size, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  quasar::OptionValue<std::vector<std::string>>::updateOptional(a1, (uint64_t)&v16, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (v17)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
}

void sub_1AD9B4760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a25)
  {
    __p = &a22;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OptionValue<std::vector<std::string>>::debugInfo(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD v32[2];
  _QWORD v33[11];
  char v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;

  v2 = quasar::OptionValue<std::string>::fallback(a1);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v32);
  v3 = *(char *)(a1 + 31);
  if (v3 >= 0)
    v4 = a1 + 8;
  else
    v4 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a1 + 31);
  else
    v5 = *(_QWORD *)(a1 + 16);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v4, v5);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"[", 1);
  v36 = ", ";
  v37 = 2;
  quasar::joinToStream<std::vector<std::string>>(v7, (uint64_t *)(v2 + 104), (uint64_t *)&v36);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"]", 1);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" (", 2);
  v11 = *(_QWORD *)(v2 + 32);
  v10 = v2 + 32;
  v9 = v11;
  v12 = *(char *)(v10 + 23);
  if (v12 >= 0)
    v13 = v10;
  else
    v13 = v9;
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(v10 + 23);
  else
    v14 = *(_QWORD *)(v10 + 8);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v13, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)")", 1);
  if (*(_QWORD *)(a1 + 152))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" overrides: [", 13);
    v16 = *(_QWORD **)(a1 + 136);
    v17 = (_QWORD *)(a1 + 144);
    if (v16 != (_QWORD *)(a1 + 144))
    {
      do
      {
        v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"\"", 1);
        v19 = *((char *)v16 + 55);
        if (v19 >= 0)
          v20 = (uint64_t)(v16 + 4);
        else
          v20 = v16[4];
        if (v19 >= 0)
          v21 = *((unsigned __int8 *)v16 + 55);
        else
          v21 = v16[5];
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
        v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"\": ", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"[", 1);
        v36 = ", ";
        v37 = 2;
        quasar::joinToStream<std::vector<std::string>>(v23, v16 + 7, (uint64_t *)&v36);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"]", 1);
        v24 = (_QWORD *)*v17;
        v25 = (_QWORD *)(a1 + 144);
        if (*v17)
        {
          do
          {
            v26 = v24;
            v24 = (_QWORD *)v24[1];
          }
          while (v24);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v25[2];
            v27 = *v26 == (_QWORD)v25;
            v25 = v26;
          }
          while (v27);
        }
        if (v16 != v26)
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", ", 2);
        v28 = (_QWORD *)v16[1];
        if (v28)
        {
          do
          {
            v29 = v28;
            v28 = (_QWORD *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            v29 = (_QWORD *)v16[2];
            v27 = *v29 == (_QWORD)v16;
            v16 = v29;
          }
          while (!v27);
        }
        v16 = v29;
      }
      while (v29 != v17);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"]", 1);
  }
  std::stringbuf::str();
  v32[0] = *MEMORY[0x1E0DE4F50];
  v30 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v32 + *(_QWORD *)(v32[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v33[0] = v30;
  v33[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v34 < 0)
    operator delete((void *)v33[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v35);
}

void sub_1AD9B4AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::OptionValue<std::vector<std::string>>::addOverride(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t *v6;
  std::vector<std::wstring> *v7;
  std::string v8;
  char v9;
  _QWORD v10[2];
  std::string *v11;

  v10[0] = a2;
  v10[1] = a3;
  quasar::getOptional<std::vector<std::string>>(a4, a1 + 8, &v8);
  if (v9)
  {
    v5 = (uint64_t *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string_view>(a1 + 136, (uint64_t)v10);
    v6 = v5;
    if ((uint64_t *)(a1 + 144) == v5)
    {
      std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_hint_unique_impl<std::string_view &,std::vector<std::string>&>((uint64_t **)(a1 + 136), v5, (uint64_t)v10, (__int128 **)&v8);
    }
    else
    {
      v7 = (std::vector<std::wstring> *)(v5 + 7);
      if (v6 + 7 != (uint64_t *)&v8)
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v7, (std::string *)v8.__r_.__value_.__l.__data_, (__int128 *)v8.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8.__r_.__value_.__l.__size_ - v8.__r_.__value_.__r.__words[0]) >> 3));
    }
    if (v9)
    {
      v11 = &v8;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
    }
  }
}

void sub_1AD9B4B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  if (a13)
  {
    *(_QWORD *)(v13 - 24) = &a10;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v13 - 24));
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OptionValue<std::vector<std::string>>::isOverridable()
{
  return 0;
}

std::string *quasar::OptionValue<std::vector<std::string>>::updateOptional(std::string *result, uint64_t a2, std::string *__str)
{
  uint64_t v4;
  std::vector<std::wstring> *v5;

  if (*(_BYTE *)(a2 + 24))
  {
    v4 = (uint64_t)result;
    v5 = (std::vector<std::wstring> *)&result[4].__r_.__value_.__r.__words[1];
    if (v5 != (std::vector<std::wstring> *)a2)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v5, *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    return std::string::operator=((std::string *)(v4 + 32), __str);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_hint_unique_impl<std::string_view &,std::vector<std::string>&>(uint64_t **a1, uint64_t *a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v9;
  const void **v10;
  uint64_t *v11[3];

  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__construct_node<std::string_view &,std::vector<std::string>&>((uint64_t)a1, a3, a4, (uint64_t)v11);
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v10, &v9, (const void **)v11[0] + 4);
  v7 = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v10, v6, v11[0]);
    v7 = v11[0];
    v11[0] = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  return v7;
}

void sub_1AD9B4C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__construct_node<std::string_view &,std::vector<std::string>&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 8;
  v8 = (char *)operator new(0x50uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  result = std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<std::string_view &,std::vector<std::string>&,0>((std::string *)(v8 + 32), a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1AD9B4D00(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<std::string_view &,std::vector<std::string>&,0>(std::string *__dst, uint64_t a2, __int128 **a3)
{
  size_t v4;
  const void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = *(const void **)a2;
  if (v4 >= 0x17)
  {
    v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v8 = v4 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    __dst->__r_.__value_.__l.__size_ = v4;
    __dst->__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst->__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
  }
  else
  {
    *((_BYTE *)&__dst->__r_.__value_.__s + 23) = v4;
    v7 = __dst;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v7, v6, v4);
LABEL_9:
  *((_BYTE *)v7 + v4) = 0;
  __dst[1].__r_.__value_.__r.__words[0] = 0;
  __dst[1].__r_.__value_.__l.__size_ = 0;
  __dst[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(__dst + 1, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  return __dst;
}

void sub_1AD9B4DEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::unique_ptr<kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~DecodeOptions(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

uint64_t kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~DecodeOptions(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 328);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 287) < 0)
    operator delete(*(void **)(a1 + 264));
  v3 = (void **)(a1 + 240);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

double quasar::ProcessingGraph::creator<quasar::PDecPhraseBookBlock>@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  v2 = (_QWORD *)operator new();
  bzero(v2, 0xC10uLL);
  v2[378] = off_1E5D35B18;
  v2[380] = 0;
  v2[382] = 0;
  v2[381] = 0;
  v2[379] = v2 + 380;
  v2[384] = 0;
  v2[383] = 0;
  *((_BYTE *)v2 + 3080) = 1;
  *v2 = &unk_1E5D04A38;
  v2[378] = &unk_1E5D04AC0;
  quasar::PdecPhraseBookOptions::PdecPhraseBookOptions((quasar::PdecPhraseBookOptions *)(v2 + 1));
  v2[377] = 0;
  result = 0.0;
  *(_OWORD *)(v2 + 373) = 0u;
  *(_OWORD *)(v2 + 375) = 0u;
  *(_OWORD *)(v2 + 369) = 0u;
  *(_OWORD *)(v2 + 371) = 0u;
  *v2 = off_1E5D37508;
  v2[378] = &off_1E5D375B0;
  *a1 = v2 + 378;
  return result;
}

void sub_1AD9B4FD0(_Unwind_Exception *a1)
{
  uint64_t v1;
  char **v2;

  quasar::ProcessingBlock::~ProcessingBlock(v2);
  MEMORY[0x1AF44D190](v1, 0x10F3C4030823AFDLL);
  _Unwind_Resume(a1);
}

double quasar::ProcessingGraph::creator<quasar::AlternativesProcessorBlock>@<D0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 272) = 0u;
  *(_OWORD *)(v2 + 288) = 0u;
  *(_OWORD *)(v2 + 304) = 0u;
  *(_OWORD *)(v2 + 320) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(_OWORD *)(v2 + 368) = 0u;
  *(_OWORD *)(v2 + 384) = 0u;
  *(_OWORD *)(v2 + 400) = 0u;
  *(_OWORD *)(v2 + 416) = 0u;
  *(_QWORD *)(v2 + 432) = 0;
  *(_QWORD *)(v2 + 400) = 0;
  *(_QWORD *)(v2 + 408) = 0;
  *(_QWORD *)(v2 + 392) = 0;
  *(_QWORD *)(v2 + 376) = off_1E5D35B18;
  *(_QWORD *)(v2 + 384) = v2 + 392;
  *(_QWORD *)(v2 + 416) = 0;
  *(_QWORD *)(v2 + 424) = 0;
  *(_BYTE *)(v2 + 432) = 1;
  *(_QWORD *)v2 = off_1E5D05580;
  *(_QWORD *)(v2 + 376) = &unk_1E5D05608;
  quasar::AlternativesProcessorOptions::AlternativesProcessorOptions((quasar::AlternativesProcessorOptions *)(v2 + 8));
  *(_QWORD *)v2 = off_1E5D39C50;
  *(_QWORD *)(v2 + 376) = off_1E5D39CF8;
  result = 0.0;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  *a1 = v2 + 376;
  return result;
}

void sub_1AD9B50F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  char **v2;

  quasar::ProcessingBlock::~ProcessingBlock(v2);
  MEMORY[0x1AF44D190](v1, 0x10F3C40C8FF1D3CLL);
  _Unwind_Resume(a1);
}

quasar::AlternativesProcessorOptions *quasar::AlternativesProcessorOptions::AlternativesProcessorOptions(quasar::AlternativesProcessorOptions *this)
{
  std::string v3;
  std::string __p;
  std::string v5;

  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E5D3A150;
  std::string::basic_string[abi:ne180100]<0>(&v5, "filter-redundant-tags");
  v3.__r_.__value_.__s.__data_[0] = 1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "flag on whether to filter out or keep hypotheses with redundant tags");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 16, &v5, &v3, &__p, 137);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v5, "tag-to-meta-json-file");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::basic_string[abi:ne180100]<0>(&v3, "a json file that contains a mapping between tags and their corresponding string in the meta info ");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 160, &v5, &__p, &v3, 137);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  return this;
}

void sub_1AD9B523C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v22 - 17) < 0)
    operator delete(*(void **)(v22 - 40));
  quasar::OptionValue<BOOL>::~OptionValue(v21);
  _Unwind_Resume(a1);
}

quasar::AlignmentProcessorBlock *quasar::ProcessingGraph::creator<quasar::AlignmentProcessorBlock>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  quasar::AlignmentProcessorBlock *result;

  v2 = (_QWORD *)operator new();
  bzero(v2, 0x3D8uLL);
  result = quasar::AlignmentProcessorBlock::AlignmentProcessorBlock((quasar::AlignmentProcessorBlock *)v2);
  *a1 = (char *)v2 + *(_QWORD *)(*v2 - 24);
  return result;
}

void sub_1AD9B5320(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C403D3D1680);
  _Unwind_Resume(a1);
}

quasar::AlignmentProcessorBlock *quasar::AlignmentProcessorBlock::AlignmentProcessorBlock(quasar::AlignmentProcessorBlock *this)
{
  int v2;
  int v3;
  int v4;
  int v5;
  std::string *v6;
  int v7;
  void *v9[2];
  uint64_t v10;
  void *v11[2];
  uint64_t v12;
  void *v13[2];
  uint64_t v14;
  void *v15[2];
  uint64_t v16;
  void *__p[2];
  uint64_t v18;

  *((_QWORD *)this + 115) = off_1E5D35B18;
  *((_QWORD *)this + 117) = 0;
  *((_QWORD *)this + 119) = 0;
  *((_QWORD *)this + 118) = 0;
  *((_QWORD *)this + 116) = (char *)this + 936;
  *((_QWORD *)this + 121) = 0;
  *((_QWORD *)this + 120) = 0;
  *((_BYTE *)this + 976) = 1;
  *(_QWORD *)this = &unk_1E5D05050;
  *((_QWORD *)this + 115) = &unk_1E5D050D8;
  quasar::AlignmentProcessorOptions::AlignmentProcessorOptions((quasar::AlignmentProcessorBlock *)((char *)this + 8));
  *((_QWORD *)this + 79) = &unk_1E5D05150;
  *((_QWORD *)this + 115) = &unk_1E5D051F0;
  *(_QWORD *)this = off_1E5D38FC8;
  *((_QWORD *)this + 115) = &off_1E5D390C8;
  *((_QWORD *)this + 79) = &off_1E5D39028;
  std::string::basic_string[abi:ne180100]<0>(__p, "source");
  if (SHIBYTE(v18) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 640), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v2 = SHIBYTE(v18);
    *((_BYTE *)this + 664) = 0;
    *((_QWORD *)this + 84) = 0;
    *((_QWORD *)this + 86) = 0;
    *((_QWORD *)this + 85) = 0;
    if (v2 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *((_OWORD *)this + 40) = *(_OWORD *)__p;
    *((_QWORD *)this + 82) = v18;
    *((_BYTE *)this + 664) = 0;
    *((_QWORD *)this + 84) = 0;
    *((_QWORD *)this + 86) = 0;
    *((_QWORD *)this + 85) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v15, "segmentor-encode");
  if (SHIBYTE(v16) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 29, (const std::string::value_type *)v15[0], (std::string::size_type)v15[1]);
    v3 = SHIBYTE(v16);
    *((_BYTE *)this + 720) = 0;
    *((_QWORD *)this + 91) = 0;
    *((_QWORD *)this + 93) = 0;
    *((_QWORD *)this + 92) = 0;
    if (v3 < 0)
      operator delete(v15[0]);
  }
  else
  {
    *(_OWORD *)((char *)this + 696) = *(_OWORD *)v15;
    *((_QWORD *)this + 89) = v16;
    *((_BYTE *)this + 720) = 0;
    *((_QWORD *)this + 91) = 0;
    *((_QWORD *)this + 93) = 0;
    *((_QWORD *)this + 92) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "pdec-decode");
  if (SHIBYTE(v14) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 752), (const std::string::value_type *)v13[0], (std::string::size_type)v13[1]);
    v4 = SHIBYTE(v14);
    *((_BYTE *)this + 776) = 0;
    *((_QWORD *)this + 98) = 0;
    *((_QWORD *)this + 100) = 0;
    *((_QWORD *)this + 99) = 0;
    if (v4 < 0)
      operator delete(v13[0]);
  }
  else
  {
    *((_OWORD *)this + 47) = *(_OWORD *)v13;
    *((_QWORD *)this + 96) = v14;
    *((_BYTE *)this + 776) = 0;
    *((_QWORD *)this + 98) = 0;
    *((_QWORD *)this + 100) = 0;
    *((_QWORD *)this + 99) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v11, "segmentor-decode");
  if (SHIBYTE(v12) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 808), (const std::string::value_type *)v11[0], (std::string::size_type)v11[1]);
    v5 = SHIBYTE(v12);
    *((_BYTE *)this + 832) = 0;
    *((_QWORD *)this + 105) = 0;
    *((_QWORD *)this + 107) = 0;
    *((_QWORD *)this + 106) = 0;
    if (v5 < 0)
      operator delete(v11[0]);
  }
  else
  {
    *(_OWORD *)((char *)this + 808) = *(_OWORD *)v11;
    *((_QWORD *)this + 103) = v12;
    *((_BYTE *)this + 832) = 0;
    *((_QWORD *)this + 105) = 0;
    *((_QWORD *)this + 107) = 0;
    *((_QWORD *)this + 106) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v9, "tokenized");
  v6 = (std::string *)((char *)this + 864);
  if (SHIBYTE(v10) < 0)
  {
    std::string::__init_copy_ctor_external(v6, (const std::string::value_type *)v9[0], (std::string::size_type)v9[1]);
    v7 = SHIBYTE(v10);
    *((_BYTE *)this + 888) = 0;
    *((_QWORD *)this + 112) = 0;
    *((_QWORD *)this + 114) = 0;
    *((_QWORD *)this + 113) = 0;
    if (v7 < 0)
      operator delete(v9[0]);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)v9;
    *((_QWORD *)this + 110) = v10;
    *((_BYTE *)this + 888) = 0;
    *((_QWORD *)this + 112) = 0;
    *((_QWORD *)this + 114) = 0;
    *((_QWORD *)this + 113) = 0;
  }
  return this;
}

void sub_1AD9B5630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;
  quasar::AlignmentProcessorOptions *v40;
  void **v41;
  void **v42;
  void **v43;
  void **v44;
  uint64_t v45;
  uint64_t v46;

  if (a15 < 0)
    operator delete(__p);
  quasar::ProcessingInput::~ProcessingInput(v44);
  quasar::ProcessingInput::~ProcessingInput(v43);
  quasar::ProcessingInput::~ProcessingInput(v42);
  quasar::ProcessingInput::~ProcessingInput(v41);
  *(_QWORD *)v39 = v45;
  *(_QWORD *)(v39 + *(_QWORD *)(v45 - 24)) = v46;
  quasar::AlignmentProcessorOptions::~AlignmentProcessorOptions(v40);
  quasar::ProcessingBlock::~ProcessingBlock((char **)(v39 + 920));
  _Unwind_Resume(a1);
}

void sub_1AD9B5700()
{
  JUMPOUT(0x1AD9B56D4);
}

void sub_1AD9B5708()
{
  JUMPOUT(0x1AD9B56DCLL);
}

void sub_1AD9B5710()
{
  JUMPOUT(0x1AD9B56F0);
}

void quasar::ProcessingInput::~ProcessingInput(void **this)
{
  void **v2;

  v2 = this + 4;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

quasar::AlignmentProcessorOptions *quasar::AlignmentProcessorOptions::AlignmentProcessorOptions(quasar::AlignmentProcessorOptions *this)
{
  _QWORD *v2;
  std::string v4;
  std::string __p;
  std::string v6;

  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = &unk_1E5D397F8;
  std::string::basic_string[abi:ne180100]<0>(&v6, "word-level-alignments");
  v4.__r_.__value_.__s.__data_[0] = 1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "If set to true, then the BPE level alignments are merged into word level alignments");
  v2 = (_QWORD *)quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 24, &v6, &v4, &__p, 156);
  *((_QWORD *)this + 2) = &unk_1E5D38C10;
  *v2 = &unk_1E5D38C50;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v6, "avoid-crossing-words");
  v4.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "If set to True, then the Alignment Processor Block expects the tokenized translations and the alignment ranges do not cross the tokenized words");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 168, &v6, &v4, &__p, 168);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v6, "use-stripped-token-text");
  v4.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "If set to true, the whitespace stripped surface token representation is used instead of the internal representation.");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 312, &v6, &v4, &__p, 243);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v6, "mode");
  std::string::basic_string[abi:ne180100]<0>(&__p, "default");
  std::string::basic_string[abi:ne180100]<0>(&v4, "meta info mode and format for projections (default / structured_prediction)");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 464, &v6, &__p, &v4, 249);
  *((_QWORD *)this + 57) = &unk_1E5D38B90;
  *((_QWORD *)this + 58) = &unk_1E5D38BD0;
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  return this;
}

void sub_1AD9B596C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  quasar::OptionValue<BOOL>::~OptionValue(v29);
  quasar::OptionValue<BOOL>::~OptionValue(v28);
  quasar::OverridableOptionValue<BOOL>::~OverridableOptionValue(v27);
  _Unwind_Resume(a1);
}

void sub_1AD9B5A10(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  JUMPOUT(0x1AD9B5A00);
}

void sub_1AD9B5A40()
{
  JUMPOUT(0x1AD9B5A00);
}

void sub_1AD9B5A48(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  JUMPOUT(0x1AD9B5A08);
}

uint64_t quasar::OverridableOptionValue<BOOL>::~OverridableOptionValue(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = &unk_1E5D34860;
  std::__tree<std::string>::destroy(a1 + 128, *(char **)(a1 + 136));
  *(_QWORD *)(a1 + 8) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 96);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t quasar::OverridableOptionValue<BOOL>::isOverridable()
{
  return 1;
}

uint64_t `virtual thunk to'quasar::OverridableOptionValue<BOOL>::isOverridable()
{
  return 1;
}

uint64_t quasar::OverridableOptionValue<std::string>::isOverridable()
{
  return 1;
}

uint64_t `virtual thunk to'quasar::OverridableOptionValue<std::string>::isOverridable()
{
  return 1;
}

void quasar::AlignmentProcessorOptions::~AlignmentProcessorOptions(quasar::AlignmentProcessorOptions *this)
{
  *(_QWORD *)this = &unk_1E5D397F8;
  *((_QWORD *)this + 58) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 600, *((_QWORD **)this + 76));
  if (*((char *)this + 591) < 0)
    operator delete(*((void **)this + 71));
  *((_QWORD *)this + 58) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 552);
  if (*((char *)this + 543) < 0)
    operator delete(*((void **)this + 65));
  if (*((char *)this + 519) < 0)
    operator delete(*((void **)this + 62));
  if (*((char *)this + 495) < 0)
    operator delete(*((void **)this + 59));
  *((_QWORD *)this + 39) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 432, *((char **)this + 55));
  *((_QWORD *)this + 39) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 400);
  if (*((char *)this + 391) < 0)
    operator delete(*((void **)this + 46));
  if (*((char *)this + 367) < 0)
    operator delete(*((void **)this + 43));
  if (*((char *)this + 343) < 0)
    operator delete(*((void **)this + 40));
  *((_QWORD *)this + 21) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 288, *((char **)this + 37));
  *((_QWORD *)this + 21) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 256);
  if (*((char *)this + 247) < 0)
    operator delete(*((void **)this + 28));
  if (*((char *)this + 223) < 0)
    operator delete(*((void **)this + 25));
  if (*((char *)this + 199) < 0)
    operator delete(*((void **)this + 22));
  *((_QWORD *)this + 3) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 144, *((char **)this + 19));
  *((_QWORD *)this + 3) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 112);
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
}

quasar::DoNotTranslateBlock *quasar::ProcessingGraph::creator<quasar::DoNotTranslateBlock>@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  quasar::DoNotTranslateBlock *result;

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_QWORD *)(v2 + 176) = 0;
  result = quasar::DoNotTranslateBlock::DoNotTranslateBlock((quasar::DoNotTranslateBlock *)v2);
  *a1 = v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
  return result;
}

void sub_1AD9B5D38(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C408B4D3B57);
  _Unwind_Resume(a1);
}

quasar::DoNotTranslateBlock *quasar::DoNotTranslateBlock::DoNotTranslateBlock(quasar::DoNotTranslateBlock *this)
{
  int v2;
  std::string *v3;
  int v4;
  void *v6[2];
  uint64_t v7;
  void *__p[2];
  uint64_t v9;

  *((_QWORD *)this + 15) = off_1E5D35B18;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 16) = (char *)this + 136;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_BYTE *)this + 176) = 1;
  *(_QWORD *)this = &unk_1E5D04608;
  *((_QWORD *)this + 15) = &unk_1E5D046A8;
  *(_QWORD *)this = &off_1E5D36EB0;
  *((_QWORD *)this + 15) = off_1E5D36F60;
  std::string::basic_string[abi:ne180100]<0>(__p, "source");
  if (SHIBYTE(v9) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v2 = SHIBYTE(v9);
    *((_BYTE *)this + 32) = 0;
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 5) = 0;
    if (v2 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)((char *)this + 8) = *(_OWORD *)__p;
    *((_QWORD *)this + 3) = v9;
    *((_BYTE *)this + 32) = 0;
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 5) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "target");
  v3 = (std::string *)((char *)this + 64);
  if (SHIBYTE(v7) < 0)
  {
    std::string::__init_copy_ctor_external(v3, (const std::string::value_type *)v6[0], (std::string::size_type)v6[1]);
    v4 = SHIBYTE(v7);
    *((_BYTE *)this + 88) = 0;
    *((_QWORD *)this + 13) = 0;
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 12) = 0;
    if (v4 < 0)
      operator delete(v6[0]);
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)v6;
    *((_QWORD *)this + 10) = v7;
    *((_BYTE *)this + 88) = 0;
    *((_QWORD *)this + 13) = 0;
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 12) = 0;
  }
  return this;
}

void sub_1AD9B5EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  char **v20;
  void **v21;

  if (a14 < 0)
    operator delete(__p);
  quasar::ProcessingInput::~ProcessingInput(v21);
  quasar::ProcessingBlock::~ProcessingBlock(v20);
  _Unwind_Resume(a1);
}

quasar::AmbiguityAnnotatorBlock *quasar::ProcessingGraph::creator<quasar::AmbiguityAnnotatorBlock>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  quasar::AmbiguityAnnotatorBlock *result;

  v2 = (_QWORD *)operator new();
  bzero(v2, 0xAD0uLL);
  result = quasar::AmbiguityAnnotatorBlock::AmbiguityAnnotatorBlock((quasar::AmbiguityAnnotatorBlock *)v2);
  *a1 = (char *)v2 + *(_QWORD *)(*v2 - 24);
  return result;
}

void sub_1AD9B5F5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C400DFE6407);
  _Unwind_Resume(a1);
}

quasar::AmbiguityAnnotatorBlock *quasar::AmbiguityAnnotatorBlock::AmbiguityAnnotatorBlock(quasar::AmbiguityAnnotatorBlock *this)
{
  int v2;
  std::string *v3;
  int v4;
  void *v6[2];
  uint64_t v7;
  void *__p[2];
  uint64_t v9;

  *((_QWORD *)this + 338) = off_1E5D35B18;
  *((_QWORD *)this + 340) = 0;
  *((_QWORD *)this + 342) = 0;
  *((_QWORD *)this + 341) = 0;
  *((_QWORD *)this + 339) = (char *)this + 2720;
  *((_QWORD *)this + 344) = 0;
  *((_QWORD *)this + 343) = 0;
  *((_BYTE *)this + 2760) = 1;
  *(_QWORD *)this = off_1E5D05268;
  *((_QWORD *)this + 338) = &unk_1E5D052F0;
  quasar::AmbiguityAnnotatorOptions::AmbiguityAnnotatorOptions((quasar::AmbiguityAnnotatorBlock *)((char *)this + 8));
  *((_QWORD *)this + 321) = &unk_1E5D05368;
  *((_QWORD *)this + 338) = &unk_1E5D05408;
  *(_QWORD *)this = off_1E5D39168;
  *((_QWORD *)this + 338) = off_1E5D39268;
  *((_QWORD *)this + 321) = &off_1E5D391C8;
  std::string::basic_string[abi:ne180100]<0>(__p, "source");
  if (SHIBYTE(v9) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 2576), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v2 = SHIBYTE(v9);
    *((_BYTE *)this + 2600) = 0;
    *((_QWORD *)this + 326) = 0;
    *((_QWORD *)this + 328) = 0;
    *((_QWORD *)this + 327) = 0;
    if (v2 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *((_OWORD *)this + 161) = *(_OWORD *)__p;
    *((_QWORD *)this + 324) = v9;
    *((_BYTE *)this + 2600) = 0;
    *((_QWORD *)this + 326) = 0;
    *((_QWORD *)this + 328) = 0;
    *((_QWORD *)this + 327) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "nbest");
  v3 = (std::string *)((char *)this + 2632);
  if (SHIBYTE(v7) < 0)
  {
    std::string::__init_copy_ctor_external(v3, (const std::string::value_type *)v6[0], (std::string::size_type)v6[1]);
    v4 = SHIBYTE(v7);
    *((_BYTE *)this + 2656) = 0;
    *((_QWORD *)this + 333) = 0;
    *((_QWORD *)this + 335) = 0;
    *((_QWORD *)this + 334) = 0;
    if (v4 < 0)
      operator delete(v6[0]);
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)v6;
    *((_QWORD *)this + 331) = v7;
    *((_BYTE *)this + 2656) = 0;
    *((_QWORD *)this + 333) = 0;
    *((_QWORD *)this + 335) = 0;
    *((_QWORD *)this + 334) = 0;
  }
  *((_OWORD *)this + 168) = 0u;
  return this;
}

void sub_1AD9B6120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  quasar::AmbiguityAnnotatorOptions *v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;

  if (a14 < 0)
    operator delete(__p);
  quasar::ProcessingInput::~ProcessingInput(v22);
  *(_QWORD *)v20 = v23;
  *(_QWORD *)(v20 + *(_QWORD *)(v23 - 24)) = v24;
  quasar::AmbiguityAnnotatorOptions::~AmbiguityAnnotatorOptions(v21);
  quasar::ProcessingBlock::~ProcessingBlock((char **)(v20 + 2704));
  _Unwind_Resume(a1);
}

quasar::AmbiguityAnnotatorOptions *quasar::AmbiguityAnnotatorOptions::AmbiguityAnnotatorOptions(quasar::AmbiguityAnnotatorOptions *this)
{
  _QWORD *v2;
  std::string __p;
  std::string v5;
  std::string v6;

  *(_QWORD *)quasar::PhraseBookOptions::PhraseBookOptions(this) = &unk_1E5D39840;
  std::string::basic_string[abi:ne180100]<0>(&v6, "source-locale");
  std::string::basic_string[abi:ne180100]<0>(&v5, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "source locale");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 1216, &v6, &v5, &__p, 144);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v6, "disambiguation-dictionary-file");
  std::string::basic_string[abi:ne180100]<0>(&v5, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "disambiguation dictionary file");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 1376, &v6, &v5, &__p, 144);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v6, "max-match-length");
  LODWORD(__p.__r_.__value_.__l.__data_) = 4;
  std::string::basic_string[abi:ne180100]<0>(&v5, "maximum token sequence length in matching");
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 1536, &v6, &__p, &v5, 173);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v6, "prefer-position");
  __p.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v5, "prefer early match position over multiword matches");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 1680, &v6, &__p, &v5, 173);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v6, "prefer-multiword");
  __p.__r_.__value_.__s.__data_[0] = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "prefer longer multiword matches to shorter ones");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 1824, &v6, &__p, &v5, 173);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v6, "multisense-keep");
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v5, "number of senses to keep when several senses match a word in a hypotheses");
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 1968, &v6, &__p, &v5, 144);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v6, "strip-gender");
  __p.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v5, "keep 'gender' in the metainfo (false), or remove it (true)");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 2112, &v6, &__p, &v5, 247);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v6, "prune-nbest");
  __p.__r_.__value_.__s.__data_[0] = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "if we have alternatives, remove nbest entries that are not alternatives (false, for gender disambiguation compatibility)");
  v2 = (_QWORD *)quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 2264, &v6, &__p, &v5, 256);
  *((_QWORD *)this + 282) = &unk_1E5D38C10;
  *v2 = &unk_1E5D38C50;
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v6, "allow-multiple-same-sense-alternatives");
  __p.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v5, "allow the same sense to be annotated on more than one hypothesis (true, for gender disambiguation compatibility)");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 2416, &v6, &__p, &v5, 266);
  *((_QWORD *)this + 301) = &unk_1E5D38C10;
  *((_QWORD *)this + 302) = &unk_1E5D38C50;
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  return this;
}

void sub_1AD9B65B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  quasar::PhraseBookOptions *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  quasar::OverridableOptionValue<BOOL>::~OverridableOptionValue(v32);
  quasar::OptionValue<BOOL>::~OptionValue(v31);
  quasar::OptionValue<int>::~OptionValue(v30);
  quasar::OptionValue<BOOL>::~OptionValue(v29);
  quasar::OptionValue<BOOL>::~OptionValue(v28);
  quasar::OptionValue<int>::~OptionValue(v27);
  quasar::OptionValue<std::string>::~OptionValue(v26);
  quasar::OptionValue<std::string>::~OptionValue(v25);
  quasar::PhraseBookOptions::~PhraseBookOptions(v24);
  _Unwind_Resume(a1);
}

void sub_1AD9B6670(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  JUMPOUT(0x1AD9B6630);
}

void sub_1AD9B66A0()
{
  JUMPOUT(0x1AD9B6630);
}

void sub_1AD9B66A8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  JUMPOUT(0x1AD9B6638);
}

void sub_1AD9B66D8()
{
  JUMPOUT(0x1AD9B6638);
}

void sub_1AD9B66E0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  JUMPOUT(0x1AD9B6640);
}

void sub_1AD9B6710()
{
  JUMPOUT(0x1AD9B6640);
}

void sub_1AD9B6718(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  JUMPOUT(0x1AD9B6648);
}

void sub_1AD9B6748()
{
  JUMPOUT(0x1AD9B6648);
}

void sub_1AD9B6750(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  JUMPOUT(0x1AD9B6650);
}

void sub_1AD9B6780()
{
  JUMPOUT(0x1AD9B6650);
}

void sub_1AD9B6788(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  JUMPOUT(0x1AD9B6658);
}

void sub_1AD9B67D0()
{
  JUMPOUT(0x1AD9B6658);
}

void sub_1AD9B67D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  JUMPOUT(0x1AD9B6660);
}

void sub_1AD9B6820()
{
  JUMPOUT(0x1AD9B6660);
}

quasar::PhraseBookOptions *quasar::PhraseBookOptions::PhraseBookOptions(quasar::PhraseBookOptions *this)
{
  std::string v3;
  std::string __p;
  std::string v5;

  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = &unk_1E5D36648;
  std::string::basic_string[abi:ne180100]<0>(&v5, "case-sensitive");
  v3.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "case sensitive phrase book?");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 16, &v5, &v3, &__p, 133);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v5, "pb-file-list");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::basic_string[abi:ne180100]<0>(&v3, "phrase book file list");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 160, &v5, &__p, &v3, 133);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v5, "nbest");
  LODWORD(v3.__r_.__value_.__l.__data_) = 3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "maximum entries in nbest list to produce");
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 320, &v5, &v3, &__p, 133);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v5, "reset-meta-info");
  v3.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "reset metaInfo json");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 464, &v5, &v3, &__p, 133);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v5, "phrase-book-mode");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::basic_string[abi:ne180100]<0>(&v3, "used to disable phrase book block");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 608, &v5, &__p, &v3, 133);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v5, "filter-entries");
  v3.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "filter to make translations unique");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 768, &v5, &v3, &__p, 184);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v5, "normalization-pattern-file");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::basic_string[abi:ne180100]<0>(&v3, "apply regular expressions from file for normalized lookup");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 912, &v5, &__p, &v3, 187);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v5, "normalize-on-load");
  v3.__r_.__value_.__s.__data_[0] = 1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "apply normalization (lowercaseing/regex) to phrasebook keys on load");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 1072, &v5, &v3, &__p, 196);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  return this;
}

void sub_1AD9B6BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  quasar::OptionValue<std::string>::~OptionValue(v33);
  quasar::OptionValue<BOOL>::~OptionValue(v32);
  quasar::OptionValue<std::string>::~OptionValue(v31);
  quasar::OptionValue<BOOL>::~OptionValue(v30);
  quasar::OptionValue<int>::~OptionValue(v29);
  quasar::OptionValue<std::string>::~OptionValue(v28);
  quasar::OptionValue<BOOL>::~OptionValue(v27);
  _Unwind_Resume(a1);
}

void sub_1AD9B6C98(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  JUMPOUT(0x1AD9B6C68);
}

void sub_1AD9B6CC8()
{
  JUMPOUT(0x1AD9B6C68);
}

void sub_1AD9B6CD0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  JUMPOUT(0x1AD9B6C70);
}

void sub_1AD9B6D18()
{
  JUMPOUT(0x1AD9B6C70);
}

void sub_1AD9B6D20(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  JUMPOUT(0x1AD9B6C78);
}

void sub_1AD9B6D50()
{
  JUMPOUT(0x1AD9B6C78);
}

void sub_1AD9B6D58(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  JUMPOUT(0x1AD9B6C80);
}

void sub_1AD9B6D88()
{
  JUMPOUT(0x1AD9B6C80);
}

void sub_1AD9B6D90(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  JUMPOUT(0x1AD9B6C88);
}

void sub_1AD9B6DD8()
{
  JUMPOUT(0x1AD9B6C88);
}

void sub_1AD9B6DE0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  JUMPOUT(0x1AD9B6C90);
}

void quasar::PhraseBookOptions::~PhraseBookOptions(quasar::PhraseBookOptions *this)
{
  *(_QWORD *)this = &unk_1E5D36648;
  *((_QWORD *)this + 134) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 1192, *((char **)this + 150));
  *((_QWORD *)this + 134) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1160);
  if (*((char *)this + 1151) < 0)
    operator delete(*((void **)this + 141));
  if (*((char *)this + 1127) < 0)
    operator delete(*((void **)this + 138));
  if (*((char *)this + 1103) < 0)
    operator delete(*((void **)this + 135));
  *((_QWORD *)this + 114) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 1048, *((_QWORD **)this + 132));
  if (*((char *)this + 1039) < 0)
    operator delete(*((void **)this + 127));
  *((_QWORD *)this + 114) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1000);
  if (*((char *)this + 991) < 0)
    operator delete(*((void **)this + 121));
  if (*((char *)this + 967) < 0)
    operator delete(*((void **)this + 118));
  if (*((char *)this + 943) < 0)
    operator delete(*((void **)this + 115));
  *((_QWORD *)this + 96) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 888, *((char **)this + 112));
  *((_QWORD *)this + 96) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 856);
  if (*((char *)this + 847) < 0)
    operator delete(*((void **)this + 103));
  if (*((char *)this + 823) < 0)
    operator delete(*((void **)this + 100));
  if (*((char *)this + 799) < 0)
    operator delete(*((void **)this + 97));
  *((_QWORD *)this + 76) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 744, *((_QWORD **)this + 94));
  if (*((char *)this + 735) < 0)
    operator delete(*((void **)this + 89));
  *((_QWORD *)this + 76) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 696);
  if (*((char *)this + 687) < 0)
    operator delete(*((void **)this + 83));
  if (*((char *)this + 663) < 0)
    operator delete(*((void **)this + 80));
  if (*((char *)this + 639) < 0)
    operator delete(*((void **)this + 77));
  *((_QWORD *)this + 58) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 584, *((char **)this + 74));
  *((_QWORD *)this + 58) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 552);
  if (*((char *)this + 543) < 0)
    operator delete(*((void **)this + 65));
  if (*((char *)this + 519) < 0)
    operator delete(*((void **)this + 62));
  if (*((char *)this + 495) < 0)
    operator delete(*((void **)this + 59));
  *((_QWORD *)this + 40) = &unk_1E5D348D0;
  std::__tree<std::string>::destroy((uint64_t)this + 440, *((char **)this + 56));
  *((_QWORD *)this + 40) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 408);
  if (*((char *)this + 399) < 0)
    operator delete(*((void **)this + 47));
  if (*((char *)this + 375) < 0)
    operator delete(*((void **)this + 44));
  if (*((char *)this + 351) < 0)
    operator delete(*((void **)this + 41));
  *((_QWORD *)this + 20) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 296, *((_QWORD **)this + 38));
  if (*((char *)this + 287) < 0)
    operator delete(*((void **)this + 33));
  *((_QWORD *)this + 20) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 248);
  if (*((char *)this + 239) < 0)
    operator delete(*((void **)this + 27));
  if (*((char *)this + 215) < 0)
    operator delete(*((void **)this + 24));
  if (*((char *)this + 191) < 0)
    operator delete(*((void **)this + 21));
  *((_QWORD *)this + 2) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 136, *((char **)this + 18));
  *((_QWORD *)this + 2) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

void quasar::AmbiguityAnnotatorOptions::~AmbiguityAnnotatorOptions(quasar::AmbiguityAnnotatorOptions *this)
{
  *(_QWORD *)this = &unk_1E5D39840;
  *((_QWORD *)this + 302) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 2536, *((char **)this + 318));
  *((_QWORD *)this + 302) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 2504);
  if (*((char *)this + 2495) < 0)
    operator delete(*((void **)this + 309));
  if (*((char *)this + 2471) < 0)
    operator delete(*((void **)this + 306));
  if (*((char *)this + 2447) < 0)
    operator delete(*((void **)this + 303));
  *((_QWORD *)this + 283) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 2384, *((char **)this + 299));
  *((_QWORD *)this + 283) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 2352);
  if (*((char *)this + 2343) < 0)
    operator delete(*((void **)this + 290));
  if (*((char *)this + 2319) < 0)
    operator delete(*((void **)this + 287));
  if (*((char *)this + 2295) < 0)
    operator delete(*((void **)this + 284));
  *((_QWORD *)this + 264) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 2232, *((char **)this + 280));
  *((_QWORD *)this + 264) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 2200);
  if (*((char *)this + 2191) < 0)
    operator delete(*((void **)this + 271));
  if (*((char *)this + 2167) < 0)
    operator delete(*((void **)this + 268));
  if (*((char *)this + 2143) < 0)
    operator delete(*((void **)this + 265));
  *((_QWORD *)this + 246) = &unk_1E5D348D0;
  std::__tree<std::string>::destroy((uint64_t)this + 2088, *((char **)this + 262));
  *((_QWORD *)this + 246) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 2056);
  if (*((char *)this + 2047) < 0)
    operator delete(*((void **)this + 253));
  if (*((char *)this + 2023) < 0)
    operator delete(*((void **)this + 250));
  if (*((char *)this + 1999) < 0)
    operator delete(*((void **)this + 247));
  *((_QWORD *)this + 228) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 1944, *((char **)this + 244));
  *((_QWORD *)this + 228) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1912);
  if (*((char *)this + 1903) < 0)
    operator delete(*((void **)this + 235));
  if (*((char *)this + 1879) < 0)
    operator delete(*((void **)this + 232));
  if (*((char *)this + 1855) < 0)
    operator delete(*((void **)this + 229));
  *((_QWORD *)this + 210) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 1800, *((char **)this + 226));
  *((_QWORD *)this + 210) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1768);
  if (*((char *)this + 1759) < 0)
    operator delete(*((void **)this + 217));
  if (*((char *)this + 1735) < 0)
    operator delete(*((void **)this + 214));
  if (*((char *)this + 1711) < 0)
    operator delete(*((void **)this + 211));
  *((_QWORD *)this + 192) = &unk_1E5D348D0;
  std::__tree<std::string>::destroy((uint64_t)this + 1656, *((char **)this + 208));
  *((_QWORD *)this + 192) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1624);
  if (*((char *)this + 1615) < 0)
    operator delete(*((void **)this + 199));
  if (*((char *)this + 1591) < 0)
    operator delete(*((void **)this + 196));
  if (*((char *)this + 1567) < 0)
    operator delete(*((void **)this + 193));
  *((_QWORD *)this + 172) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 1512, *((_QWORD **)this + 190));
  if (*((char *)this + 1503) < 0)
    operator delete(*((void **)this + 185));
  *((_QWORD *)this + 172) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1464);
  if (*((char *)this + 1455) < 0)
    operator delete(*((void **)this + 179));
  if (*((char *)this + 1431) < 0)
    operator delete(*((void **)this + 176));
  if (*((char *)this + 1407) < 0)
    operator delete(*((void **)this + 173));
  *((_QWORD *)this + 152) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 1352, *((_QWORD **)this + 170));
  if (*((char *)this + 1343) < 0)
    operator delete(*((void **)this + 165));
  *((_QWORD *)this + 152) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1304);
  if (*((char *)this + 1295) < 0)
    operator delete(*((void **)this + 159));
  if (*((char *)this + 1271) < 0)
    operator delete(*((void **)this + 156));
  if (*((char *)this + 1247) < 0)
    operator delete(*((void **)this + 153));
  quasar::PhraseBookOptions::~PhraseBookOptions(this);
}

quasar::SimpleTokenizerOptions *quasar::ProcessingGraph::creator<quasar::SimpleTokenizerBlock>@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  quasar::SimpleTokenizerOptions *result;

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_QWORD *)(v2 + 208) = off_1E5D35B18;
  *(_QWORD *)(v2 + 224) = 0;
  *(_QWORD *)(v2 + 232) = 0;
  *(_QWORD *)(v2 + 240) = 0;
  *(_QWORD *)(v2 + 216) = v2 + 224;
  *(_QWORD *)(v2 + 248) = 0;
  *(_QWORD *)(v2 + 256) = 0;
  *(_BYTE *)(v2 + 264) = 1;
  *(_QWORD *)v2 = &unk_1E5D04C38;
  *(_QWORD *)(v2 + 208) = &unk_1E5D04CC0;
  result = quasar::SimpleTokenizerOptions::SimpleTokenizerOptions((quasar::SimpleTokenizerOptions *)(v2 + 8));
  *(_QWORD *)v2 = off_1E5D37D28;
  *(_QWORD *)(v2 + 200) = 0;
  *(_QWORD *)(v2 + 208) = &off_1E5D37DD0;
  *(_QWORD *)(v2 + 184) = 0;
  *(_QWORD *)(v2 + 192) = 0;
  *a1 = v2 + 208;
  return result;
}

void sub_1AD9B7584(_Unwind_Exception *a1)
{
  uint64_t v1;
  char **v2;

  quasar::ProcessingBlock::~ProcessingBlock(v2);
  MEMORY[0x1AF44D190](v1, 0x10F3C4054690CFBLL);
  _Unwind_Resume(a1);
}

quasar::SimpleTokenizerOptions *quasar::SimpleTokenizerOptions::SimpleTokenizerOptions(quasar::SimpleTokenizerOptions *this)
{
  std::string __p;
  std::string v4;
  std::string v5;

  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E5D38E78;
  std::string::basic_string[abi:ne180100]<0>(&v5, "tokenizer-file");
  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "tokenizer regular expression replacement (sed / perl -p style)");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 16, &v5, &v4, &__p, 125);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  return this;
}

void sub_1AD9B7664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

quasar::PhraseBookOptions *quasar::ProcessingGraph::creator<quasar::PhraseBookBlock>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  quasar::PhraseBookOptions *result;

  v2 = (_QWORD *)operator new();
  bzero(v2, 0x528uLL);
  v2[157] = off_1E5D35B18;
  v2[159] = 0;
  v2[161] = 0;
  v2[160] = 0;
  v2[158] = v2 + 159;
  v2[163] = 0;
  v2[162] = 0;
  *((_BYTE *)v2 + 1312) = 1;
  *v2 = off_1E5D040F0;
  v2[157] = &unk_1E5D04178;
  result = quasar::PhraseBookOptions::PhraseBookOptions((quasar::PhraseBookOptions *)(v2 + 1));
  *v2 = off_1E5D359F8;
  v2[157] = off_1E5D35AA8;
  v2[153] = 0;
  v2[155] = 0;
  v2[154] = 0;
  *((_BYTE *)v2 + 1248) = 0;
  *a1 = v2 + 157;
  return result;
}

void sub_1AD9B7780(_Unwind_Exception *a1)
{
  uint64_t v1;
  char **v2;

  quasar::ProcessingBlock::~ProcessingBlock(v2);
  MEMORY[0x1AF44D190](v1, 0x10F3C40C6145FEFLL);
  _Unwind_Resume(a1);
}

double quasar::ProcessingGraph::creator<quasar::InputHammerBlock>@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  v2 = (_QWORD *)operator new();
  bzero(v2, 0x338uLL);
  v2[95] = off_1E5D35B18;
  v2[97] = 0;
  v2[99] = 0;
  v2[98] = 0;
  v2[96] = v2 + 97;
  v2[101] = 0;
  v2[100] = 0;
  *((_BYTE *)v2 + 816) = 1;
  *v2 = off_1E5D041F0;
  v2[95] = &unk_1E5D04278;
  quasar::InputHammerOptions::InputHammerOptions((quasar::InputHammerOptions *)(v2 + 1));
  *v2 = off_1E5D35E10;
  v2[95] = off_1E5D35EB8;
  result = 0.0;
  *(_OWORD *)(v2 + 81) = 0u;
  *(_OWORD *)(v2 + 83) = 0u;
  *((_DWORD *)v2 + 170) = 1065353216;
  *((_OWORD *)v2 + 43) = 0u;
  *((_OWORD *)v2 + 44) = 0u;
  *((_DWORD *)v2 + 180) = 1065353216;
  v2[91] = 0;
  v2[93] = 0;
  v2[92] = 0;
  *((_WORD *)v2 + 376) = 1;
  *a1 = v2 + 95;
  return result;
}

void sub_1AD9B7898(_Unwind_Exception *a1)
{
  uint64_t v1;
  char **v2;

  quasar::ProcessingBlock::~ProcessingBlock(v2);
  MEMORY[0x1AF44D190](v1, 0x10F3C404F3F1B56);
  _Unwind_Resume(a1);
}

quasar::InputHammerOptions *quasar::InputHammerOptions::InputHammerOptions(quasar::InputHammerOptions *this)
{
  const std::string *v2;
  std::string __p;
  std::string v5;
  std::string v6;

  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E5D36958;
  std::string::basic_string[abi:ne180100]<0>(&v6, "filter-list-file");
  std::string::basic_string[abi:ne180100]<0>(&v5, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "filter list file");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 16, &v6, &v5, &__p, 133);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v6, "source-locale");
  std::string::basic_string[abi:ne180100]<0>(&v5, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "source locale");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 176, &v6, &v5, &__p, 133);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v6, "source-token");
  std::string::basic_string[abi:ne180100]<0>(&v5, "source tag for multilingual model");
  v2 = (const std::string *)quasar::OptionValue<std::string>::value((_QWORD *)this + 22);
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 336, &v6, v2, &v5, 133);
  *((_QWORD *)this + 58) = (char *)this + 176;
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v6, "reset-meta-info");
  __p.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v5, "reset metaInfo json");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 496, &v6, &__p, &v5, 133);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  return this;
}

void sub_1AD9B7AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  quasar::OptionValue<std::string>::~OptionValue(v29);
  quasar::OptionValue<std::string>::~OptionValue(v28);
  quasar::OptionValue<std::string>::~OptionValue(v27);
  _Unwind_Resume(a1);
}

double quasar::ProcessingGraph::creator<quasar::RomanizerBlock>@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  v2 = (_QWORD *)operator new();
  bzero(v2, 0x488uLL);
  v2[137] = off_1E5D35B18;
  v2[139] = 0;
  v2[141] = 0;
  v2[140] = 0;
  v2[138] = v2 + 139;
  v2[143] = 0;
  v2[142] = 0;
  *((_BYTE *)v2 + 1152) = 1;
  *v2 = off_1E5D03EF0;
  v2[137] = &unk_1E5D03F78;
  quasar::RomanizerOptions::RomanizerOptions((quasar::RomanizerOptions *)(v2 + 1));
  *v2 = off_1E5D35550;
  v2[137] = &off_1E5D355F8;
  result = 0.0;
  *(_OWORD *)(v2 + 135) = 0u;
  *a1 = v2 + 137;
  return result;
}

void sub_1AD9B7CB4(_Unwind_Exception *a1)
{
  uint64_t v1;
  char **v2;

  quasar::ProcessingBlock::~ProcessingBlock(v2);
  MEMORY[0x1AF44D190](v1, 0x10F3C40E22ACA5FLL);
  _Unwind_Resume(a1);
}

quasar::RomanizerOptions *quasar::RomanizerOptions::RomanizerOptions(quasar::RomanizerOptions *this)
{
  std::string __p;
  std::string v4;
  std::string v5;

  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E5D36290;
  std::string::basic_string[abi:ne180100]<0>(&v5, "romanizer");
  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "romanizer");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 16, &v5, &v4, &__p, 133);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v5, "pron-guide-model-file");
  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "pron guide model file");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 176, &v5, &v4, &__p, 133);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v5, "pron-guide-preprocessing");
  __p.__r_.__value_.__s.__data_[0] = 1;
  std::string::basic_string[abi:ne180100]<0>(&v4, "pron guide preprocessing (splitting into characters and <space> insertion)");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 336, &v5, &__p, &v4, 133);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v5, "strip-token");
  __p.__r_.__value_.__s.__data_[0] = 1;
  std::string::basic_string[abi:ne180100]<0>(&v4, "strip tokenizer artefacts on romanizer input");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 480, &v5, &__p, &v4, 133);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v5, "enable-memory-map");
  __p.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v4, "memory map pronunciator model");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 624, &v5, &__p, &v4, 198);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v5, "share-pron-guide-model");
  __p.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v4, "share model instance with other identical blocks");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 768, &v5, &__p, &v4, 198);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v5, "dynamic-switch-key");
  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "dynamic weight switching key for espresso model");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 912, &v5, &v4, &__p, 267);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  return this;
}

void sub_1AD9B802C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  quasar::OptionValue<BOOL>::~OptionValue(v32);
  quasar::OptionValue<BOOL>::~OptionValue(v31);
  quasar::OptionValue<BOOL>::~OptionValue(v30);
  quasar::OptionValue<BOOL>::~OptionValue(v29);
  quasar::OptionValue<std::string>::~OptionValue(v28);
  quasar::OptionValue<std::string>::~OptionValue(v27);
  _Unwind_Resume(a1);
}

void sub_1AD9B80E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  JUMPOUT(0x1AD9B80C0);
}

void sub_1AD9B8118()
{
  JUMPOUT(0x1AD9B80C0);
}

void sub_1AD9B8120(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  JUMPOUT(0x1AD9B80C8);
}

void sub_1AD9B8150()
{
  JUMPOUT(0x1AD9B80C8);
}

void sub_1AD9B8158(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  JUMPOUT(0x1AD9B80D0);
}

void sub_1AD9B8188()
{
  JUMPOUT(0x1AD9B80D0);
}

void sub_1AD9B8190(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  JUMPOUT(0x1AD9B80D8);
}

void sub_1AD9B81D8()
{
  JUMPOUT(0x1AD9B80D8);
}

void sub_1AD9B81E0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  JUMPOUT(0x1AD9B80E0);
}

double quasar::ProcessingGraph::creator<quasar::SentencePieceBlock>@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  v2 = (_QWORD *)operator new();
  bzero(v2, 0x2D0uLL);
  v2[82] = off_1E5D35B18;
  v2[84] = 0;
  v2[86] = 0;
  v2[85] = 0;
  v2[83] = v2 + 84;
  v2[88] = 0;
  v2[87] = 0;
  *((_BYTE *)v2 + 712) = 1;
  *v2 = off_1E5D04508;
  v2[82] = &unk_1E5D04590;
  quasar::SentencePieceOptions::SentencePieceOptions((quasar::SentencePieceOptions *)(v2 + 1));
  *v2 = off_1E5D36C10;
  v2[82] = &off_1E5D36CB8;
  result = 0.0;
  *(_OWORD *)(v2 + 79) = 0u;
  *a1 = v2 + 82;
  return result;
}

void sub_1AD9B82F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  char **v2;

  quasar::ProcessingBlock::~ProcessingBlock(v2);
  MEMORY[0x1AF44D190](v1, 0x10F3C408A8CFFB4);
  _Unwind_Resume(a1);
}

quasar::SentencePieceOptions *quasar::SentencePieceOptions::SentencePieceOptions(quasar::SentencePieceOptions *this)
{
  std::string __p;
  std::string v4;
  std::string v5;

  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E5D37CC8;
  std::string::basic_string[abi:ne180100]<0>(&v5, "sentence-piece-file");
  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "sentence piece model file");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 16, &v5, &v4, &__p, 135);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v5, "reset-meta-info");
  __p.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v4, "reset metaInfo json");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 176, &v5, &__p, &v4, 135);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v5, "action");
  std::string::basic_string[abi:ne180100]<0>(&v4, "encode");
  std::string::basic_string[abi:ne180100]<0>(&__p, "action to perform (encode/decode/decode-api)");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 320, &v5, &v4, &__p, 135);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v5, "confidence-threshold");
  __p.__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v4, "confidence threshold");
  quasar::OptionValue<double>::OptionValue((uint64_t)this + 480, &v5, &__p, &v4, 153);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  return this;
}

void sub_1AD9B8518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  quasar::OptionValue<std::string>::~OptionValue(v29);
  quasar::OptionValue<BOOL>::~OptionValue(v28);
  quasar::OptionValue<std::string>::~OptionValue(v27);
  _Unwind_Resume(a1);
}

void sub_1AD9B85BC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  JUMPOUT(0x1AD9B85ACLL);
}

void sub_1AD9B85EC()
{
  JUMPOUT(0x1AD9B85ACLL);
}

void sub_1AD9B85F4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  JUMPOUT(0x1AD9B85B4);
}

quasar::QualityEstimatorBlock *quasar::ProcessingGraph::creator<quasar::QualityEstimatorBlock>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  quasar::QualityEstimatorBlock *result;

  v2 = (_QWORD *)operator new();
  bzero(v2, 0x6B8uLL);
  result = quasar::QualityEstimatorBlock::QualityEstimatorBlock((quasar::QualityEstimatorBlock *)v2);
  *a1 = (char *)v2 + *(_QWORD *)(*v2 - 24);
  return result;
}

void sub_1AD9B8694(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40C65891A1);
  _Unwind_Resume(a1);
}

quasar::QualityEstimatorBlock *quasar::QualityEstimatorBlock::QualityEstimatorBlock(quasar::QualityEstimatorBlock *this)
{
  int v2;
  std::string *v3;
  int v4;
  void *v6[2];
  uint64_t v7;
  void *__p[2];
  uint64_t v9;

  *((_QWORD *)this + 207) = off_1E5D35B18;
  *((_QWORD *)this + 209) = 0;
  *((_QWORD *)this + 211) = 0;
  *((_QWORD *)this + 210) = 0;
  *((_QWORD *)this + 208) = (char *)this + 1672;
  *((_QWORD *)this + 213) = 0;
  *((_QWORD *)this + 212) = 0;
  *((_BYTE *)this + 1712) = 1;
  *(_QWORD *)this = &unk_1E5D04E38;
  *((_QWORD *)this + 207) = &unk_1E5D04EC0;
  quasar::QualityEstimatorOptions::QualityEstimatorOptions((quasar::QualityEstimatorBlock *)((char *)this + 8));
  *((_QWORD *)this + 183) = &unk_1E5D04F38;
  *((_QWORD *)this + 207) = &unk_1E5D04FD8;
  *(_QWORD *)this = off_1E5D386E8;
  *((_QWORD *)this + 207) = &off_1E5D387E8;
  *((_QWORD *)this + 183) = &off_1E5D38748;
  std::string::basic_string[abi:ne180100]<0>(__p, "source");
  if (SHIBYTE(v9) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 1472), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v2 = SHIBYTE(v9);
    *((_BYTE *)this + 1496) = 0;
    *((_QWORD *)this + 188) = 0;
    *((_QWORD *)this + 190) = 0;
    *((_QWORD *)this + 189) = 0;
    if (v2 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *((_OWORD *)this + 92) = *(_OWORD *)__p;
    *((_QWORD *)this + 186) = v9;
    *((_BYTE *)this + 1496) = 0;
    *((_QWORD *)this + 188) = 0;
    *((_QWORD *)this + 190) = 0;
    *((_QWORD *)this + 189) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "nbest");
  v3 = (std::string *)((char *)this + 1528);
  if (SHIBYTE(v7) < 0)
  {
    std::string::__init_copy_ctor_external(v3, (const std::string::value_type *)v6[0], (std::string::size_type)v6[1]);
    v4 = SHIBYTE(v7);
    *((_BYTE *)this + 1552) = 0;
    *((_QWORD *)this + 195) = 0;
    *((_QWORD *)this + 197) = 0;
    *((_QWORD *)this + 196) = 0;
    if (v4 < 0)
      operator delete(v6[0]);
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)v6;
    *((_QWORD *)this + 193) = v7;
    *((_BYTE *)this + 1552) = 0;
    *((_QWORD *)this + 195) = 0;
    *((_QWORD *)this + 197) = 0;
    *((_QWORD *)this + 196) = 0;
  }
  *((_QWORD *)this + 206) = 0;
  *((_OWORD *)this + 102) = 0u;
  *((_OWORD *)this + 101) = 0u;
  *((_OWORD *)this + 100) = 0u;
  *((_OWORD *)this + 99) = 0u;
  return this;
}

void sub_1AD9B8868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  quasar::QualityEstimatorOptions *v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;

  if (a14 < 0)
    operator delete(__p);
  quasar::ProcessingInput::~ProcessingInput(v22);
  *(_QWORD *)v20 = v23;
  *(_QWORD *)(v20 + *(_QWORD *)(v23 - 24)) = v24;
  quasar::QualityEstimatorOptions::~QualityEstimatorOptions(v21);
  quasar::ProcessingBlock::~ProcessingBlock((char **)(v20 + 1656));
  _Unwind_Resume(a1);
}

quasar::QualityEstimatorOptions *quasar::QualityEstimatorOptions::QualityEstimatorOptions(quasar::QualityEstimatorOptions *this)
{
  std::string __p;
  std::string v4;
  std::string v5;

  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = &unk_1E5D394B0;
  std::string::basic_string[abi:ne180100]<0>(&v5, "src-locale");
  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "the source locale");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 16, &v5, &v4, &__p, 137);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v5, "tgt-locale");
  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "the target locale");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 176, &v5, &v4, &__p, 137);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v5, "features");
  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "list of features");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 336, &v5, &v4, &__p, 137);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v5, "src-ovs-file");
  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "the source OVS file");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 496, &v5, &v4, &__p, 137);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v5, "tgt-ovs-file");
  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "the target OVS file");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 656, &v5, &v4, &__p, 137);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v5, "fertility-file");
  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "the fertility file");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 816, &v5, &v4, &__p, 137);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v5, "min-trans-len-percent");
  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "the minimum translation length (in percent of expected length)");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 976, &v5, &v4, &__p, 137);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v5, "max-trans-len-percent");
  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "the maximum translation length (in percent of expected length)");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 1136, &v5, &v4, &__p, 137);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v5, "regex-file");
  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "the regular expression file");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 1296, &v5, &v4, &__p, 137);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  return this;
}

void sub_1AD9B8D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  quasar::OptionValue<std::string>::~OptionValue(v34);
  quasar::OptionValue<std::string>::~OptionValue(v33);
  quasar::OptionValue<std::string>::~OptionValue(v32);
  quasar::OptionValue<std::string>::~OptionValue(v31);
  quasar::OptionValue<std::string>::~OptionValue(v30);
  quasar::OptionValue<std::string>::~OptionValue(v29);
  quasar::OptionValue<std::string>::~OptionValue(v28);
  quasar::OptionValue<std::string>::~OptionValue(v27);
  _Unwind_Resume(a1);
}

void sub_1AD9B8E70(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  JUMPOUT(0x1AD9B8E38);
}

void sub_1AD9B8EB8()
{
  JUMPOUT(0x1AD9B8E38);
}

void sub_1AD9B8EC0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  JUMPOUT(0x1AD9B8E40);
}

void sub_1AD9B8F08()
{
  JUMPOUT(0x1AD9B8E40);
}

void sub_1AD9B8F10(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  JUMPOUT(0x1AD9B8E48);
}

void sub_1AD9B8F58()
{
  JUMPOUT(0x1AD9B8E48);
}

void sub_1AD9B8F60(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  JUMPOUT(0x1AD9B8E50);
}

void sub_1AD9B8FA8()
{
  JUMPOUT(0x1AD9B8E50);
}

void sub_1AD9B8FB0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  JUMPOUT(0x1AD9B8E58);
}

void sub_1AD9B8FF8()
{
  JUMPOUT(0x1AD9B8E58);
}

void sub_1AD9B9000(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  JUMPOUT(0x1AD9B8E60);
}

void sub_1AD9B9048()
{
  JUMPOUT(0x1AD9B8E60);
}

void sub_1AD9B9050(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  JUMPOUT(0x1AD9B8E68);
}

void quasar::QualityEstimatorOptions::~QualityEstimatorOptions(quasar::QualityEstimatorOptions *this)
{
  *(_QWORD *)this = &unk_1E5D394B0;
  *((_QWORD *)this + 162) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 1432, *((_QWORD **)this + 180));
  if (*((char *)this + 1423) < 0)
    operator delete(*((void **)this + 175));
  *((_QWORD *)this + 162) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1384);
  if (*((char *)this + 1375) < 0)
    operator delete(*((void **)this + 169));
  if (*((char *)this + 1351) < 0)
    operator delete(*((void **)this + 166));
  if (*((char *)this + 1327) < 0)
    operator delete(*((void **)this + 163));
  *((_QWORD *)this + 142) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 1272, *((_QWORD **)this + 160));
  if (*((char *)this + 1263) < 0)
    operator delete(*((void **)this + 155));
  *((_QWORD *)this + 142) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1224);
  if (*((char *)this + 1215) < 0)
    operator delete(*((void **)this + 149));
  if (*((char *)this + 1191) < 0)
    operator delete(*((void **)this + 146));
  if (*((char *)this + 1167) < 0)
    operator delete(*((void **)this + 143));
  *((_QWORD *)this + 122) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 1112, *((_QWORD **)this + 140));
  if (*((char *)this + 1103) < 0)
    operator delete(*((void **)this + 135));
  *((_QWORD *)this + 122) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1064);
  if (*((char *)this + 1055) < 0)
    operator delete(*((void **)this + 129));
  if (*((char *)this + 1031) < 0)
    operator delete(*((void **)this + 126));
  if (*((char *)this + 1007) < 0)
    operator delete(*((void **)this + 123));
  *((_QWORD *)this + 102) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 952, *((_QWORD **)this + 120));
  if (*((char *)this + 943) < 0)
    operator delete(*((void **)this + 115));
  *((_QWORD *)this + 102) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 904);
  if (*((char *)this + 895) < 0)
    operator delete(*((void **)this + 109));
  if (*((char *)this + 871) < 0)
    operator delete(*((void **)this + 106));
  if (*((char *)this + 847) < 0)
    operator delete(*((void **)this + 103));
  *((_QWORD *)this + 82) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 792, *((_QWORD **)this + 100));
  if (*((char *)this + 783) < 0)
    operator delete(*((void **)this + 95));
  *((_QWORD *)this + 82) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 744);
  if (*((char *)this + 735) < 0)
    operator delete(*((void **)this + 89));
  if (*((char *)this + 711) < 0)
    operator delete(*((void **)this + 86));
  if (*((char *)this + 687) < 0)
    operator delete(*((void **)this + 83));
  *((_QWORD *)this + 62) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 632, *((_QWORD **)this + 80));
  if (*((char *)this + 623) < 0)
    operator delete(*((void **)this + 75));
  *((_QWORD *)this + 62) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 584);
  if (*((char *)this + 575) < 0)
    operator delete(*((void **)this + 69));
  if (*((char *)this + 551) < 0)
    operator delete(*((void **)this + 66));
  if (*((char *)this + 527) < 0)
    operator delete(*((void **)this + 63));
  *((_QWORD *)this + 42) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 472, *((_QWORD **)this + 60));
  if (*((char *)this + 463) < 0)
    operator delete(*((void **)this + 55));
  *((_QWORD *)this + 42) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 424);
  if (*((char *)this + 415) < 0)
    operator delete(*((void **)this + 49));
  if (*((char *)this + 391) < 0)
    operator delete(*((void **)this + 46));
  if (*((char *)this + 367) < 0)
    operator delete(*((void **)this + 43));
  *((_QWORD *)this + 22) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 312, *((_QWORD **)this + 40));
  if (*((char *)this + 303) < 0)
    operator delete(*((void **)this + 35));
  *((_QWORD *)this + 22) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 264);
  if (*((char *)this + 255) < 0)
    operator delete(*((void **)this + 29));
  if (*((char *)this + 231) < 0)
    operator delete(*((void **)this + 26));
  if (*((char *)this + 207) < 0)
    operator delete(*((void **)this + 23));
  *((_QWORD *)this + 2) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 152, *((_QWORD **)this + 20));
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  *((_QWORD *)this + 2) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

quasar::PDecForceAlignBlock *quasar::ProcessingGraph::creator<quasar::PDecForceAlignBlock>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  quasar::PDecForceAlignBlock *result;

  v2 = (_QWORD *)operator new();
  bzero(v2, 0x9F8uLL);
  result = quasar::PDecForceAlignBlock::PDecForceAlignBlock((quasar::PDecForceAlignBlock *)v2);
  *a1 = (char *)v2 + *(_QWORD *)(*v2 - 24);
  return result;
}

void sub_1AD9B94BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C403204C804);
  _Unwind_Resume(a1);
}

quasar::PDecForceAlignBlock *quasar::PDecForceAlignBlock::PDecForceAlignBlock(quasar::PDecForceAlignBlock *this)
{
  int v2;
  std::string *v3;
  int v4;
  void *v6[2];
  uint64_t v7;
  void *__p[2];
  uint64_t v9;

  *((_QWORD *)this + 311) = off_1E5D35B18;
  *((_QWORD *)this + 313) = 0;
  *((_QWORD *)this + 315) = 0;
  *((_QWORD *)this + 314) = 0;
  *((_QWORD *)this + 312) = (char *)this + 2504;
  *((_QWORD *)this + 317) = 0;
  *((_QWORD *)this + 316) = 0;
  *((_BYTE *)this + 2544) = 1;
  *(_QWORD *)this = &unk_1E5D04820;
  *((_QWORD *)this + 311) = &unk_1E5D048A8;
  quasar::PDecForceAlignOptions::PDecForceAlignOptions((quasar::PDecForceAlignBlock *)((char *)this + 8));
  *((_QWORD *)this + 287) = &unk_1E5D04920;
  *((_QWORD *)this + 311) = &unk_1E5D049C0;
  *(_QWORD *)this = off_1E5D37390;
  *((_QWORD *)this + 311) = &off_1E5D37490;
  *((_QWORD *)this + 287) = &off_1E5D373F0;
  std::string::basic_string[abi:ne180100]<0>(__p, "source");
  if (SHIBYTE(v9) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 96, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v2 = SHIBYTE(v9);
    *((_BYTE *)this + 2328) = 0;
    *((_QWORD *)this + 292) = 0;
    *((_QWORD *)this + 294) = 0;
    *((_QWORD *)this + 293) = 0;
    if (v2 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *((_OWORD *)this + 144) = *(_OWORD *)__p;
    *((_QWORD *)this + 290) = v9;
    *((_BYTE *)this + 2328) = 0;
    *((_QWORD *)this + 292) = 0;
    *((_QWORD *)this + 294) = 0;
    *((_QWORD *)this + 293) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "target");
  v3 = (std::string *)((char *)this + 2360);
  if (SHIBYTE(v7) < 0)
  {
    std::string::__init_copy_ctor_external(v3, (const std::string::value_type *)v6[0], (std::string::size_type)v6[1]);
    v4 = SHIBYTE(v7);
    *((_BYTE *)this + 2384) = 0;
    *((_QWORD *)this + 299) = 0;
    *((_QWORD *)this + 301) = 0;
    *((_QWORD *)this + 300) = 0;
    if (v4 < 0)
      operator delete(v6[0]);
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)v6;
    *((_QWORD *)this + 297) = v7;
    *((_BYTE *)this + 2384) = 0;
    *((_QWORD *)this + 299) = 0;
    *((_QWORD *)this + 301) = 0;
    *((_QWORD *)this + 300) = 0;
  }
  *((_DWORD *)this + 608) = 0;
  *((_OWORD *)this + 151) = 0u;
  *((_BYTE *)this + 2440) = 0;
  *(_QWORD *)((char *)this + 2444) = 0x400000003;
  *(_OWORD *)((char *)this + 2456) = 0u;
  *(_OWORD *)((char *)this + 2472) = 0u;
  return this;
}

void sub_1AD9B96A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  quasar::PDecForceAlignOptions *v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;

  if (a14 < 0)
    operator delete(__p);
  quasar::ProcessingInput::~ProcessingInput(v22);
  *(_QWORD *)v20 = v23;
  *(_QWORD *)(v20 + *(_QWORD *)(v23 - 24)) = v24;
  quasar::PDecForceAlignOptions::~PDecForceAlignOptions(v21);
  quasar::ProcessingBlock::~ProcessingBlock((char **)(v20 + 2488));
  _Unwind_Resume(a1);
}

quasar::PDecForceAlignOptions *quasar::PDecForceAlignOptions::PDecForceAlignOptions(quasar::PDecForceAlignOptions *this)
{
  const std::string *v2;
  std::string __p;
  std::string v5;
  std::string v6;

  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E5D386A0;
  std::string::basic_string[abi:ne180100]<0>(&v6, "model-file");
  std::string::basic_string[abi:ne180100]<0>(&v5, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "mt model file name");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 16, &v6, &v5, &__p, 162);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v6, "model-type");
  std::string::basic_string[abi:ne180100]<0>(&v5, "kaldi");
  std::string::basic_string[abi:ne180100]<0>(&__p, "translation model type (kaldi/espresso)");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 176, &v6, &v5, &__p, 226);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v6, "enable-memory-map");
  __p.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v5, "use memory map");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 336, &v6, &__p, &v5, 162);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v6, "nbest");
  LODWORD(__p.__r_.__value_.__l.__data_) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "maximum entries in target nbest list to process");
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 480, &v6, &__p, &v5, 162);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v6, "shortlist-lang-pair");
  std::string::basic_string[abi:ne180100]<0>(&v5, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "language pair used for shortlist");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 624, &v6, &v5, &__p, 228);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v6, "shortlist-cond-n");
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v5, "top n in condition table used for shortlist");
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 784, &v6, &__p, &v5, 228);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v6, "shortlist-freq-n");
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v5, "top n in freq words used for shortlist");
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 928, &v6, &__p, &v5, 228);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v6, "source-token");
  std::string::basic_string[abi:ne180100]<0>(&v5, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "source tag for multilingual model");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 1072, &v6, &v5, &__p, 162);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v6, "target-token");
  std::string::basic_string[abi:ne180100]<0>(&v5, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "target tag for multilingual model");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 1232, &v6, &v5, &__p, 162);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v6, "dynamic-switch-key");
  std::string::basic_string[abi:ne180100]<0>(&v5, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "dynamic weight switching key for espresso model");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 1392, &v6, &v5, &__p, 267);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v6, "source-model-tag");
  std::string::basic_string[abi:ne180100]<0>(&v5, "source tag for multilingual model switching");
  v2 = (const std::string *)quasar::OptionValue<std::string>::value((_QWORD *)this + 134);
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 1552, &v6, v2, &v5, 162);
  *((_QWORD *)this + 210) = (char *)this + 1072;
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v6, "share-translation-model");
  __p.__r_.__value_.__s.__data_[0] = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "share translation model");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 1712, &v6, &__p, &v5, 194);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v6, "use-sentencepiece-ids");
  __p.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v5, "use sentencepiece ids directly, drop dictionaries");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 1856, &v6, &__p, &v5, 242);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v6, "include-eos");
  __p.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v5, "include the score for the EOS symbol");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 2000, &v6, &__p, &v5, 233);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v6, "score-only");
  __p.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v5, "force decode only, without alignment");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 2144, &v6, &__p, &v5, 233);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  return this;
}

void sub_1AD9B9DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  quasar::OptionValue<BOOL>::~OptionValue(v32);
  quasar::OptionValue<BOOL>::~OptionValue(v31);
  quasar::OptionValue<BOOL>::~OptionValue(v30);
  quasar::OptionValue<std::string>::~OptionValue(v29);
  quasar::OptionValue<std::string>::~OptionValue(v28);
  quasar::OptionValue<std::string>::~OptionValue(v36);
  quasar::OptionValue<std::string>::~OptionValue(v35);
  quasar::OptionValue<int>::~OptionValue(v34);
  quasar::OptionValue<int>::~OptionValue(v33);
  quasar::OptionValue<std::string>::~OptionValue(a9);
  quasar::OptionValue<int>::~OptionValue(a10);
  quasar::OptionValue<BOOL>::~OptionValue(a11);
  quasar::OptionValue<std::string>::~OptionValue(a12);
  quasar::OptionValue<std::string>::~OptionValue(a13);
  _Unwind_Resume(a1);
}

void sub_1AD9B9EA4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  JUMPOUT(0x1AD9B9E3CLL);
}

void sub_1AD9B9ED4()
{
  JUMPOUT(0x1AD9B9E3CLL);
}

void sub_1AD9B9EDC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  JUMPOUT(0x1AD9B9E44);
}

void sub_1AD9B9F0C()
{
  JUMPOUT(0x1AD9B9E44);
}

void sub_1AD9B9F14(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
    operator delete(__p);
  JUMPOUT(0x1AD9B9E4CLL);
}

quasar::FilterBlockOptions *quasar::ProcessingGraph::creator<quasar::FilterBlock>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  quasar::FilterBlockOptions *result;

  v2 = (_QWORD *)operator new();
  bzero(v2, 0x348uLL);
  v2[97] = off_1E5D35B18;
  v2[99] = 0;
  v2[101] = 0;
  v2[100] = 0;
  v2[98] = v2 + 99;
  v2[103] = 0;
  v2[102] = 0;
  *((_BYTE *)v2 + 832) = 1;
  *v2 = off_1E5D03818;
  v2[97] = &unk_1E5D038A0;
  result = quasar::FilterBlockOptions::FilterBlockOptions((quasar::FilterBlockOptions *)(v2 + 1));
  *v2 = off_1E5D343F0;
  v2[97] = &off_1E5D34498;
  *a1 = v2 + 97;
  return result;
}

void sub_1AD9BA2C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  char **v2;

  quasar::ProcessingBlock::~ProcessingBlock(v2);
  MEMORY[0x1AF44D190](v1, 0x10F3C406FE0A8A8);
  _Unwind_Resume(a1);
}

quasar::FilterBlockOptions *quasar::FilterBlockOptions::FilterBlockOptions(quasar::FilterBlockOptions *this)
{
  _QWORD *v2;
  _QWORD *v3;
  std::string v5;
  std::string __p;
  std::string v7;

  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E5D36938;
  std::string::basic_string[abi:ne180100]<0>(&v7, "locale-validation");
  v5.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "check source locale is compatible with metainfo locale");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 16, &v7, &v5, &__p, 219);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v7, "source-locale");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::basic_string[abi:ne180100]<0>(&v5, "source locale");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 160, &v7, &__p, &v5, 163);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v7, "nbest");
  LODWORD(v5.__r_.__value_.__l.__data_) = -1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "maximum nbest list size (default: don't limit nbest size)");
  v2 = (_QWORD *)quasar::OptionValue<int>::OptionValue((uint64_t)this + 328, &v7, &v5, &__p, 163);
  *((_QWORD *)this + 40) = &unk_1E5D38C90;
  *v2 = &unk_1E5D38CD0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v7, "annotation-based-filtering");
  v5.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "filter based on annotation in the metainfo");
  v3 = (_QWORD *)quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 480, &v7, &v5, &__p, 173);
  *((_QWORD *)this + 59) = &unk_1E5D38C10;
  *v3 = &unk_1E5D38C50;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v7, "structured-prediction-filtering");
  v5.__r_.__value_.__s.__data_[0] = 1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "Filter out all incomplete structured prediction spans");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 624, &v7, &v5, &__p, 264);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return this;
}

void sub_1AD9BA56C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  quasar::OverridableOptionValue<BOOL>::~OverridableOptionValue(v27);
  quasar::OverridableOptionValue<int>::~OverridableOptionValue(v26);
  quasar::OptionValue<std::string>::~OptionValue(v25);
  quasar::OptionValue<BOOL>::~OptionValue(v24);
  _Unwind_Resume(a1);
}

void sub_1AD9BA600(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  JUMPOUT(0x1AD9BA5E8);
}

void sub_1AD9BA630()
{
  JUMPOUT(0x1AD9BA5E8);
}

void sub_1AD9BA638(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  JUMPOUT(0x1AD9BA5F0);
}

void sub_1AD9BA680()
{
  JUMPOUT(0x1AD9BA5F0);
}

void sub_1AD9BA688(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  JUMPOUT(0x1AD9BA5F8);
}

uint64_t quasar::OverridableOptionValue<int>::~OverridableOptionValue(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = &unk_1E5D348D0;
  std::__tree<std::string>::destroy(a1 + 128, *(char **)(a1 + 136));
  *(_QWORD *)(a1 + 8) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 96);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t quasar::OverridableOptionValue<int>::isOverridable()
{
  return 1;
}

uint64_t `virtual thunk to'quasar::OverridableOptionValue<int>::isOverridable()
{
  return 1;
}

std::string *quasar::ProcessingGraph::creator<quasar::SelectBlock>@<X0>(_QWORD *a1@<X8>)
{
  std::string *v2;
  std::string *result;

  v2 = (std::string *)operator new();
  bzero(v2, 0x2D8uLL);
  result = quasar::SelectBlock::SelectBlock(v2);
  *a1 = (char *)v2 + *(_QWORD *)(v2->__r_.__value_.__r.__words[0] - 24);
  return result;
}

void sub_1AD9BA7A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40F9245A62);
  _Unwind_Resume(a1);
}

std::string *quasar::SelectBlock::SelectBlock(std::string *this)
{
  int v2;
  std::string *v3;
  int v4;
  void *v6[2];
  std::string::size_type v7;
  void *__p[2];
  std::string::size_type v9;

  this[27].__r_.__value_.__r.__words[2] = (std::string::size_type)off_1E5D35B18;
  this[28].__r_.__value_.__l.__size_ = 0;
  this[29].__r_.__value_.__r.__words[0] = 0;
  this[28].__r_.__value_.__r.__words[2] = 0;
  this[28].__r_.__value_.__r.__words[0] = (std::string::size_type)&this[28].__r_.__value_.__l.__size_;
  this[29].__r_.__value_.__r.__words[2] = 0;
  this[29].__r_.__value_.__l.__size_ = 0;
  this[30].__r_.__value_.__s.__data_[0] = 1;
  this->__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E5D03A18;
  this[27].__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E5D03AA0;
  quasar::SelectBlockOptions::SelectBlockOptions((quasar::SelectBlockOptions *)&this->__r_.__value_.__r.__words[1]);
  this[22].__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E5D03B18;
  this[27].__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E5D03BB8;
  this->__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E5D34978;
  this[27].__r_.__value_.__r.__words[2] = (std::string::size_type)off_1E5D34A70;
  this[22].__r_.__value_.__r.__words[2] = (std::string::size_type)&off_1E5D349D0;
  std::string::basic_string[abi:ne180100]<0>(__p, "control");
  if (SHIBYTE(v9) < 0)
  {
    std::string::__init_copy_ctor_external(this + 23, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v2 = SHIBYTE(v9);
    this[24].__r_.__value_.__s.__data_[0] = 0;
    this[24].__r_.__value_.__l.__size_ = 0;
    this[25].__r_.__value_.__r.__words[0] = 0;
    this[24].__r_.__value_.__r.__words[2] = 0;
    if (v2 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&this[23].__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    this[23].__r_.__value_.__r.__words[2] = v9;
    this[24].__r_.__value_.__s.__data_[0] = 0;
    this[24].__r_.__value_.__l.__size_ = 0;
    this[25].__r_.__value_.__r.__words[0] = 0;
    this[24].__r_.__value_.__r.__words[2] = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "value");
  v3 = (std::string *)((char *)this + 608);
  if (SHIBYTE(v7) < 0)
  {
    std::string::__init_copy_ctor_external(v3, (const std::string::value_type *)v6[0], (std::string::size_type)v6[1]);
    v4 = SHIBYTE(v7);
    this[26].__r_.__value_.__s.__data_[8] = 0;
    this[26].__r_.__value_.__r.__words[2] = 0;
    this[27].__r_.__value_.__l.__size_ = 0;
    this[27].__r_.__value_.__r.__words[0] = 0;
    if (v4 < 0)
      operator delete(v6[0]);
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)v6;
    this[26].__r_.__value_.__r.__words[0] = v7;
    this[26].__r_.__value_.__s.__data_[8] = 0;
    this[26].__r_.__value_.__r.__words[2] = 0;
    this[27].__r_.__value_.__l.__size_ = 0;
    this[27].__r_.__value_.__r.__words[0] = 0;
  }
  return this;
}

void sub_1AD9BA960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  quasar::SelectBlockOptions *v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;

  if (a14 < 0)
    operator delete(__p);
  quasar::ProcessingInput::~ProcessingInput(v22);
  *(_QWORD *)v20 = v23;
  *(_QWORD *)(v20 + *(_QWORD *)(v23 - 24)) = v24;
  quasar::SelectBlockOptions::~SelectBlockOptions(v21);
  quasar::ProcessingBlock::~ProcessingBlock((char **)(v20 + 664));
  _Unwind_Resume(a1);
}

quasar::SelectBlockOptions *quasar::SelectBlockOptions::SelectBlockOptions(quasar::SelectBlockOptions *this)
{
  std::string v3[2];
  std::string __p;
  std::string v5;

  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E5D36BE8;
  std::string::basic_string[abi:ne180100]<0>(v3, "match-key");
  std::string::basic_string[abi:ne180100]<0>(&v5, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "metadata key to match on");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 16, v3, &v5, &__p, 165);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v3[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v5, "match-pattern");
  quasar::PTree::PTree((quasar::PTree *)v3);
  std::string::basic_string[abi:ne180100]<0>(&__p, "metadata value match pattern");
  quasar::OptionValue<quasar::PTree>::OptionValue((uint64_t)this + 176, &v5, (uint64_t)v3, &__p, 165);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  quasar::PTree::~PTree((quasar::PTree *)v3);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v3, "match-wildcard");
  std::string::basic_string[abi:ne180100]<0>(&v5, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "wildcard string for match-pattern, that can match any subtree");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 376, v3, &v5, &__p, 165);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v3[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3[0].__r_.__value_.__l.__data_);
  return this;
}

void sub_1AD9BAB74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a25 < 0)
    operator delete(__p);
  if (*(char *)(v27 - 33) < 0)
    operator delete(*(void **)(v27 - 56));
  if (a14 < 0)
    operator delete(a9);
  quasar::OptionValue<quasar::PTree>::~OptionValue(v26);
  quasar::OptionValue<std::string>::~OptionValue(v25);
  _Unwind_Resume(a1);
}

void sub_1AD9BAC20(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a25 < 0)
    operator delete(__p);
  if (*(char *)(v25 - 33) < 0)
    operator delete(*(void **)(v25 - 56));
  if (a14 < 0)
    operator delete(a9);
  JUMPOUT(0x1AD9BAC18);
}

double quasar::ProcessingGraph::creator<quasar::CaseMapBlock>@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  v2 = (_QWORD *)operator new();
  bzero(v2, 0x250uLL);
  v2[66] = off_1E5D35B18;
  v2[68] = 0;
  v2[70] = 0;
  v2[69] = 0;
  v2[67] = v2 + 68;
  v2[72] = 0;
  v2[71] = 0;
  *((_BYTE *)v2 + 584) = 1;
  *v2 = off_1E5D03C30;
  v2[66] = &unk_1E5D03CB8;
  quasar::CaseMapOptions::CaseMapOptions((quasar::CaseMapOptions *)(v2 + 1));
  *v2 = off_1E5D34B28;
  v2[66] = &off_1E5D34BD0;
  result = 0.0;
  *(_OWORD *)(v2 + 61) = 0u;
  *(_OWORD *)(v2 + 63) = 0u;
  *((_DWORD *)v2 + 130) = 1065353216;
  *a1 = v2 + 66;
  return result;
}

void sub_1AD9BAD3C(_Unwind_Exception *a1)
{
  uint64_t v1;
  char **v2;

  quasar::ProcessingBlock::~ProcessingBlock(v2);
  MEMORY[0x1AF44D190](v1, 0x10F3C40FB5E8629);
  _Unwind_Resume(a1);
}

quasar::CaseMapOptions *quasar::CaseMapOptions::CaseMapOptions(quasar::CaseMapOptions *this)
{
  std::string __p;
  std::string v4;
  std::string v5;

  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E5D35108;
  std::string::basic_string[abi:ne180100]<0>(&v5, "locale");
  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "locale for case mapping (if not set use locale independent mapping)");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 16, &v5, &v4, &__p, 167);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v5, "capitalize-camel-case");
  __p.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v4, "Capitalize camel-case first tokens");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 176, &v5, &__p, &v4, 180);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v5, "exception-file");
  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Path to file with additional exceptions that should not be capitalized");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 320, &v5, &v4, &__p, 180);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  return this;
}

void sub_1AD9BAF00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  uint64_t v28;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  quasar::OptionValue<BOOL>::~OptionValue(v28);
  quasar::OptionValue<std::string>::~OptionValue(v27);
  _Unwind_Resume(a1);
}

void sub_1AD9BAF9C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  JUMPOUT(0x1AD9BAF94);
}

double quasar::ProcessingGraph::creator<quasar::GenderVerifierBlock>@<D0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 272) = 0u;
  *(_OWORD *)(v2 + 288) = 0u;
  *(_OWORD *)(v2 + 304) = 0u;
  *(_OWORD *)(v2 + 320) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(_OWORD *)(v2 + 368) = 0u;
  *(_OWORD *)(v2 + 384) = 0u;
  *(_OWORD *)(v2 + 400) = 0u;
  *(_OWORD *)(v2 + 416) = 0u;
  *(_QWORD *)(v2 + 432) = 0;
  *(_QWORD *)(v2 + 400) = 0;
  *(_QWORD *)(v2 + 408) = 0;
  *(_QWORD *)(v2 + 392) = 0;
  *(_QWORD *)(v2 + 376) = off_1E5D35B18;
  *(_QWORD *)(v2 + 384) = v2 + 392;
  *(_QWORD *)(v2 + 416) = 0;
  *(_QWORD *)(v2 + 424) = 0;
  *(_BYTE *)(v2 + 432) = 1;
  *(_QWORD *)v2 = off_1E5D04720;
  *(_QWORD *)(v2 + 376) = &unk_1E5D047A8;
  quasar::GenderVerifierOptions::GenderVerifierOptions((quasar::GenderVerifierOptions *)(v2 + 8));
  *(_QWORD *)v2 = off_1E5D37168;
  *(_QWORD *)(v2 + 376) = off_1E5D37210;
  result = 0.0;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  *a1 = v2 + 376;
  return result;
}

void sub_1AD9BB0DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  char **v2;

  quasar::ProcessingBlock::~ProcessingBlock(v2);
  MEMORY[0x1AF44D190](v1, 0x10F3C40887ACD88);
  _Unwind_Resume(a1);
}

quasar::GenderVerifierOptions *quasar::GenderVerifierOptions::GenderVerifierOptions(quasar::GenderVerifierOptions *this)
{
  std::string __p;
  std::string v4;
  std::string v5;

  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E5D384A0;
  std::string::basic_string[abi:ne180100]<0>(&v5, "inflections-file");
  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "inflection list for gendered words.");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 16, &v5, &v4, &__p, 235);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v5, "locale");
  std::string::basic_string[abi:ne180100]<0>(&v4, "es_ES");
  std::string::basic_string[abi:ne180100]<0>(&__p, "locale to use for tokenization.");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 176, &v5, &v4, &__p, 235);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  return this;
}

void sub_1AD9BB238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v22 - 17) < 0)
    operator delete(*(void **)(v22 - 40));
  quasar::OptionValue<std::string>::~OptionValue(v21);
  _Unwind_Resume(a1);
}

quasar::PlaceholderBlock *quasar::ProcessingGraph::creator<quasar::PlaceholderBlock>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  quasar::PlaceholderBlock *result;

  v2 = (_QWORD *)operator new();
  bzero(v2, 0x330uLL);
  result = quasar::PlaceholderBlock::PlaceholderBlock((quasar::PlaceholderBlock *)v2);
  *a1 = (char *)v2 + *(_QWORD *)(*v2 - 24);
  return result;
}

void sub_1AD9BB334(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C4062FB1BEFLL);
  _Unwind_Resume(a1);
}

quasar::PlaceholderBlock *quasar::PlaceholderBlock::PlaceholderBlock(quasar::PlaceholderBlock *this)
{
  int v2;
  std::string *v3;
  int v4;
  void *v6[2];
  uint64_t v7;
  void *__p[2];
  uint64_t v9;

  *((_QWORD *)this + 94) = off_1E5D35B18;
  *((_QWORD *)this + 96) = 0;
  *((_QWORD *)this + 98) = 0;
  *((_QWORD *)this + 97) = 0;
  *((_QWORD *)this + 95) = (char *)this + 768;
  *((_QWORD *)this + 100) = 0;
  *((_QWORD *)this + 99) = 0;
  *((_BYTE *)this + 808) = 1;
  *(_QWORD *)this = off_1E5D042F0;
  *((_QWORD *)this + 94) = &unk_1E5D04378;
  quasar::PlaceholderOptions::PlaceholderOptions((quasar::PlaceholderBlock *)((char *)this + 8));
  *((_QWORD *)this + 79) = &unk_1E5D043F0;
  *((_QWORD *)this + 94) = &unk_1E5D04490;
  *(_QWORD *)this = off_1E5D35FF8;
  *((_QWORD *)this + 94) = off_1E5D360F8;
  *((_QWORD *)this + 79) = &off_1E5D36058;
  std::string::basic_string[abi:ne180100]<0>(__p, "in");
  if (SHIBYTE(v9) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 640), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v2 = SHIBYTE(v9);
    *((_BYTE *)this + 664) = 0;
    *((_QWORD *)this + 84) = 0;
    *((_QWORD *)this + 86) = 0;
    *((_QWORD *)this + 85) = 0;
    if (v2 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *((_OWORD *)this + 40) = *(_OWORD *)__p;
    *((_QWORD *)this + 82) = v9;
    *((_BYTE *)this + 664) = 0;
    *((_QWORD *)this + 84) = 0;
    *((_QWORD *)this + 86) = 0;
    *((_QWORD *)this + 85) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "tokens");
  v3 = (std::string *)((char *)this + 696);
  if (SHIBYTE(v7) < 0)
  {
    std::string::__init_copy_ctor_external(v3, (const std::string::value_type *)v6[0], (std::string::size_type)v6[1]);
    v4 = SHIBYTE(v7);
    *((_BYTE *)this + 720) = 0;
    *((_QWORD *)this + 91) = 0;
    *((_QWORD *)this + 93) = 0;
    *((_QWORD *)this + 92) = 0;
    if (v4 < 0)
      operator delete(v6[0]);
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)v6;
    *((_QWORD *)this + 89) = v7;
    *((_BYTE *)this + 720) = 0;
    *((_QWORD *)this + 91) = 0;
    *((_QWORD *)this + 93) = 0;
    *((_QWORD *)this + 92) = 0;
  }
  return this;
}

void sub_1AD9BB4F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  quasar::PlaceholderOptions *v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;

  if (a14 < 0)
    operator delete(__p);
  quasar::ProcessingInput::~ProcessingInput(v22);
  *(_QWORD *)v20 = v23;
  *(_QWORD *)(v20 + *(_QWORD *)(v23 - 24)) = v24;
  quasar::PlaceholderOptions::~PlaceholderOptions(v21);
  quasar::ProcessingBlock::~ProcessingBlock((char **)(v20 + 752));
  _Unwind_Resume(a1);
}

quasar::PlaceholderOptions *quasar::PlaceholderOptions::PlaceholderOptions(quasar::PlaceholderOptions *this)
{
  std::string v3;
  std::string __p;
  std::string v5;

  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = &unk_1E5D36B00;
  std::string::basic_string[abi:ne180100]<0>(&v5, "enable");
  v3.__r_.__value_.__s.__data_[0] = 1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "output placeholders in the target");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 16, &v5, &v3, &__p, 246);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v5, "placeholder-tag");
  std::string::basic_string[abi:ne180100]<0>(&__p, "<-->");
  std::string::basic_string[abi:ne180100]<0>(&v3, "placeholder tag");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 160, &v5, &__p, &v3, 246);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v5, "placeholder-size");
  std::string::basic_string[abi:ne180100]<0>(&__p, "0");
  std::string::basic_string[abi:ne180100]<0>(&v3, "placeholder size in the UI");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 320, &v5, &__p, &v3, 246);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v5, "max-placeholders");
  LODWORD(v3.__r_.__value_.__l.__data_) = 1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "limit on the number of placeholders");
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 480, &v5, &v3, &__p, 246);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  return this;
}

void sub_1AD9BB760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  quasar::OptionValue<std::string>::~OptionValue(v29);
  quasar::OptionValue<std::string>::~OptionValue(v28);
  quasar::OptionValue<BOOL>::~OptionValue(v27);
  _Unwind_Resume(a1);
}

void sub_1AD9BB804(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  JUMPOUT(0x1AD9BB7F4);
}

void sub_1AD9BB84C()
{
  JUMPOUT(0x1AD9BB7F4);
}

void sub_1AD9BB854(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  JUMPOUT(0x1AD9BB7FCLL);
}

void quasar::PlaceholderOptions::~PlaceholderOptions(quasar::PlaceholderOptions *this)
{
  *(_QWORD *)this = &unk_1E5D36B00;
  *((_QWORD *)this + 60) = &unk_1E5D348D0;
  std::__tree<std::string>::destroy((uint64_t)this + 600, *((char **)this + 76));
  *((_QWORD *)this + 60) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 568);
  if (*((char *)this + 559) < 0)
    operator delete(*((void **)this + 67));
  if (*((char *)this + 535) < 0)
    operator delete(*((void **)this + 64));
  if (*((char *)this + 511) < 0)
    operator delete(*((void **)this + 61));
  *((_QWORD *)this + 40) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 456, *((_QWORD **)this + 58));
  if (*((char *)this + 447) < 0)
    operator delete(*((void **)this + 53));
  *((_QWORD *)this + 40) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 408);
  if (*((char *)this + 399) < 0)
    operator delete(*((void **)this + 47));
  if (*((char *)this + 375) < 0)
    operator delete(*((void **)this + 44));
  if (*((char *)this + 351) < 0)
    operator delete(*((void **)this + 41));
  *((_QWORD *)this + 20) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 296, *((_QWORD **)this + 38));
  if (*((char *)this + 287) < 0)
    operator delete(*((void **)this + 33));
  *((_QWORD *)this + 20) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 248);
  if (*((char *)this + 239) < 0)
    operator delete(*((void **)this + 27));
  if (*((char *)this + 215) < 0)
    operator delete(*((void **)this + 24));
  if (*((char *)this + 191) < 0)
    operator delete(*((void **)this + 21));
  *((_QWORD *)this + 2) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 136, *((char **)this + 18));
  *((_QWORD *)this + 2) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

quasar::DumpBlockOptions *quasar::ProcessingGraph::creator<quasar::DumpBlock>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  quasar::DumpBlockOptions *result;

  v2 = (_QWORD *)operator new();
  bzero(v2, 0x2B8uLL);
  v2[79] = off_1E5D35B18;
  v2[81] = 0;
  v2[83] = 0;
  v2[82] = 0;
  v2[80] = v2 + 81;
  v2[85] = 0;
  v2[84] = 0;
  *((_BYTE *)v2 + 688) = 1;
  *v2 = off_1E5D05770;
  v2[79] = &unk_1E5D057F8;
  result = quasar::DumpBlockOptions::DumpBlockOptions((quasar::DumpBlockOptions *)(v2 + 1));
  *v2 = off_1E5D3BDA8;
  v2[79] = &off_1E5D3BE48;
  *a1 = v2 + 79;
  return result;
}

void sub_1AD9BBB0C(_Unwind_Exception *a1)
{
  uint64_t v1;
  char **v2;

  quasar::ProcessingBlock::~ProcessingBlock(v2);
  MEMORY[0x1AF44D190](v1, 0x10F3C400A3FCEC3);
  _Unwind_Resume(a1);
}

quasar::DumpBlockOptions *quasar::DumpBlockOptions::DumpBlockOptions(quasar::DumpBlockOptions *this)
{
  std::string __p;
  std::string v4;
  std::string v5;

  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E5D35C90;
  std::string::basic_string[abi:ne180100]<0>(&v5, "separator");
  std::string::basic_string[abi:ne180100]<0>(&v4, "|||");
  std::string::basic_string[abi:ne180100]<0>(&__p, "string for separating nbest entries");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 16, &v5, &v4, &__p, 240);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v5, "use-meta-info");
  __p.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v4, "should meta info be dumped");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 176, &v5, &__p, &v4, 240);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v5, "meta-separator");
  std::string::basic_string[abi:ne180100]<0>(&v4, "|||");
  std::string::basic_string[abi:ne180100]<0>(&__p, "string for separating output string from meta data");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 320, &v5, &v4, &__p, 240);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v5, "nbest");
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v4, "limit dumping to this many entries from nbest list (0 = do not limit)");
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 480, &v5, &__p, &v4, 240);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  return this;
}

void sub_1AD9BBD30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  quasar::OptionValue<std::string>::~OptionValue(v29);
  quasar::OptionValue<BOOL>::~OptionValue(v28);
  quasar::OptionValue<std::string>::~OptionValue(v27);
  _Unwind_Resume(a1);
}

void sub_1AD9BBDD4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  JUMPOUT(0x1AD9BBDC4);
}

void sub_1AD9BBE04()
{
  JUMPOUT(0x1AD9BBDC4);
}

void sub_1AD9BBE0C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  JUMPOUT(0x1AD9BBDCCLL);
}

quasar::StructuredPredictionBlock *quasar::ProcessingGraph::creator<quasar::StructuredPredictionBlock>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  quasar::StructuredPredictionBlock *result;

  v2 = (_QWORD *)operator new();
  bzero(v2, 0xA90uLL);
  result = quasar::StructuredPredictionBlock::StructuredPredictionBlock((quasar::StructuredPredictionBlock *)v2);
  *a1 = (char *)v2 + *(_QWORD *)(*v2 - 24);
  return result;
}

void sub_1AD9BBEAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C407B76DCA6);
  _Unwind_Resume(a1);
}

quasar::StructuredPredictionBlock *quasar::StructuredPredictionBlock::StructuredPredictionBlock(quasar::StructuredPredictionBlock *this)
{
  int v2;
  int v3;
  int v4;
  int v5;
  std::string *v6;
  int v7;
  void *v9[2];
  uint64_t v10;
  void *v11[2];
  uint64_t v12;
  void *v13[2];
  uint64_t v14;
  void *v15[2];
  uint64_t v16;
  void *__p[2];
  uint64_t v18;

  *((_QWORD *)this + 330) = off_1E5D35B18;
  *((_QWORD *)this + 332) = 0;
  *((_QWORD *)this + 334) = 0;
  *((_QWORD *)this + 333) = 0;
  *((_QWORD *)this + 331) = (char *)this + 2656;
  *((_QWORD *)this + 336) = 0;
  *((_QWORD *)this + 335) = 0;
  *((_BYTE *)this + 2696) = 1;
  *(_QWORD *)this = &unk_1E5D05480;
  *((_QWORD *)this + 330) = &unk_1E5D05508;
  quasar::StructuredPredictionOptions::StructuredPredictionOptions((quasar::StructuredPredictionBlock *)((char *)this + 8));
  *((_QWORD *)this + 292) = &unk_1E5CFE468;
  *((_QWORD *)this + 330) = &unk_1E5CFE508;
  *(_QWORD *)this = off_1E5D39AB0;
  *((_QWORD *)this + 330) = &off_1E5D39BB0;
  *((_QWORD *)this + 292) = &off_1E5D39B10;
  std::string::basic_string[abi:ne180100]<0>(__p, "source");
  if (SHIBYTE(v18) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 2344), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v2 = SHIBYTE(v18);
    *((_BYTE *)this + 2368) = 0;
    *((_QWORD *)this + 297) = 0;
    *((_QWORD *)this + 299) = 0;
    *((_QWORD *)this + 298) = 0;
    if (v2 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)((char *)this + 2344) = *(_OWORD *)__p;
    *((_QWORD *)this + 295) = v18;
    *((_BYTE *)this + 2368) = 0;
    *((_QWORD *)this + 297) = 0;
    *((_QWORD *)this + 299) = 0;
    *((_QWORD *)this + 298) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v15, "in");
  if (SHIBYTE(v16) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 100, (const std::string::value_type *)v15[0], (std::string::size_type)v15[1]);
    v3 = SHIBYTE(v16);
    *((_BYTE *)this + 2424) = 0;
    *((_QWORD *)this + 304) = 0;
    *((_QWORD *)this + 306) = 0;
    *((_QWORD *)this + 305) = 0;
    if (v3 < 0)
      operator delete(v15[0]);
  }
  else
  {
    *((_OWORD *)this + 150) = *(_OWORD *)v15;
    *((_QWORD *)this + 302) = v16;
    *((_BYTE *)this + 2424) = 0;
    *((_QWORD *)this + 304) = 0;
    *((_QWORD *)this + 306) = 0;
    *((_QWORD *)this + 305) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "source_spm");
  if (SHIBYTE(v14) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 2456), (const std::string::value_type *)v13[0], (std::string::size_type)v13[1]);
    v4 = SHIBYTE(v14);
    *((_BYTE *)this + 2480) = 0;
    *((_QWORD *)this + 311) = 0;
    *((_QWORD *)this + 313) = 0;
    *((_QWORD *)this + 312) = 0;
    if (v4 < 0)
      operator delete(v13[0]);
  }
  else
  {
    *(_OWORD *)((char *)this + 2456) = *(_OWORD *)v13;
    *((_QWORD *)this + 309) = v14;
    *((_BYTE *)this + 2480) = 0;
    *((_QWORD *)this + 311) = 0;
    *((_QWORD *)this + 313) = 0;
    *((_QWORD *)this + 312) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v11, "target_spm");
  if (SHIBYTE(v12) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 2512), (const std::string::value_type *)v11[0], (std::string::size_type)v11[1]);
    v5 = SHIBYTE(v12);
    *((_BYTE *)this + 2536) = 0;
    *((_QWORD *)this + 318) = 0;
    *((_QWORD *)this + 320) = 0;
    *((_QWORD *)this + 319) = 0;
    if (v5 < 0)
      operator delete(v11[0]);
  }
  else
  {
    *((_OWORD *)this + 157) = *(_OWORD *)v11;
    *((_QWORD *)this + 316) = v12;
    *((_BYTE *)this + 2536) = 0;
    *((_QWORD *)this + 318) = 0;
    *((_QWORD *)this + 320) = 0;
    *((_QWORD *)this + 319) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v9, "source_tokens");
  v6 = (std::string *)((char *)this + 2568);
  if (SHIBYTE(v10) < 0)
  {
    std::string::__init_copy_ctor_external(v6, (const std::string::value_type *)v9[0], (std::string::size_type)v9[1]);
    v7 = SHIBYTE(v10);
    *((_BYTE *)this + 2592) = 0;
    *((_QWORD *)this + 325) = 0;
    *((_QWORD *)this + 327) = 0;
    *((_QWORD *)this + 326) = 0;
    if (v7 < 0)
      operator delete(v9[0]);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)v9;
    *((_QWORD *)this + 323) = v10;
    *((_BYTE *)this + 2592) = 0;
    *((_QWORD *)this + 325) = 0;
    *((_QWORD *)this + 327) = 0;
    *((_QWORD *)this + 326) = 0;
  }
  *((_OWORD *)this + 164) = 0u;
  return this;
}

void sub_1AD9BC1C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;
  quasar::StructuredPredictionOptions *v40;
  void **v41;
  void **v42;
  void **v43;
  void **v44;
  uint64_t v45;
  uint64_t v46;

  if (a15 < 0)
    operator delete(__p);
  quasar::ProcessingInput::~ProcessingInput(v44);
  quasar::ProcessingInput::~ProcessingInput(v43);
  quasar::ProcessingInput::~ProcessingInput(v42);
  quasar::ProcessingInput::~ProcessingInput(v41);
  *(_QWORD *)v39 = v45;
  *(_QWORD *)(v39 + *(_QWORD *)(v45 - 24)) = v46;
  quasar::StructuredPredictionOptions::~StructuredPredictionOptions(v40);
  quasar::ProcessingBlock::~ProcessingBlock((char **)(v39 + 2640));
  _Unwind_Resume(a1);
}

void sub_1AD9BC294()
{
  JUMPOUT(0x1AD9BC268);
}

void sub_1AD9BC29C()
{
  JUMPOUT(0x1AD9BC270);
}

void sub_1AD9BC2A4()
{
  JUMPOUT(0x1AD9BC284);
}

quasar::StructuredPredictionOptions *quasar::StructuredPredictionOptions::StructuredPredictionOptions(quasar::StructuredPredictionOptions *this)
{
  _QWORD *v2;
  std::string __p;
  std::string v5;
  std::string v6;

  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = &unk_1E5D3A130;
  std::string::basic_string[abi:ne180100]<0>(&v6, "struct-begin-tag");
  std::string::basic_string[abi:ne180100]<0>(&v5, "<STRUCT_MALE_BEG>");
  std::string::basic_string[abi:ne180100]<0>(&__p, "beginning of structured prediction in primary order");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 16, &v6, &v5, &__p, 249);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v6, "struct-reverse-begin-tag");
  std::string::basic_string[abi:ne180100]<0>(&v5, "<STRUCT_FEMALE_BEG>");
  std::string::basic_string[abi:ne180100]<0>(&__p, "beginning of structured prediction in reverse order");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 176, &v6, &v5, &__p, 249);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v6, "struct-mid-tag");
  std::string::basic_string[abi:ne180100]<0>(&v5, "<STRUCT_MID>");
  std::string::basic_string[abi:ne180100]<0>(&__p, "middle of structured prediction");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 336, &v6, &v5, &__p, 249);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v6, "struct-end-tag");
  std::string::basic_string[abi:ne180100]<0>(&v5, "<STRUCT_END>");
  std::string::basic_string[abi:ne180100]<0>(&__p, "end of structured prediction");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 496, &v6, &v5, &__p, 249);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v6, "struct-first-field");
  std::string::basic_string[abi:ne180100]<0>(&v5, "MALE");
  std::string::basic_string[abi:ne180100]<0>(&__p, "first field label");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 656, &v6, &v5, &__p, 249);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v6, "struct-second-field");
  std::string::basic_string[abi:ne180100]<0>(&v5, "FEMALE");
  std::string::basic_string[abi:ne180100]<0>(&__p, "second field label");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 816, &v6, &v5, &__p, 249);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v6, "struct-default-field");
  std::string::basic_string[abi:ne180100]<0>(&v5, "MALE");
  std::string::basic_string[abi:ne180100]<0>(&__p, "default field label");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 976, &v6, &v5, &__p, 249);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v6, "struct-meta-key-name");
  std::string::basic_string[abi:ne180100]<0>(&v5, "gender");
  std::string::basic_string[abi:ne180100]<0>(&__p, "string used for the meta info keys");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 1136, &v6, &v5, &__p, 249);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v6, "use-tokenized-source");
  __p.__r_.__value_.__s.__data_[0] = 0;
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 1296, &v6, &__p, &v5, 249);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v6, "max-source-length");
  LODWORD(__p.__r_.__value_.__l.__data_) = -1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "disable structured prediction if source is longer than value (-1 to disable)");
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 1440, &v6, &__p, &v5, 249);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v6, "max-selections");
  LODWORD(__p.__r_.__value_.__l.__data_) = 3;
  std::string::basic_string[abi:ne180100]<0>(&v5, "disable structured prediction if number of selections (= aligned source tokens) higher than value (-1 to disable)");
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 1584, &v6, &__p, &v5, 249);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v6, "disable-structured-prediction");
  __p.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v5, "disable structured prediction, only best is produced");
  v2 = (_QWORD *)quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 1736, &v6, &__p, &v5, 257);
  *((_QWORD *)this + 216) = &unk_1E5D38C10;
  *v2 = &unk_1E5D38C50;
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v6, "defaults-list-file");
  std::string::basic_string[abi:ne180100]<0>(&v5, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "file path for the file with defaults list");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 1880, &v6, &v5, &__p, 260);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v6, "produce-gender-structs-to-spm-source-tokens-alignments");
  __p.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v5, "Update meta info with alignments between gender structs and SPM source tokens");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 2040, &v6, &__p, &v5, 265);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v6, "max-source-alignment-length");
  LODWORD(__p.__r_.__value_.__l.__data_) = 1023;
  std::string::basic_string[abi:ne180100]<0>(&v5, "maximum source positions to consider when aligning structure tags");
  quasar::OptionValue<int>::OptionValue((uint64_t)this + 2184, &v6, &__p, &v5, 274);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  return this;
}

void sub_1AD9BC9C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  if (a25 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  quasar::OptionValue<BOOL>::~OptionValue(v35);
  quasar::OptionValue<std::string>::~OptionValue(v34);
  quasar::OverridableOptionValue<BOOL>::~OverridableOptionValue(v33);
  quasar::OptionValue<int>::~OptionValue(v32);
  quasar::OptionValue<int>::~OptionValue(v31);
  quasar::OptionValue<BOOL>::~OptionValue(v39);
  quasar::OptionValue<std::string>::~OptionValue(v38);
  quasar::OptionValue<std::string>::~OptionValue(v37);
  quasar::OptionValue<std::string>::~OptionValue(v36);
  quasar::OptionValue<std::string>::~OptionValue(a9);
  quasar::OptionValue<std::string>::~OptionValue(a10);
  quasar::OptionValue<std::string>::~OptionValue(a11);
  quasar::OptionValue<std::string>::~OptionValue(a12);
  quasar::OptionValue<std::string>::~OptionValue(a13);
  _Unwind_Resume(a1);
}

void sub_1AD9BCAFC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  JUMPOUT(0x1AD9BCA9CLL);
}

void sub_1AD9BCB2C()
{
  JUMPOUT(0x1AD9BCA9CLL);
}

void sub_1AD9BCB34(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  JUMPOUT(0x1AD9BCAA4);
}

void sub_1AD9BCB64()
{
  JUMPOUT(0x1AD9BCAA4);
}

void sub_1AD9BCB6C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  JUMPOUT(0x1AD9BCAACLL);
}

void sub_1AD9BCB9C()
{
  JUMPOUT(0x1AD9BCAACLL);
}

void sub_1AD9BCBA4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  JUMPOUT(0x1AD9BCAB4);
}

void sub_1AD9BCBD4()
{
  JUMPOUT(0x1AD9BCAB4);
}

void sub_1AD9BCBDC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a31 < 0)
    operator delete(a26);
  JUMPOUT(0x1AD9BCABCLL);
}

void sub_1AD9BCC24()
{
  JUMPOUT(0x1AD9BCABCLL);
}

void sub_1AD9BCC2C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a31 < 0)
    operator delete(a26);
  JUMPOUT(0x1AD9BCAC4);
}

void sub_1AD9BCC74()
{
  JUMPOUT(0x1AD9BCAC4);
}

void sub_1AD9BCC7C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a31 < 0)
    operator delete(a26);
  JUMPOUT(0x1AD9BCACCLL);
}

void sub_1AD9BCCC4()
{
  JUMPOUT(0x1AD9BCACCLL);
}

void sub_1AD9BCCCC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a31 < 0)
    operator delete(a26);
  JUMPOUT(0x1AD9BCAD4);
}

void sub_1AD9BCD14()
{
  JUMPOUT(0x1AD9BCAD4);
}

void sub_1AD9BCD1C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a31 < 0)
    operator delete(a26);
  JUMPOUT(0x1AD9BCADCLL);
}

void sub_1AD9BCD64()
{
  JUMPOUT(0x1AD9BCADCLL);
}

void sub_1AD9BCD6C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a31 < 0)
    operator delete(a26);
  JUMPOUT(0x1AD9BCAE4);
}

void sub_1AD9BCDB4()
{
  JUMPOUT(0x1AD9BCAE4);
}

void sub_1AD9BCDBC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a31 < 0)
    operator delete(a26);
  JUMPOUT(0x1AD9BCAECLL);
}

void sub_1AD9BCE04()
{
  JUMPOUT(0x1AD9BCAECLL);
}

void sub_1AD9BCE0C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a31 < 0)
    operator delete(a26);
  JUMPOUT(0x1AD9BCAF4);
}

void quasar::StructuredPredictionOptions::~StructuredPredictionOptions(quasar::StructuredPredictionOptions *this)
{
  *(_QWORD *)this = &unk_1E5D3A130;
  *((_QWORD *)this + 273) = &unk_1E5D348D0;
  std::__tree<std::string>::destroy((uint64_t)this + 2304, *((char **)this + 289));
  *((_QWORD *)this + 273) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 2272);
  if (*((char *)this + 2263) < 0)
    operator delete(*((void **)this + 280));
  if (*((char *)this + 2239) < 0)
    operator delete(*((void **)this + 277));
  if (*((char *)this + 2215) < 0)
    operator delete(*((void **)this + 274));
  *((_QWORD *)this + 255) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 2160, *((char **)this + 271));
  *((_QWORD *)this + 255) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 2128);
  if (*((char *)this + 2119) < 0)
    operator delete(*((void **)this + 262));
  if (*((char *)this + 2095) < 0)
    operator delete(*((void **)this + 259));
  if (*((char *)this + 2071) < 0)
    operator delete(*((void **)this + 256));
  *((_QWORD *)this + 235) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 2016, *((_QWORD **)this + 253));
  if (*((char *)this + 2007) < 0)
    operator delete(*((void **)this + 248));
  *((_QWORD *)this + 235) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1968);
  if (*((char *)this + 1959) < 0)
    operator delete(*((void **)this + 242));
  if (*((char *)this + 1935) < 0)
    operator delete(*((void **)this + 239));
  if (*((char *)this + 1911) < 0)
    operator delete(*((void **)this + 236));
  *((_QWORD *)this + 217) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 1856, *((char **)this + 233));
  *((_QWORD *)this + 217) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1824);
  if (*((char *)this + 1815) < 0)
    operator delete(*((void **)this + 224));
  if (*((char *)this + 1791) < 0)
    operator delete(*((void **)this + 221));
  if (*((char *)this + 1767) < 0)
    operator delete(*((void **)this + 218));
  *((_QWORD *)this + 198) = &unk_1E5D348D0;
  std::__tree<std::string>::destroy((uint64_t)this + 1704, *((char **)this + 214));
  *((_QWORD *)this + 198) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1672);
  if (*((char *)this + 1663) < 0)
    operator delete(*((void **)this + 205));
  if (*((char *)this + 1639) < 0)
    operator delete(*((void **)this + 202));
  if (*((char *)this + 1615) < 0)
    operator delete(*((void **)this + 199));
  *((_QWORD *)this + 180) = &unk_1E5D348D0;
  std::__tree<std::string>::destroy((uint64_t)this + 1560, *((char **)this + 196));
  *((_QWORD *)this + 180) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1528);
  if (*((char *)this + 1519) < 0)
    operator delete(*((void **)this + 187));
  if (*((char *)this + 1495) < 0)
    operator delete(*((void **)this + 184));
  if (*((char *)this + 1471) < 0)
    operator delete(*((void **)this + 181));
  *((_QWORD *)this + 162) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 1416, *((char **)this + 178));
  *((_QWORD *)this + 162) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1384);
  if (*((char *)this + 1375) < 0)
    operator delete(*((void **)this + 169));
  if (*((char *)this + 1351) < 0)
    operator delete(*((void **)this + 166));
  if (*((char *)this + 1327) < 0)
    operator delete(*((void **)this + 163));
  *((_QWORD *)this + 142) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 1272, *((_QWORD **)this + 160));
  if (*((char *)this + 1263) < 0)
    operator delete(*((void **)this + 155));
  *((_QWORD *)this + 142) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1224);
  if (*((char *)this + 1215) < 0)
    operator delete(*((void **)this + 149));
  if (*((char *)this + 1191) < 0)
    operator delete(*((void **)this + 146));
  if (*((char *)this + 1167) < 0)
    operator delete(*((void **)this + 143));
  *((_QWORD *)this + 122) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 1112, *((_QWORD **)this + 140));
  if (*((char *)this + 1103) < 0)
    operator delete(*((void **)this + 135));
  *((_QWORD *)this + 122) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1064);
  if (*((char *)this + 1055) < 0)
    operator delete(*((void **)this + 129));
  if (*((char *)this + 1031) < 0)
    operator delete(*((void **)this + 126));
  if (*((char *)this + 1007) < 0)
    operator delete(*((void **)this + 123));
  *((_QWORD *)this + 102) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 952, *((_QWORD **)this + 120));
  if (*((char *)this + 943) < 0)
    operator delete(*((void **)this + 115));
  *((_QWORD *)this + 102) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 904);
  if (*((char *)this + 895) < 0)
    operator delete(*((void **)this + 109));
  if (*((char *)this + 871) < 0)
    operator delete(*((void **)this + 106));
  if (*((char *)this + 847) < 0)
    operator delete(*((void **)this + 103));
  *((_QWORD *)this + 82) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 792, *((_QWORD **)this + 100));
  if (*((char *)this + 783) < 0)
    operator delete(*((void **)this + 95));
  *((_QWORD *)this + 82) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 744);
  if (*((char *)this + 735) < 0)
    operator delete(*((void **)this + 89));
  if (*((char *)this + 711) < 0)
    operator delete(*((void **)this + 86));
  if (*((char *)this + 687) < 0)
    operator delete(*((void **)this + 83));
  *((_QWORD *)this + 62) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 632, *((_QWORD **)this + 80));
  if (*((char *)this + 623) < 0)
    operator delete(*((void **)this + 75));
  *((_QWORD *)this + 62) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 584);
  if (*((char *)this + 575) < 0)
    operator delete(*((void **)this + 69));
  if (*((char *)this + 551) < 0)
    operator delete(*((void **)this + 66));
  if (*((char *)this + 527) < 0)
    operator delete(*((void **)this + 63));
  *((_QWORD *)this + 42) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 472, *((_QWORD **)this + 60));
  if (*((char *)this + 463) < 0)
    operator delete(*((void **)this + 55));
  *((_QWORD *)this + 42) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 424);
  if (*((char *)this + 415) < 0)
    operator delete(*((void **)this + 49));
  if (*((char *)this + 391) < 0)
    operator delete(*((void **)this + 46));
  if (*((char *)this + 367) < 0)
    operator delete(*((void **)this + 43));
  *((_QWORD *)this + 22) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 312, *((_QWORD **)this + 40));
  if (*((char *)this + 303) < 0)
    operator delete(*((void **)this + 35));
  *((_QWORD *)this + 22) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 264);
  if (*((char *)this + 255) < 0)
    operator delete(*((void **)this + 29));
  if (*((char *)this + 231) < 0)
    operator delete(*((void **)this + 26));
  if (*((char *)this + 207) < 0)
    operator delete(*((void **)this + 23));
  *((_QWORD *)this + 2) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 152, *((_QWORD **)this + 20));
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  *((_QWORD *)this + 2) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

quasar::LinkAlternativesOptions *quasar::ProcessingGraph::creator<quasar::LinkAlternativesBlock>@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  quasar::LinkAlternativesOptions *result;

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 272) = 0u;
  *(_OWORD *)(v2 + 288) = 0u;
  *(_OWORD *)(v2 + 304) = 0u;
  *(_OWORD *)(v2 + 320) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(_OWORD *)(v2 + 368) = 0u;
  *(_QWORD *)(v2 + 336) = 0;
  *(_QWORD *)(v2 + 344) = 0;
  *(_QWORD *)(v2 + 320) = off_1E5D35B18;
  *(_QWORD *)(v2 + 328) = v2 + 336;
  *(_QWORD *)(v2 + 360) = 0;
  *(_QWORD *)(v2 + 368) = 0;
  *(_QWORD *)(v2 + 352) = 0;
  *(_BYTE *)(v2 + 376) = 1;
  *(_QWORD *)v2 = off_1E5D04D38;
  *(_QWORD *)(v2 + 320) = &unk_1E5D04DC0;
  result = quasar::LinkAlternativesOptions::LinkAlternativesOptions((quasar::LinkAlternativesOptions *)(v2 + 8));
  *(_QWORD *)v2 = off_1E5D38560;
  *(_QWORD *)(v2 + 320) = &off_1E5D38608;
  *a1 = v2 + 320;
  return result;
}

void sub_1AD9BD510(_Unwind_Exception *a1)
{
  uint64_t v1;
  char **v2;

  quasar::ProcessingBlock::~ProcessingBlock(v2);
  MEMORY[0x1AF44D190](v1, 0x10F3C40F17129FBLL);
  _Unwind_Resume(a1);
}

quasar::LinkAlternativesOptions *quasar::LinkAlternativesOptions::LinkAlternativesOptions(quasar::LinkAlternativesOptions *this)
{
  std::string __p;
  char v4;
  std::string v5;

  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = &unk_1E5D39380;
  std::string::basic_string[abi:ne180100]<0>(&v5, "filter-unreachable-phrases");
  v4 = 1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "Filter translation phrases that are not reachable from the first phrase");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 16, &v5, &v4, &__p, 262);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v5, "enable-alternatives");
  v4 = 1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "Request link alternatives block to construct alternatives graph using input information");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 168, &v5, &v4, &__p, 263);
  *((_QWORD *)this + 20) = &unk_1E5D38C10;
  *((_QWORD *)this + 21) = &unk_1E5D38C50;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  return this;
}

void sub_1AD9BD650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  quasar::OptionValue<BOOL>::~OptionValue(v22);
  _Unwind_Resume(a1);
}

quasar::TokenizerOptions *quasar::ProcessingGraph::creator<quasar::TokenizerBlock>@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  quasar::TokenizerOptions *result;

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 272) = 0u;
  *(_OWORD *)(v2 + 288) = 0u;
  *(_OWORD *)(v2 + 304) = 0u;
  *(_OWORD *)(v2 + 320) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(_OWORD *)(v2 + 368) = 0u;
  *(_OWORD *)(v2 + 384) = 0u;
  *(_QWORD *)(v2 + 352) = 0;
  *(_QWORD *)(v2 + 360) = 0;
  *(_QWORD *)(v2 + 336) = off_1E5D35B18;
  *(_QWORD *)(v2 + 344) = v2 + 352;
  *(_QWORD *)(v2 + 376) = 0;
  *(_QWORD *)(v2 + 384) = 0;
  *(_QWORD *)(v2 + 368) = 0;
  *(_BYTE *)(v2 + 392) = 1;
  *(_QWORD *)v2 = &unk_1E5D03FF0;
  *(_QWORD *)(v2 + 336) = &unk_1E5D04078;
  result = quasar::TokenizerOptions::TokenizerOptions((quasar::TokenizerOptions *)(v2 + 8));
  *(_QWORD *)v2 = off_1E5D356A8;
  *(_QWORD *)(v2 + 328) = 0;
  *(_QWORD *)(v2 + 336) = &off_1E5D35750;
  *a1 = v2 + 336;
  return result;
}

void sub_1AD9BD7A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  char **v2;

  quasar::ProcessingBlock::~ProcessingBlock(v2);
  MEMORY[0x1AF44D190](v1, 0x10F3C40559A6D66);
  _Unwind_Resume(a1);
}

quasar::TokenizerOptions *quasar::TokenizerOptions::TokenizerOptions(quasar::TokenizerOptions *this)
{
  std::string v3;
  std::string __p;
  std::string v5;

  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E5D36358;
  std::string::basic_string[abi:ne180100]<0>(&v5, "output-tokens");
  v3.__r_.__value_.__s.__data_[0] = 1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "control if tokenization affects the translation tokens or just meta info.");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)this + 16, &v5, &v3, &__p, 169);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v5, "locale");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::basic_string[abi:ne180100]<0>(&v3, "locale for tokenization (if not set use locale independent mapping)");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)this + 160, &v5, &__p, &v3, 169);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  return this;
}

void sub_1AD9BD8EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v22 - 17) < 0)
    operator delete(*(void **)(v22 - 40));
  quasar::OptionValue<BOOL>::~OptionValue(v21);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::ContextProvider>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42C28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::ContextProvider>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42C28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::ContextProvider>::__on_zero_shared_impl[abi:ne180100]<std::allocator<quasar::ContextProvider>,0>(uint64_t a1)
{
  std::__shared_weak_count *v2;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 40);
  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

uint64_t *std::map<std::string,quasar::ProcessingBlock::ValueType>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,quasar::ProcessingBlock::ValueType>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__tree_node<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1AD9BDA3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,quasar::ProcessingBlock::ValueType>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__tree_node<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,quasar::ProcessingBlock::ValueType> const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,quasar::ProcessingBlock::ValueType> const&>(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::__construct_node<std::pair<std::string const,quasar::ProcessingBlock::ValueType> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::__construct_node<std::pair<std::string const,quasar::ProcessingBlock::ValueType> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,quasar::ProcessingBlock::ValueType>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1AD9BDBBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,quasar::ProcessingBlock::ValueType>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<quasar::TranslationPhraseInternal>::__init_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(this[1].__r_.__value_.__r.__words, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0x8F5C28F5C28F5C29 * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3));
  return this;
}

void sub_1AD9BDC50(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::ProcessingBlock::ValueType>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::ProcessingBlock::ValueType>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::ProcessingBlock::ValueType>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__shared_ptr_emplace<quasar::ProcessingSink>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42AA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::ProcessingSink>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42AA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::ProcessingSink>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<quasar::ProcessingSource>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42EC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::ProcessingSource>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42EC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::ProcessingSource>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::map<std::string,std::shared_ptr<quasar::ProcessingBlock>>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 40 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>> const&>((uint64_t **)a1, v4, a2, (__int128 *)a2);
      a2 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  return a1;
}

void sub_1AD9BDE54(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,std::shared_ptr<quasar::PMRegexEnumerator>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1AD9BDF50(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::unique_ptr<quasar::ProcessingBlock>>>(uint64_t **a1, const void **a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    std::__tree<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>>>::__construct_node<std::pair<std::string,std::unique_ptr<quasar::ProcessingBlock>>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

uint64_t std::__tree<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>>>::__construct_node<std::pair<std::string,std::unique_ptr<quasar::ProcessingBlock>>>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>>::pair[abi:ne180100]<std::string,std::unique_ptr<quasar::ProcessingBlock>,0>((uint64_t)v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1AD9BE048(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>>::pair[abi:ne180100]<std::string,std::unique_ptr<quasar::ProcessingBlock>,0>(uint64_t a1, __int128 *a2)
{
  __int128 v3;

  v3 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  std::shared_ptr<quasar::ProcessingBlock>::shared_ptr[abi:ne180100]<quasar::ProcessingBlock,std::default_delete<quasar::ProcessingBlock>,void>((uint64_t *)(a1 + 24), (uint64_t *)a2 + 3);
  return a1;
}

void sub_1AD9BE09C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::shared_ptr<quasar::ProcessingBlock>::shared_ptr[abi:ne180100]<quasar::ProcessingBlock,std::default_delete<quasar::ProcessingBlock>,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = *a2;
  *a1 = *a2;
  if (v4)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_1E5D46188;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  a1[1] = (uint64_t)v5;
  *a2 = 0;
  return a1;
}

void std::__shared_ptr_pointer<quasar::ProcessingBlock  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<quasar::ProcessingBlock  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::ProcessingBlock  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t quasar::RescoringDeliberationDecoder::runImpl(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t *v8;
  char **v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t **v16;
  int *v17;
  int v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  float *v23;
  float *v24;
  BOOL v25;
  float *v26;
  float v27;
  float *v28;
  float v29;
  float v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  void **v42;
  __int128 v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  void **v48;
  __int128 v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  char *v54;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  char **v59;
  void *__p[2];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t v81;
  unint64_t v82;
  float *v83;
  float *v84;
  uint64_t v85;

  v7 = *a3;
  v8 = *(uint64_t **)(*a3 + 352);
  if (!v8)
  {
    quasar::Decoder::calculateNBest(a2, a3, *(_DWORD *)(*(_QWORD *)a4 + 16));
    v7 = *a3;
    v8 = *(uint64_t **)(*a3 + 352);
  }
  if (v8[1] != *v8)
  {
    v9 = *(char ***)(v7 + 392);
    v83 = 0;
    v84 = 0;
    v85 = 0;
    v81 = 0;
    v82 = 0;
    v79 = 0;
    v80 = 0;
    v10 = *(unint64_t **)(a2 + 8);
    __p[0] = *(void **)a2;
    __p[1] = v10;
    if (v10)
    {
      v11 = v10 + 1;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      v7 = *a3;
    }
    quasar::ptt::PronunciationRecognizer::RequestContext::RequestContext((uint64_t)&v77, __p, *(_DWORD *)(v7 + 576), *(_DWORD *)(*(_QWORD *)(a2 + 216) + 24), *(_QWORD *)(a2 + 216) + 32, *(_QWORD *)(v7 + 472));
    v13 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v14 = (unint64_t *)((char *)__p[1] + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = *(uint64_t ***)(*a3 + 352);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    v17 = (int *)quasar::RescoringDeliberationDecoder::expandResultChoicesAndBuildInputForRescoring(a1, v16, &v77, &v82, (uint64_t)&v79, (__int128 *)__p);
    if (SBYTE7(v61) < 0)
      operator delete(__p[0]);
    if (v79 == v80)
    {
      if (quasar::gLogLevel >= 6)
      {
        v75 = 0u;
        v76 = 0u;
        v73 = 0u;
        v74 = 0u;
        v71 = 0u;
        v72 = 0u;
        v69 = 0u;
        v70 = 0u;
        v67 = 0u;
        v68 = 0u;
        v65 = 0u;
        v66 = 0u;
        v63 = 0u;
        v64 = 0u;
        v61 = 0u;
        v62 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"No phonetic alternatives generated.", 35);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
      }
    }
    else
    {
      if (quasar::rescoring::Rescorer::rescoreHypotheses(*(_QWORD *)(a1 + 448), v17, &v83))
      {
        v18 = 1;
LABEL_23:
        v19 = v78;
        if (!v78)
          goto LABEL_27;
        p_shared_owners = (unint64_t *)&v78->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
          if (v18)
            goto LABEL_28;
        }
        else
        {
LABEL_27:
          if (v18)
          {
LABEL_28:
            v22 = a2 + 608;
            v23 = v83;
            v24 = v83 + 1;
            v25 = v83 == v84 || v24 == v84;
            v26 = v83;
            if (!v25)
            {
              v27 = *v83;
              v26 = v83;
              v28 = v83 + 1;
              do
              {
                v29 = *v28++;
                v30 = v29;
                if (v29 < v27)
                {
                  v27 = v30;
                  v26 = v24;
                }
                v24 = v28;
              }
              while (v28 != v84);
            }
            v59 = v9;
            if (!*(_BYTE *)(a1 + 576))
            {
              v44 = v79;
              v45 = v80;
              while (v44 != v45)
              {
                v46 = *v44;
                v47 = v44[1];
                while (v46 != v47)
                {
                  quasar::PhonesetMapping::getIpaPhoneSequence(v22, v46 + 48, (uint64_t)__p);
                  v48 = (void **)(v46 + 96);
                  if (*(char *)(v46 + 119) < 0)
                    operator delete(*v48);
                  v49 = *(_OWORD *)__p;
                  *(_QWORD *)(v46 + 112) = v61;
                  *(_OWORD *)v48 = v49;
                  v46 += 224;
                }
                v44 += 3;
              }
            }
            v31 = v26 - v23;
            v32 = v31 - v82;
            if (v31 >= v82)
            {
              std::vector<std::vector<quasar::Token>>::insert(v8, (uint64_t *)*v8, &v79[3 * v32]);
              v37 = (uint64_t)v59;
              v39 = *v59;
              *(double *)__p = *(double *)*v59 + -1000.0;
              std::vector<double>::insert((uint64_t)v59, v39, (double *)__p);
              if (*(_BYTE *)(a1 + 576))
              {
                v40 = *(_QWORD *)*v8;
                v41 = *(_QWORD *)(*v8 + 8);
                while (v40 != v41)
                {
                  quasar::PhonesetMapping::getIpaPhoneSequence(v22, v40 + 48, (uint64_t)__p);
                  v42 = (void **)(v40 + 96);
                  if (*(char *)(v40 + 119) < 0)
                    operator delete(*v42);
                  v43 = *(_OWORD *)__p;
                  *(_QWORD *)(v40 + 112) = v61;
                  *(_OWORD *)v42 = v43;
                  v40 += 224;
                }
              }
              else
              {
                std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<quasar::Token> *,std::vector<quasar::Token> *,std::vector<quasar::Token> *>((uint64_t)__p, (uint64_t)&v79[3 * v32 + 3], (uint64_t)v80, (uint64_t)&v79[3 * v32]);
                v51 = v50;
                v52 = v80;
                while (v52 != v51)
                {
                  v52 -= 3;
                  __p[0] = v52;
                  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                }
                v80 = v51;
              }
            }
            else
            {
              v33 = *v8;
              v34 = *v8 + 24 * v31;
              v35 = *(_OWORD *)*v8;
              *(_OWORD *)v33 = *(_OWORD *)v34;
              *(_OWORD *)v34 = v35;
              v36 = *(_QWORD *)(v33 + 16);
              *(_QWORD *)(v33 + 16) = *(_QWORD *)(v34 + 16);
              *(_QWORD *)(v34 + 16) = v36;
              v37 = (uint64_t)v59;
              v38 = *v59;
              *(_QWORD *)&v35 = *(_QWORD *)*v59;
              *(_QWORD *)v38 = *(_QWORD *)&(*v59)[8 * v31];
              *(_QWORD *)&v38[8 * v31] = v35;
            }
            v53 = *v8;
            if (!*(_BYTE *)(a1 + 576))
            {
              std::vector<std::vector<quasar::Token>>::reserve(v8, 0xAAAAAAAAAAAAAAABLL * ((v8[1] - v53) >> 3) - 0x5555555555555555 * (v80 - v79));
              std::vector<double>::reserve((void **)v37, 0xAAAAAAAAAAAAAAABLL * ((v8[1] - *v8) >> 3));
              std::vector<std::vector<quasar::Token>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::vector<quasar::Token>*>,std::__wrap_iter<std::vector<quasar::Token>*>>(v8, (_QWORD *)v8[1], v79, v80, 0xAAAAAAAAAAAAAAABLL * (v80 - v79));
              v54 = *(char **)(v37 + 8);
              *(double *)__p = *((double *)v54 - 1) + 1000.0;
              std::vector<double>::insert(v37, v54, 0xAAAAAAAAAAAAAAABLL * (v80 - v79), (char *)__p);
              v53 = *v8;
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v8[1] - v53) >> 3) != (uint64_t)(*(_QWORD *)(v37 + 8) - *(_QWORD *)v37) >> 3)
            {
              v75 = 0u;
              v76 = 0u;
              v73 = 0u;
              v74 = 0u;
              v71 = 0u;
              v72 = 0u;
              v69 = 0u;
              v70 = 0u;
              v67 = 0u;
              v68 = 0u;
              v65 = 0u;
              v66 = 0u;
              v63 = 0u;
              v64 = 0u;
              v61 = 0u;
              v62 = 0u;
              *(_OWORD *)__p = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"There should be an equal number of result choices (", 51);
              v56 = (_QWORD *)std::ostream::operator<<();
              v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)") ", 2);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"as there are result costs (", 27);
              v58 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)").", 2);
              quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
            }
          }
        }
        __p[0] = &v79;
        std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (v83)
        {
          v84 = v83;
          operator delete(v83);
        }
        return 0;
      }
      if (quasar::gLogLevel >= 2)
      {
        v75 = 0u;
        v76 = 0u;
        v73 = 0u;
        v74 = 0u;
        v71 = 0u;
        v72 = 0u;
        v69 = 0u;
        v70 = 0u;
        v67 = 0u;
        v68 = 0u;
        v65 = 0u;
        v66 = 0u;
        v63 = 0u;
        v64 = 0u;
        v61 = 0u;
        v62 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Rescoring failed during RescoringDeliberationDecoder.", 53);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
      }
    }
    v18 = 0;
    goto LABEL_23;
  }
  return 0;
}

void sub_1AD9BE810(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  JUMPOUT(0x1AD9BE82CLL);
}

void sub_1AD9BE828()
{
  uint64_t v0;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v0 - 184);
  JUMPOUT(0x1AD9BE84CLL);
}

void sub_1AD9BE834()
{
  JUMPOUT(0x1AD9BE83CLL);
}

void sub_1AD9BE848(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  *(_QWORD *)(v1 - 184) = v1 - 144;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 184));
  v3 = *(void **)(v1 - 112);
  if (v3)
  {
    *(_QWORD *)(v1 - 104) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::RescoringDeliberationDecoder::expandResultChoicesAndBuildInputForRescoring(uint64_t a1, uint64_t **a2, _QWORD *a3, unint64_t *a4, uint64_t a5, __int128 *a6)
{
  std::string::size_type v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t i;
  int v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  __int128 v25;
  uint64_t v26;
  std::string::size_type *p_size;
  uint64_t v28;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33[3];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  void **v51;
  _BYTE v52[24];
  _BYTE *v53;
  char v54;
  std::string v55;
  std::string *v56;
  char v57;
  void *v58;
  char v59;
  void *v60;
  void *v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v12 = a1 + 456;
  flatbuffers_2_0_6::FlatBufferBuilder::Clear((flatbuffers_2_0_6::FlatBufferBuilder *)(a1 + 456));
  v52[0] = 0;
  v54 = 0;
  quasar::rescoring::MultiSourceNBestListBuilder::MultiSourceNBestListBuilder(&v55, v12, a6, (uint64_t)v52);
  if (v54)
  {
    v13 = v53;
    if (v53 == v52)
    {
      v14 = 4;
      v13 = v52;
      goto LABEL_6;
    }
    if (v53)
    {
      v14 = 5;
LABEL_6:
      (*(void (**)(void))(*v13 + 8 * v14))();
    }
  }
  if (*a2 == a2[1] || **a2 == (*a2)[1])
  {
    v18 = quasar::rescoring::MultiSourceNBestListBuilder::finalizeAndReturnNBestList((uint64_t)&v55, 0);
  }
  else
  {
    quasar::extractPronunciation(a2, 1, v33);
    v15 = *a2;
    for (i = **a2; ; i += 224)
    {
      if (i == (*a2)[1])
      {
        v19 = 1;
        goto LABEL_17;
      }
      v17 = *(_DWORD *)(i + 168);
      if (v17 != 4)
        break;
    }
    if (v17 == 5)
    {
      v30 = i;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v34 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v34);
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"Token ", 6);
      v32 = quasar::operator<<(v31, v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" does not have a valid LME type set. Did something go wrong during data deserialization? Was the serialized data generated with an older version of the decoder?", 160);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v34);
    }
    v19 = 0;
LABEL_17:
    v20 = *(unsigned int *)(a1 + 572);
    if ((_DWORD)v20)
    {
      if ((int)v20 < 1 || 0xAAAAAAAAAAAAAAABLL * (a2[1] - v15) <= v20)
        quasar::rescoring::MultiSourceNBestListBuilder::addResultChoices((uint64_t)&v55, a2, 0);
      else
        quasar::rescoring::MultiSourceNBestListBuilder::addResultChoices<std::__wrap_iter<std::vector<quasar::Token> const*>>((uint64_t)&v55, v15, &v15[3 * v20], 0);
    }
    if (a4)
    {
      v21 = *(unsigned int *)(a1 + 572);
      if ((v21 & 0x80000000) != 0)
      {
        v21 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
      }
      else if (0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2) < v21)
      {
        v21 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
      }
      *a4 = v21;
    }
    if (((*(_BYTE *)(a1 + 568) != 0) & ~v19) == 0)
    {
      v22 = *(_QWORD *)(a1 + 560);
      if (v22)
      {
        if (quasar::gLogLevel >= 6)
        {
          v49 = 0u;
          v50 = 0u;
          v47 = 0u;
          v48 = 0u;
          v45 = 0u;
          v46 = 0u;
          v43 = 0u;
          v44 = 0u;
          v41 = 0u;
          v42 = 0u;
          v39 = 0u;
          v40 = 0u;
          v37 = 0u;
          v38 = 0u;
          v35 = 0u;
          v36 = 0u;
          v34 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v34);
          v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"Generating phonetic alternatives using ", 39);
          v24 = quasar::lm::operator<<<std::string>(v23, v33);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)".", 1);
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v34);
          v22 = *(_QWORD *)(a1 + 560);
        }
        quasar::ptt::PronunciationRecognizer::run(v22, v33, a3, &v34);
        quasar::rescoring::MultiSourceNBestListBuilder::addResultChoices((uint64_t)&v55, (uint64_t **)&v34, 1);
        if (a5)
        {
          v25 = *(_OWORD *)a5;
          *(_OWORD *)a5 = v34;
          v34 = v25;
          v26 = *(_QWORD *)(a5 + 16);
          *(_QWORD *)(a5 + 16) = v35;
          *(_QWORD *)&v35 = v26;
        }
        v51 = (void **)&v34;
        std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v51);
      }
    }
    v18 = quasar::rescoring::MultiSourceNBestListBuilder::finalizeAndReturnNBestList((uint64_t)&v55, 0);
    *(_QWORD *)&v34 = v33;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  }
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
  if (v59 < 0)
    operator delete(v58);
  if (v57)
  {
    p_size = (std::string::size_type *)v56;
    if (v56 == (std::string *)&v55.__r_.__value_.__r.__words[1])
    {
      v28 = 4;
      p_size = &v55.__r_.__value_.__l.__size_;
      goto LABEL_46;
    }
    if (v56)
    {
      v28 = 5;
LABEL_46:
      (*(void (**)(void))(*p_size + 8 * v28))();
    }
  }
  return v18;
}

void sub_1AD9BECD0(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1AD9BECFCLL);
}

void **std::vector<std::vector<quasar::Token>>::reserve(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 24 * v6;
    std::vector<std::vector<quasar::Token>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer(v7);
  }
  return result;
}

void sub_1AD9BEDA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

char *std::vector<double>::insert(uint64_t a1, char *__src, unint64_t a3, char *a4)
{
  char *v4;
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _BYTE *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  void *__p;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;

  v4 = __src;
  if (a3)
  {
    v5 = a4;
    v10 = *(_QWORD *)(a1 + 16);
    v8 = a1 + 16;
    v9 = v10;
    v11 = *(char **)(v8 - 8);
    if (a3 <= (v10 - (uint64_t)v11) >> 3)
    {
      v18 = v11 - __src;
      if (a3 <= (v11 - __src) >> 3)
      {
        v21 = *(char **)(v8 - 8);
        v20 = a3;
      }
      else
      {
        v19 = 0;
        v20 = v18 >> 3;
        v21 = &v11[8 * (a3 - (v18 >> 3))];
        do
        {
          *(_QWORD *)&v11[v19] = *(_QWORD *)a4;
          v19 += 8;
        }
        while (8 * a3 - 8 * v20 != v19);
        *(_QWORD *)(a1 + 8) = v21;
        if (v11 == __src)
          return v4;
      }
      v22 = &__src[8 * a3];
      v23 = &v21[-8 * a3];
      v24 = v21;
      if (v23 < v11)
      {
        v24 = v21;
        do
        {
          v25 = *(_QWORD *)v23;
          v23 += 8;
          *(_QWORD *)v24 = v25;
          v24 += 8;
        }
        while (v23 < v11);
      }
      *(_QWORD *)(a1 + 8) = v24;
      if (v21 != v22)
        memmove(&v21[-8 * ((v21 - v22) >> 3)], __src, v21 - v22);
      if (v4 <= v5)
      {
        if (*(_QWORD *)(a1 + 8) <= (unint64_t)v5)
          v26 = 0;
        else
          v26 = a3;
        v5 += 8 * v26;
      }
      v27 = v4;
      do
      {
        *(_QWORD *)v27 = *(_QWORD *)v5;
        v27 += 8;
        --v20;
      }
      while (v20);
    }
    else
    {
      v12 = *(_BYTE **)a1;
      v13 = a3 + ((uint64_t)&v11[-*(_QWORD *)a1] >> 3);
      if (v13 >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v14 = (__src - v12) >> 3;
      v15 = v9 - (_QWORD)v12;
      if (v15 >> 2 > v13)
        v13 = v15 >> 2;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v13;
      v36 = v8;
      if (v16)
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v8, v16);
      else
        v17 = 0;
      v28 = &v17[8 * v14];
      __p = v17;
      v33 = v28;
      v35 = &v17[8 * v16];
      v29 = 8 * a3;
      v30 = &v28[8 * a3];
      do
      {
        *(_QWORD *)v28 = *(_QWORD *)v5;
        v28 += 8;
        v29 -= 8;
      }
      while (v29);
      v34 = v30;
      v4 = std::vector<double>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
      if (v34 != v33)
        v34 += (v33 - v34 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (__p)
        operator delete(__p);
    }
  }
  return v4;
}

void sub_1AD9BEF9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::RescoringDeliberationDecoder::registerParams(quasar::RescoringDeliberationDecoder *this, quasar::SystemConfig *a2)
{
  char **v4;
  quasar::Bitmap **v5;
  uint64_t v6;
  std::string *v7;
  __int128 v8;
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  quasar::ptt::PronunciationRecognizer *v12;
  _QWORD *v13;
  _QWORD *v14;
  std::string v15;
  std::string __p;
  char v17;
  void *v18[2];
  int64_t v19;
  _BYTE v20[32];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  quasar::SystemConfig::getPrefix(a2, &v15);
  __p = v15;
  memset(&v15, 0, sizeof(v15));
  v17 = 1;
  quasar::rescoring::RescorerConfig::RescorerConfig(v18, a2, &__p, 0, *((unsigned __int8 *)this + 441));
  v4 = (char **)operator new();
  quasar::rescoring::RescorerConfig::RescorerConfig(v20, v18);
  quasar::rescoring::Rescorer::Rescorer(v4, v20);
  quasar::rescoring::RescorerConfig::~RescorerConfig((quasar::rescoring::RescorerConfig *)v20);
  v5 = (quasar::Bitmap **)((char *)this + 448);
  std::unique_ptr<quasar::rescoring::Rescorer>::reset[abi:ne180100]((char ***)this + 56, v4);
  quasar::rescoring::RescorerConfig::~RescorerConfig((quasar::rescoring::RescorerConfig *)v18);
  if (v17 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  quasar::Bitmap::~Bitmap(*v5);
  if (*(_DWORD *)(v6 + 140) != 2)
  {
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v21 = 0u;
    memset(v20, 0, sizeof(v20));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"RescoringDeliberationDecoder expects Rescorer to be configured with 2 input sources, ", 85);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"but was ", 8);
    quasar::Bitmap::~Bitmap(*v5);
    v14 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, ".");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v20);
  }
  quasar::SystemConfig::getPrefix(a2, (std::string *)v20);
  v7 = std::string::append((std::string *)v20, "ptt");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v19 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)v18 = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if ((v20[23] & 0x80000000) != 0)
    operator delete(*(void **)v20);
  if (quasar::gLogLevel >= 4)
  {
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v21 = 0u;
    memset(v20, 0, sizeof(v20));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Looking for PTT configuration at root ", 38);
    if (v19 >= 0)
      v10 = v18;
    else
      v10 = (void **)v18[0];
    if (v19 >= 0)
      v11 = HIBYTE(v19);
    else
      v11 = (uint64_t)v18[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v20);
  }
  if (quasar::SystemConfig::getPtreeOptional((uint64_t)a2, (uint64_t)v18))
  {
    v12 = (quasar::ptt::PronunciationRecognizer *)operator new();
    quasar::ptt::PronunciationRecognizer::PronunciationRecognizer(v12, a2, v18);
    std::unique_ptr<quasar::ptt::PronunciationRecognizer>::reset[abi:ne180100]((quasar::ptt::PronunciationRecognizer **)this + 70, v12);
    if (quasar::gLogLevel < 4)
      goto LABEL_23;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v21 = 0u;
    memset(v20, 0, sizeof(v20));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Initialized PTT.", 16);
  }
  else
  {
    if (quasar::gLogLevel < 4)
      goto LABEL_23;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v21 = 0u;
    memset(v20, 0, sizeof(v20));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"No PTT configuration specified.", 31);
  }
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v20);
LABEL_23:
  std::string::basic_string[abi:ne180100]<0>(v20, "skip-lme-utterances");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Skip utterances where the original top-1 contains LME");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v20, (uint64_t)this + 568, (uint64_t)&__p, 0, 270, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v20[23] & 0x80000000) != 0)
    operator delete(*(void **)v20);
  std::string::basic_string[abi:ne180100]<0>(v20, "num-original-hypotheses-to-retain");
  std::string::basic_string[abi:ne180100]<0>(&__p, "DEPRECATED; use num-original-hypotheses-to-consider-during-rescoring instead.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v20, (uint64_t)this + 572, (uint64_t)&__p, 0, 270, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v20[23] & 0x80000000) != 0)
    operator delete(*(void **)v20);
  std::string::basic_string[abi:ne180100]<0>(v20, "num-original-hypotheses-to-consider-during-rescoring");
  std::string::basic_string[abi:ne180100]<0>(&__p, "The number of original hypotheses to use during rescoring.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v20, (uint64_t)this + 572, (uint64_t)&__p, 0, 273, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v20[23] & 0x80000000) != 0)
    operator delete(*(void **)v20);
  std::string::basic_string[abi:ne180100]<0>(v20, "purge-unused-phonetic-alternatives-from-result-choices");
  std::string::basic_string[abi:ne180100]<0>(&__p, "If set, any PTT-generated hypotheses that do not replace the top-1 will be removed.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v20, (uint64_t)this + 576, (uint64_t)&__p, 0, 273, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v20[23] & 0x80000000) != 0)
    operator delete(*(void **)v20);
  if (SHIBYTE(v19) < 0)
    operator delete(v18[0]);
}

void sub_1AD9BF5A8()
{
  if (SLOBYTE(STACK[0x737]) < 0)
    JUMPOUT(0x1AD9BF58CLL);
  JUMPOUT(0x1AD9BF590);
}

void sub_1AD9BF5BC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, void *__p, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, ...)
{
  uint64_t v14;
  va_list va;

  va_start(va, a14);
  quasar::rescoring::RescorerConfig::~RescorerConfig((quasar::rescoring::RescorerConfig *)&STACK[0x720]);
  MEMORY[0x1AF44D190](v14, 0x10F2C4003D8C6B3);
  quasar::rescoring::RescorerConfig::~RescorerConfig((quasar::rescoring::RescorerConfig *)va);
  if (a14 && a13 < 0)
    operator delete(__p);
  if (a7 < 0)
    JUMPOUT(0x1AD9BF58CLL);
  JUMPOUT(0x1AD9BF590);
}

uint64_t quasar::RescoringDeliberationDecoder::supportsEager(quasar::RescoringDeliberationDecoder *this)
{
  return 1;
}

void quasar::RescoringDeliberationDecoder::~RescoringDeliberationDecoder(quasar::RescoringDeliberationDecoder *this)
{
  *(_QWORD *)this = &off_1E5D3A288;
  std::unique_ptr<quasar::ptt::PronunciationRecognizer>::reset[abi:ne180100]((quasar::ptt::PronunciationRecognizer **)this + 70, 0);
  flatbuffers_2_0_6::FlatBufferBuilder::~FlatBufferBuilder((quasar::RescoringDeliberationDecoder *)((char *)this + 456));
  std::unique_ptr<quasar::rescoring::Rescorer>::reset[abi:ne180100]((char ***)this + 56, 0);
  quasar::Decoder::~Decoder((void **)this);
}

{
  *(_QWORD *)this = &off_1E5D3A288;
  std::unique_ptr<quasar::ptt::PronunciationRecognizer>::reset[abi:ne180100]((quasar::ptt::PronunciationRecognizer **)this + 70, 0);
  flatbuffers_2_0_6::FlatBufferBuilder::~FlatBufferBuilder((quasar::RescoringDeliberationDecoder *)((char *)this + 456));
  std::unique_ptr<quasar::rescoring::Rescorer>::reset[abi:ne180100]((char ***)this + 56, 0);
  quasar::Decoder::~Decoder((void **)this);
  JUMPOUT(0x1AF44D190);
}

void quasar::rescoring::RescorerConfig::~RescorerConfig(quasar::rescoring::RescorerConfig *this)
{
  std::__tree<int>::destroy((uint64_t)this + 1720, *((_QWORD **)this + 216));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1704);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1688);
  quasar::SystemConfig::~SystemConfig((quasar::rescoring::RescorerConfig *)((char *)this + 144));
  if (*((_BYTE *)this + 128))
  {
    *((_QWORD *)this + 12) = &unk_1E5D343A0;
    if (*((char *)this + 127) < 0)
      operator delete(*((void **)this + 13));
  }
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

void flatbuffers_2_0_6::FlatBufferBuilder::Clear(flatbuffers_2_0_6::FlatBufferBuilder *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *((_DWORD *)this + 18) = 0;
  *((_WORD *)this + 38) = 0;
  v1 = *((_QWORD *)this + 6);
  if (v1)
  {
    v2 = v1 + *((_QWORD *)this + 4);
  }
  else
  {
    v2 = 0;
    *((_QWORD *)this + 4) = 0;
  }
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 7) = v2;
  *((_QWORD *)this + 8) = v1;
  *((_WORD *)this + 39) = 0;
  *((_QWORD *)this + 10) = 1;
  v3 = *((_QWORD *)this + 12);
  if (v3)
  {
    std::__tree<int>::destroy(*((_QWORD *)this + 12), *(_QWORD **)(v3 + 8));
    *(_QWORD *)v3 = v3 + 8;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 8) = 0;
  }
}

void quasar::extractPronunciation(uint64_t **a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  const std::string *v6;
  const std::string *v7;
  uint64_t *i;
  const std::string *v9;
  const std::string *v10;
  void *__p[2];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v4 = *a1;
  v5 = a1[1];
  if (v5 == *a1)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else if (a2 == 1)
  {
    for (i = v4 + 3; i != v5; i += 3)
    {
      if (quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator()((uint64_t)__p, i, v4))
      {
        v4 = i;
      }
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v9 = (const std::string *)*v4;
    v10 = (const std::string *)v4[1];
    if ((const std::string *)*v4 != v10)
    {
      do
      {
        std::string::basic_string[abi:ne180100]<0>(__p, " ");
        quasar::splitAndTrimNoEmpty(v9 + 2, (char *)__p, (uint64_t)a3);
        if (SBYTE7(v12) < 0)
          operator delete(__p[0]);
        v9 = (const std::string *)((char *)v9 + 224);
      }
      while (v9 != v10);
    }
  }
  else
  {
    if (a2)
    {
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      v12 = 0u;
      v13 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unknown strategy: ", 18);
      std::ostream::operator<<();
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v6 = (const std::string *)*v4;
    v7 = (const std::string *)v4[1];
    if ((const std::string *)*v4 != v7)
    {
      do
      {
        std::string::basic_string[abi:ne180100]<0>(__p, " ");
        quasar::splitAndTrimNoEmpty(v6 + 2, (char *)__p, (uint64_t)a3);
        if (SBYTE7(v12) < 0)
          operator delete(__p[0]);
        v6 = (const std::string *)((char *)v6 + 224);
      }
      while (v6 != v7);
    }
  }
}

void sub_1AD9BF984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t quasar::rescoring::MultiSourceNBestListBuilder::addResultChoices<std::__wrap_iter<std::vector<quasar::Token> const*>>(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  float v14;
  float v15;
  float v16;
  float v17;
  flatbuffers_2_0_6::FlatBufferBuilder *v18;
  int v19;
  const char *v20;
  unint64_t v21;
  int String;
  int v23;
  const char *v24;
  unint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  char v30;
  int v31;
  int v32;
  int v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  int v43;
  uint64_t v44;
  uint64_t i;
  uint64_t v46;
  flatbuffers_2_0_6::FlatBufferBuilder *v47;
  int v48;
  const char *v49;
  unint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  int v64;
  flatbuffers_2_0_6::FlatBufferBuilder *v65;
  void **v66;
  unint64_t v67;
  int v68;
  void *v69;
  int v70;
  void *v71;
  int v72;
  float v73;
  int v74;
  float v75;
  float v76;
  float v77;
  int v78;
  int v79;
  unint64_t v80;
  char *v81;
  _DWORD *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  int v90;
  uint64_t v92;
  void **v93;
  void **v94;
  void *v97[2];
  unsigned __int8 v98;
  uint64_t v99;
  std::vector<unsigned int> v100;
  void *v101;
  char *v102;
  char *v103;
  void *v104;
  char *v105;
  char *v106;
  void **v107;
  uint64_t (*v108)();
  void *v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  void *__p[2];
  __int128 v115;
  _OWORD v116[5];
  __int128 v117;
  _OWORD v118[5];
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  v104 = 0;
  v105 = 0;
  v106 = 0;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  memset(&v100, 0, sizeof(v100));
  if (a2 != a3)
  {
    v5 = a2;
    v94 = (void **)(a1 + 48);
    v92 = a1 + 88;
    v93 = (void **)(a1 + 72);
    do
    {
      v99 = (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 2;
      boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::basic_format((uint64_t)&v110, "%1%-%2%");
      v107 = v94;
      v108 = boost::io::detail::call_put_head<char,std::char_traits<char>,std::string const>;
      v109 = boost::io::detail::call_put_last<char,std::char_traits<char>,std::string const>;
      v6 = boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>((uint64_t)&v110, &v107);
      v107 = (void **)&v99;
      v108 = boost::io::detail::call_put_head<char,std::char_traits<char>,unsigned long const>;
      v109 = boost::io::detail::call_put_last<char,std::char_traits<char>,unsigned long const>;
      v7 = boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>(v6, &v107);
      boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::str(v7, (uint64_t)v97);
      if (BYTE8(v117))
      {
        std::locale::~locale((std::locale *)v118);
        BYTE8(v117) = 0;
      }
      boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf((uint64_t)v116);
      if (SBYTE7(v115) < 0)
        operator delete(__p[0]);
      if (*((_QWORD *)&v111 + 1))
        operator delete(*((void **)&v111 + 1));
      v107 = (void **)&v110;
      std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__destroy_vector::operator()[abi:ne180100](&v107);
      v100.__end_ = v100.__begin_;
      std::vector<int>::reserve(&v100, 0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 5));
      v105 = (char *)v104;
      v9 = *v5;
      v8 = v5[1];
      if (*v5 == v8)
      {
        v13 = 0.0;
        v12 = 0.0;
        v11 = 0.0;
        v10 = 0.0;
      }
      else
      {
        v10 = 0.0;
        v11 = 0.0;
        v12 = 0.0;
        v13 = 0.0;
        do
        {
          v15 = *(float *)(v9 + 204);
          v14 = *(float *)(v9 + 208);
          v17 = *(float *)(v9 + 212);
          v16 = *(float *)(v9 + 216);
          v18 = *(flatbuffers_2_0_6::FlatBufferBuilder **)a1;
          v19 = *(char *)(v9 + 23);
          if (v19 >= 0)
            v20 = (const char *)v9;
          else
            v20 = *(const char **)v9;
          if (v19 >= 0)
            v21 = *(unsigned __int8 *)(v9 + 23);
          else
            v21 = *(_QWORD *)(v9 + 8);
          String = flatbuffers_2_0_6::FlatBufferBuilder::CreateString(*(flatbuffers_2_0_6::FlatBufferBuilder **)a1, v20, v21);
          v23 = *(char *)(v9 + 71);
          if (v23 >= 0)
            v24 = (const char *)(v9 + 48);
          else
            v24 = *(const char **)(v9 + 48);
          if (v23 >= 0)
            v25 = *(unsigned __int8 *)(v9 + 71);
          else
            v25 = *(_QWORD *)(v9 + 56);
          v26 = flatbuffers_2_0_6::FlatBufferBuilder::CreateString(*(flatbuffers_2_0_6::FlatBufferBuilder **)a1, v24, v25);
          v27 = *(_DWORD *)(v9 + 168);
          if (v27 == 5)
          {
            v117 = 0u;
            memset(v118, 0, sizeof(v118));
            v115 = 0u;
            memset(v116, 0, sizeof(v116));
            v113 = 0u;
            *(_OWORD *)__p = 0u;
            v111 = 0u;
            v112 = 0u;
            v110 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v110);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v110, (uint64_t)"Provided LME type is invalid. Could it be that the input data was generated using an older version of the decoder?", 114);
            quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v110);
          }
          v28 = v26;
          v29 = *(_DWORD *)(v9 + 24);
          if (v27 == 4)
            v30 = 1;
          else
            v30 = 2;
          *((_BYTE *)v18 + 78) = 1;
          v31 = *((_DWORD *)v18 + 10);
          flatbuffers_2_0_6::FlatBufferBuilder::AddElement<int>((char *)v18, 8, v29, 0);
          flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>((char *)v18, 6, v28);
          flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>((char *)v18, 4, String);
          flatbuffers_2_0_6::FlatBufferBuilder::AddElement<signed char>((char *)v18, 10, v30, 0);
          v32 = flatbuffers_2_0_6::FlatBufferBuilder::EndTable(v18, v31);
          v33 = v32;
          v34 = v105;
          if (v105 >= v106)
          {
            v36 = (char *)v104;
            v37 = (v105 - (_BYTE *)v104) >> 2;
            v38 = v37 + 1;
            if ((unint64_t)(v37 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v39 = v106 - (_BYTE *)v104;
            if ((v106 - (_BYTE *)v104) >> 1 > v38)
              v38 = v39 >> 1;
            if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
              v40 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v40 = v38;
            if (v40)
            {
              v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v106, v40);
              v36 = (char *)v104;
              v34 = v105;
            }
            else
            {
              v41 = 0;
            }
            v42 = &v41[4 * v37];
            *(_DWORD *)v42 = v33;
            v35 = v42 + 4;
            while (v34 != v36)
            {
              v43 = *((_DWORD *)v34 - 1);
              v34 -= 4;
              *((_DWORD *)v42 - 1) = v43;
              v42 -= 4;
            }
            v104 = v42;
            v105 = v35;
            v106 = &v41[4 * v40];
            if (v36)
              operator delete(v36);
          }
          else
          {
            *(_DWORD *)v105 = v32;
            v35 = v34 + 4;
          }
          v10 = v10 + v15;
          v11 = v11 + v14;
          v12 = v12 + v17;
          v13 = v13 + v16;
          v105 = v35;
          v9 += 224;
        }
        while (v9 != v8);
      }
      if (*(_BYTE *)(a1 + 40))
      {
        v102 = (char *)v101;
        v44 = *(_QWORD *)(a1 + 32);
        if (!v44)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v44 + 48))(&v110, v44, v5);
        v46 = *((_QWORD *)&v110 + 1);
        for (i = v110; i != v46; i += 224)
        {
          v47 = *(flatbuffers_2_0_6::FlatBufferBuilder **)a1;
          v48 = *(char *)(i + 23);
          if (v48 >= 0)
            v49 = (const char *)i;
          else
            v49 = *(const char **)i;
          if (v48 >= 0)
            v50 = *(unsigned __int8 *)(i + 23);
          else
            v50 = *(_QWORD *)(i + 8);
          v51 = flatbuffers_2_0_6::FlatBufferBuilder::CreateString(*(flatbuffers_2_0_6::FlatBufferBuilder **)a1, v49, v50);
          *((_BYTE *)v47 + 78) = 1;
          v52 = *((_DWORD *)v47 + 10);
          flatbuffers_2_0_6::FlatBufferBuilder::AddElement<int>((char *)v47, 8, 0, 0);
          flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>((char *)v47, 6, 0);
          flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>((char *)v47, 4, v51);
          flatbuffers_2_0_6::FlatBufferBuilder::AddElement<signed char>((char *)v47, 10, 0, 0);
          v53 = flatbuffers_2_0_6::FlatBufferBuilder::EndTable(v47, v52);
          v54 = v53;
          v55 = v102;
          if (v102 >= v103)
          {
            v57 = (char *)v101;
            v58 = (v102 - (_BYTE *)v101) >> 2;
            v59 = v58 + 1;
            if ((unint64_t)(v58 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v60 = v103 - (_BYTE *)v101;
            if ((v103 - (_BYTE *)v101) >> 1 > v59)
              v59 = v60 >> 1;
            if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL)
              v61 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v61 = v59;
            if (v61)
            {
              v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v103, v61);
              v57 = (char *)v101;
              v55 = v102;
            }
            else
            {
              v62 = 0;
            }
            v63 = &v62[4 * v58];
            *(_DWORD *)v63 = v54;
            v56 = v63 + 4;
            while (v55 != v57)
            {
              v64 = *((_DWORD *)v55 - 1);
              v55 -= 4;
              *((_DWORD *)v63 - 1) = v64;
              v63 -= 4;
            }
            v101 = v63;
            v102 = v56;
            v103 = &v62[4 * v61];
            if (v57)
              operator delete(v57);
          }
          else
          {
            *(_DWORD *)v102 = v53;
            v56 = v55 + 4;
          }
          v102 = v56;
        }
        v107 = (void **)&v110;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v107);
      }
      v65 = *(flatbuffers_2_0_6::FlatBufferBuilder **)a1;
      if ((v98 & 0x80u) == 0)
        v66 = v97;
      else
        v66 = (void **)v97[0];
      if ((v98 & 0x80u) == 0)
        v67 = v98;
      else
        v67 = (unint64_t)v97[1];
      v68 = flatbuffers_2_0_6::FlatBufferBuilder::CreateString(*(flatbuffers_2_0_6::FlatBufferBuilder **)a1, (const char *)v66, v67);
      if (v105 == v104)
        v69 = &flatbuffers_2_0_6::data<flatbuffers_2_0_6::Offset<quasar::rescoring::NBestListToken>,std::allocator<flatbuffers_2_0_6::Offset<quasar::rescoring::NBestListToken>>>(std::vector<flatbuffers_2_0_6::Offset<quasar::rescoring::NBestListToken>> const&)::t;
      else
        v69 = v104;
      v70 = flatbuffers_2_0_6::FlatBufferBuilder::CreateVector<quasar::rescoring::NBestListToken>(*(flatbuffers_2_0_6::FlatBufferBuilder **)a1, (uint64_t)v69, (v105 - (_BYTE *)v104) >> 2);
      if (v102 == v101)
        v71 = &flatbuffers_2_0_6::data<flatbuffers_2_0_6::Offset<quasar::rescoring::NBestListToken>,std::allocator<flatbuffers_2_0_6::Offset<quasar::rescoring::NBestListToken>>>(std::vector<flatbuffers_2_0_6::Offset<quasar::rescoring::NBestListToken>> const&)::t;
      else
        v71 = v101;
      v72 = flatbuffers_2_0_6::FlatBufferBuilder::CreateVector<quasar::rescoring::NBestListToken>(*(flatbuffers_2_0_6::FlatBufferBuilder **)a1, (uint64_t)v71, (v102 - (_BYTE *)v101) >> 2);
      v73 = v13;
      *((_BYTE *)v65 + 78) = 1;
      v74 = *((_DWORD *)v65 + 10);
      flatbuffers_2_0_6::FlatBufferBuilder::AddElement<float>((char *)v65, 18, v73, 0.0);
      v75 = v12;
      flatbuffers_2_0_6::FlatBufferBuilder::AddElement<float>((char *)v65, 16, v75, 0.0);
      v76 = v11;
      flatbuffers_2_0_6::FlatBufferBuilder::AddElement<float>((char *)v65, 14, v76, 0.0);
      v77 = v10;
      flatbuffers_2_0_6::FlatBufferBuilder::AddElement<float>((char *)v65, 12, v77, 0.0);
      flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>((char *)v65, 10, v72);
      flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>((char *)v65, 8, v70);
      flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>((char *)v65, 6, v68);
      flatbuffers_2_0_6::FlatBufferBuilder::AddElement<int>((char *)v65, 4, a4, 0);
      v78 = flatbuffers_2_0_6::FlatBufferBuilder::EndTable(v65, v74);
      v79 = v78;
      v81 = *(char **)(a1 + 80);
      v80 = *(_QWORD *)(a1 + 88);
      if ((unint64_t)v81 >= v80)
      {
        v83 = (char *)*v93;
        v84 = (v81 - (_BYTE *)*v93) >> 2;
        v85 = v84 + 1;
        if ((unint64_t)(v84 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v86 = v80 - (_QWORD)v83;
        if (v86 >> 1 > v85)
          v85 = v86 >> 1;
        if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL)
          v87 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v87 = v85;
        if (v87)
        {
          v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v92, v87);
          v83 = *(char **)(a1 + 72);
          v81 = *(char **)(a1 + 80);
        }
        else
        {
          v88 = 0;
        }
        v89 = &v88[4 * v84];
        *(_DWORD *)v89 = v79;
        v82 = v89 + 4;
        while (v81 != v83)
        {
          v90 = *((_DWORD *)v81 - 1);
          v81 -= 4;
          *((_DWORD *)v89 - 1) = v90;
          v89 -= 4;
        }
        *(_QWORD *)(a1 + 72) = v89;
        *(_QWORD *)(a1 + 80) = v82;
        *(_QWORD *)(a1 + 88) = &v88[4 * v87];
        if (v83)
          operator delete(v83);
      }
      else
      {
        *(_DWORD *)v81 = v78;
        v82 = v81 + 4;
      }
      *(_QWORD *)(a1 + 80) = v82;
      if ((char)v98 < 0)
        operator delete(v97[0]);
      v5 += 3;
    }
    while (v5 != a3);
    if (v100.__begin_)
    {
      v100.__end_ = v100.__begin_;
      operator delete(v100.__begin_);
    }
    if (v101)
    {
      v102 = (char *)v101;
      operator delete(v101);
    }
  }
  if (v104)
  {
    v105 = (char *)v104;
    operator delete(v104);
  }
  return a1;
}

void sub_1AD9C01D0(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1AD9C0248);
}

void sub_1AD9C01E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void **a32,uint64_t a33,uint64_t a34,char a35)
{
  void *v36;
  char v37;
  void *v38;
  void *v39;
  void *v40;

  a32 = (void **)&a35;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a32);
  if (v37 < 0)
    operator delete(v36);
  if (v38)
    operator delete(v38);
  if (v39)
    operator delete(v39);
  if (v40)
    operator delete(v40);
  _Unwind_Resume(a1);
}

_QWORD *quasar::lm::operator<<<std::string>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[", 1);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      v6 = *(char *)(v4 + 23);
      if (v6 >= 0)
        v7 = v4;
      else
        v7 = *(_QWORD *)v4;
      if (v6 >= 0)
        v8 = *(unsigned __int8 *)(v4 + 23);
      else
        v8 = *(_QWORD *)(v4 + 8);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v7, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
      v4 += 24;
    }
    while (v4 != v5);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"]", 1);
  return a1;
}

void quasar::rescoring::MultiSourceNBestListBuilder::~MultiSourceNBestListBuilder(quasar::rescoring::MultiSourceNBestListBuilder *this)
{
  void *v2;
  quasar::rescoring::MultiSourceNBestListBuilder *v3;
  uint64_t v4;

  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((_BYTE *)this + 40))
  {
    v3 = (quasar::rescoring::MultiSourceNBestListBuilder *)*((_QWORD *)this + 4);
    if (v3 == (quasar::rescoring::MultiSourceNBestListBuilder *)((char *)this + 8))
    {
      v4 = 4;
      v3 = (quasar::rescoring::MultiSourceNBestListBuilder *)((char *)this + 8);
    }
    else
    {
      if (!v3)
        return;
      v4 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
}

std::string *quasar::rescoring::MultiSourceNBestListBuilder::MultiSourceNBestListBuilder(std::string *a1, std::string::size_type a2, __int128 *a3, uint64_t a4)
{
  std::string *v6;
  __int128 v7;

  a1->__r_.__value_.__r.__words[0] = a2;
  v6 = a1 + 2;
  std::__optional_copy_base<std::function<std::vector<quasar::Token> ()(std::vector<quasar::Token> const&)>,false>::__optional_copy_base[abi:ne180100](&a1->__r_.__value_.__s.__data_[8], a4);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    v6->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  a1[3].__r_.__value_.__r.__words[0] = 0;
  a1[3].__r_.__value_.__l.__size_ = 0;
  a1[3].__r_.__value_.__r.__words[2] = 0;
  return a1;
}

void sub_1AD9C03D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_BYTE *)(v1 + 40))
    quasar::rescoring::MultiSourceNBestListBuilder::MultiSourceNBestListBuilder(v1, v2);
  _Unwind_Resume(exception_object);
}

_BYTE *std::__optional_copy_base<std::function<std::vector<quasar::Token> ()(std::vector<quasar::Token> const&)>,false>::__optional_copy_base[abi:ne180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[32] = 0;
  if (*(_BYTE *)(a2 + 32))
  {
    std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)a1, a2);
    a1[32] = 1;
  }
  return a1;
}

void sub_1AD9C0438(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 32))
    std::__optional_copy_base<std::function<std::vector<quasar::Token> ()(std::vector<quasar::Token> const&)>,false>::__optional_copy_base[abi:ne180100]((_QWORD *)v1);
  _Unwind_Resume(exception_object);
}

BOOL quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  _QWORD v26[3];
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;
  _QWORD v30[3];
  _QWORD *v31;
  _QWORD v32[3];
  _QWORD *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v5 = v32;
  v32[0] = &off_1E5D3FF00;
  v33 = v32;
  v6 = *a2;
  v7 = a2[1];
  v8 = 0.0;
  if (*a2 == v7)
  {
    v9 = 4;
  }
  else
  {
    do
    {
      if (!v33)
        std::__throw_bad_function_call[abi:ne180100]();
      v8 = v8 + (*(float (**)(_QWORD *, uint64_t))(*v33 + 48))(v33, v6);
      v6 += 224;
    }
    while (v6 != v7);
    v5 = v33;
    if (v33 == v32)
    {
      v9 = 4;
      v5 = v32;
    }
    else
    {
      if (!v33)
        goto LABEL_10;
      v9 = 5;
    }
  }
  (*(void (**)(void))(*v5 + 8 * v9))();
LABEL_10:
  v10 = v30;
  v30[0] = &off_1E5D3FDF8;
  v31 = v30;
  v11 = *a3;
  v12 = a3[1];
  v13 = 0.0;
  if (*a3 == v12)
  {
    v14 = 4;
  }
  else
  {
    do
    {
      if (!v31)
        std::__throw_bad_function_call[abi:ne180100]();
      v13 = v13 + (*(float (**)(_QWORD *, uint64_t))(*v31 + 48))(v31, v11);
      v11 += 224;
    }
    while (v11 != v12);
    v10 = v31;
    if (v31 == v30)
    {
      v14 = 4;
      v10 = v30;
    }
    else
    {
      if (!v31)
        goto LABEL_19;
      v14 = 5;
    }
  }
  (*(void (**)(void))(*v10 + 8 * v14))();
LABEL_19:
  if (v8 < v13)
    return 1;
  if (v8 > v13)
    return 0;
  v16 = v28;
  v28[0] = &off_1E5D3FE50;
  v29 = v28;
  v18 = *a2;
  v17 = a2[1];
  if (v18 == v17)
  {
    v19 = 0.0;
    v20 = 4;
  }
  else
  {
    v16 = v28;
    v19 = 0.0;
    while (1)
    {
      v19 = v19 + (*(float (**)(_QWORD *, uint64_t))(*v16 + 48))(v16, v18);
      v18 += 224;
      v16 = v29;
      if (v18 == v17)
        break;
      if (!v29)
        std::__throw_bad_function_call[abi:ne180100]();
    }
    if (v29 == v28)
    {
      v20 = 4;
      v16 = v28;
    }
    else
    {
      if (!v29)
        goto LABEL_34;
      v20 = 5;
    }
  }
  (*(void (**)(void))(*v16 + 8 * v20))();
LABEL_34:
  v21 = v26;
  v26[0] = &off_1E5D3FEA8;
  v27 = v26;
  v23 = *a3;
  v22 = a3[1];
  if (v23 == v22)
  {
    v24 = 0.0;
    v25 = 4;
    goto LABEL_44;
  }
  v21 = v26;
  v24 = 0.0;
  while (1)
  {
    v24 = v24 + (*(float (**)(_QWORD *, uint64_t))(*v21 + 48))(v21, v23);
    v23 += 224;
    v21 = v27;
    if (v23 == v22)
      break;
    if (!v27)
      std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v27 == v26)
  {
    v25 = 4;
    v21 = v26;
    goto LABEL_44;
  }
  if (v27)
  {
    v25 = 5;
LABEL_44:
    (*(void (**)(void))(*v21 + 8 * v25))();
  }
  return v19 < v24;
}

void sub_1AD9C0714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  char *v22;
  uint64_t v23;

  v22 = a13;
  if (a13 == &a10)
  {
    v23 = 4;
    v22 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#1},std::allocator<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#1}>,float ()(quasar::Token const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#1},std::allocator<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#1}>,float ()(quasar::Token const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E5D3FF00;
  return result;
}

void std::__function::__func<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#1},std::allocator<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#1}>,float ()(quasar::Token const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E5D3FF00;
}

float std::__function::__func<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#1},std::allocator<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#1}>,float ()(quasar::Token const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 216);
}

uint64_t std::__function::__func<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#1},std::allocator<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#1}>,float ()(quasar::Token const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#1},std::allocator<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#1}>,float ()(quasar::Token const&)>::target_type()
{
}

void std::__function::__func<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#2},std::allocator<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#2}>,float ()(quasar::Token const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#2},std::allocator<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#2}>,float ()(quasar::Token const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E5D3FDF8;
  return result;
}

void std::__function::__func<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#2},std::allocator<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#2}>,float ()(quasar::Token const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E5D3FDF8;
}

float std::__function::__func<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#2},std::allocator<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#2}>,float ()(quasar::Token const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 216);
}

uint64_t std::__function::__func<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#2},std::allocator<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#2}>,float ()(quasar::Token const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#2},std::allocator<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#2}>,float ()(quasar::Token const&)>::target_type()
{
}

void std::__function::__func<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#3},std::allocator<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#3}>,float ()(quasar::Token const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#3},std::allocator<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#3}>,float ()(quasar::Token const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E5D3FE50;
  return result;
}

void std::__function::__func<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#3},std::allocator<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#3}>,float ()(quasar::Token const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E5D3FE50;
}

float std::__function::__func<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#3},std::allocator<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#3}>,float ()(quasar::Token const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 208);
}

uint64_t std::__function::__func<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#3},std::allocator<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#3}>,float ()(quasar::Token const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#3},std::allocator<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#3}>,float ()(quasar::Token const&)>::target_type()
{
}

void std::__function::__func<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#4},std::allocator<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#4}>,float ()(quasar::Token const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#4},std::allocator<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#4}>,float ()(quasar::Token const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E5D3FEA8;
  return result;
}

void std::__function::__func<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#4},std::allocator<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#4}>,float ()(quasar::Token const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E5D3FEA8;
}

float std::__function::__func<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#4},std::allocator<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#4}>,float ()(quasar::Token const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 208);
}

uint64_t std::__function::__func<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#4},std::allocator<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#4}>,float ()(quasar::Token const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#4},std::allocator<quasar::extractPronunciation(std::vector<std::vector<quasar::Token>> const&,quasar::ExtractPronunciationStrategy)::{lambda(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)#1}::operator() const(std::vector<quasar::Token> const&,std::vector<quasar::Token> const&)::{lambda(quasar::Token const&)#4}>,float ()(quasar::Token const&)>::target_type()
{
}

void boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::str(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::string::size_type v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  _QWORD v21[3];

  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)a1)
  {
    if (*(char *)(a1 + 87) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a2, *(const std::string::value_type **)(a1 + 64), *(_QWORD *)(a1 + 72));
    }
    else
    {
      *(_OWORD *)a2 = *(_OWORD *)(a1 + 64);
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 80);
    }
  }
  else
  {
    v4 = *(int *)(a1 + 52);
    v5 = *(int *)(a1 + 56);
    if ((int)v4 < (int)v5 && (*(_BYTE *)(a1 + 88) & 2) != 0)
    {
      v21[0] = &unk_1E5D298F0;
      v21[1] = v4;
      v21[2] = v5;
      boost::throw_exception<boost::io::too_few_args>((uint64_t)v21);
    }
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v6 = boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::size((uint64_t *)a1);
    std::string::reserve((std::string *)a2, v6);
    v7 = *(char *)(a1 + 87);
    if (v7 >= 0)
      v8 = (const std::string::value_type *)(a1 + 64);
    else
      v8 = *(const std::string::value_type **)(a1 + 64);
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(a1 + 87);
    else
      v9 = *(_QWORD *)(a1 + 72);
    std::string::append((std::string *)a2, v8, v9);
    v10 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 8) != *(_QWORD *)a1)
    {
      v11 = 0;
      v12 = 0;
      do
      {
        v13 = *(char *)(v10 + v11 + 31);
        if (v13 >= 0)
          v14 = (const std::string::value_type *)(v10 + v11 + 8);
        else
          v14 = *(const std::string::value_type **)(v10 + v11 + 8);
        if (v13 >= 0)
          v15 = *(unsigned __int8 *)(v10 + v11 + 31);
        else
          v15 = *(_QWORD *)(v10 + v11 + 16);
        std::string::append((std::string *)a2, v14, v15);
        if (*(_DWORD *)(v10 + v11) == -2)
        {
          v16 = *(_QWORD *)(v10 + v11 + 56);
          v17 = *(char *)(a2 + 23) < 0 ? *(_QWORD *)(a2 + 8) : *(unsigned __int8 *)(a2 + 23);
          if (v16 > v17)
            std::string::append((std::string *)a2, v16 - v17, *(_BYTE *)(v10 + v11 + 72));
        }
        v18 = *(char *)(v10 + v11 + 55);
        if (v18 >= 0)
          v19 = (const std::string::value_type *)(v10 + v11 + 32);
        else
          v19 = *(const std::string::value_type **)(v10 + v11 + 32);
        if (v18 >= 0)
          v20 = *(unsigned __int8 *)(v10 + v11 + 55);
        else
          v20 = *(_QWORD *)(v10 + v11 + 40);
        std::string::append((std::string *)a2, v19, v20);
        ++v12;
        v10 = *(_QWORD *)a1;
        v11 += 120;
      }
      while (v12 < 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3));
    }
    *(_BYTE *)(a1 + 60) = 1;
  }
}

void sub_1AD9C0C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  std::exception::~exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::~basic_format(uint64_t a1)
{
  void *v2;
  void **v4;

  if (*(_BYTE *)(a1 + 184))
  {
    std::locale::~locale((std::locale *)(a1 + 192));
    *(_BYTE *)(a1 + 184) = 0;
  }
  boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf(a1 + 96);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  v2 = *(void **)(a1 + 24);
  if (v2)
    operator delete(v2);
  v4 = (void **)a1;
  std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

uint64_t boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::basic_format(uint64_t a1, char *a2)
{
  std::string __p;

  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 45) = 0u;
  *(_BYTE *)(a1 + 88) = -1;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 96) = &unk_1E5D29968;
  *(_QWORD *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 172) = 24;
  *(_BYTE *)(a1 + 184) = 0;
  if (a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, a2);
    boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::parse(a1, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1AD9C0D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;
  void **v17;
  void *v19;

  if (a15 < 0)
    operator delete(__p);
  if (*(_BYTE *)(v15 + 184))
  {
    std::locale::~locale((std::locale *)(v15 + 192));
    *(_BYTE *)(v15 + 184) = 0;
  }
  boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf(v16);
  if (*(char *)(v15 + 87) < 0)
    operator delete(*v17);
  v19 = *(void **)(v15 + 24);
  if (v19)
    operator delete(v19);
  __p = (void *)v15;
  std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::parse(uint64_t a1, const std::string *a2)
{
  std::locale::facet *v4;
  char v5;
  int v6;
  std::string::size_type v7;
  std::string::size_type v8;
  int v9;
  std::string::size_type v10;
  std::string *v11;
  std::string::size_type v12;
  std::string::size_type size;
  char *v14;
  unsigned __int8 *v15;
  const std::string *v16;
  int v17;
  std::string::size_type v18;
  int v19;
  int v20;
  int v21;
  std::string *v22;
  std::string::size_type v23;
  BOOL v24;
  char *v25;
  int v26;
  _DWORD *v27;
  uint64_t v28;
  char v29;
  char v31;
  char v32;
  int v33;
  int v34;
  const std::string *v35;
  std::locale v36;
  void *v37[2];
  void *__p[2];
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  int v44;
  char v45;
  std::locale v46[2];
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::getloc(a1, &v36);
  v4 = (std::locale::facet *)std::locale::use_facet(&v36, MEMORY[0x1E0DE4A90]);
  std::locale::~locale(&v36);
  v5 = ((uint64_t (*)(std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 37);
  v6 = boost::io::detail::upper_bound_from_fstring<std::string,std::ctype<char>>(a2, v5, (uint64_t)v4, *(_BYTE *)(a1 + 88));
  boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::make_or_reuse_data(a1, v6);
  v35 = 0;
  v7 = std::string::find(a2, v5, 0);
  if (v7 == -1)
  {
    v10 = 0;
    v34 = 0;
    v33 = -1;
    v31 = 0;
    v32 = 1;
  }
  else
  {
    v8 = v7;
    v9 = 0;
    v10 = 0;
    v34 = 0;
    v33 = -1;
    v31 = 0;
    v32 = 1;
    do
    {
      v11 = (std::string *)(a1 + 64);
      if (v9)
        v11 = (std::string *)(*(_QWORD *)a1 + 120 * v9 - 88);
      v12 = v8 + 1;
      size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      v14 = (char *)a2->__r_.__value_.__r.__words[0];
      if ((size & 0x80u) == 0)
        v14 = (char *)a2;
      if (v14[v12] == v14[v8])
      {
        std::string::append[abi:ne180100]<std::__wrap_iter<char const*>,0>(v11, &v14[v10], &v14[v12]);
        v10 = v8 + 2;
        v15 = (unsigned __int8 *)(v8 + 2);
      }
      else
      {
        if (v8 != v10)
        {
          std::string::append[abi:ne180100]<std::__wrap_iter<char const*>,0>(v11, &v14[v10], &v14[v8]);
          size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
        }
        if ((size & 0x80) != 0)
        {
          v16 = (const std::string *)a2->__r_.__value_.__r.__words[0];
          size = a2->__r_.__value_.__l.__size_;
        }
        else
        {
          v16 = a2;
        }
        v35 = (const std::string *)((char *)v16 + v12);
        v36.__locale_ = (std::locale::__imp *)((char *)v16 + size);
        v17 = boost::io::detail::parse_printf_directive<char,std::char_traits<char>,std::allocator<char>,std::__wrap_iter<char const*>,std::ctype<char>>((unsigned __int8 **)&v35, (char **)&v36, *(_QWORD *)a1 + 120 * v9, v4, (unsigned __int8 *)(v8 + 1), *(unsigned __int8 *)(a1 + 88));
        if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v18 = (std::string::size_type)a2;
        else
          v18 = a2->__r_.__value_.__r.__words[0];
        v15 = (unsigned __int8 *)v35 - v18;
        if (v17)
        {
          boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>::compute_states(*(_QWORD *)a1 + 120 * v9);
          v19 = *(_DWORD *)(*(_QWORD *)a1 + 120 * v9);
          if (v19 != -3)
          {
            if (v19 == -1)
            {
              v32 = 0;
              v20 = v34;
            }
            else
            {
              v20 = v34;
              if (v19 == -2)
              {
                v31 = 1;
              }
              else
              {
                v21 = v33;
                if (v19 > v33)
                  v21 = *(_DWORD *)(*(_QWORD *)a1 + 120 * v9);
                v33 = v21;
              }
            }
            v34 = v20 + 1;
            ++v9;
          }
          v10 = (std::string::size_type)v15;
        }
        else
        {
          v10 = v8;
        }
      }
      v8 = std::string::find(a2, v5, (std::string::size_type)v15);
    }
    while (v8 != -1);
    if (v9)
    {
      v22 = (std::string *)(*(_QWORD *)a1 + 120 * v9 - 88);
      goto LABEL_34;
    }
  }
  v22 = (std::string *)(a1 + 64);
LABEL_34:
  v23 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v24 = (v23 & 0x80u) != 0;
  if ((v23 & 0x80u) != 0)
    v23 = a2->__r_.__value_.__l.__size_;
  if (v24)
    v25 = (char *)a2->__r_.__value_.__r.__words[0];
  else
    v25 = (char *)a2;
  std::string::append[abi:ne180100]<std::__wrap_iter<char const*>,0>(v22, &v25[v10], &v25[v23]);
  if ((v32 & 1) == 0)
  {
    if ((v33 & 0x80000000) == 0 && (*(_BYTE *)(a1 + 88) & 1) != 0)
    {
      v36.__locale_ = (std::locale::__imp *)&unk_1E5D29940;
      v37[0] = (void *)v33;
      v37[1] = 0;
      boost::throw_exception<boost::io::bad_format_string>((uint64_t)&v36);
    }
    if (v34 < 1)
    {
      v26 = 0;
    }
    else
    {
      v26 = 0;
      v27 = *(_DWORD **)a1;
      v28 = v34;
      do
      {
        if (*v27 == -1)
          *v27 = v26++;
        v27 += 30;
        --v28;
      }
      while (v28);
    }
    v33 = v26 - 1;
  }
  v29 = ((uint64_t (*)(std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 32);
  LODWORD(v36.__locale_) = -1;
  v45 = 0;
  *(_OWORD *)v37 = 0u;
  *(_OWORD *)__p = 0u;
  v39 = 0u;
  v40 = 0;
  v41 = 6;
  v42 = v29;
  v44 = 0;
  v43 = 4098;
  v46[1].__locale_ = (std::locale::__imp *)0x7FFFFFFFFFFFFFFFLL;
  v47 = 0;
  std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::resize((uint64_t *)a1, v34, (uint64_t)&v36);
  if (v45)
  {
    std::locale::~locale(v46);
    v45 = 0;
  }
  if (SHIBYTE(v39) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v37[0]);
  if ((v31 & 1) != 0)
    *(_DWORD *)(a1 + 48) |= 4u;
  *(_DWORD *)(a1 + 56) = v33 + 1;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a1 + 48) & 0xFFFFFFFE | v32 & 1;
  return a1;
}

void sub_1AD9C1204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::exception a14)
{
  std::exception::~exception(&a14);
  _Unwind_Resume(a1);
}

void boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf(uint64_t a1)
{
  boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf(a1);
  JUMPOUT(0x1AF44D190);
}

double boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  double result;

  v5 = a1[6];
  if (v5 && a1[8] < v5)
    a1[8] = v5;
  if ((a4 & 8) != 0)
  {
    v6 = a1[3];
    if (v6)
    {
      if (a3)
      {
        if (a3 == 1)
        {
          if ((a4 & 0x10) != 0)
            goto LABEL_29;
          goto LABEL_21;
        }
        if (a3 != 2)
          goto LABEL_29;
        v7 = a1 + 8;
      }
      else
      {
        v7 = a1 + 2;
      }
      a2 = a2 - v6 + *v7;
LABEL_21:
      if (a1[2] <= (unint64_t)(v6 + a2) && (unint64_t)(v6 + a2) <= a1[8])
      {
        v11 = v6 + (int)a2;
        a1[3] = v11;
        if ((a4 & 0x10) == 0 || !v5)
          goto LABEL_27;
        LODWORD(v11) = v11 - v5;
LABEL_26:
        a1[6] = v5 + (int)v11;
LABEL_27:
        v8 = a2;
        goto LABEL_30;
      }
LABEL_29:
      v8 = -1;
      goto LABEL_30;
    }
  }
  v8 = -1;
  if ((a4 & 0x10) != 0 && v5)
  {
    if (!a3)
    {
      v10 = a1[5];
      v9 = v10 - v5;
      goto LABEL_16;
    }
    if (a3 == 2)
    {
      v9 = a1[8] - v5;
      v10 = a1[5];
LABEL_16:
      v11 = v9 + a2;
      if (v10 <= v5 + v11)
      {
        a2 = v11;
        if (v5 + v11 <= a1[8])
          goto LABEL_26;
      }
      goto LABEL_29;
    }
  }
LABEL_30:
  result = 0.0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_QWORD *)(a5 + 128) = v8;
  return result;
}

double boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v4 = *(_QWORD *)(a2 + 128);
  v5 = a1[6];
  if (v5 && a1[8] < v5)
    a1[8] = v5;
  if (v4 == -1)
    goto LABEL_16;
  if ((a3 & 8) != 0)
  {
    v6 = a1[3];
    if (v6)
    {
      if ((v4 & 0x8000000000000000) == 0)
      {
        v7 = a1[2];
        if (v4 <= a1[8] - v7)
        {
          v8 = v6 + (int)v4 - (int)v6 + (int)v7;
          a1[3] = v8;
          if ((a3 & 0x10) == 0 || !v5)
            goto LABEL_20;
          v9 = v8 - v5;
LABEL_19:
          a1[6] = v5 + v9;
LABEL_20:
          v10 = v4;
          goto LABEL_17;
        }
      }
      goto LABEL_16;
    }
  }
  if ((a3 & 0x10) == 0)
  {
LABEL_16:
    v10 = -1;
    goto LABEL_17;
  }
  v10 = -1;
  if (v5 && (v4 & 0x8000000000000000) == 0)
  {
    v11 = a1[2];
    if (v4 <= a1[8] - v11)
    {
      v9 = v4 - v5 + v11;
      goto LABEL_19;
    }
    goto LABEL_16;
  }
LABEL_17:
  result = 0.0;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_QWORD *)(a4 + 128) = v10;
  return result;
}

uint64_t boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::underflow(uint64_t a1)
{
  unsigned __int8 *v1;
  unint64_t v3;
  unint64_t v4;

  v1 = *(unsigned __int8 **)(a1 + 24);
  if (v1)
  {
    if ((unint64_t)v1 < *(_QWORD *)(a1 + 32))
      return *v1;
    if ((*(_BYTE *)(a1 + 76) & 8) != 0)
    {
      v3 = *(_QWORD *)(a1 + 48);
      if (v3)
      {
        v4 = *(_QWORD *)(a1 + 64);
        if ((unint64_t)v1 < v3 || (unint64_t)v1 < v4)
        {
          if (v4 < v3)
          {
            *(_QWORD *)(a1 + 64) = v3;
            v4 = v3;
          }
          *(_QWORD *)(a1 + 32) = v4;
          return *v1;
        }
      }
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::pbackfail(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _BYTE *v3;
  int v4;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2 && *(_QWORD *)(a1 + 16) < v2)
  {
    if ((_DWORD)a2 == -1 || (*(_DWORD *)(a1 + 76) & 0x10) != 0)
    {
      v3 = (_BYTE *)(v2 - 1);
      *(_QWORD *)(a1 + 24) = v3;
      if ((_DWORD)a2 == -1)
        return 0;
      goto LABEL_10;
    }
    v4 = *(unsigned __int8 *)(v2 - 1);
    v3 = (_BYTE *)(v2 - 1);
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = v3;
LABEL_10:
      *v3 = a2;
      return a2;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v4;
  unint64_t v5;
  size_t v6;
  void *v7;
  unint64_t v8;
  BOOL v9;
  _BYTE *v10;
  size_t v11;
  int v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;

  if ((_DWORD)a2 == -1)
    return 0;
  v2 = a2;
  v4 = *(_BYTE **)(a1 + 48);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 56);
    if ((unint64_t)v4 < v5)
    {
      *(_QWORD *)(a1 + 48) = v4 + 1;
      *v4 = a2;
      return v2;
    }
    if ((*(_BYTE *)(a1 + 76) & 0x10) == 0)
      return 0xFFFFFFFFLL;
    v7 = *(void **)(a1 + 16);
    v6 = v5 - (_QWORD)v7;
  }
  else
  {
    if ((*(_BYTE *)(a1 + 76) & 0x10) == 0)
      return 0xFFFFFFFFLL;
    v6 = 0;
    v7 = *(void **)(a1 + 16);
  }
  v8 = v6 >> 1;
  if (v6 >> 1 <= 0x100)
    v8 = 256;
  while (__CFADD__(v8, v6))
  {
    v9 = v8 >= 2;
    v8 >>= 1;
    if (!v9)
    {
      v10 = 0;
      v11 = v6;
LABEL_18:
      memmove(v10, v7, v6);
      v12 = 0;
      goto LABEL_20;
    }
  }
  v11 = v8 + v6;
  v10 = operator new(v8 + v6);
  if (v6)
    goto LABEL_18;
  v12 = 1;
LABEL_20:
  if (*(_BYTE *)(a1 + 72))
    operator delete(v7);
  *(_BYTE *)(a1 + 72) = 1;
  if (v12)
  {
    v13 = &v10[v11];
    *(_QWORD *)(a1 + 40) = v10;
    *(_QWORD *)(a1 + 48) = v10;
    *(_QWORD *)(a1 + 56) = &v10[v11];
    *(_QWORD *)(a1 + 64) = v10;
    if ((*(_BYTE *)(a1 + 76) & 8) != 0)
    {
      v14 = v10 + 1;
      *(_QWORD *)(a1 + 16) = v10;
      *(_QWORD *)(a1 + 24) = v10;
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v10;
      *(_QWORD *)(a1 + 24) = 0;
      v14 = v10;
    }
  }
  else
  {
    v15 = &v10[*(_QWORD *)(a1 + 64) - (_QWORD)v7];
    v16 = *(_QWORD *)(a1 + 40);
    v17 = *(_DWORD *)(a1 + 48) - v16;
    v18 = v16 - (_QWORD)v7;
    v20 = *(_QWORD *)(a1 + 16);
    v19 = *(_QWORD *)(a1 + 24);
    v21 = &v10[v18];
    v13 = &v10[v11];
    *(_QWORD *)(a1 + 56) = &v10[v11];
    *(_QWORD *)(a1 + 64) = v15;
    v22 = &v21[v17];
    *(_QWORD *)(a1 + 40) = v21;
    *(_QWORD *)(a1 + 48) = v22;
    if ((*(_BYTE *)(a1 + 76) & 8) != 0)
    {
      v23 = &v10[(int)v19 - (int)v20];
      v14 = v22 + 1;
      *(_QWORD *)(a1 + 16) = v10;
      *(_QWORD *)(a1 + 24) = v23;
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v10;
      *(_QWORD *)(a1 + 24) = 0;
      v14 = v10;
    }
    v10 = &v21[v17];
  }
  *(_QWORD *)(a1 + 32) = v14;
  if (v10 == v13)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 104))(a1, v2);
  }
  else
  {
    *(_QWORD *)(a1 + 48) = v10 + 1;
    *v10 = v2;
  }
  return v2;
}

std::locale *boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::getloc@<X0>(uint64_t a1@<X0>, std::locale *a2@<X8>)
{
  if (!*(_BYTE *)(a1 + 184))
    JUMPOUT(0x1AF44CFA4);
  return std::locale::locale(a2, (const std::locale *)(a1 + 192));
}

uint64_t boost::io::detail::upper_bound_from_fstring<std::string,std::ctype<char>>(const std::string *a1, unsigned __int8 a2, uint64_t a3, char a4)
{
  std::string::size_type v8;
  uint64_t v9;
  std::string::size_type v10;
  std::string::size_type size;
  std::string::size_type v12;
  const std::string *v13;
  std::string::size_type v14;
  int v15;
  std::string::size_type v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  std::string::size_type v19;
  _QWORD v21[3];

  v8 = std::string::find(a1, a2, 0);
  if (v8 == -1)
    return 0;
  v9 = 0;
  while (1)
  {
    v10 = v8 + 1;
    size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    v12 = (size & 0x80u) == 0 ? HIBYTE(a1->__r_.__value_.__r.__words[2]) : a1->__r_.__value_.__l.__size_;
    if (v10 >= v12)
      break;
    v13 = (const std::string *)a1->__r_.__value_.__r.__words[0];
    if ((size & 0x80u) == 0)
      v14 = (std::string::size_type)a1;
    else
      v14 = a1->__r_.__value_.__r.__words[0];
    v15 = *(unsigned __int8 *)(v14 + v10);
    if ((size & 0x80) != 0)
    {
      size = a1->__r_.__value_.__l.__size_;
      if (v15 != v13->__r_.__value_.__s.__data_[v8])
      {
LABEL_14:
        v17 = (unsigned __int8 *)v13 + v10;
        if (v10 != size)
        {
          v18 = (unsigned __int8 *)v13 + size;
          v19 = ~v8 + size;
          while (((char)*v17 & 0x80000000) == 0 && (*(_DWORD *)(*(_QWORD *)(a3 + 16) + 4 * *v17) & 0x400) != 0)
          {
            ++v17;
            if (!--v19)
            {
              v17 = v18;
              break;
            }
          }
        }
        v16 = (std::string::size_type)&v17[-v14];
        if ((unint64_t)&v17[-v14] < v12 && *v17 == a2)
          ++v16;
        v9 = (v9 + 1);
        goto LABEL_24;
      }
    }
    else
    {
      v13 = a1;
      if (v15 != a1->__r_.__value_.__s.__data_[v8])
        goto LABEL_14;
    }
    v16 = v8 + 2;
LABEL_24:
    v8 = std::string::find(a1, a2, v16);
    if (v8 == -1)
      return v9;
  }
  if ((a4 & 1) != 0)
  {
    v21[0] = &unk_1E5D29940;
    v21[1] = v8;
    v21[2] = v12;
    boost::throw_exception<boost::io::bad_format_string>((uint64_t)v21);
  }
  return (v9 + 1);
}

void sub_1AD9C183C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  std::exception::~exception(&a10);
  _Unwind_Resume(a1);
}

void boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::make_or_reuse_data(uint64_t a1, unint64_t a2)
{
  const std::locale::facet *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  std::locale v8;
  void *v9[2];
  void *__p[2];
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  int v16;
  char v17;
  std::locale v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::getloc(a1, &v8);
  v4 = std::locale::use_facet(&v8, MEMORY[0x1E0DE4A90]);
  v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 32);
  std::locale::~locale(&v8);
  v6 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (v6)
  {
    if (0xEEEEEEEEEEEEEEEFLL * (v6 >> 3) >= a2)
    {
      std::vector<BOOL>::resize(a1 + 24, 0, 0);
      if (!a2)
        goto LABEL_19;
    }
    else
    {
      LODWORD(v8.__locale_) = -1;
      v17 = 0;
      *(_OWORD *)v9 = 0u;
      *(_OWORD *)__p = 0u;
      v11 = 0u;
      v12 = 0;
      v13 = 6;
      v14 = v5;
      v16 = 0;
      v15 = 4098;
      v19 = 0x7FFFFFFFFFFFFFFFLL;
      v20 = 0;
      std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::resize((uint64_t *)a1, a2, (uint64_t)&v8);
      if (v17)
      {
        std::locale::~locale(&v18);
        v17 = 0;
      }
      if (SHIBYTE(v11) < 0)
        operator delete(__p[1]);
      if (SHIBYTE(__p[0]) < 0)
        operator delete(v9[0]);
      std::vector<BOOL>::resize(a1 + 24, 0, 0);
    }
    v7 = 0;
    do
    {
      boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>::reset(*(_QWORD *)a1 + v7, v5);
      v7 += 120;
      --a2;
    }
    while (a2);
  }
  else
  {
    LODWORD(v8.__locale_) = -1;
    v17 = 0;
    *(_OWORD *)v9 = 0u;
    *(_OWORD *)__p = 0u;
    v11 = 0u;
    v12 = 0;
    v13 = 6;
    v14 = v5;
    v16 = 0;
    v15 = 4098;
    v19 = 0x7FFFFFFFFFFFFFFFLL;
    v20 = 0;
    std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::assign((_QWORD *)a1, a2, (uint64_t)&v8);
    if (v17)
    {
      std::locale::~locale(&v18);
      v17 = 0;
    }
    if (SHIBYTE(v11) < 0)
      operator delete(__p[1]);
    if (SHIBYTE(__p[0]) < 0)
      operator delete(v9[0]);
  }
LABEL_19:
  std::string::resize((std::string *)(a1 + 64), 0, 0);
}

void sub_1AD9C1A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>::~format_item((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::io::detail::parse_printf_directive<char,std::char_traits<char>,std::allocator<char>,std::__wrap_iter<char const*>,std::ctype<char>>(unsigned __int8 **a1, char **a2, uint64_t a3, _QWORD *a4, unsigned __int8 *a5, uint64_t a6)
{
  unsigned __int8 *v8;
  unint64_t v9;
  int v14;
  unsigned __int8 v15;
  unsigned __int8 *v16;
  int v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  int v22;
  _BOOL8 v23;
  unsigned __int8 *v25;
  int v26;
  uint64_t v27;
  int v28;
  unsigned __int8 v29;
  unsigned __int8 *v30;
  int v31;
  int v32;
  unsigned __int8 v33;
  unsigned __int8 *v34;
  int v35;
  unsigned __int8 v36;
  int v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BOOL4 v45;
  uint64_t v46;
  int v47;
  unsigned __int8 v48;
  unsigned __int8 *v49;
  unsigned int v50;
  unsigned __int8 *v51;
  int v52;
  int v53;
  int v54;
  int v55;
  unsigned __int8 *v56;
  int v57;
  unsigned __int8 v58;
  unint64_t v59;
  int v60;
  int v61;
  int v62;
  void *v63;
  unsigned __int8 *v64;
  unint64_t v65;

  *(_DWORD *)a3 = -1;
  v8 = *a1;
  v9 = (unint64_t)&a5[*a2 - (char *)*a1];
  if (*a2 <= (char *)*a1)
  {
    if ((a6 & 1) != 0)
    {
      v63 = &unk_1E5D29940;
      v64 = a5;
      v65 = v9;
      boost::throw_exception<boost::io::bad_format_string>((uint64_t)&v63);
    }
    return 0;
  }
  v14 = *v8;
  v15 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a4 + 56))(a4, 124);
  v16 = *a1;
  if (v14 == v15)
  {
    *a1 = ++v16;
    if (v16 >= (unsigned __int8 *)*a2)
    {
      if ((a6 & 1) != 0)
      {
        v63 = &unk_1E5D29940;
        v64 = &v16[a5 - v8];
        v65 = v9;
        boost::throw_exception<boost::io::bad_format_string>((uint64_t)&v63);
      }
      return 0;
    }
  }
  v61 = v14;
  v17 = *v16;
  v18 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a4 + 56))(a4, 48);
  v19 = *a1;
  if (v17 != v18 && ((char)*v19 & 0x80000000) == 0 && (*(_DWORD *)(a4[2] + 4 * *v19) & 0x400) != 0)
  {
    v59 = v9;
    v62 = 0;
    v25 = boost::io::detail::str2int<int,std::__wrap_iter<char const*>,std::ctype<char>>(a1, a2, &v62, a4);
    *a1 = v25;
    v23 = *a2 > (char *)v25;
    if (*a2 <= (char *)v25)
    {
      if ((a6 & 1) != 0)
      {
        v63 = &unk_1E5D29940;
        v64 = &v25[a5 - v8];
        v65 = v9;
        boost::throw_exception<boost::io::bad_format_string>((uint64_t)&v63);
      }
      return v23;
    }
    v26 = *v25;
    if (v26 == (*(unsigned __int8 (**)(_QWORD *, uint64_t))(*a4 + 56))(a4, 37))
    {
      *(_DWORD *)a3 = v62 - 1;
      v27 = (uint64_t)(*a1 + 1);
      *a1 = (unsigned __int8 *)v27;
      if (v61 == v15)
        boost::io::detail::maybe_throw_exception(a6, a5 - v8 + v27, v59);
      return v23;
    }
    v31 = **a1;
    if (v31 != (*(unsigned __int8 (**)(_QWORD *, uint64_t))(*a4 + 56))(a4, 36))
    {
      *(_QWORD *)(a3 + 56) = v62;
      *(_DWORD *)a3 = -1;
      v30 = *a1;
      goto LABEL_47;
    }
    *(_DWORD *)a3 = v62 - 1;
    v19 = *a1 + 1;
    *a1 = v19;
    v9 = v59;
  }
  if (v19 == (unsigned __int8 *)*a2)
  {
LABEL_24:
    if ((a6 & 1) != 0)
    {
      v63 = &unk_1E5D29940;
      v64 = &v19[a5 - v8];
      v65 = v9;
      boost::throw_exception<boost::io::bad_format_string>((uint64_t)&v63);
    }
    return 1;
  }
  while (2)
  {
    v20 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a4 + 72))(a4, (char)*v19, 0);
    if (v20 <= 38)
    {
      if (v20 != 32)
      {
        if (v20 != 35)
          goto LABEL_37;
        v21 = *(_DWORD *)(a3 + 76) | 0x600;
        goto LABEL_18;
      }
      v22 = *(_DWORD *)(a3 + 112) | 2;
LABEL_22:
      *(_DWORD *)(a3 + 112) = v22;
      goto LABEL_23;
    }
    switch(v20)
    {
      case '\'':
        goto LABEL_23;
      case '(':
      case ')':
      case '*':
      case ',':
      case '.':
      case '/':
        goto LABEL_37;
      case '+':
        v21 = *(_DWORD *)(a3 + 76) | 0x800;
        goto LABEL_18;
      case '-':
        v21 = *(_DWORD *)(a3 + 76) | 0x20;
        goto LABEL_18;
      case '0':
        v22 = *(_DWORD *)(a3 + 112) | 1;
        goto LABEL_22;
      default:
        if (v20 == 61)
        {
          v22 = *(_DWORD *)(a3 + 112) | 4;
          goto LABEL_22;
        }
        if (v20 == 95)
        {
          v21 = *(_DWORD *)(a3 + 76) | 0x10;
LABEL_18:
          *(_DWORD *)(a3 + 76) = v21;
LABEL_23:
          v19 = *a1 + 1;
          *a1 = v19;
          if (v19 == (unsigned __int8 *)*a2)
            goto LABEL_24;
          continue;
        }
LABEL_37:
        v59 = v9;
        v28 = **a1;
        v29 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a4 + 56))(a4, 42);
        v30 = *a1;
        if (v28 == v29)
        {
          ++v30;
          goto LABEL_39;
        }
        if (v30 != (unsigned __int8 *)*a2
          && ((char)*v30 & 0x80000000) == 0
          && (*(_DWORD *)(a4[2] + 4 * *v30) & 0x400) != 0)
        {
          v30 = boost::io::detail::str2int<long,std::__wrap_iter<char const*>,std::ctype<char>>(a1, a2, (_QWORD *)(a3 + 56), a4);
LABEL_39:
          *a1 = v30;
        }
LABEL_47:
        if (v30 < (unsigned __int8 *)*a2)
        {
          v32 = *v30;
          v33 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a4 + 56))(a4, 46);
          v34 = *a1;
          if (v32 == v33)
          {
            *a1 = ++v34;
            if (v34 == (unsigned __int8 *)*a2)
              goto LABEL_60;
            v35 = *v34;
            v36 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a4 + 56))(a4, 42);
            v34 = *a1;
            if (v35 == v36)
            {
              v37 = 0;
              *a1 = ++v34;
              goto LABEL_55;
            }
            if (v34 == (unsigned __int8 *)*a2 || (char)*v34 < 0)
            {
LABEL_60:
              v38 = v59;
            }
            else
            {
              v38 = v59;
              if ((*(_DWORD *)(a4[2] + 4 * *v34) & 0x400) != 0)
              {
                v34 = boost::io::detail::str2int<long,std::__wrap_iter<char const*>,std::ctype<char>>(a1, a2, (_QWORD *)(a3 + 64), a4);
                *a1 = v34;
                v37 = 1;
                goto LABEL_62;
              }
            }
            v37 = 0;
            *(_QWORD *)(a3 + 64) = 0;
          }
          else
          {
            v37 = 0;
LABEL_55:
            v38 = v59;
          }
LABEL_62:
          if (v34 == (unsigned __int8 *)*a2)
          {
LABEL_78:
            if ((a6 & 1) != 0)
            {
              v63 = &unk_1E5D29940;
              v64 = &v34[a5 - v8];
              v65 = v38;
              boost::throw_exception<boost::io::bad_format_string>((uint64_t)&v63);
            }
            return 1;
          }
          v60 = v37;
          v39 = 0;
          while (2)
          {
            v40 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a4 + 72))(a4, (char)*v34, 0);
            if ((v40 - 73) <= 0x31)
            {
              if (((1 << (v40 - 73)) & 0x2400A80000008) != 0)
                goto LABEL_77;
              if (v40 == 73)
              {
                v39 = 73;
LABEL_77:
                v34 = *a1 + 1;
                *a1 = v34;
                if (v34 == (unsigned __int8 *)*a2)
                  goto LABEL_78;
                continue;
              }
            }
            break;
          }
          switch(v40)
          {
            case '2':
              if (v39 == 51)
                goto LABEL_76;
              goto LABEL_80;
            case '3':
              if (v39 != 73)
                goto LABEL_80;
              v39 = 51;
              goto LABEL_77;
            case '4':
              if (v39 != 54)
                goto LABEL_80;
LABEL_76:
              v39 = 0;
              goto LABEL_77;
            case '6':
              if (v39 != 73)
              {
LABEL_80:
                v41 = (uint64_t)&(*a1)[a5 - v8];
                v42 = a6;
                v43 = v38;
LABEL_81:
                boost::io::detail::maybe_throw_exception(v42, v41, v43);
                return 1;
              }
              v39 = 54;
              break;
            default:
              v34 = *a1;
              v45 = v39 != 73 && v39 != 0;
              if (v34 >= (unsigned __int8 *)*a2 || v45)
                goto LABEL_78;
              v46 = v38;
              if (v61 == v15)
              {
                v47 = *v34;
                v48 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a4 + 56))(a4, 124);
                v34 = *a1;
                if (v47 == v48)
                {
                  v49 = v34 + 1;
LABEL_124:
                  *a1 = v49;
                  return 1;
                }
              }
              switch((*(unsigned int (**)(_QWORD *, _QWORD, _QWORD))(*a4 + 72))(a4, (char)*v34, 0))
              {
                case 'A':
                  v54 = *(_DWORD *)(a3 + 76) | 0x4000;
                  *(_DWORD *)(a3 + 76) = v54;
                  goto LABEL_114;
                case 'C':
                case 'c':
                  *(_QWORD *)(a3 + 104) = 1;
                  goto LABEL_120;
                case 'E':
                  v55 = *(_DWORD *)(a3 + 76) | 0x4000;
                  *(_DWORD *)(a3 + 76) = v55;
                  goto LABEL_118;
                case 'F':
                  v53 = *(_DWORD *)(a3 + 76) | 0x4000;
                  *(_DWORD *)(a3 + 76) = v53;
                  goto LABEL_111;
                case 'G':
                  v50 = *(_DWORD *)(a3 + 76) | 0x4000;
                  goto LABEL_119;
                case 'S':
                case 's':
                  if (v60)
                    *(_QWORD *)(a3 + 104) = *(_QWORD *)(a3 + 64);
                  *(_QWORD *)(a3 + 64) = 6;
                  goto LABEL_120;
                case 'T':
                  v51 = *a1 + 1;
                  *a1 = v51;
                  if (v51 >= (unsigned __int8 *)*a2)
                  {
                    boost::io::detail::maybe_throw_exception(a6, (uint64_t)&v51[a5 - v8], v46);
                    return 0;
                  }
                  *(_BYTE *)(a3 + 72) = *v51;
LABEL_102:
                  *(_DWORD *)(a3 + 112) |= 8u;
                  v52 = -2;
LABEL_116:
                  *(_DWORD *)a3 = v52;
LABEL_120:
                  v56 = *a1 + 1;
                  *a1 = v56;
                  if (v61 != v15)
                    return 1;
                  if (v56 != (unsigned __int8 *)*a2)
                  {
                    v57 = *v56;
                    v58 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a4 + 56))(a4, 124);
                    v56 = *a1;
                    if (v57 == v58)
                    {
                      v49 = v56 + 1;
                      goto LABEL_124;
                    }
                  }
                  v41 = (uint64_t)&v56[a5 - v8];
                  v42 = a6;
                  v43 = v46;
                  break;
                case 'X':
                  *(_DWORD *)(a3 + 76) |= 0x4000u;
                  goto LABEL_105;
                case 'a':
                  v54 = *(_DWORD *)(a3 + 76);
LABEL_114:
                  v50 = v54 & 0xFFFFFEB1 | 0x104;
                  goto LABEL_119;
                case 'b':
                  v50 = *(_DWORD *)(a3 + 76) | 1;
                  goto LABEL_119;
                case 'd':
                case 'g':
                case 'i':
                case 'u':
                  goto LABEL_120;
                case 'e':
                  v55 = *(_DWORD *)(a3 + 76);
LABEL_118:
                  v50 = v55 | 0x100;
                  goto LABEL_119;
                case 'f':
                  v53 = *(_DWORD *)(a3 + 76);
LABEL_111:
                  v50 = v53 | 4;
                  goto LABEL_119;
                case 'n':
                  v52 = -3;
                  goto LABEL_116;
                case 'o':
                  v50 = *(_DWORD *)(a3 + 76) & 0xFFFFFFB5 | 0x40;
                  goto LABEL_119;
                case 'p':
                case 'x':
LABEL_105:
                  v50 = *(_DWORD *)(a3 + 76) & 0xFFFFFFB5 | 8;
LABEL_119:
                  *(_DWORD *)(a3 + 76) = v50;
                  goto LABEL_120;
                case 't':
                  *(_BYTE *)(a3 + 72) = (*(uint64_t (**)(_QWORD *, uint64_t))(*a4 + 56))(a4, 32);
                  goto LABEL_102;
                default:
                  boost::io::detail::maybe_throw_exception(a6, (uint64_t)&(*a1)[a5 - v8], v46);
                  goto LABEL_120;
              }
              goto LABEL_81;
          }
          goto LABEL_77;
        }
        if ((a6 & 1) != 0)
        {
          v63 = &unk_1E5D29940;
          v64 = &v30[a5 - v8];
          v65 = v59;
          boost::throw_exception<boost::io::bad_format_string>((uint64_t)&v63);
        }
        return 1;
    }
  }
}

void sub_1AD9C2320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

uint64_t boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>::compute_states(uint64_t result)
{
  int v1;
  int v2;

  v1 = *(_DWORD *)(result + 112);
  if ((v1 & 1) != 0)
  {
    v2 = *(_DWORD *)(result + 76);
    if ((v2 & 0x20) != 0)
    {
      v1 &= ~1u;
      *(_DWORD *)(result + 112) = v1;
      if ((v1 & 2) == 0)
        return result;
      goto LABEL_7;
    }
    v1 &= ~2u;
    *(_DWORD *)(result + 112) = v1;
    *(_BYTE *)(result + 72) = 48;
    *(_DWORD *)(result + 76) = v2 & 0xFFFFFF4F | 0x10;
  }
  if ((v1 & 2) == 0)
    return result;
LABEL_7:
  if ((*(_BYTE *)(result + 77) & 8) != 0)
    *(_DWORD *)(result + 112) = v1 & 0xFFFFFFFD;
  return result;
}

void boost::throw_exception<boost::io::bad_format_string>(uint64_t a1)
{
  __n128 *exception;

  exception = (__n128 *)__cxa_allocate_exception(0x48uLL);
  boost::wrapexcept<boost::io::bad_format_string>::wrapexcept(exception, a1);
}

void sub_1AD9C23DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::resize(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;

  v4 = a1[1];
  v5 = 0xEEEEEEEEEEEEEEEFLL * ((v4 - *a1) >> 3);
  v6 = a2 >= v5;
  v7 = a2 - v5;
  if (v7 != 0 && v6)
  {
    std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__append(a1, v7, a3);
  }
  else if (!v6)
  {
    v8 = *a1 + 120 * a2;
    while (v4 != v8)
    {
      v4 -= 120;
      std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v4);
    }
    a1[1] = v8;
  }
}

uint64_t boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>::~format_item(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 88))
  {
    std::locale::~locale((std::locale *)(a1 + 96));
    *(_BYTE *)(a1 + 88) = 0;
  }
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::assign(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v5 = a1;
  v6 = (uint64_t)(a1 + 2);
  v7 = (char *)*a1;
  if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a1[2] - *a1) >> 3) < a2)
  {
    std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__vdeallocate((void **)a1);
    if (a2 > 0x222222222222222)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v8 = 0xDDDDDDDDDDDDDDDELL * ((uint64_t)(v5[2] - *v5) >> 3);
    if (v8 <= a2)
      v8 = a2;
    if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v5[2] - *v5) >> 3) >= 0x111111111111111)
      v9 = 0x222222222222222;
    else
      v9 = v8;
    std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__vallocate[abi:ne180100](v5, v9);
    v10 = v5[1];
    v11 = 120 * a2;
    v12 = v10 + v11;
    do
    {
      std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::construct[abi:ne180100]<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>,boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>> const&>(v6, v10, a3);
      v10 += 120;
      v11 -= 120;
    }
    while (v11);
    goto LABEL_20;
  }
  v21 = (a1[1] - (_QWORD)v7) / 120;
  if (v21 >= a2)
    v13 = a2;
  else
    v13 = (a1[1] - (_QWORD)v7) / 120;
  if (v13)
  {
    v14 = (_OWORD *)(a3 + 56);
    do
    {
      *(_DWORD *)v7 = *(_DWORD *)a3;
      std::string::operator=((std::string *)(v7 + 8), (const std::string *)(a3 + 8));
      std::string::operator=((std::string *)(v7 + 32), (const std::string *)(a3 + 32));
      v15 = *(_OWORD *)(a3 + 72);
      *(_OWORD *)(v7 + 56) = *v14;
      *(_OWORD *)(v7 + 72) = v15;
      boost::optional_detail::optional_base<std::locale>::assign((uint64_t)(v7 + 88), a3 + 88);
      v16 = *(_QWORD *)(a3 + 104);
      *((_DWORD *)v7 + 28) = *(_DWORD *)(a3 + 112);
      *((_QWORD *)v7 + 13) = v16;
      v7 += 120;
      --v13;
    }
    while (v13);
  }
  if (a2 > v21)
  {
    v5 = a1;
    v17 = a1[1];
    v12 = v17 + 120 * (a2 - v21);
    v18 = -120 * v21 + 120 * a2;
    do
    {
      std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::construct[abi:ne180100]<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>,boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>> const&>(v6, v17, a3);
      v17 += 120;
      v18 -= 120;
    }
    while (v18);
LABEL_20:
    v5[1] = v12;
    return;
  }
  v19 = a1[1];
  v20 = *a1 + 120 * a2;
  while (v19 != v20)
  {
    v19 -= 120;
    std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::destroy[abi:ne180100](v6, v19);
  }
  a1[1] = v20;
}

void sub_1AD9C26F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

double boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>::reset(uint64_t a1, char a2)
{
  double result;

  *(_DWORD *)a1 = -1;
  *(_QWORD *)(a1 + 104) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 112) = 0;
  std::string::resize((std::string *)(a1 + 8), 0, 0);
  std::string::resize((std::string *)(a1 + 32), 0, 0);
  *(_OWORD *)(a1 + 56) = xmmword_1AE14CCB0;
  *(_BYTE *)(a1 + 72) = a2;
  *(_DWORD *)(a1 + 84) = 0;
  *(_QWORD *)&result = 4098;
  *(_QWORD *)(a1 + 76) = 4098;
  return result;
}

void std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 120;
        std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x222222222222223)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[120 * v4];
  return result;
}

void boost::optional_detail::optional_base<std::locale>::assign(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)a1)
  {
    if (*(_BYTE *)a2)
    {
      std::locale::operator=((std::locale *)(a1 + 8), (const std::locale *)(a2 + 8));
    }
    else
    {
      std::locale::~locale((std::locale *)(a1 + 8));
      *(_BYTE *)a1 = 0;
    }
  }
  else if (*(_BYTE *)a2)
  {
    std::locale::locale((std::locale *)(a1 + 8), (const std::locale *)(a2 + 8));
    *(_BYTE *)a1 = 1;
  }
}

void std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::construct[abi:ne180100]<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>,boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  v5 = (std::string *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = (std::string *)(a2 + 32);
  if (*(char *)(a3 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a3 + 32), *(_QWORD *)(a3 + 40));
  }
  else
  {
    v8 = *(_OWORD *)(a3 + 32);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  v9 = *(_OWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a3 + 72);
  *(_OWORD *)(a2 + 56) = v9;
  *(_BYTE *)(a2 + 88) = 0;
  if (*(_BYTE *)(a3 + 88))
  {
    std::locale::locale((std::locale *)(a2 + 96), (const std::locale *)(a3 + 96));
    *(_BYTE *)(a2 + 88) = 1;
  }
  v10 = *(_QWORD *)(a3 + 104);
  *(_DWORD *)(a2 + 112) = *(_DWORD *)(a3 + 112);
  *(_QWORD *)(a2 + 104) = v10;
}

void sub_1AD9C2960(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 88))
  {
    std::locale::~locale((std::locale *)(a2 + 96));
    *(_BYTE *)(a2 + 88) = 0;
  }
  if (*(char *)(a2 + 55) < 0)
    operator delete(*(void **)(a2 + 32));
  if (*(char *)(a2 + 31) < 0)
    operator delete(*(void **)(a2 + 8));
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x222222222222223)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(120 * a2);
}

std::string *std::string::append[abi:ne180100]<std::__wrap_iter<char const*>,0>(std::string *this, char *a2, char *a3)
{
  char *v4;
  unint64_t v6;
  unint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  _BYTE *v15;
  char v16;
  std::string::size_type v17;
  void *__p[2];
  unsigned __int8 v20;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v14 = this;
    if ((v6 & 0x80) != 0)
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    v15 = (char *)v14 + size;
    while (v4 != a3)
    {
      v16 = *v4++;
      *v15++ = v16;
    }
    *v15 = 0;
    v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v17;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if ((v20 & 0x80u) == 0)
      v13 = v20;
    else
      v13 = (std::string::size_type)__p[1];
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_1AD9C2B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t boost::io::detail::maybe_throw_exception(uint64_t this, uint64_t a2, uint64_t a3)
{
  _QWORD v3[3];

  if ((this & 1) != 0)
  {
    v3[0] = &unk_1E5D29940;
    v3[1] = a2;
    v3[2] = a3;
    boost::throw_exception<boost::io::bad_format_string>((uint64_t)v3);
  }
  return this;
}

void sub_1AD9C2BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  std::exception::~exception(&a10);
  _Unwind_Resume(a1);
}

unsigned __int8 *boost::io::detail::str2int<int,std::__wrap_iter<char const*>,std::ctype<char>>(unsigned __int8 **a1, char **a2, _DWORD *a3, _QWORD *a4)
{
  unsigned __int8 *i;
  uint64_t v8;

  *a3 = 0;
  for (i = *a1; i != (unsigned __int8 *)*a2; ++i)
  {
    if ((char)*i < 0)
      break;
    v8 = *i;
    if ((*(_DWORD *)(a4[2] + 4 * v8) & 0x400) == 0)
      break;
    *a3 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a4 + 72))(a4, (char)v8, 0)
        + 10 * *a3
        - 48;
  }
  return i;
}

unsigned __int8 *boost::io::detail::str2int<long,std::__wrap_iter<char const*>,std::ctype<char>>(unsigned __int8 **a1, char **a2, _QWORD *a3, _QWORD *a4)
{
  unsigned __int8 *i;
  uint64_t v8;

  *a3 = 0;
  for (i = *a1; i != (unsigned __int8 *)*a2; ++i)
  {
    if ((char)*i < 0)
      break;
    v8 = *i;
    if ((*(_DWORD *)(a4[2] + 4 * v8) & 0x400) == 0)
      break;
    *a3 = 10 * *a3
        + (*(int (**)(_QWORD *, _QWORD, _QWORD))(*a4 + 72))(a4, (char)v8, 0)
        - 48;
  }
  return i;
}

__n128 boost::wrapexcept<boost::io::bad_format_string>::wrapexcept(__n128 *a1, uint64_t a2)
{
  __n128 result;

  a1->n128_u64[0] = (unint64_t)&unk_1E5D29898;
  a1->n128_u64[1] = (unint64_t)&unk_1E5D29940;
  result = *(__n128 *)(a2 + 8);
  a1[1] = result;
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u32[0] = -1;
  a1->n128_u64[0] = (unint64_t)&unk_1E5D295C0;
  a1->n128_u64[1] = (unint64_t)&unk_1E5D295F0;
  a1[2].n128_u64[0] = (unint64_t)&unk_1E5D29618;
  a1[2].n128_u64[1] = 0;
  return result;
}

uint64_t boost::wrapexcept<boost::io::bad_format_string>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::exception::~exception((std::exception *)(a1 + 8));
  return a1;
}

uint64_t boost::wrapexcept<boost::io::bad_format_string>::clone(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_1E5D29898;
  *(_QWORD *)(v2 + 8) = &unk_1E5D29940;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v2 + 32) = &unk_1E5D29AE0;
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v2 + 40) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(_DWORD *)(v2 + 64) = *(_DWORD *)(a1 + 64);
  *(_QWORD *)v2 = &unk_1E5D295C0;
  *(_QWORD *)(v2 + 8) = &unk_1E5D295F0;
  *(_QWORD *)(v2 + 32) = &unk_1E5D29618;
  boost::exception_detail::copy_boost_exception(v2 + 32, a1 + 32);
  return v2;
}

void sub_1AD9C2E88(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::exception *v2;

  std::exception::~exception(v2);
  MEMORY[0x1AF44D190](v1, 0x10F1C40A1B86278);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::io::bad_format_string>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x48uLL);
  boost::wrapexcept<boost::io::bad_format_string>::wrapexcept((uint64_t)exception, a1);
}

void sub_1AD9C2F08(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::io::bad_format_string>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::exception::~exception((std::exception *)(a1 + 8));
  JUMPOUT(0x1AF44D190);
}

void `non-virtual thunk to'boost::wrapexcept<boost::io::bad_format_string>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::exception::~exception((std::exception *)a1);
}

{
  *(_QWORD *)(a1 + 24) = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::exception::~exception((std::exception *)a1);
  JUMPOUT(0x1AF44D190);
}

const char *boost::io::bad_format_string::what(boost::io::bad_format_string *this)
{
  return "boost::bad_format_string: format-string is ill-formed";
}

void `non-virtual thunk to'boost::wrapexcept<boost::io::bad_format_string>::~wrapexcept(_QWORD *a1)
{
  *a1 = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 3);
}

{
  *a1 = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 3);
  JUMPOUT(0x1AF44D190);
}

void boost::io::bad_format_string::~bad_format_string(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t boost::wrapexcept<boost::io::bad_format_string>::wrapexcept(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_1E5D29898;
  *(_QWORD *)(a1 + 8) = &unk_1E5D29940;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = &unk_1E5D29AE0;
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)a1 = &unk_1E5D295C0;
  *(_QWORD *)(a1 + 8) = &unk_1E5D295F0;
  *(_QWORD *)(a1 + 32) = &unk_1E5D29618;
  return a1;
}

void sub_1AD9C315C(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__append(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void *v19[2];
  char *v20;
  char *v21;
  uint64_t *v22;

  v7 = (uint64_t)(a1 + 2);
  v6 = a1[2];
  v8 = a1[1];
  if (0xEEEEEEEEEEEEEEEFLL * ((v6 - v8) >> 3) >= a2)
  {
    if (a2)
    {
      v14 = v8 + 120 * a2;
      v15 = 120 * a2;
      do
      {
        std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::construct[abi:ne180100]<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>,boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>> const&>(v7, v8, a3);
        v8 += 120;
        v15 -= 120;
      }
      while (v15);
      v8 = v14;
    }
    a1[1] = v8;
  }
  else
  {
    v9 = 0xEEEEEEEEEEEEEEEFLL * ((v8 - *a1) >> 3);
    v10 = v9 + a2;
    if (v9 + a2 > 0x222222222222222)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = 0xEEEEEEEEEEEEEEEFLL * ((v6 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x111111111111111)
      v12 = 0x222222222222222;
    else
      v12 = v10;
    v22 = a1 + 2;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>>((uint64_t)(a1 + 2), v12);
    else
      v13 = 0;
    v16 = &v13[120 * v9];
    v19[0] = v13;
    v19[1] = v16;
    v20 = v16;
    v21 = &v13[120 * v12];
    v17 = 120 * a2;
    v18 = &v16[120 * a2];
    do
    {
      std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::construct[abi:ne180100]<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>,boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>> const&>((uint64_t)v22, (uint64_t)v16, a3);
      v16 += 120;
      v17 -= 120;
    }
    while (v17);
    v20 = v18;
    std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__swap_out_circular_buffer(a1, v19);
    std::__split_buffer<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::~__split_buffer(v19);
  }
}

void sub_1AD9C32D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>,std::reverse_iterator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>*>,std::reverse_iterator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>*>,std::reverse_iterator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>,std::reverse_iterator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>*>,std::reverse_iterator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>*>,std::reverse_iterator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 120;
      std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::construct[abi:ne180100]<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>,boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>(a1, v7 - 120, v9);
      v7 = *((_QWORD *)&v16 + 1) - 120;
      *((_QWORD *)&v16 + 1) -= 120;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>,std::reverse_iterator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

std::locale *std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::construct[abi:ne180100]<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>,boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  std::locale *result;
  uint64_t v9;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  v5 = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
  *(_OWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v6 = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v7 = *(_OWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a3 + 72);
  *(_OWORD *)(a2 + 56) = v7;
  *(_BYTE *)(a2 + 88) = 0;
  if (*(_BYTE *)(a3 + 88))
  {
    result = std::locale::locale((std::locale *)(a2 + 96), (const std::locale *)(a3 + 96));
    *(_BYTE *)(a2 + 88) = 1;
  }
  v9 = *(_QWORD *)(a3 + 104);
  *(_DWORD *)(a2 + 112) = *(_DWORD *)(a3 + 112);
  *(_QWORD *)(a2 + 104) = v9;
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>,std::reverse_iterator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>,std::reverse_iterator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>,std::reverse_iterator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::destroy[abi:ne180100](v3, v1);
      v1 += 120;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 120;
    std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::destroy[abi:ne180100](v4, i - 120);
  }
}

uint64_t boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E5D29968;
  if (*(_BYTE *)(a1 + 72))
    operator delete(*(void **)(a1 + 16));
  *(_OWORD *)(a1 + 57) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return std::streambuf::~streambuf();
}

void std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 120;
        std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  if (*(_BYTE *)(a1 + 60))
    boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::clear((uint64_t *)a1);
  boost::io::detail::distribute<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>(a1, a2);
  v4 = *(int *)(a1 + 52);
  v5 = v4 + 1;
  *(_DWORD *)(a1 + 52) = v4 + 1;
  if (*(_QWORD *)(a1 + 32))
  {
    v6 = *(int *)(a1 + 56);
    if ((int)v5 < (int)v6)
    {
      v7 = *(_QWORD *)(a1 + 24);
      v8 = v4 + 2;
      do
      {
        if (((*(_QWORD *)(v7 + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v5) & 1) == 0)
          break;
        ++v5;
        *(_DWORD *)(a1 + 52) = v8++;
      }
      while (v6 != v5);
    }
  }
  return a1;
}

uint64_t *boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = 0;
    v5 = 0;
    do
    {
      if (!a1[4]
        || (v6 = *(unsigned int *)(v3 + v4), (v6 & 0x80000000) != 0)
        || ((*(_QWORD *)(a1[3] + ((v6 >> 3) & 0x1FFFFFF8)) >> v6) & 1) == 0)
      {
        std::string::resize((std::string *)(v3 + v4 + 8), 0, 0);
        v3 = *a1;
        v2 = a1[1];
      }
      ++v5;
      v4 += 120;
    }
    while (v5 < 0xEEEEEEEEEEEEEEEFLL * ((v2 - v3) >> 3));
  }
  *((_DWORD *)a1 + 13) = 0;
  *((_BYTE *)a1 + 60) = 0;
  if (a1[4])
  {
    v7 = *((unsigned int *)a1 + 14);
    if ((int)v7 >= 1)
    {
      v8 = 0;
      v9 = a1[3];
      do
      {
        if (((*(_QWORD *)(v9 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
          break;
        *((_DWORD *)a1 + 13) = ++v8;
      }
      while (v7 != v8);
    }
  }
  return a1;
}

uint64_t boost::io::detail::distribute<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  const std::locale *v10;
  _QWORD v11[3];

  v2 = result;
  v3 = *(int *)(result + 52);
  v4 = *(int *)(result + 56);
  if ((int)v3 >= (int)v4)
  {
    if ((*(_BYTE *)(result + 88) & 4) != 0)
    {
      v11[0] = &unk_1E5D29918;
      v11[1] = v3;
      v11[2] = v4;
      boost::throw_exception<boost::io::too_many_args>((uint64_t)v11);
    }
  }
  else
  {
    v6 = *(_QWORD *)result;
    v5 = *(_QWORD *)(result + 8);
    if (v5 != *(_QWORD *)result)
    {
      v8 = 0;
      v9 = 0;
      do
      {
        if (*(_DWORD *)(v6 + v8) == *(_DWORD *)(v2 + 52))
        {
          if (*(_BYTE *)(v2 + 184))
            v10 = (const std::locale *)(v2 + 192);
          else
            v10 = 0;
          result = boost::io::detail::put<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>(a2, v6 + v8, (std::string *)(v6 + v8 + 8), (_QWORD *)(v2 + 96), v10);
          v6 = *(_QWORD *)v2;
          v5 = *(_QWORD *)(v2 + 8);
        }
        ++v9;
        v8 += 120;
      }
      while (v9 < 0xEEEEEEEEEEEEEEEFLL * ((v5 - v6) >> 3));
    }
  }
  return result;
}

void sub_1AD9C38F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  std::exception::~exception(&a10);
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::io::too_many_args>(uint64_t a1)
{
  __n128 *exception;

  exception = (__n128 *)__cxa_allocate_exception(0x48uLL);
  boost::wrapexcept<boost::io::too_many_args>::wrapexcept(exception, a1);
}

void sub_1AD9C3944(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::io::detail::put<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>(_QWORD *a1, uint64_t a2, std::string *a3, _QWORD *a4, const std::locale *a5)
{
  std::ios_base *v10;
  std::locale *rdbuf;
  std::locale *v12;
  char *v13;
  int v14;
  int64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int64_t v18;
  int v19;
  const std::locale::facet *v20;
  unsigned __int8 v21;
  int v22;
  const std::locale::facet *v23;
  unsigned __int8 v24;
  unint64_t *v25;
  BOOL v26;
  unsigned int v27;
  const std::string::value_type *v28;
  int v29;
  const std::locale::facet *v30;
  unsigned __int8 v31;
  int v32;
  const std::locale::facet *v33;
  unsigned __int8 v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  std::string::size_type v40;
  unint64_t v41;
  unint64_t v42;
  std::string *v43;
  int v44;
  unint64_t v45;
  const std::ios_base *v46;
  std::ios_base::fmtflags fmtflags;
  const std::locale::facet *v48;
  const std::locale::facet *v49;
  uint64_t v50;
  std::string::size_type v51;
  char *v52;
  int v53;
  const std::locale::facet *v54;
  int64_t v56;
  std::locale v57;
  unsigned int *v58;
  _BYTE v59[152];
  std::locale v60;
  _QWORD v61[2];
  unsigned int *v62;
  _BYTE v63[152];
  std::locale v64;

  boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::basic_oaltstringstream((uint64_t)v61, (uint64_t)a4);
  if (a5)
  {
    v10 = (std::ios_base *)((char *)v61 + *(_QWORD *)(v61[0] - 24));
    std::ios_base::getloc(v10);
    std::ios_base::imbue(v10, a5);
    std::locale::~locale(&v57);
    rdbuf = (std::locale *)v10->__rdbuf_;
    if (rdbuf)
    {
      (*((void (**)(std::locale *, const std::locale *))rdbuf->__locale_ + 2))(rdbuf, a5);
      v12 = rdbuf + 1;
      std::locale::locale(&v64, v12);
      std::locale::operator=(v12, a5);
      std::locale::~locale(&v64);
    }
    std::locale::~locale(&v60);
  }
  boost::io::detail::stream_format_state<char,std::char_traits<char>>::apply_on(a2 + 56, (std::ios_base *)((char *)v61 + *(_QWORD *)(v61[0] - 24)), a5);
  ((void (*)(_QWORD *, _QWORD))a1[1])(v61, *a1);
  v13 = (char *)v61 + *(_QWORD *)(v61[0] - 24);
  v14 = *((_DWORD *)v13 + 2);
  v15 = *((_QWORD *)v13 + 3);
  std::string::resize(a3, 0, 0);
  if ((v14 & 0x10) != 0 && v15)
  {
    ((void (*)(_QWORD *, _QWORD))a1[2])(v61, *a1);
    v17 = (unsigned __int8 *)a4[5];
    v16 = (unsigned __int8 *)a4[6];
    v18 = v16 - v17;
    v56 = v16 - v17;
    if ((*(_BYTE *)(a2 + 112) & 2) == 0)
      goto LABEL_11;
    if (v16 == v17)
      goto LABEL_24;
    v19 = *v17;
    std::ios_base::getloc((const std::ios_base *)((char *)v61 + *(_QWORD *)(v61[0] - 24)));
    v20 = std::locale::use_facet(&v57, MEMORY[0x1E0DE4A90]);
    v21 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 43);
    std::locale::~locale(&v57);
    v18 = v56;
    if (v19 == v21)
      goto LABEL_11;
    v22 = *v17;
    std::ios_base::getloc((const std::ios_base *)((char *)v61 + *(_QWORD *)(v61[0] - 24)));
    v23 = std::locale::use_facet(&v57, MEMORY[0x1E0DE4A90]);
    v24 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 45);
    std::locale::~locale(&v57);
    v18 = v56;
    if (v22 != v24)
    {
LABEL_24:
      v25 = (unint64_t *)(a2 + 104);
      v27 = 1;
    }
    else
    {
LABEL_11:
      v25 = (unint64_t *)(a2 + 104);
      v26 = v18 == v15 && v15 <= *(_QWORD *)(a2 + 104);
      if (v26)
      {
        MEMORY[0x1AF44C920](a3, v17, v15);
        goto LABEL_58;
      }
      v27 = 0;
    }
    MEMORY[0x1AF44C920](a3, v17);
    boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::clear_buffer(a4);
    boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::basic_oaltstringstream((uint64_t)&v57, (uint64_t)a4);
    boost::io::detail::stream_format_state<char,std::char_traits<char>>::apply_on(a2 + 56, (std::ios_base *)((char *)&v57 + *((_QWORD *)v57.__locale_ - 3)), a5);
    ((void (*)(std::locale *, _QWORD))a1[1])(&v57, *a1);
    *(_QWORD *)&v59[*((_QWORD *)v57.__locale_ - 3)] = 0;
    if (v27)
    {
      LOBYTE(v64.__locale_) = 32;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v57, (uint64_t)&v64, 1);
    }
    ((void (*)(std::locale *, _QWORD))a1[2])(&v57, *a1);
    v37 = a4[5];
    v36 = a4[6];
    if (v36 == v37)
    {
      v37 = a4[6];
      if ((*(_BYTE *)(a2 + 112) & 2) != 0)
      {
        LOBYTE(v64.__locale_) = 32;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v57, (uint64_t)&v64, 1);
        v37 = a4[5];
        v36 = a4[6];
        v27 = 1;
      }
    }
    v38 = v36 - v37;
    if (v38 >= *v25)
      v39 = *v25;
    else
      v39 = v38;
    v26 = v15 > v39;
    v40 = v15 - v39;
    if (v26)
    {
      v41 = v56 + v27;
      if (v39 < v41)
        v41 = v39;
      v42 = v27;
      if (v41 > v27)
      {
        v43 = (std::string *)a3->__r_.__value_.__r.__words[0];
        if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v43 = a3;
        v42 = v27;
        while (1)
        {
          v44 = v43->__r_.__value_.__s.__data_[0];
          v43 = (std::string *)((char *)v43 + 1);
          if (*(unsigned __int8 *)(v37 + v42) != v44)
            break;
          if (v41 == ++v42)
          {
            v42 = v41;
            break;
          }
        }
      }
      if (v42 >= v39)
        v45 = v27;
      else
        v45 = v42;
      MEMORY[0x1AF44C920](a3, v37, v45);
      v46 = (const std::ios_base *)((char *)&v57 + *((_QWORD *)v57.__locale_ - 3));
      fmtflags = v46[1].__fmtflags_;
      if (fmtflags == -1)
      {
        std::ios_base::getloc(v46);
        v48 = std::locale::use_facet(&v64, MEMORY[0x1E0DE4A90]);
        fmtflags = ((uint64_t (*)(const std::locale::facet *, uint64_t))v48->__vftable[2].~facet_0)(v48, 32);
        std::locale::~locale(&v64);
        v46[1].__fmtflags_ = fmtflags;
      }
      std::string::append(a3, v40, fmtflags);
      std::string::append(a3, (const std::string::value_type *)(v37 + v45), v39 - v45);
    }
    else
    {
      MEMORY[0x1AF44C920](a3, v37, v39);
    }
    std::ostream::~ostream();
    boost::detail::shared_count::~shared_count(&v58);
    MEMORY[0x1AF44D094](v59);
  }
  else
  {
    if (v15 >= 1)
      *(_QWORD *)&v63[*(_QWORD *)(v61[0] - 24)] = 0;
    ((void (*)(_QWORD *, _QWORD))a1[2])(v61, *a1);
    v28 = (const std::string::value_type *)a4[5];
    if ((*(_BYTE *)(a2 + 112) & 2) == 0)
      goto LABEL_22;
    if ((const std::string::value_type *)a4[6] == v28)
      goto LABEL_51;
    v29 = *(unsigned __int8 *)v28;
    std::ios_base::getloc((const std::ios_base *)((char *)v61 + *(_QWORD *)(v61[0] - 24)));
    v30 = std::locale::use_facet(&v57, MEMORY[0x1E0DE4A90]);
    v31 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 43);
    std::locale::~locale(&v57);
    if (v29 == v31)
      goto LABEL_22;
    v32 = *(unsigned __int8 *)v28;
    std::ios_base::getloc((const std::ios_base *)((char *)v61 + *(_QWORD *)(v61[0] - 24)));
    v33 = std::locale::use_facet(&v57, MEMORY[0x1E0DE4A90]);
    v34 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 45);
    std::locale::~locale(&v57);
    if (v32 != v34)
    {
LABEL_51:
      std::ios_base::getloc((const std::ios_base *)((char *)v61 + *(_QWORD *)(v61[0] - 24)));
      v49 = std::locale::use_facet(&v57, MEMORY[0x1E0DE4A90]);
      v35 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v49->__vftable[2].~facet_0)(v49, 32);
      std::locale::~locale(&v57);
    }
    else
    {
LABEL_22:
      v35 = 0;
    }
    v50 = a4[5];
    if (a4[6] - v50 >= *(_QWORD *)(a2 + 104) - (unint64_t)(v35 != 0))
      v51 = *(_QWORD *)(a2 + 104) - (v35 != 0);
    else
      v51 = a4[6] - v50;
    v52 = (char *)v61 + *(_QWORD *)(v61[0] - 24);
    v53 = *((_DWORD *)v52 + 36);
    if (v53 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v61 + *(_QWORD *)(v61[0] - 24)));
      v54 = std::locale::use_facet(&v57, MEMORY[0x1E0DE4A90]);
      v53 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 32);
      std::locale::~locale(&v57);
      *((_DWORD *)v52 + 36) = v53;
    }
    boost::io::detail::mk_str<char,std::char_traits<char>,std::allocator<char>>(a3, v28, v51, v15, v53, v14, v35, (*(_DWORD *)(a2 + 112) >> 2) & 1);
  }
LABEL_58:
  boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::clear_buffer(a4);
  std::ostream::~ostream();
  boost::detail::shared_count::~shared_count(&v62);
  return MEMORY[0x1AF44D094](v63);
}

void sub_1AD9C3F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  std::locale::~locale((std::locale *)(v36 - 96));
  boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_oaltstringstream((uint64_t)&a10);
  boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_oaltstringstream((uint64_t)&a34);
  _Unwind_Resume(a1);
}

__n128 boost::wrapexcept<boost::io::too_many_args>::wrapexcept(__n128 *a1, uint64_t a2)
{
  __n128 result;

  a1->n128_u64[0] = (unint64_t)&unk_1E5D29898;
  a1->n128_u64[1] = (unint64_t)&unk_1E5D29918;
  result = *(__n128 *)(a2 + 8);
  a1[1] = result;
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u32[0] = -1;
  a1->n128_u64[0] = (unint64_t)&unk_1E5D29548;
  a1->n128_u64[1] = (unint64_t)&unk_1E5D29578;
  a1[2].n128_u64[0] = (unint64_t)&unk_1E5D295A0;
  a1[2].n128_u64[1] = 0;
  return result;
}

uint64_t boost::wrapexcept<boost::io::too_many_args>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::exception::~exception((std::exception *)(a1 + 8));
  return a1;
}

uint64_t boost::wrapexcept<boost::io::too_many_args>::clone(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_1E5D29898;
  *(_QWORD *)(v2 + 8) = &unk_1E5D29918;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v2 + 32) = &unk_1E5D29AE0;
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v2 + 40) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(_DWORD *)(v2 + 64) = *(_DWORD *)(a1 + 64);
  *(_QWORD *)v2 = &unk_1E5D29548;
  *(_QWORD *)(v2 + 8) = &unk_1E5D29578;
  *(_QWORD *)(v2 + 32) = &unk_1E5D295A0;
  boost::exception_detail::copy_boost_exception(v2 + 32, a1 + 32);
  return v2;
}

void sub_1AD9C4180(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::exception *v2;

  std::exception::~exception(v2);
  MEMORY[0x1AF44D190](v1, 0x10F1C40A1B86278);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::io::too_many_args>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x48uLL);
  boost::wrapexcept<boost::io::too_many_args>::wrapexcept((uint64_t)exception, a1);
}

void sub_1AD9C4200(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::io::too_many_args>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::exception::~exception((std::exception *)(a1 + 8));
  JUMPOUT(0x1AF44D190);
}

void `non-virtual thunk to'boost::wrapexcept<boost::io::too_many_args>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::exception::~exception((std::exception *)a1);
}

{
  *(_QWORD *)(a1 + 24) = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::exception::~exception((std::exception *)a1);
  JUMPOUT(0x1AF44D190);
}

const char *boost::io::too_many_args::what(boost::io::too_many_args *this)
{
  return "boost::too_many_args: format-string referred to fewer arguments than were passed";
}

void `non-virtual thunk to'boost::wrapexcept<boost::io::too_many_args>::~wrapexcept(_QWORD *a1)
{
  *a1 = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 3);
}

{
  *a1 = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 3);
  JUMPOUT(0x1AF44D190);
}

void boost::io::too_many_args::~too_many_args(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t boost::wrapexcept<boost::io::too_many_args>::wrapexcept(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_1E5D29898;
  *(_QWORD *)(a1 + 8) = &unk_1E5D29918;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = &unk_1E5D29AE0;
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)a1 = &unk_1E5D29548;
  *(_QWORD *)(a1 + 8) = &unk_1E5D29578;
  *(_QWORD *)(a1 + 32) = &unk_1E5D295A0;
  return a1;
}

void sub_1AD9C4454(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::basic_oaltstringstream(uint64_t a1, uint64_t a2)
{
  std::ios_base *v3;
  void *v4;

  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FF8] + 16;
  v3 = (std::ios_base *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = a2;
  boost::detail::shared_count::shared_count<boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>> *,boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::No_Op>((_QWORD *)(a1 + 16), a2);
  v4 = *(void **)(a1 + 8);
  *(_QWORD *)a1 = &unk_1E5D00190;
  *(_QWORD *)(a1 + 24) = &unk_1E5D001B8;
  std::ios_base::init(v3, v4);
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = -1;
  *(_QWORD *)a1 = &off_1E5D299F0;
  *(_QWORD *)(a1 + 24) = off_1E5D29A18;
  return a1;
}

void sub_1AD9C44FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned int **v2;

  boost::detail::shared_count::~shared_count(v2);
  MEMORY[0x1AF44D094](v1);
  _Unwind_Resume(a1);
}

void boost::io::detail::stream_format_state<char,std::char_traits<char>>::apply_on(uint64_t a1, std::ios_base *this, const std::locale *a3)
{
  std::locale *rdbuf;
  std::locale *v6;
  std::locale *v7;
  std::locale *v9;
  std::locale *v10;
  std::streamsize v11;
  std::ios_base::fmtflags v12;
  const std::locale::facet *v13;
  std::ios_base::fmtflags v14;
  uint64_t v15;
  char v16;
  std::locale v17;
  std::locale v18;

  if (*(_BYTE *)(a1 + 32))
  {
    std::ios_base::getloc(this);
    std::ios_base::imbue(this, (const std::locale *)(a1 + 40));
    std::locale::~locale(&v18);
    rdbuf = (std::locale *)this->__rdbuf_;
    if (rdbuf)
    {
      (*((void (**)(void *, uint64_t))rdbuf->__locale_ + 2))(this->__rdbuf_, a1 + 40);
      v6 = rdbuf + 1;
      std::locale::locale(&v17, v6);
      std::locale::operator=(v6, (const std::locale *)(a1 + 40));
      std::locale::~locale(&v17);
    }
    v7 = (std::locale *)&v16;
  }
  else
  {
    if (!a3)
      goto LABEL_10;
    std::ios_base::getloc(this);
    std::ios_base::imbue(this, a3);
    std::locale::~locale(&v18);
    v9 = (std::locale *)this->__rdbuf_;
    if (v9)
    {
      (*((void (**)(void *, const std::locale *))v9->__locale_ + 2))(this->__rdbuf_, a3);
      v10 = v9 + 1;
      std::locale::locale(&v17, v10);
      std::locale::operator=(v10, a3);
      std::locale::~locale(&v17);
    }
    v7 = (std::locale *)&v15;
  }
  std::locale::~locale(v7);
LABEL_10:
  if (*(_QWORD *)a1 != -1)
    this->__width_ = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11 != -1)
    this->__precision_ = v11;
  v12 = *(char *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    if (this[1].__fmtflags_ == -1)
    {
      std::ios_base::getloc(this);
      v13 = std::locale::use_facet(&v18, MEMORY[0x1E0DE4A90]);
      v14 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 32);
      std::locale::~locale(&v18);
      this[1].__fmtflags_ = v14;
    }
    this[1].__fmtflags_ = v12;
  }
  this->__fmtflags_ = *(_DWORD *)(a1 + 20);
  std::ios_base::clear(this, *(_DWORD *)(a1 + 24));
  this->__exceptions_ = *(_DWORD *)(a1 + 28);
  std::ios_base::clear(this, this->__rdstate_);
}

void sub_1AD9C46D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  std::locale::~locale((std::locale *)&a9);
  _Unwind_Resume(a1);
}

void boost::io::detail::mk_str<char,std::char_traits<char>,std::allocator<char>>(std::string *a1, const std::string::value_type *a2, std::string::size_type a3, int64_t a4, std::string::value_type a5, char a6, int a7, int a8)
{
  int64_t v16;
  uint64_t v17;
  std::string::size_type v18;
  std::string::size_type v19;

  std::string::resize(a1, 0, 0);
  if (a4 >= 1 && a4 > a3)
  {
    v16 = a4 - a3 - (a7 != 0);
    std::string::reserve(a1, a4);
    if (a8)
    {
      if (v16 >= 0)
        v17 = a4 - a3 - (a7 != 0);
      else
        v17 = v16 + 1;
      v18 = v17 >> 1;
      v16 -= v17 >> 1;
      if (!v16)
        goto LABEL_19;
    }
    else
    {
      if ((a6 & 0x20) != 0)
      {
        v18 = a4 - a3 - (a7 != 0);
        if (!a7)
          goto LABEL_21;
        goto LABEL_20;
      }
      v18 = 0;
      if (!v16)
      {
LABEL_19:
        if (!a7)
        {
LABEL_21:
          if (a3)
            std::string::append(a1, a2, a3);
          if (v18)
            std::string::append(a1, v18, a5);
          return;
        }
LABEL_20:
        std::string::append(a1, 1uLL, a7);
        goto LABEL_21;
      }
    }
    std::string::append(a1, v16, a5);
    goto LABEL_19;
  }
  if (a7)
    v19 = a3 + 1;
  else
    v19 = a3;
  std::string::reserve(a1, v19);
  if (a7)
    std::string::append(a1, 1uLL, a7);
  if (a3)
    std::string::append(a1, a2, a3);
}

_QWORD *boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::clear_buffer(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  BOOL v5;
  _OWORD v6[8];
  uint64_t v7;
  _QWORD v8[17];
  _OWORD v9[8];
  uint64_t v10;
  uint64_t v11;

  v1 = result;
  v11 = *MEMORY[0x1E0C80C00];
  v2 = result[6];
  if (v2)
    v3 = v2 == result[5];
  else
    v3 = 1;
  if (!v3)
  {
    v10 = 0;
    memset(v9, 0, sizeof(v9));
    result = (*(_QWORD *(**)(_QWORD *__return_ptr, _QWORD *, _OWORD *, uint64_t))(*result + 40))(v8, result, v9, 16);
  }
  v4 = v1[3];
  if (v4)
    v5 = v4 == v1[2];
  else
    v5 = 1;
  if (!v5)
  {
    v7 = 0;
    memset(v6, 0, sizeof(v6));
    return (*(_QWORD *(**)(_QWORD *__return_ptr, _QWORD *, _OWORD *, uint64_t))(*v1 + 40))(v8, v1, v6, 8);
  }
  return result;
}

uint64_t boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_oaltstringstream(uint64_t a1)
{
  uint64_t v2;

  v2 = std::ostream::~ostream();
  boost::detail::shared_count::~shared_count((unsigned int **)(v2 + 16));
  MEMORY[0x1AF44D094](a1 + 24);
  return a1;
}

void boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_oaltstringstream(uint64_t a1)
{
  uint64_t v2;

  v2 = std::ostream::~ostream();
  boost::detail::shared_count::~shared_count((unsigned int **)(v2 + 16));
  MEMORY[0x1AF44D094](a1 + 24);
  JUMPOUT(0x1AF44D190);
}

void `virtual thunk to'boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_oaltstringstream(_QWORD *a1)
{
  unsigned int **v1;

  v1 = (unsigned int **)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ostream::~ostream();
  boost::detail::shared_count::~shared_count(v1 + 2);
  JUMPOUT(0x1AF44D094);
}

{
  unsigned int **v1;

  v1 = (unsigned int **)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ostream::~ostream();
  boost::detail::shared_count::~shared_count(v1 + 2);
  MEMORY[0x1AF44D094](v1 + 3);
  JUMPOUT(0x1AF44D190);
}

_QWORD *boost::detail::shared_count::shared_count<boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>> *,boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::No_Op>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = 0;
  v4 = (_QWORD *)operator new();
  v4[1] = 0x100000001;
  *v4 = &unk_1E5D29A98;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1AD9C4AE0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_1AD9C4AEC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void boost::detail::sp_counted_impl_pd<boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>> *,boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::No_Op>::~sp_counted_impl_pd()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t boost::detail::sp_counted_base::destroy(uint64_t this)
{
  if (this)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  return this;
}

