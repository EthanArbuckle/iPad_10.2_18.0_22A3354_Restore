uint64_t boost::detail::sp_counted_impl_pd<boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>> *,boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::No_Op>::get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t boost::detail::sp_counted_impl_pd<boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>> *,boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::No_Op>::get_local_deleter(uint64_t a1, uint64_t a2)
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_pd<boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>> *,boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::No_Op>::get_untyped_deleter(uint64_t a1)
{
  return a1 + 24;
}

void boost::detail::shared_count::~shared_count(unsigned int **this)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v1 = *this;
  if (*this)
  {
    v2 = v1 + 2;
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 16))(v1);
      v5 = v1 + 3;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 24))(v1);
    }
  }
}

_QWORD *boost::io::detail::call_put_last<char,std::char_traits<char>,std::string const>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, a2, v3);
}

uint64_t boost::io::detail::call_put_last<char,std::char_traits<char>,unsigned long const>()
{
  return std::ostream::operator<<();
}

void boost::throw_exception<boost::io::too_few_args>(uint64_t a1)
{
  __n128 *exception;

  exception = (__n128 *)__cxa_allocate_exception(0x48uLL);
  boost::wrapexcept<boost::io::too_few_args>::wrapexcept(exception, a1);
}

void sub_1AD9C4C7C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::size(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (*((char *)a1 + 87) < 0)
    result = a1[9];
  else
    result = *((unsigned __int8 *)a1 + 87);
  v3 = *a1;
  v4 = a1[1] - *a1;
  if (v4)
  {
    v5 = v4 / 120;
    if (v5 <= 1)
      v5 = 1;
    v6 = (unint64_t *)(v3 + 56);
    do
    {
      if (*((char *)v6 - 25) < 0)
        v7 = *(v6 - 5);
      else
        v7 = *((unsigned __int8 *)v6 - 25);
      v8 = v7 + result;
      if (*((_DWORD *)v6 - 14) == -2 && v8 <= *v6)
        v8 = *v6;
      if (*((char *)v6 - 1) < 0)
        v9 = *(v6 - 2);
      else
        v9 = *((unsigned __int8 *)v6 - 1);
      result = v9 + v8;
      v6 += 15;
      --v5;
    }
    while (v5);
  }
  return result;
}

__n128 boost::wrapexcept<boost::io::too_few_args>::wrapexcept(__n128 *a1, uint64_t a2)
{
  __n128 result;

  a1->n128_u64[0] = (unint64_t)&unk_1E5D29898;
  a1->n128_u64[1] = (unint64_t)&unk_1E5D298F0;
  result = *(__n128 *)(a2 + 8);
  a1[1] = result;
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u32[0] = -1;
  a1->n128_u64[0] = (unint64_t)&unk_1E5D294D0;
  a1->n128_u64[1] = (unint64_t)&unk_1E5D29500;
  a1[2].n128_u64[0] = (unint64_t)&unk_1E5D29528;
  a1[2].n128_u64[1] = 0;
  return result;
}

uint64_t boost::wrapexcept<boost::io::too_few_args>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::exception::~exception((std::exception *)(a1 + 8));
  return a1;
}

uint64_t boost::wrapexcept<boost::io::too_few_args>::clone(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_1E5D29898;
  *(_QWORD *)(v2 + 8) = &unk_1E5D298F0;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v2 + 32) = &unk_1E5D29AE0;
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v2 + 40) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(_DWORD *)(v2 + 64) = *(_DWORD *)(a1 + 64);
  *(_QWORD *)v2 = &unk_1E5D294D0;
  *(_QWORD *)(v2 + 8) = &unk_1E5D29500;
  *(_QWORD *)(v2 + 32) = &unk_1E5D29528;
  boost::exception_detail::copy_boost_exception(v2 + 32, a1 + 32);
  return v2;
}

void sub_1AD9C4E98(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::exception *v2;

  std::exception::~exception(v2);
  MEMORY[0x1AF44D190](v1, 0x10F1C40A1B86278);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::io::too_few_args>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x48uLL);
  boost::wrapexcept<boost::io::too_few_args>::wrapexcept((uint64_t)exception, a1);
}

void sub_1AD9C4F18(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::io::too_few_args>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::exception::~exception((std::exception *)(a1 + 8));
  JUMPOUT(0x1AF44D190);
}

void `non-virtual thunk to'boost::wrapexcept<boost::io::too_few_args>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::exception::~exception((std::exception *)a1);
}

{
  *(_QWORD *)(a1 + 24) = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::exception::~exception((std::exception *)a1);
  JUMPOUT(0x1AF44D190);
}

const char *boost::io::too_few_args::what(boost::io::too_few_args *this)
{
  return "boost::too_few_args: format-string referred to more arguments than were passed";
}

void `non-virtual thunk to'boost::wrapexcept<boost::io::too_few_args>::~wrapexcept(_QWORD *a1)
{
  *a1 = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 3);
}

{
  *a1 = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 3);
  JUMPOUT(0x1AF44D190);
}

void boost::io::too_few_args::~too_few_args(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t boost::wrapexcept<boost::io::too_few_args>::wrapexcept(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_1E5D29898;
  *(_QWORD *)(a1 + 8) = &unk_1E5D298F0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = &unk_1E5D29AE0;
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)a1 = &unk_1E5D294D0;
  *(_QWORD *)(a1 + 8) = &unk_1E5D29500;
  *(_QWORD *)(a1 + 32) = &unk_1E5D29528;
  return a1;
}

void sub_1AD9C516C(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

char *flatbuffers_2_0_6::FlatBufferBuilder::AddElement<int>(char *this, uint64_t a2, int a3, int a4)
{
  char *v5;
  unsigned int v6;

  v5 = this;
  if (a3 != a4 || this[88])
  {
    v6 = flatbuffers_2_0_6::FlatBufferBuilder::PushElement<int>((flatbuffers_2_0_6::vector_downward *)this, a3);
    return flatbuffers_2_0_6::FlatBufferBuilder::TrackField(v5, a2, v6);
  }
  return this;
}

char *flatbuffers_2_0_6::FlatBufferBuilder::TrackField(char *this, uint64_t a2, unsigned int a3)
{
  char *v5;
  unint64_t *v6;

  v5 = this;
  v6 = (unint64_t *)*((_QWORD *)this + 8);
  if (*((_QWORD *)this + 7) - (_QWORD)v6 <= 7uLL)
  {
    this = flatbuffers_2_0_6::vector_downward::reallocate((flatbuffers_2_0_6::vector_downward *)this, 8uLL);
    v6 = (unint64_t *)*((_QWORD *)v5 + 8);
  }
  *v6 = a3 | (unint64_t)(a2 << 32);
  *((_QWORD *)v5 + 8) += 8;
  ++*((_DWORD *)v5 + 18);
  if (*((unsigned __int16 *)v5 + 38) < a2)
    *((_WORD *)v5 + 38) = a2;
  return this;
}

uint64_t flatbuffers_2_0_6::FlatBufferBuilder::PushElement<int>(flatbuffers_2_0_6::vector_downward *this, int a2)
{
  int v5;

  if (*((_QWORD *)this + 10) <= 3uLL)
    *((_QWORD *)this + 10) = 4;
  flatbuffers_2_0_6::vector_downward::fill((char *)this, -*((_DWORD *)this + 10) & 3);
  v5 = a2;
  flatbuffers_2_0_6::vector_downward::push_small<int>((char *)this, &v5);
  return *((unsigned int *)this + 10);
}

char *flatbuffers_2_0_6::vector_downward::reallocate(flatbuffers_2_0_6::vector_downward *this, unint64_t a2)
{
  unint64_t v3;
  size_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *result;
  char *v11;
  char *v12;

  v3 = *((_QWORD *)this + 4);
  v4 = *((unsigned int *)this + 10);
  v5 = (char *)*((_QWORD *)this + 6);
  v6 = *((_QWORD *)this + 8) - (_QWORD)v5;
  if (v3)
    v7 = v3 >> 1;
  else
    v7 = *((_QWORD *)this + 2);
  if (v7 <= a2)
    v7 = a2;
  v8 = (*((_QWORD *)this + 3) + v3 + v7 - 1) & -*((_QWORD *)this + 3);
  *((_QWORD *)this + 4) = v8;
  v9 = *(_QWORD *)this;
  if (!v5)
  {
    if (v9)
      result = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v8);
    else
      result = (char *)operator new[]();
    goto LABEL_13;
  }
  if (v9)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, char *, unint64_t, uint64_t, size_t, _QWORD))(*(_QWORD *)v9 + 32))(v9, v5, v3, v8, v4, v6);
LABEL_13:
    v11 = result;
    goto LABEL_14;
  }
  v11 = (char *)operator new[]();
  memcpy(&v11[v8 - v4], &v5[v3 - v4], v4);
  memcpy(v11, v5, v6);
  result = (char *)MEMORY[0x1AF44D160](v5, 0x1000C8077774924);
LABEL_14:
  v12 = &v11[*((_QWORD *)this + 4) - v4];
  *((_QWORD *)this + 6) = v11;
  *((_QWORD *)this + 7) = v12;
  *((_QWORD *)this + 8) = &v11[v6];
  return result;
}

char *flatbuffers_2_0_6::vector_downward::push_small<int>(char *this, _DWORD *a2)
{
  char *v3;
  uint64_t v4;

  v3 = this;
  v4 = *((_QWORD *)this + 7);
  if ((unint64_t)(v4 - *((_QWORD *)this + 8)) <= 3)
  {
    this = flatbuffers_2_0_6::vector_downward::reallocate((flatbuffers_2_0_6::vector_downward *)this, 4uLL);
    v4 = *((_QWORD *)v3 + 7);
  }
  *((_DWORD *)v3 + 10) += 4;
  *(_DWORD *)(v4 - 4) = *a2;
  *((_QWORD *)v3 + 7) = v4 - 4;
  return this;
}

char *flatbuffers_2_0_6::vector_downward::fill(char *this, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v3 = this;
    v4 = *((_QWORD *)this + 7);
    if (v4 - *((_QWORD *)this + 8) < a2)
    {
      this = flatbuffers_2_0_6::vector_downward::reallocate((flatbuffers_2_0_6::vector_downward *)this, a2);
      v4 = *((_QWORD *)v3 + 7);
    }
    v5 = 0;
    *((_QWORD *)v3 + 7) = v4 - a2;
    *((_DWORD *)v3 + 10) += a2;
    do
      *(_BYTE *)(*((_QWORD *)v3 + 7) + v5++) = 0;
    while (a2 != v5);
  }
  return this;
}

char *flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>(char *result, uint64_t a2, int a3)
{
  char *v4;
  int v5;

  if (a3)
  {
    v4 = result;
    v5 = flatbuffers_2_0_6::FlatBufferBuilder::ReferTo((flatbuffers_2_0_6::FlatBufferBuilder *)result, a3);
    return flatbuffers_2_0_6::FlatBufferBuilder::AddElement<int>(v4, a2, v5, 0);
  }
  return result;
}

uint64_t flatbuffers_2_0_6::FlatBufferBuilder::ReferTo(flatbuffers_2_0_6::FlatBufferBuilder *this, int a2)
{
  if (*((_QWORD *)this + 10) <= 3uLL)
    *((_QWORD *)this + 10) = 4;
  flatbuffers_2_0_6::vector_downward::fill((char *)this, -*((_DWORD *)this + 10) & 3);
  return (*((_DWORD *)this + 10) - a2 + 4);
}

char *flatbuffers_2_0_6::FlatBufferBuilder::AddElement<signed char>(char *this, uint64_t a2, int a3, int a4)
{
  uint64_t v5;
  char v6;

  v5 = (uint64_t)this;
  if (a3 != a4 || this[88])
  {
    if (!*((_QWORD *)this + 10))
      *((_QWORD *)this + 10) = 1;
    v6 = a3;
    flatbuffers_2_0_6::vector_downward::push_small<signed char>(this, &v6);
    return flatbuffers_2_0_6::FlatBufferBuilder::TrackField((char *)v5, a2, *(_DWORD *)(v5 + 40));
  }
  return this;
}

char *flatbuffers_2_0_6::vector_downward::push_small<signed char>(char *this, _BYTE *a2)
{
  char *v3;
  uint64_t v4;

  v3 = this;
  v4 = *((_QWORD *)this + 7);
  if (v4 == *((_QWORD *)this + 8))
  {
    this = flatbuffers_2_0_6::vector_downward::reallocate((flatbuffers_2_0_6::vector_downward *)this, 1uLL);
    v4 = *((_QWORD *)v3 + 7);
  }
  *((_QWORD *)v3 + 7) = v4 - 1;
  ++*((_DWORD *)v3 + 10);
  *(_BYTE *)(v4 - 1) = *a2;
  return this;
}

uint64_t flatbuffers_2_0_6::FlatBufferBuilder::EndTable(flatbuffers_2_0_6::FlatBufferBuilder *this, __int16 a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned __int16 v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  _WORD *v11;
  int v12;
  unsigned int *v13;
  size_t v14;
  char *v15;
  uint64_t v16;
  int v17;

  v4 = flatbuffers_2_0_6::FlatBufferBuilder::PushElement<int>(this, 0);
  if ((unsigned __int16)(*((_WORD *)this + 38) + 2) <= 4u)
    v5 = 4;
  else
    v5 = (unsigned __int16)(*((_WORD *)this + 38) + 2);
  *((_WORD *)this + 38) = v5;
  flatbuffers_2_0_6::vector_downward::fill_big(this, v5);
  v6 = v4 - a2;
  v8 = (char *)*((_QWORD *)this + 7);
  v7 = *((_QWORD *)this + 8);
  *((_WORD *)v8 + 1) = v6;
  *(_WORD *)v8 = *((_WORD *)this + 38);
  v9 = *((unsigned int *)this + 18);
  v10 = (char *)(v7 - 8 * v9);
  if ((_DWORD)v9)
  {
    v11 = (_WORD *)(v7 - 8 * v9);
    do
    {
      *(_WORD *)&v8[(unsigned __int16)v11[2]] = v4 - *v11;
      v11 += 4;
    }
    while ((unint64_t)v11 < v7);
  }
  *((_QWORD *)this + 8) = v10;
  *((_DWORD *)this + 18) = 0;
  *((_WORD *)this + 38) = 0;
  v12 = *((_DWORD *)this + 10);
  if (!*((_BYTE *)this + 89) || (v13 = (unsigned int *)*((_QWORD *)this + 6), v13 >= (unsigned int *)v10))
  {
LABEL_13:
    v17 = v12;
LABEL_14:
    if ((unint64_t)(v8 - v10) <= 3)
    {
      flatbuffers_2_0_6::vector_downward::reallocate(this, 4uLL);
      v10 = (char *)*((_QWORD *)this + 8);
    }
    *(_DWORD *)v10 = v17;
    *((_QWORD *)this + 8) = v10 + 4;
    goto LABEL_17;
  }
  v14 = *(unsigned __int16 *)v8;
  v15 = (char *)v13 + *((_QWORD *)this + 4);
  while (1)
  {
    v16 = *v13;
    if ((_DWORD)v14 == *(unsigned __int16 *)&v15[-v16] && !memcmp(&v15[-v16], v8, v14))
      break;
    if (++v13 >= (unsigned int *)v10)
      goto LABEL_13;
  }
  v8 += (v12 - v4);
  *((_QWORD *)this + 7) = v8;
  *((_DWORD *)this + 10) = v4;
  v12 = v16;
  v17 = v4;
  if ((_DWORD)v16 == (_DWORD)v4)
    goto LABEL_14;
LABEL_17:
  *(_DWORD *)(*((_QWORD *)this + 6) + *((_QWORD *)this + 4) - v4) = v12 - v4;
  *((_BYTE *)this + 78) = 0;
  return v4;
}

void flatbuffers_2_0_6::vector_downward::fill_big(flatbuffers_2_0_6::vector_downward *this, unint64_t a2)
{
  char *v4;

  v4 = (char *)*((_QWORD *)this + 7);
  if (a2)
  {
    if ((unint64_t)&v4[-*((_QWORD *)this + 8)] < a2)
    {
      flatbuffers_2_0_6::vector_downward::reallocate(this, a2);
      v4 = (char *)*((_QWORD *)this + 7);
    }
    v4 -= a2;
    *((_QWORD *)this + 7) = v4;
    *((_DWORD *)this + 10) += a2;
  }
  bzero(v4, a2);
}

uint64_t flatbuffers_2_0_6::FlatBufferBuilder::CreateString(flatbuffers_2_0_6::FlatBufferBuilder *this, const char *a2, unint64_t a3)
{
  if (*((_QWORD *)this + 10) <= 3uLL)
    *((_QWORD *)this + 10) = 4;
  flatbuffers_2_0_6::vector_downward::fill((char *)this, (~(_BYTE)a3 - *((_DWORD *)this + 10)) & 3);
  flatbuffers_2_0_6::vector_downward::fill((char *)this, 1uLL);
  flatbuffers_2_0_6::vector_downward::push(this, (const unsigned __int8 *)a2, a3);
  flatbuffers_2_0_6::FlatBufferBuilder::PushElement<int>(this, a3);
  return *((unsigned int *)this + 10);
}

_QWORD *flatbuffers_2_0_6::vector_downward::push(_QWORD *this, const unsigned __int8 *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;

  if (a3)
  {
    v5 = this;
    v6 = this[7];
    if (v6 - this[8] < a3)
    {
      flatbuffers_2_0_6::vector_downward::reallocate((flatbuffers_2_0_6::vector_downward *)this, a3);
      v6 = v5[7];
    }
    v5[7] = v6 - a3;
    *((_DWORD *)v5 + 10) += a3;
    return memcpy((void *)(v6 - a3), __src, a3);
  }
  return this;
}

char *flatbuffers_2_0_6::FlatBufferBuilder::AddElement<float>(char *this, uint64_t a2, float a3, float a4)
{
  char *v5;
  unsigned int v6;

  v5 = this;
  if (a3 != a4 || this[88])
  {
    v6 = flatbuffers_2_0_6::FlatBufferBuilder::PushElement<float>((flatbuffers_2_0_6::vector_downward *)this, a3);
    return flatbuffers_2_0_6::FlatBufferBuilder::TrackField(v5, a2, v6);
  }
  return this;
}

uint64_t flatbuffers_2_0_6::FlatBufferBuilder::PushElement<float>(flatbuffers_2_0_6::vector_downward *this, float a2)
{
  float v5;

  if (*((_QWORD *)this + 10) <= 3uLL)
    *((_QWORD *)this + 10) = 4;
  flatbuffers_2_0_6::vector_downward::fill((char *)this, -*((_DWORD *)this + 10) & 3);
  v5 = a2;
  flatbuffers_2_0_6::vector_downward::push_small<float>(this, &v5);
  return *((unsigned int *)this + 10);
}

float flatbuffers_2_0_6::vector_downward::push_small<float>(flatbuffers_2_0_6::vector_downward *this, float *a2)
{
  uint64_t v4;
  float result;

  v4 = *((_QWORD *)this + 7);
  if ((unint64_t)(v4 - *((_QWORD *)this + 8)) <= 3)
  {
    flatbuffers_2_0_6::vector_downward::reallocate(this, 4uLL);
    v4 = *((_QWORD *)this + 7);
  }
  result = *a2;
  *(float *)(v4 - 4) = *a2;
  *((_QWORD *)this + 7) = v4 - 4;
  *((_DWORD *)this + 10) += 4;
  return result;
}

uint64_t flatbuffers_2_0_6::FlatBufferBuilder::CreateVector<quasar::rescoring::NBestListToken>(flatbuffers_2_0_6::FlatBufferBuilder *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  flatbuffers_2_0_6::FlatBufferBuilder::StartVector(a1, a3, 4uLL);
  if (a3)
  {
    v6 = a2 - 4;
    v7 = a3;
    do
    {
      v8 = v7 - 1;
      v9 = flatbuffers_2_0_6::FlatBufferBuilder::ReferTo(a1, *(_DWORD *)(v6 + 4 * v7));
      flatbuffers_2_0_6::FlatBufferBuilder::PushElement<int>(a1, v9);
      v7 = v8;
    }
    while (v8);
  }
  *((_BYTE *)a1 + 78) = 0;
  return flatbuffers_2_0_6::FlatBufferBuilder::PushElement<int>(a1, a3);
}

char *flatbuffers_2_0_6::FlatBufferBuilder::StartVector(flatbuffers_2_0_6::FlatBufferBuilder *this, uint64_t a2, unint64_t a3)
{
  uint64_t v5;

  *((_BYTE *)this + 78) = 1;
  v5 = a3 * a2;
  if (*((_QWORD *)this + 10) <= 3uLL)
    *((_QWORD *)this + 10) = 4;
  flatbuffers_2_0_6::vector_downward::fill((char *)this, (-*((_DWORD *)this + 10) - (int)v5) & 3);
  if (*((_QWORD *)this + 10) < a3)
    *((_QWORD *)this + 10) = a3;
  return flatbuffers_2_0_6::vector_downward::fill((char *)this, (a3 - 1) & (-(uint64_t)*((unsigned int *)this + 10) - v5));
}

void flatbuffers_2_0_6::FlatBufferBuilder::~FlatBufferBuilder(flatbuffers_2_0_6::FlatBufferBuilder *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 12);
  if (v2)
  {
    std::__tree<int>::destroy(*((_QWORD *)this + 12), *(_QWORD **)(v2 + 8));
    MEMORY[0x1AF44D190](v2, 0x1060C40C2B13FB5);
  }
  flatbuffers_2_0_6::vector_downward::~vector_downward(this);
}

void flatbuffers_2_0_6::vector_downward::~vector_downward(flatbuffers_2_0_6::vector_downward *this)
{
  flatbuffers_2_0_6::vector_downward::clear_buffer(this);
  if (*((_BYTE *)this + 8) && *(_QWORD *)this)
    (*(void (**)(_QWORD))(**(_QWORD **)this + 8))(*(_QWORD *)this);
  *(_QWORD *)this = 0;
  *((_BYTE *)this + 8) = 0;
}

_QWORD *flatbuffers_2_0_6::vector_downward::clear_buffer(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this;
  v2 = this[6];
  if (v2)
  {
    v3 = *this;
    if (*v1)
      this = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    else
      this = (_QWORD *)MEMORY[0x1AF44D160](v2, 0x1000C8077774924);
  }
  v1[6] = 0;
  return this;
}

char **std::unique_ptr<quasar::rescoring::Rescorer>::reset[abi:ne180100](char ***a1, char **a2)
{
  char **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::rescoring::Rescorer::~Rescorer(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

void quasar::rescoring::Rescorer::~Rescorer(char **this)
{
  char *v2;
  uint64_t v3;
  char *v4;

  v2 = (char *)(this + 227);
  quasar::BasicTextSanitizer::~BasicTextSanitizer((quasar::BasicTextSanitizer *)(this + 234));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 232));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 230));
  std::__tree<std::string>::destroy((uint64_t)v2, this[228]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 225));
  v3 = (uint64_t)this[224];
  this[224] = 0;
  if (v3)
    std::default_delete<quasar::SimpleFstLmRescorer>::operator()[abi:ne180100]((uint64_t)(this + 224), v3);
  v4 = this[223];
  this[223] = 0;
  if (v4)
    (*(void (**)(char *))(*(_QWORD *)v4 + 8))(v4);
  std::__tree<std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>>>::destroy((uint64_t)(this + 220), this[221]);
  quasar::rescoring::RescorerConfig::~RescorerConfig((quasar::rescoring::RescorerConfig *)this);
}

uint64_t std::default_delete<quasar::SimpleFstLmRescorer>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t result;
  void **v4;

  if (a2)
  {
    v4 = (void **)(a2 + 80);
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v4);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2 + 64);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2 + 48);
    if (*(char *)(a2 + 31) < 0)
      operator delete(*(void **)(a2 + 8));
    return MEMORY[0x1AF44D190](a2, 0x1072C40140BB7A5);
  }
  return result;
}

void std::__tree<std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

quasar::ptt::PronunciationRecognizer *std::unique_ptr<quasar::ptt::PronunciationRecognizer>::reset[abi:ne180100](quasar::ptt::PronunciationRecognizer **a1, quasar::ptt::PronunciationRecognizer *a2)
{
  quasar::ptt::PronunciationRecognizer *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::ptt::PronunciationRecognizer::~PronunciationRecognizer(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

void quasar::ptt::PronunciationRecognizer::~PronunciationRecognizer(quasar::ptt::PronunciationRecognizer *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 249);
  *((_QWORD *)this + 249) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 160))(v2);
  if (*((char *)this + 1991) < 0)
    operator delete(*((void **)this + 246));
  v3 = *((_QWORD *)this + 245);
  *((_QWORD *)this + 245) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1944);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1928);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1896);
  if (*((char *)this + 1895) < 0)
    operator delete(*((void **)this + 234));
  if (*((char *)this + 1871) < 0)
    operator delete(*((void **)this + 231));
  if (*((char *)this + 1847) < 0)
    operator delete(*((void **)this + 228));
  if (*((char *)this + 1823) < 0)
    operator delete(*((void **)this + 225));
  v4 = *((_QWORD *)this + 224);
  *((_QWORD *)this + 224) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 212) = &unk_1E5D343A0;
  if (*((char *)this + 1727) < 0)
    operator delete(*((void **)this + 213));
  *((_QWORD *)this + 208) = &unk_1E5D343A0;
  if (*((char *)this + 1695) < 0)
    operator delete(*((void **)this + 209));
  *((_QWORD *)this + 204) = &unk_1E5D343A0;
  if (*((char *)this + 1663) < 0)
    operator delete(*((void **)this + 205));
  *((_QWORD *)this + 200) = &unk_1E5D343A0;
  if (*((char *)this + 1631) < 0)
    operator delete(*((void **)this + 201));
  *((_QWORD *)this + 196) = &unk_1E5D343A0;
  if (*((char *)this + 1599) < 0)
    operator delete(*((void **)this + 197));
  if (*((char *)this + 1567) < 0)
    operator delete(*((void **)this + 193));
  quasar::SystemConfig::~SystemConfig(this);
}

_QWORD *std::vector<std::vector<quasar::Token>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::vector<quasar::Token>*>,std::__wrap_iter<std::vector<quasar::Token>*>>(uint64_t *a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  void *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v5 = a2;
  if (a5 >= 1)
  {
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      v20 = v12 - (_QWORD)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)a2) >> 3)) >= a5)
      {
        v21 = &a3[3 * a5];
      }
      else
      {
        v21 = &a3[(uint64_t)(v12 - (_QWORD)a2) >> 3];
        a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::Token>>,std::vector<quasar::Token>*,std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v9, v21, a4, *(_QWORD **)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      std::vector<std::vector<quasar::Token>>::__move_range((uint64_t)a1, v5, v12, (uint64_t)&v5[3 * a5]);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<quasar::Token> const*,std::vector<quasar::Token> const*,std::vector<quasar::Token>*>((uint64_t)&v23, a3, v21, (uint64_t)v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 3);
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x555555555555555)
        v18 = 0xAAAAAAAAAAAAAAALL;
      else
        v18 = v17;
      v27 = v9;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v9, v18);
      else
        v19 = 0;
      v23 = v19;
      v24 = &v19[24 * v15];
      v25 = v24;
      v26 = &v19[24 * v18];
      std::__split_buffer<std::vector<quasar::Token>>::__construct_at_end_with_size<std::__wrap_iter<std::vector<quasar::Token>*>>(&v23, a3, a5);
      v5 = (_QWORD *)std::vector<std::vector<quasar::Token>>::__swap_out_circular_buffer(a1, &v23, v5);
      std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer(&v23);
    }
  }
  return v5;
}

void sub_1AD9C60C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

_QWORD *std::__split_buffer<std::vector<quasar::Token>>::__construct_at_end_with_size<std::__wrap_iter<std::vector<quasar::Token>*>>(_QWORD *result, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;

  v3 = result;
  v4 = (_QWORD *)result[2];
  if (a3)
  {
    v6 = &v4[3 * a3];
    v7 = 24 * a3;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      result = std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v4, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
      v4 += 3;
      a2 += 3;
      v7 -= 24;
    }
    while (v7);
    v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_1AD9C6170(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t quasar::NearestNeighborSearch::NearestNeighborSearch(uint64_t a1, std::string *a2, uint64_t a3, int a4)
{
  size_t v8;
  std::string *p_p;
  const void *v10;
  std::string __p;

  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &unk_1E5D34170;
  *(_BYTE *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 80) = &unk_1E5D341C8;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  if (*(char *)(a3 + 23) >= 0)
    v8 = *(unsigned __int8 *)(a3 + 23);
  else
    v8 = *(_QWORD *)(a3 + 8);
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v8 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v8)
  {
    if (*(char *)(a3 + 23) >= 0)
      v10 = (const void *)a3;
    else
      v10 = *(const void **)a3;
    memmove(p_p, v10, v8);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v8) = 46;
  quasar::SystemConfig::setPrefix(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  quasar::NearestNeighborSearch::registerParams((quasar::NearestNeighborSearch *)a1, (quasar::SystemConfig *)a2);
  quasar::SystemConfig::readPtree((uint64_t)a2, a3, 0, 0);
  if (a4)
  {
    if (*(char *)(a1 + 231) < 0)
    {
      **(_BYTE **)(a1 + 208) = 0;
      *(_QWORD *)(a1 + 216) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 208) = 0;
      *(_BYTE *)(a1 + 231) = 0;
    }
  }
  quasar::NearestNeighborSearch::init((int32x2_t *)a1);
  return a1;
}

void sub_1AD9C6318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void **v18;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v14 + 279) < 0)
    operator delete(*(void **)(v14 + 256));
  if (*(char *)(v14 + 255) < 0)
    operator delete(*(void **)(v14 + 232));
  if (*(char *)(v14 + 231) < 0)
    operator delete(*(void **)(v14 + 208));
  if (*(char *)(v14 + 207) < 0)
    operator delete(*(void **)(v14 + 184));
  if (*(char *)(v14 + 183) < 0)
    operator delete(*(void **)(v14 + 160));
  if (*(char *)(v14 + 159) < 0)
    operator delete(*v18);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v17);
  kaldi::CuVector<float>::~CuVector(v16);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v14 + 64);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v15);
  kaldi::CuMatrix<float>::~CuMatrix(v14);
  _Unwind_Resume(a1);
}

void quasar::NearestNeighborSearch::registerParams(quasar::NearestNeighborSearch *this, quasar::SystemConfig *a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "embedding-matrix-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Euclid embedding kaldi matrix");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 136, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "vocab-syms-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Vocab symbol table text file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 160, (uint64_t)__p, 1, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "lexicon-syms-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "lexicon symbol table text file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 184, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "unigram-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Unigram kaldi vector file. A negative log unigram vector with values for each vocab");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 208, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "unigram-weight");
  std::string::basic_string[abi:ne180100]<0>(__p, "Unigram weight for calculation combined score with Euclid distance. A value between [0~1)");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 128, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "distance-threshold");
  std::string::basic_string[abi:ne180100]<0>(__p, "If > 0, only return nearest neighbors <= distance-threshold. Else, disable this threshold");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 280, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "quantized-embedding-matrix-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Euclid embedding kaldi matrix");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 232, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "embedding-matrix-shape-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Kaldi vector of Euclid embedding matrix shape. Required when using quantized-embedding-matrix-file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 256, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1AD9C6754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void quasar::NearestNeighborSearch::init(int32x2_t *this)
{
  int32x2_t v2;
  uint64_t *v3;
  int32x2_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  int32x2_t v8;
  __int32 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  float v21;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  void (***v27)(_QWORD, uint64_t, _QWORD);
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  int32x2_t *v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  int32x2_t *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD v40[2];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  unsigned int v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  void *v63;
  float *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 v67;

  v65 = 0;
  v66 = 0;
  v63 = &unk_1E5D341C8;
  v64 = 0;
  if (this[34].i8[7] < 0)
    v2 = this[33];
  else
    v2 = (int32x2_t)this[34].u8[7];
  v67 = 0;
  if (v2)
  {
    kaldi::Input::Input(&v46, &this[32], &v67);
    v3 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)&v46);
    kaldi::CuVector<float>::Read((uint64_t)&v63, v3, v67);
    kaldi::Input::~Input((kaldi::Input *)&v46);
  }
  if (this[19].i8[7] < 0)
    v4 = this[18];
  else
    v4 = (int32x2_t)this[19].u8[7];
  if (v4)
  {
    kaldi::Input::Input(&v43, &this[17], &v67);
    if (!v43)
    {
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v46 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
      v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"Error opening file: ", 20);
      v31 = this[19].i8[7];
      if (v31 >= 0)
        v32 = this + 17;
      else
        v32 = (int32x2_t *)this[17];
      if (v31 >= 0)
        v33 = this[19].u8[7];
      else
        v33 = (uint64_t)this[18];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v32, v33);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v46);
    }
    v5 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)&v43);
    kaldi::CuMatrix<float>::Read((uint64_t)this, v5, v67, 0);
    kaldi::Input::~Input((kaldi::Input *)&v43);
  }
  if (this[31].i8[7] < 0)
  {
    if (!*(_QWORD *)&this[30])
      goto LABEL_29;
  }
  else if (!this[31].i8[7])
  {
    goto LABEL_29;
  }
  if (this[34].i8[7] < 0)
  {
    if (this[33])
      goto LABEL_18;
LABEL_62:
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v46 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"embedding-matrix-shape-file is required for quantized-embedding-matrix-file", 75);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v46);
  }
  if (!this[34].i8[7])
    goto LABEL_62;
LABEL_18:
  kaldi::Input::Input(v40, &this[29], &v67);
  kaldi::VectorwiseQuantizedMatrix<signed char>::VectorwiseQuantizedMatrix((uint64_t)&v46, (int)*v64, (int)v64[1]);
  v6 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v40);
  kaldi::VectorwiseQuantizedMatrix<signed char>::Read((unsigned int *)&v46, v6, v67, 0);
  kaldi::CuMatrix<float>::Resize(this, v46, DWORD1(v46), 0, 0);
  if (this[2].i32[1] >= 1)
  {
    v7 = 0;
    do
    {
      v8 = this[1];
      v9 = this[3].i32[0];
      kaldi::VectorwiseQuantizedMatrix<signed char>::Row((uint64_t)&v46, v7, (uint64_t)&v43);
      v10 = this[2].u32[0];
      if ((int)v10 >= 1)
      {
        v11 = 0;
        v12 = v43;
        do
        {
          *(float *)(*(_QWORD *)&v8 + 4 * v9 * v7 + 4 * v11) = v44 * (float)*(char *)(v12 + v11);
          ++v11;
        }
        while (v10 != v11);
      }
      ++v7;
    }
    while (v7 < this[2].i32[1]);
  }
  v13 = *((_QWORD *)&v47 + 1);
  *((_QWORD *)&v47 + 1) = 0;
  if (v13)
    MEMORY[0x1AF44D190](v13, 0x1000C4077774924);
  v14 = *((_QWORD *)&v46 + 1);
  *((_QWORD *)&v46 + 1) = 0;
  if (v14)
    MEMORY[0x1AF44D190](v14, 0x1000C4052888210);
  kaldi::Input::~Input((kaldi::Input *)v40);
LABEL_29:
  quasar::SymbolMap::ReadFstText<std::shared_ptr<fst::SymbolTable>>((uint64_t)&this[20], &v46);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)&this[6], &v46);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
  if (*((_QWORD *)&v46 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  kaldi::CuMatrix<float>::CuMatrix(&v43, this, 111);
  kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v43, (uint64_t)&v43);
  v41 = 0;
  v42 = 0;
  v40[0] = &unk_1E5D341C8;
  v40[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v40, v45, 0);
  kaldi::CuVectorBase<float>::AddColSumMat((uint64_t)v40, (uint64_t)&v43, 1.0, 0.0);
  kaldi::CuVector<float>::Resize((uint64_t)&this[10], v41, 1);
  kaldi::CuVectorBase<float>::CopyFromVec(&this[10], (uint64_t)v40);
  if (this[25].i8[7] < 0)
  {
    if (!*(_QWORD *)&this[24])
      goto LABEL_43;
  }
  else if (!this[25].i8[7])
  {
    goto LABEL_43;
  }
  quasar::SymbolMap::ReadFstText<std::shared_ptr<fst::SymbolTable>>((uint64_t)&this[23], &v46);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)&this[8], &v46);
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
  if (*((_QWORD *)&v46 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
LABEL_43:
  v21 = *(float *)this[16].i32;
  if (v21 < 0.0 || v21 >= 1.0)
  {
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v46 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"Euclid unigram weight should within range [0, 1); unigram weight: ",
      66);
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v46);
  }
  if (this[28].i8[7] < 0)
  {
    if (!*(_QWORD *)&this[27])
      goto LABEL_60;
  }
  else if (!this[28].i8[7])
  {
    goto LABEL_60;
  }
  kaldi::Input::Input(&v39, &this[26], &v67);
  if (!v39)
  {
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v46 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
    v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"Error opening file: ", 20);
    v35 = this[28].i8[7];
    if (v35 >= 0)
      v36 = this + 26;
    else
      v36 = (int32x2_t *)this[26];
    if (v35 >= 0)
      v37 = this[28].u8[7];
    else
      v37 = (uint64_t)this[27];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v36, v37);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v46);
  }
  v23 = operator new(0x38uLL);
  v23[2] = 0;
  *v23 = &unk_1E5D42330;
  v23[1] = 0;
  v23[5] = 0;
  v23[6] = 0;
  v23[4] = 0;
  v23[3] = &unk_1E5D341C8;
  *(_QWORD *)&v46 = v23 + 3;
  *((_QWORD *)&v46 + 1) = v23;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)&this[14], &v46);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
  if (*((_QWORD *)&v46 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = (void (***)(_QWORD, uint64_t, _QWORD))this[14];
  v28 = kaldi::Input::Stream((kaldi::Input *)&v39);
  (**v27)(v27, v28, v67);
  v29 = (uint64_t)this[14];
  if (*(_DWORD *)(v29 + 16) != this[2].i32[1])
  {
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v46 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"Euclid embeddings and unigram size mismatch; unigram dim: ",
      58);
    v38 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"embedding rows: ", 16);
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v46);
  }
  kaldi::CuVectorBase<float>::Scale(v29, *(float *)this[16].i32 / (float)(1.0 - *(float *)this[16].i32));
  kaldi::Input::~Input((kaldi::Input *)&v39);
LABEL_60:
  v40[0] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)v40);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v43);
  v63 = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)&v63);
}

void sub_1AD9C6E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  kaldi::Input::~Input((kaldi::Input *)va);
  kaldi::CuVector<float>::~CuVector((_QWORD *)(v7 - 104));
  _Unwind_Resume(a1);
}

void sub_1AD9C6ED8()
{
  JUMPOUT(0x1AD9C6F24);
}

void sub_1AD9C6EE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  kaldi::Input::~Input((kaldi::Input *)va);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va1);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va2);
  kaldi::CuVector<float>::~CuVector((_QWORD *)(v2 - 104));
  _Unwind_Resume(a1);
}

void sub_1AD9C6F14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  kaldi::VectorwiseQuantizedMatrix<signed char>::~VectorwiseQuantizedMatrix((uint64_t)va);
  JUMPOUT(0x1AD9C6F20);
}

uint64_t kaldi::VectorwiseQuantizedMatrix<signed char>::~VectorwiseQuantizedMatrix(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    MEMORY[0x1AF44D190](v2, 0x1000C4077774924);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    MEMORY[0x1AF44D190](v3, 0x1000C4052888210);
  return a1;
}

void quasar::NearestNeighborSearch::findNearestNeighbors(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  std::vector<unsigned int>::pointer end;
  unsigned int *v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  char *v23;
  unsigned int *v24;
  unsigned int v25;
  std::vector<unsigned int>::pointer begin;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  std::vector<unsigned int>::pointer v32;
  int *v33;
  int64_t v34;
  uint64_t v35;
  unint64_t v36;
  int *v37;
  BOOL v38;
  int *v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  int v45;
  std::string::size_type v46;
  int *v47;
  int *v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  unint64_t v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  float v57;
  int *v58;
  int v60;
  uint64_t v61;
  std::string::size_type size;
  uint64_t v63;
  signed int v64;
  uint64_t v65;
  uint64_t v66;
  std::string *p_p;
  std::string::size_type v68;
  std::string::size_type v69;
  int v70;
  std::string *v71;
  std::string *v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  int v77;
  char v78;
  BOOL v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  __int128 v87;
  unint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  std::string::size_type v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v103;
  uint64_t v104;
  unint64_t v105;
  std::string v108;
  unint64_t v109;
  std::string __p;
  std::string v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  std::vector<unsigned int> v116;
  __int128 v117;
  std::vector<unsigned int>::size_type __n[2];
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  std::string v134;
  char *v135;
  _QWORD *v136;

  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  if (a3 >= 1 && *(_BYTE *)(a2 + 48))
  {
    v9 = a4[1];
    v10 = *(int *)(a2 + 20);
    if (*a4 == v9 || 0xAAAAAAAAAAAAAAABLL * ((v9 - *a4) >> 3) == v10)
    {
      std::vector<std::vector<quasar::EuclidNeighbor>>::resize(a6, v10);
      if (!*(_BYTE *)(a2 + 48))
        std::__throw_bad_optional_access[abi:ne180100]();
      quasar::computeL2Dist(a1, a1 + 80, a2, (int32x2_t *)&v117);
      if (SHIDWORD(__n[0]) >= 1)
      {
        v11 = 0;
        v12 = *(float *)&a5;
        v101 = a5 & 0xFF00000000;
        v105 = a3;
        v100 = a3 + 1;
        do
        {
          memset(&v116, 0, sizeof(v116));
          v112 = &unk_1E5D29D70;
          v113 = *((_QWORD *)&v117 + 1) + 4 * LODWORD(__n[1]) * (int)v11;
          v115 = v119;
          v114 = LODWORD(__n[0]);
          v13 = v12;
          if (!v101)
            v13 = *(float *)(a1 + 280);
          if (v13 <= 0.0)
          {
            std::vector<int>::resize(&v116, SLODWORD(__n[0]));
            begin = v116.__begin_;
            if (v116.__end_ != v116.__begin_)
            {
              v27 = 0;
              v28 = v116.__end_ - v116.__begin_;
              if (v28 <= 1)
                v28 = 1;
              do
              {
                begin[v27] = v27;
                ++v27;
              }
              while (v28 != v27);
            }
          }
          else
          {
            std::vector<int>::reserve(&v116, SLODWORD(__n[0]));
            v15 = __n[0];
            if (LODWORD(__n[0]))
            {
              v16 = 0;
              do
              {
                if (*(float *)(v113 + 4 * (int)v16) <= v13)
                {
                  end = v116.__end_;
                  if (v116.__end_ >= v116.__end_cap_.__value_)
                  {
                    v14 = (uint64_t)v116.__begin_;
                    v19 = v116.__end_ - v116.__begin_;
                    v20 = v19 + 1;
                    if ((unint64_t)(v19 + 1) >> 62)
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    v21 = (char *)v116.__end_cap_.__value_ - (char *)v116.__begin_;
                    if (((char *)v116.__end_cap_.__value_ - (char *)v116.__begin_) >> 1 > v20)
                      v20 = v21 >> 1;
                    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
                      v22 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v22 = v20;
                    if (v22)
                    {
                      v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v116.__end_cap_, v22);
                      v14 = (uint64_t)v116.__begin_;
                      end = v116.__end_;
                    }
                    else
                    {
                      v23 = 0;
                    }
                    v24 = (unsigned int *)&v23[4 * v19];
                    *v24 = v16;
                    v18 = v24 + 1;
                    while (end != (std::vector<unsigned int>::pointer)v14)
                    {
                      v25 = *--end;
                      *--v24 = v25;
                    }
                    v116.__begin_ = v24;
                    v116.__end_ = v18;
                    v116.__end_cap_.__value_ = (unsigned int *)&v23[4 * v22];
                    if (v14)
                      operator delete((void *)v14);
                  }
                  else
                  {
                    *v116.__end_ = v16;
                    v18 = end + 1;
                  }
                  v116.__end_ = v18;
                  v15 = __n[0];
                }
                ++v16;
              }
              while (v16 < v15);
            }
          }
          v29 = *(_QWORD *)(a1 + 112);
          if (v29)
            kaldi::CuVectorBase<float>::AddVec((uint64_t)&v112, v29, 1.0, 1.0);
          memset(&v111, 0, sizeof(v111));
          v30 = v105;
          if (*a4 != a4[1])
          {
            v14 = *a4 + 24 * v11;
            if (*(char *)(v14 + 23) < 0)
            {
              v30 = v105;
              if (!*(_QWORD *)(v14 + 8))
                goto LABEL_46;
              v14 = *(_QWORD *)v14;
              v31 = *(_QWORD *)(*a4 + 24 * v11 + 8);
LABEL_45:
              quasar::utf8::convertToLowerCaseOrEmpty((char *)v14, v31, &v134);
              v111 = v134;
              v30 = v100;
              goto LABEL_46;
            }
            v30 = v105;
            v31 = *(unsigned __int8 *)(v14 + 23);
            if (*(_BYTE *)(v14 + 23))
              goto LABEL_45;
          }
LABEL_46:
          v33 = (int *)v116.__begin_;
          v32 = v116.__end_;
          if (v116.__end_ - v116.__begin_ >= v30)
            v34 = v30;
          else
            v34 = v116.__end_ - v116.__begin_;
          v35 = v34 << 32;
          v134.__r_.__value_.__r.__words[0] = (std::string::size_type)&v112;
          if (v34 << 32)
          {
            if (v35 >= 0x100000001)
            {
              v36 = ~((unint64_t)((int)v34 - 2) >> 1);
              v37 = (int *)&v116.__begin_[(unint64_t)((int)v34 - 2) >> 1];
              do
              {
                v14 = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::NearestNeighborSearch::findNearestNeighbors(std::optional<kaldi::CuMatrix<float>> &,int,std::vector<std::string> const&,std::optional<float>)::$_0 &,std::__wrap_iter<int *>>((uint64_t)v33, (uint64_t *)&v134, (int)v34, v37--);
                v38 = __CFADD__(v36++, 1);
              }
              while (!v38);
            }
            v39 = &v33[(int)v34];
            if (v39 != (int *)v32)
            {
              v40 = &v33[(int)v34];
              do
              {
                v41 = *v40;
                v42 = *v33;
                if (*(float *)(v113 + 4 * v41) < *(float *)(v113 + 4 * v42))
                {
                  *v40 = v42;
                  *v33 = v41;
                  v14 = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::NearestNeighborSearch::findNearestNeighbors(std::optional<kaldi::CuMatrix<float>> &,int,std::vector<std::string> const&,std::optional<float>)::$_0 &,std::__wrap_iter<int *>>((uint64_t)v33, (uint64_t *)&v134, (int)v34, v33);
                }
                ++v40;
              }
              while (v40 != (int *)v32);
            }
            if (v35 >= 0x100000001)
            {
              v43 = (unint64_t)(4 * (int)v34) >> 2;
              do
              {
                v44 = 0;
                v45 = *v33;
                v46 = v134.__r_.__value_.__r.__words[0];
                v47 = v33;
                do
                {
                  v48 = v47;
                  v47 += v44 + 1;
                  v49 = 2 * v44;
                  v44 = (2 * v44) | 1;
                  v50 = v49 + 2;
                  if (v50 < v43)
                  {
                    v14 = v47[1];
                    if (*(float *)(*(_QWORD *)(v46 + 8) + 4 * *v47) < *(float *)(*(_QWORD *)(v46 + 8) + 4 * v14))
                    {
                      ++v47;
                      v44 = v50;
                    }
                  }
                  *v48 = *v47;
                }
                while (v44 <= (uint64_t)((unint64_t)(v43 - 2) >> 1));
                if (v47 == --v39)
                {
                  *v47 = v45;
                }
                else
                {
                  *v47 = *v39;
                  *v39 = v45;
                  v51 = (char *)v47 - (char *)v33 + 4;
                  if (v51 >= 5)
                  {
                    v52 = (((unint64_t)v51 >> 2) - 2) >> 1;
                    v53 = &v33[v52];
                    v54 = *v53;
                    v55 = *v47;
                    v56 = *(_QWORD *)(v46 + 8);
                    v57 = *(float *)(v56 + 4 * v55);
                    if (*(float *)(v56 + 4 * v54) < v57)
                    {
                      do
                      {
                        v58 = v53;
                        *v47 = v54;
                        if (!v52)
                          break;
                        v52 = (v52 - 1) >> 1;
                        v53 = &v33[v52];
                        v54 = *v53;
                        v47 = v58;
                      }
                      while (*(float *)(v56 + 4 * v54) < v57);
                      *v58 = v55;
                    }
                  }
                }
              }
              while (v43-- > 2);
            }
          }
          v60 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
          if ((int)v34 >= 1)
          {
            v61 = 0;
            v103 = *(_OWORD *)&v111.__r_.__value_.__l.__data_;
            if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v111.__r_.__value_.__r.__words[2]);
            else
              size = v111.__r_.__value_.__l.__size_;
            v63 = v34;
            v104 = HIBYTE(v111.__r_.__value_.__r.__words[2]) - 1;
            do
            {
              if (v105 <= (uint64_t)(*(_QWORD *)(*a6 + 24 * v11 + 8) - *(_QWORD *)(*a6 + 24 * v11)) >> 5)
                break;
              v64 = v116.__begin_[v61];
              memset(&__p, 0, sizeof(__p));
              v65 = quasar::QsrText::SingletonInstance((quasar::QsrText *)v14);
              v66 = v64;
              (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 48) + 88))(&v134, *(_QWORD *)(a1 + 48), v64);
              quasar::QsrText::decodeQsrText(v65, (uint64_t)&v134, (uint64_t)&__p);
              if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v134.__r_.__value_.__l.__data_);
                if (!size)
                  goto LABEL_110;
              }
              else if (!size)
              {
                goto LABEL_110;
              }
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_p = &__p;
              else
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v68 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              else
                v68 = __p.__r_.__value_.__l.__size_;
              quasar::utf8::convertToLowerCaseOrEmpty((char *)p_p, v68, &v134);
              v69 = HIBYTE(v134.__r_.__value_.__r.__words[2]);
              v70 = SHIBYTE(v134.__r_.__value_.__r.__words[2]);
              if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v69 = v134.__r_.__value_.__l.__size_;
              if (size == v69)
              {
                if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v71 = &v134;
                else
                  v71 = (std::string *)v134.__r_.__value_.__r.__words[0];
                if ((v60 & 0x80) != 0)
                {
                  v14 = memcmp((const void *)v103, v71, *((size_t *)&v103 + 1));
                  v79 = (_DWORD)v14 == 0;
                  if ((v70 & 0x80000000) == 0)
                    goto LABEL_106;
                }
                else if (v60)
                {
                  v72 = &v111;
                  v73 = v104;
                  do
                  {
                    v75 = v72->__r_.__value_.__s.__data_[0];
                    v72 = (std::string *)((char *)v72 + 1);
                    v74 = v75;
                    v77 = v71->__r_.__value_.__s.__data_[0];
                    v71 = (std::string *)((char *)v71 + 1);
                    v76 = v77;
                    v38 = v73-- != 0;
                    v78 = v38;
                    v79 = v74 == v76;
                  }
                  while (v74 == v76 && (v78 & 1) != 0);
                  if ((SHIBYTE(v134.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_106:
                    if (!v79)
                      goto LABEL_110;
                    goto LABEL_126;
                  }
                }
                else
                {
                  v79 = 1;
                  if ((SHIBYTE(v134.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_106;
                }
              }
              else
              {
                v79 = 0;
                if ((SHIBYTE(v134.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_106;
              }
              operator delete(v134.__r_.__value_.__l.__data_);
              if (!v79)
              {
LABEL_110:
                v80 = *a6;
                v81 = *(_DWORD *)(*((_QWORD *)&v117 + 1) + 4 * LODWORD(__n[1]) * (int)v11 + 4 * v64);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  std::string::__init_copy_ctor_external(&v108, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
                else
                  v108 = __p;
                v109 = __PAIR64__(v81, v64);
                v82 = v80 + 24 * v11;
                v85 = *(_QWORD *)(v82 + 8);
                v84 = (uint64_t *)(v82 + 8);
                v83 = v85;
                v14 = (uint64_t)(v84 + 1);
                v86 = v84[1];
                if (v85 >= v86)
                {
                  v89 = (uint64_t *)(v80 + 24 * v11);
                  v90 = (uint64_t)(v83 - *v89) >> 5;
                  v91 = v90 + 1;
                  if ((unint64_t)(v90 + 1) >> 59)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v92 = v86 - *v89;
                  if (v92 >> 4 > v91)
                    v91 = v92 >> 4;
                  if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFE0)
                    v93 = 0x7FFFFFFFFFFFFFFLL;
                  else
                    v93 = v91;
                  v136 = v84 + 1;
                  v94 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v14, v93);
                  v95 = (std::string::size_type)&v94[32 * v90];
                  v134.__r_.__value_.__r.__words[0] = (std::string::size_type)v94;
                  v134.__r_.__value_.__l.__size_ = v95;
                  v135 = &v94[32 * v96];
                  v97 = *(_OWORD *)&v108.__r_.__value_.__l.__data_;
                  *(_QWORD *)(v95 + 16) = *((_QWORD *)&v108.__r_.__value_.__l + 2);
                  *(_OWORD *)v95 = v97;
                  memset(&v108, 0, sizeof(v108));
                  *(_QWORD *)(v95 + 24) = v109;
                  v134.__r_.__value_.__r.__words[2] = v95 + 32;
                  std::vector<quasar::EuclidNeighbor>::__swap_out_circular_buffer(v89, &v134);
                  v88 = *v84;
                  v14 = std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)&v134);
                }
                else
                {
                  v87 = *(_OWORD *)&v108.__r_.__value_.__l.__data_;
                  *(_QWORD *)(v83 + 16) = *((_QWORD *)&v108.__r_.__value_.__l + 2);
                  *(_OWORD *)v83 = v87;
                  memset(&v108, 0, sizeof(v108));
                  *(_QWORD *)(v83 + 24) = v109;
                  v88 = v83 + 32;
                  *v84 = v83 + 32;
                }
                *v84 = v88;
                if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v108.__r_.__value_.__l.__data_);
                v98 = *(_QWORD *)(a1 + 112);
                if (v98)
                {
                  v99 = *(_QWORD *)(*a6 + 24 * v11 + 8);
                  *(float *)(v99 - 4) = *(float *)(v99 - 4) - *(float *)(*(_QWORD *)(v98 + 8) + 4 * v66);
                }
              }
LABEL_126:
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              ++v61;
            }
            while (v61 != v63);
          }
          if ((v60 & 0x80) != 0)
            operator delete(v111.__r_.__value_.__l.__data_);
          if (v116.__begin_)
          {
            v116.__end_ = v116.__begin_;
            operator delete(v116.__begin_);
          }
          ++v11;
        }
        while (v11 < SHIDWORD(__n[0]));
      }
      kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v117);
    }
    else if (quasar::gLogLevel >= 1)
    {
      v132 = 0u;
      v133 = 0u;
      v130 = 0u;
      v131 = 0u;
      v128 = 0u;
      v129 = 0u;
      v126 = 0u;
      v127 = 0u;
      v124 = 0u;
      v125 = 0u;
      v122 = 0u;
      v123 = 0u;
      v120 = 0u;
      v121 = 0u;
      *(_OWORD *)__n = 0u;
      v119 = 0u;
      v117 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v117);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v117, (uint64_t)"queryMatrix and excludeQueryStrings size mismatched", 51);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v117);
    }
  }
}

void sub_1AD9C7840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a45);
  a45 = a20;
  std::vector<std::vector<quasar::EuclidNeighbor>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a45);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<quasar::EuclidNeighbor>>::resize(uint64_t *a1, unint64_t a2)
{
  void **v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;

  v3 = (void **)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<quasar::EuclidNeighbor>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      v8 = v3;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

uint64_t quasar::computeL2Dist@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int32x2_t *a4@<X8>)
{
  _QWORD v9[4];
  _BYTE v10[20];
  unsigned int v11;

  kaldi::CuMatrix<float>::CuMatrix(a4, *(unsigned int *)(a3 + 20), *(unsigned int *)(a1 + 20), 0, 0, 0);
  kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)a4, a2);
  kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)a4, a3, CblasNoTrans, a1, CblasTrans, -2.0, 1.0);
  kaldi::CuMatrix<float>::CuMatrix(v10, a3, 111);
  kaldi::CuMatrixBase<float>::MulElements((uint64_t)v10, (uint64_t)v10);
  v9[0] = &unk_1E5D341C8;
  memset(&v9[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v9, v11, 0);
  kaldi::CuVectorBase<float>::AddColSumMat((uint64_t)v9, (uint64_t)v10, 1.0, 0.0);
  kaldi::CuMatrixBase<float>::AddVecToCols((uint64_t)a4, (uint64_t)v9, 1.0, 1.0);
  kaldi::CuMatrixBase<float>::ApplyPowAbs((uint64_t)a4, 0, 0.5);
  v9[0] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)v9);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v10);
}

void sub_1AD9C7ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix(v5);
  _Unwind_Resume(a1);
}

void quasar::NearestNeighborSearch::findNearestNeighbors(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v12[3];
  int32x2_t v13[6];
  char v14;
  void **v15;

  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  if (a3 >= 1 && *(_BYTE *)(a2 + 32))
  {
    kaldi::CuMatrix<float>::CuMatrix(v13, 1, *(unsigned int *)(a2 + 16), 0, 0, 0);
    v14 = 1;
    if (!*(_BYTE *)(a2 + 32))
      std::__throw_bad_optional_access[abi:ne180100]();
    kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)v13, a2);
    quasar::NearestNeighborSearch::findNearestNeighbors(a1, (uint64_t)v13, a3, a4, a5, v12);
    if ((_QWORD *)v12[0] != a6 && v12[0] != v12[1])
      std::vector<quasar::EuclidNeighbor>::__assign_with_size[abi:ne180100]<quasar::EuclidNeighbor*,quasar::EuclidNeighbor*>((uint64_t)a6, *(std::string **)v12[0], *(__int128 **)(v12[0] + 8), (uint64_t)(*(_QWORD *)(v12[0] + 8) - *(_QWORD *)v12[0]) >> 5);
    v15 = (void **)v12;
    std::vector<std::vector<quasar::EuclidNeighbor>>::__destroy_vector::operator()[abi:ne180100](&v15);
    if (v14)
      kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v13);
  }
}

void sub_1AD9C7C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  *(_QWORD *)(v19 - 72) = &a10;
  std::vector<std::vector<quasar::EuclidNeighbor>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 72));
  if (a19)
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a13);
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void quasar::NearestNeighborSearch::lookupEmbedding(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _BYTE *a4@<X8>)
{
  uint64_t v5;
  int v6;
  int v8;
  uint64_t v9;
  void *v10;
  int v11;
  uint64_t v12;
  void *__p[2];
  int v14;
  int v15;
  uint64_t v16;
  std::string v17;
  uint64_t v18;
  void *v19[2];
  char v20;

  v5 = *(unsigned __int8 *)(a2 + 23);
  v6 = (char)v5;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 8);
  if (!v5)
    goto LABEL_19;
  if (a3 == 1)
  {
    if (!*(_QWORD *)(a1 + 64))
      goto LABEL_19;
    if (v6 < 0)
      std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v17 = *(std::string *)a2;
    std::string::basic_string[abi:ne180100]<0>(__p, " ");
    std::string::basic_string[abi:ne180100]<0>(v19, ".");
    quasar::replaceAll((uint64_t)&v17, (uint64_t)__p, (char *)v19);
    if (v20 < 0)
      operator delete(v19[0]);
    if (SHIBYTE(v15) < 0)
      operator delete(__p[0]);
    v8 = (*(uint64_t (**)(_QWORD, std::string *))(**(_QWORD **)(a1 + 64) + 96))(*(_QWORD *)(a1 + 64), &v17);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
  }
  else
  {
    if (a3)
      goto LABEL_19;
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 96))(*(_QWORD *)(a1 + 48));
  }
  if (v8 != -1)
  {
    v9 = *(unsigned int *)(a1 + 16);
    v18 = 0;
    v17.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D341C8;
    *(_OWORD *)&v17.__r_.__value_.__r.__words[1] = 0uLL;
    kaldi::CuVector<float>::Resize((uint64_t)&v17, v9, 0);
    v10 = (void *)(*(_QWORD *)(a1 + 8) + 4 * *(_DWORD *)(a1 + 24) * v8);
    v11 = *(_DWORD *)(a1 + 16);
    v12 = *(_QWORD *)(a1 + 32);
    __p[0] = &unk_1E5D29D70;
    __p[1] = v10;
    v15 = 0;
    v16 = v12;
    v14 = v11;
    kaldi::CuVector<float>::operator=((uint64_t)&v17, (uint64_t)__p);
    std::__optional_destruct_base<kaldi::CuVector<float>,false>::__optional_destruct_base[abi:ne180100]<kaldi::CuVector<float>>((uint64_t)a4, (uint64_t)&v17);
    v17.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D341C8;
    kaldi::CuVector<float>::Destroy((uint64_t)&v17);
    return;
  }
LABEL_19:
  *a4 = 0;
  a4[32] = 0;
}

void sub_1AD9C7DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::computeL2Dist@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int32x2_t *a3@<X8>)
{
  _QWORD v7[4];
  _BYTE v8[20];
  unsigned int v9;

  kaldi::CuMatrix<float>::CuMatrix(v8, a1, 111);
  kaldi::CuMatrixBase<float>::MulElements((uint64_t)v8, (uint64_t)v8);
  v7[0] = &unk_1E5D341C8;
  memset(&v7[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v7, v9, 0);
  kaldi::CuVectorBase<float>::AddColSumMat((uint64_t)v7, (uint64_t)v8, 1.0, 0.0);
  quasar::computeL2Dist(a1, (uint64_t)v7, a2, a3);
  v7[0] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)v7);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v8);
}

void sub_1AD9C7F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

float quasar::computeL2Dist(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float v3;
  int32x2_t *v6;
  int32x2_t v8[2];
  int v9;
  int v10;
  int32x2_t v11[6];
  int32x2_t v12[6];

  v2 = *(unsigned int *)(a1 + 16);
  v3 = -1.0;
  if ((_DWORD)v2 == *(_DWORD *)(a2 + 16))
  {
    v6 = kaldi::CuMatrix<float>::CuMatrix(v12, 1, v2, 0, 0, 0);
    kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)v6, a1);
    kaldi::CuMatrix<float>::CuMatrix(v11, 1, *(unsigned int *)(a2 + 16), 0, 0, 0);
    kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)v11, a2);
    quasar::computeL2Dist((uint64_t)v12, (uint64_t)v11, v8);
    if (v10 >= 1 && v9 >= 1)
      v3 = *(float *)v8[1].i32[0];
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v8);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v11);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v12);
  }
  return v3;
}

void sub_1AD9C8018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix(v7 - 80);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<kaldi::CuVector<float>,false>::__optional_destruct_base[abi:ne180100]<kaldi::CuVector<float>>(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &unk_1E5D341C8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  kaldi::CuVector<float>::Resize(a1, *(unsigned int *)(a2 + 16), 1);
  kaldi::CuVectorBase<float>::CopyFromVec((_QWORD *)a1, a2);
  *(_BYTE *)(a1 + 32) = 1;
  return a1;
}

void std::__shared_ptr_emplace<kaldi::CuVector<float>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42330;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::CuVector<float>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42330;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::CuVector<float>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void std::vector<std::vector<quasar::EuclidNeighbor>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<quasar::EuclidNeighbor>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<quasar::EuclidNeighbor>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<quasar::EuclidNeighbor>>::~__split_buffer(&v15);
  }
}

void sub_1AD9C82C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::EuclidNeighbor>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<quasar::EuclidNeighbor>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::EuclidNeighbor>>,std::reverse_iterator<std::vector<quasar::EuclidNeighbor>*>,std::reverse_iterator<std::vector<quasar::EuclidNeighbor>*>,std::reverse_iterator<std::vector<quasar::EuclidNeighbor>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::EuclidNeighbor>>,std::reverse_iterator<std::vector<quasar::EuclidNeighbor>*>,std::reverse_iterator<std::vector<quasar::EuclidNeighbor>*>,std::reverse_iterator<std::vector<quasar::EuclidNeighbor>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::EuclidNeighbor>>,std::reverse_iterator<std::vector<quasar::EuclidNeighbor>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::EuclidNeighbor>>,std::reverse_iterator<std::vector<quasar::EuclidNeighbor>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::EuclidNeighbor>>,std::reverse_iterator<std::vector<quasar::EuclidNeighbor>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::EuclidNeighbor>>,std::reverse_iterator<std::vector<quasar::EuclidNeighbor>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<quasar::EuclidNeighbor>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<quasar::EuclidNeighbor>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<quasar::EuclidNeighbor>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::NearestNeighborSearch::findNearestNeighbors(std::optional<kaldi::CuMatrix<float>> &,int,std::vector<std::string> const&,std::optional<float>)::$_0 &,std::__wrap_iter<int *>>(uint64_t result, uint64_t *a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 2)
    {
      v6 = v4 >> 1;
      v7 = (v4 >> 1) | 1;
      v8 = (int *)(result + 4 * v7);
      v9 = v6 + 2;
      v10 = *a2;
      if (v9 >= a3)
      {
        v11 = *(_QWORD *)(v10 + 8);
      }
      else
      {
        v11 = *(_QWORD *)(v10 + 8);
        if (*(float *)(v11 + 4 * *v8) < *(float *)(v11 + 4 * v8[1]))
        {
          ++v8;
          v7 = v9;
        }
      }
      v12 = *v8;
      v13 = *a4;
      v14 = *(float *)(v11 + 4 * v13);
      if (*(float *)(v11 + 4 * v12) >= v14)
      {
        do
        {
          *a4 = v12;
          a4 = v8;
          if (v5 < v7)
            break;
          v15 = 2 * v7;
          v7 = (2 * v7) | 1;
          v8 = (int *)(result + 4 * v7);
          v16 = v15 + 2;
          if (v16 < a3 && *(float *)(v11 + 4 * *v8) < *(float *)(v11 + 4 * v8[1]))
          {
            ++v8;
            v7 = v16;
          }
          v12 = *v8;
        }
        while (*(float *)(v11 + 4 * v12) >= v14);
        *a4 = v13;
      }
    }
  }
  return result;
}

uint64_t std::vector<quasar::EuclidNeighbor>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::EuclidNeighbor>,std::reverse_iterator<quasar::EuclidNeighbor*>,std::reverse_iterator<quasar::EuclidNeighbor*>,std::reverse_iterator<quasar::EuclidNeighbor*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::EuclidNeighbor>,std::reverse_iterator<quasar::EuclidNeighbor*>,std::reverse_iterator<quasar::EuclidNeighbor*>,std::reverse_iterator<quasar::EuclidNeighbor*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::EuclidNeighbor>,std::reverse_iterator<quasar::EuclidNeighbor*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::EuclidNeighbor>,std::reverse_iterator<quasar::EuclidNeighbor*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,std::reverse_iterator<quasar::TextTokenizer::Token*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::vector<quasar::EuclidNeighbor>::__assign_with_size[abi:ne180100]<quasar::EuclidNeighbor*,quasar::EuclidNeighbor*>(uint64_t a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  std::string *v13;
  unint64_t v14;
  std::string *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5)
  {
    std::vector<std::pair<std::string,float>>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v11 = v10 >> 4;
    if (v10 >> 4 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100]((_QWORD *)a1, v12);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::EuclidNeighbor>,quasar::EuclidNeighbor*,quasar::EuclidNeighbor*,quasar::EuclidNeighbor*>(v8, (__int128 *)__str, a3, *(std::string **)(a1 + 8));
    goto LABEL_11;
  }
  v14 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 5;
  if (v14 < a4)
  {
    v15 = (std::string *)((char *)__str + 32 * v14);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::EuclidNeighbor *,quasar::EuclidNeighbor *,quasar::EuclidNeighbor *,0>(__str, v15, v9);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::EuclidNeighbor>,quasar::EuclidNeighbor*,quasar::EuclidNeighbor*,quasar::EuclidNeighbor*>(v8, (__int128 *)v15, a3, *(std::string **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v13;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::EuclidNeighbor *,quasar::EuclidNeighbor *,quasar::EuclidNeighbor *,0>(__str, (std::string *)a3, v9);
  v17 = v16;
  v18 = *(_QWORD *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      if (*(char *)(v18 - 9) < 0)
        operator delete(*(void **)(v18 - 32));
      v18 -= 32;
    }
    while (v18 != v17);
  }
  *(_QWORD *)(a1 + 8) = v17;
}

void sub_1AD9C8854(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1AD9C885C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::EuclidNeighbor>,quasar::EuclidNeighbor*,quasar::EuclidNeighbor*,quasar::EuclidNeighbor*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  std::string *v8;
  _QWORD v10[3];
  char v11;
  std::string *v12;
  std::string *v13;

  v4 = this;
  v12 = this;
  v13 = this;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  v11 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v8 = v13;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        v8 = v4;
      }
      v4[1].__r_.__value_.__r.__words[0] = *((_QWORD *)v6 + 3);
      v6 += 2;
      v4 = (std::string *)((char *)v8 + 32);
      v13 = (std::string *)((char *)v8 + 32);
    }
    while (v6 != a3);
  }
  v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::EuclidNeighbor>,quasar::EuclidNeighbor*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_1AD9C8918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::EuclidNeighbor>,quasar::EuclidNeighbor*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::EuclidNeighbor>,quasar::EuclidNeighbor*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,quasar::TextTokenizer::Token*>::operator()[abi:ne180100](a1);
  return a1;
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::EuclidNeighbor *,quasar::EuclidNeighbor *,quasar::EuclidNeighbor *,0>(std::string *__str, std::string *a2, std::string *this)
{
  std::string *v4;
  std::string *v5;

  v4 = __str;
  if (__str == a2)
    return __str;
  v5 = a2;
  do
  {
    std::string::operator=(this, v4);
    this[1].__r_.__value_.__r.__words[0] = v4[1].__r_.__value_.__r.__words[0];
    this = (std::string *)((char *)this + 32);
    v4 = (std::string *)((char *)v4 + 32);
  }
  while (v4 != v5);
  return v5;
}

_QWORD *std::operator<<[abi:ne180100]<std::char_traits<char>>(_QWORD *a1, char *a2)
{
  char *v3;
  int v4;
  const std::locale::facet *v5;
  int v6;
  std::locale v8;

  v3 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v5 = std::locale::use_facet(&v8, MEMORY[0x1E0DE4A90]);
    v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v8);
    *((_DWORD *)v3 + 36) = v6;
  }
  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_1AD9C8A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearTransform(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23[35];

  *(_QWORD *)a1 = off_1E5D32508;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = off_1E5D2E4A0;
  *(_QWORD *)(a1 + 48) = &off_1E5D2D150;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 88) = &unk_1E5D2CA40;
  *(_QWORD *)(a1 + 96) = &unk_1E5D2CA68;
  *(_QWORD *)a1 = &unk_1E5D2C908;
  *(_QWORD *)(a1 + 104) = 0;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 112), (uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 3);
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 136), *(_QWORD *)(a2 + 136), *(_QWORD *)(a2 + 144), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 144) - *(_QWORD *)(a2 + 136)) >> 4));
  v6 = *(_DWORD *)(a2 + 160);
  v7 = *(_QWORD *)(a2 + 164);
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 160) = v6;
  *(_QWORD *)(a1 + 164) = v7;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 176), *(const void **)(a2 + 176), *(_QWORD *)(a2 + 184), (uint64_t)(*(_QWORD *)(a2 + 184) - *(_QWORD *)(a2 + 176)) >> 2);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 200), *(const void **)(a2 + 200), *(_QWORD *)(a2 + 208), (uint64_t)(*(_QWORD *)(a2 + 208) - *(_QWORD *)(a2 + 200)) >> 2);
  v8 = *(_BYTE *)(a2 + 224);
  *(_OWORD *)(a1 + 232) = 0u;
  *(_BYTE *)(a1 + 224) = v8;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  if (*(_BYTE *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
  }
  v9 = *(_QWORD *)(a2 + 104);
  if (v9)
  {
    kaldi::NewCuSubOrMat<float>(v9, 0, v23);
    v10 = v23[0];
    v23[0] = 0;
    v11 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 104) = v10;
    if (v11)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
      v12 = v23[0];
      v23[0] = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
    }
  }
  v14 = *(_QWORD *)(a1 + 112);
  v13 = *(_QWORD *)(a1 + 120);
  if (v13 != v14)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(_QWORD *)(a2 + 112);
      if (*(_QWORD *)(v17 + 8 * v16))
      {
        kaldi::NewCuSubOrMat<float>(*(_QWORD *)(v17 + (v15 >> 29)), *(unsigned __int8 *)(a1 + 16), v23);
        v18 = *(_QWORD *)(a1 + 112);
        v19 = v23[0];
        v23[0] = 0;
        v20 = *(_QWORD *)(v18 + 8 * v16);
        *(_QWORD *)(v18 + 8 * v16) = v19;
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
        v21 = v23[0];
        v23[0] = 0;
        if (v21)
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
        v14 = *(_QWORD *)(a1 + 112);
        v13 = *(_QWORD *)(a1 + 120);
      }
      ++v16;
      v15 += 0x100000000;
    }
    while (v16 < (v13 - v14) >> 3);
  }
  if (*(_QWORD *)(a2 + 240) != *(_QWORD *)(a2 + 232))
  {
    kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
    kaldi::nnet1::QuantizerResidualAggregator::PushSetup((uint64_t *)(a1 + 232), *(_QWORD *)(*(_QWORD *)(a1 + 112)+ 8 * ((((*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) << 29) - 0x100000000) >> 32)));
  }
  return a1;
}

void sub_1AD9C8D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, quasar::Bitmap *a10, quasar::Bitmap *a11, uint64_t a12)
{
  kaldi::nnet1::UpdatableComponent *v12;
  void **v13;
  void **v14;
  void **v15;
  void *v17;
  void *v18;
  uint64_t v19;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v15);
  v17 = *v14;
  if (*v14)
  {
    *((_QWORD *)v12 + 26) = v17;
    operator delete(v17);
  }
  v18 = *v13;
  if (*v13)
  {
    *((_QWORD *)v12 + 23) = v18;
    operator delete(v18);
  }
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  v19 = *((_QWORD *)v12 + 13);
  *((_QWORD *)v12 + 13) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
  quasar::Bitmap::~Bitmap(a10);
  quasar::Bitmap::~Bitmap(a11);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v12);
  _Unwind_Resume(a1);
}

uint64_t kaldi::NewCuSubOrMat<float>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a2)
  {
    result = operator new();
    v6 = result;
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 32);
    *(_OWORD *)(result + 16) = *(_OWORD *)(a1 + 16);
    *(_QWORD *)(result + 32) = v8;
    *(_QWORD *)result = &unk_1E5D29D40;
    *(_QWORD *)(result + 8) = v7;
  }
  else
  {
    v6 = operator new();
    result = kaldi::CuMatrix<float>::CuMatrix(v6, a1, 111);
  }
  *a3 = v6;
  return result;
}

void sub_1AD9C8E94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C40CC61A6CELL);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::~LinearTransform(uint64_t a1)
{
  quasar::Bitmap *v2;
  quasar::Bitmap *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void **v7;

  *(_QWORD *)(a1 + 88) = &unk_1E5D2CA40;
  v2 = (quasar::Bitmap *)(a1 + 88);
  *(_QWORD *)a1 = &unk_1E5D2C908;
  *(_QWORD *)(a1 + 96) = &unk_1E5D2CA68;
  v3 = (quasar::Bitmap *)(a1 + 96);
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 232));
  v4 = *(void **)(a1 + 200);
  if (v4)
  {
    *(_QWORD *)(a1 + 208) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 176);
  if (v5)
  {
    *(_QWORD *)(a1 + 184) = v5;
    operator delete(v5);
  }
  v7 = (void **)(a1 + 136);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = (void **)(a1 + 112);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v6 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  quasar::Bitmap::~Bitmap(v3);
  quasar::Bitmap::~Bitmap(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::~LinearTransform(a1);
  JUMPOUT(0x1AF44D190);
}

void `non-virtual thunk to'kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::~LinearTransform(uint64_t a1)
{
  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::~LinearTransform(a1 - 88);
}

{
  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::~LinearTransform(a1 - 96);
}

{
  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::~LinearTransform(a1 - 88);
  JUMPOUT(0x1AF44D190);
}

{
  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::~LinearTransform(a1 - 96);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::CopyQuantized8Bit(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::LinearTransform<kaldi::CuMatrixBase<float>>(v2, a1);
  return v2;
}

void sub_1AD9C9050(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C40045C2EC8);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::CopyQuantized8Bit(uint64_t a1)
{
  return kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::CopyQuantized8Bit(a1 - 88);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::CopyQuantized16Bit(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::LinearTransform<kaldi::CuMatrixBase<float>>(v2, a1);
  return v2;
}

void sub_1AD9C90C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C40045C2EC8);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::CopyQuantized16Bit(uint64_t a1)
{
  return kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::CopyQuantized16Bit(a1 - 96);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearTransform(v2, a1);
  return v2;
}

void sub_1AD9C9130(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C40045C2EC8);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  void *v7;
  BOOL v9;
  float *v10;
  BOOL v14;
  BOOL v16;
  std::string *v21;
  BOOL v22;
  BOOL v24;
  _QWORD *v25;
  void **v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  int inited;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float v37;
  float v38;
  float v39;
  int v40;
  int v41;
  void **v42;
  int v43[4];
  int v44;
  _BYTE v45[16];
  uint64_t v46;
  void *__p;
  void *v48;
  void **v49[34];
  void *v50[3];
  int v51;
  std::string v52;
  std::string v53;
  int v54;

  v54 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v53);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 160), &v52);
  v51 = -1;
  memset(v50, 0, sizeof(v50));
  v42 = v50;
  while (1)
  {
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) != 0)
      goto LABEL_106;
    kaldi::ReadToken(a2, 0, (uint64_t)v50);
    if ((SHIBYTE(v50[2]) & 0x80000000) == 0)
    {
      switch(HIBYTE(v50[2]))
      {
        case 9:
          goto LABEL_81;
        case 0xC:
          goto LABEL_76;
        case 0xD:
          if (v50[0] != (void *)0x74536D617261503CLL || *(void **)((char *)v50 + 5) != (void *)0x3E7665646474536DLL)
            goto LABEL_92;
          goto LABEL_51;
        case 0xF:
          v22 = v50[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v50 + 7) == (void *)0x3E66656F43657461;
          v10 = (float *)(a1 + 168);
          if (v22)
            goto LABEL_86;
          if (HIBYTE(v50[2]) == 9)
            goto LABEL_81;
          if (HIBYTE(v50[2]) != 12)
            goto LABEL_92;
LABEL_76:
          if (v50[0] != (void *)0x536D6F646E61523CLL || LODWORD(v50[1]) != 1046766949)
            goto LABEL_80;
          goto LABEL_88;
        case 0x12:
          goto LABEL_61;
        case 0x13:
          if (v50[0] == (void *)0x61725474696E493CLL
            && v50[1] == (void *)0x79546D726F66736ELL
            && *(void **)((char *)&v50[1] + 3) == (void *)0x3E657079546D726FLL)
          {
            goto LABEL_89;
          }
          if (HIBYTE(v50[2]) == 9)
            goto LABEL_81;
          if (HIBYTE(v50[2]) != 18)
            goto LABEL_91;
LABEL_61:
          if (v50[0] == (void *)0x6E6569646172473CLL
            && v50[1] == (void *)0x7079546D726F4E74
            && LOWORD(v50[2]) == 15973)
          {
            goto LABEL_69;
          }
LABEL_80:
          if (HIBYTE(v50[2]) != 9)
          {
LABEL_91:
            if (HIBYTE(v50[2]) == 12)
              goto LABEL_101;
            goto LABEL_92;
          }
LABEL_81:
          v24 = v50[0] == (void *)0x6461724778614D3CLL && LOBYTE(v50[1]) == 62;
          v10 = (float *)(a1 + 164);
          if (!v24)
            goto LABEL_92;
          break;
        default:
          goto LABEL_92;
      }
      goto LABEL_86;
    }
    v7 = v50[1];
    if (v50[1] == (void *)13
      && *(_QWORD *)v50[0] == 0x74536D617261503CLL
      && *(_QWORD *)((char *)v50[0] + 5) == 0x3E7665646474536DLL)
    {
LABEL_51:
      v10 = (float *)&v54;
      goto LABEL_86;
    }
    if (v50[1] == (void *)15)
    {
      v9 = *(_QWORD *)v50[0] == 0x61526E7261654C3CLL && *(_QWORD *)((char *)v50[0] + 7) == 0x3E66656F43657461;
      v10 = (float *)(a1 + 168);
      if (v9)
        goto LABEL_86;
      v7 = v50[1];
    }
    if (v7 == (void *)12)
    {
      if (*(_QWORD *)v50[0] == 0x536D6F646E61523CLL && *((_DWORD *)v50[0] + 2) == 1046766949)
      {
LABEL_88:
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v51);
        goto LABEL_87;
      }
      v7 = v50[1];
    }
    if (v7 == (void *)19)
    {
      if (*(_QWORD *)v50[0] == 0x61725474696E493CLL
        && *((_QWORD *)v50[0] + 1) == 0x79546D726F66736ELL
        && *(_QWORD *)((char *)v50[0] + 11) == 0x3E657079546D726FLL)
      {
LABEL_89:
        v21 = &v53;
        goto LABEL_90;
      }
      v7 = v50[1];
    }
    if (v7 != (void *)18)
      goto LABEL_45;
    v14 = *(_QWORD *)v50[0] == 0x6E6569646172473CLL && *((_QWORD *)v50[0] + 1) == 0x7079546D726F4E74;
    if (!v14 || *((_WORD *)v50[0] + 8) != 15973)
      break;
LABEL_69:
    v21 = &v52;
LABEL_90:
    kaldi::ReadToken(a2, 0, (uint64_t)v21);
LABEL_87:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v7 = v50[1];
LABEL_45:
  if (v7 != (void *)9)
    goto LABEL_99;
  v16 = *(_QWORD *)v50[0] == 0x6461724778614D3CLL && *((_BYTE *)v50[0] + 8) == 62;
  v10 = (float *)(a1 + 164);
  if (v16)
  {
LABEL_86:
    kaldi::ReadBasicType<float>(a2, 0, v10);
    goto LABEL_87;
  }
  v7 = v50[1];
LABEL_99:
  if (v7 != (void *)12)
    goto LABEL_92;
  v42 = (void **)v50[0];
LABEL_101:
  if (*v42 != (void *)0x6E6F706D6F432F3CLL || *((_DWORD *)v42 + 2) != 1047817829)
  {
LABEL_92:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Unknown token ", 14);
    if (SHIBYTE(v50[2]) >= 0)
      v26 = v50;
    else
      v26 = (void **)v50[0];
    if (SHIBYTE(v50[2]) >= 0)
      v27 = HIBYTE(v50[2]);
    else
      v27 = (uint64_t)v50[1];
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" (ParamStddev|LearnRateCoef|InitTransformType|RandomSeed|GradientNormType|MaxGrad)", 82);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v49);
  }
LABEL_106:
  inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v53);
  *(_DWORD *)(a1 + 160) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v52);
  if (v51 >= 1)
    kaldi::UniformRandomNumber::SetRandomSeeds(a3, v51);
  kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v45, a3);
  kaldi::Matrix<float>::Matrix((uint64_t)v43, *(unsigned int *)(a1 + 12), *(unsigned int *)(a1 + 8), 0, 0);
  v32 = *(_DWORD *)(a1 + 12);
  if (v32 < 1)
    goto LABEL_124;
  v33 = 0;
  LODWORD(v34) = *(_DWORD *)(a1 + 8);
  while (2)
  {
    if ((int)v34 < 1)
      goto LABEL_123;
    v35 = 0;
    while (2)
    {
      switch(inited)
      {
        case 0:
          if (v33 == v35)
            v37 = 1.0;
          else
            v37 = 0.0;
          goto LABEL_120;
        case 2:
          v38 = *(float *)&v54;
          kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v45, 0);
          v37 = v38 * v39;
LABEL_120:
          *(float *)(*(_QWORD *)v43 + 4 * (int)v33 * v44 + 4 * v35) = v37;
          break;
        case 1:
          v36 = *(float *)&v54;
          v37 = (kaldi::UniformRandomNumber::RandUniform(a3, 0) + -0.5) * (float)(v36 + v36);
          goto LABEL_120;
      }
      ++v35;
      v34 = *(int *)(a1 + 8);
      if (v35 < v34)
        continue;
      break;
    }
    v32 = *(_DWORD *)(a1 + 12);
LABEL_123:
    if (++v33 < v32)
      continue;
    break;
  }
LABEL_124:
  v40 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 20);
  if (v40 != kaldi::MatrixBase<float>::NumRows((uint64_t)v43)
    || (v41 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 16),
        v41 != kaldi::MatrixBase<float>::NumCols((uint64_t)v43)))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Linearity().NumRows() == mat.NumRows() && Linearity().NumCols() == mat.NumCols()", 80);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v49);
  }
  kaldi::CuMatrixBase<float>::CopyFromMat(*(_QWORD *)(a1 + 104), v43, 111);
  kaldi::Matrix<float>::~Matrix((uint64_t)v43);
  if (__p)
  {
    v48 = __p;
    operator delete(__p);
  }
  v49[0] = (void **)&v46;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](v49);
  if (SHIBYTE(v50[2]) < 0)
    operator delete(v50[0]);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
}

void kaldi::GaussRandomNumber::~GaussRandomNumber(kaldi::GaussRandomNumber *this)
{
  void *v2;
  void **v3;

  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 16);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  BOOL v7;
  __int128 *v9;
  uint64_t v10;
  BOOL v11;
  float *v12;
  uint64_t v15;
  int v16;
  BOOL v17;
  BOOL v18;
  uint64_t result;
  _QWORD *v20;
  __int128 *v21;
  uint64_t v22;
  void *__p[2];
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  while (kaldi::Peek(a2, a3) == 60)
  {
    v26 = 0uLL;
    v27 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v26);
    if (SHIBYTE(v27) < 0)
    {
      v10 = *((_QWORD *)&v26 + 1);
      if (*((_QWORD *)&v26 + 1) != 15
        || (*(_QWORD *)v26 == 0x61526E7261654C3CLL ? (v11 = *(_QWORD *)(v26 + 7) == 0x3E66656F43657461) : (v11 = 0),
            v12 = (float *)(a1 + 168),
            !v11))
      {
        if (*((_QWORD *)&v26 + 1) == 18)
        {
          if (*(_QWORD *)v26 == 0x6E6569646172473CLL
            && *(_QWORD *)(v26 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v26 + 16) == 15973)
          {
            goto LABEL_46;
          }
          v10 = *((_QWORD *)&v26 + 1);
        }
        if (v10 != 9)
          goto LABEL_49;
        v9 = (__int128 *)v26;
        goto LABEL_31;
      }
    }
    else
    {
      if (HIBYTE(v27) == 9)
      {
        v9 = &v26;
LABEL_31:
        v15 = *(_QWORD *)v9;
        v16 = *((unsigned __int8 *)v9 + 8);
        v17 = v15 == 0x6461724778614D3CLL && v16 == 62;
        v12 = (float *)(a1 + 164);
        if (!v17)
        {
LABEL_49:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
          if (v27 >= 0)
            v21 = &v26;
          else
            v21 = (__int128 *)v26;
          if (v27 >= 0)
            v22 = HIBYTE(v27);
          else
            v22 = *((_QWORD *)&v26 + 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
        goto LABEL_41;
      }
      if (HIBYTE(v27) != 15)
      {
        if (HIBYTE(v27) != 18)
          goto LABEL_49;
        v7 = (_QWORD)v26 == 0x6E6569646172473CLL && *((_QWORD *)&v26 + 1) == 0x7079546D726F4E74;
        if (!v7 || (unsigned __int16)v27 != 15973)
          goto LABEL_49;
LABEL_46:
        __p[0] = 0;
        __p[1] = 0;
        v25 = 0;
        kaldi::ReadToken(a2, a3, (uint64_t)__p);
        *(_DWORD *)(a1 + 160) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
        if (SHIBYTE(v25) < 0)
          operator delete(__p[0]);
        goto LABEL_42;
      }
      v18 = (_QWORD)v26 == 0x61526E7261654C3CLL && *(_QWORD *)((char *)&v26 + 7) == 0x3E66656F43657461;
      v12 = (float *)(a1 + 168);
      if (!v18)
        goto LABEL_49;
    }
LABEL_41:
    kaldi::ReadBasicType<float>(a2, a3, v12);
LABEL_42:
    if (SHIBYTE(v27) < 0)
      operator delete((void *)v26);
  }
  result = (***(uint64_t (****)(_QWORD, uint64_t *, uint64_t, uint64_t))(a1 + 104))(*(_QWORD *)(a1 + 104), a2, a3, a4);
  *(_BYTE *)(a1 + 16) = 0;
  return result;
}

void sub_1AD9C9BD0()
{
  JUMPOUT(0x1AD9C9BD8);
}

_QWORD *kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::WriteConfig(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::string __p;

  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 160), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  return kaldi::WriteBasicType<float>((uint64_t)a2, a3);
}

void sub_1AD9C9CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::WriteData(uint64_t *a1, _QWORD *a2, int a3, int a4)
{
  (*(void (**)(uint64_t *))(*a1 + 168))(a1);
  return kaldi::CuMatrixBase<float>::Write(a1[13], a2, a3, a4);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::NumParams(uint64_t a1)
{
  return (*(_DWORD *)(*(_QWORD *)(a1 + 104) + 16) * *(_DWORD *)(*(_QWORD *)(a1 + 104) + 20));
}

void *kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::GetParams(uint64_t a1, void **a2)
{
  uint64_t v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (*(_DWORD *)(*(_QWORD *)(a1 + 104) + 16) * *(_DWORD *)(*(_QWORD *)(a1 + 104) + 20));
  kaldi::Vector<float>::Resize(a2, v4, 0);
  v7 = 0;
  v8 = 0;
  v6 = *a2;
  LODWORD(v7) = v4;
  return kaldi::VectorBase<float>::CopyRowsFromMat(&v6, *(_QWORD *)(a1 + 104));
}

void **kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::SetParams(uint64_t *a1, char **a2)
{
  (*(void (**)(uint64_t *))(*a1 + 176))(a1);
  return kaldi::CuMatrixBase<float>::CopyRowsFromVec(a1[13], a2);
}

float kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::SumParams(uint64_t a1)
{
  return kaldi::CuMatrixBase<float>::Sum(*(_QWORD *)(a1 + 104));
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::PerturbParams(uint64_t a1, float a2)
{
  int32x2_t v5[6];

  kaldi::CuMatrix<float>::CuMatrix(v5, *(unsigned int *)(*(_QWORD *)(a1 + 104) + 20), *(unsigned int *)(*(_QWORD *)(a1 + 104) + 16), 1, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v5);
  kaldi::CuMatrixBase<float>::AddMat(*(_QWORD *)(a1 + 104), (uint64_t)v5, 111, a2, 1.0);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v5);
}

void sub_1AD9C9E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::Info(uint64_t *a1)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  void *__p[2];
  unsigned __int8 v7;
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  (*(void (**)(uint64_t *, _QWORD *, _QWORD))(*a1 + 168))(a1, v8, 0);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n linearity", 11);
  kaldi::nnet1::MomentStatistics<float>(a1[13]);
  if ((v7 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v7 & 0x80u) == 0)
    v4 = v7;
  else
    v4 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  if ((char)v7 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v8[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v8[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v9 < 0)
    operator delete((void *)v8[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v10);
}

void sub_1AD9C9F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::InfoGradient(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  unsigned __int8 v16;
  std::string v17;
  std::string v18;
  std::string v19;

  std::string::basic_string[abi:ne180100]<0>(&v17, "\n  linearity_grad");
  kaldi::nnet1::MomentStatistics<float>((_QWORD *)(a1 + 112));
  if ((v16 & 0x80u) == 0)
    v4 = v15;
  else
    v4 = (void **)v15[0];
  if ((v16 & 0x80u) == 0)
    v5 = v16;
  else
    v5 = (std::string::size_type)v15[1];
  v6 = std::string::append(&v17, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v18, ", lr-coef ");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v14 & 0x80u) == 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if ((v14 & 0x80u) == 0)
    v11 = v14;
  else
    v11 = (std::string::size_type)__p[1];
  v12 = std::string::append(&v19, (const std::string::value_type *)v10, v11);
  *a2 = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((char)v14 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if ((char)v16 < 0)
    operator delete(v15[0]);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
}

void sub_1AD9CA0E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v33 - 41) < 0)
    operator delete(*(void **)(v33 - 64));
  if (a33 < 0)
    operator delete(a28);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::MomentStatistics<float>(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  _BYTE v5[40];
  int32x2_t v6[6];

  kaldi::CuMatrix<float>::CuMatrix(v6, *(unsigned int *)(*(_QWORD *)*a1 + 20), *(unsigned int *)(*(_QWORD *)*a1 + 16), 0, 0, 0);
  v2 = *a1;
  if (a1[1] != *a1)
  {
    v3 = 0;
    do
    {
      kaldi::CuMatrixBase<float>::AddMat((uint64_t)v6, *(_QWORD *)(v2 + 8 * v3++), 111, 1.0, 1.0);
      v2 = *a1;
    }
    while (v3 < (uint64_t)(a1[1] - *a1) >> 3);
  }
  kaldi::Matrix<float>::Matrix<float>((uint64_t)v5, (uint64_t)v6, 111);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)v5);
  kaldi::Matrix<float>::~Matrix((uint64_t)v5);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v6);
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _BYTE v6[40];
  int32x2_t v7[6];

  kaldi::CuMatrix<float>::CuMatrix(v7, *(unsigned int *)(*a1 + 20), *(unsigned int *)(*a1 + 16), 0, 0, 0);
  v2 = *a1;
  if (a1[1] != *a1)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      kaldi::CuMatrixBase<float>::AddMat((uint64_t)v7, v2 + v3, 111, 1.0, 1.0);
      ++v4;
      v2 = *a1;
      v3 += 48;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 4) > v4);
  }
  kaldi::Matrix<float>::Matrix<float>((uint64_t)v6, (uint64_t)v7, 111);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)v6);
  kaldi::Matrix<float>::~Matrix((uint64_t)v6);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v7);
}

void sub_1AD9CA214(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ToString<float>()
{
  _QWORD v1[11];
  char v2;
  uint64_t v3;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v1[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v1 + *(_QWORD *)(v1[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v1[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v2 < 0)
    operator delete((void *)v1[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v3);
}

void sub_1AD9CA2F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::CuMatrixBase<float>::AddMatMat(a3, a2, CblasNoTrans, *(_QWORD *)(a1 + 104), CblasTrans, 1.0, 0.0);
}

{
  kaldi::CuVectorBase<float>::AddMatVec(a3, *(_QWORD *)(a1 + 104), CblasNoTrans, a2, 1.0, 0.0);
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  kaldi::CuMatrixBase<float>::AddMatMat(a5, a4, CblasNoTrans, *(_QWORD *)(a1 + 104), CblasNoTrans, 1.0, 0.0);
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD v8[4];

  v4 = *(_QWORD *)(a1 + 104);
  v5 = *(_QWORD *)(v4 + 8) + 4 * *(_DWORD *)(v4 + 24) * a3;
  v6 = *(_DWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 32);
  v8[0] = &unk_1E5D29D70;
  v8[1] = v5;
  v8[3] = v7;
  v8[2] = v6;
  kaldi::CuVectorBase<float>::AddMatVec(a4, a2, CblasNoTrans, (uint64_t)v8, 1.0, 0.0);
}

float kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD v8[4];

  v3 = *(_QWORD *)(a1 + 104);
  v4 = *(_QWORD *)(v3 + 8) + 4 * *(_DWORD *)(v3 + 24) * a3;
  v5 = *(_DWORD *)(v3 + 16);
  v6 = *(_QWORD *)(v3 + 32);
  v8[0] = &unk_1E5D29D70;
  v8[1] = v4;
  v8[3] = v6;
  v8[2] = v5;
  return kaldi::VecVec<float>(a2, (uint64_t)v8);
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  float v10;
  uint64_t v11;

  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  v10 = *(float *)(a1 + 60);
  *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * a5) = *(_DWORD *)(a2 + 20);
  v11 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(*(_QWORD *)(v11 + 8 * a5) + 32) = a4;
  kaldi::CuMatrixBase<float>::AddMatMat(*(_QWORD *)(v11 + 8 * a5), a3, CblasTrans, a2, CblasNoTrans, 1.0, v10);
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::EnsureCorrs(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  _QWORD *v5;
  std::vector<unsigned int>::size_type v6;
  uint64_t v7;
  unsigned int v8;
  int32x2_t *v9;
  uint64_t v10;

  if (!*(_BYTE *)(a1 + 224))
  {
    v2 = *(_DWORD *)(a1 + 160);
    v3 = *(_DWORD *)(a1 + 80);
    if (v3 > 1)
      v4 = v3 + 1;
    else
      v4 = 1;
    v5 = (_QWORD *)(a1 + 112);
    v6 = v4;
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 112, v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 136), v4);
    if (v4 >= 1)
    {
      v7 = 0;
      v8 = v2 & 0xFFFFFFFE;
      do
      {
        v9 = (int32x2_t *)operator new();
        kaldi::CuMatrix<float>::CuMatrix(v9, *(unsigned int *)(*(_QWORD *)(a1 + 104) + 20), *(unsigned int *)(*(_QWORD *)(a1 + 104) + 16), 0, 0, 0);
        v10 = *(_QWORD *)(*v5 + 8 * v7);
        *(_QWORD *)(*v5 + 8 * v7) = v9;
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
        if (v8 == 2)
        {
          kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 136) + 48 * v7), *(unsigned int *)(*(_QWORD *)(a1 + 104) + 20), *(unsigned int *)(*(_QWORD *)(a1 + 104) + 16), 1, 0);
          if (*(_DWORD *)(a1 + 160) == 3)
            kaldi::CuMatrixBase<float>::Set(*(_QWORD *)(a1 + 136) + 48 * v7, 1.0);
        }
        ++v7;
      }
      while (v7 != v6);
    }
    std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 176), v6);
    *(_BYTE *)(a1 + 224) = 1;
  }
}

void sub_1AD9CA5D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C40CC61A6CELL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 164) = a3;
  *(_DWORD *)(result + 160) = a2;
  *(_BYTE *)(result + 224) = 0;
  return result;
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::NormalizeGradients(uint64_t a1, int a2, float a3)
{
  int v3;

  v3 = *(_DWORD *)(a1 + 160);
  if (v3 == 3)
  {
    if (a3 >= 0.0 && a3 <= 1.0)
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * a2), *(_QWORD *)(a1 + 136) + 48 * a2, a3);
  }
  else if (v3 == 2)
  {
    if (a3 > 0.0)
    {
      if (*(_BYTE *)(a1 + 84))
        a3 = (float)*(int *)(*(_QWORD *)(a1 + 176) + 4 * a2) * a3;
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * a2), (int *)(*(_QWORD *)(a1 + 136) + 48 * a2), a3);
    }
  }
  else if (v3 == 1 && a3 > 0.0)
  {
    if (*(_BYTE *)(a1 + 84))
      a3 = (float)*(int *)(*(_QWORD *)(a1 + 176) + 4 * a2) * a3;
    kaldi::nnet1::UpdatableComponent::ClipGradient(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * a2), a3);
  }
}

float kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::GetNormalizedLearningRate(uint64_t a1, int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;

  if (!*(_BYTE *)(a1 + 84))
    return *(float *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 200);
  v3 = *(_QWORD *)(a1 + 208) - v2;
  if (!v3)
    return NAN;
  v4 = v3 >> 2;
  if ((int)v4 <= a2)
    return NAN;
  v5 = v4 - 1;
  if (a2 >= 0)
    v5 = a2;
  return *(float *)(v2 + 4 * v5);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t **v8;
  uint64_t v9;

  v8 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  ((void (*)(uint64_t **, uint64_t, uint64_t, _QWORD, _QWORD))(*v8)[29])(v8, a2, a3, 0, 0);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a4, v9, 1);
  kaldi::VectorBase<float>::CopyRowsFromMat(a4, *v8[14]);
  return ((uint64_t (*)(uint64_t **))(*v8)[1])(v8);
}

int *kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::SetLinearity(uint64_t a1, int *a2)
{
  kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
  kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
  return kaldi::CuMatrixBase<float>::CopyFromMat(*(_QWORD *)(a1 + 104), a2, 111);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  _QWORD *v10;
  _QWORD v11[34];

  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  v6 = *(_QWORD *)(a1 + 112);
  *a3 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 16) * *(_DWORD *)(*(_QWORD *)(a1 + 104) + 20);
  v7 = *(_QWORD *)(a1 + 120) - v6;
  if (v7)
  {
    if (*(_DWORD *)(a1 + 80) == 1)
      v8 = 0;
    else
      v8 = *(_DWORD *)(a1 + 80);
    if ((v7 >> 3) - 1 != v8)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Unexpected mismatch in indexes: ", 32);
      v10 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"  ", 2);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
    }
    result = kaldi::CuMatrixBase<float>::CountZeros(*(_QWORD *)(v6 + 8 * v8));
  }
  else
  {
    result = 0;
  }
  *a2 = result;
  return result;
}

float kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::ApplyCorr(uint64_t a1, int a2, float a3)
{
  float result;

  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  kaldi::CuMatrixBase<float>::AddMat(*(_QWORD *)(a1 + 104), *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * a2), 111, -(float)(a3 * *(float *)(a1 + 168)), 1.0);
  return result;
}

void std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD **)(a1 + 8);
  v4 = ((uint64_t)v3 - *(_QWORD *)a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *(_QWORD *)a1 + 8 * a2;
      while (v3 != (_QWORD *)v5)
      {
        v7 = *--v3;
        v6 = v7;
        *v3 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
      }
      *(_QWORD *)(a1 + 8) = v5;
    }
  }
  else
  {
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__append((char **)a1, a2 - v4);
  }
}

void kaldi::nnet1::QuantizerResidualAggregator::PushSetup(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  void *v39;
  __int128 v40;
  __int128 v41;
  void *v42;
  __int128 v43;
  __int128 v44;
  char v45;

  v5 = *a1;
  v4 = a1[1];
  v44 = 0u;
  v43 = 0u;
  v42 = &unk_1E5D34170;
  v45 = 0;
  if (v4 >= a1[2])
  {
    v6 = std::vector<kaldi::CuMatrix<float>>::__push_back_slow_path<kaldi::CuMatrix<float>>(a1, (uint64_t)&v42);
  }
  else
  {
    kaldi::CuMatrix<float>::CuMatrix(v4, &v42, 111);
    v6 = v4 + 48;
    a1[1] = v4 + 48;
  }
  a1[1] = v6;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v42);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*a1 + 16 * ((uint64_t)(v4 - v5) >> 4)), *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0);
  v7 = a1[5];
  v9 = *(_DWORD *)(a2 + 16);
  v8 = *(_DWORD *)(a2 + 20);
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(_DWORD *)(a2 + 24);
  v12 = *(_DWORD *)(a2 + 28);
  v13 = *(_QWORD *)(a2 + 32);
  *((_QWORD *)&v40 + 1) = __PAIR64__(v8, v9);
  *(_QWORD *)&v41 = __PAIR64__(v12, v11);
  *((_QWORD *)&v41 + 1) = v13;
  v39 = &unk_1E5D29D40;
  *(_QWORD *)&v40 = v10;
  v14 = a1[4];
  if (v14 >= v7)
  {
    v16 = a1[3];
    v17 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v14 - v16) >> 3);
    v18 = v17 + 1;
    if (v17 + 1 > 0x666666666666666)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - v16) >> 3);
    if (2 * v19 > v18)
      v18 = 2 * v19;
    if (v19 >= 0x333333333333333)
      v20 = 0x666666666666666;
    else
      v20 = v18;
    *((_QWORD *)&v44 + 1) = a1 + 5;
    if (v20)
    {
      v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)(a1 + 5), v20);
      v10 = v40;
      v9 = DWORD2(v40);
      v8 = HIDWORD(v40);
      v11 = v41;
      v12 = DWORD1(v41);
      v13 = *((_QWORD *)&v41 + 1);
    }
    else
    {
      v21 = 0;
    }
    v22 = &v21[40 * v17];
    v42 = v21;
    *(_QWORD *)&v43 = v22;
    *(_QWORD *)&v44 = &v21[40 * v20];
    *((_DWORD *)v22 + 4) = v9;
    *((_DWORD *)v22 + 5) = v8;
    *((_DWORD *)v22 + 6) = v11;
    *((_DWORD *)v22 + 7) = v12;
    *((_QWORD *)v22 + 4) = v13;
    *(_QWORD *)v22 = &unk_1E5D29D40;
    *((_QWORD *)v22 + 1) = v10;
    *((_QWORD *)&v43 + 1) = v22 + 40;
    std::vector<kaldi::CuSubMatrix<float>>::__swap_out_circular_buffer(a1 + 3, &v42);
    v15 = a1[4];
    std::__split_buffer<kaldi::CuSubMatrix<float>>::~__split_buffer((uint64_t)&v42);
  }
  else
  {
    *(_DWORD *)(v14 + 16) = v9;
    *(_DWORD *)(v14 + 20) = v8;
    *(_DWORD *)(v14 + 24) = v11;
    *(_DWORD *)(v14 + 28) = v12;
    *(_QWORD *)(v14 + 32) = v13;
    v15 = v14 + 40;
    *(_QWORD *)v14 = &unk_1E5D29D40;
    *(_QWORD *)(v14 + 8) = v10;
  }
  a1[4] = v15;
  v39 = &unk_1E5D29D40;
  v40 = 0u;
  v41 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v39);
  v23 = a1[8];
  v25 = *(_DWORD *)(a2 + 16);
  v24 = *(_DWORD *)(a2 + 20);
  v26 = *(_QWORD *)(a2 + 8);
  v27 = *(_DWORD *)(a2 + 24);
  v28 = *(_DWORD *)(a2 + 28);
  v29 = *(_QWORD *)(a2 + 32);
  *((_QWORD *)&v40 + 1) = __PAIR64__(v24, v25);
  *(_QWORD *)&v41 = __PAIR64__(v28, v27);
  *((_QWORD *)&v41 + 1) = v29;
  v39 = &unk_1E5D29D40;
  *(_QWORD *)&v40 = v26;
  v30 = a1[7];
  if (v30 >= v23)
  {
    v32 = a1[6];
    v33 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v30 - v32) >> 3);
    v34 = v33 + 1;
    if (v33 + 1 > 0x666666666666666)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v35 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v23 - v32) >> 3);
    if (2 * v35 > v34)
      v34 = 2 * v35;
    if (v35 >= 0x333333333333333)
      v36 = 0x666666666666666;
    else
      v36 = v34;
    *((_QWORD *)&v44 + 1) = a1 + 8;
    if (v36)
    {
      v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)(a1 + 8), v36);
      v26 = v40;
      v25 = DWORD2(v40);
      v24 = HIDWORD(v40);
      v27 = v41;
      v28 = DWORD1(v41);
      v29 = *((_QWORD *)&v41 + 1);
    }
    else
    {
      v37 = 0;
    }
    v38 = &v37[40 * v33];
    v42 = v37;
    *(_QWORD *)&v43 = v38;
    *(_QWORD *)&v44 = &v37[40 * v36];
    *((_DWORD *)v38 + 4) = v25;
    *((_DWORD *)v38 + 5) = v24;
    *((_DWORD *)v38 + 6) = v27;
    *((_DWORD *)v38 + 7) = v28;
    *((_QWORD *)v38 + 4) = v29;
    *(_QWORD *)v38 = &unk_1E5D29D40;
    *((_QWORD *)v38 + 1) = v26;
    *((_QWORD *)&v43 + 1) = v38 + 40;
    std::vector<kaldi::CuSubMatrix<float>>::__swap_out_circular_buffer(a1 + 6, &v42);
    v31 = a1[7];
    std::__split_buffer<kaldi::CuSubMatrix<float>>::~__split_buffer((uint64_t)&v42);
  }
  else
  {
    *(_DWORD *)(v30 + 16) = v25;
    *(_DWORD *)(v30 + 20) = v24;
    *(_DWORD *)(v30 + 24) = v27;
    *(_DWORD *)(v30 + 28) = v28;
    *(_QWORD *)(v30 + 32) = v29;
    v31 = v30 + 40;
    *(_QWORD *)v30 = &unk_1E5D29D40;
    *(_QWORD *)(v30 + 8) = v26;
  }
  a1[7] = v31;
  v39 = &unk_1E5D29D40;
  v40 = 0u;
  v41 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v39);
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  int32x4_t v19;
  int32x4_t *v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  int32x4_t v33;
  int32x4_t *v34;
  void *v35;
  _QWORD v36[4];
  void *v37;
  __int128 v38;
  __int128 v39;
  char v40;

  v5 = *a1;
  v4 = a1[1];
  v39 = 0u;
  v38 = 0u;
  v37 = &unk_1E5D34170;
  v40 = 0;
  if (v4 >= a1[2])
  {
    v6 = std::vector<kaldi::CuMatrix<float>>::__push_back_slow_path<kaldi::CuMatrix<float>>(a1, (uint64_t)&v37);
  }
  else
  {
    kaldi::CuMatrix<float>::CuMatrix(v4, &v37, 111);
    v6 = v4 + 48;
    a1[1] = v4 + 48;
  }
  a1[1] = v6;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v37);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*a1 + 16 * ((uint64_t)(v4 - v5) >> 4)), 1, *(unsigned int *)(a2 + 16), 0, 0);
  v7 = a1[5];
  v8 = *(_DWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 8);
  v35 = &unk_1E5D29D40;
  v36[0] = v9;
  v36[1] = v8 | 0x100000000;
  LODWORD(v36[2]) = v8;
  HIDWORD(v36[2]) = v8;
  v10 = *(_QWORD *)(a2 + 24);
  v36[3] = v10;
  v11 = a1[4];
  if (v11 >= v7)
  {
    v13 = a1[3];
    v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - v13) >> 3);
    v15 = v14 + 1;
    if (v14 + 1 > 0x666666666666666)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - v13) >> 3);
    if (2 * v16 > v15)
      v15 = 2 * v16;
    if (v16 >= 0x333333333333333)
      v17 = 0x666666666666666;
    else
      v17 = v15;
    *((_QWORD *)&v39 + 1) = a1 + 5;
    if (v17)
    {
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)(a1 + 5), v17);
      v9 = v36[0];
      v19 = *(int32x4_t *)&v36[1];
      v10 = v36[3];
    }
    else
    {
      v18 = 0;
      v19 = vdupq_lane_s32((int32x2_t)(v8 | 0x100000000), 0);
      v19.i32[1] = 1;
    }
    v20 = (int32x4_t *)&v18[40 * v14];
    v37 = v18;
    *(_QWORD *)&v38 = v20;
    *(_QWORD *)&v39 = &v18[40 * v17];
    v20[1] = v19;
    v20[2].i64[0] = v10;
    v20->i64[0] = (uint64_t)&unk_1E5D29D40;
    v20->i64[1] = v9;
    *((_QWORD *)&v38 + 1) = (char *)v20 + 40;
    std::vector<kaldi::CuSubMatrix<float>>::__swap_out_circular_buffer(a1 + 3, &v37);
    v12 = a1[4];
    std::__split_buffer<kaldi::CuSubMatrix<float>>::~__split_buffer((uint64_t)&v37);
  }
  else
  {
    *(_DWORD *)(v11 + 16) = v8;
    *(_DWORD *)(v11 + 20) = 1;
    *(_DWORD *)(v11 + 24) = v8;
    *(_DWORD *)(v11 + 28) = v8;
    *(_QWORD *)(v11 + 32) = v10;
    v12 = v11 + 40;
    *(_QWORD *)v11 = &unk_1E5D29D40;
    *(_QWORD *)(v11 + 8) = v9;
  }
  a1[4] = v12;
  v35 = &unk_1E5D29D40;
  memset(v36, 0, sizeof(v36));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v35);
  v21 = a1[8];
  v22 = *(_DWORD *)(a2 + 16);
  v23 = *(_QWORD *)(a2 + 8);
  v35 = &unk_1E5D29D40;
  v36[0] = v23;
  v36[1] = v22 | 0x100000000;
  LODWORD(v36[2]) = v22;
  HIDWORD(v36[2]) = v22;
  v24 = *(_QWORD *)(a2 + 24);
  v36[3] = v24;
  v25 = a1[7];
  if (v25 >= v21)
  {
    v27 = a1[6];
    v28 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v25 - v27) >> 3);
    v29 = v28 + 1;
    if (v28 + 1 > 0x666666666666666)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v30 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v21 - v27) >> 3);
    if (2 * v30 > v29)
      v29 = 2 * v30;
    if (v30 >= 0x333333333333333)
      v31 = 0x666666666666666;
    else
      v31 = v29;
    *((_QWORD *)&v39 + 1) = a1 + 8;
    if (v31)
    {
      v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)(a1 + 8), v31);
      v23 = v36[0];
      v33 = *(int32x4_t *)&v36[1];
      v24 = v36[3];
    }
    else
    {
      v32 = 0;
      v33 = vdupq_lane_s32((int32x2_t)(v22 | 0x100000000), 0);
      v33.i32[1] = 1;
    }
    v34 = (int32x4_t *)&v32[40 * v28];
    v37 = v32;
    *(_QWORD *)&v38 = v34;
    *(_QWORD *)&v39 = &v32[40 * v31];
    v34[1] = v33;
    v34[2].i64[0] = v24;
    v34->i64[0] = (uint64_t)&unk_1E5D29D40;
    v34->i64[1] = v23;
    *((_QWORD *)&v38 + 1) = (char *)v34 + 40;
    std::vector<kaldi::CuSubMatrix<float>>::__swap_out_circular_buffer(a1 + 6, &v37);
    v26 = a1[7];
    std::__split_buffer<kaldi::CuSubMatrix<float>>::~__split_buffer((uint64_t)&v37);
  }
  else
  {
    *(_DWORD *)(v25 + 16) = v22;
    *(_DWORD *)(v25 + 20) = 1;
    *(_DWORD *)(v25 + 24) = v22;
    *(_DWORD *)(v25 + 28) = v22;
    *(_QWORD *)(v25 + 32) = v24;
    v26 = v25 + 40;
    *(_QWORD *)v25 = &unk_1E5D29D40;
    *(_QWORD *)(v25 + 8) = v23;
  }
  a1[7] = v26;
  v35 = &unk_1E5D29D40;
  memset(v36, 0, sizeof(v36));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v35);
}

void sub_1AD9CAD10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::__split_buffer<kaldi::CuSubMatrix<float>>::~__split_buffer((uint64_t)va1);
  v5 = v3 + 16;
  *v2 = 0u;
  v2[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::LinearTransform(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = &off_1E5D2D150;
  *(_OWORD *)(a1 + 56) = xmmword_1AE13F660;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(_QWORD *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 86) = 0;
  *(_QWORD *)(a1 + 88) = &unk_1E5D2CBC8;
  *(_QWORD *)(a1 + 96) = &unk_1E5D2CBF0;
  *(_QWORD *)a1 = &unk_1E5D2CA90;
  v6 = operator new();
  kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v6, a3, a2);
  *(_QWORD *)(a1 + 104) = v6;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 1065353216;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_BYTE *)(a1 + 224) = 0;
  return a1;
}

void sub_1AD9CAE90(_Unwind_Exception *a1)
{
  kaldi::nnet1::UpdatableComponent *v1;
  quasar::Bitmap *v2;
  quasar::Bitmap *v3;
  uint64_t v4;

  MEMORY[0x1AF44D190](v4, 0x10D0C4068EB0291);
  quasar::Bitmap::~Bitmap(v3);
  quasar::Bitmap::~Bitmap(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::LinearTransform(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  char v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23[35];

  *(_QWORD *)a1 = off_1E5D32508;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = off_1E5D2E4A0;
  *(_QWORD *)(a1 + 48) = &off_1E5D2D150;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 88) = &unk_1E5D2CBC8;
  *(_QWORD *)(a1 + 96) = &unk_1E5D2CBF0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)a1 = &unk_1E5D2CA90;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 112), (uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 3);
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 136), *(_QWORD *)(a2 + 136), *(_QWORD *)(a2 + 144), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 144) - *(_QWORD *)(a2 + 136)) >> 4));
  v6 = *(_DWORD *)(a2 + 160);
  v7 = *(_QWORD *)(a2 + 164);
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 160) = v6;
  *(_QWORD *)(a1 + 164) = v7;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 176), *(const void **)(a2 + 176), *(_QWORD *)(a2 + 184), (uint64_t)(*(_QWORD *)(a2 + 184) - *(_QWORD *)(a2 + 176)) >> 2);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 200), *(const void **)(a2 + 200), *(_QWORD *)(a2 + 208), (uint64_t)(*(_QWORD *)(a2 + 208) - *(_QWORD *)(a2 + 200)) >> 2);
  v8 = *(_BYTE *)(a2 + 224);
  *(_OWORD *)(a1 + 232) = 0u;
  *(_BYTE *)(a1 + 224) = v8;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  if (*(_BYTE *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
  }
  v9 = *(int **)(a2 + 104);
  if (v9)
  {
    kaldi::NewCuSubOrMat<signed char>(v9, v23);
    v10 = v23[0];
    v23[0] = 0;
    std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 104), v10);
    v11 = v23[0];
    v23[0] = 0;
    if (v11)
    {
      v12 = kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v11);
      MEMORY[0x1AF44D190](v12, 0x10D0C4068EB0291);
    }
  }
  v14 = *(_QWORD *)(a1 + 112);
  v13 = *(_QWORD *)(a1 + 120);
  if (v13 != v14)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(_QWORD *)(a2 + 112);
      if (*(_QWORD *)(v17 + 8 * v16))
      {
        kaldi::NewCuSubOrMat<float>(*(_QWORD *)(v17 + (v15 >> 29)), *(unsigned __int8 *)(a1 + 16), v23);
        v18 = *(_QWORD *)(a1 + 112);
        v19 = v23[0];
        v23[0] = 0;
        v20 = *(_QWORD *)(v18 + 8 * v16);
        *(_QWORD *)(v18 + 8 * v16) = v19;
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
        v21 = v23[0];
        v23[0] = 0;
        if (v21)
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
        v14 = *(_QWORD *)(a1 + 112);
        v13 = *(_QWORD *)(a1 + 120);
      }
      ++v16;
      v15 += 0x100000000;
    }
    while (v16 < (v13 - v14) >> 3);
  }
  if (*(_QWORD *)(a2 + 240) != *(_QWORD *)(a2 + 232))
  {
    kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(a1);
    kaldi::nnet1::QuantizerResidualAggregator::PushSetup((uint64_t *)(a1 + 232), *(_QWORD *)(*(_QWORD *)(a1 + 112)+ 8 * ((((*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) << 29) - 0x100000000) >> 32)));
  }
  return a1;
}

void sub_1AD9CB1C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, quasar::Bitmap *a10, quasar::Bitmap *a11, uint64_t a12)
{
  kaldi::nnet1::UpdatableComponent *v12;
  void **v13;
  void **v14;
  void **v15;
  void *v17;
  void *v18;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v15);
  v17 = *v14;
  if (*v14)
  {
    *((_QWORD *)v12 + 26) = v17;
    operator delete(v17);
  }
  v18 = *v13;
  if (*v13)
  {
    *((_QWORD *)v12 + 23) = v18;
    operator delete(v18);
  }
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a9, 0);
  quasar::Bitmap::~Bitmap(a10);
  quasar::Bitmap::~Bitmap(a11);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v12);
  _Unwind_Resume(a1);
}

uint64_t kaldi::NewCuSubOrMat<signed char>@<X0>(int *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1AD9CB2B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10D0C4068EB0291);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::~LinearTransform(uint64_t a1)
{
  quasar::Bitmap *v2;
  quasar::Bitmap *v3;
  void *v4;
  void *v5;
  void **v6;

  *(_QWORD *)(a1 + 88) = &unk_1E5D2CBC8;
  v2 = (quasar::Bitmap *)(a1 + 88);
  *(_QWORD *)a1 = &unk_1E5D2CA90;
  *(_QWORD *)(a1 + 96) = &unk_1E5D2CBF0;
  v3 = (quasar::Bitmap *)(a1 + 96);
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 232));
  v4 = *(void **)(a1 + 200);
  if (v4)
  {
    *(_QWORD *)(a1 + 208) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 176);
  if (v5)
  {
    *(_QWORD *)(a1 + 184) = v5;
    operator delete(v5);
  }
  v6 = (void **)(a1 + 136);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)(a1 + 112);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 104), 0);
  quasar::Bitmap::~Bitmap(v3);
  quasar::Bitmap::~Bitmap(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::~LinearTransform(a1);
  JUMPOUT(0x1AF44D190);
}

void `non-virtual thunk to'kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::~LinearTransform(uint64_t a1)
{
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::~LinearTransform(a1 - 88);
}

{
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::~LinearTransform(a1 - 96);
}

{
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::~LinearTransform(a1 - 88);
  JUMPOUT(0x1AF44D190);
}

{
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::~LinearTransform(a1 - 96);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::CopyQuantized8Bit(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::LinearTransform(v2, a1);
  return v2;
}

void sub_1AD9CB460(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C40045C2EC8);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::CopyQuantized8Bit(uint64_t a1)
{
  return kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::CopyQuantized8Bit(a1 - 88);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::CopyQuantized16Bit(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::LinearTransform<kaldi::QuantizedMatrix<signed char>>(v2, a1);
  return v2;
}

void sub_1AD9CB4D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C40045C2EC8);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::CopyQuantized16Bit(uint64_t a1)
{
  return kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::CopyQuantized16Bit(a1 - 96);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::LinearTransform(v2, a1);
  return v2;
}

void sub_1AD9CB540(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C40045C2EC8);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  void *v7;
  BOOL v9;
  float *v10;
  BOOL v14;
  BOOL v16;
  std::string *v21;
  BOOL v22;
  BOOL v24;
  _QWORD *v25;
  void **v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  int inited;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float v37;
  float v38;
  float v39;
  int v40;
  int v41;
  void **v42;
  _QWORD v43[2];
  int v44;
  _BYTE v45[16];
  uint64_t v46;
  void *__p;
  void *v48;
  void **v49[34];
  void *v50[3];
  int v51;
  std::string v52;
  std::string v53;
  int v54;

  v54 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v53);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 160), &v52);
  v51 = -1;
  memset(v50, 0, sizeof(v50));
  v42 = v50;
  while (1)
  {
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) != 0)
      goto LABEL_106;
    kaldi::ReadToken(a2, 0, (uint64_t)v50);
    if ((SHIBYTE(v50[2]) & 0x80000000) == 0)
    {
      switch(HIBYTE(v50[2]))
      {
        case 9:
          goto LABEL_81;
        case 0xC:
          goto LABEL_76;
        case 0xD:
          if (v50[0] != (void *)0x74536D617261503CLL || *(void **)((char *)v50 + 5) != (void *)0x3E7665646474536DLL)
            goto LABEL_92;
          goto LABEL_51;
        case 0xF:
          v22 = v50[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v50 + 7) == (void *)0x3E66656F43657461;
          v10 = (float *)(a1 + 168);
          if (v22)
            goto LABEL_86;
          if (HIBYTE(v50[2]) == 9)
            goto LABEL_81;
          if (HIBYTE(v50[2]) != 12)
            goto LABEL_92;
LABEL_76:
          if (v50[0] != (void *)0x536D6F646E61523CLL || LODWORD(v50[1]) != 1046766949)
            goto LABEL_80;
          goto LABEL_88;
        case 0x12:
          goto LABEL_61;
        case 0x13:
          if (v50[0] == (void *)0x61725474696E493CLL
            && v50[1] == (void *)0x79546D726F66736ELL
            && *(void **)((char *)&v50[1] + 3) == (void *)0x3E657079546D726FLL)
          {
            goto LABEL_89;
          }
          if (HIBYTE(v50[2]) == 9)
            goto LABEL_81;
          if (HIBYTE(v50[2]) != 18)
            goto LABEL_91;
LABEL_61:
          if (v50[0] == (void *)0x6E6569646172473CLL
            && v50[1] == (void *)0x7079546D726F4E74
            && LOWORD(v50[2]) == 15973)
          {
            goto LABEL_69;
          }
LABEL_80:
          if (HIBYTE(v50[2]) != 9)
          {
LABEL_91:
            if (HIBYTE(v50[2]) == 12)
              goto LABEL_101;
            goto LABEL_92;
          }
LABEL_81:
          v24 = v50[0] == (void *)0x6461724778614D3CLL && LOBYTE(v50[1]) == 62;
          v10 = (float *)(a1 + 164);
          if (!v24)
            goto LABEL_92;
          break;
        default:
          goto LABEL_92;
      }
      goto LABEL_86;
    }
    v7 = v50[1];
    if (v50[1] == (void *)13
      && *(_QWORD *)v50[0] == 0x74536D617261503CLL
      && *(_QWORD *)((char *)v50[0] + 5) == 0x3E7665646474536DLL)
    {
LABEL_51:
      v10 = (float *)&v54;
      goto LABEL_86;
    }
    if (v50[1] == (void *)15)
    {
      v9 = *(_QWORD *)v50[0] == 0x61526E7261654C3CLL && *(_QWORD *)((char *)v50[0] + 7) == 0x3E66656F43657461;
      v10 = (float *)(a1 + 168);
      if (v9)
        goto LABEL_86;
      v7 = v50[1];
    }
    if (v7 == (void *)12)
    {
      if (*(_QWORD *)v50[0] == 0x536D6F646E61523CLL && *((_DWORD *)v50[0] + 2) == 1046766949)
      {
LABEL_88:
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v51);
        goto LABEL_87;
      }
      v7 = v50[1];
    }
    if (v7 == (void *)19)
    {
      if (*(_QWORD *)v50[0] == 0x61725474696E493CLL
        && *((_QWORD *)v50[0] + 1) == 0x79546D726F66736ELL
        && *(_QWORD *)((char *)v50[0] + 11) == 0x3E657079546D726FLL)
      {
LABEL_89:
        v21 = &v53;
        goto LABEL_90;
      }
      v7 = v50[1];
    }
    if (v7 != (void *)18)
      goto LABEL_45;
    v14 = *(_QWORD *)v50[0] == 0x6E6569646172473CLL && *((_QWORD *)v50[0] + 1) == 0x7079546D726F4E74;
    if (!v14 || *((_WORD *)v50[0] + 8) != 15973)
      break;
LABEL_69:
    v21 = &v52;
LABEL_90:
    kaldi::ReadToken(a2, 0, (uint64_t)v21);
LABEL_87:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v7 = v50[1];
LABEL_45:
  if (v7 != (void *)9)
    goto LABEL_99;
  v16 = *(_QWORD *)v50[0] == 0x6461724778614D3CLL && *((_BYTE *)v50[0] + 8) == 62;
  v10 = (float *)(a1 + 164);
  if (v16)
  {
LABEL_86:
    kaldi::ReadBasicType<float>(a2, 0, v10);
    goto LABEL_87;
  }
  v7 = v50[1];
LABEL_99:
  if (v7 != (void *)12)
    goto LABEL_92;
  v42 = (void **)v50[0];
LABEL_101:
  if (*v42 != (void *)0x6E6F706D6F432F3CLL || *((_DWORD *)v42 + 2) != 1047817829)
  {
LABEL_92:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Unknown token ", 14);
    if (SHIBYTE(v50[2]) >= 0)
      v26 = v50;
    else
      v26 = (void **)v50[0];
    if (SHIBYTE(v50[2]) >= 0)
      v27 = HIBYTE(v50[2]);
    else
      v27 = (uint64_t)v50[1];
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" (ParamStddev|LearnRateCoef|InitTransformType|RandomSeed|GradientNormType|MaxGrad)", 82);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v49);
  }
LABEL_106:
  inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v53);
  *(_DWORD *)(a1 + 160) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v52);
  if (v51 >= 1)
    kaldi::UniformRandomNumber::SetRandomSeeds(a3, v51);
  kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v45, a3);
  kaldi::Matrix<float>::Matrix((uint64_t)v43, *(unsigned int *)(a1 + 12), *(unsigned int *)(a1 + 8), 0, 0);
  v32 = *(_DWORD *)(a1 + 12);
  if (v32 < 1)
    goto LABEL_124;
  v33 = 0;
  LODWORD(v34) = *(_DWORD *)(a1 + 8);
  while (2)
  {
    if ((int)v34 < 1)
      goto LABEL_123;
    v35 = 0;
    while (2)
    {
      switch(inited)
      {
        case 0:
          if (v33 == v35)
            v37 = 1.0;
          else
            v37 = 0.0;
          goto LABEL_120;
        case 2:
          v38 = *(float *)&v54;
          kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v45, 0);
          v37 = v38 * v39;
LABEL_120:
          *(float *)(v43[0] + 4 * (int)v33 * v44 + 4 * v35) = v37;
          break;
        case 1:
          v36 = *(float *)&v54;
          v37 = (kaldi::UniformRandomNumber::RandUniform(a3, 0) + -0.5) * (float)(v36 + v36);
          goto LABEL_120;
      }
      ++v35;
      v34 = *(int *)(a1 + 8);
      if (v35 < v34)
        continue;
      break;
    }
    v32 = *(_DWORD *)(a1 + 12);
LABEL_123:
    if (++v33 < v32)
      continue;
    break;
  }
LABEL_124:
  v40 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 104));
  if (v40 != kaldi::MatrixBase<float>::NumRows((uint64_t)v43)
    || (v41 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 104)),
        v41 != kaldi::MatrixBase<float>::NumCols((uint64_t)v43)))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Linearity().NumRows() == mat.NumRows() && Linearity().NumCols() == mat.NumCols()", 80);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v49);
  }
  kaldi::QuantizedMatrixBase<signed char>::CopyFromMat(*(_QWORD *)(a1 + 104), (uint64_t)v43);
  kaldi::Matrix<float>::~Matrix((uint64_t)v43);
  if (__p)
  {
    v48 = __p;
    operator delete(__p);
  }
  v49[0] = (void **)&v46;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](v49);
  if (SHIBYTE(v50[2]) < 0)
    operator delete(v50[0]);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::ReadData(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  BOOL v7;
  __int128 *v9;
  uint64_t v10;
  BOOL v11;
  float *v12;
  uint64_t v15;
  int v16;
  BOOL v17;
  BOOL v18;
  _QWORD *v20;
  __int128 *v21;
  uint64_t v22;
  void *__p[2];
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  while (kaldi::Peek(a2, a3) == 60)
  {
    v26 = 0uLL;
    v27 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v26);
    if (SHIBYTE(v27) < 0)
    {
      v10 = *((_QWORD *)&v26 + 1);
      if (*((_QWORD *)&v26 + 1) != 15
        || (*(_QWORD *)v26 == 0x61526E7261654C3CLL ? (v11 = *(_QWORD *)(v26 + 7) == 0x3E66656F43657461) : (v11 = 0),
            v12 = (float *)(a1 + 168),
            !v11))
      {
        if (*((_QWORD *)&v26 + 1) == 18)
        {
          if (*(_QWORD *)v26 == 0x6E6569646172473CLL
            && *(_QWORD *)(v26 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v26 + 16) == 15973)
          {
            goto LABEL_46;
          }
          v10 = *((_QWORD *)&v26 + 1);
        }
        if (v10 != 9)
          goto LABEL_49;
        v9 = (__int128 *)v26;
        goto LABEL_31;
      }
    }
    else
    {
      if (HIBYTE(v27) == 9)
      {
        v9 = &v26;
LABEL_31:
        v15 = *(_QWORD *)v9;
        v16 = *((unsigned __int8 *)v9 + 8);
        v17 = v15 == 0x6461724778614D3CLL && v16 == 62;
        v12 = (float *)(a1 + 164);
        if (!v17)
        {
LABEL_49:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
          if (v27 >= 0)
            v21 = &v26;
          else
            v21 = (__int128 *)v26;
          if (v27 >= 0)
            v22 = HIBYTE(v27);
          else
            v22 = *((_QWORD *)&v26 + 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
        goto LABEL_41;
      }
      if (HIBYTE(v27) != 15)
      {
        if (HIBYTE(v27) != 18)
          goto LABEL_49;
        v7 = (_QWORD)v26 == 0x6E6569646172473CLL && *((_QWORD *)&v26 + 1) == 0x7079546D726F4E74;
        if (!v7 || (unsigned __int16)v27 != 15973)
          goto LABEL_49;
LABEL_46:
        __p[0] = 0;
        __p[1] = 0;
        v25 = 0;
        kaldi::ReadToken(a2, a3, (uint64_t)__p);
        *(_DWORD *)(a1 + 160) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
        if (SHIBYTE(v25) < 0)
          operator delete(__p[0]);
        goto LABEL_42;
      }
      v18 = (_QWORD)v26 == 0x61526E7261654C3CLL && *(_QWORD *)((char *)&v26 + 7) == 0x3E66656F43657461;
      v12 = (float *)(a1 + 168);
      if (!v18)
        goto LABEL_49;
    }
LABEL_41:
    kaldi::ReadBasicType<float>(a2, a3, v12);
LABEL_42:
    if (SHIBYTE(v27) < 0)
      operator delete((void *)v26);
  }
  kaldi::QuantizedMatrix<signed char>::Read(*(float **)(a1 + 104), a2, a3, a4);
  *(_BYTE *)(a1 + 16) = 0;
  kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 104));
  return kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 104));
}

void sub_1AD9CBFA4()
{
  JUMPOUT(0x1AD9CBFACLL);
}

_QWORD *kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::WriteConfig(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::string __p;

  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 160), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  return kaldi::WriteBasicType<float>((uint64_t)a2, a3);
}

void sub_1AD9CC080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::WriteData(int **a1, _QWORD *a2, int a3, int a4)
{
  (*((void (**)(int **))*a1 + 21))(a1);
  return kaldi::QuantizedMatrix<signed char>::Write(a1[13], a2, a3, a4);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::NumParams(uint64_t a1)
{
  int v2;

  v2 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 104));
  return kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 104)) * v2;
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::GetParams(uint64_t a1, void **a2)
{
  int v4;
  uint64_t v5;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 104));
  v5 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 104)) * v4;
  kaldi::Vector<float>::Resize(a2, v5, 0);
  v8 = 0;
  v9 = 0;
  v7 = *a2;
  LODWORD(v8) = v5;
  return kaldi::VectorBase<float>::CopyRowsFromMat<signed char>((uint64_t *)&v7, *(float **)(a1 + 104));
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::SetParams(unsigned int **a1, char **a2)
{
  (*((void (**)(unsigned int **))*a1 + 22))(a1);
  return kaldi::QuantizedMatrixBase<signed char>::CopyRowsFromVec(a1[13], a2);
}

float kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::SumParams(uint64_t a1)
{
  return kaldi::QuantizedMatrixBase<signed char>::Sum(*(int **)(a1 + 104));
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::PerturbParams(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int32x2_t v4[6];

  v2 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 104));
  v3 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 104));
  kaldi::CuMatrix<float>::CuMatrix(v4, v2, v3, 1, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v4);
  kaldi::QuantizedMatrixBase<signed char>::AddMat();
}

uint64_t sub_1AD9CC238()
{
  uint64_t v1;

  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v1);
}

void sub_1AD9CC254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::Info(kaldi::quasar::Vocab **a1)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  void *__p[2];
  unsigned __int8 v7;
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  (*((void (**)(kaldi::quasar::Vocab **, _QWORD *, _QWORD))*a1 + 21))(a1, v8, 0);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n linearity", 11);
  kaldi::nnet1::MomentStatistics<signed char>(a1[13]);
  if ((v7 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v7 & 0x80u) == 0)
    v4 = v7;
  else
    v4 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  if ((char)v7 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v8[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v8[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v9 < 0)
    operator delete((void *)v8[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v10);
}

void sub_1AD9CC380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::MomentStatistics<signed char>(kaldi::quasar::Vocab *a1)
{
  int v2;
  int v3;
  void *v4[3];

  v2 = kaldi::quasar::Vocab::VocabSize(a1);
  v3 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a1);
  memset(v4, 0, sizeof(v4));
  kaldi::Vector<float>::Resize(v4, (v3 * v2), 0);
  kaldi::VectorBase<float>::CopyRowsFromMat<signed char>((uint64_t *)v4, (float *)a1);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)v4);
  kaldi::Vector<float>::Destroy((uint64_t)v4);
}

void sub_1AD9CC42C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::InfoGradient(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  unsigned __int8 v16;
  std::string v17;
  std::string v18;
  std::string v19;

  std::string::basic_string[abi:ne180100]<0>(&v17, "\n  linearity_grad");
  kaldi::nnet1::MomentStatistics<float>((_QWORD *)(a1 + 112));
  if ((v16 & 0x80u) == 0)
    v4 = v15;
  else
    v4 = (void **)v15[0];
  if ((v16 & 0x80u) == 0)
    v5 = v16;
  else
    v5 = (std::string::size_type)v15[1];
  v6 = std::string::append(&v17, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v18, ", lr-coef ");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v14 & 0x80u) == 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if ((v14 & 0x80u) == 0)
    v11 = v14;
  else
    v11 = (std::string::size_type)__p[1];
  v12 = std::string::append(&v19, (const std::string::value_type *)v10, v11);
  *a2 = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((char)v14 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if ((char)v16 < 0)
    operator delete(v15[0]);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
}

void sub_1AD9CC58C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v33 - 41) < 0)
    operator delete(*(void **)(v33 - 64));
  if (a33 < 0)
    operator delete(a28);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void **kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  LODWORD(a4) = 1.0;
  return kaldi::CuMatrixBase<float>::AddMatMat<signed char>(a3, a2, 111, *(kaldi::quasar::Vocab **)(a1 + 104), 112, a4, 0.0);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::PropagateFnc()
{
  kaldi::CuVectorBase<float>::AddMatVec<signed char>();
}

void **kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::BackpropagateFnc(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  LODWORD(a2) = 1.0;
  return kaldi::CuMatrixBase<float>::AddMatMat<signed char>(a6, a5, 111, *(kaldi::quasar::Vocab **)(a1 + 104), 111, a2, 0.0);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v6;
  _BYTE v7[16];

  kaldi::QuantizedMatrixBase<signed char>::Row(*(_QWORD *)(a1 + 104), a3, (uint64_t)v7);
  LODWORD(v6) = 1.0;
  kaldi::CuVectorBase<float>::AddMatVec<signed char>(a4, a2, 111, (uint64_t)v7, v6, 0.0);
}

float kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3)
{
  _BYTE v5[16];

  kaldi::QuantizedMatrixBase<signed char>::Row(*(_QWORD *)(a1 + 104), a3, (uint64_t)v5);
  return kaldi::VecVec<float,signed char>(a2, (uint64_t)v5);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  float v10;
  uint64_t v11;

  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(a1);
  v10 = *(float *)(a1 + 60);
  *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * a5) = *(_DWORD *)(a2 + 20);
  v11 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(*(_QWORD *)(v11 + 8 * a5) + 32) = a4;
  kaldi::CuMatrixBase<float>::AddMatMat(*(_QWORD *)(v11 + 8 * a5), a3, CblasTrans, a2, CblasNoTrans, 1.0, v10);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  _QWORD *v5;
  std::vector<unsigned int>::size_type v6;
  uint64_t v7;
  unsigned int v8;
  int32x2_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int32x2_t *v13;
  uint64_t v14;
  uint64_t v15;

  if (!*(_BYTE *)(a1 + 224))
  {
    v2 = *(_DWORD *)(a1 + 160);
    v3 = *(_DWORD *)(a1 + 80);
    if (v3 > 1)
      v4 = v3 + 1;
    else
      v4 = 1;
    v5 = (_QWORD *)(a1 + 112);
    v6 = v4;
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 112, v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 136), v4);
    if (v4 >= 1)
    {
      v7 = 0;
      v8 = v2 & 0xFFFFFFFE;
      do
      {
        v9 = (int32x2_t *)operator new();
        v10 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 104));
        v11 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 104));
        kaldi::CuMatrix<float>::CuMatrix(v9, v10, v11, 0, 0, 0);
        v12 = *(_QWORD *)(*v5 + 8 * v7);
        *(_QWORD *)(*v5 + 8 * v7) = v9;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
        if (v8 == 2)
        {
          v13 = (int32x2_t *)(*(_QWORD *)(a1 + 136) + 48 * v7);
          v14 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 104));
          v15 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 104));
          kaldi::CuMatrix<float>::Resize(v13, v14, v15, 1, 0);
          if (*(_DWORD *)(a1 + 160) == 3)
            kaldi::CuMatrixBase<float>::Set(*(_QWORD *)(a1 + 136) + 48 * v7, 1.0);
        }
        ++v7;
      }
      while (v7 != v6);
    }
    std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 176), v6);
    *(_BYTE *)(a1 + 224) = 1;
  }
}

void sub_1AD9CC8DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C40CC61A6CELL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 164) = a3;
  *(_DWORD *)(result + 160) = a2;
  *(_BYTE *)(result + 224) = 0;
  return result;
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::NormalizeGradients(uint64_t a1, int a2, float a3)
{
  int v3;

  v3 = *(_DWORD *)(a1 + 160);
  if (v3 == 3)
  {
    if (a3 >= 0.0 && a3 <= 1.0)
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * a2), *(_QWORD *)(a1 + 136) + 48 * a2, a3);
  }
  else if (v3 == 2)
  {
    if (a3 > 0.0)
    {
      if (*(_BYTE *)(a1 + 84))
        a3 = (float)*(int *)(*(_QWORD *)(a1 + 176) + 4 * a2) * a3;
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * a2), (int *)(*(_QWORD *)(a1 + 136) + 48 * a2), a3);
    }
  }
  else if (v3 == 1 && a3 > 0.0)
  {
    if (*(_BYTE *)(a1 + 84))
      a3 = (float)*(int *)(*(_QWORD *)(a1 + 176) + 4 * a2) * a3;
    kaldi::nnet1::UpdatableComponent::ClipGradient(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * a2), a3);
  }
}

float kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::GetNormalizedLearningRate(uint64_t a1, int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;

  if (!*(_BYTE *)(a1 + 84))
    return *(float *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 200);
  v3 = *(_QWORD *)(a1 + 208) - v2;
  if (!v3)
    return NAN;
  v4 = v3 >> 2;
  if ((int)v4 <= a2)
    return NAN;
  v5 = v4 - 1;
  if (a2 >= 0)
    v5 = a2;
  return *(float *)(v2 + 4 * v5);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::UpdateWeights()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented except for BaseFloat weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t **v8;
  uint64_t v9;

  v8 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  ((void (*)(uint64_t **, uint64_t, uint64_t, _QWORD, _QWORD))(*v8)[29])(v8, a2, a3, 0, 0);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a4, v9, 1);
  kaldi::VectorBase<float>::CopyRowsFromMat(a4, *v8[14]);
  return ((uint64_t (*)(uint64_t **))(*v8)[1])(v8);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::VectorizeWeightsCorrs()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented except for BaseFloat weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::SetLinearity(uint64_t a1, uint64_t a2)
{
  kaldi::MatrixBase<float>::NumRows(a2);
  kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 104));
  kaldi::MatrixBase<float>::NumCols(a2);
  kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 104));
  kaldi::QuantizedMatrixBase<signed char>::CopyFromMat(*(_QWORD *)(a1 + 104), a2);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t result;
  _QWORD *v11;
  _QWORD v12[34];

  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(a1);
  v6 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 104));
  *a3 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 104)) * v6;
  v7 = *(_QWORD *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 120) - v7;
  if (v8)
  {
    if (*(_DWORD *)(a1 + 80) == 1)
      v9 = 0;
    else
      v9 = *(_DWORD *)(a1 + 80);
    if ((v8 >> 3) - 1 != v9)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Unexpected mismatch in indexes: ", 32);
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  ", 2);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
    }
    result = kaldi::CuMatrixBase<float>::CountZeros(*(_QWORD *)(v7 + 8 * v9));
  }
  else
  {
    result = 0;
  }
  *a2 = result;
  return result;
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::LinearTransform(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = &off_1E5D2D150;
  *(_OWORD *)(a1 + 56) = xmmword_1AE13F660;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(_QWORD *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 86) = 0;
  *(_QWORD *)(a1 + 88) = &unk_1E5D2CD50;
  *(_QWORD *)(a1 + 96) = &unk_1E5D2CD78;
  *(_QWORD *)a1 = &unk_1E5D2CC18;
  v6 = operator new();
  kaldi::QuantizedMatrix<short>::QuantizedMatrix(v6, a3, a2);
  *(_QWORD *)(a1 + 104) = v6;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 1065353216;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_BYTE *)(a1 + 224) = 0;
  return a1;
}

void sub_1AD9CCD9C(_Unwind_Exception *a1)
{
  kaldi::nnet1::UpdatableComponent *v1;
  quasar::Bitmap *v2;
  quasar::Bitmap *v3;
  uint64_t v4;

  MEMORY[0x1AF44D190](v4, 0x10D0C4068EB0291);
  quasar::Bitmap::~Bitmap(v3);
  quasar::Bitmap::~Bitmap(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::LinearTransform(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  char v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23[35];

  *(_QWORD *)a1 = off_1E5D32508;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = off_1E5D2E4A0;
  *(_QWORD *)(a1 + 48) = &off_1E5D2D150;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 88) = &unk_1E5D2CD50;
  *(_QWORD *)(a1 + 96) = &unk_1E5D2CD78;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)a1 = &unk_1E5D2CC18;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 112), (uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 3);
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 136), *(_QWORD *)(a2 + 136), *(_QWORD *)(a2 + 144), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 144) - *(_QWORD *)(a2 + 136)) >> 4));
  v6 = *(_DWORD *)(a2 + 160);
  v7 = *(_QWORD *)(a2 + 164);
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 160) = v6;
  *(_QWORD *)(a1 + 164) = v7;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 176), *(const void **)(a2 + 176), *(_QWORD *)(a2 + 184), (uint64_t)(*(_QWORD *)(a2 + 184) - *(_QWORD *)(a2 + 176)) >> 2);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 200), *(const void **)(a2 + 200), *(_QWORD *)(a2 + 208), (uint64_t)(*(_QWORD *)(a2 + 208) - *(_QWORD *)(a2 + 200)) >> 2);
  v8 = *(_BYTE *)(a2 + 224);
  *(_OWORD *)(a1 + 232) = 0u;
  *(_BYTE *)(a1 + 224) = v8;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  if (*(_BYTE *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
  }
  v9 = *(int **)(a2 + 104);
  if (v9)
  {
    kaldi::NewCuSubOrMat<short>(v9, v23);
    v10 = v23[0];
    v23[0] = 0;
    std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 104), v10);
    v11 = v23[0];
    v23[0] = 0;
    if (v11)
    {
      v12 = kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v11);
      MEMORY[0x1AF44D190](v12, 0x10D0C4068EB0291);
    }
  }
  v14 = *(_QWORD *)(a1 + 112);
  v13 = *(_QWORD *)(a1 + 120);
  if (v13 != v14)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(_QWORD *)(a2 + 112);
      if (*(_QWORD *)(v17 + 8 * v16))
      {
        kaldi::NewCuSubOrMat<float>(*(_QWORD *)(v17 + (v15 >> 29)), *(unsigned __int8 *)(a1 + 16), v23);
        v18 = *(_QWORD *)(a1 + 112);
        v19 = v23[0];
        v23[0] = 0;
        v20 = *(_QWORD *)(v18 + 8 * v16);
        *(_QWORD *)(v18 + 8 * v16) = v19;
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
        v21 = v23[0];
        v23[0] = 0;
        if (v21)
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
        v14 = *(_QWORD *)(a1 + 112);
        v13 = *(_QWORD *)(a1 + 120);
      }
      ++v16;
      v15 += 0x100000000;
    }
    while (v16 < (v13 - v14) >> 3);
  }
  if (*(_QWORD *)(a2 + 240) != *(_QWORD *)(a2 + 232))
  {
    kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::EnsureCorrs(a1);
    kaldi::nnet1::QuantizerResidualAggregator::PushSetup((uint64_t *)(a1 + 232), *(_QWORD *)(*(_QWORD *)(a1 + 112)+ 8 * ((((*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) << 29) - 0x100000000) >> 32)));
  }
  return a1;
}

void sub_1AD9CD0D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, quasar::Bitmap *a10, quasar::Bitmap *a11, uint64_t a12)
{
  kaldi::nnet1::UpdatableComponent *v12;
  void **v13;
  void **v14;
  void **v15;
  void *v17;
  void *v18;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v15);
  v17 = *v14;
  if (*v14)
  {
    *((_QWORD *)v12 + 26) = v17;
    operator delete(v17);
  }
  v18 = *v13;
  if (*v13)
  {
    *((_QWORD *)v12 + 23) = v18;
    operator delete(v18);
  }
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a9, 0);
  quasar::Bitmap::~Bitmap(a10);
  quasar::Bitmap::~Bitmap(a11);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v12);
  _Unwind_Resume(a1);
}

uint64_t kaldi::NewCuSubOrMat<short>@<X0>(int *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = kaldi::QuantizedMatrix<short>::QuantizedMatrix(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1AD9CD1BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10D0C4068EB0291);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::~LinearTransform(uint64_t a1)
{
  quasar::Bitmap *v2;
  quasar::Bitmap *v3;
  void *v4;
  void *v5;
  void **v6;

  *(_QWORD *)(a1 + 88) = &unk_1E5D2CD50;
  v2 = (quasar::Bitmap *)(a1 + 88);
  *(_QWORD *)a1 = &unk_1E5D2CC18;
  *(_QWORD *)(a1 + 96) = &unk_1E5D2CD78;
  v3 = (quasar::Bitmap *)(a1 + 96);
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 232));
  v4 = *(void **)(a1 + 200);
  if (v4)
  {
    *(_QWORD *)(a1 + 208) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 176);
  if (v5)
  {
    *(_QWORD *)(a1 + 184) = v5;
    operator delete(v5);
  }
  v6 = (void **)(a1 + 136);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)(a1 + 112);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 104), 0);
  quasar::Bitmap::~Bitmap(v3);
  quasar::Bitmap::~Bitmap(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::~LinearTransform(a1);
  JUMPOUT(0x1AF44D190);
}

void `non-virtual thunk to'kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::~LinearTransform(uint64_t a1)
{
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::~LinearTransform(a1 - 88);
}

{
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::~LinearTransform(a1 - 96);
}

{
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::~LinearTransform(a1 - 88);
  JUMPOUT(0x1AF44D190);
}

{
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::~LinearTransform(a1 - 96);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::CopyQuantized8Bit(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::LinearTransform<kaldi::QuantizedMatrix<short>>(v2, a1);
  return v2;
}

void sub_1AD9CD36C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C40045C2EC8);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::CopyQuantized8Bit(uint64_t a1)
{
  return kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::CopyQuantized8Bit(a1 - 88);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::CopyQuantized16Bit(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::LinearTransform(v2, a1);
  return v2;
}

void sub_1AD9CD3DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C40045C2EC8);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::CopyQuantized16Bit(uint64_t a1)
{
  return kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::CopyQuantized16Bit(a1 - 96);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::LinearTransform(v2, a1);
  return v2;
}

void sub_1AD9CD44C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C40045C2EC8);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  void *v7;
  BOOL v9;
  float *v10;
  BOOL v14;
  BOOL v16;
  std::string *v21;
  BOOL v22;
  BOOL v24;
  _QWORD *v25;
  void **v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  int inited;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float v37;
  float v38;
  float v39;
  int v40;
  int v41;
  void **v42;
  _QWORD v43[2];
  int v44;
  _BYTE v45[16];
  uint64_t v46;
  void *__p;
  void *v48;
  void **v49[34];
  void *v50[3];
  int v51;
  std::string v52;
  std::string v53;
  int v54;

  v54 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v53);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 160), &v52);
  v51 = -1;
  memset(v50, 0, sizeof(v50));
  v42 = v50;
  while (1)
  {
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) != 0)
      goto LABEL_106;
    kaldi::ReadToken(a2, 0, (uint64_t)v50);
    if ((SHIBYTE(v50[2]) & 0x80000000) == 0)
    {
      switch(HIBYTE(v50[2]))
      {
        case 9:
          goto LABEL_81;
        case 0xC:
          goto LABEL_76;
        case 0xD:
          if (v50[0] != (void *)0x74536D617261503CLL || *(void **)((char *)v50 + 5) != (void *)0x3E7665646474536DLL)
            goto LABEL_92;
          goto LABEL_51;
        case 0xF:
          v22 = v50[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v50 + 7) == (void *)0x3E66656F43657461;
          v10 = (float *)(a1 + 168);
          if (v22)
            goto LABEL_86;
          if (HIBYTE(v50[2]) == 9)
            goto LABEL_81;
          if (HIBYTE(v50[2]) != 12)
            goto LABEL_92;
LABEL_76:
          if (v50[0] != (void *)0x536D6F646E61523CLL || LODWORD(v50[1]) != 1046766949)
            goto LABEL_80;
          goto LABEL_88;
        case 0x12:
          goto LABEL_61;
        case 0x13:
          if (v50[0] == (void *)0x61725474696E493CLL
            && v50[1] == (void *)0x79546D726F66736ELL
            && *(void **)((char *)&v50[1] + 3) == (void *)0x3E657079546D726FLL)
          {
            goto LABEL_89;
          }
          if (HIBYTE(v50[2]) == 9)
            goto LABEL_81;
          if (HIBYTE(v50[2]) != 18)
            goto LABEL_91;
LABEL_61:
          if (v50[0] == (void *)0x6E6569646172473CLL
            && v50[1] == (void *)0x7079546D726F4E74
            && LOWORD(v50[2]) == 15973)
          {
            goto LABEL_69;
          }
LABEL_80:
          if (HIBYTE(v50[2]) != 9)
          {
LABEL_91:
            if (HIBYTE(v50[2]) == 12)
              goto LABEL_101;
            goto LABEL_92;
          }
LABEL_81:
          v24 = v50[0] == (void *)0x6461724778614D3CLL && LOBYTE(v50[1]) == 62;
          v10 = (float *)(a1 + 164);
          if (!v24)
            goto LABEL_92;
          break;
        default:
          goto LABEL_92;
      }
      goto LABEL_86;
    }
    v7 = v50[1];
    if (v50[1] == (void *)13
      && *(_QWORD *)v50[0] == 0x74536D617261503CLL
      && *(_QWORD *)((char *)v50[0] + 5) == 0x3E7665646474536DLL)
    {
LABEL_51:
      v10 = (float *)&v54;
      goto LABEL_86;
    }
    if (v50[1] == (void *)15)
    {
      v9 = *(_QWORD *)v50[0] == 0x61526E7261654C3CLL && *(_QWORD *)((char *)v50[0] + 7) == 0x3E66656F43657461;
      v10 = (float *)(a1 + 168);
      if (v9)
        goto LABEL_86;
      v7 = v50[1];
    }
    if (v7 == (void *)12)
    {
      if (*(_QWORD *)v50[0] == 0x536D6F646E61523CLL && *((_DWORD *)v50[0] + 2) == 1046766949)
      {
LABEL_88:
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v51);
        goto LABEL_87;
      }
      v7 = v50[1];
    }
    if (v7 == (void *)19)
    {
      if (*(_QWORD *)v50[0] == 0x61725474696E493CLL
        && *((_QWORD *)v50[0] + 1) == 0x79546D726F66736ELL
        && *(_QWORD *)((char *)v50[0] + 11) == 0x3E657079546D726FLL)
      {
LABEL_89:
        v21 = &v53;
        goto LABEL_90;
      }
      v7 = v50[1];
    }
    if (v7 != (void *)18)
      goto LABEL_45;
    v14 = *(_QWORD *)v50[0] == 0x6E6569646172473CLL && *((_QWORD *)v50[0] + 1) == 0x7079546D726F4E74;
    if (!v14 || *((_WORD *)v50[0] + 8) != 15973)
      break;
LABEL_69:
    v21 = &v52;
LABEL_90:
    kaldi::ReadToken(a2, 0, (uint64_t)v21);
LABEL_87:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v7 = v50[1];
LABEL_45:
  if (v7 != (void *)9)
    goto LABEL_99;
  v16 = *(_QWORD *)v50[0] == 0x6461724778614D3CLL && *((_BYTE *)v50[0] + 8) == 62;
  v10 = (float *)(a1 + 164);
  if (v16)
  {
LABEL_86:
    kaldi::ReadBasicType<float>(a2, 0, v10);
    goto LABEL_87;
  }
  v7 = v50[1];
LABEL_99:
  if (v7 != (void *)12)
    goto LABEL_92;
  v42 = (void **)v50[0];
LABEL_101:
  if (*v42 != (void *)0x6E6F706D6F432F3CLL || *((_DWORD *)v42 + 2) != 1047817829)
  {
LABEL_92:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Unknown token ", 14);
    if (SHIBYTE(v50[2]) >= 0)
      v26 = v50;
    else
      v26 = (void **)v50[0];
    if (SHIBYTE(v50[2]) >= 0)
      v27 = HIBYTE(v50[2]);
    else
      v27 = (uint64_t)v50[1];
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" (ParamStddev|LearnRateCoef|InitTransformType|RandomSeed|GradientNormType|MaxGrad)", 82);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v49);
  }
LABEL_106:
  inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v53);
  *(_DWORD *)(a1 + 160) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v52);
  if (v51 >= 1)
    kaldi::UniformRandomNumber::SetRandomSeeds(a3, v51);
  kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v45, a3);
  kaldi::Matrix<float>::Matrix((uint64_t)v43, *(unsigned int *)(a1 + 12), *(unsigned int *)(a1 + 8), 0, 0);
  v32 = *(_DWORD *)(a1 + 12);
  if (v32 < 1)
    goto LABEL_124;
  v33 = 0;
  LODWORD(v34) = *(_DWORD *)(a1 + 8);
  while (2)
  {
    if ((int)v34 < 1)
      goto LABEL_123;
    v35 = 0;
    while (2)
    {
      switch(inited)
      {
        case 0:
          if (v33 == v35)
            v37 = 1.0;
          else
            v37 = 0.0;
          goto LABEL_120;
        case 2:
          v38 = *(float *)&v54;
          kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v45, 0);
          v37 = v38 * v39;
LABEL_120:
          *(float *)(v43[0] + 4 * (int)v33 * v44 + 4 * v35) = v37;
          break;
        case 1:
          v36 = *(float *)&v54;
          v37 = (kaldi::UniformRandomNumber::RandUniform(a3, 0) + -0.5) * (float)(v36 + v36);
          goto LABEL_120;
      }
      ++v35;
      v34 = *(int *)(a1 + 8);
      if (v35 < v34)
        continue;
      break;
    }
    v32 = *(_DWORD *)(a1 + 12);
LABEL_123:
    if (++v33 < v32)
      continue;
    break;
  }
LABEL_124:
  v40 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 104));
  if (v40 != kaldi::MatrixBase<float>::NumRows((uint64_t)v43)
    || (v41 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 104)),
        v41 != kaldi::MatrixBase<float>::NumCols((uint64_t)v43)))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Linearity().NumRows() == mat.NumRows() && Linearity().NumCols() == mat.NumCols()", 80);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v49);
  }
  kaldi::QuantizedMatrixBase<short>::CopyFromMat(*(_QWORD *)(a1 + 104), (uint64_t)v43);
  kaldi::Matrix<float>::~Matrix((uint64_t)v43);
  if (__p)
  {
    v48 = __p;
    operator delete(__p);
  }
  v49[0] = (void **)&v46;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](v49);
  if (SHIBYTE(v50[2]) < 0)
    operator delete(v50[0]);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::ReadData(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  BOOL v7;
  __int128 *v9;
  uint64_t v10;
  BOOL v11;
  float *v12;
  uint64_t v15;
  int v16;
  BOOL v17;
  BOOL v18;
  _QWORD *v20;
  __int128 *v21;
  uint64_t v22;
  void *__p[2];
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  while (kaldi::Peek(a2, a3) == 60)
  {
    v26 = 0uLL;
    v27 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v26);
    if (SHIBYTE(v27) < 0)
    {
      v10 = *((_QWORD *)&v26 + 1);
      if (*((_QWORD *)&v26 + 1) != 15
        || (*(_QWORD *)v26 == 0x61526E7261654C3CLL ? (v11 = *(_QWORD *)(v26 + 7) == 0x3E66656F43657461) : (v11 = 0),
            v12 = (float *)(a1 + 168),
            !v11))
      {
        if (*((_QWORD *)&v26 + 1) == 18)
        {
          if (*(_QWORD *)v26 == 0x6E6569646172473CLL
            && *(_QWORD *)(v26 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v26 + 16) == 15973)
          {
            goto LABEL_46;
          }
          v10 = *((_QWORD *)&v26 + 1);
        }
        if (v10 != 9)
          goto LABEL_49;
        v9 = (__int128 *)v26;
        goto LABEL_31;
      }
    }
    else
    {
      if (HIBYTE(v27) == 9)
      {
        v9 = &v26;
LABEL_31:
        v15 = *(_QWORD *)v9;
        v16 = *((unsigned __int8 *)v9 + 8);
        v17 = v15 == 0x6461724778614D3CLL && v16 == 62;
        v12 = (float *)(a1 + 164);
        if (!v17)
        {
LABEL_49:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
          if (v27 >= 0)
            v21 = &v26;
          else
            v21 = (__int128 *)v26;
          if (v27 >= 0)
            v22 = HIBYTE(v27);
          else
            v22 = *((_QWORD *)&v26 + 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
        goto LABEL_41;
      }
      if (HIBYTE(v27) != 15)
      {
        if (HIBYTE(v27) != 18)
          goto LABEL_49;
        v7 = (_QWORD)v26 == 0x6E6569646172473CLL && *((_QWORD *)&v26 + 1) == 0x7079546D726F4E74;
        if (!v7 || (unsigned __int16)v27 != 15973)
          goto LABEL_49;
LABEL_46:
        __p[0] = 0;
        __p[1] = 0;
        v25 = 0;
        kaldi::ReadToken(a2, a3, (uint64_t)__p);
        *(_DWORD *)(a1 + 160) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
        if (SHIBYTE(v25) < 0)
          operator delete(__p[0]);
        goto LABEL_42;
      }
      v18 = (_QWORD)v26 == 0x61526E7261654C3CLL && *(_QWORD *)((char *)&v26 + 7) == 0x3E66656F43657461;
      v12 = (float *)(a1 + 168);
      if (!v18)
        goto LABEL_49;
    }
LABEL_41:
    kaldi::ReadBasicType<float>(a2, a3, v12);
LABEL_42:
    if (SHIBYTE(v27) < 0)
      operator delete((void *)v26);
  }
  kaldi::QuantizedMatrix<short>::Read(*(float **)(a1 + 104), a2, a3, a4);
  *(_BYTE *)(a1 + 16) = 0;
  kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 104));
  return kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 104));
}

void sub_1AD9CDEB0()
{
  JUMPOUT(0x1AD9CDEB8);
}

_QWORD *kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::WriteConfig(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::string __p;

  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 160), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  return kaldi::WriteBasicType<float>((uint64_t)a2, a3);
}

void sub_1AD9CDF8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::WriteData(int **a1, _QWORD *a2, int a3, int a4)
{
  (*((void (**)(int **))*a1 + 21))(a1);
  return kaldi::QuantizedMatrix<short>::Write(a1[13], a2, a3, a4);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::NumParams(uint64_t a1)
{
  int v2;

  v2 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 104));
  return kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 104)) * v2;
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::GetParams(uint64_t a1, void **a2)
{
  int v4;
  uint64_t v5;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 104));
  v5 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 104)) * v4;
  kaldi::Vector<float>::Resize(a2, v5, 0);
  v8 = 0;
  v9 = 0;
  v7 = *a2;
  LODWORD(v8) = v5;
  return kaldi::VectorBase<float>::CopyRowsFromMat<short>((uint64_t *)&v7, *(float **)(a1 + 104));
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::SetParams(unsigned int **a1, char **a2)
{
  (*((void (**)(unsigned int **))*a1 + 22))(a1);
  return kaldi::QuantizedMatrixBase<short>::CopyRowsFromVec(a1[13], a2);
}

float kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::SumParams(uint64_t a1)
{
  return kaldi::QuantizedMatrixBase<short>::Sum(*(int **)(a1 + 104));
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::PerturbParams(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int32x2_t v4[6];

  v2 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 104));
  v3 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 104));
  kaldi::CuMatrix<float>::CuMatrix(v4, v2, v3, 1, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v4);
  kaldi::QuantizedMatrixBase<short>::AddMat();
}

uint64_t sub_1AD9CE144()
{
  uint64_t v1;

  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v1);
}

void sub_1AD9CE160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::Info(kaldi::quasar::Vocab **a1)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  void *__p[2];
  unsigned __int8 v7;
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  (*((void (**)(kaldi::quasar::Vocab **, _QWORD *, _QWORD))*a1 + 21))(a1, v8, 0);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n linearity", 11);
  kaldi::nnet1::MomentStatistics<short>(a1[13]);
  if ((v7 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v7 & 0x80u) == 0)
    v4 = v7;
  else
    v4 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  if ((char)v7 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v8[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v8[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v9 < 0)
    operator delete((void *)v8[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v10);
}

void sub_1AD9CE28C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::MomentStatistics<short>(kaldi::quasar::Vocab *a1)
{
  int v2;
  int v3;
  void *v4[3];

  v2 = kaldi::quasar::Vocab::VocabSize(a1);
  v3 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a1);
  memset(v4, 0, sizeof(v4));
  kaldi::Vector<float>::Resize(v4, (v3 * v2), 0);
  kaldi::VectorBase<float>::CopyRowsFromMat<short>((uint64_t *)v4, (float *)a1);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)v4);
  kaldi::Vector<float>::Destroy((uint64_t)v4);
}

void sub_1AD9CE338(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::InfoGradient(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  unsigned __int8 v16;
  std::string v17;
  std::string v18;
  std::string v19;

  std::string::basic_string[abi:ne180100]<0>(&v17, "\n  linearity_grad");
  kaldi::nnet1::MomentStatistics<float>((_QWORD *)(a1 + 112));
  if ((v16 & 0x80u) == 0)
    v4 = v15;
  else
    v4 = (void **)v15[0];
  if ((v16 & 0x80u) == 0)
    v5 = v16;
  else
    v5 = (std::string::size_type)v15[1];
  v6 = std::string::append(&v17, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v18, ", lr-coef ");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v14 & 0x80u) == 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if ((v14 & 0x80u) == 0)
    v11 = v14;
  else
    v11 = (std::string::size_type)__p[1];
  v12 = std::string::append(&v19, (const std::string::value_type *)v10, v11);
  *a2 = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((char)v14 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if ((char)v16 < 0)
    operator delete(v15[0]);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
}

void sub_1AD9CE498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v33 - 41) < 0)
    operator delete(*(void **)(v33 - 64));
  if (a33 < 0)
    operator delete(a28);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void **kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  LODWORD(a4) = 1.0;
  return kaldi::CuMatrixBase<float>::AddMatMat<short>(a3, a2, 111, *(kaldi::quasar::Vocab **)(a1 + 104), 112, a4, 0.0);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::PropagateFnc()
{
  kaldi::CuVectorBase<float>::AddMatVec<short>();
}

void **kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::BackpropagateFnc(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  LODWORD(a2) = 1.0;
  return kaldi::CuMatrixBase<float>::AddMatMat<short>(a6, a5, 111, *(kaldi::quasar::Vocab **)(a1 + 104), 111, a2, 0.0);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v6;
  _BYTE v7[16];

  kaldi::QuantizedMatrixBase<short>::Row(*(_QWORD *)(a1 + 104), a3, (uint64_t)v7);
  LODWORD(v6) = 1.0;
  kaldi::CuVectorBase<float>::AddMatVec<short>(a4, a2, 111, (uint64_t)v7, v6, 0.0);
}

float kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3)
{
  _BYTE v5[16];

  kaldi::QuantizedMatrixBase<short>::Row(*(_QWORD *)(a1 + 104), a3, (uint64_t)v5);
  return kaldi::VecVec<float,short>(a2, (uint64_t)v5);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  float v10;
  uint64_t v11;

  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::EnsureCorrs(a1);
  v10 = *(float *)(a1 + 60);
  *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * a5) = *(_DWORD *)(a2 + 20);
  v11 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(*(_QWORD *)(v11 + 8 * a5) + 32) = a4;
  kaldi::CuMatrixBase<float>::AddMatMat(*(_QWORD *)(v11 + 8 * a5), a3, CblasTrans, a2, CblasNoTrans, 1.0, v10);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::EnsureCorrs(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  _QWORD *v5;
  std::vector<unsigned int>::size_type v6;
  uint64_t v7;
  unsigned int v8;
  int32x2_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int32x2_t *v13;
  uint64_t v14;
  uint64_t v15;

  if (!*(_BYTE *)(a1 + 224))
  {
    v2 = *(_DWORD *)(a1 + 160);
    v3 = *(_DWORD *)(a1 + 80);
    if (v3 > 1)
      v4 = v3 + 1;
    else
      v4 = 1;
    v5 = (_QWORD *)(a1 + 112);
    v6 = v4;
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 112, v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 136), v4);
    if (v4 >= 1)
    {
      v7 = 0;
      v8 = v2 & 0xFFFFFFFE;
      do
      {
        v9 = (int32x2_t *)operator new();
        v10 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 104));
        v11 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 104));
        kaldi::CuMatrix<float>::CuMatrix(v9, v10, v11, 0, 0, 0);
        v12 = *(_QWORD *)(*v5 + 8 * v7);
        *(_QWORD *)(*v5 + 8 * v7) = v9;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
        if (v8 == 2)
        {
          v13 = (int32x2_t *)(*(_QWORD *)(a1 + 136) + 48 * v7);
          v14 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 104));
          v15 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 104));
          kaldi::CuMatrix<float>::Resize(v13, v14, v15, 1, 0);
          if (*(_DWORD *)(a1 + 160) == 3)
            kaldi::CuMatrixBase<float>::Set(*(_QWORD *)(a1 + 136) + 48 * v7, 1.0);
        }
        ++v7;
      }
      while (v7 != v6);
    }
    std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 176), v6);
    *(_BYTE *)(a1 + 224) = 1;
  }
}

void sub_1AD9CE7E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C40CC61A6CELL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 164) = a3;
  *(_DWORD *)(result + 160) = a2;
  *(_BYTE *)(result + 224) = 0;
  return result;
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::NormalizeGradients(uint64_t a1, int a2, float a3)
{
  int v3;

  v3 = *(_DWORD *)(a1 + 160);
  if (v3 == 3)
  {
    if (a3 >= 0.0 && a3 <= 1.0)
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * a2), *(_QWORD *)(a1 + 136) + 48 * a2, a3);
  }
  else if (v3 == 2)
  {
    if (a3 > 0.0)
    {
      if (*(_BYTE *)(a1 + 84))
        a3 = (float)*(int *)(*(_QWORD *)(a1 + 176) + 4 * a2) * a3;
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * a2), (int *)(*(_QWORD *)(a1 + 136) + 48 * a2), a3);
    }
  }
  else if (v3 == 1 && a3 > 0.0)
  {
    if (*(_BYTE *)(a1 + 84))
      a3 = (float)*(int *)(*(_QWORD *)(a1 + 176) + 4 * a2) * a3;
    kaldi::nnet1::UpdatableComponent::ClipGradient(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * a2), a3);
  }
}

float kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::GetNormalizedLearningRate(uint64_t a1, int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;

  if (!*(_BYTE *)(a1 + 84))
    return *(float *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 200);
  v3 = *(_QWORD *)(a1 + 208) - v2;
  if (!v3)
    return NAN;
  v4 = v3 >> 2;
  if ((int)v4 <= a2)
    return NAN;
  v5 = v4 - 1;
  if (a2 >= 0)
    v5 = a2;
  return *(float *)(v2 + 4 * v5);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::UpdateWeights()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented except for BaseFloat weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t **v8;
  uint64_t v9;

  v8 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  ((void (*)(uint64_t **, uint64_t, uint64_t, _QWORD, _QWORD))(*v8)[29])(v8, a2, a3, 0, 0);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a4, v9, 1);
  kaldi::VectorBase<float>::CopyRowsFromMat(a4, *v8[14]);
  return ((uint64_t (*)(uint64_t **))(*v8)[1])(v8);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::VectorizeWeightsCorrs()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented except for BaseFloat weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::SetLinearity(uint64_t a1, uint64_t a2)
{
  kaldi::MatrixBase<float>::NumRows(a2);
  kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 104));
  kaldi::MatrixBase<float>::NumCols(a2);
  kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 104));
  kaldi::QuantizedMatrixBase<short>::CopyFromMat(*(_QWORD *)(a1 + 104), a2);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t result;
  _QWORD *v11;
  _QWORD v12[34];

  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::EnsureCorrs(a1);
  v6 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 104));
  *a3 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 104)) * v6;
  v7 = *(_QWORD *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 120) - v7;
  if (v8)
  {
    if (*(_DWORD *)(a1 + 80) == 1)
      v9 = 0;
    else
      v9 = *(_DWORD *)(a1 + 80);
    if ((v8 >> 3) - 1 != v9)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Unexpected mismatch in indexes: ", 32);
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  ", 2);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
    }
    result = kaldi::CuMatrixBase<float>::CountZeros(*(_QWORD *)(v7 + 8 * v9));
  }
  else
  {
    result = 0;
  }
  *a2 = result;
  return result;
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearTransform(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int32x2_t *v6;

  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = &off_1E5D2D150;
  *(_OWORD *)(a1 + 56) = xmmword_1AE13F660;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(_QWORD *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 86) = 0;
  *(_QWORD *)(a1 + 88) = &unk_1E5D2CA40;
  *(_QWORD *)(a1 + 96) = &unk_1E5D2CA68;
  *(_QWORD *)a1 = &unk_1E5D2C908;
  v6 = (int32x2_t *)operator new();
  kaldi::CuMatrix<float>::CuMatrix(v6, a3, a2, 0, 0, 0);
  *(_QWORD *)(a1 + 104) = v6;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 1065353216;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_BYTE *)(a1 + 224) = 0;
  return a1;
}

void sub_1AD9CECB4(_Unwind_Exception *a1)
{
  kaldi::nnet1::UpdatableComponent *v1;
  quasar::Bitmap *v2;
  quasar::Bitmap *v3;
  uint64_t v4;

  MEMORY[0x1AF44D190](v4, 0x1081C40CC61A6CELL);
  quasar::Bitmap::~Bitmap(v3);
  quasar::Bitmap::~Bitmap(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::VectorizeWeightsCorrs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25[34];

  if (*(_BYTE *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, "Weights are already vectorized");
LABEL_23:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25);
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Performing  vectorization of linear component", 45);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v25);
  }
  v8 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 16) * *(_DWORD *)(*(_QWORD *)(a1 + 104) + 20);
  kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(a1 + 104), a2, v25);
  v9 = v25[0];
  v25[0] = 0;
  v10 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v9;
  if (v10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
    v11 = v25[0];
    v25[0] = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  }
  v12 = *(_QWORD *)(a3 + 8);
  v25[0] = (uint64_t)&unk_1E5D29D70;
  v25[1] = v12;
  v25[3] = *(_QWORD *)(a3 + 24);
  v25[2] = v8;
  kaldi::CuVectorBase<float>::Set((uint64_t)v25, *(float *)(a1 + 168));
  v13 = *(_DWORD *)(a3 + 16) - v8;
  *(_QWORD *)(a3 + 8) += 4 * v8;
  *(_DWORD *)(a3 + 16) = v13;
  *(_QWORD *)(a3 + 24) = 0;
  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  v14 = a4[1];
  if ((v14 - *a4) >> 5 != (uint64_t)(*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) >> 3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, "veccorrs->size() == linearity_corr_.size()");
    goto LABEL_23;
  }
  if (v14 == *a4)
    goto LABEL_19;
  v15 = 0;
  v16 = 0;
  do
  {
    v17 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + (v15 >> 29)) + 16)
        * *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + (v15 >> 29)) + 20);
    if (v17 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, "LinearityCorr(ic).NumRows() * LinearityCorr(ic).NumCols() == NumParams()");
      goto LABEL_23;
    }
    ++v16;
    v18 = *a4;
    v19 = a4[1];
    v15 += 0x100000000;
  }
  while (v16 < (v19 - *a4) >> 5);
  if (v19 != v18)
  {
    v20 = 0;
    do
    {
      kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(*(_QWORD *)(a1 + 112) + 8 * v20), v18 + 32 * v20, v25);
      v21 = *(_QWORD *)(a1 + 112);
      v22 = v25[0];
      v25[0] = 0;
      v23 = *(_QWORD *)(v21 + 8 * v20);
      *(_QWORD *)(v21 + 8 * v20) = v22;
      if (v23)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
      v24 = v25[0];
      v25[0] = 0;
      if (v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
      ++v20;
      v18 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 5);
  }
LABEL_19:
  *(_BYTE *)(a1 + 16) = 1;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Done  vectorization of linear component", 39);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v25);
  }
}

void sub_1AD9CEF98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

uint64_t kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v6 = *a1;
  v7 = operator new();
  kaldi::CuSubMatrix<float>::CuSubMatrix(v7, v6, a2);
  *a3 = v7;
  result = *a1;
  *a1 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void sub_1AD9CF054(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C404B8BC54CLL);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::UpdateWeights(uint64_t a1, uint64_t a2, int a3)
{
  float v6;
  float v7;
  float v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  int *v18;
  int v19;
  float v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  _QWORD v24[34];

  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  v7 = *(float *)(a1 + 64);
  v6 = *(float *)(a1 + 68);
  v8 = *(float *)(a1 + 72);
  v9 = *(_DWORD *)(a1 + 76);
  *(_QWORD *)(*(_QWORD *)(a1 + 104) + 32) = a2;
  v10 = *(unsigned int *)(a1 + 80);
  if (a3 >= 0)
    v11 = a3;
  else
    v11 = *(_DWORD *)(a1 + 80);
  if ((_DWORD)v10 == 1)
    v12 = 0;
  else
    v12 = v11;
  v13 = *(uint64_t **)(a1 + 112);
  v14 = v12;
  *(_QWORD *)(v13[v12] + 32) = a2;
  *(_QWORD *)(*(_QWORD *)(a1 + 136) + 48 * v12 + 32) = a2;
  if (v12 == (_DWORD)v10)
  {
    kaldi::CuMatrixBase<float>::AddMat(v13[v12], *v13, 111, 1.0, 0.0);
    if (*(int *)(a1 + 80) > 1)
    {
      v15 = 1;
      do
        kaldi::CuMatrixBase<float>::AddMat(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v14), *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v15++), 111, 1.0, 1.0);
      while (v15 < *(int *)(a1 + 80));
    }
    v16 = *(int **)(a1 + 176);
    v16[v14] = 0;
    if ((int)v10 >= 1)
    {
      v17 = 0;
      v18 = v16;
      do
      {
        v19 = *v18++;
        v17 += v19;
        v16[v14] = v17;
        --v10;
      }
      while (v10);
    }
  }
  v20 = *(float *)(a1 + 56);
  if (*(_BYTE *)(a1 + 84))
    v20 = v20 / (float)*(int *)(*(_QWORD *)(a1 + 176) + 4 * v14);
  v21 = *(_QWORD *)(a1 + 200);
  if (v14 >= (*(_QWORD *)(a1 + 208) - v21) >> 2)
  {
    LODWORD(v24[0]) = 2143289344;
    std::vector<float>::resize(a1 + 200, (int)v14 + 1, v24);
    v21 = *(_QWORD *)(a1 + 200);
  }
  *(float *)(v21 + 4 * v14) = v20;
  if (*(float *)(a1 + 164) >= 0.0)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a1 + 248))(a1, v14);
  if (v7 != 0.0)
    kaldi::CuMatrixBase<float>::AddMat(*(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 104), 111, (float)-(float)(v20 * v7) * (float)*(int *)(*(_QWORD *)(a1 + 176) + 4 * v14), 1.0);
  if (v6 != 0.0)
    kaldi::cu::RegularizeL1<float>(*(_QWORD *)(a1 + 104), *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v14), (float)(v6 * v20) * (float)*(int *)(*(_QWORD *)(a1 + 176) + 4 * v14), v20);
  if (v8 > 0.0)
  {
    if (*(int *)(a1 + 80) >= 2)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v24, "the multi batch gradient quantization does not work yet");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24);
    }
    if (*(_QWORD *)(a1 + 240) == *(_QWORD *)(a1 + 232))
    {
      kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
      kaldi::nnet1::QuantizerResidualAggregator::PushSetup((uint64_t *)(a1 + 232), *(_QWORD *)(*(_QWORD *)(a1 + 112)+ 8 * ((((*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) << 29) - 0x100000000) >> 32)));
    }
    kaldi::nnet1::QuantizerResidualAggregator::Quantize((kaldi::nnet1::QuantizerResidualAggregator *)(a1 + 232), v9, v8);
  }
  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::ApplyCorr(a1, v14, v20);
  v22 = *(_BYTE **)(a1 + 176);
  if ((_DWORD)v14 == *(_DWORD *)(a1 + 80))
  {
    v23 = *(_BYTE **)(a1 + 184);
    if (v22 != v23)
      bzero(v22, ((v23 - v22 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
  }
  else
  {
    *(_DWORD *)&v22[4 * v14] = 0;
  }
}

uint64_t kaldi::nnet1::QuantizerResidualAggregator::Quantize(kaldi::nnet1::QuantizerResidualAggregator *this, int a2, float a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = *(_QWORD *)this;
  do
  {
    result = kaldi::nnet1::QuantizerResidualAggregator::AddCorrectionToResidualAndQuantize(a2, *((_QWORD *)this + 3) + v7, v9 + v6, *((_QWORD *)this + 6) + v7, a3);
    ++v8;
    v9 = *(_QWORD *)this;
    v7 += 40;
    v6 += 48;
  }
  while (v8 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4));
  return result;
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::GetType()
{
  return 258;
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::GetType()
{
  return 259;
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::GetType()
{
  return 260;
}

void kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(void **this)
{
  void **v2;

  v2 = this + 6;
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 3;
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 40;
      v7 = v4 - 40;
      do
      {
        v8 = *(_QWORD *)v7;
        v7 -= 40;
        (*(void (**)(char *))(v8 + 16))(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<kaldi::CuMatrix<float>>::__push_back_slow_path<kaldi::CuMatrix<float>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[48 * v4];
  v16 = &v10[48 * v9];
  kaldi::CuMatrix<float>::CuMatrix(v14, a2, 111);
  v15 = v14 + 48;
  std::vector<kaldi::CuMatrix<float>>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<kaldi::CuMatrix<float>>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1AD9CF5C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::CuMatrix<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<kaldi::CuSubMatrix<float>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 != *result)
  {
    do
    {
      *(_QWORD *)(v4 - 40) = &unk_1E5D29D40;
      v4 -= 40;
      v5 = *(_QWORD *)(v3 - 8);
      v6 = *(_OWORD *)(v3 - 24);
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(v3 - 32);
      *(_OWORD *)(v4 + 16) = v6;
      *(_QWORD *)(v4 + 32) = v5;
      v3 -= 40;
    }
    while (v3 != v2);
  }
  a2[1] = v4;
  v7 = *result;
  *result = v4;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<kaldi::CuSubMatrix<float>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(_QWORD *)(i - 40);
    *(_QWORD *)(a1 + 16) = i - 40;
    (*(void (**)(void))(v4 + 16))();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t kaldi::nnet1::QuantizerResidualAggregator::AddCorrectionToResidualAndQuantize(int a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  _QWORD *v10;
  _QWORD *v11;
  _QWORD v12[34];

  kaldi::CuMatrixBase<float>::AddMat(a3, a2, 111, 1.0, 1.0);
  if (!a1)
    return kaldi::ZeroSmallValues<float>(a3, a4, a5);
  if (a1 != 3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Wrong quantizer type (neither ", 30);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" nor ", 5);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"): ", 4);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
  return kaldi::Quant3Levels<float>(a3, a4, a5);
}

void std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t kaldi::CuSubMatrix<float>::CuSubMatrix(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  uint64_t v8;
  int v9;
  _QWORD *v11;
  _QWORD v12[4];
  _OWORD v13[17];

  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &unk_1E5D29D40;
  v5 = *(_DWORD *)(a2 + 20);
  v6 = *(_DWORD *)(a2 + 16) * v5;
  if (*(_DWORD *)(a3 + 16) < v6)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Insufficient storage area: ", 27);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" needed: ", 9);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  v8 = *(_QWORD *)(a3 + 8);
  v12[0] = &unk_1E5D29D70;
  v12[1] = v8;
  v12[3] = *(_QWORD *)(a3 + 24);
  v12[2] = v6;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)v13, (uint64_t)v12, v5);
  if (v13 != (_OWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = *((_QWORD *)&v13[0] + 1);
    *(_OWORD *)(a1 + 16) = v13[1];
    *(_QWORD *)(a1 + 32) = *(_QWORD *)&v13[2];
  }
  *(_QWORD *)&v13[0] = &unk_1E5D29D40;
  memset((char *)v13 + 8, 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v13);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a1, a2, 111);
  v9 = *(_DWORD *)(a3 + 16) - v6;
  *(_QWORD *)(a3 + 8) += 4 * v6;
  *(_DWORD *)(a3 + 16) = v9;
  *(_QWORD *)(a3 + 24) = 0;
  return a1;
}

void sub_1AD9CF988(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1AD9CFA0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::CuMatrix<float>>,kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1AD9CFA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::CuMatrix<float>>,kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      kaldi::CuMatrix<float>::CuMatrix(a4 + v7, a2 + v7, 111);
      v7 += 48;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1AD9CFB04(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 48;
    do
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + v2) + 16))(v4 + v2);
      v2 -= 48;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::LinearTransform<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21[35];

  *(_QWORD *)a1 = off_1E5D32508;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = off_1E5D2E4A0;
  *(_QWORD *)(a1 + 48) = &off_1E5D2D150;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 88) = &unk_1E5D2CBC8;
  *(_QWORD *)(a1 + 96) = &unk_1E5D2CBF0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)a1 = &unk_1E5D2CA90;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 112), (uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 3);
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 136), *(_QWORD *)(a2 + 136), *(_QWORD *)(a2 + 144), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 144) - *(_QWORD *)(a2 + 136)) >> 4));
  v6 = *(_DWORD *)(a2 + 160);
  v7 = *(_QWORD *)(a2 + 164);
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 160) = v6;
  *(_QWORD *)(a1 + 164) = v7;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 176), *(const void **)(a2 + 176), *(_QWORD *)(a2 + 184), (uint64_t)(*(_QWORD *)(a2 + 184) - *(_QWORD *)(a2 + 176)) >> 2);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 200), *(const void **)(a2 + 200), *(_QWORD *)(a2 + 208), (uint64_t)(*(_QWORD *)(a2 + 208) - *(_QWORD *)(a2 + 200)) >> 2);
  v8 = *(_BYTE *)(a2 + 224);
  *(_OWORD *)(a1 + 232) = 0u;
  *(_BYTE *)(a1 + 224) = v8;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  if (*(_BYTE *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21);
  }
  v9 = *(_QWORD *)(a2 + 104);
  if (v9)
  {
    v10 = operator new();
    kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v10, v9);
    std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 104), v10);
  }
  v12 = *(_QWORD *)(a1 + 112);
  v11 = *(_QWORD *)(a1 + 120);
  if (v11 != v12)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = *(_QWORD *)(a2 + 112);
      if (*(_QWORD *)(v15 + 8 * v14))
      {
        kaldi::NewCuSubOrMat<float>(*(_QWORD *)(v15 + (v13 >> 29)), *(unsigned __int8 *)(a1 + 16), v21);
        v16 = *(_QWORD *)(a1 + 112);
        v17 = v21[0];
        v21[0] = 0;
        v18 = *(_QWORD *)(v16 + 8 * v14);
        *(_QWORD *)(v16 + 8 * v14) = v17;
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
        v19 = v21[0];
        v21[0] = 0;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
        v12 = *(_QWORD *)(a1 + 112);
        v11 = *(_QWORD *)(a1 + 120);
      }
      ++v14;
      v13 += 0x100000000;
    }
    while (v14 < (v11 - v12) >> 3);
  }
  if (*(_QWORD *)(a2 + 240) != *(_QWORD *)(a2 + 232))
  {
    kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(a1);
    kaldi::nnet1::QuantizerResidualAggregator::PushSetup((uint64_t *)(a1 + 232), *(_QWORD *)(*(_QWORD *)(a1 + 112)+ 8 * ((((*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) << 29) - 0x100000000) >> 32)));
  }
  return a1;
}

void sub_1AD9CFE0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, quasar::Bitmap *a9, quasar::Bitmap *a10, uint64_t *a11, uint64_t a12)
{
  kaldi::nnet1::UpdatableComponent *v12;
  uint64_t v13;
  void **v14;
  void **v15;
  void **v16;
  void *v18;
  void *v19;

  MEMORY[0x1AF44D190](v13, 0x10D0C4068EB0291);
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v16);
  v18 = *v15;
  if (*v15)
  {
    *((_QWORD *)v12 + 26) = v18;
    operator delete(v18);
  }
  v19 = *v14;
  if (*v14)
  {
    *((_QWORD *)v12 + 23) = v19;
    operator delete(v19);
  }
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a11, 0);
  quasar::Bitmap::~Bitmap(a9);
  quasar::Bitmap::~Bitmap(a10);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v12);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::LinearTransform<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21[35];

  *(_QWORD *)a1 = off_1E5D32508;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = off_1E5D2E4A0;
  *(_QWORD *)(a1 + 48) = &off_1E5D2D150;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 88) = &unk_1E5D2CD50;
  *(_QWORD *)(a1 + 96) = &unk_1E5D2CD78;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)a1 = &unk_1E5D2CC18;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 112), (uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 3);
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 136), *(_QWORD *)(a2 + 136), *(_QWORD *)(a2 + 144), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 144) - *(_QWORD *)(a2 + 136)) >> 4));
  v6 = *(_DWORD *)(a2 + 160);
  v7 = *(_QWORD *)(a2 + 164);
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 160) = v6;
  *(_QWORD *)(a1 + 164) = v7;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 176), *(const void **)(a2 + 176), *(_QWORD *)(a2 + 184), (uint64_t)(*(_QWORD *)(a2 + 184) - *(_QWORD *)(a2 + 176)) >> 2);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 200), *(const void **)(a2 + 200), *(_QWORD *)(a2 + 208), (uint64_t)(*(_QWORD *)(a2 + 208) - *(_QWORD *)(a2 + 200)) >> 2);
  v8 = *(_BYTE *)(a2 + 224);
  *(_OWORD *)(a1 + 232) = 0u;
  *(_BYTE *)(a1 + 224) = v8;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  if (*(_BYTE *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21);
  }
  v9 = *(_QWORD *)(a2 + 104);
  if (v9)
  {
    v10 = operator new();
    kaldi::QuantizedMatrix<short>::QuantizedMatrix(v10, v9);
    std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 104), v10);
  }
  v12 = *(_QWORD *)(a1 + 112);
  v11 = *(_QWORD *)(a1 + 120);
  if (v11 != v12)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = *(_QWORD *)(a2 + 112);
      if (*(_QWORD *)(v15 + 8 * v14))
      {
        kaldi::NewCuSubOrMat<float>(*(_QWORD *)(v15 + (v13 >> 29)), *(unsigned __int8 *)(a1 + 16), v21);
        v16 = *(_QWORD *)(a1 + 112);
        v17 = v21[0];
        v21[0] = 0;
        v18 = *(_QWORD *)(v16 + 8 * v14);
        *(_QWORD *)(v16 + 8 * v14) = v17;
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
        v19 = v21[0];
        v21[0] = 0;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
        v12 = *(_QWORD *)(a1 + 112);
        v11 = *(_QWORD *)(a1 + 120);
      }
      ++v14;
      v13 += 0x100000000;
    }
    while (v14 < (v11 - v12) >> 3);
  }
  if (*(_QWORD *)(a2 + 240) != *(_QWORD *)(a2 + 232))
  {
    kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::EnsureCorrs(a1);
    kaldi::nnet1::QuantizerResidualAggregator::PushSetup((uint64_t *)(a1 + 232), *(_QWORD *)(*(_QWORD *)(a1 + 112)+ 8 * ((((*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) << 29) - 0x100000000) >> 32)));
  }
  return a1;
}

void sub_1AD9D01A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, quasar::Bitmap *a9, quasar::Bitmap *a10, uint64_t *a11, uint64_t a12)
{
  kaldi::nnet1::UpdatableComponent *v12;
  uint64_t v13;
  void **v14;
  void **v15;
  void **v16;
  void *v18;
  void *v19;

  MEMORY[0x1AF44D190](v13, 0x10D0C4068EB0291);
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v16);
  v18 = *v15;
  if (*v15)
  {
    *((_QWORD *)v12 + 26) = v18;
    operator delete(v18);
  }
  v19 = *v14;
  if (*v14)
  {
    *((_QWORD *)v12 + 23) = v19;
    operator delete(v19);
  }
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a11, 0);
  quasar::Bitmap::~Bitmap(a9);
  quasar::Bitmap::~Bitmap(a10);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v12);
  _Unwind_Resume(a1);
}

uint64_t kaldi::Matrix<float>::Matrix<float>(uint64_t a1, uint64_t a2, int a3)
{
  int v6;
  int v7;
  unsigned int v8;
  int v9;

  *(_BYTE *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v6 = *(_DWORD *)(a2 + 16);
  v7 = *(_DWORD *)(a2 + 20);
  if (a3 == 111)
    v8 = *(_DWORD *)(a2 + 20);
  else
    v8 = *(_DWORD *)(a2 + 16);
  if (a3 == 111)
    v9 = v6;
  else
    v9 = v7;
  kaldi::Matrix<float>::Init(a1, v8, v9, 0);
  kaldi::CuMatrixBase<float>::CopyToMat<float>(a2, (int *)a1, a3);
  return a1;
}

void sub_1AD9D02C4(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  char *v23;
  uint64_t v24;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    v24 = v4;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    v23 = v16;
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    *((_QWORD *)&v22 + 1) = v17;
    if (v7 != v8)
    {
      do
      {
        v18 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *(_QWORD *)v7 = 0;
        *((_QWORD *)v15 - 1) = v18;
        v15 -= 8;
      }
      while (v7 != v8);
      v17 = (char *)*((_QWORD *)&v22 + 1);
      v16 = v23;
    }
    v19 = *(_OWORD *)a1;
    *a1 = v15;
    a1[1] = v17;
    v22 = v19;
    v20 = a1[2];
    a1[2] = v16;
    v23 = v20;
    v21 = v19;
    std::__split_buffer<std::unique_ptr<kaldi::CuMatrixBase<float>>>::~__split_buffer((uint64_t)&v21);
  }
}

uint64_t std::__split_buffer<std::unique_ptr<kaldi::CuMatrixBase<float>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::LinearTransform<kaldi::QuantizedMatrix<signed char>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  char v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21[35];

  *(_QWORD *)a1 = off_1E5D32508;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = off_1E5D2E4A0;
  *(_QWORD *)(a1 + 48) = &off_1E5D2D150;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 88) = &unk_1E5D2CD50;
  *(_QWORD *)(a1 + 96) = &unk_1E5D2CD78;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)a1 = &unk_1E5D2CC18;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 112), (uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 3);
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 136), *(_QWORD *)(a2 + 136), *(_QWORD *)(a2 + 144), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 144) - *(_QWORD *)(a2 + 136)) >> 4));
  v6 = *(_DWORD *)(a2 + 160);
  v7 = *(_QWORD *)(a2 + 164);
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 160) = v6;
  *(_QWORD *)(a1 + 164) = v7;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 176), *(const void **)(a2 + 176), *(_QWORD *)(a2 + 184), (uint64_t)(*(_QWORD *)(a2 + 184) - *(_QWORD *)(a2 + 176)) >> 2);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 200), *(const void **)(a2 + 200), *(_QWORD *)(a2 + 208), (uint64_t)(*(_QWORD *)(a2 + 208) - *(_QWORD *)(a2 + 200)) >> 2);
  v8 = *(_BYTE *)(a2 + 224);
  *(_OWORD *)(a1 + 232) = 0u;
  *(_BYTE *)(a1 + 224) = v8;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  if (*(_BYTE *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21);
  }
  v9 = *(int **)(a2 + 104);
  if (v9)
  {
    v10 = operator new();
    kaldi::QuantizedMatrix<short>::QuantizedMatrix<signed char>(v10, v9);
    std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 104), v10);
  }
  v12 = *(_QWORD *)(a1 + 112);
  v11 = *(_QWORD *)(a1 + 120);
  if (v11 != v12)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = *(_QWORD *)(a2 + 112);
      if (*(_QWORD *)(v15 + 8 * v14))
      {
        kaldi::NewCuSubOrMat<float>(*(_QWORD *)(v15 + (v13 >> 29)), *(unsigned __int8 *)(a1 + 16), v21);
        v16 = *(_QWORD *)(a1 + 112);
        v17 = v21[0];
        v21[0] = 0;
        v18 = *(_QWORD *)(v16 + 8 * v14);
        *(_QWORD *)(v16 + 8 * v14) = v17;
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
        v19 = v21[0];
        v21[0] = 0;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
        v12 = *(_QWORD *)(a1 + 112);
        v11 = *(_QWORD *)(a1 + 120);
      }
      ++v14;
      v13 += 0x100000000;
    }
    while (v14 < (v11 - v12) >> 3);
  }
  if (*(_QWORD *)(a2 + 240) != *(_QWORD *)(a2 + 232))
  {
    kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::EnsureCorrs(a1);
    kaldi::nnet1::QuantizerResidualAggregator::PushSetup((uint64_t *)(a1 + 232), *(_QWORD *)(*(_QWORD *)(a1 + 112)+ 8 * ((((*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) << 29) - 0x100000000) >> 32)));
  }
  return a1;
}

void sub_1AD9D0774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, quasar::Bitmap *a9, quasar::Bitmap *a10, uint64_t *a11, uint64_t a12)
{
  kaldi::nnet1::UpdatableComponent *v12;
  uint64_t v13;
  void **v14;
  void **v15;
  void **v16;
  void *v18;
  void *v19;

  MEMORY[0x1AF44D190](v13, 0x10D0C4068EB0291);
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v16);
  v18 = *v15;
  if (*v15)
  {
    *((_QWORD *)v12 + 26) = v18;
    operator delete(v18);
  }
  v19 = *v14;
  if (*v14)
  {
    *((_QWORD *)v12 + 23) = v19;
    operator delete(v19);
  }
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a11, 0);
  quasar::Bitmap::~Bitmap(a9);
  quasar::Bitmap::~Bitmap(a10);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v12);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::LinearTransform<kaldi::QuantizedMatrix<short>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  char v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21[35];

  *(_QWORD *)a1 = off_1E5D32508;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = off_1E5D2E4A0;
  *(_QWORD *)(a1 + 48) = &off_1E5D2D150;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 88) = &unk_1E5D2CBC8;
  *(_QWORD *)(a1 + 96) = &unk_1E5D2CBF0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)a1 = &unk_1E5D2CA90;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 112), (uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 3);
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 136), *(_QWORD *)(a2 + 136), *(_QWORD *)(a2 + 144), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 144) - *(_QWORD *)(a2 + 136)) >> 4));
  v6 = *(_DWORD *)(a2 + 160);
  v7 = *(_QWORD *)(a2 + 164);
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 160) = v6;
  *(_QWORD *)(a1 + 164) = v7;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 176), *(const void **)(a2 + 176), *(_QWORD *)(a2 + 184), (uint64_t)(*(_QWORD *)(a2 + 184) - *(_QWORD *)(a2 + 176)) >> 2);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 200), *(const void **)(a2 + 200), *(_QWORD *)(a2 + 208), (uint64_t)(*(_QWORD *)(a2 + 208) - *(_QWORD *)(a2 + 200)) >> 2);
  v8 = *(_BYTE *)(a2 + 224);
  *(_OWORD *)(a1 + 232) = 0u;
  *(_BYTE *)(a1 + 224) = v8;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  if (*(_BYTE *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21);
  }
  v9 = *(int **)(a2 + 104);
  if (v9)
  {
    v10 = operator new();
    kaldi::QuantizedMatrix<signed char>::QuantizedMatrix<short>(v10, v9);
    std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 104), v10);
  }
  v12 = *(_QWORD *)(a1 + 112);
  v11 = *(_QWORD *)(a1 + 120);
  if (v11 != v12)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = *(_QWORD *)(a2 + 112);
      if (*(_QWORD *)(v15 + 8 * v14))
      {
        kaldi::NewCuSubOrMat<float>(*(_QWORD *)(v15 + (v13 >> 29)), *(unsigned __int8 *)(a1 + 16), v21);
        v16 = *(_QWORD *)(a1 + 112);
        v17 = v21[0];
        v21[0] = 0;
        v18 = *(_QWORD *)(v16 + 8 * v14);
        *(_QWORD *)(v16 + 8 * v14) = v17;
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
        v19 = v21[0];
        v21[0] = 0;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
        v12 = *(_QWORD *)(a1 + 112);
        v11 = *(_QWORD *)(a1 + 120);
      }
      ++v14;
      v13 += 0x100000000;
    }
    while (v14 < (v11 - v12) >> 3);
  }
  if (*(_QWORD *)(a2 + 240) != *(_QWORD *)(a2 + 232))
  {
    kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(a1);
    kaldi::nnet1::QuantizerResidualAggregator::PushSetup((uint64_t *)(a1 + 232), *(_QWORD *)(*(_QWORD *)(a1 + 112)+ 8 * ((((*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) << 29) - 0x100000000) >> 32)));
  }
  return a1;
}

void sub_1AD9D0B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, quasar::Bitmap *a9, quasar::Bitmap *a10, uint64_t *a11, uint64_t a12)
{
  kaldi::nnet1::UpdatableComponent *v12;
  uint64_t v13;
  void **v14;
  void **v15;
  void **v16;
  void *v18;
  void *v19;

  MEMORY[0x1AF44D190](v13, 0x10D0C4068EB0291);
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v16);
  v18 = *v15;
  if (*v15)
  {
    *((_QWORD *)v12 + 26) = v18;
    operator delete(v18);
  }
  v19 = *v14;
  if (*v14)
  {
    *((_QWORD *)v12 + 23) = v19;
    operator delete(v19);
  }
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a11, 0);
  quasar::Bitmap::~Bitmap(a9);
  quasar::Bitmap::~Bitmap(a10);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v12);
  _Unwind_Resume(a1);
}

uint64_t fst::BitmapIndex::Rank1(fst::BitmapIndex *this, unint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint8x8_t v9;

  if (!a2)
    return 0;
  FstCheck(*((_QWORD *)this + 1) >= a2, "(end) <= (Bits())", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libkaldi/tools/openfst/src/extensions/ngram/bitmap-index.cc");
  v4 = ((a2 - 1) >> 6);
  if (((a2 - 1) >> 6))
  {
    v5 = *(unsigned __int16 *)(*((_QWORD *)this + 5) + 2 * (v4 - 1));
    if ((v4 - 1) >= 0x3FF)
      v5 += *(_DWORD *)(*((_QWORD *)this + 2) + 4 * (((int)v4 - 1) / 0x3FFu - 1));
  }
  else
  {
    v5 = 0;
  }
  v7 = *(_QWORD *)(*(_QWORD *)this + 8 * v4);
  v8 = 0xFFFFFFFFFFFFFFFFLL >> -(a2 & 0x3F);
  if ((a2 & 0x3F) == 0)
    v8 = -1;
  v9 = (uint8x8_t)vcnt_s8((int8x8_t)(v7 & v8));
  v9.i16[0] = vaddlv_u8(v9);
  return (v5 + v9.i32[0]);
}

uint64_t fst::BitmapIndex::Select1(fst::BitmapIndex *this, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  unint64_t v7;
  unsigned int *v8;
  _DWORD *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int secondary_block;
  unint64_t v16;
  int8x8_t v17;
  __int32 v18;
  unsigned int v19;
  int v20;
  int8x8_t v21;
  __int32 v22;
  _BOOL4 v23;
  unsigned int v24;
  int v25;
  uint8x8_t v26;
  int v27;
  unsigned int v28;
  char v29;

  result = *((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2);
  v5 = (unint64_t)(((((unint64_t)(result + 63) >> 6) + 1022) * (unsigned __int128)0x802008020080201uLL) >> 64) >> 5;
  v6 = (_DWORD *)(v4 + 4 * v5);
  if (*(v6 - 1) > a2)
  {
    if ((unint64_t)(result + 63) >= 0x40)
    {
      v6 = (_DWORD *)*((_QWORD *)this + 2);
      do
      {
        v7 = v5 >> 1;
        v8 = &v6[v5 >> 1];
        v10 = *v8;
        v9 = v8 + 1;
        v5 += ~(v5 >> 1);
        if (v10 <= a2)
          v6 = v9;
        else
          v5 = v7;
      }
      while (v5);
    }
    v11 = a2 + 1;
    v12 = ((uint64_t)v6 - v4) >> 2;
    if ((_DWORD)v12)
    {
      v11 -= *(_DWORD *)(v4 + 4 * (v12 - 1));
      v13 = 1023 * v12;
    }
    else
    {
      v13 = 0;
    }
    v14 = v13;
    secondary_block = fst::BitmapIndex::find_secondary_block(this, v13, v11);
    if (secondary_block)
    {
      v14 = v13 + secondary_block;
      v11 -= *(unsigned __int16 *)(*((_QWORD *)this + 5) + 2 * (v14 - 1));
      v13 += secondary_block;
    }
    v16 = *(_QWORD *)(*(_QWORD *)this + 8 * v14);
    v17 = vcnt_s8((int8x8_t)v16);
    v17.i16[0] = vaddlv_u8((uint8x8_t)v17);
    v18 = v17.i32[0];
    if (v17.i32[0] >= v11)
      v18 = 0;
    v19 = v11 - v18;
    v20 = 32 * (v17.i32[0] < v11);
    v17.i32[0] = (unsigned __int16)(v16 >> v20);
    v21 = vcnt_s8(v17);
    v21.i16[0] = vaddlv_u8((uint8x8_t)v21);
    v22 = v21.i32[0];
    v23 = v19 > v21.i32[0];
    if (v19 <= v21.i32[0])
      v22 = 0;
    v24 = v19 - v22;
    v25 = v20 | (16 * v23);
    v21.i32[0] = (v16 >> v25);
    v26 = (uint8x8_t)vcnt_s8(v21);
    v26.i16[0] = vaddlv_u8(v26);
    v27 = v25 | (8 * (v24 > v26.i32[0]));
    v28 = nth_bit_bit_offset[(v16 >> v27)];
    if (v24 > v26.i32[0])
      v29 = ~v26.i8[0];
    else
      v29 = -1;
    return (v27 | (v13 << 6)) + ((v28 >> (4 * (v29 + v24))) & 0xF);
  }
  return result;
}

uint64_t fst::BitmapIndex::find_secondary_block(fst::BitmapIndex *this, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  unsigned int v11;

  v3 = (unint64_t)(*((_QWORD *)this + 1) + 63) >> 6;
  if (a2 + 1023 < v3)
    v3 = a2 + 1023;
  v4 = *((_QWORD *)this + 5);
  v5 = (unsigned __int16 *)(v4 + 2 * a2);
  v6 = (unsigned __int16 *)(v4 + 2 * v3);
  if (v3 != a2)
  {
    v7 = v6 - v5;
    v6 = v5;
    do
    {
      v8 = v7 >> 1;
      v9 = &v6[v7 >> 1];
      v11 = *v9;
      v10 = v9 + 1;
      v7 += ~(v7 >> 1);
      if (v11 < a3)
        v6 = v10;
      else
        v7 = v8;
    }
    while (v7);
  }
  return v6 - v5;
}

uint64_t fst::BitmapIndex::Select0(fst::BitmapIndex *this, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  int inverted_primary_block;
  unsigned int v7;
  uint64_t v8;
  int inverted_secondary_block;
  unint64_t v10;
  int8x8_t v11;
  __int32 v12;
  unsigned int v13;
  int v14;
  int8x8_t v15;
  __int32 v16;
  _BOOL4 v17;
  unsigned int v18;
  int v19;
  uint8x8_t v20;
  int v21;
  unsigned int v22;
  char v23;

  result = *((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2);
  if (result
     - (unint64_t)*(unsigned int *)((((unint64_t)(((((unint64_t)(result + 63) >> 6) + 1022)
                                                               * (unsigned __int128)0x802008020080201uLL) >> 64) >> 3) & 0xFFFFFFFFFFFFCLL)
                                         + v4
                                         - 4) > a2)
  {
    v5 = a2 + 1;
    inverted_primary_block = fst::BitmapIndex::find_inverted_primary_block(this, a2 + 1);
    if (inverted_primary_block)
    {
      v5 += -65472 * inverted_primary_block + *(_DWORD *)(v4 + 4 * (inverted_primary_block - 1));
      v7 = 1023 * inverted_primary_block;
    }
    else
    {
      v7 = 0;
    }
    v8 = v7;
    inverted_secondary_block = fst::BitmapIndex::find_inverted_secondary_block(this, v7, v5);
    if (inverted_secondary_block)
    {
      v8 = v7 + inverted_secondary_block;
      v5 = v5
         - (inverted_secondary_block << 6)
         + *(unsigned __int16 *)(*((_QWORD *)this + 5) + 2 * (v8 - 1));
      v7 += inverted_secondary_block;
    }
    v10 = ~*(_QWORD *)(*(_QWORD *)this + 8 * v8);
    v11 = vcnt_s8((int8x8_t)~*(_DWORD *)(*(_QWORD *)this + 8 * v8));
    v11.i16[0] = vaddlv_u8((uint8x8_t)v11);
    v12 = v11.i32[0];
    if (v11.i32[0] >= v5)
      v12 = 0;
    v13 = v5 - v12;
    v14 = 32 * (v11.i32[0] < v5);
    v11.i32[0] = (unsigned __int16)(v10 >> v14);
    v15 = vcnt_s8(v11);
    v15.i16[0] = vaddlv_u8((uint8x8_t)v15);
    v16 = v15.i32[0];
    v17 = v13 > v15.i32[0];
    if (v13 <= v15.i32[0])
      v16 = 0;
    v18 = v13 - v16;
    v19 = v14 | (16 * v17);
    v15.i32[0] = (v10 >> v19);
    v20 = (uint8x8_t)vcnt_s8(v15);
    v20.i16[0] = vaddlv_u8(v20);
    v21 = v19 | (8 * (v18 > v20.i32[0]));
    v22 = nth_bit_bit_offset[(v10 >> v21)];
    if (v18 > v20.i32[0])
      v23 = ~v20.i8[0];
    else
      v23 = -1;
    return (v21 | (v7 << 6)) + ((v22 >> (4 * (v23 + v18))) & 0xF);
  }
  return result;
}

uint64_t fst::BitmapIndex::find_inverted_primary_block(fst::BitmapIndex *this, unint64_t a2)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int *v5;

  v2 = (unsigned int *)*((_QWORD *)this + 2);
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  if (v2 == v3)
  {
    v3 = (unsigned int *)*((_QWORD *)this + 2);
  }
  else
  {
    v4 = (unsigned int *)*((_QWORD *)this + 2);
    do
    {
      v5 = &v4[(v3 - v4 + (unint64_t)(v3 - v4 < 0)) >> 1];
      if (65472 * (v5 - v2) - (unint64_t)*v5 + 65472 < a2)
        v4 = v5 + 1;
      else
        v3 = &v4[(v3 - v4 + (unint64_t)(v3 - v4 < 0)) >> 1];
    }
    while (v4 != v3);
  }
  return v3 - v2;
}

uint64_t fst::BitmapIndex::find_inverted_secondary_block(fst::BitmapIndex *this, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;

  v3 = (unint64_t)(*((_QWORD *)this + 1) + 63) >> 6;
  if (a2 + 1023 < v3)
    v3 = a2 + 1023;
  v4 = *((_QWORD *)this + 5);
  v5 = (unsigned __int16 *)(v4 + 2 * a2);
  v6 = v5;
  if (v3 != a2)
  {
    v6 = (unsigned __int16 *)(v4 + 2 * v3);
    v7 = (unsigned __int16 *)(v4 + 2 * a2);
    do
    {
      v8 = (unsigned __int16 *)((char *)v7 + ((v6 - v7 + (v6 - v7 < 0)) & 0xFFFFFFFFFFFFFFFELL));
      if (32 * ((char *)v8 - (char *)v5) - (unint64_t)*v8 + 64 < a3)
        v7 = v8 + 1;
      else
        v6 = (unsigned __int16 *)((char *)v7 + ((v6 - v7 + (v6 - v7 < 0)) & 0xFFFFFFFFFFFFFFFELL));
    }
    while (v7 != v6);
  }
  return v6 - v5;
}

uint64_t fst::BitmapIndex::Select0s(fst::BitmapIndex *this, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v5;
  unsigned int inverted_primary_block;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int inverted_secondary_block;
  int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  int8x8_t v19;
  __int32 v20;
  unsigned int v21;
  char v22;
  int8x8_t v23;
  __int32 v24;
  BOOL v25;
  unsigned int v26;
  unsigned __int8 v27;
  uint8x8_t v28;
  char v29;
  unint64_t v30;

  v2 = *((_QWORD *)this + 2);
  v3 = *((_QWORD *)this + 1)
     - *(unsigned int *)((((unint64_t)(((((unint64_t)(*((_QWORD *)this + 1) + 63) >> 6) + 1022)
                                             * (unsigned __int128)0x802008020080201uLL) >> 64) >> 3) & 0xFFFFFFFFFFFFCLL)
                       + v2
                       - 4);
  if (v3 <= a2)
    return *((_QWORD *)this + 1);
  v5 = a2 + 1;
  if (a2 + 1 >= v3)
    return fst::BitmapIndex::Select0(this, a2);
  inverted_primary_block = fst::BitmapIndex::find_inverted_primary_block(this, a2 + 1);
  v7 = 65472 * (inverted_primary_block + 1) - *(unsigned int *)(v2 + 4 * inverted_primary_block);
  if (inverted_primary_block)
  {
    v8 = 65472 * inverted_primary_block - *(unsigned int *)(v2 + 4 * (inverted_primary_block - 1));
    v7 -= v8;
    v9 = v5 - v8;
    v10 = 1023 * inverted_primary_block;
  }
  else
  {
    v10 = 0;
    v9 = v5;
  }
  v12 = v10;
  inverted_secondary_block = fst::BitmapIndex::find_inverted_secondary_block(this, v10, v9);
  v14 = inverted_secondary_block << 6;
  v15 = v10 + inverted_secondary_block;
  v16 = *((_QWORD *)this + 5);
  if (inverted_secondary_block)
  {
    v17 = v14 - *(unsigned __int16 *)(v16 + 2 * (v15 - 1));
    v9 -= v17;
    v12 = v10 + inverted_secondary_block;
    v10 += inverted_secondary_block;
  }
  else
  {
    v17 = 0;
  }
  v18 = ~*(_QWORD *)(*(_QWORD *)this + 8 * v12);
  v19 = vcnt_s8((int8x8_t)~*(_DWORD *)(*(_QWORD *)this + 8 * v12));
  v19.i16[0] = vaddlv_u8((uint8x8_t)v19);
  if (v19.i32[0] >= v9)
    v20 = 0;
  else
    v20 = v19.i32[0];
  v21 = v9 - v20;
  v22 = 32 * (v19.i32[0] < v9);
  v19.i32[0] = (unsigned __int16)(v18 >> v22);
  v23 = vcnt_s8(v19);
  v23.i16[0] = vaddlv_u8((uint8x8_t)v23);
  v24 = v23.i32[0];
  v25 = v21 > v23.i32[0];
  if (v21 <= v23.i32[0])
    v24 = 0;
  v26 = v21 - v24;
  v27 = v22 | (16 * v25);
  v23.i32[0] = (v18 >> v27);
  v28 = (uint8x8_t)vcnt_s8(v23);
  v28.i16[0] = vaddlv_u8(v28);
  if (v26 > v28.i32[0])
    v29 = ~v28.i8[0];
  else
    v29 = -1;
  v11 = ((v27 | (8 * (v26 > v28.i32[0]))) & 0x3F | (v10 << 6))
      + ((nth_bit_bit_offset[(v18 >> (v27 | (8 * (v26 > v28.i32[0]))))] >> (4 * (v29 + v26))) & 0xF);
  v30 = v9 + 1;
  if (v7 <= v30)
  {
    fst::BitmapIndex::Select0(this, v5);
  }
  else if (v14 - v17 - *(unsigned __int16 *)(v16 + 2 * v15) + 64 < v30)
  {
    do
      ++v10;
    while (*(_QWORD *)(*(_QWORD *)this + 8 * v10) == -1);
  }
  return v11;
}

void fst::BitmapIndex::BuildIndex(fst::BitmapIndex *this, const unint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8x8_t v21;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  v4 = (uint64_t *)((char *)this + 16);
  std::vector<int>::resize((std::vector<unsigned int> *)((char *)this + 16), (unint64_t)(((((unint64_t)(a3 + 63) >> 6) + 1022) * (unsigned __int128)0x802008020080201uLL) >> 64) >> 5);
  std::vector<unsigned short>::resize((uint64_t)this + 40, (unint64_t)(*((_QWORD *)this + 1) + 63) >> 6);
  v5 = *((_QWORD *)this + 1);
  if ((unint64_t)(v5 + 63) >= 0x40)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
    v11 = *v4;
    do
    {
      v12 = v6 + 1023;
      if (v9 >= v12)
        v13 = v6 + 1023;
      else
        v13 = v9;
      if (v6 >= v13)
      {
        v14 = 0;
      }
      else
      {
        v14 = 0;
        v15 = v9 - 1 - v6;
        v16 = (uint64_t *)(*(_QWORD *)this + 8 * v6);
        v17 = (_WORD *)(*((_QWORD *)this + 5) + 2 * v6);
        do
        {
          v19 = *v16++;
          v18 = v19;
          if (v15)
            v20 = -1;
          else
            v20 = v10;
          v21 = (uint8x8_t)vcnt_s8((int8x8_t)(v18 & v20));
          v21.i16[0] = vaddlv_u8(v21);
          v14 += v21.i32[0];
          *v17++ = v14;
          --v15;
          --v13;
        }
        while (v6 != v13);
      }
      v8 += v14;
      *(_DWORD *)(v11 + 4 * v7++) = v8;
      v6 += 1023;
    }
    while (v9 > v12);
  }
}

void std::vector<unsigned short>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 2 * a2;
  }
  else
  {
    std::vector<unsigned short>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<unsigned short>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int16 v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 1);
    if (v10 < 0)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 1;
    v12 = v5 - v8;
    if (v12 > v10)
      v10 = v12;
    if (v12 >= 0x7FFFFFFFFFFFFFFELL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[2 * v11];
    v16 = &v14[2 * v13];
    bzero(v15, 2 * a2);
    v17 = &v15[2 * a2];
    while (v7 != v8)
    {
      v18 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v15 - 1) = v18;
      v15 -= 2;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

id SequoiaLogger(void)
{
  unsigned __int8 v0;
  id *v1;
  int v3;

  v1 = (id *)&unk_1EED8B000;
  if ((v0 & 1) == 0)
  {
    v1 = (id *)&unk_1EED8B000;
    if (v3)
    {
      SequoiaLogger(void)::logger = (uint64_t)os_log_create("com.apple.MachineTranslation", "framework");
      v1 = (id *)&unk_1EED8B000;
    }
  }
  return v1[162];
}

void SequoiaLog(os_log_type_t a1, void *a2, const char *a3, ...)
{
  void *v3;

  SequoiaLogger();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  os_log_with_args();

}

void SequoiaLogError(uint64_t a1, void *a2)
{
  const char *v2;

  if (*(char *)(a1 + 23) >= 0)
    v2 = (const char *)a1;
  else
    v2 = *(const char **)a1;
  SequoiaLog(OS_LOG_TYPE_ERROR, a2, "%s", v2);
}

uint64_t kaldi::LatticeFasterOnlineDecoder::LatticeFasterOnlineDecoder(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = xmmword_1AE146E50;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = a2;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  v4 = *a3;
  v5 = a3[1];
  v6 = a3[2];
  *(_QWORD *)(a1 + 240) = *((_QWORD *)a3 + 6);
  *(_OWORD *)(a1 + 208) = v5;
  *(_OWORD *)(a1 + 224) = v6;
  *(_OWORD *)(a1 + 192) = v4;
  *(_DWORD *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_DWORD *)(a1 + 288) = 1065353216;
  kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::SetSize(a1, 0x3E8uLL);
  return a1;
}

void sub_1AD9D186C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  void *v8;

  v5 = v4;
  v6 = v3;
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v5);
  v8 = *v6;
  if (*v6)
  {
    v1[22] = v8;
    operator delete(v8);
  }
  kaldi::LatticeFasterOnlineDecoder::LatticeFasterOnlineDecoder(v2);
  kaldi::HashList<int,kaldi::LatticeFasterOnlineDecoder::Token *,std::hash<int>,std::equal_to<int>>::~HashList(v1);
  _Unwind_Resume(a1);
}

void kaldi::LatticeFasterOnlineDecoder::~LatticeFasterOnlineDecoder(kaldi::LatticeFasterOnlineDecoder *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v2 = *((_QWORD *)this + 1);
  if (v2 != -1)
  {
    v3 = *((_QWORD *)this + 3);
    do
    {
      v4 = (uint64_t *)(v3 + 16 * v2);
      v4[1] = 0;
      v2 = *v4;
    }
    while (v2 != -1);
  }
  v5 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = -1;
  if (v5)
  {
    v6 = *((_QWORD *)this + 6);
    do
    {
      v7 = v5;
      v5 = *(_QWORD *)(v5 + 16);
      *(_QWORD *)(v7 + 16) = v6;
      v6 = v7;
    }
    while (v5);
    *((_QWORD *)this + 6) = v7;
  }
  kaldi::LatticeFasterOnlineDecoder::ClearActiveTokens((uint64_t)this);
  if (*((_BYTE *)this + 160))
  {
    v8 = *((_QWORD *)this + 19);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 256);
  v9 = (void *)*((_QWORD *)this + 21);
  if (v9)
  {
    *((_QWORD *)this + 22) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 16);
  if (v10)
  {
    *((_QWORD *)this + 17) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 13);
  if (v11)
  {
    *((_QWORD *)this + 14) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 10);
  if (v12)
  {
    *((_QWORD *)this + 11) = v12;
    operator delete(v12);
  }
  kaldi::HashList<int,kaldi::LatticeFasterOnlineDecoder::Token *,std::hash<int>,std::equal_to<int>>::~HashList(this);
}

uint64_t kaldi::LatticeFasterOnlineDecoder::DeleteElems(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
  {
    v2 = *(_QWORD *)(result + 48);
    do
    {
      v3 = a2;
      a2 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(v3 + 16) = v2;
      v2 = v3;
    }
    while (a2);
    *(_QWORD *)(result + 48) = v3;
  }
  return result;
}

uint64_t kaldi::LatticeFasterOnlineDecoder::ClearActiveTokens(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = this;
  v3 = *(_QWORD *)(this + 80);
  v2 = *(_QWORD *)(this + 88);
  if (v2 == v3)
  {
    v3 = *(_QWORD *)(this + 88);
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v3 + 16 * v4);
      if (v5)
      {
        do
        {
          v6 = *(_QWORD *)(v5 + 8);
          if (v6)
          {
            do
            {
              v7 = *(_QWORD *)(v6 + 24);
              MEMORY[0x1AF44D190]();
              v6 = v7;
            }
            while (v7);
          }
          *(_QWORD *)(v5 + 8) = 0;
          v8 = *(_QWORD *)(v5 + 16);
          this = MEMORY[0x1AF44D190](v5, 0x1020C405E66F15BLL);
          --*(_DWORD *)(v1 + 248);
          v5 = v8;
        }
        while (v8);
        v3 = *(_QWORD *)(v1 + 80);
        v2 = *(_QWORD *)(v1 + 88);
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 4);
  }
  *(_QWORD *)(v1 + 88) = v3;
  return this;
}

void kaldi::LatticeFasterOnlineDecoder::InitDecoding(kaldi::LatticeFasterOnlineDecoder *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _OWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  kaldi::LatticeFasterOnlineDecoder *v16;

  v2 = *((_QWORD *)this + 1);
  if (v2 != -1)
  {
    v3 = *((_QWORD *)this + 3);
    do
    {
      v4 = (uint64_t *)(v3 + 16 * v2);
      v4[1] = 0;
      v2 = *v4;
    }
    while (v2 != -1);
  }
  v5 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = -1;
  if (v5)
  {
    v6 = *((_QWORD *)this + 6);
    do
    {
      v7 = v5;
      v5 = *(_QWORD *)(v5 + 16);
      *(_QWORD *)(v7 + 16) = v6;
      v6 = v7;
    }
    while (v5);
    *((_QWORD *)this + 6) = v7;
  }
  *((_QWORD *)this + 22) = *((_QWORD *)this + 21);
  kaldi::LatticeFasterOnlineDecoder::ClearActiveTokens((uint64_t)this);
  *((_WORD *)this + 126) = 0;
  *((_DWORD *)this + 62) = 0;
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear((_QWORD *)this + 32);
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 19) + 24))(*((_QWORD *)this + 19));
  std::vector<kaldi::LatticeFasterOnlineDecoder::TokenList>::resize((uint64_t)this + 80, 1uLL);
  v9 = (_OWORD *)operator new();
  *v9 = 0u;
  v9[1] = 0u;
  **((_QWORD **)this + 10) = v9;
  v10 = (unint64_t)v8 % *((_QWORD *)this + 2);
  v11 = (_QWORD *)(*((_QWORD *)this + 3) + 16 * v10);
  v12 = kaldi::HashList<int,kaldi::LatticeFasterOnlineDecoder::Token *,std::hash<int>,std::equal_to<int>>::New(this);
  *(_DWORD *)v12 = v8;
  *(_QWORD *)(v12 + 8) = v9;
  v13 = v11 + 1;
  v14 = v11[1];
  if (v14)
  {
    *(_QWORD *)(v12 + 16) = *(_QWORD *)(v14 + 16);
    *(_QWORD *)(v14 + 16) = v12;
    *v13 = v12;
  }
  else
  {
    v15 = *((_QWORD *)this + 1);
    v16 = this;
    if (v15 != -1)
      v16 = (kaldi::LatticeFasterOnlineDecoder *)(*(_QWORD *)(*((_QWORD *)this + 3) + 16 * v15 + 8) + 16);
    *(_QWORD *)v16 = v12;
    *(_QWORD *)(v12 + 16) = 0;
    *v13 = v12;
    *v11 = v15;
    *((_QWORD *)this + 1) = v10;
  }
  ++*((_DWORD *)this + 62);
  kaldi::LatticeFasterOnlineDecoder::ProcessNonemitting(this);
}

void std::vector<kaldi::LatticeFasterOnlineDecoder::TokenList>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<kaldi::LatticeFasterOnlineDecoder::TokenList>::__append((char **)a1, a2 - v2);
  }
}

void kaldi::LatticeFasterOnlineDecoder::ProcessNonemitting(kaldi::LatticeFasterOnlineDecoder *this)
{
  uint64_t v2;
  char *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  float v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;
  float *v17;
  char *v18;
  float v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  kaldi::LatticeFasterOnlineDecoder *v24;
  uint64_t i;
  Token *v26;
  float v27;
  unint64_t size;
  unint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  _DWORD *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  int v48;
  BOOL v49;
  _QWORD v50[3];
  _DWORD *v51;
  unint64_t v52;

  v2 = (*((_QWORD *)this + 11) - *((_QWORD *)this + 10)) >> 4;
  v4 = (void **)((char *)this + 104);
  v3 = (char *)*((_QWORD *)this + 13);
  v5 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
  {
    v7 = INFINITY;
LABEL_26:
    if (*((_BYTE *)this + 252))
      return;
    v18 = v3;
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v50);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"Error, no surviving tokens: frame is ", 37);
      std::ostream::operator<<();
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v50);
      v18 = (char *)*((_QWORD *)this + 13);
      v3 = (char *)*((_QWORD *)this + 14);
    }
    *((_BYTE *)this + 252) = 1;
    goto LABEL_30;
  }
  v6 = (_QWORD *)((char *)this + 120);
  v7 = INFINITY;
  do
  {
    if ((unint64_t)v3 >= *v6)
    {
      v8 = (char *)*v4;
      v9 = (v3 - (_BYTE *)*v4) >> 2;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v11 = *v6 - (_QWORD)v8;
      if (v11 >> 1 > v10)
        v10 = v11 >> 1;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
        v12 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 120, v12);
        v8 = (char *)*((_QWORD *)this + 13);
        v3 = (char *)*((_QWORD *)this + 14);
      }
      else
      {
        v13 = 0;
      }
      v14 = &v13[4 * v9];
      *(_DWORD *)v14 = *(_DWORD *)v5;
      v15 = v14 + 4;
      while (v3 != v8)
      {
        v16 = *((_DWORD *)v3 - 1);
        v3 -= 4;
        *((_DWORD *)v14 - 1) = v16;
        v14 -= 4;
      }
      *((_QWORD *)this + 13) = v14;
      *((_QWORD *)this + 14) = v15;
      *((_QWORD *)this + 15) = &v13[4 * v12];
      if (v8)
        operator delete(v8);
      v3 = v15;
    }
    else
    {
      *(_DWORD *)v3 = *(_DWORD *)v5;
      v3 += 4;
    }
    *((_QWORD *)this + 14) = v3;
    v17 = *(float **)(v5 + 8);
    v5 = *(_QWORD *)(v5 + 16);
    if (*v17 < v7)
      v7 = *v17;
  }
  while (v5);
  v18 = (char *)*v4;
  if (*v4 == v3)
    goto LABEL_26;
LABEL_30:
  if (v18 == v3)
    return;
  v19 = v7 + *((float *)this + 48);
  do
  {
    v21 = *((int *)v3 - 1);
    v3 -= 4;
    v20 = v21;
    *((_QWORD *)this + 14) = v3;
    v22 = *((_QWORD *)this + 3);
    v23 = *(_QWORD *)(v22 + 16 * (v21 % *((_QWORD *)this + 2)));
    v24 = this;
    if (v23 != -1)
      v24 = (kaldi::LatticeFasterOnlineDecoder *)(*(_QWORD *)(v22 + 16 * v23 + 8) + 16);
    for (i = *(_QWORD *)v24; *(_DWORD *)i != (_DWORD)v20; i = *(_QWORD *)(i + 16))
      ;
    v26 = *(Token **)(i + 8);
    v27 = *(float *)v26->tokenName.__r_.__value_.var0.var0.__data_;
    if (*(float *)v26->tokenName.__r_.__value_.var0.var0.__data_ > v19)
      continue;
    size = v26->tokenName.__r_.__value_.var0.var1.__size_;
    if (size)
    {
      do
      {
        v29 = *(_QWORD *)(size + 24);
        MEMORY[0x1AF44D190]();
        size = v29;
      }
      while (v29);
    }
    v26->tokenName.__r_.__value_.var0.var1.__size_ = 0;
    v30 = *((_QWORD *)this + 19);
    v52 = 0;
    (*(void (**)(uint64_t, unint64_t, _QWORD *))(*(_QWORD *)v30 + 136))(v30, v20, v50);
    while (1)
    {
      if (!v50[0])
      {
        if (v52 >= v50[2])
          goto LABEL_72;
LABEL_46:
        v32 = v50[1] + 16 * v52;
        goto LABEL_47;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v50[0] + 24))(v50[0]))
        break;
      if (!v50[0])
        goto LABEL_46;
      v32 = (*(uint64_t (**)(void))(*(_QWORD *)v50[0] + 32))();
LABEL_47:
      if (!*(_DWORD *)v32)
      {
        v33 = *(float *)(v32 + 8);
        v31.n128_f32[0] = v27 + v33;
        if ((float)(v27 + v33) < v19)
        {
          v49 = 0;
          v34 = kaldi::LatticeFasterOnlineDecoder::FindOrAddToken(this, *(_DWORD *)(v32 + 12), (int)v2 - 1, v31.n128_f32[0], v26, &v49);
          v35 = operator new();
          v36 = *(_DWORD *)(v32 + 4);
          v37 = v26->tokenName.__r_.__value_.var0.var1.__size_;
          *(_QWORD *)v35 = v34;
          *(_DWORD *)(v35 + 8) = 0;
          *(_DWORD *)(v35 + 12) = v36;
          *(float *)(v35 + 16) = v33;
          *(_DWORD *)(v35 + 20) = 0;
          *(_QWORD *)(v35 + 24) = v37;
          v26->tokenName.__r_.__value_.var0.var1.__size_ = v35;
          if (v49)
          {
            v39 = (char *)*((_QWORD *)this + 14);
            v38 = *((_QWORD *)this + 15);
            if ((unint64_t)v39 >= v38)
            {
              v41 = (char *)*v4;
              v42 = (v39 - (_BYTE *)*v4) >> 2;
              v43 = v42 + 1;
              if ((unint64_t)(v42 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v44 = v38 - (_QWORD)v41;
              if (v44 >> 1 > v43)
                v43 = v44 >> 1;
              if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
                v45 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v45 = v43;
              if (v45)
              {
                v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 120, v45);
                v41 = (char *)*((_QWORD *)this + 13);
                v39 = (char *)*((_QWORD *)this + 14);
              }
              else
              {
                v46 = 0;
              }
              v47 = &v46[4 * v42];
              *(_DWORD *)v47 = *(_DWORD *)(v32 + 12);
              v40 = v47 + 4;
              while (v39 != v41)
              {
                v48 = *((_DWORD *)v39 - 1);
                v39 -= 4;
                *((_DWORD *)v47 - 1) = v48;
                v47 -= 4;
              }
              *((_QWORD *)this + 13) = v47;
              *((_QWORD *)this + 14) = v40;
              *((_QWORD *)this + 15) = &v46[4 * v45];
              if (v41)
                operator delete(v41);
            }
            else
            {
              *(_DWORD *)v39 = *(_DWORD *)(v32 + 12);
              v40 = v39 + 4;
            }
            *((_QWORD *)this + 14) = v40;
          }
        }
      }
      if (v50[0])
        (*(void (**)(_QWORD, __n128))(*(_QWORD *)v50[0] + 40))(v50[0], v31);
      else
        ++v52;
    }
    if (v50[0])
    {
      (*(void (**)(void))(*(_QWORD *)v50[0] + 8))();
      goto LABEL_74;
    }
LABEL_72:
    if (v51)
      --*v51;
LABEL_74:
    v18 = (char *)*((_QWORD *)this + 13);
    v3 = (char *)*((_QWORD *)this + 14);
  }
  while (v18 != v3);
}

void sub_1AD9D2060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::LatticeFasterOnlineDecoder::ProcessEmitting(kaldi::LatticeFasterOnlineDecoder *this, kaldi::DecodableInterface *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned int *v11;
  float v12;
  unint64_t v13;
  uint64_t v14;
  float *v15;
  float v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  BOOL v25;
  float v26;
  float v27;
  float v28;
  Token *v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t size;
  unsigned int *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _DWORD *v46;
  unint64_t v47;
  unint64_t v48;
  float v49;
  unsigned int *v50;

  v4 = (char *)this + 80;
  v5 = *((_QWORD *)this + 11) - *((_QWORD *)this + 10);
  v6 = v5 >> 4;
  std::vector<kaldi::LatticeFasterOnlineDecoder::TokenList>::resize((uint64_t)this + 80, (v5 >> 4) + 1);
  v8 = *((_QWORD *)v4 - 9);
  if (v8 != -1)
  {
    v9 = *((_QWORD *)this + 3);
    do
    {
      v10 = (uint64_t *)(v9 + 16 * v8);
      v10[1] = 0;
      v8 = *v10;
    }
    while (v8 != -1);
  }
  v11 = *(unsigned int **)this;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = -1;
  v50 = 0;
  v49 = 0.0;
  v48 = 0;
  v12 = kaldi::GetCutoffHelper<kaldi::LatticeFasterOnlineDecoder,kaldi::LatticeFasterDecoderConfig,kaldi::HashList<int,kaldi::LatticeFasterOnlineDecoder::Token *,std::hash<int>,std::equal_to<int>>::Elem>(this, (uint64_t)this + 192, (uint64_t)v11, &v48, &v49, &v50, 1, v7);
  v13 = (unint64_t)(float)(*((float *)this + 56) * (float)v48);
  if (*((_QWORD *)this + 2) < v13)
    kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::SetSize((uint64_t)this, v13);
  if (!v50)
  {
    v16 = 0.0;
    v18 = INFINITY;
    goto LABEL_35;
  }
  v14 = *v50;
  v15 = (float *)*((_QWORD *)v50 + 1);
  v16 = -*v15;
  v17 = *((_QWORD *)this + 19);
  v47 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v17 + 136))(v17, v14, &v43);
  v18 = INFINITY;
  while (1)
  {
    if (!v43)
    {
      if (v47 >= v45)
        goto LABEL_32;
      goto LABEL_13;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43))
      break;
    if (v43)
    {
      v19 = (*(uint64_t (**)(void))(*(_QWORD *)v43 + 32))();
      goto LABEL_14;
    }
LABEL_13:
    v19 = v44 + 16 * v47;
LABEL_14:
    if (*(_DWORD *)v19)
    {
      v20 = *(_DWORD *)(v19 + 4);
      v21 = *(float *)(v19 + 8);
      (**(void (***)(kaldi::DecodableInterface *, _QWORD))a2)(a2, (v6 - 1));
      v23 = NAN;
      if (v21 != -INFINITY)
      {
        v24 = v16 - v22;
        if (v24 != -INFINITY)
        {
          v23 = INFINITY;
          v25 = v24 == INFINITY || v21 == INFINITY;
          v26 = v21 + v24;
          if (!v25)
            v23 = v26;
        }
      }
      if (v20)
        v27 = *((float *)this + 57);
      else
        v27 = 0.0;
      v28 = (float)((float)(v23 + *v15) + v27) + v49;
      if (v28 < v18)
        v18 = v28;
    }
    if (v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 40))(v43);
    else
      ++v47;
  }
  if (v43)
  {
    (*(void (**)(void))(*(_QWORD *)v43 + 8))();
    goto LABEL_35;
  }
LABEL_32:
  if (v46)
    --*v46;
LABEL_35:
  LODWORD(v43) = 0;
  std::vector<float>::resize((uint64_t)this + 168, (int)(v5 >> 4), &v43);
  *(float *)(*((_QWORD *)this + 21) + 4 * ((int)v6 - 1)) = v16;
  if (!v11)
    return;
  while (2)
  {
    v29 = (Token *)*((_QWORD *)v11 + 1);
    v30 = *(float *)v29->tokenName.__r_.__value_.var0.var0.__data_;
    if (*(float *)v29->tokenName.__r_.__value_.var0.var0.__data_ > v12)
      goto LABEL_59;
    v31 = *v11;
    v32 = *((_QWORD *)this + 19);
    v47 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, float))(*(_QWORD *)v32 + 136))(v32, v31, &v43, v30);
    while (2)
    {
      if (!v43)
      {
        if (v47 >= v45)
          goto LABEL_57;
        goto LABEL_43;
      }
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43))
      {
        if (v43)
        {
          v33 = (*(uint64_t (**)(void))(*(_QWORD *)v43 + 32))();
          goto LABEL_44;
        }
LABEL_43:
        v33 = v44 + 16 * v47;
LABEL_44:
        if (*(_DWORD *)v33)
        {
          (**(void (***)(kaldi::DecodableInterface *, _QWORD))a2)(a2, (v6 - 1));
          v35 = *(_DWORD *)(v33 + 4) ? *((float *)this + 57) : 0.0;
          v36 = v16 - v34;
          v37 = *(float *)(v33 + 8) + v35;
          v38 = (float)((float)(v16 - v34) + *(float *)v29->tokenName.__r_.__value_.var0.var0.__data_) + v37;
          if (v38 <= v18)
          {
            if ((float)(v38 + *((float *)this + 48)) < v18)
              v18 = v38 + *((float *)this + 48);
            v39 = kaldi::LatticeFasterOnlineDecoder::FindOrAddToken(this, *(_DWORD *)(v33 + 12), v6, v38, v29, 0);
            v40 = operator new();
            size = v29->tokenName.__r_.__value_.var0.var1.__size_;
            *(_QWORD *)v40 = v39;
            *(_QWORD *)(v40 + 8) = *(_QWORD *)v33;
            *(float *)(v40 + 16) = v37;
            *(float *)(v40 + 20) = v36;
            *(_QWORD *)(v40 + 24) = size;
            v29->tokenName.__r_.__value_.var0.var1.__size_ = v40;
          }
        }
        if (v43)
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 40))(v43);
        else
          ++v47;
        continue;
      }
      break;
    }
    if (v43)
    {
      (*(void (**)(void))(*(_QWORD *)v43 + 8))();
      goto LABEL_59;
    }
LABEL_57:
    if (v46)
      --*v46;
LABEL_59:
    v42 = (unsigned int *)*((_QWORD *)v11 + 2);
    *((_QWORD *)v11 + 2) = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v11;
    v11 = v42;
    if (v42)
      continue;
    break;
  }
}

void sub_1AD9D24FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12)
{
  if (a9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  }
  else if (a12)
  {
    --*a12;
  }
  _Unwind_Resume(exception_object);
}

void kaldi::LatticeFasterOnlineDecoder::FinalizeDecoding(kaldi::LatticeFasterOnlineDecoder *this)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[35];
  BOOL v5;

  v2 = (*((_QWORD *)this + 11) - *((_QWORD *)this + 10)) >> 4;
  kaldi::LatticeFasterOnlineDecoder::PruneForwardLinksFinal(this);
  if ((int)v2 - 1 >= 1)
  {
    do
    {
      kaldi::LatticeFasterOnlineDecoder::PruneForwardLinks(this, v2 - 2, (BOOL *)v4, &v5, 0.0);
      kaldi::LatticeFasterOnlineDecoder::PruneTokensForFrame(this, v2 - 1);
      LODWORD(v2) = v2 - 1;
    }
    while (v2 > 1);
  }
  kaldi::LatticeFasterOnlineDecoder::PruneTokensForFrame(this, 0);
  if (kaldi::g_kaldi_verbose_level > 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v4, 4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"pruned tokens from ", 19);
    v3 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" to ", 4);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v4);
  }
}

void sub_1AD9D263C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a9);
  _Unwind_Resume(a1);
}

BOOL kaldi::LatticeFasterOnlineDecoder::GetRawLattice(uint64_t a1, uint64_t a2, int a3)
{
  int v6;
  __int128 *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _BYTE *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _BOOL8 v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t i;
  uint64_t v29;
  uint64_t j;
  _QWORD *v31;
  float v32;
  int v33;
  int v34;
  int v35;
  float v36;
  _QWORD *v37;
  _QWORD *v39;
  int v40;
  uint64_t v41;
  __int128 *v42;
  uint64_t v43;
  _DWORD v44[2];
  uint64_t v45;
  char *v46;
  int v47;
  float v48;
  int v49;
  char *v50;
  char *v51;
  uint64_t v52;
  _QWORD v53[4];
  int v54;
  __int128 v55;
  __int128 v56;
  int v57;

  v6 = *(unsigned __int8 *)(a1 + 253);
  if (*(_BYTE *)(a1 + 253) && (a3 & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
    v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"You cannot call FinalizeDecoding() and then call ", 49);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v39, "GetRawLattice() with use_final_probs == false");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v46);
  }
  v55 = 0u;
  v56 = 0u;
  v57 = 1065353216;
  v7 = (__int128 *)(a1 + 256);
  if (!v6)
    v7 = &v55;
  v42 = v7;
  if (v6)
    v8 = 1;
  else
    v8 = a3 == 0;
  if (!v8)
    kaldi::LatticeFasterOnlineDecoder::ComputeFinalCosts((unsigned int **)a1, &v55, 0, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  v40 = v6;
  v10 = *(_QWORD *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 88);
  v11 = *(_DWORD *)(a1 + 248);
  memset(v53, 0, sizeof(v53));
  v54 = 1065353216;
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>((uint64_t)v53, v11 / 2 + 3);
  v12 = 0;
  v13 = ((unint64_t)(v9 - v10) >> 4) - 1;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v14 = ((unint64_t)(v9 - v10) >> 4);
  while (1)
  {
    v15 = *(char **)(*(_QWORD *)(a1 + 80) + 16 * v12);
    if (!v15)
      break;
    kaldi::LatticeFasterOnlineDecoder::TopSortTokens(v15, &v50);
    v17 = v50;
    v16 = v51;
    if (v51 != v50)
    {
      v18 = 0;
      v19 = 0;
      do
      {
        if (*(_QWORD *)&v17[8 * v19])
        {
          v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
          v46 = &v50[v18];
          *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>((uint64_t)v53, &v50[v18], (uint64_t)&std::piecewise_construct, (_QWORD **)&v46)+ 6) = v20;
          v17 = v50;
          v16 = v51;
        }
        ++v19;
        v18 += 8;
      }
      while (v19 < (v16 - v17) >> 3);
    }
    if (++v12 == v14)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 176))(a2, 0);
      if (kaldi::g_kaldi_verbose_level >= 4)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v46, 4);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"init:", 5);
        v21 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" buckets:", 9);
        v22 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" load:", 6);
        v25 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" max:", 5);
        std::ostream::operator<<();
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v46);
      }
      v41 = v14;
      v26 = 0;
      if (v40)
        v27 = (_QWORD *)(a1 + 280);
      else
        v27 = (_QWORD *)&v56 + 1;
      do
      {
        v45 = 0;
        for (i = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 16 * v26); ; i = *(_QWORD *)(v45 + 16))
        {
          v45 = i;
          if (!i)
            break;
          v46 = (char *)&v45;
          v29 = *((unsigned int *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>((uint64_t)v53, &v45, (uint64_t)&std::piecewise_construct, (_QWORD **)&v46)+ 6);
          for (j = *(_QWORD *)(v45 + 8); j; j = *(_QWORD *)(j + 24))
          {
            v31 = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::find<kaldi::LatticeFasterOnlineDecoder::Token *>(v53, (_QWORD *)j);
            if (*(_DWORD *)(j + 8))
              v32 = *(float *)(*(_QWORD *)(a1 + 168) + 4 * v26);
            else
              v32 = 0.0;
            v33 = *((_DWORD *)v31 + 6);
            v34 = *(_DWORD *)(j + 12);
            v35 = *(_DWORD *)(j + 16);
            v36 = *(float *)(j + 20) - v32;
            LODWORD(v46) = *(_DWORD *)(j + 8);
            HIDWORD(v46) = v34;
            v47 = v35;
            v48 = v36;
            v49 = v33;
            (*(void (**)(uint64_t, uint64_t, char **))(*(_QWORD *)a2 + 208))(a2, v29, &v46);
          }
          if (v26 == v13)
          {
            if (a3 && *v27)
            {
              v37 = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>>>::find<kaldi::LatticeFasterOnlineDecoder::Token *>(v42, &v45);
              if (v37)
              {
                v44[0] = *((_DWORD *)v37 + 6);
                v44[1] = 0;
                (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)a2 + 184))(a2, v29, v44);
              }
            }
            else
            {
              v43 = 0;
              (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 184))(a2, v29, &v43);
            }
          }
        }
        ++v26;
      }
      while (v26 != v41);
      v24 = (*(int (**)(uint64_t))(*(_QWORD *)a2 + 160))(a2) > 0;
      goto LABEL_42;
    }
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"GetRawLattice: no tokens active on frame ", 41);
    v23 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)": not producing lattice.\n", 25);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
  }
  v24 = 0;
LABEL_42:
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v53);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v55);
  return v24;
}

void kaldi::LatticeFasterOnlineDecoder::ComputeFinalCosts(unsigned int **a1, _QWORD *a2, float *a3, float *a4)
{
  unsigned int *v8;
  float v9;
  float v10;
  uint64_t v11;
  float *v12;
  float v13;
  float v14;
  float v16;
  float *v17;
  float **v18;

  if (a2)
    std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(a2);
  v8 = *a1;
  if (!*a1)
  {
    v10 = INFINITY;
    v9 = INFINITY;
    if (!a3)
      goto LABEL_20;
    goto LABEL_14;
  }
  v9 = INFINITY;
  v10 = INFINITY;
  do
  {
    v11 = *v8;
    v12 = (float *)*((_QWORD *)v8 + 1);
    v8 = (unsigned int *)*((_QWORD *)v8 + 2);
    v17 = v12;
    v13 = (*(float (**)(unsigned int *, uint64_t))(*(_QWORD *)a1[19] + 32))(a1[19], v11);
    if (v9 >= *v17)
      v9 = *v17;
    if (v10 >= (float)(*v17 + v13))
      v10 = *v17 + v13;
    if (a2 && v13 != INFINITY)
    {
      v18 = &v17;
      *((float *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>((uint64_t)a2, &v17, (uint64_t)&std::piecewise_construct, &v18)+ 6) = v13;
    }
  }
  while (v8);
  if (a3)
  {
LABEL_14:
    v14 = INFINITY;
    if (v10 != INFINITY || v9 != INFINITY)
      v14 = v10 - v9;
    *a3 = v14;
  }
LABEL_20:
  if (a4)
  {
    if (v10 == INFINITY)
      v16 = v9;
    else
      v16 = v10;
    *a4 = v16;
  }
}

uint64_t kaldi::LatticeFasterOnlineDecoder::TopSortTokens(char *a1, _QWORD *a2)
{
  int v2;
  char *v3;
  int v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  uint64_t **i;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  int v36;
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t *v40;

  v37 = 0u;
  v38 = 0u;
  v39 = 1065353216;
  if (a1)
  {
    v2 = -1;
    v3 = a1;
    do
    {
      v3 = (char *)*((_QWORD *)v3 + 2);
      ++v2;
    }
    while (v3);
    v31 = a1;
    v4 = 0;
    do
    {
      *(_QWORD *)&v34 = &v31;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>((uint64_t)&v37, &v31, (uint64_t)&std::piecewise_construct, (_QWORD **)&v34)+ 6) = v2 + v4;
      v31 = (char *)*((_QWORD *)v31 + 2);
      --v4;
    }
    while (v31);
    v5 = (uint64_t *)v38;
    v34 = 0u;
    v35 = 0u;
    v36 = 1065353216;
    v6 = -v4;
    if ((_QWORD)v38)
    {
      do
      {
        v31 = (char *)v5[2];
        v7 = *((_QWORD *)v31 + 1);
        if (v7)
        {
          v8 = *((_DWORD *)v5 + 6);
          do
          {
            if (!*(_DWORD *)(v7 + 8))
            {
              v9 = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::find<kaldi::LatticeFasterOnlineDecoder::Token *>(&v37, (_QWORD *)v7);
              if (v9)
              {
                if (*((_DWORD *)v9 + 6) < v8)
                {
                  *((_DWORD *)v9 + 6) = v6;
                  std::__hash_table<kaldi::LatticeFasterOnlineDecoder::Token *,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::allocator<kaldi::LatticeFasterOnlineDecoder::Token *>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,kaldi::LatticeFasterOnlineDecoder::Token * const&>((uint64_t)&v34, (_QWORD *)v7, (_QWORD *)v7);
                  ++v6;
                }
              }
            }
            v7 = *(_QWORD *)(v7 + 24);
          }
          while (v7);
        }
        std::__hash_table<kaldi::LatticeFasterOnlineDecoder::Token *,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::allocator<kaldi::LatticeFasterOnlineDecoder::Token *>>::__erase_unique<kaldi::LatticeFasterOnlineDecoder::Token *>(&v34, &v31);
        v5 = (uint64_t *)*v5;
      }
      while (v5);
      if (*((_QWORD *)&v35 + 1))
      {
        v10 = 0;
        do
        {
          v31 = 0;
          v32 = 0;
          v33 = 0;
          v11 = (_QWORD *)v35;
          if ((_QWORD)v35)
          {
            v12 = 0;
            do
            {
              if (v12 >= v33)
              {
                v13 = (v12 - v31) >> 3;
                if ((unint64_t)(v13 + 1) >> 61)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v14 = (v33 - v31) >> 2;
                if (v14 <= v13 + 1)
                  v14 = v13 + 1;
                if ((unint64_t)(v33 - v31) >= 0x7FFFFFFFFFFFFFF8)
                  v15 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v15 = v14;
                if (v15)
                  v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v33, v15);
                else
                  v16 = 0;
                v17 = &v16[8 * v13];
                *(_QWORD *)v17 = v11[2];
                v12 = v17 + 8;
                v19 = v31;
                v18 = v32;
                if (v32 != v31)
                {
                  do
                  {
                    v20 = *((_QWORD *)v18 - 1);
                    v18 -= 8;
                    *((_QWORD *)v17 - 1) = v20;
                    v17 -= 8;
                  }
                  while (v18 != v19);
                  v18 = v31;
                }
                v31 = v17;
                v32 = v12;
                v33 = &v16[8 * v15];
                if (v18)
                  operator delete(v18);
              }
              else
              {
                *(_QWORD *)v12 = v11[2];
                v12 += 8;
              }
              v32 = v12;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(&v34);
          v21 = v31;
          if (v31 != v32)
          {
            do
            {
              v30 = 0;
              v30 = *(_QWORD *)v21;
              v40 = &v30;
              v22 = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>((uint64_t)&v37, &v30, (uint64_t)&std::piecewise_construct, &v40);
              v23 = *(_QWORD *)(v30 + 8);
              if (v23)
              {
                v24 = *((_DWORD *)v22 + 6);
                do
                {
                  if (!*(_DWORD *)(v23 + 8))
                  {
                    v25 = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::find<kaldi::LatticeFasterOnlineDecoder::Token *>(&v37, (_QWORD *)v23);
                    if (v25)
                    {
                      if (*((_DWORD *)v25 + 6) < v24)
                      {
                        *((_DWORD *)v25 + 6) = v6;
                        std::__hash_table<kaldi::LatticeFasterOnlineDecoder::Token *,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::allocator<kaldi::LatticeFasterOnlineDecoder::Token *>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,kaldi::LatticeFasterOnlineDecoder::Token * const&>((uint64_t)&v34, (_QWORD *)v23, (_QWORD *)v23);
                        ++v6;
                      }
                    }
                  }
                  v23 = *(_QWORD *)(v23 + 24);
                }
                while (v23);
              }
              v21 += 8;
            }
            while (v21 != v32);
            v21 = v31;
          }
          if (v21)
          {
            v32 = v21;
            operator delete(v21);
          }
          if (!*((_QWORD *)&v35 + 1))
            break;
        }
        while (v10++ < 0xF423F);
      }
    }
  }
  else
  {
    v6 = 0;
    v34 = 0u;
    v35 = 0u;
    v36 = 1065353216;
  }
  a2[1] = *a2;
  v31 = 0;
  std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize((uint64_t)a2, v6, &v31);
  for (i = (uint64_t **)v38; i; i = (uint64_t **)*i)
    *(_QWORD *)(*a2 + 8 * *((int *)i + 6)) = i[2];
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v34);
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v37);
}

void sub_1AD9D3020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a15);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void kaldi::LatticeFasterOnlineDecoder::PruneForwardLinks(kaldi::LatticeFasterOnlineDecoder *this, unsigned int a2, BOOL *a3, BOOL *a4, float a5)
{
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  float v19;
  uint64_t v21;
  _QWORD v23[35];

  *a3 = 0;
  *a4 = 0;
  if (!*(_QWORD *)(*((_QWORD *)this + 10) + 16 * a2) && !*((_BYTE *)this + 252))
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"No tokens alive [doing pruning].. warning first time only for each utterance\n", 77);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
    }
    *((_BYTE *)this + 252) = 1;
  }
  v21 = 16 * a2;
  v9 = *(_QWORD *)(*((_QWORD *)this + 10) + v21);
  if (v9)
  {
    v10 = 0;
    while (1)
    {
      v11 = *(_QWORD *)(v9 + 8);
      if (v11)
      {
        v12 = 0;
        v13 = INFINITY;
        do
        {
          v15 = **(float **)v11;
          v14 = *(float *)(*(_QWORD *)v11 + 4);
          v16 = v14 + (float)((float)((float)(*(float *)v9 + *(float *)(v11 + 20)) + *(float *)(v11 + 16)) - v15);
          if (v16 <= *((float *)this + 52))
          {
            if (v16 >= 0.0)
            {
              v19 = v14 + (float)((float)((float)(*(float *)v9 + *(float *)(v11 + 20)) + *(float *)(v11 + 16)) - v15);
            }
            else
            {
              v19 = 0.0;
              if (v16 < -0.01 && kaldi::g_kaldi_verbose_level >= -1)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Negative extra_cost: ", 21);
                std::ostream::operator<<();
                kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
              }
            }
            if (v19 < v13)
              v13 = v19;
            v17 = *(_QWORD *)(v11 + 24);
            v12 = v11;
          }
          else
          {
            v17 = *(_QWORD *)(v11 + 24);
            v18 = (_QWORD *)(v12 + 24);
            if (!v12)
              v18 = (_QWORD *)(v9 + 8);
            *v18 = v17;
            MEMORY[0x1AF44D190](v11, 0x1020C40D9E1CEDCLL);
            *a4 = 1;
          }
          v11 = v17;
        }
        while (v17);
      }
      else
      {
        v13 = INFINITY;
      }
      if (vabds_f32(v13, *(float *)(v9 + 4)) > a5)
        v10 = 1;
      *(float *)(v9 + 4) = v13;
      v9 = *(_QWORD *)(v9 + 16);
      if (!v9)
      {
        if ((v10 & 1) == 0)
          break;
        v10 = 0;
        *a3 = 1;
        v9 = *(_QWORD *)(*((_QWORD *)this + 10) + v21);
        if (!v9)
          break;
      }
    }
  }
}

void sub_1AD9D329C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::LatticeFasterOnlineDecoder::PruneForwardLinksFinal(kaldi::LatticeFasterOnlineDecoder *this)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  float *v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  _QWORD *v22;
  float v23;
  float v25;
  float v26;
  uint64_t v27;
  _QWORD v28[35];

  v2 = *((_QWORD *)this + 10);
  v3 = ((*((_QWORD *)this + 11) - v2) << 28) - 0x100000000;
  if (*(_QWORD *)(v2 + (v3 >> 28)))
    v4 = 1;
  else
    v4 = kaldi::g_kaldi_verbose_level < -1;
  if (!v4)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"No tokens alive at end of file\n", 31);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
  }
  kaldi::LatticeFasterOnlineDecoder::ComputeFinalCosts((unsigned int **)this, (_QWORD *)this + 32, (float *)this + 74, (float *)this + 75);
  *((_BYTE *)this + 253) = 1;
  v5 = *((_QWORD *)this + 1);
  if (v5 != -1)
  {
    v6 = *((_QWORD *)this + 3);
    do
    {
      v7 = (uint64_t *)(v6 + 16 * v5);
      v7[1] = 0;
      v5 = *v7;
    }
    while (v5 != -1);
  }
  v8 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = -1;
  if (v8)
  {
    v9 = *((_QWORD *)this + 6);
    do
    {
      v10 = v8;
      v8 = *(_QWORD *)(v8 + 16);
      *(_QWORD *)(v10 + 16) = v9;
      v9 = v10;
    }
    while (v8);
    *((_QWORD *)this + 6) = v10;
  }
  do
  {
    v27 = 0;
    v27 = *(_QWORD *)(*((_QWORD *)this + 10) + 16 * (v3 >> 32));
    if (!v27)
      break;
    v11 = 0;
    do
    {
      if (*((_QWORD *)this + 35))
      {
        v12 = (float *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::find<kaldi::LatticeFasterOnlineDecoder::Token *>((_QWORD *)this + 32, &v27);
        if (v12)
          v13 = v12[6];
        else
          v13 = INFINITY;
      }
      else
      {
        v13 = 0.0;
      }
      v14 = v27;
      v15 = (float)(v13 + *(float *)v27) - *((float *)this + 75);
      v16 = *(_QWORD *)(v27 + 8);
      if (v16)
      {
        v17 = 0;
        do
        {
          v19 = **(float **)v16;
          v18 = *(float *)(*(_QWORD *)v16 + 4);
          v20 = v18 + (float)((float)((float)(*(float *)v27 + *(float *)(v16 + 20)) + *(float *)(v16 + 16)) - v19);
          if (v20 <= *((float *)this + 52))
          {
            if (v20 >= 0.0)
            {
              v23 = v18 + (float)((float)((float)(*(float *)v27 + *(float *)(v16 + 20)) + *(float *)(v16 + 16)) - v19);
            }
            else
            {
              v23 = 0.0;
              if (v20 < -0.01 && kaldi::g_kaldi_verbose_level >= -1)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Negative extra_cost: ", 21);
                std::ostream::operator<<();
                kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
              }
            }
            if (v23 < v15)
              v15 = v23;
            v21 = *(_QWORD *)(v16 + 24);
            v17 = v16;
          }
          else
          {
            v21 = *(_QWORD *)(v16 + 24);
            v22 = (_QWORD *)(v27 + 8);
            if (v17)
              v22 = (_QWORD *)(v17 + 24);
            *v22 = v21;
            MEMORY[0x1AF44D190](v16, 0x1020C40D9E1CEDCLL);
          }
          v16 = v21;
        }
        while (v21);
        v14 = v27;
      }
      v25 = INFINITY;
      if (v15 <= *((float *)this + 52))
        v25 = v15;
      v26 = *(float *)(v14 + 4);
      if (v26 != v25
        && (COERCE_INT(fabs(v26 - v25)) > 2139095039
         || fabsf(v26 - v25) > (float)((float)(fabsf(v26) + fabsf(v25)) * 0.00001)))
      {
        v11 = 1;
      }
      *(float *)(v14 + 4) = v25;
      v27 = *(_QWORD *)(v14 + 16);
    }
    while (v27);
  }
  while ((v11 & 1) != 0);
}

void sub_1AD9D35B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

float kaldi::LatticeFasterOnlineDecoder::FinalRelativeCost(kaldi::LatticeFasterOnlineDecoder *this)
{
  float v2;

  if (*((_BYTE *)this + 253))
    return *((float *)this + 74);
  v2 = 0.0;
  kaldi::LatticeFasterOnlineDecoder::ComputeFinalCosts((unsigned int **)this, 0, &v2, 0);
  return v2;
}

uint64_t kaldi::LatticeFasterOnlineDecoder::PruneTokensForFrame(kaldi::LatticeFasterOnlineDecoder *this, unsigned int a2)
{
  uint64_t *v3;
  uint64_t result;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD v9[34];

  v3 = (uint64_t *)(*((_QWORD *)this + 10) + 16 * a2);
  result = *v3;
  if (*v3)
    v5 = 1;
  else
    v5 = kaldi::g_kaldi_verbose_level < -1;
  if (!v5)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"No tokens alive [doing pruning]\n", 32);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    result = *v3;
  }
  if (result)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(result + 16);
      if (*(float *)(result + 4) == INFINITY)
      {
        v8 = (uint64_t *)(v6 + 16);
        if (!v6)
          v8 = v3;
        *v8 = v7;
        MEMORY[0x1AF44D190]();
        --*((_DWORD *)this + 62);
      }
      else
      {
        v6 = result;
      }
      result = v7;
    }
    while (v7);
  }
  return result;
}

void sub_1AD9D36FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

float kaldi::GetCutoffHelper<kaldi::LatticeFasterOnlineDecoder,kaldi::LatticeFasterDecoderConfig,kaldi::HashList<int,kaldi::LatticeFasterOnlineDecoder::Token *,std::hash<int>,std::equal_to<int>>::Elem>(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, float *a5, _QWORD *a6, int a7, float a8)
{
  uint64_t v9;
  int v11;
  int v12;
  void **v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  unint64_t v20;
  float *v21;
  float *v22;
  float *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  float *v29;
  float v30;
  BOOL v31;
  uint64_t v32;
  float v33;
  float v34;
  BOOL v35;
  float v36;
  float v37;
  float *v38;
  float *v39;
  unint64_t v40;
  float *v41;
  int v42;
  float v43;
  float v44;
  float *v45;
  int v48;
  unint64_t v49;

  v9 = a3;
  v11 = *(_DWORD *)(a2 + 8);
  if (*(_DWORD *)(a2 + 12))
    v11 = *(_DWORD *)(a2 + 12);
  if (a7)
    v12 = v11;
  else
    v12 = 0;
  if (*(_DWORD *)(a2 + 4) == 0x7FFFFFFF && v12 == 0)
  {
    v32 = 0;
    v33 = INFINITY;
    if (a3)
    {
      do
      {
        v34 = **(float **)(v9 + 8);
        if (v34 >= v33)
        {
          v35 = 1;
        }
        else
        {
          v33 = **(float **)(v9 + 8);
          v35 = a6 == 0;
        }
        if (!v35)
        {
          *a6 = v9;
          v33 = v34;
        }
        v9 = *(_QWORD *)(v9 + 16);
        ++v32;
      }
      while (v9);
    }
    if (a4)
      *a4 = v32;
    if (a5)
      *a5 = *(float *)a2;
    return v33 + *(float *)a2;
  }
  else
  {
    v48 = v12;
    v49 = *(int *)(a2 + 4);
    v15 = (void **)(a1 + 16);
    a1[17] = a1[16];
    v16 = 0;
    if (a3)
    {
      v17 = -INFINITY;
      v18 = INFINITY;
      do
      {
        v19 = **(float **)(v9 + 8);
        v21 = (float *)a1[17];
        v20 = a1[18];
        if ((unint64_t)v21 >= v20)
        {
          v23 = (float *)*v15;
          v24 = ((char *)v21 - (_BYTE *)*v15) >> 2;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v26 = v20 - (_QWORD)v23;
          if (v26 >> 1 > v25)
            v25 = v26 >> 1;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
            v27 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v27 = v25;
          if (v27)
          {
            v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 18), v27);
            v23 = (float *)a1[16];
            v21 = (float *)a1[17];
          }
          else
          {
            v28 = 0;
          }
          v29 = (float *)&v28[4 * v24];
          *v29 = v19;
          v22 = v29 + 1;
          while (v21 != v23)
          {
            v30 = *--v21;
            a8 = v30;
            *--v29 = v30;
          }
          a1[16] = v29;
          a1[17] = v22;
          a1[18] = &v28[4 * v27];
          if (v23)
            operator delete(v23);
        }
        else
        {
          *v21 = v19;
          v22 = v21 + 1;
        }
        a1[17] = v22;
        if (v19 >= v18)
        {
          v31 = 1;
        }
        else
        {
          v18 = v19;
          v31 = a6 == 0;
        }
        if (!v31)
        {
          *a6 = v9;
          v18 = v19;
        }
        if (v19 > v17)
          v17 = v19;
        v9 = *(_QWORD *)(v9 + 16);
        ++v16;
      }
      while (v9);
    }
    else
    {
      v18 = INFINITY;
      v17 = -INFINITY;
    }
    if (a4)
      *a4 = v16;
    v37 = *(float *)a2;
    v36 = INFINITY;
    if (!*(_DWORD *)(a2 + 12))
      v17 = INFINITY;
    v38 = (float *)a1[16];
    v39 = (float *)a1[17];
    v40 = v39 - v38;
    if (v40 <= v49)
    {
      v42 = v48;
    }
    else
    {
      v41 = &v38[v49];
      v42 = v48;
      if (v41 != v39)
      {
        std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(v38, v41, v39, a8);
        v38 = (float *)a1[16];
        v39 = (float *)a1[17];
        v40 = v39 - v38;
      }
      v36 = v38[v49];
    }
    v43 = v18 + v37;
    if (v40 > v42)
      v44 = v18;
    else
      v44 = v17;
    if (v42 && v40 > v42)
    {
      v45 = &v38[v42];
      if (v40 > v49)
        v39 = &v38[v49];
      if (v45 != v39)
      {
        std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(v38, v45, v39, v44);
        v38 = (float *)*v15;
      }
      v44 = v38[v42];
    }
    if (v36 >= v43)
    {
      if (v44 <= v43)
      {
        *a5 = *(float *)a2;
        return v43;
      }
      else
      {
        if (a5)
          *a5 = (float)(v44 - v18) + *(float *)(a2 + 28);
        return v44;
      }
    }
    else if (a5)
    {
      *a5 = (float)(v36 - v18) + *(float *)(a2 + 28);
    }
  }
  return v36;
}

uint64_t kaldi::LatticeFasterOnlineDecoder::FindOrAddToken(kaldi::LatticeFasterOnlineDecoder *this, int a2, int a3, float a4, Token *a5, BOOL *a6)
{
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  kaldi::LatticeFasterOnlineDecoder *v16;
  uint64_t v17;
  uint64_t i;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  kaldi::LatticeFasterOnlineDecoder *v28;
  BOOL v29;

  v11 = a2;
  v12 = *((_QWORD *)this + 3);
  v13 = (unint64_t)a2 % *((_QWORD *)this + 2);
  v14 = *(_QWORD *)(v12 + 16 * v13 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(v12 + 16 * v13);
    v16 = this;
    if (v15 != -1)
      v16 = (kaldi::LatticeFasterOnlineDecoder *)(*(_QWORD *)(v12 + 16 * v15 + 8) + 16);
    v17 = *(_QWORD *)(v14 + 16);
    for (i = *(_QWORD *)v16; i != v17; i = *(_QWORD *)(i + 16))
    {
      if (*(_DWORD *)i == a2)
      {
        v20 = *(_QWORD *)(i + 8);
        if (*(float *)v20 > a4)
        {
          *(float *)v20 = a4;
          *(_QWORD *)(v20 + 24) = a5;
          if (!a6)
            return v20;
          goto LABEL_17;
        }
        if (!a6)
          return v20;
        v29 = 0;
        goto LABEL_18;
      }
    }
  }
  v19 = (uint64_t *)(*((_QWORD *)this + 10) + 16 * a3);
  v20 = operator new();
  v21 = *v19;
  *(float *)v20 = a4;
  *(_DWORD *)(v20 + 4) = 0;
  *(_QWORD *)(v20 + 8) = 0;
  *(_QWORD *)(v20 + 16) = v21;
  *(_QWORD *)(v20 + 24) = a5;
  *v19 = v20;
  ++*((_DWORD *)this + 62);
  v22 = v11 % *((_QWORD *)this + 2);
  v23 = (_QWORD *)(*((_QWORD *)this + 3) + 16 * v22);
  v24 = kaldi::HashList<int,kaldi::LatticeFasterOnlineDecoder::Token *,std::hash<int>,std::equal_to<int>>::New(this);
  *(_DWORD *)v24 = a2;
  *(_QWORD *)(v24 + 8) = v20;
  v25 = v23 + 1;
  v26 = v23[1];
  if (v26)
  {
    *(_QWORD *)(v24 + 16) = *(_QWORD *)(v26 + 16);
    *(_QWORD *)(v26 + 16) = v24;
    *v25 = v24;
    if (!a6)
      return v20;
  }
  else
  {
    v27 = *((_QWORD *)this + 1);
    v28 = this;
    if (v27 != -1)
      v28 = (kaldi::LatticeFasterOnlineDecoder *)(*(_QWORD *)(*((_QWORD *)this + 3) + 16 * v27 + 8) + 16);
    *(_QWORD *)v28 = v24;
    *(_QWORD *)(v24 + 16) = 0;
    *v25 = v24;
    *v23 = v27;
    *((_QWORD *)this + 1) = v22;
    if (!a6)
      return v20;
  }
LABEL_17:
  v29 = 1;
LABEL_18:
  *a6 = v29;
  return v20;
}

_QWORD *kaldi::HashList<int,kaldi::LatticeFasterOnlineDecoder::Token *,std::hash<int>,std::equal_to<int>>::~HashList(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _BYTE *v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  _QWORD v13[34];

  v2 = a1[6];
  if (v2)
  {
    v3 = 0;
    do
    {
      ++v3;
      v2 = *(_QWORD *)(v2 + 16);
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  v4 = (_QWORD *)a1[7];
  v5 = (_BYTE *)a1[8];
  if (v5 == (_BYTE *)v4)
  {
    v7 = 0;
    v4 = (_QWORD *)a1[8];
  }
  else
  {
    v6 = 0;
    v7 = 0;
    do
    {
      if (v4[v6])
      {
        MEMORY[0x1AF44D160](v4[v6], 0x1020C80F89CB87BLL);
        v4 = (_QWORD *)a1[7];
        v5 = (_BYTE *)a1[8];
      }
      ++v6;
      v7 += 1024;
    }
    while (v6 < (v5 - (_BYTE *)v4) >> 3);
  }
  if (v3 != v7 && kaldi::g_kaldi_verbose_level > -2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Possible memory leak: ", 22);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" != ", 4);
    v9 = (_QWORD *)std::ostream::operator<<();
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)": you might have forgotten to call Delete on ", 45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"some Elems", 10);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    v4 = (_QWORD *)a1[7];
  }
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  v11 = (void *)a1[3];
  if (v11)
  {
    a1[4] = v11;
    operator delete(v11);
  }
  return a1;
}

void std::vector<kaldi::LatticeFasterOnlineDecoder::TokenList>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  __int16 v22;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (a2 <= (uint64_t)&v6[-v7] >> 4)
  {
    if (a2)
    {
      v14 = v7 + 16 * a2;
      do
      {
        *(_QWORD *)v7 = 0;
        *(_WORD *)(v7 + 8) = 257;
        v7 += 16;
      }
      while (v7 != v14);
      v7 = v14;
    }
    a1[1] = (char *)v7;
  }
  else
  {
    v8 = v7 - (_QWORD)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - *a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v4, v12);
    else
      v13 = 0;
    v15 = &v13[16 * v10];
    v16 = &v15[16 * a2];
    v17 = v15;
    do
    {
      *(_QWORD *)v17 = 0;
      *((_WORD *)v17 + 4) = 257;
      v17 += 16;
    }
    while (v17 != v16);
    v18 = &v13[16 * v12];
    v20 = *a1;
    v19 = a1[1];
    if (v19 != *a1)
    {
      do
      {
        v21 = *((_QWORD *)v19 - 2);
        v19 -= 16;
        v22 = *((_WORD *)v19 + 4);
        *((_QWORD *)v15 - 2) = v21;
        v15 -= 16;
        *((_WORD *)v15 + 4) = v22;
      }
      while (v19 != v20);
      v19 = *a1;
    }
    *a1 = v15;
    a1[1] = v16;
    a1[2] = v18;
    if (v19)
      operator delete(v19);
  }
}

uint64_t kaldi::HashList<int,kaldi::LatticeFasterOnlineDecoder::Token *,std::hash<int>,std::equal_to<int>>::New(_QWORD *a1)
{
  uint64_t result;
  char **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  result = a1[6];
  if (!result)
  {
    v3 = (char **)(a1 + 7);
    do
    {
      v4 = operator new[]();
      v5 = v4;
      v6 = -24552;
      do
      {
        *(_QWORD *)(v4 + v6 + 24568) = v4 + v6 + 24576;
        v6 += 24;
      }
      while (v6);
      *(_QWORD *)(v4 + 24568) = 0;
      a1[6] = v4;
      v8 = (uint64_t *)a1[8];
      v7 = a1[9];
      if ((unint64_t)v8 >= v7)
      {
        v10 = ((char *)v8 - *v3) >> 3;
        if ((unint64_t)(v10 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v11 = v7 - (_QWORD)*v3;
        v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1))
          v12 = v10 + 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
          v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 9), v13);
        else
          v14 = 0;
        v15 = (uint64_t *)&v14[8 * v10];
        *v15 = v5;
        v9 = v15 + 1;
        v17 = (char *)a1[7];
        v16 = (char *)a1[8];
        if (v16 != v17)
        {
          do
          {
            v18 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            *--v15 = v18;
          }
          while (v16 != v17);
          v16 = *v3;
        }
        a1[7] = v15;
        a1[8] = v9;
        a1[9] = &v14[8 * v13];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *v8 = v4;
        v9 = v8 + 1;
      }
      a1[8] = v9;
      result = a1[6];
    }
    while (!result);
  }
  a1[6] = *(_QWORD *)(result + 16);
  return result;
}

uint64_t fst::ArcMap<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ProjectMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  int v13;
  uint64_t v14;

  if (*a2 == 1 || ((*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 280))(a1, 0), *a2 != 2))
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 288))(a1, 0);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result != -1)
  {
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1) >= 1)
    {
      v6 = 0;
      do
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 296))(a1, v6, &v14);
        while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
        {
          v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
          if (*a2 == 1)
            v8 = (_DWORD *)v7;
          else
            v8 = (_DWORD *)(v7 + 4);
          v9 = *(_DWORD *)(v7 + 16);
          LODWORD(v12[0]) = *v8;
          HIDWORD(v12[0]) = v12[0];
          v12[1] = *(_QWORD *)(v7 + 8);
          v13 = v9;
          (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v14 + 88))(v14, v12);
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
        }
        if (v14)
          (*(void (**)(void))(*(_QWORD *)v14 + 8))();
        (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(v12, a1, v6);
        v11 = v12[0];
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 184))(a1, v6, &v11);
        v6 = (v6 + 1);
      }
      while ((int)v6 < (*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1));
    }
    v10 = fst::ProjectProperties(v5, *a2 == 1);
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v10, 0x3FFFFFFF0007);
  }
  return result;
}

void sub_1AD9D4174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2)
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v13 = operator new(0x20uLL);
  *v13 = 0;
  v13[1] = v9;
  v13[2] = **a4;
  *((_DWORD *)v13 + 6) = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v20);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *v13 = *v22;
LABEL_38:
    *v22 = v13;
    goto LABEL_39;
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*v13)
  {
    v23 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10)
        v23 %= v10;
    }
    else
    {
      v23 &= v10 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_1AD9D43E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::find<kaldi::LatticeFasterOnlineDecoder::Token *>(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>>>::find<kaldi::LatticeFasterOnlineDecoder::Token *>(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v5 == v10)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__hash_table<kaldi::LatticeFasterOnlineDecoder::Token *,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::allocator<kaldi::LatticeFasterOnlineDecoder::Token *>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,kaldi::LatticeFasterOnlineDecoder::Token * const&>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v8;
  i[2] = *a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1AD9D4808(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<kaldi::LatticeFasterOnlineDecoder::Token *,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::allocator<kaldi::LatticeFasterOnlineDecoder::Token *>>::__erase_unique<kaldi::LatticeFasterOnlineDecoder::Token *>(_QWORD *a1, _QWORD *a2)
{
  uint64_t *result;

  result = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::find<kaldi::LatticeFasterOnlineDecoder::Token *>(a1, a2);
  if (result)
  {
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

kaldi::quasar::RnnlmEvaluator *kaldi::quasar::RnnlmEvaluator::RnnlmEvaluator(kaldi::quasar::RnnlmEvaluator *this, const kaldi::quasar::NnlmDecoderWord *a2, kaldi::InferenceNetItf *a3, kaldi::InferenceNetItf *a4, float a5, int a6, int a7, int a8, int a9)
{
  kaldi::quasar::DnnlmEvaluator *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16[6];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  char v21;

  v12 = kaldi::quasar::DnnlmEvaluator::DnnlmEvaluator(this, a2, a3, a4, a5, a7, a8);
  *(_QWORD *)v12 = &off_1E5D33070;
  *((_QWORD *)v12 + 38) = 0;
  v13 = (uint64_t)v12 + 312;
  std::unordered_map<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,std::allocator<std::pair<std::vector<int> const* const,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::unordered_map((uint64_t)v12 + 312, 0, (char *)&v15, &v21);
  *((_QWORD *)this + 45) = (char *)this + 360;
  *((_QWORD *)this + 46) = (char *)this + 360;
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = 0;
  std::unordered_map<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,std::allocator<std::pair<std::vector<int> const* const,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>>>::unordered_map((uint64_t)this + 392, 0, (char *)&v15, &v21);
  *((_QWORD *)this + 55) = (char *)this + 440;
  *((_QWORD *)this + 56) = (char *)this + 440;
  *((_QWORD *)this + 57) = 0;
  *((_DWORD *)this + 116) = a6;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"using RNN style LM in the decoder", 33);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v15);
  }
  if (*((_BYTE *)this + 40))
  {
    v15 = a9;
    std::unordered_map<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,std::allocator<std::pair<std::vector<int> const* const,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>>>::unordered_map((uint64_t)v16, 0, &v21, &v20);
    v17 = (uint64_t)&v17;
    v18 = &v17;
    v19 = 0;
    *((_QWORD *)this + 48) = v15;
    std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>>>::__move_assign((uint64_t)this + 392, v16);
    std::list<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>>::__move_assign((uint64_t *)this + 55, &v17);
    std::__list_imp<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>>::clear(&v17);
  }
  else
  {
    v15 = a9;
    std::unordered_map<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,std::allocator<std::pair<std::vector<int> const* const,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::unordered_map((uint64_t)v16, 0, &v21, &v20);
    v17 = (uint64_t)&v17;
    v18 = &v17;
    v19 = 0;
    *((_QWORD *)this + 38) = v15;
    std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>>>::__move_assign(v13, v16);
    std::list<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>>::__move_assign((uint64_t *)this + 45, &v17);
    std::__list_imp<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>>::clear(&v17);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v16);
  return this;
}

void sub_1AD9D49FC(_Unwind_Exception *a1)
{
  kaldi::quasar::DnnlmEvaluator *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  std::__list_imp<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>>::clear(v5);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4);
  std::__list_imp<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>>::clear(v3);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v2);
  kaldi::quasar::DnnlmEvaluator::~DnnlmEvaluator(v1);
  _Unwind_Resume(a1);
}

float kaldi::quasar::RnnlmEvaluator::CalculateSingleNgramAfterCacheMiss(uint64_t a1, uint64_t a2)
{
  const void *v4;
  uint64_t v6;
  uint64_t *v7;
  void *v8;
  float UnitOutput;
  uint64_t *v10;
  void *v11;
  float v12;
  uint64_t *v14;
  void *__p;
  void *v16;
  uint64_t v17;

  v4 = *(const void **)a2;
  v6 = *(_QWORD *)(a2 + 8) - 4;
  __p = 0;
  v16 = 0;
  v17 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, v4, v6, (v6 - (uint64_t)v4) >> 2);
  if (*(_BYTE *)(a1 + 40))
  {
    v14 = 0;
    kaldi::quasar::RnnlmEvaluator::CalculateAndCacheNgramContext(a1, (const void **)&__p, &v14);
    v7 = v14;
    v8 = *(void **)(a1 + 24);
    if (v8)
    UnitOutput = kaldi::quasar::CEInferenceNet::GetUnitOutput((uint64_t)v8, v7, *(_DWORD *)(*(_QWORD *)(a2 + 8) - 4));
  }
  else
  {
    v14 = 0;
    kaldi::quasar::RnnlmEvaluator::CalculateAndCacheNgramContext(a1, (const void **)&__p, &v14);
    v10 = v14;
    UnitOutput = (*(float (**)(void *, uint64_t *, _QWORD))(*(_QWORD *)v11 + 136))(v11, v10, *(unsigned int *)(*(_QWORD *)(a2 + 8) - 4));
  }
  v12 = -(float)(UnitOutput - *(float *)(a1 + 44));
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_1AD9D4B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::RnnlmEvaluator::CalculateAndCacheNgramContext(uint64_t a1, const void **a2, uint64_t **a3)
{
  unint64_t *v6;
  const void *v7;
  uint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  char *v12;
  _DWORD *v13;
  void **v14;
  uint64_t *v15;
  _QWORD *v16;
  const void *v17;
  void *v18;
  uint64_t v19;
  void **v20;
  uint64_t *v21;
  char v22;
  int v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  int *v32;
  int v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t **v36;
  void **v37;
  float *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[3];
  uint64_t *v42;
  void *v43;
  void **v44;
  uint64_t v45;
  void *__p;
  char *v47;
  char *v48;

  v6 = (unint64_t *)(a1 + 384);
  if (!kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::Get(a1 + 384, (uint64_t)a2, a3))
  {
    v7 = *a2;
    v8 = (uint64_t)a2[1] - 4;
    v9 = (v8 - (uint64_t)*a2) >> 2;
    v47 = 0;
    v48 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, v7, v8, v9);
    v43 = &v43;
    v44 = &v43;
    v45 = 0;
    v10 = a2[1];
    v11 = operator new(0x18uLL);
    v11[4] = *(v10 - 1);
    *(_QWORD *)v11 = &v43;
    *((_QWORD *)v11 + 1) = &v43;
    v43 = v11;
    v44 = (void **)v11;
    v45 = 1;
    v42 = 0;
    if (__p == v47)
    {
      v15 = 0;
    }
    else
    {
      do
      {
        if (kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::Get((uint64_t)v6, (uint64_t)&__p, &v42))
        {
          break;
        }
        v12 = v47;
        v13 = operator new(0x18uLL);
        v13[4] = *((_DWORD *)v12 - 1);
        v14 = v44;
        *(_QWORD *)v13 = &v43;
        *((_QWORD *)v13 + 1) = v14;
        *v14 = v13;
        v44 = (void **)v13;
        ++v45;
        v47 = v12 - 4;
      }
      while (__p != v12 - 4);
      v15 = v42;
    }
    memset(v41, 0, sizeof(v41));
    if (v15)
      v16 = v15 + 1;
    else
      v16 = v41;
    v17 = *(const void **)(a1 + 24);
    if (v17)
    else
      v18 = 0;
    v19 = *(unsigned int *)(a1 + 16);
    v39 = 0;
    v40 = 0;
    v37 = (void **)&unk_1E5D341C8;
    v38 = 0;
    kaldi::CuVector<float>::Resize((uint64_t)&v37, v19, 0);
    v36 = a3;
    v20 = v44;
    if (v44 == &v43)
    {
      v21 = v42;
    }
    else
    {
      v21 = 0;
      v22 = 1;
      do
      {
        v23 = *((_DWORD *)v20 + 4);
        *v38 = (float)v23;
        v24 = v47;
        if (v47 >= v48)
        {
          v26 = (char *)__p;
          v27 = (v47 - (_BYTE *)__p) >> 2;
          v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v29 = v48 - (_BYTE *)__p;
          if ((v48 - (_BYTE *)__p) >> 1 > v28)
            v28 = v29 >> 1;
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
            v30 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v30 = v28;
          if (v30)
          {
            v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v48, v30);
            v26 = (char *)__p;
            v24 = v47;
          }
          else
          {
            v31 = 0;
          }
          v32 = (int *)&v31[4 * v27];
          *v32 = v23;
          v25 = (char *)(v32 + 1);
          while (v24 != v26)
          {
            v33 = *((_DWORD *)v24 - 1);
            v24 -= 4;
            *--v32 = v33;
          }
          __p = v32;
          v47 = v25;
          v48 = &v31[4 * v30];
          if (v26)
            operator delete(v26);
        }
        else
        {
          *(_DWORD *)v47 = v23;
          v25 = v24 + 4;
        }
        v47 = v25;
        v34 = kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertInPlace(v6, (uint64_t)&__p);
        v42 = v34;
        if ((v22 & 1) != 0)
          v35 = v16;
        else
          v35 = v21 + 1;
        kaldi::quasar::CEInferenceNet::MultiIOFeedforward((uint64_t)v18, (uint64_t)&v37, v35, v34, v34 + 1, 1);
        v22 = 0;
        v21 = v42;
        v20 = (void **)v20[1];
      }
      while (v20 != &v43);
    }
    *v36 = v21;
    v37 = (void **)&unk_1E5D341C8;
    kaldi::CuVector<float>::Destroy((uint64_t)&v37);
    v37 = (void **)v41;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v37);
    std::__list_imp<char *>::clear(&v43);
    if (__p)
    {
      v47 = (char *)__p;
      operator delete(__p);
    }
  }
}

{
  unint64_t *v6;
  const void *v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _DWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *i;
  int v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  int *v26;
  int v27;
  void *v28;
  float *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  void *__p;
  char *v37;
  char *v38;

  v6 = (unint64_t *)(a1 + 304);
  if (!kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::Get(a1 + 304, (uint64_t)a2, a3))
  {
    v7 = *(const void **)(a1 + 24);
    if (v7)
    else
      v8 = 0;
    v9 = *a2;
    v10 = (uint64_t)a2[1];
    v11 = (v10 - (uint64_t)*a2) >> 2;
    v37 = 0;
    v38 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, v9, v10, v11);
    v33 = (uint64_t)&v33;
    v34 = &v33;
    v35 = 0;
    v32 = 0;
    if (__p == v37)
      goto LABEL_10;
    do
    {
      if (kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::Get((uint64_t)v6, (uint64_t)&__p, &v32))
      {
        break;
      }
      v12 = v37;
      v13 = operator new(0x18uLL);
      v13[4] = *((_DWORD *)v12 - 1);
      v14 = v34;
      *(_QWORD *)v13 = &v33;
      *((_QWORD *)v13 + 1) = v14;
      *v14 = (uint64_t)v13;
      v34 = (uint64_t *)v13;
      ++v35;
      v37 = v12 - 4;
    }
    while (__p != v12 - 4);
    if (!v32)
LABEL_10:
      (*(void (**)(void *))(*(_QWORD *)v8 + 152))(v8);
    else
      kaldi::nnet1::Nnet1InferenceNet::SetHistoryState((uint64_t)v8, v32 + 4);
    v15 = *(unsigned int *)(a1 + 16);
    v30 = 0;
    v31 = 0;
    v28 = &unk_1E5D341C8;
    v29 = 0;
    kaldi::CuVector<float>::Resize((uint64_t)&v28, v15, 0);
    for (i = v34; i != &v33; i = (uint64_t *)i[1])
    {
      v17 = *((_DWORD *)i + 4);
      *v29 = (float)v17;
      v18 = v37;
      if (v37 >= v38)
      {
        v20 = (char *)__p;
        v21 = (v37 - (_BYTE *)__p) >> 2;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v23 = v38 - (_BYTE *)__p;
        if ((v38 - (_BYTE *)__p) >> 1 > v22)
          v22 = v23 >> 1;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
          v24 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        if (v24)
        {
          v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v38, v24);
          v20 = (char *)__p;
          v18 = v37;
        }
        else
        {
          v25 = 0;
        }
        v26 = (int *)&v25[4 * v21];
        *v26 = v17;
        v19 = (char *)(v26 + 1);
        while (v18 != v20)
        {
          v27 = *((_DWORD *)v18 - 1);
          v18 -= 4;
          *--v26 = v27;
        }
        __p = v26;
        v37 = v19;
        v38 = &v25[4 * v24];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *(_DWORD *)v37 = v17;
        v19 = v18 + 4;
      }
      v37 = v19;
      v32 = kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertInPlace(v6, (uint64_t)&__p);
      (*(void (**)(void *, void **, uint64_t *, uint64_t))(*(_QWORD *)v8 + 104))(v8, &v28, v32, 1);
      kaldi::nnet1::Nnet1InferenceNet::GetHistoryState((uint64_t)v8, v32 + 4);
    }
    *a3 = v32;
    v28 = &unk_1E5D341C8;
    kaldi::CuVector<float>::Destroy((uint64_t)&v28);
    std::__list_imp<char *>::clear(&v33);
    if (__p)
    {
      v37 = (char *)__p;
      operator delete(__p);
    }
  }
}

void sub_1AD9D4EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  a11 = &a15;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  std::__list_imp<char *>::clear(&a19);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1AD9D51AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  std::__list_imp<char *>::clear(&a15);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::Get(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v9[34];

  if (!a3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "v != nullptr");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  v9[0] = a2;
  v5 = std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::find<std::vector<int> const*>((_QWORD *)(a1 + 8), v9);
  v6 = v5;
  if (v5)
  {
    v7 = (uint64_t *)v5[3];
    std::list<std::pair<std::string,std::vector<std::string>>>::splice(a1 + 56, *(uint64_t **)(a1 + 64), a1 + 56, v7);
    *a3 = v7 + 5;
  }
  return v6 != 0;
}

uint64_t kaldi::nnet1::Nnet1InferenceNet::SetHistoryState(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = *(_QWORD *)(result + 392);
  if (*(_QWORD *)(result + 400) != v2)
  {
    v4 = result;
    v5 = 0;
    v6 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v2 + 8 * v6) + 64))(*(_QWORD *)(v2 + 8 * v6), *a2 + v5, 0, 0);
      ++v6;
      v2 = *(_QWORD *)(v4 + 392);
      v5 += 32;
    }
    while (v6 < (*(_QWORD *)(v4 + 400) - v2) >> 3);
  }
  return result;
}

uint64_t *kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertInPlace(unint64_t *a1, uint64_t a2)
{
  _QWORD v3[34];

  if (!*a1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "capacity_ > 0");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  return kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertWithValueFunction<kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertInPlace(std::vector<int> const&)::{lambda(kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry&)#1}>(a1, a2);
}

uint64_t *kaldi::nnet1::Nnet1InferenceNet::GetHistoryState(uint64_t a1, uint64_t *a2)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  result = std::vector<kaldi::CuVector<float>>::resize(a2, (uint64_t)(*(_QWORD *)(a1 + 400) - *(_QWORD *)(a1 + 392)) >> 3);
  v5 = *(_QWORD *)(a1 + 392);
  if (*(_QWORD *)(a1 + 400) != v5)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      if (v7 >= (a2[1] - *a2) >> 5)
        std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
      result = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v5 + 8 * v7) + 48))(*(_QWORD *)(v5 + 8 * v7), *a2 + v6, 0, 0);
      ++v7;
      v5 = *(_QWORD *)(a1 + 392);
      v6 += 32;
    }
    while (v7 < (*(_QWORD *)(a1 + 400) - v5) >> 3);
  }
  return result;
}

BOOL kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::Get(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v9[34];

  if (!a3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "v != nullptr");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  v9[0] = a2;
  v5 = std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::find<std::vector<int> const*>((_QWORD *)(a1 + 8), v9);
  v6 = v5;
  if (v5)
  {
    v7 = (uint64_t *)v5[3];
    std::list<std::pair<std::string,std::vector<std::string>>>::splice(a1 + 56, *(uint64_t **)(a1 + 64), a1 + 56, v7);
    *a3 = v7 + 5;
  }
  return v6 != 0;
}

uint64_t *kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertInPlace(unint64_t *a1, uint64_t a2)
{
  _QWORD v3[34];

  if (!*a1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "capacity_ > 0");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  return kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertWithValueFunction<kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertInPlace(std::vector<int> const&)::{lambda(kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE&)#1}>(a1, a2);
}

void kaldi::quasar::RnnlmEvaluator::ClearCaches(kaldi::quasar::RnnlmEvaluator *this)
{
  kaldi::quasar::DnnlmEvaluator::ClearCaches(this);
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear((_QWORD *)this + 39);
  std::__list_imp<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>>::clear((uint64_t *)this + 45);
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear((_QWORD *)this + 49);
  std::__list_imp<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>>::clear((uint64_t *)this + 55);
}

void kaldi::quasar::RnnlmEvaluator::~RnnlmEvaluator(kaldi::quasar::RnnlmEvaluator *this)
{
  kaldi::quasar::RnnlmEvaluator::~RnnlmEvaluator(this);
  JUMPOUT(0x1AF44D190);
}

{
  *(_QWORD *)this = &off_1E5D33070;
  std::__list_imp<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>>::clear((uint64_t *)this + 55);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 392);
  std::__list_imp<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>>::clear((uint64_t *)this + 45);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 312);
  kaldi::quasar::DnnlmEvaluator::~DnnlmEvaluator(this);
}

uint64_t kaldi::quasar::DnnlmEvaluator::ShouldCacheNgram()
{
  return 1;
}

void std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear((_QWORD *)a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  *(_QWORD *)(a1 + 8) = a2[1];
  a2[1] = 0;
  v6 = a2[3];
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 10);
  *(_BYTE *)(a1 + 44) = *((_BYTE *)a2 + 44);
  v9 = a2[2];
  v8 = a2 + 2;
  v7 = v9;
  *(_QWORD *)(a1 + 16) = v9;
  if (v6)
  {
    v10 = *(_QWORD *)(v7 + 8);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v10 %= v11;
    }
    else
    {
      v10 &= v11 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v10) = a1 + 16;
    *v8 = 0;
    v8[1] = 0;
  }
}

uint64_t std::list<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>>::__move_assign(uint64_t *a1, _QWORD *a2)
{
  std::__list_imp<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>>::clear(a1);
  return std::list<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>>::splice((uint64_t)a1, a1, a2);
}

uint64_t std::list<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>>::splice(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a3[2];
  if (v3)
  {
    v5 = *a3;
    v4 = (uint64_t *)a3[1];
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(*a3 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    v7 = *a2;
    *(_QWORD *)(v7 + 8) = v4;
    *v4 = v7;
    *a2 = v5;
    *(_QWORD *)(v5 + 8) = a2;
    *(_QWORD *)(result + 16) += v3;
    a3[2] = 0;
  }
  return result;
}

void std::__list_imp<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        std::__destroy_at[abi:ne180100]<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,0>((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,0>(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void **v4;

  v4 = (void **)(a1 + 32);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
}

uint64_t std::list<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>>::__move_assign(uint64_t *a1, _QWORD *a2)
{
  std::__list_imp<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>>::clear(a1);
  return std::list<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>>::splice((uint64_t)a1, a1, a2);
}

void std::__list_imp<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        std::__destroy_at[abi:ne180100]<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,0>((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,0>(uint64_t a1)
{
  void *v2;
  void **v3;

  v3 = (void **)(a1 + 56);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  *(_QWORD *)(a1 + 24) = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy(a1 + 24);
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
}

uint64_t std::unordered_map<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,std::allocator<std::pair<std::vector<int> const* const,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::unordered_map(uint64_t a1, size_t a2, char *a3, char *a4)
{
  char v5;
  char v6;

  v5 = *a3;
  v6 = *a4;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_BYTE *)(a1 + 44) = v6;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1AD9D5904(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,std::allocator<std::pair<std::vector<int> const* const,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>>>::unordered_map(uint64_t a1, size_t a2, char *a3, char *a4)
{
  char v5;
  char v6;

  v5 = *a3;
  v6 = *a4;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_BYTE *)(a1 + 44) = v6;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1AD9D595C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::find<std::vector<int> const*>(_QWORD *a1, uint64_t *a2)
{
  int *v3;
  int *v4;
  unint64_t v5;
  uint64_t v6;
  int8x8_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;

  v3 = *(int **)*a2;
  v4 = *(int **)(*a2 + 8);
  if (v3 == v4)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    do
    {
      v6 = *v3++;
      v5 = v6 + 7853 * v5;
    }
    while (v3 != v4);
  }
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    v10 = v5;
    if (v5 >= *(_QWORD *)&v7)
      v10 = v5 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v5;
  }
  v11 = *(_QWORD **)(*a1 + 8 * v10);
  if (!v11)
    return 0;
  v12 = (_QWORD *)*v11;
  if (*v11)
  {
    v13 = (uint64_t)a1 + 44;
    do
    {
      v14 = v12[1];
      if (v14 == v5)
      {
        if (kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred::operator()(v13, v12[2], *a2))
        {
          return v12;
        }
      }
      else
      {
        if (v9 > 1)
        {
          if (v14 >= *(_QWORD *)&v7)
            v14 %= *(_QWORD *)&v7;
        }
        else
        {
          v14 &= *(_QWORD *)&v7 - 1;
        }
        if (v14 != v10)
          return 0;
      }
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  return v12;
}

BOOL kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  size_t v4;

  if (a2 == a3)
    return 1;
  v4 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  return v4 == *(_QWORD *)(a3 + 8) - *(_QWORD *)a3 && memcmp(*(const void **)a2, *(const void **)a3, v4) == 0;
}

uint64_t *kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertWithValueFunction<kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertInPlace(std::vector<int> const&)::{lambda(kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry&)#1}>(unint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;

  v26 = (uint64_t *)&v26;
  v27 = (uint64_t *)&v26;
  v28 = 0;
  v4 = a1 + 1;
  *(_QWORD *)&v24 = a2;
  v5 = std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::find<std::vector<int> const*>(a1 + 1, (uint64_t *)&v24);
  if (v5)
  {
    v6 = (uint64_t *)v5[3];
    if (&v26 != (uint64_t **)v6)
    {
      v7 = (uint64_t *)v6[1];
      if (v7 != (uint64_t *)&v26)
      {
        v8 = *v6;
        *(_QWORD *)(v8 + 8) = v7;
        *(_QWORD *)v6[1] = v8;
        v9 = (uint64_t)v26;
        v26[1] = (uint64_t)v6;
        *v6 = v9;
        v6[1] = (uint64_t)&v26;
        --a1[9];
        v26 = v6;
        ++v28;
      }
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::erase(v4, v5);
  }
  else
  {
    v10 = a1[9];
    if (v10 >= *a1)
    {
      v14 = (uint64_t *)a1[7];
      if (&v26 != (uint64_t **)v14)
      {
        v15 = (uint64_t *)v14[1];
        if (v15 != (uint64_t *)&v26)
        {
          v16 = *v14;
          *(_QWORD *)(v16 + 8) = v15;
          *(_QWORD *)v14[1] = v16;
          v17 = (uint64_t)v26;
          v26[1] = (uint64_t)v14;
          *v14 = v17;
          v14[1] = (uint64_t)&v26;
          a1[9] = v10 - 1;
          v26 = v14;
          ++v28;
        }
      }
      *(_QWORD *)&v24 = v27 + 2;
      std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::__erase_unique<std::vector<int> const*>(v4, (uint64_t *)&v24);
      if (v27 + 2 != (uint64_t *)a2)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v27 + 16, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    }
    else
    {
      v24 = 0uLL;
      v25 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v24, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
      v11 = (uint64_t *)operator new(0x60uLL);
      v12 = v25;
      *((_OWORD *)v11 + 1) = v24;
      v11[6] = 0;
      v11[7] = 0;
      v11[8] = 0;
      v11[9] = 0;
      v11[4] = v12;
      v11[5] = (uint64_t)&unk_1E5D341C8;
      v11[10] = 0;
      v11[11] = 0;
      v13 = (uint64_t)v26;
      *v11 = (uint64_t)v26;
      v11[1] = (uint64_t)&v26;
      *(_QWORD *)(v13 + 8) = v11;
      v26 = v11;
      ++v28;
    }
  }
  v18 = v27;
  *(_QWORD *)&v24 = v27 + 2;
  *((_QWORD *)&v24 + 1) = v27;
  std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::__emplace_unique_key_args<std::vector<int> const*,std::pair<std::vector<int> const* const,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>((uint64_t)v4, (uint64_t *)&v24, &v24);
  v19 = (uint64_t *)a1[8];
  if (v19 != v18)
  {
    v20 = (uint64_t *)v18[1];
    if (v20 != v19)
    {
      v21 = *v18;
      *(_QWORD *)(v21 + 8) = v20;
      *(_QWORD *)v18[1] = v21;
      v22 = *v19;
      *(_QWORD *)(v22 + 8) = v18;
      *v18 = v22;
      *v19 = (uint64_t)v18;
      v18[1] = (uint64_t)v19;
      --v28;
      ++a1[9];
    }
  }
  std::__list_imp<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>>::clear((uint64_t *)&v26);
  return v18 + 5;
}

void sub_1AD9D5D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  std::__list_imp<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>>::clear(&a12);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::__erase_unique<std::vector<int> const*>(_QWORD *a1, uint64_t *a2)
{
  uint64_t *result;

  result = std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::find<std::vector<int> const*>(a1, a2);
  if (result)
  {
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::__emplace_unique_key_args<std::vector<int> const*,std::pair<std::vector<int> const* const,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>(uint64_t a1, uint64_t *a2, _OWORD *a3)
{
  unint64_t v3;
  int *v7;
  int *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD **v14;
  _QWORD *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = *(int **)*a2;
  v8 = *(int **)(*a2 + 8);
  if (v7 == v8)
  {
    v9 = 0;
  }
  else
  {
    v9 = 0;
    do
    {
      v10 = *v7++;
      v9 = v10 + 7853 * v9;
    }
    while (v7 != v8);
  }
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v14 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v14)
    {
      for (i = *v14; i; i = (_QWORD *)*i)
      {
        v16 = i[1];
        if (v16 == v9)
        {
          if (kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred::operator()(a1 + 44, i[2], *a2))
          {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v9;
  *((_OWORD *)i + 1) = *a3;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 40);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v9 >= v11)
        v3 = v9 % v11;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *i = *v24;
LABEL_43:
    *v24 = i;
    goto LABEL_44;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v25 = *(_QWORD *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11)
        v25 %= v11;
    }
    else
    {
      v25 &= v11 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_43;
  }
LABEL_44:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1AD9D5FEC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertWithValueFunction<kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertInPlace(std::vector<int> const&)::{lambda(kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE&)#1}>(unint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;

  v26 = (uint64_t *)&v26;
  v27 = (uint64_t *)&v26;
  v28 = 0;
  v4 = a1 + 1;
  *(_QWORD *)&v24 = a2;
  v5 = std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::find<std::vector<int> const*>(a1 + 1, (uint64_t *)&v24);
  if (v5)
  {
    v6 = (uint64_t *)v5[3];
    if (&v26 != (uint64_t **)v6)
    {
      v7 = (uint64_t *)v6[1];
      if (v7 != (uint64_t *)&v26)
      {
        v8 = *v6;
        *(_QWORD *)(v8 + 8) = v7;
        *(_QWORD *)v6[1] = v8;
        v9 = (uint64_t)v26;
        v26[1] = (uint64_t)v6;
        *v6 = v9;
        v6[1] = (uint64_t)&v26;
        --a1[9];
        v26 = v6;
        ++v28;
      }
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::erase(v4, v5);
  }
  else
  {
    v10 = a1[9];
    if (v10 >= *a1)
    {
      v14 = (uint64_t *)a1[7];
      if (&v26 != (uint64_t **)v14)
      {
        v15 = (uint64_t *)v14[1];
        if (v15 != (uint64_t *)&v26)
        {
          v16 = *v14;
          *(_QWORD *)(v16 + 8) = v15;
          *(_QWORD *)v14[1] = v16;
          v17 = (uint64_t)v26;
          v26[1] = (uint64_t)v14;
          *v14 = v17;
          v14[1] = (uint64_t)&v26;
          a1[9] = v10 - 1;
          v26 = v14;
          ++v28;
        }
      }
      *(_QWORD *)&v24 = v27 + 2;
      std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::__erase_unique<std::vector<int> const*>(v4, (uint64_t *)&v24);
      if (v27 + 2 != (uint64_t *)a2)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v27 + 16, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    }
    else
    {
      v24 = 0uLL;
      v25 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v24, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
      v11 = (uint64_t *)operator new(0x48uLL);
      v12 = v25;
      v13 = (uint64_t)v26;
      *((_OWORD *)v11 + 1) = v24;
      v11[4] = v12;
      *(_OWORD *)(v11 + 5) = 0u;
      *(_OWORD *)(v11 + 7) = 0u;
      *v11 = v13;
      v11[1] = (uint64_t)&v26;
      *(_QWORD *)(v13 + 8) = v11;
      v26 = v11;
      ++v28;
    }
  }
  v18 = v27;
  *(_QWORD *)&v24 = v27 + 2;
  *((_QWORD *)&v24 + 1) = v27;
  std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::__emplace_unique_key_args<std::vector<int> const*,std::pair<std::vector<int> const* const,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>((uint64_t)v4, (uint64_t *)&v24, &v24);
  v19 = (uint64_t *)a1[8];
  if (v19 != v18)
  {
    v20 = (uint64_t *)v18[1];
    if (v20 != v19)
    {
      v21 = *v18;
      *(_QWORD *)(v21 + 8) = v20;
      *(_QWORD *)v18[1] = v21;
      v22 = *v19;
      *(_QWORD *)(v22 + 8) = v18;
      *v18 = v22;
      *v19 = (uint64_t)v18;
      v18[1] = (uint64_t)v19;
      --v28;
      ++a1[9];
    }
  }
  std::__list_imp<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>>::clear((uint64_t *)&v26);
  return v18 + 5;
}

void sub_1AD9D6238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  std::__list_imp<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>>::clear(&a12);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineLmRescoringDecoder::registerParams(quasar::OnlineLmRescoringDecoder *this, quasar::SystemConfig *a2)
{
  _QWORD *v4;
  _DWORD *v5;
  char *v6;
  _DWORD *v7;
  char *v8;
  char *v9;
  char *v10;
  _BYTE *v11;
  _DWORD *v12;
  uint64_t result;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;

  std::string::basic_string[abi:ne180100]<0>(v16, "am-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scaling factor for acoustic likelihoods");
  v4 = (_QWORD *)((char *)this + 448);
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v16, (uint64_t)this + 448, (uint64_t)__p, 0, 2, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  std::string::basic_string[abi:ne180100]<0>(v16, "nbest-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "number of NBest from 1st pass used for interpolation weight estimation");
  v5 = (_DWORD *)((char *)this + 456);
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v16, (uint64_t)this + 456, (uint64_t)__p, 0, 2, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  std::string::basic_string[abi:ne180100]<0>(v16, "nnlm-nce-norm-factor-list");
  std::string::basic_string[abi:ne180100]<0>(__p, "the normalization factor for NCE trained NNLMs, use comma to separate multiple ones");
  v6 = (char *)this + 512;
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v16, (uint64_t)this + 512, (uint64_t)__p, 0, 26, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  std::string::basic_string[abi:ne180100]<0>(v16, "rnnlm-max-context-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "maximal context for RNN style LM, no-op for other style of LMs");
  v7 = (_DWORD *)((char *)this + 564);
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v16, (uint64_t)this + 564, (uint64_t)__p, 0, 2, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  std::string::basic_string[abi:ne180100]<0>(v16, "big-g-fst-file-list");
  std::string::basic_string[abi:ne180100]<0>(__p, "list of BigGrammar FST filename, use comma to separate multiple ones");
  v8 = (char *)this + 464;
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v16, (uint64_t)this + 464, (uint64_t)__p, 0, 2, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  std::string::basic_string[abi:ne180100]<0>(v16, "big-g-nnet-file-list");
  std::string::basic_string[abi:ne180100]<0>(__p, "list of BigGrammar NNLM filename, use comma to separate multiple ones");
  v9 = (char *)this + 488;
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v16, (uint64_t)this + 488, (uint64_t)__p, 0, 2, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  std::string::basic_string[abi:ne180100]<0>(v16, "nnet-map-file-ext");
  std::string::basic_string[abi:ne180100]<0>(__p, "the file extension name of the corresponding NNLM word map file");
  v10 = (char *)this + 536;
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v16, (uint64_t)this + 536, (uint64_t)__p, 0, 2, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  std::string::basic_string[abi:ne180100]<0>(v16, "enable-memory-map");
  std::string::basic_string[abi:ne180100]<0>(__p, "Map FST/NNLM models into memory (requires aligned models)");
  v11 = (char *)this + 560;
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v16, (uint64_t)this + 560, (uint64_t)__p, 0, 2, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  std::string::basic_string[abi:ne180100]<0>(v16, "lattice-beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "the lattice beam for the rescored lattice");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v16, (uint64_t)this + 452, (uint64_t)__p, 0, 113, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  std::string::basic_string[abi:ne180100]<0>(v16, "rnnlm-empty-hyp-cost");
  std::string::basic_string[abi:ne180100]<0>(__p, "overwrite the final cost for empty hypothesis in RNN style LM");
  v12 = (_DWORD *)((char *)this + 640);
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v16, (uint64_t)v12, (uint64_t)__p, 0, 2, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  *v4 = 1065353216;
  *v5 = 1;
  MEMORY[0x1AF44C914](v8, "");
  MEMORY[0x1AF44C914](v9, "");
  MEMORY[0x1AF44C914](v6, "");
  result = MEMORY[0x1AF44C914](v10, "wordmap");
  *v11 = 0;
  *v7 = 7;
  *v12 = -1082130432;
  return result;
}

void sub_1AD9D6780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void quasar::OnlineLmRescoringDecoder::finishInit(quasar::OnlineLmRescoringDecoder *this)
{
  uint64_t v2;
  uint64_t v3;
  int64x2_t *v4;
  uint64_t *MultiChainMultiAudioBuffer;
  _OWORD *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  __int128 v18;
  int64x2_t v19;
  _OWORD *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  unint64_t v30;
  int64x2_t *v31;
  uint64_t v32;
  uint64_t *v33;
  _OWORD *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  _QWORD *v43;
  _QWORD *v44;
  char *v45;
  __int128 v46;
  int64x2_t v47;
  _OWORD *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  void *__p[2];
  char v56;
  __int128 v57;
  _OWORD v58[2];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  void *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD v80[3];
  _QWORD *v81;
  _QWORD v82[3];
  _QWORD *v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v77 = 0;
  v78 = 0;
  v79 = 0;
  kaldi::SplitStringToVector((const std::string *)((char *)this + 464), ",", 1, (uint64_t)&v77);
  v2 = v77;
  v3 = v78;
  if (v77 != v78)
  {
    v4 = (int64x2_t *)((char *)this + 592);
    while (1)
    {
      std::string::basic_string[abi:ne180100]<0>(&v74, "");
      MultiChainMultiAudioBuffer = (uint64_t *)quasar::SpeechRequestData::getMultiChainMultiAudioBuffer(*((quasar::SpeechRequestData **)this + 51));
      v82[0] = &off_1E5D3E170;
      v82[1] = this;
      v83 = v82;
      quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::loadMasterLmOrCreatePlaceholder(v2, (uint64_t)&v74, MultiChainMultiAudioBuffer, (uint64_t)v82, __p);
      v6 = (_OWORD *)*((_QWORD *)this + 75);
      v7 = *((_QWORD *)this + 76);
      if ((unint64_t)v6 >= v7)
      {
        v8 = ((uint64_t)v6 - v4->i64[0]) >> 4;
        v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v10 = v7 - v4->i64[0];
        if (v10 >> 3 > v9)
          v9 = v10 >> 3;
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
          v11 = 0xFFFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        *(_QWORD *)&v59 = (char *)this + 608;
        v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)this + 608, v11);
        v14 = &v12[16 * v8];
        *(_OWORD *)v14 = *(_OWORD *)__p;
        __p[0] = 0;
        __p[1] = 0;
        v15 = (_QWORD *)*((_QWORD *)this + 75);
        v16 = (_QWORD *)*((_QWORD *)this + 74);
        if (v15 == v16)
        {
          v19 = vdupq_n_s64((unint64_t)v15);
          v17 = &v12[16 * v8];
        }
        else
        {
          v17 = &v12[16 * v8];
          do
          {
            v18 = *((_OWORD *)v15 - 1);
            v15 -= 2;
            *((_OWORD *)v17 - 1) = v18;
            v17 -= 16;
            *v15 = 0;
            v15[1] = 0;
          }
          while (v15 != v16);
          v19 = *v4;
        }
        v20 = v14 + 16;
        *((_QWORD *)this + 74) = v17;
        *((_QWORD *)this + 75) = v14 + 16;
        *(int64x2_t *)((char *)v58 + 8) = v19;
        v21 = *((_QWORD *)this + 76);
        *((_QWORD *)this + 76) = &v12[16 * v13];
        *((_QWORD *)&v58[1] + 1) = v21;
        *(_QWORD *)&v58[0] = v19.i64[0];
        std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)v58);
        v22 = (std::__shared_weak_count *)__p[1];
        *((_QWORD *)this + 75) = v20;
        if (v22)
        {
          p_shared_owners = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldaxr(p_shared_owners);
          while (__stlxr(v24 - 1, p_shared_owners));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
      }
      else
      {
        *v6 = *(_OWORD *)__p;
        __p[0] = 0;
        __p[1] = 0;
        *((_QWORD *)this + 75) = v6 + 1;
      }
      v25 = v83;
      if (v83 == v82)
        break;
      if (v83)
      {
        v26 = 5;
LABEL_25:
        (*(void (**)(void))(*v25 + 8 * v26))();
      }
      if (SHIBYTE(v76) < 0)
        operator delete(v74);
      v2 += 24;
      if (v2 == v3)
        goto LABEL_29;
    }
    v25 = v82;
    v26 = 4;
    goto LABEL_25;
  }
LABEL_29:
  v74 = 0;
  v75 = 0;
  v76 = 0;
  kaldi::SplitStringToVector((const std::string *)((char *)this + 488), ",", 1, (uint64_t)&v74);
  if (*((char *)this + 535) < 0)
    v27 = *((_QWORD *)this + 65);
  else
    v27 = *((unsigned __int8 *)this + 535);
  if (v27)
  {
    if ((kaldi::SplitStringToFloats<float>((uint64_t)this + 512, ",", 1, (_QWORD *)this + 71) & 1) == 0)
    {
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      v59 = 0u;
      memset(v58, 0, sizeof(v58));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v58);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Could not read the NNLM normalization factor info", 49);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v58);
    }
    v29 = v74;
    v28 = v75;
    if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)v75 - (_BYTE *)v74) >> 3) != (uint64_t)(*((_QWORD *)this + 72)
                                                                                - *((_QWORD *)this + 71)) >> 2)
    {
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      v59 = 0u;
      memset(v58, 0, sizeof(v58));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v58);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"the number of NNLM files and the number of NNLM norm factors do not match", 73);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v58);
    }
  }
  else
  {
    LODWORD(v58[0]) = 0;
    std::vector<float>::assign((char **)this + 71, 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)v75 - (_BYTE *)v74) >> 3), v58);
    v29 = v74;
    v28 = v75;
  }
  if (v28 != v29)
  {
    v30 = 0;
    v31 = (int64x2_t *)((char *)this + 616);
    while (1)
    {
      v32 = *(unsigned int *)(*((_QWORD *)this + 71) + 4 * v30);
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      v33 = (uint64_t *)quasar::SpeechRequestData::getMultiChainMultiAudioBuffer(*((quasar::SpeechRequestData **)this + 51));
      v80[0] = &off_1E5D3E1C8;
      v80[1] = this;
      v80[2] = v32;
      v81 = v80;
      quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::loadMasterLmOrCreatePlaceholder((uint64_t)v29 + 24 * v30, (uint64_t)__p, v33, (uint64_t)v80, &v57);
      v34 = (_OWORD *)*((_QWORD *)this + 78);
      v35 = *((_QWORD *)this + 79);
      if ((unint64_t)v34 >= v35)
      {
        v36 = ((uint64_t)v34 - v31->i64[0]) >> 4;
        v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v38 = v35 - v31->i64[0];
        if (v38 >> 3 > v37)
          v37 = v38 >> 3;
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0)
          v39 = 0xFFFFFFFFFFFFFFFLL;
        else
          v39 = v37;
        *(_QWORD *)&v59 = (char *)this + 632;
        v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)this + 632, v39);
        v42 = &v40[16 * v36];
        *(_OWORD *)v42 = v57;
        v57 = 0uLL;
        v43 = (_QWORD *)*((_QWORD *)this + 78);
        v44 = (_QWORD *)*((_QWORD *)this + 77);
        if (v43 == v44)
        {
          v47 = vdupq_n_s64((unint64_t)v43);
          v45 = &v40[16 * v36];
        }
        else
        {
          v45 = &v40[16 * v36];
          do
          {
            v46 = *((_OWORD *)v43 - 1);
            v43 -= 2;
            *((_OWORD *)v45 - 1) = v46;
            v45 -= 16;
            *v43 = 0;
            v43[1] = 0;
          }
          while (v43 != v44);
          v47 = *v31;
        }
        v48 = v42 + 16;
        *((_QWORD *)this + 77) = v45;
        *((_QWORD *)this + 78) = v42 + 16;
        *(int64x2_t *)((char *)v58 + 8) = v47;
        v49 = *((_QWORD *)this + 79);
        *((_QWORD *)this + 79) = &v40[16 * v41];
        *((_QWORD *)&v58[1] + 1) = v49;
        *(_QWORD *)&v58[0] = v47.i64[0];
        std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)v58);
        v50 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
        *((_QWORD *)this + 78) = v48;
        if (v50)
        {
          v51 = (unint64_t *)&v50->__shared_owners_;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
      }
      else
      {
        *v34 = v57;
        v57 = 0uLL;
        *((_QWORD *)this + 78) = v34 + 1;
      }
      v53 = v81;
      if (v81 == v80)
        break;
      if (v81)
      {
        v54 = 5;
LABEL_61:
        (*(void (**)(void))(*v53 + 8 * v54))();
      }
      if (v56 < 0)
        operator delete(__p[0]);
      ++v30;
      v29 = v74;
      if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)v75 - (_BYTE *)v74) >> 3) <= v30)
        goto LABEL_65;
    }
    v53 = v80;
    v54 = 4;
    goto LABEL_61;
  }
LABEL_65:
  *(_QWORD *)&v58[0] = &v74;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v58);
  *(_QWORD *)&v58[0] = &v77;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v58);
}

void sub_1AD9D6DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::loadMasterLmOrCreatePlaceholder(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  unsigned __int8 *v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  _QWORD *v25;
  _QWORD *v26;
  std::string::size_type v27;
  std::__shared_weak_count *v28;
  void *__p[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  if (quasar::isPlaceholder((unsigned __int8 *)a1))
  {
    if (std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*a3, a3[1], (unsigned __int8 **)a1) == a3[1])
    {
      v14 = *(unsigned __int8 *)(a2 + 23);
      if ((v14 & 0x80u) != 0)
        v14 = *(_QWORD *)(a2 + 8);
      if (v14)
      {
        v44 = 0uLL;
        v45 = 0uLL;
        v42 = 0uLL;
        v43 = 0uLL;
        v40 = 0uLL;
        v41 = 0uLL;
        v38 = 0uLL;
        v39 = 0uLL;
        v36 = 0uLL;
        v37 = 0uLL;
        v34 = 0uLL;
        v35 = 0uLL;
        v32 = 0uLL;
        v33 = 0uLL;
        v30 = 0uLL;
        v31 = 0uLL;
        *(_OWORD *)__p = 0uLL;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Placeholder ", 12);
        v20 = *(char *)(a1 + 23);
        if (v20 >= 0)
          v21 = (unsigned __int8 *)a1;
        else
          v21 = *(unsigned __int8 **)a1;
        if (v20 >= 0)
          v22 = *(unsigned __int8 *)(a1 + 23);
        else
          v22 = *(_QWORD *)(a1 + 8);
        v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v21, v22);
        v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" for template ", 14);
        v24 = *(char *)(a2 + 23);
        if (v24 >= 0)
          v17 = a2;
        else
          v17 = *(_QWORD *)a2;
        if (v24 >= 0)
          v18 = *(unsigned __int8 *)(a2 + 23);
        else
          v18 = *(_QWORD *)(a2 + 8);
      }
      else
      {
        v44 = 0uLL;
        v45 = 0uLL;
        v42 = 0uLL;
        v43 = 0uLL;
        v40 = 0uLL;
        v41 = 0uLL;
        v38 = 0uLL;
        v39 = 0uLL;
        v36 = 0uLL;
        v37 = 0uLL;
        v34 = 0uLL;
        v35 = 0uLL;
        v32 = 0uLL;
        v33 = 0uLL;
        v30 = 0uLL;
        v31 = 0uLL;
        *(_OWORD *)__p = 0uLL;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Placeholder ", 12);
        v16 = *(char *)(a1 + 23);
        if (v16 >= 0)
          v17 = a1;
        else
          v17 = *(_QWORD *)a1;
        if (v16 >= 0)
          v18 = *(unsigned __int8 *)(a1 + 23);
        else
          v18 = *(_QWORD *)(a1 + 8);
      }
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" not in geo-config ", 19);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v26, "region-dependent-variable-list");
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    LOBYTE(__p[0]) = 0;
    BYTE8(v30) = 0;
    v27 = 0;
    std::allocate_shared[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::string const&,std::optional<std::string>,decltype(nullptr),void>((__int128 *)a1, (__int128 *)__p, a5);
  }
  else
  {
    LOBYTE(__p[0]) = 0;
    BYTE8(v30) = 0;
    v10 = *(_QWORD *)(a4 + 24);
    if (!v10)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(std::string::size_type *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v10 + 48))(&v27, v10, a1);
    std::allocate_shared[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::string const&,std::optional<std::string>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,void>((__int128 *)a1, (__int128 *)__p, &v27, a5);
    v11 = v28;
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (BYTE8(v30))
  {
    if (SBYTE7(v30) < 0)
      operator delete(__p[0]);
  }
}

void sub_1AD9D7160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a17)
  {
    if (a16 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::loadMasterLmOrCreatePlaceholder(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  unsigned __int8 *v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  _QWORD *v25;
  _QWORD *v26;
  std::string::size_type v27;
  std::__shared_weak_count *v28;
  void *__p[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  if (quasar::isPlaceholder((unsigned __int8 *)a1))
  {
    if (std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*a3, a3[1], (unsigned __int8 **)a1) == a3[1])
    {
      v14 = *(unsigned __int8 *)(a2 + 23);
      if ((v14 & 0x80u) != 0)
        v14 = *(_QWORD *)(a2 + 8);
      if (v14)
      {
        v44 = 0uLL;
        v45 = 0uLL;
        v42 = 0uLL;
        v43 = 0uLL;
        v40 = 0uLL;
        v41 = 0uLL;
        v38 = 0uLL;
        v39 = 0uLL;
        v36 = 0uLL;
        v37 = 0uLL;
        v34 = 0uLL;
        v35 = 0uLL;
        v32 = 0uLL;
        v33 = 0uLL;
        v30 = 0uLL;
        v31 = 0uLL;
        *(_OWORD *)__p = 0uLL;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Placeholder ", 12);
        v20 = *(char *)(a1 + 23);
        if (v20 >= 0)
          v21 = (unsigned __int8 *)a1;
        else
          v21 = *(unsigned __int8 **)a1;
        if (v20 >= 0)
          v22 = *(unsigned __int8 *)(a1 + 23);
        else
          v22 = *(_QWORD *)(a1 + 8);
        v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v21, v22);
        v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" for template ", 14);
        v24 = *(char *)(a2 + 23);
        if (v24 >= 0)
          v17 = a2;
        else
          v17 = *(_QWORD *)a2;
        if (v24 >= 0)
          v18 = *(unsigned __int8 *)(a2 + 23);
        else
          v18 = *(_QWORD *)(a2 + 8);
      }
      else
      {
        v44 = 0uLL;
        v45 = 0uLL;
        v42 = 0uLL;
        v43 = 0uLL;
        v40 = 0uLL;
        v41 = 0uLL;
        v38 = 0uLL;
        v39 = 0uLL;
        v36 = 0uLL;
        v37 = 0uLL;
        v34 = 0uLL;
        v35 = 0uLL;
        v32 = 0uLL;
        v33 = 0uLL;
        v30 = 0uLL;
        v31 = 0uLL;
        *(_OWORD *)__p = 0uLL;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Placeholder ", 12);
        v16 = *(char *)(a1 + 23);
        if (v16 >= 0)
          v17 = a1;
        else
          v17 = *(_QWORD *)a1;
        if (v16 >= 0)
          v18 = *(unsigned __int8 *)(a1 + 23);
        else
          v18 = *(_QWORD *)(a1 + 8);
      }
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" not in geo-config ", 19);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v26, "region-dependent-variable-list");
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    LOBYTE(__p[0]) = 0;
    BYTE8(v30) = 0;
    v27 = 0;
    std::allocate_shared[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>,std::string const&,std::optional<std::string>,decltype(nullptr),void>((__int128 *)a1, (__int128 *)__p, a5);
  }
  else
  {
    LOBYTE(__p[0]) = 0;
    BYTE8(v30) = 0;
    v10 = *(_QWORD *)(a4 + 24);
    if (!v10)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(std::string::size_type *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v10 + 48))(&v27, v10, a1);
    std::allocate_shared[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>,std::string const&,std::optional<std::string>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>,void>((__int128 *)a1, (__int128 *)__p, &v27, a5);
    v11 = v28;
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (BYTE8(v30))
  {
    if (SBYTE7(v30) < 0)
      operator delete(__p[0]);
  }
}

void sub_1AD9D7418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a17)
  {
    if (a16 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineLmRescoringDecoder::exceedsMaxArcs()
{
  return 0;
}

uint64_t quasar::OnlineLmRescoringDecoder::runImpl(uint64_t a1, _QWORD *a2, quasar::DecoderChainOutput **a3, uint64_t *a4)
{
  _BOOL4 v8;
  uint64_t **v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  quasar::DecoderChainOutput *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  quasar::DecoderChainOutput *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _DWORD *v31;
  int v32;
  _QWORD *v33;
  _QWORD *v34;
  float *v35;
  float *v36;
  std::vector<std::string>::pointer end;
  __int128 v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  __int128 v44;
  std::string *v45;
  std::string *v46;
  std::string::size_type size;
  uint64_t v48;
  float v49;
  BOOL v50;
  quasar::DecoderChainOutput *v51;
  _QWORD *v52;
  _DWORD *v53;
  _QWORD *v54;
  int v55;
  uint64_t **v56;
  quasar::DecoderChainOutput *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  void *v67;
  int v68;
  std::string::size_type v69;
  int v70;
  int v71;
  uint64_t v73;
  uint64_t v74;
  _DWORD *v75;
  uint64_t v76;
  std::string v77;
  std::vector<std::string> v78;
  _QWORD v79[11];
  char v80;
  uint64_t v81;
  void *v82;
  float *v83;
  uint64_t v84;
  std::string v85;
  void *__p[2];
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  _BYTE v103[24];
  _BYTE *v104;
  _QWORD v105[3];
  _QWORD *v106;
  _QWORD v107[3];
  _QWORD *v108;
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  v8 = quasar::DecoderChainOutput::scaleResultLattice(*a3, 1.0, *(float *)(a1 + 448), 1);
  v9 = (uint64_t **)*((_QWORD *)*a3 + 132);
  if (v9)
    v10 = !v8;
  else
    v10 = 1;
  if (!v10)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "rescoreScaled");
    quasar::UttInfo::addResult(v9, (uint64_t)__p, a2, (uint64_t *)*a3, *(_DWORD *)(*a4 + 16));
    if (SBYTE7(v87) < 0)
      operator delete(__p[0]);
  }
  if (*(int *)(a1 + 52) >= 1)
  {
    v11 = *((_QWORD *)*a3 + 19);
    if (v11)
    {
      if ((int)fst::NumArcs<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(v11) > *(_DWORD *)(a1 + 52))
      {
        if (quasar::gLogLevel >= 4)
        {
          v101 = 0u;
          v102 = 0u;
          v99 = 0u;
          v100 = 0u;
          v97 = 0u;
          v98 = 0u;
          v95 = 0u;
          v96 = 0u;
          v93 = 0u;
          v94 = 0u;
          v91 = 0u;
          v92 = 0u;
          v89 = 0u;
          v90 = 0u;
          v87 = 0u;
          v88 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Skip rescoring: inputArcs=", 26);
          std::ostream::operator<<();
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
        }
        return 2 * *(unsigned __int8 *)(a1 + 56);
      }
    }
  }
  v13 = *(_DWORD *)(a1 + 48);
  if (v13)
    v14 = v13;
  else
    v14 = 0x20000;
  v15 = a2[57];
  if (v15)
  {
    if (*(char *)(v15 + 71) < 0)
      std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v15 + 48), *(_QWORD *)(v15 + 56));
    else
      v85 = *(std::string *)(v15 + 48);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v85, "");
  }
  v16 = *(uint64_t **)(a1 + 592);
  v76 = a1;
  v17 = *(uint64_t **)(a1 + 600);
  if (v16 != v17)
  {
    while (1)
    {
      v18 = *v16;
      v19 = *a3;
      v107[0] = &off_1E5D3E220;
      v108 = v107;
      quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::resolvePlaceholder(v18, (uint64_t **)v15, (uint64_t *)v19 + 53, (uint64_t)&v85, (uint64_t)v107, 0);
      v20 = v108;
      if (v108 == v107)
        break;
      if (v108)
      {
        v21 = 5;
LABEL_26:
        (*(void (**)(void))(*v20 + 8 * v21))();
      }
      v16 += 2;
      if (v16 == v17)
        goto LABEL_28;
    }
    v20 = v107;
    v21 = 4;
    goto LABEL_26;
  }
LABEL_28:
  v22 = a2[57];
  if (v22)
    v23 = (uint64_t **)(v22 + 24);
  else
    v23 = 0;
  v24 = *(uint64_t **)(v76 + 616);
  v25 = *(uint64_t **)(v76 + 624);
  if (v24 != v25)
  {
    while (1)
    {
      v26 = *v24;
      v27 = *a3;
      v105[0] = &off_1E5D3E278;
      v106 = v105;
      quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::resolvePlaceholder(v26, v23, (uint64_t *)v27 + 53, (uint64_t)&v85, (uint64_t)v105, 0);
      v28 = v106;
      if (v106 == v105)
        break;
      if (v106)
      {
        v29 = 5;
LABEL_36:
        (*(void (**)(void))(*v28 + 8 * v29))();
      }
      v24 += 2;
      if (v24 == v25)
        goto LABEL_38;
    }
    v28 = v105;
    v29 = 4;
    goto LABEL_36;
  }
LABEL_38:
  if (a2 + 59 != (_QWORD *)(v76 + 592))
    std::vector<std::shared_ptr<quasar::Decoder>>::__assign_with_size[abi:ne180100]<std::shared_ptr<quasar::Decoder>*,std::shared_ptr<quasar::Decoder>*>((uint64_t)(a2 + 59), *(uint64_t **)(v76 + 592), *(uint64_t **)(v76 + 600), (uint64_t)(*(_QWORD *)(v76 + 600) - *(_QWORD *)(v76 + 592)) >> 4);
  if (a2 + 62 != (_QWORD *)(v76 + 616))
    std::vector<std::shared_ptr<quasar::Decoder>>::__assign_with_size[abi:ne180100]<std::shared_ptr<quasar::Decoder>*,std::shared_ptr<quasar::Decoder>*>((uint64_t)(a2 + 62), *(uint64_t **)(v76 + 616), *(uint64_t **)(v76 + 624), (uint64_t)(*(_QWORD *)(v76 + 624) - *(_QWORD *)(v76 + 616)) >> 4);
  v83 = 0;
  v84 = 0;
  v82 = 0;
  v30 = (_QWORD *)*((_QWORD *)*a3 + 19);
  v31 = (_DWORD *)v30[1];
  ++v31[14];
  v75 = v31;
  quasar::OnlineLmRescoringDecoder::rescoreLatticeWithLanguageModels((uint64_t)a2, (uint64_t *)a3, *a4, *(_DWORD *)(v76 + 456), v30, (uint64_t)&v82, 1, 0, *(float *)(v76 + 640), v14, *(_DWORD *)(v76 + 52));
  if (*(int *)(v76 + 52) < 1)
    v32 = -1;
  else
    v32 = fst::NumArcs<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(*((_QWORD *)*a3 + 19));
  if (quasar::gLogLevel >= 4)
  {
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Rescoring ok=", 13);
    v33 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" inputArcs=", 11);
    v34 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" outputArcs=", 12);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v79);
  v73 = (uint64_t)a2;
  v74 = (uint64_t)a4;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"The rescoring LM interpolation weights:", 39);
  memset(&v78, 0, sizeof(v78));
  v36 = (float *)v82;
  v35 = v83;
  if (v82 != v83)
  {
    do
    {
      std::to_string(&v77, *v36);
      end = v78.__end_;
      if (v78.__end_ >= v78.__end_cap_.__value_)
      {
        v39 = 0xAAAAAAAAAAAAAAABLL * (((char *)v78.__end_ - (char *)v78.__begin_) >> 3);
        v40 = v39 + 1;
        if (v39 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v78.__end_cap_.__value_ - (char *)v78.__begin_) >> 3) > v40)
          v40 = 0x5555555555555556 * (((char *)v78.__end_cap_.__value_ - (char *)v78.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v78.__end_cap_.__value_ - (char *)v78.__begin_) >> 3) >= 0x555555555555555)
          v41 = 0xAAAAAAAAAAAAAAALL;
        else
          v41 = v40;
        *(_QWORD *)&v88 = &v78.__end_cap_;
        if (v41)
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v78.__end_cap_, v41);
        else
          v42 = 0;
        v43 = &v42[24 * v39];
        __p[0] = v42;
        __p[1] = v43;
        *((_QWORD *)&v87 + 1) = &v42[24 * v41];
        v44 = *(_OWORD *)&v77.__r_.__value_.__l.__data_;
        *((_QWORD *)v43 + 2) = *((_QWORD *)&v77.__r_.__value_.__l + 2);
        *(_OWORD *)v43 = v44;
        memset(&v77, 0, sizeof(v77));
        *(_QWORD *)&v87 = v43 + 24;
        std::vector<std::string>::__swap_out_circular_buffer(&v78, (std::__split_buffer<std::string> *)__p);
        v45 = v78.__end_;
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__p);
        v78.__end_ = v45;
        if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v77.__r_.__value_.__l.__data_);
      }
      else
      {
        v38 = *(_OWORD *)&v77.__r_.__value_.__l.__data_;
        v78.__end_->__r_.__value_.__r.__words[2] = v77.__r_.__value_.__r.__words[2];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v38;
        v78.__end_ = end + 1;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)" ", 1);
      std::ostream::operator<<();
      ++v36;
    }
    while (v36 != v35);
  }
  if (quasar::gLogLevel > 3)
  {
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::stringbuf::str();
    if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v46 = &v77;
    else
      v46 = (std::string *)v77.__r_.__value_.__r.__words[0];
    if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v77.__r_.__value_.__r.__words[2]);
    else
      size = v77.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v46, size);
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v77.__r_.__value_.__l.__data_);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  v77.__r_.__value_.__r.__words[0] = (std::string::size_type)",";
  v77.__r_.__value_.__l.__size_ = 1;
  quasar::join<std::vector<std::string>>((uint64_t *)&v78, (uint64_t *)&v77);
  v48 = (uint64_t)*a3 + 1032;
  if (*((char *)*a3 + 1055) < 0)
    operator delete(*(void **)v48);
  *(_OWORD *)v48 = *(_OWORD *)__p;
  *(_QWORD *)(v48 + 16) = v87;
  v49 = *(float *)(v76 + 452);
  if (v49 > 0.0)
    kaldi::PruneLattice<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>(*((_QWORD **)*a3 + 19), v49);
  fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(&v77);
  kaldi::CompactLatticeShortestPath(*((_QWORD **)*a3 + 19), (uint64_t)&v77, 0, (uint64_t *)*a3 + 56);
  if (quasar::gLogLevel >= 4)
  {
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"BEST COST ", 10);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  if (*(_DWORD *)(v77.__r_.__value_.__l.__size_ + 88) == -1)
  {
    if (v32)
      v50 = *(_DWORD *)(v76 + 52) < 1;
    else
      v50 = 1;
    if (v50 && quasar::gLogLevel >= 4)
    {
      v101 = 0u;
      v102 = 0u;
      v99 = 0u;
      v100 = 0u;
      v97 = 0u;
      v98 = 0u;
      v95 = 0u;
      v96 = 0u;
      v93 = 0u;
      v94 = 0u;
      v91 = 0u;
      v92 = 0u;
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Best-path failed", 16);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    v51 = *a3;
    v52 = (_QWORD *)*((_QWORD *)*a3 + 19);
    ++v75[14];
    v53 = (_DWORD *)v52[1];
    if (v53)
    {
      v54 = v52;
      v55 = v53[14] - 1;
      v53[14] = v55;
      if (!v55)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v53 + 8))(v53);
        v51 = *a3;
        v54 = (_QWORD *)*((_QWORD *)*a3 + 19);
      }
    }
    else
    {
      v54 = v52;
    }
    v52[1] = v75;
    kaldi::CompactLatticeShortestPath(v54, (uint64_t)&v77, 0, (uint64_t *)v51 + 56);
  }
  v56 = (uint64_t **)*((_QWORD *)*a3 + 132);
  if (v56)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "rescored");
    quasar::UttInfo::addResult(v56, (uint64_t)__p, (_QWORD *)v73, (uint64_t *)*a3, *(_DWORD *)(*(_QWORD *)v74 + 16));
    if (SBYTE7(v87) < 0)
      operator delete(__p[0]);
  }
  if (*(_BYTE *)(v73 + 665))
  {
    v57 = *a3;
    v58 = *((_QWORD *)*a3 + 19);
    v59 = operator new(0x28uLL);
    v59[1] = 0;
    v59[2] = 0;
    *v59 = &unk_1E5D413E0;
    v60 = *(_QWORD *)(v58 + 8);
    v59[4] = v60;
    ++*(_DWORD *)(v60 + 56);
    v59[3] = &unk_1E5D28AB0;
    __p[0] = v59 + 3;
    __p[1] = v59;
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)v57 + 168, (__int128 *)__p);
    v61 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v62 = (unint64_t *)((char *)__p[1] + 8);
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    v64 = *((_QWORD *)*a3 + 21);
    v104 = 0;
    fst::CreateSuperFinal<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(v64, (uint64_t)v103);
    v65 = v104;
    if (v104 == v103)
    {
      v66 = 4;
      v65 = v103;
    }
    else
    {
      if (!v104)
      {
LABEL_105:
        kaldi::TopSortCompactLatticeIfNeeded(*((_QWORD *)*a3 + 21));
        *((_BYTE *)*a3 + 864) = 1;
        goto LABEL_106;
      }
      v66 = 5;
    }
    (*(void (**)(void))(*v65 + 8 * v66))();
    goto LABEL_105;
  }
LABEL_106:
  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(__p);
  fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>((uint64_t)&v77, (uint64_t)__p, 1);
  v12 = quasar::Decoder::reportResults((uint64_t)__p, (uint64_t *)a3, v74, v73);
  __p[0] = &unk_1E5D25580;
  v67 = __p[1];
  if (__p[1])
  {
    v68 = *((_DWORD *)__p[1] + 14) - 1;
    *((_DWORD *)__p[1] + 14) = v68;
    if (!v68)
      (*(void (**)(void *))(*(_QWORD *)v67 + 8))(v67);
  }
  v77.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D25800;
  v69 = v77.__r_.__value_.__l.__size_;
  if (v77.__r_.__value_.__l.__size_)
  {
    v70 = *(_DWORD *)(v77.__r_.__value_.__l.__size_ + 56) - 1;
    *(_DWORD *)(v77.__r_.__value_.__l.__size_ + 56) = v70;
    if (!v70)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v69 + 8))(v69);
  }
  __p[0] = &v78;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v79[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v79 + *(_QWORD *)(v79[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v79[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v80 < 0)
    operator delete((void *)v79[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF44D094](&v81);
  if (v75)
  {
    v71 = v75[14] - 1;
    v75[14] = v71;
    if (!v71)
      (*(void (**)(_DWORD *))(*(_QWORD *)v75 + 8))(v75);
  }
  if (v82)
  {
    v83 = (float *)v82;
    operator delete(v82);
  }
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
  return v12;
}

void sub_1AD9D7F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, _DWORD *a16, uint64_t a17, uint64_t *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,std::__split_buffer<std::wstring> *a59,void *__pa,void *a61,uint64_t a62,void *a63)
{
  char a68;
  uint64_t a70;
  uint64_t v71;
  int v72;
  int v73;

  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a70);
  a18 = (uint64_t *)&unk_1E5D25800;
  v71 = a19;
  if (a19)
  {
    v72 = *(_DWORD *)(a19 + 56) - 1;
    *(_DWORD *)(a19 + 56) = v72;
    if (!v72)
      (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
  }
  a18 = &a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  std::ostringstream::~ostringstream((uint64_t)&a24);
  if (a16)
  {
    v73 = a16[14] - 1;
    a16[14] = v73;
    if (!v73)
      (*(void (**)(_DWORD *))(*(_QWORD *)a16 + 8))(a16);
  }
  if (__pa)
  {
    a61 = __pa;
    operator delete(__pa);
  }
  if (a68 < 0)
    operator delete(a63);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineLmRescoringDecoder::rescoreLatticeWithLanguageModels(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, _QWORD *a5, uint64_t a6, char a7, int a8, float a9, unint64_t a10, int a11)
{
  _QWORD *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t *i;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  int64x2_t *v32;
  _QWORD *v33;
  _QWORD *v34;
  char *v35;
  __int128 v36;
  int64x2_t v37;
  int64x2_t *v38;
  void **v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t *j;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  int64x2_t *v53;
  _QWORD *v54;
  _QWORD *v55;
  char *v56;
  __int128 v57;
  int64x2_t v58;
  int64x2_t *v59;
  void **v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t *k;
  uint64_t v66;
  char *v67;
  int64_t v68;
  unint64_t v69;
  int64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  _QWORD *v75;
  _QWORD *v76;
  char *v77;
  __int128 v78;
  int64x2_t v79;
  void *v80;
  void **v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t *v85;
  uint64_t *m;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  _QWORD *v96;
  _QWORD *v97;
  char *v98;
  __int128 v99;
  int64x2_t v100;
  _OWORD *v101;
  void **v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *p_shared_owners;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  int v117;
  char v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  void *v124[2];
  char v125;
  __int128 v126;
  int64x2_t v127;
  _QWORD v128[2];
  void *__p[2];
  _QWORD v130[2];
  int64x2_t v131;
  _QWORD v132[2];
  int64x2_t v133;
  void **v134;
  int v135;
  void **v136[4];
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  unsigned int *v152[5];

  quasar::DecoderPassData::getLeftContextLabels(a1, *(_QWORD *)(*a2 + 472), (_QWORD *)(a1 + 696), *(_QWORD *)(a1 + 216) + 32, (char **)v152);
  if (quasar::gLogLevel >= 4)
  {
    v150 = 0u;
    v151 = 0u;
    v148 = 0u;
    v149 = 0u;
    v146 = 0u;
    v147 = 0u;
    v144 = 0u;
    v145 = 0u;
    v142 = 0u;
    v143 = 0u;
    v140 = 0u;
    v141 = 0u;
    v138 = 0u;
    v139 = 0u;
    v137 = 0u;
    memset(v136, 0, sizeof(v136));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v136);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136, (uint64_t)"Rescoring with ", 15);
    v20 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" symbol(s) for left context from ", 33);
    v21 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" word(s)", 8);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v136);
  }
  v120 = a5;
  v117 = a8;
  v118 = a7;
  v119 = a6;
  v121 = a2;
  v135 = 1065353216;
  v133 = 0uLL;
  v134 = 0;
  v131 = 0uLL;
  v132[0] = 0;
  v22 = *(uint64_t **)(a1 + 248);
  for (i = *(uint64_t **)(a1 + 256); v22 != i; v22 += 2)
  {
    v24 = *v22;
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getCachedModel(v24, (uint64_t)__p, &v127);
    v25 = v133.i64[1];
    if (v133.i64[1] >= (unint64_t)v134)
    {
      v26 = (v133.i64[1] - v133.i64[0]) >> 4;
      v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 60)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v28 = (uint64_t)v134 - v133.i64[0];
      if (((uint64_t)v134 - v133.i64[0]) >> 3 > v27)
        v27 = v28 >> 3;
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0)
        v29 = 0xFFFFFFFFFFFFFFFLL;
      else
        v29 = v27;
      *(_QWORD *)&v137 = &v134;
      v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v134, v29);
      v32 = (int64x2_t *)&v30[16 * v26];
      *v32 = v127;
      v127 = 0uLL;
      v33 = (_QWORD *)v133.i64[1];
      v34 = (_QWORD *)v133.i64[0];
      if (v133.i64[1] == v133.i64[0])
      {
        v37 = vdupq_n_s64(v133.u64[1]);
        v35 = &v30[16 * v26];
      }
      else
      {
        v35 = &v30[16 * v26];
        do
        {
          v36 = *((_OWORD *)v33 - 1);
          v33 -= 2;
          *((_OWORD *)v35 - 1) = v36;
          v35 -= 16;
          *v33 = 0;
          v33[1] = 0;
        }
        while (v33 != v34);
        v37 = v133;
      }
      v38 = v32 + 1;
      v133.i64[0] = (uint64_t)v35;
      v133.i64[1] = (uint64_t)v32[1].i64;
      *(int64x2_t *)&v136[1] = v37;
      v39 = v134;
      v134 = (void **)&v30[16 * v31];
      v136[3] = v39;
      v136[0] = (void **)v37.i64[0];
      std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)v136);
      v40 = (std::__shared_weak_count *)v127.i64[1];
      v133.i64[1] = (uint64_t)v38;
      if (v127.i64[1])
      {
        v41 = (unint64_t *)(v127.i64[1] + 8);
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
    }
    else
    {
      *(int64x2_t *)v133.i64[1] = v127;
      v127 = 0uLL;
      v133.i64[1] = v25 + 16;
    }
    if (SHIBYTE(v130[0]) < 0)
      operator delete(__p[0]);
  }
  v43 = *(uint64_t **)(a1 + 472);
  for (j = *(uint64_t **)(a1 + 480); v43 != j; v43 += 2)
  {
    v45 = *v43;
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getCachedModel(v45, (uint64_t)__p, &v127);
    v46 = v131.i64[1];
    if (v131.i64[1] >= v132[0])
    {
      v47 = (v131.i64[1] - v131.i64[0]) >> 4;
      v48 = v47 + 1;
      if ((unint64_t)(v47 + 1) >> 60)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v49 = v132[0] - v131.i64[0];
      if ((v132[0] - v131.i64[0]) >> 3 > v48)
        v48 = v49 >> 3;
      if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0)
        v50 = 0xFFFFFFFFFFFFFFFLL;
      else
        v50 = v48;
      *(_QWORD *)&v137 = v132;
      v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)v132, v50);
      v53 = (int64x2_t *)&v51[16 * v47];
      *v53 = v127;
      v127 = 0uLL;
      v54 = (_QWORD *)v131.i64[1];
      v55 = (_QWORD *)v131.i64[0];
      if (v131.i64[1] == v131.i64[0])
      {
        v58 = vdupq_n_s64(v131.u64[1]);
        v56 = &v51[16 * v47];
      }
      else
      {
        v56 = &v51[16 * v47];
        do
        {
          v57 = *((_OWORD *)v54 - 1);
          v54 -= 2;
          *((_OWORD *)v56 - 1) = v57;
          v56 -= 16;
          *v54 = 0;
          v54[1] = 0;
        }
        while (v54 != v55);
        v58 = v131;
      }
      v59 = v53 + 1;
      v131.i64[0] = (uint64_t)v56;
      v131.i64[1] = (uint64_t)v53[1].i64;
      *(int64x2_t *)&v136[1] = v58;
      v60 = (void **)v132[0];
      v132[0] = &v51[16 * v52];
      v136[3] = v60;
      v136[0] = (void **)v58.i64[0];
      std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)v136);
      v61 = (std::__shared_weak_count *)v127.i64[1];
      v131.i64[1] = (uint64_t)v59;
      if (v127.i64[1])
      {
        v62 = (unint64_t *)(v127.i64[1] + 8);
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
    }
    else
    {
      *(int64x2_t *)v131.i64[1] = v127;
      v127 = 0uLL;
      v131.i64[1] = v46 + 16;
    }
    if (SHIBYTE(v130[0]) < 0)
      operator delete(__p[0]);
  }
  __p[0] = 0;
  __p[1] = 0;
  v130[0] = 0;
  v127 = 0uLL;
  v128[0] = 0;
  v64 = *(uint64_t **)(a1 + 272);
  for (k = *(uint64_t **)(a1 + 280); v64 != k; v64 += 2)
  {
    v66 = *v64;
    std::string::basic_string[abi:ne180100]<0>(v124, "");
    quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::getCachedModel(v66, (uint64_t)v124, &v126);
    v67 = (char *)__p[1];
    if (__p[1] >= (void *)v130[0])
    {
      v68 = ((char *)__p[1] - (char *)__p[0]) >> 4;
      v69 = v68 + 1;
      if ((unint64_t)(v68 + 1) >> 60)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v70 = v130[0] - (unint64_t)__p[0];
      if ((uint64_t)(v130[0] - (unint64_t)__p[0]) >> 3 > v69)
        v69 = v70 >> 3;
      if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF0)
        v71 = 0xFFFFFFFFFFFFFFFLL;
      else
        v71 = v69;
      *(_QWORD *)&v137 = v130;
      v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)v130, v71);
      v74 = &v72[16 * v68];
      *(_OWORD *)v74 = v126;
      v126 = 0uLL;
      v76 = __p[0];
      v75 = __p[1];
      if (__p[1] == __p[0])
      {
        v79 = vdupq_n_s64((unint64_t)__p[1]);
        v77 = &v72[16 * v68];
      }
      else
      {
        v77 = &v72[16 * v68];
        do
        {
          v78 = *((_OWORD *)v75 - 1);
          v75 -= 2;
          *((_OWORD *)v77 - 1) = v78;
          v77 -= 16;
          *v75 = 0;
          v75[1] = 0;
        }
        while (v75 != v76);
        v79 = *(int64x2_t *)__p;
      }
      v80 = v74 + 16;
      __p[0] = v77;
      __p[1] = v74 + 16;
      *(int64x2_t *)&v136[1] = v79;
      v81 = (void **)v130[0];
      v130[0] = &v72[16 * v73];
      v136[3] = v81;
      v136[0] = (void **)v79.i64[0];
      std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)v136);
      v82 = (std::__shared_weak_count *)*((_QWORD *)&v126 + 1);
      __p[1] = v80;
      if (*((_QWORD *)&v126 + 1))
      {
        v83 = (unint64_t *)(*((_QWORD *)&v126 + 1) + 8);
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
    }
    else
    {
      *(_OWORD *)__p[1] = v126;
      v126 = 0uLL;
      __p[1] = v67 + 16;
    }
    if (v125 < 0)
      operator delete(v124[0]);
  }
  v85 = *(uint64_t **)(a1 + 496);
  for (m = *(uint64_t **)(a1 + 504); v85 != m; v85 += 2)
  {
    v87 = *v85;
    std::string::basic_string[abi:ne180100]<0>(v124, "");
    quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::getCachedModel(v87, (uint64_t)v124, &v126);
    v88 = v127.i64[1];
    if (v127.i64[1] >= v128[0])
    {
      v89 = (v127.i64[1] - v127.i64[0]) >> 4;
      v90 = v89 + 1;
      if ((unint64_t)(v89 + 1) >> 60)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v91 = v128[0] - v127.i64[0];
      if ((v128[0] - v127.i64[0]) >> 3 > v90)
        v90 = v91 >> 3;
      if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF0)
        v92 = 0xFFFFFFFFFFFFFFFLL;
      else
        v92 = v90;
      *(_QWORD *)&v137 = v128;
      v93 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)v128, v92);
      v95 = &v93[16 * v89];
      *(_OWORD *)v95 = v126;
      v126 = 0uLL;
      v96 = (_QWORD *)v127.i64[1];
      v97 = (_QWORD *)v127.i64[0];
      if (v127.i64[1] == v127.i64[0])
      {
        v100 = vdupq_n_s64(v127.u64[1]);
        v98 = &v93[16 * v89];
      }
      else
      {
        v98 = &v93[16 * v89];
        do
        {
          v99 = *((_OWORD *)v96 - 1);
          v96 -= 2;
          *((_OWORD *)v98 - 1) = v99;
          v98 -= 16;
          *v96 = 0;
          v96[1] = 0;
        }
        while (v96 != v97);
        v100 = v127;
      }
      v101 = v95 + 16;
      v127.i64[0] = (uint64_t)v98;
      v127.i64[1] = (uint64_t)(v95 + 16);
      *(int64x2_t *)&v136[1] = v100;
      v102 = (void **)v128[0];
      v128[0] = &v93[16 * v94];
      v136[3] = v102;
      v136[0] = (void **)v100.i64[0];
      std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)v136);
      v103 = (std::__shared_weak_count *)*((_QWORD *)&v126 + 1);
      v127.i64[1] = (uint64_t)v101;
      if (*((_QWORD *)&v126 + 1))
      {
        v104 = (unint64_t *)(*((_QWORD *)&v126 + 1) + 8);
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
    }
    else
    {
      *(_OWORD *)v127.i64[1] = v126;
      v126 = 0uLL;
      v127.i64[1] = v88 + 16;
    }
    if (v125 < 0)
      operator delete(v124[0]);
  }
  v106 = *(_QWORD *)(a3 + 24);
  v107 = *(_QWORD *)(a1 + 392);
  if (v107)
  {
    std::string::basic_string[abi:ne180100]<0>(v124, "");
    v108 = v121;
    quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::getCachedModel(v107, (uint64_t)v124, &v122);
  }
  else
  {
    v122 = 0;
    v123 = 0;
    v108 = v121;
  }
  v109 = kaldi::quasar::RescoreLatticeWithLanguageModels(v120, v133.i64, v131.i64, (uint64_t *)__p, v127.i64, (uint64_t **)(v106 + 272), (uint64_t *)(a1 + 320), (_QWORD *)(a1 + 408), a9, (__int32 **)(a1 + 344), &v122, *(_DWORD *)(a1 + 448), a1 + 296, v119, (float *)&v135, 0, 0, v152, a4,
           v118,
           v117,
           0x40000000u,
           a10,
           a11,
           (_QWORD *)(*v108 + 640));
  v110 = v123;
  if (v107)
  {
    if (v123)
    {
      p_shared_owners = (unint64_t *)&v123->__shared_owners_;
      do
        v112 = __ldaxr(p_shared_owners);
      while (__stlxr(v112 - 1, p_shared_owners));
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
      }
    }
    if (v125 < 0)
      operator delete(v124[0]);
  }
  else if (v123)
  {
    v113 = (unint64_t *)&v123->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  if (quasar::gLogLevel >= 4)
  {
    v150 = 0u;
    v151 = 0u;
    v148 = 0u;
    v149 = 0u;
    v146 = 0u;
    v147 = 0u;
    v144 = 0u;
    v145 = 0u;
    v142 = 0u;
    v143 = 0u;
    v140 = 0u;
    v141 = 0u;
    v138 = 0u;
    v139 = 0u;
    v137 = 0u;
    memset(v136, 0, sizeof(v136));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v136);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136, (uint64_t)"Total LM cost after rescoring = ", 32);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v136);
  }
  v115 = *v108;
  *(_DWORD *)(v115 + 632) = v135;
  *(_BYTE *)(v115 + 628) = 1;
  v136[0] = (void **)&v127;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](v136);
  v136[0] = __p;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](v136);
  v136[0] = (void **)&v131;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](v136);
  v136[0] = (void **)&v133;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](v136);
  if (v152[0])
  {
    v152[1] = v152[0];
    operator delete(v152[0]);
  }
  return v109;
}

void sub_1AD9D8AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void ***a36,uint64_t a37,void **a38,uint64_t a39,uint64_t a40,uint64_t a41,char **a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,char *a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  uint64_t v57;
  void *v59;

  a36 = &a38;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);
  a38 = (void **)&a42;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a38);
  a42 = &a49;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a42);
  a49 = &a53;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a49);
  v59 = *(void **)(v57 - 136);
  if (v59)
  {
    *(_QWORD *)(v57 - 128) = v59;
    operator delete(v59);
  }
  _Unwind_Resume(a1);
}

void quasar::OnlineLmRescoringDecoder::clearCaches(quasar::OnlineLmRescoringDecoder *this)
{
  uint64_t *v1;
  uint64_t *i;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *__p[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v1 = (uint64_t *)*((_QWORD *)this + 77);
  for (i = (uint64_t *)*((_QWORD *)this + 78); v1 != i; v1 += 2)
  {
    v3 = *v1;
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::getCachedModel(v3, (uint64_t)__p, &v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
    v4 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    if (v8 < 0)
      operator delete(__p[0]);
  }
}

void sub_1AD9D8CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineLmRescoringDecoder::supportsEager(quasar::OnlineLmRescoringDecoder *this)
{
  return 1;
}

void quasar::OnlineLmRescoringDecoder::~OnlineLmRescoringDecoder(quasar::OnlineLmRescoringDecoder *this)
{
  quasar::OnlineLmRescoringDecoder::~OnlineLmRescoringDecoder(this);
  JUMPOUT(0x1AF44D190);
}

{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_1E5D39640;
  v3 = (void **)((char *)this + 616);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 592);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (void *)*((_QWORD *)this + 71);
  if (v2)
  {
    *((_QWORD *)this + 72) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 559) < 0)
    operator delete(*((void **)this + 67));
  if (*((char *)this + 535) < 0)
    operator delete(*((void **)this + 64));
  if (*((char *)this + 511) < 0)
    operator delete(*((void **)this + 61));
  if (*((char *)this + 487) < 0)
    operator delete(*((void **)this + 58));
  quasar::Decoder::~Decoder((void **)this);
}

std::string *std::allocate_shared[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::string const&,std::optional<std::string>,decltype(nullptr),void>@<X0>(__int128 *a1@<X1>, __int128 *a2@<X2>, _QWORD *a3@<X8>)
{
  std::string *v6;
  std::string *result;

  v6 = (std::string *)operator new(0x60uLL);
  result = std::__shared_ptr_emplace<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::optional<std::string>,decltype(nullptr),std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,0>(v6, a1, a2);
  *a3 = v6 + 1;
  a3[1] = v6;
  return result;
}

void sub_1AD9D8E44(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::optional<std::string>,decltype(nullptr),std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,0>(std::string *a1, __int128 *a2, __int128 *a3)
{
  char v5;

  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D42AD8;
  a1->__r_.__value_.__l.__size_ = 0;
  std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::construct[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::string const&,std::optional<std::string>,decltype(nullptr)>((int)&v5, a1 + 1, a2, a3);
  return a1;
}

void sub_1AD9D8EAC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::construct[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::string const&,std::optional<std::string>,decltype(nullptr)>(int a1, std::string *this, __int128 *a3, __int128 *a4)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::string::size_type v7;
  std::__shared_weak_count *v8;

  v7 = 0;
  v8 = 0;
  quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::RegionalLmPlug(this, a3, a4, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1AD9D8F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *std::allocate_shared[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::string const&,std::optional<std::string>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,void>@<X0>(__int128 *a1@<X1>, __int128 *a2@<X2>, std::string::size_type *a3@<X3>, _QWORD *a4@<X8>)
{
  std::string *v8;
  std::string *result;

  v8 = (std::string *)operator new(0x60uLL);
  result = std::__shared_ptr_emplace<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::optional<std::string>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,0>(v8, a1, a2, a3);
  *a4 = v8 + 1;
  a4[1] = v8;
  return result;
}

void sub_1AD9D8FA4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::optional<std::string>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,0>(std::string *a1, __int128 *a2, __int128 *a3, std::string::size_type *a4)
{
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D42AD8;
  a1->__r_.__value_.__l.__size_ = 0;
  quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::RegionalLmPlug(a1 + 1, a2, a3, a4);
  return a1;
}

void sub_1AD9D8FF0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5D3E170;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5D3E170;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 368) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 368));
}

uint64_t std::__function::__func<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::target_type()
{
}

std::string *std::allocate_shared[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>,std::string const&,std::optional<std::string>,decltype(nullptr),void>@<X0>(__int128 *a1@<X1>, __int128 *a2@<X2>, _QWORD *a3@<X8>)
{
  std::string *v6;
  std::string *result;

  v6 = (std::string *)operator new(0x60uLL);
  result = std::__shared_ptr_emplace<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::optional<std::string>,decltype(nullptr),std::allocator<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>,0>(v6, a1, a2);
  *a3 = v6 + 1;
  a3[1] = v6;
  return result;
}

void sub_1AD9D9124(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::optional<std::string>,decltype(nullptr),std::allocator<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>,0>(std::string *a1, __int128 *a2, __int128 *a3)
{
  char v5;

  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D42B10;
  a1->__r_.__value_.__l.__size_ = 0;
  std::allocator<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>::construct[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>,std::string const&,std::optional<std::string>,decltype(nullptr)>((int)&v5, a1 + 1, a2, a3);
  return a1;
}

void sub_1AD9D918C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>::construct[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>,std::string const&,std::optional<std::string>,decltype(nullptr)>(int a1, std::string *this, __int128 *a3, __int128 *a4)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::string::size_type v7;
  std::__shared_weak_count *v8;

  v7 = 0;
  v8 = 0;
  quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::RegionalLmPlug(this, a3, a4, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1AD9D9214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *std::allocate_shared[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>,std::string const&,std::optional<std::string>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>,void>@<X0>(__int128 *a1@<X1>, __int128 *a2@<X2>, std::string::size_type *a3@<X3>, _QWORD *a4@<X8>)
{
  std::string *v8;
  std::string *result;

  v8 = (std::string *)operator new(0x60uLL);
  result = std::__shared_ptr_emplace<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::optional<std::string>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>,0>(v8, a1, a2, a3);
  *a4 = v8 + 1;
  a4[1] = v8;
  return result;
}

void sub_1AD9D9284(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::optional<std::string>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>,0>(std::string *a1, __int128 *a2, __int128 *a3, std::string::size_type *a4)
{
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D42B10;
  a1->__r_.__value_.__l.__size_ = 0;
  quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::RegionalLmPlug(a1 + 1, a2, a3, a4);
  return a1;
}

void sub_1AD9D92D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E5D3E1C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E5D3E1C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  quasar::ModelLoader::readNeuralNetworkLm(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 368), a2, *(_QWORD *)(a1 + 8) + 536, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 560), *(_DWORD *)(*(_QWORD *)(a1 + 8) + 564), a3, *(float *)(a1 + 16));
}

uint64_t std::__function::__func<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineLmRescoringDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::target_type()
{
}

void std::__function::__func<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0,std::allocator<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0,std::allocator<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E5D3E220;
  return result;
}

void std::__function::__func<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0,std::allocator<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E5D3E220;
}

void std::__function::__func<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0,std::allocator<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::operator()(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

uint64_t std::__function::__func<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0,std::allocator<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0,std::allocator<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::target_type()
{
}

void std::__function::__func<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1,std::allocator<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1,std::allocator<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E5D3E278;
  return result;
}

void std::__function::__func<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1,std::allocator<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E5D3E278;
}

void std::__function::__func<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1,std::allocator<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::operator()(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

uint64_t std::__function::__func<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1,std::allocator<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1,std::allocator<quasar::OnlineLmRescoringDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::target_type()
{
}

_QWORD *kaldi::CharToString@<X0>(kaldi *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int v4;
  int v5;
  char __str[20];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = *(char *)this;
  if ((v4 & 0x80000000) != 0)
    v5 = __maskrune(v4, 0x40000uLL);
  else
    v5 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v4 + 60) & 0x40000;
  if (v5)
    snprintf(__str, 0x14uLL, "'%c'");
  else
    snprintf(__str, 0x14uLL, "[character %d]");
  return std::string::basic_string[abi:ne180100]<0>(a2, __str);
}

kaldi::quasar::DnnlmEvaluator *kaldi::quasar::DnnlmEvaluator::DnnlmEvaluator(kaldi::quasar::DnnlmEvaluator *this, const kaldi::quasar::NnlmDecoderWord *a2, kaldi::InferenceNetItf *a3, kaldi::InferenceNetItf *a4, float a5, int a6, int a7)
{
  const void *v13;
  const void *v14;
  uint64_t v16;
  uint64_t v17[6];
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  char v22[9];

  *(_QWORD *)this = &unk_1E5D33640;
  *((_QWORD *)this + 1) = a2;
  *((_DWORD *)this + 4) = kaldi::quasar::CEAttnEncoderDecoder::MaxEncoderSize(a2);
  *(_QWORD *)this = &off_1E5D32F00;
  *((_QWORD *)this + 3) = a3;
  *((_QWORD *)this + 4) = a4;
  *((_BYTE *)this + 40) = 0;
  *((float *)this + 11) = a5;
  *((_QWORD *)this + 6) = a6;
  std::unordered_map<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,float>,void *>,kaldi::LRUCacheMap<std::vector<int>,float,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,float,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,std::allocator<std::pair<std::vector<int> const* const,std::__list_iterator<std::pair<std::vector<int>,float>,void *>>>>::unordered_map((uint64_t)this + 56, 0, (char *)&v16, v22);
  *((_QWORD *)this + 13) = (char *)this + 104;
  *((_QWORD *)this + 14) = (char *)this + 104;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 15) = 0;
  std::unordered_map<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::CuVector<float>>,void *>,kaldi::LRUCacheMap<std::vector<int>,kaldi::CuVector<float>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::CuVector<float>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,std::allocator<std::pair<std::vector<int> const* const,std::__list_iterator<std::pair<std::vector<int>,kaldi::CuVector<float>>,void *>>>>::unordered_map((uint64_t)this + 144, 0, (char *)&v16, v22);
  *((_QWORD *)this + 24) = (char *)this + 192;
  *((_QWORD *)this + 25) = (char *)this + 192;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  std::unordered_map<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,void *>,kaldi::LRUCacheMap<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,std::allocator<std::pair<std::vector<int> const* const,std::__list_iterator<std::pair<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,void *>>>>::unordered_map((uint64_t)this + 224, 0, (char *)&v16, v22);
  *((_QWORD *)this + 34) = (char *)this + 272;
  *((_QWORD *)this + 35) = (char *)this + 272;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  v13 = (const void *)*((_QWORD *)this + 3);
  if (!v13
  {
    v16 = a7;
    std::unordered_map<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::CuVector<float>>,void *>,kaldi::LRUCacheMap<std::vector<int>,kaldi::CuVector<float>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::CuVector<float>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,std::allocator<std::pair<std::vector<int> const* const,std::__list_iterator<std::pair<std::vector<int>,kaldi::CuVector<float>>,void *>>>>::unordered_map((uint64_t)v17, 0, v22, &v21);
    v18 = (uint64_t)&v18;
    v19 = &v18;
    v20 = 0;
    *((_QWORD *)this + 17) = v16;
    std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>>>::__move_assign((uint64_t)this + 144, v17);
    std::list<std::pair<std::vector<int>,kaldi::CuVector<float>>>::__move_assign((uint64_t *)this + 24, &v18);
    std::__list_imp<std::pair<std::vector<int>,kaldi::CuVector<float>>>::clear(&v18);
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v17);
LABEL_8:
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"the NCE normalization factor is ", 32);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v16);
    }
    return this;
  }
  v14 = (const void *)*((_QWORD *)this + 4);
  if (v14
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"dynamic_cast<CEInferenceNet* const>(extra_nnet_) != nullptr", 59);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v16);
  }
  *((_BYTE *)this + 40) = 1;
  v16 = a7;
  std::unordered_map<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,void *>,kaldi::LRUCacheMap<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,std::allocator<std::pair<std::vector<int> const* const,std::__list_iterator<std::pair<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,void *>>>>::unordered_map((uint64_t)v17, 0, v22, &v21);
  v18 = (uint64_t)&v18;
  v19 = &v18;
  v20 = 0;
  *((_QWORD *)this + 27) = v16;
  std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>,void *>>>>::__move_assign((uint64_t)this + 224, v17);
  std::list<std::pair<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__move_assign((uint64_t *)this + 34, &v18);
  std::__list_imp<std::pair<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::clear(&v18);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v17);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Backed by either TensorFlow or Espresso.", 40);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v16);
    goto LABEL_8;
  }
  return this;
}

void kaldi::quasar::DnnlmEvaluator::~DnnlmEvaluator(kaldi::quasar::DnnlmEvaluator *this)
{
  char *v2;

  *(_QWORD *)this = &off_1E5D32F00;
  v2 = (char *)this + 224;
  std::__list_imp<std::pair<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::clear((uint64_t *)this + 34);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v2);
  std::__list_imp<std::pair<std::vector<int>,kaldi::CuVector<float>>>::clear((uint64_t *)this + 24);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 144);
  std::__list_imp<std::pair<std::vector<int>,float>>::clear((uint64_t *)this + 13);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 56);
  quasar::Bitmap::~Bitmap(this);
}

{
  kaldi::quasar::DnnlmEvaluator::~DnnlmEvaluator(this);
  JUMPOUT(0x1AF44D190);
}

float kaldi::quasar::DnnlmEvaluator::PrepareContext(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  float result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *a2;
  v5 = a2[1];
  v7 = (v5 - *a2) >> 2;
  kaldi::CuVector<float>::Resize(a3, v7, 1);
  if (v5 != v6)
  {
    v9 = 0;
    v10 = 0;
    v11 = *a2;
    v12 = (a2[1] - *a2) >> 2;
    if (v7 <= 1)
      v13 = 1;
    else
      v13 = v7;
    do
    {
      if (v12 == v10)
        std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
      result = (float)*(int *)(v11 + 4 * v10);
      *(float *)(*(_QWORD *)(a3 + 8) + (v9 >> 30)) = result;
      ++v10;
      v9 += 0x100000000;
    }
    while (v13 != v10);
  }
  return result;
}

float kaldi::quasar::DnnlmEvaluator::CalculateSingleNgram(uint64_t a1, uint64_t a2)
{
  float result;
  float v5;
  float *v6;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) & 1) != 0)
  {
    v6 = 0;
    if (kaldi::LRUCacheMap<std::vector<int>,float,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::Get(a1 + 48, a2, &v6))
    {
      result = *v6;
      ++*(_DWORD *)(a1 + 128);
    }
    else
    {
      ++*(_DWORD *)(a1 + 132);
      result = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, a2);
      v5 = result;
      if (*(_QWORD *)(a1 + 48))
      {
        kaldi::LRUCacheMap<std::vector<int>,float,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertWithValueFunction<kaldi::LRUCacheMap<std::vector<int>,float,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::Insert(std::vector<int> const&,float const&)::{lambda(float &)#1}>((unint64_t *)(a1 + 48), a2, (int *)&v5);
        return v5;
      }
    }
  }
  else
  {
    ++*(_DWORD *)(a1 + 132);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, a2);
  }
  return result;
}

float kaldi::quasar::DnnlmEvaluator::CalculateSingleNgramAfterCacheMiss(uint64_t a1, uint64_t a2)
{
  const void *v4;
  uint64_t v5;
  const void *v6;
  void *v7;
  _BOOL4 v8;
  float v9;
  float v10;
  BOOL v11;
  const void *v12;
  void *v13;
  float UnitOutput;
  uint64_t *v16[4];
  uint64_t *v17;
  void *__p;
  void *v19;
  uint64_t v20;

  v4 = *(const void **)a2;
  v5 = *(_QWORD *)(a2 + 8) - 4;
  v19 = 0;
  v20 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, v4, v5, (v5 - (uint64_t)v4) >> 2);
  if (!*(_BYTE *)(a1 + 40))
  {
    v17 = 0;
    v8 = kaldi::LRUCacheMap<std::vector<int>,kaldi::CuVector<float>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::Get(a1 + 136, (uint64_t)&__p, &v17);
    if (!v8)
    {
      v17 = kaldi::LRUCacheMap<std::vector<int>,kaldi::CuVector<float>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertInPlace((unint64_t *)(a1 + 136), (uint64_t)&__p);
      v16[0] = (uint64_t *)&unk_1E5D341C8;
      memset(&v16[1], 0, 24);
      v9 = kaldi::quasar::DnnlmEvaluator::PrepareContext((uint64_t)v17, (uint64_t *)&__p, (uint64_t)v16);
      (*(void (**)(_QWORD, uint64_t **, uint64_t *, uint64_t, float))(**(_QWORD **)(a1 + 24) + 104))(*(_QWORD *)(a1 + 24), v16, v17, 1, v9);
      v16[0] = (uint64_t *)&unk_1E5D341C8;
      kaldi::CuVector<float>::Destroy((uint64_t)v16);
    }
    v10 = (*(float (**)(_QWORD, uint64_t *, _QWORD))(**(_QWORD **)(a1 + 24) + 136))(*(_QWORD *)(a1 + 24), v17, *(unsigned int *)(*(_QWORD *)(a2 + 8) - 4))- *(float *)(a1 + 44);
    if (v8)
      goto LABEL_15;
LABEL_7:
    ++*(_DWORD *)(a1 + 300);
    goto LABEL_16;
  }
  v6 = *(const void **)(a1 + 24);
  if (v6)
  else
    v7 = 0;
  v16[0] = 0;
  v11 = kaldi::LRUCacheMap<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::Get(a1 + 216, (uint64_t)&__p, v16);
  if (!v11)
  {
    v16[0] = kaldi::LRUCacheMap<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertInPlace((unint64_t *)(a1 + 216), (uint64_t)&__p);
    kaldi::quasar::CEInferenceNet::Feedforward((uint64_t)v7, (uint64_t *)&__p, v16[0], 1);
  }
  v12 = *(const void **)(a1 + 32);
  if (v12)
  {
    UnitOutput = kaldi::quasar::CEInferenceNet::GetUnitOutput((uint64_t)v13, v16[0], *(_DWORD *)(*(_QWORD *)(a2 + 8) - 4));
  }
  else
  {
    UnitOutput = kaldi::quasar::CEInferenceNet::GetUnitOutput((uint64_t)v7, v16[0], *(_DWORD *)(*(_QWORD *)(a2 + 8) - 4));
  }
  v10 = UnitOutput - *(float *)(a1 + 44);
  if (!v11)
    goto LABEL_7;
LABEL_15:
  ++*(_DWORD *)(a1 + 296);
LABEL_16:
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  return -v10;
}

void sub_1AD9D9D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL kaldi::LRUCacheMap<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::Get(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v9[34];

  if (!a3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "v != nullptr");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  v9[0] = a2;
  v5 = std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::find<std::vector<int> const*>((_QWORD *)(a1 + 8), v9);
  v6 = v5;
  if (v5)
  {
    v7 = (uint64_t *)v5[3];
    std::list<std::pair<std::string,std::vector<std::string>>>::splice(a1 + 56, *(uint64_t **)(a1 + 64), a1 + 56, v7);
    *a3 = v7 + 5;
  }
  return v6 != 0;
}

uint64_t *kaldi::LRUCacheMap<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertInPlace(unint64_t *a1, uint64_t a2)
{
  _QWORD v3[34];

  if (!*a1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "capacity_ > 0");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  return kaldi::LRUCacheMap<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertWithValueFunction<kaldi::LRUCacheMap<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertInPlace(std::vector<int> const&)::{lambda(std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>&)#1}>(a1, a2);
}

BOOL kaldi::LRUCacheMap<std::vector<int>,kaldi::CuVector<float>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::Get(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v9[34];

  if (!a3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "v != nullptr");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  v9[0] = a2;
  v5 = std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::find<std::vector<int> const*>((_QWORD *)(a1 + 8), v9);
  v6 = v5;
  if (v5)
  {
    v7 = (uint64_t *)v5[3];
    std::list<std::pair<std::string,std::vector<std::string>>>::splice(a1 + 56, *(uint64_t **)(a1 + 64), a1 + 56, v7);
    *a3 = v7 + 5;
  }
  return v6 != 0;
}

uint64_t *kaldi::LRUCacheMap<std::vector<int>,kaldi::CuVector<float>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertInPlace(unint64_t *a1, uint64_t a2)
{
  _QWORD v3[34];

  if (!*a1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "capacity_ > 0");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  return kaldi::LRUCacheMap<std::vector<int>,kaldi::CuVector<float>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertWithValueFunction<kaldi::LRUCacheMap<std::vector<int>,kaldi::CuVector<float>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertInPlace(std::vector<int> const&)::{lambda(kaldi::CuVector<float>&)#1}>(a1, a2);
}

void kaldi::quasar::DnnlmEvaluator::ClearCaches(kaldi::quasar::DnnlmEvaluator *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[34];
  char v7;

  kaldi::quasar::NnlmEvaluatorBase::ClearCaches(this);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"HIT vs MISS: ", 13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"lm-score ", 9);
    v3 = (_QWORD *)std::ostream::operator<<();
    v7 = 47;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)&v7, 1);
    v4 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)", penultimate cache ", 20);
    v5 = (_QWORD *)std::ostream::operator<<();
    v7 = 47;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v7, 1);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v6);
  }
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 37) = 0;
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear((_QWORD *)this + 7);
  std::__list_imp<std::pair<std::vector<int>,float>>::clear((uint64_t *)this + 13);
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear((_QWORD *)this + 18);
  std::__list_imp<std::pair<std::vector<int>,kaldi::CuVector<float>>>::clear((uint64_t *)this + 24);
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear((_QWORD *)this + 28);
  std::__list_imp<std::pair<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::clear((uint64_t *)this + 34);
}

void sub_1AD9DA094(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t std::list<std::pair<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__move_assign(uint64_t *a1, _QWORD *a2)
{
  std::__list_imp<std::pair<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::clear(a1);
  return std::list<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>>::splice((uint64_t)a1, a1, a2);
}

void std::__list_imp<std::pair<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        std::__destroy_at[abi:ne180100]<std::pair<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,0>((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,0>(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
}

uint64_t std::list<std::pair<std::vector<int>,kaldi::CuVector<float>>>::__move_assign(uint64_t *a1, _QWORD *a2)
{
  std::__list_imp<std::pair<std::vector<int>,kaldi::CuVector<float>>>::clear(a1);
  return std::list<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntryCE>>::splice((uint64_t)a1, a1, a2);
}

void std::__list_imp<std::pair<std::vector<int>,kaldi::CuVector<float>>>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        std::__destroy_at[abi:ne180100]<std::pair<std::vector<int>,kaldi::CuVector<float>>,0>((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::vector<int>,kaldi::CuVector<float>>,0>(uint64_t a1)
{
  void *v2;

  *(_QWORD *)(a1 + 24) = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy(a1 + 24);
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
}

void std::__list_imp<std::pair<std::vector<int>,float>>::clear(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v3 = *a1;
    v2 = (uint64_t *)a1[1];
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    a1[2] = 0;
    while (v2 != a1)
    {
      v5 = (uint64_t *)v2[1];
      std::__list_imp<std::pair<std::vector<int>,float>>::__delete_node[abi:ne180100]<>((int)a1, v2);
      v2 = v5;
    }
  }
}

void std::__list_imp<std::pair<std::vector<int>,float>>::__delete_node[abi:ne180100]<>(int a1, _QWORD *__p)
{
  void *v3;

  v3 = (void *)__p[2];
  if (v3)
  {
    __p[3] = v3;
    operator delete(v3);
  }
  operator delete(__p);
}

uint64_t std::unordered_map<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,float>,void *>,kaldi::LRUCacheMap<std::vector<int>,float,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,float,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,std::allocator<std::pair<std::vector<int> const* const,std::__list_iterator<std::pair<std::vector<int>,float>,void *>>>>::unordered_map(uint64_t a1, size_t a2, char *a3, char *a4)
{
  char v5;
  char v6;

  v5 = *a3;
  v6 = *a4;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_BYTE *)(a1 + 44) = v6;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1AD9DA364(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::CuVector<float>>,void *>,kaldi::LRUCacheMap<std::vector<int>,kaldi::CuVector<float>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::CuVector<float>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,std::allocator<std::pair<std::vector<int> const* const,std::__list_iterator<std::pair<std::vector<int>,kaldi::CuVector<float>>,void *>>>>::unordered_map(uint64_t a1, size_t a2, char *a3, char *a4)
{
  char v5;
  char v6;

  v5 = *a3;
  v6 = *a4;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_BYTE *)(a1 + 44) = v6;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1AD9DA3BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,void *>,kaldi::LRUCacheMap<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,std::allocator<std::pair<std::vector<int> const* const,std::__list_iterator<std::pair<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,void *>>>>::unordered_map(uint64_t a1, size_t a2, char *a3, char *a4)
{
  char v5;
  char v6;

  v5 = *a3;
  v6 = *a4;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_BYTE *)(a1 + 44) = v6;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1AD9DA414(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

BOOL kaldi::LRUCacheMap<std::vector<int>,float,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::Get(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v9[34];

  if (!a3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "v != nullptr");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  v9[0] = a2;
  v5 = std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::find<std::vector<int> const*>((_QWORD *)(a1 + 8), v9);
  v6 = v5;
  if (v5)
  {
    v7 = (uint64_t *)v5[3];
    std::list<std::pair<std::string,std::vector<std::string>>>::splice(a1 + 56, *(uint64_t **)(a1 + 64), a1 + 56, v7);
    *a3 = v7 + 5;
  }
  return v6 != 0;
}

uint64_t *kaldi::LRUCacheMap<std::vector<int>,float,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertWithValueFunction<kaldi::LRUCacheMap<std::vector<int>,float,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::Insert(std::vector<int> const&,float const&)::{lambda(float &)#1}>(unint64_t *a1, uint64_t a2, int *a3)
{
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;

  v32 = (uint64_t *)&v32;
  v33 = (uint64_t *)&v32;
  v34 = 0;
  v6 = a1 + 1;
  *(_QWORD *)&v30 = a2;
  v7 = std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::find<std::vector<int> const*>(a1 + 1, (uint64_t *)&v30);
  if (v7)
  {
    v8 = (uint64_t *)v7[3];
    if (&v32 != (uint64_t **)v8)
    {
      v9 = (uint64_t *)v8[1];
      if (v9 != (uint64_t *)&v32)
      {
        v10 = *v8;
        *(_QWORD *)(v10 + 8) = v9;
        *(_QWORD *)v8[1] = v10;
        v11 = (uint64_t)v32;
        v32[1] = (uint64_t)v8;
        *v8 = v11;
        v8[1] = (uint64_t)&v32;
        --a1[9];
        v32 = v8;
        ++v34;
      }
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::erase(v6, v7);
  }
  else
  {
    v12 = a1[9];
    if (v12 >= *a1)
    {
      v16 = (uint64_t *)a1[7];
      if (&v32 != (uint64_t **)v16)
      {
        v17 = (uint64_t *)v16[1];
        if (v17 != (uint64_t *)&v32)
        {
          v18 = *v16;
          *(_QWORD *)(v18 + 8) = v17;
          *(_QWORD *)v16[1] = v18;
          v19 = (uint64_t)v32;
          v32[1] = (uint64_t)v16;
          *v16 = v19;
          v16[1] = (uint64_t)&v32;
          a1[9] = v12 - 1;
          v32 = v16;
          ++v34;
        }
      }
      *(_QWORD *)&v30 = v33 + 2;
      std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::__erase_unique<std::vector<int> const*>(v6, (uint64_t *)&v30);
      if (v33 + 2 != (uint64_t *)a2)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v33 + 16, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    }
    else
    {
      v30 = 0uLL;
      v31 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v30, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
      v13 = (uint64_t *)operator new(0x30uLL);
      v14 = v31;
      v15 = (uint64_t)v32;
      *((_OWORD *)v13 + 1) = v30;
      v13[4] = v14;
      *((_DWORD *)v13 + 10) = 0;
      *v13 = v15;
      v13[1] = (uint64_t)&v32;
      *(_QWORD *)(v15 + 8) = v13;
      v32 = v13;
      ++v34;
    }
  }
  v20 = v33;
  v21 = v33 + 2;
  v22 = *a3;
  v23 = v33;
  *((_DWORD *)v33 + 10) = v22;
  v24 = v23 + 5;
  *(_QWORD *)&v30 = v21;
  *((_QWORD *)&v30 + 1) = v20;
  std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::__emplace_unique_key_args<std::vector<int> const*,std::pair<std::vector<int> const* const,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>((uint64_t)v6, (uint64_t *)&v30, &v30);
  v25 = (uint64_t *)a1[8];
  if (v25 != v20)
  {
    v26 = (uint64_t *)v20[1];
    if (v26 != v25)
    {
      v27 = *v20;
      *(_QWORD *)(v27 + 8) = v26;
      *(_QWORD *)v20[1] = v27;
      v28 = *v25;
      *(_QWORD *)(v28 + 8) = v20;
      *v20 = v28;
      *v25 = (uint64_t)v20;
      v20[1] = (uint64_t)v25;
      --v34;
      ++a1[9];
    }
  }
  std::__list_imp<std::pair<std::vector<int>,float>>::clear((uint64_t *)&v32);
  return v24;
}

void sub_1AD9DA710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  std::__list_imp<std::pair<std::vector<int>,float>>::clear(&a12);
  _Unwind_Resume(a1);
}

uint64_t *kaldi::LRUCacheMap<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertWithValueFunction<kaldi::LRUCacheMap<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertInPlace(std::vector<int> const&)::{lambda(std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>&)#1}>(unint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;

  v26 = (uint64_t *)&v26;
  v27 = (uint64_t *)&v26;
  v28 = 0;
  v4 = a1 + 1;
  *(_QWORD *)&v24 = a2;
  v5 = std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::find<std::vector<int> const*>(a1 + 1, (uint64_t *)&v24);
  if (v5)
  {
    v6 = (uint64_t *)v5[3];
    if (&v26 != (uint64_t **)v6)
    {
      v7 = (uint64_t *)v6[1];
      if (v7 != (uint64_t *)&v26)
      {
        v8 = *v6;
        *(_QWORD *)(v8 + 8) = v7;
        *(_QWORD *)v6[1] = v8;
        v9 = (uint64_t)v26;
        v26[1] = (uint64_t)v6;
        *v6 = v9;
        v6[1] = (uint64_t)&v26;
        --a1[9];
        v26 = v6;
        ++v28;
      }
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::erase(v4, v5);
  }
  else
  {
    v10 = a1[9];
    if (v10 >= *a1)
    {
      v14 = (uint64_t *)a1[7];
      if (&v26 != (uint64_t **)v14)
      {
        v15 = (uint64_t *)v14[1];
        if (v15 != (uint64_t *)&v26)
        {
          v16 = *v14;
          *(_QWORD *)(v16 + 8) = v15;
          *(_QWORD *)v14[1] = v16;
          v17 = (uint64_t)v26;
          v26[1] = (uint64_t)v14;
          *v14 = v17;
          v14[1] = (uint64_t)&v26;
          a1[9] = v10 - 1;
          v26 = v14;
          ++v28;
        }
      }
      *(_QWORD *)&v24 = v27 + 2;
      std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::__erase_unique<std::vector<int> const*>(v4, (uint64_t *)&v24);
      if (v27 + 2 != (uint64_t *)a2)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v27 + 16, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    }
    else
    {
      v24 = 0uLL;
      v25 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v24, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
      v11 = (uint64_t *)operator new(0x30uLL);
      v12 = v25;
      v13 = (uint64_t)v26;
      *((_OWORD *)v11 + 1) = v24;
      v11[4] = v12;
      v11[5] = 0;
      *v11 = v13;
      v11[1] = (uint64_t)&v26;
      *(_QWORD *)(v13 + 8) = v11;
      v26 = v11;
      ++v28;
    }
  }
  v18 = v27;
  *(_QWORD *)&v24 = v27 + 2;
  *((_QWORD *)&v24 + 1) = v27;
  std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::__emplace_unique_key_args<std::vector<int> const*,std::pair<std::vector<int> const* const,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>((uint64_t)v4, (uint64_t *)&v24, &v24);
  v19 = (uint64_t *)a1[8];
  if (v19 != v18)
  {
    v20 = (uint64_t *)v18[1];
    if (v20 != v19)
    {
      v21 = *v18;
      *(_QWORD *)(v21 + 8) = v20;
      *(_QWORD *)v18[1] = v21;
      v22 = *v19;
      *(_QWORD *)(v22 + 8) = v18;
      *v18 = v22;
      *v19 = (uint64_t)v18;
      v18[1] = (uint64_t)v19;
      --v28;
      ++a1[9];
    }
  }
  std::__list_imp<std::pair<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::clear((uint64_t *)&v26);
  return v18 + 5;
}

void sub_1AD9DA97C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  std::__list_imp<std::pair<std::vector<int>,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::clear(&a12);
  _Unwind_Resume(a1);
}

uint64_t *kaldi::LRUCacheMap<std::vector<int>,kaldi::CuVector<float>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertWithValueFunction<kaldi::LRUCacheMap<std::vector<int>,kaldi::CuVector<float>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertInPlace(std::vector<int> const&)::{lambda(kaldi::CuVector<float>&)#1}>(unint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;

  v26 = (uint64_t *)&v26;
  v27 = (uint64_t *)&v26;
  v28 = 0;
  v4 = a1 + 1;
  *(_QWORD *)&v24 = a2;
  v5 = std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::find<std::vector<int> const*>(a1 + 1, (uint64_t *)&v24);
  if (v5)
  {
    v6 = (uint64_t *)v5[3];
    if (&v26 != (uint64_t **)v6)
    {
      v7 = (uint64_t *)v6[1];
      if (v7 != (uint64_t *)&v26)
      {
        v8 = *v6;
        *(_QWORD *)(v8 + 8) = v7;
        *(_QWORD *)v6[1] = v8;
        v9 = (uint64_t)v26;
        v26[1] = (uint64_t)v6;
        *v6 = v9;
        v6[1] = (uint64_t)&v26;
        --a1[9];
        v26 = v6;
        ++v28;
      }
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::erase(v4, v5);
  }
  else
  {
    v10 = a1[9];
    if (v10 >= *a1)
    {
      v14 = (uint64_t *)a1[7];
      if (&v26 != (uint64_t **)v14)
      {
        v15 = (uint64_t *)v14[1];
        if (v15 != (uint64_t *)&v26)
        {
          v16 = *v14;
          *(_QWORD *)(v16 + 8) = v15;
          *(_QWORD *)v14[1] = v16;
          v17 = (uint64_t)v26;
          v26[1] = (uint64_t)v14;
          *v14 = v17;
          v14[1] = (uint64_t)&v26;
          a1[9] = v10 - 1;
          v26 = v14;
          ++v28;
        }
      }
      *(_QWORD *)&v24 = v27 + 2;
      std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::__erase_unique<std::vector<int> const*>(v4, (uint64_t *)&v24);
      if (v27 + 2 != (uint64_t *)a2)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v27 + 16, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    }
    else
    {
      v24 = 0uLL;
      v25 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v24, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
      v11 = (uint64_t *)operator new(0x48uLL);
      v12 = v25;
      *((_OWORD *)v11 + 1) = v24;
      v11[7] = 0;
      v11[8] = 0;
      v11[6] = 0;
      v11[4] = v12;
      v11[5] = (uint64_t)&unk_1E5D341C8;
      v13 = (uint64_t)v26;
      *v11 = (uint64_t)v26;
      v11[1] = (uint64_t)&v26;
      *(_QWORD *)(v13 + 8) = v11;
      v26 = v11;
      ++v28;
    }
  }
  v18 = v27;
  *(_QWORD *)&v24 = v27 + 2;
  *((_QWORD *)&v24 + 1) = v27;
  std::__hash_table<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,false>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,kaldi::LRUCacheMap<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>>::__emplace_unique_key_args<std::vector<int> const*,std::pair<std::vector<int> const* const,std::__list_iterator<std::pair<std::vector<int>,kaldi::quasar::RnnlmEvaluator::HistoryCacheEntry>,void *>>>((uint64_t)v4, (uint64_t *)&v24, &v24);
  v19 = (uint64_t *)a1[8];
  if (v19 != v18)
  {
    v20 = (uint64_t *)v18[1];
    if (v20 != v19)
    {
      v21 = *v18;
      *(_QWORD *)(v21 + 8) = v20;
      *(_QWORD *)v18[1] = v21;
      v22 = *v19;
      *(_QWORD *)(v22 + 8) = v18;
      *v18 = v22;
      *v19 = (uint64_t)v18;
      v18[1] = (uint64_t)v19;
      --v28;
      ++a1[9];
    }
  }
  std::__list_imp<std::pair<std::vector<int>,kaldi::CuVector<float>>>::clear((uint64_t *)&v26);
  return v18 + 5;
}

void sub_1AD9DAC00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  std::__list_imp<std::pair<std::vector<int>,kaldi::CuVector<float>>>::clear(&a12);
  _Unwind_Resume(a1);
}

uint64_t quasar::rescoring::GetFeatureDescName(unsigned __int8 **a1)
{
  void **v2;
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *i;
  uint64_t v6;
  _QWORD *v7;
  const char *v8;
  size_t v9;
  uint64_t v10;
  void *__p[2];
  unsigned __int8 v13;
  _QWORD v14[2];
  _QWORD v15[11];
  char v16;
  uint64_t v17;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
  quasar::rescoring::EnumNameFeatureTypes<std::vector<quasar::rescoring::FeatureType>>(a1);
  if ((v13 & 0x80u) == 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  if ((v13 & 0x80u) == 0)
    v3 = v13;
  else
    v3 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v2, v3);
  if ((char)v13 < 0)
    operator delete(__p[0]);
  v4 = a1[3];
  for (i = a1[4]; v4 != i; ++v4)
  {
    v6 = *v4;
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"_", 1);
    v8 = "";
    if (v6 <= 0xD)
      v8 = quasar::rescoring::EnumNamesFeatureTransformation(void)::names[v6];
    v9 = strlen(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
  }
  std::stringbuf::str();
  v14[0] = *MEMORY[0x1E0DE4F50];
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v15[0] = v10;
  v15[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v16 < 0)
    operator delete((void *)v15[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v17);
}

void sub_1AD9DADB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t quasar::rescoring::EnumNameFeatureTypes<std::vector<quasar::rescoring::FeatureType>>(unsigned __int8 **a1)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  char *v5;
  const char *v6;
  size_t v7;
  uint64_t v8;
  _QWORD v10[2];
  _QWORD v11[11];
  char v12;
  uint64_t v13;
  _QWORD v14[19];

  v14[17] = *MEMORY[0x1E0C80C00];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v10);
  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    do
    {
      v4 = *v2;
      v5 = (char *)v11 + *(_QWORD *)(v11[0] - 24);
      if ((v5[32] & 5) == 0)
      {
        (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v5 + 5) + 32))(v14, *((_QWORD *)v5 + 5), 0, 1, 16);
        if (v14[16] >= 1)
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"_", 1);
      }
      v6 = "";
      if (v4 <= 0x15)
        v6 = quasar::rescoring::EnumNamesFeatureType(void)::names[v4];
      v7 = strlen(v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v6, v7);
      ++v2;
    }
    while (v2 != v3);
  }
  std::stringbuf::str();
  v10[0] = *MEMORY[0x1E0DE4F50];
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v11[0] = v8;
  v11[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v12 < 0)
    operator delete((void *)v11[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v13);
}

void sub_1AD9DAF94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *quasar::rescoring::operator<<(_QWORD *a1, uint64_t a2)
{
  void **v3;
  uint64_t v4;
  void *v6[3];
  void *__p;
  void *v8;
  void *v9[2];
  unsigned __int8 v10;

  std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>::pair[abi:ne180100](v6, a2);
  quasar::rescoring::GetFeatureDescName((unsigned __int8 **)v6);
  if ((v10 & 0x80u) == 0)
    v3 = v9;
  else
    v3 = (void **)v9[0];
  if ((v10 & 0x80u) == 0)
    v4 = v10;
  else
    v4 = (uint64_t)v9[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
  if ((char)v10 < 0)
    operator delete(v9[0]);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
  return a1;
}

void sub_1AD9DB048(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 - 17) < 0)
    operator delete(*(void **)(v2 - 40));
  kaldi::LatticeWordAligner::ComputationState::~ComputationState((kaldi::LatticeWordAligner::ComputationState *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>::pair[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(a1, *(const void **)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<quasar::rescoring::FeatureTransformation>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformation*,quasar::rescoring::FeatureTransformation*>(a1 + 3, *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24));
  return a1;
}

void sub_1AD9DB0C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<quasar::rescoring::FeatureType>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1AD9DB140(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<quasar::rescoring::FeatureType>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

_QWORD *std::vector<quasar::rescoring::FeatureTransformation>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformation*,quasar::rescoring::FeatureTransformation*>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<quasar::rescoring::FeatureType>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1AD9DB1F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::tennessee::GenericTextNormalizerInterface<std::string,quasar::tennessee::ImmutableVector<std::string>,true>::normalize@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 16))(a1, a2, a3);
}

void sub_1AD9DB250(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<quasar::tennessee::ImmutableVector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::vector<quasar::tennessee::ImmutableVector<std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 24;
      v7 = v4 - 24;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 24;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

BOOL kaldi::quasar::isEspressoV2Mil(uint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unsigned __int8 v5;
  size_t v6;
  unint64_t v7;
  BOOL v8;
  size_t v9;
  size_t v10;
  uint64_t *v11;
  void **v13;
  int v14;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  size_t v20;
  unint64_t v21;
  _BOOL8 v22;
  size_t v24;
  size_t v25;
  void **v26;
  int v27;
  void *__p[2];
  unsigned __int8 v30;
  void *v31[2];
  unsigned __int8 v32;

  std::string::basic_string[abi:ne180100]<0>(v31, ".bnns.mil");
  v2 = *((unsigned __int8 *)a1 + 23);
  v3 = a1[1];
  if ((v2 & 0x80u) == 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = a1[1];
  v5 = v32;
  if ((v32 & 0x80u) == 0)
    v6 = v32;
  else
    v6 = (size_t)v31[1];
  v8 = v4 >= v6;
  v7 = v4 - v6;
  if (!v8)
    goto LABEL_35;
  if ((v2 & 0x80) != 0)
  {
    if (v6 == -1 || v3 < v7)
LABEL_73:
      std::string::__throw_out_of_range[abi:ne180100]();
    if (v3 - v7 >= v6)
      v10 = v6;
    else
      v10 = v3 - v7;
    v11 = (uint64_t *)*a1;
  }
  else
  {
    v8 = v6 != -1 && v2 >= v7;
    if (!v8)
      goto LABEL_73;
    v9 = v2 - v7;
    if (v9 >= v6)
      v10 = v6;
    else
      v10 = v9;
    v11 = a1;
  }
  if ((v32 & 0x80u) == 0)
    v13 = v31;
  else
    v13 = (void **)v31[0];
  v14 = memcmp((char *)v11 + v7, v13, v10);
  if (v10 == v6 && v14 == 0)
  {
    v22 = 0;
    if ((v5 & 0x80) == 0)
      return v22;
    goto LABEL_45;
  }
LABEL_35:
  std::string::basic_string[abi:ne180100]<0>(__p, ".mil");
  v16 = *((unsigned __int8 *)a1 + 23);
  v17 = a1[1];
  if ((v16 & 0x80u) == 0)
    v18 = *((unsigned __int8 *)a1 + 23);
  else
    v18 = a1[1];
  v19 = (char)v30;
  if ((v30 & 0x80u) == 0)
    v20 = v30;
  else
    v20 = (size_t)__p[1];
  v8 = v18 >= v20;
  v21 = v18 - v20;
  if (!v8)
  {
    v22 = 0;
    if (((char)v30 & 0x80000000) == 0)
      goto LABEL_44;
    goto LABEL_43;
  }
  if ((v16 & 0x80) != 0)
  {
    if (v20 == -1 || v17 < v21)
LABEL_74:
      std::string::__throw_out_of_range[abi:ne180100]();
    if (v17 - v21 >= v20)
      v25 = v20;
    else
      v25 = v17 - v21;
    a1 = (uint64_t *)*a1;
  }
  else
  {
    if (v20 == -1)
      goto LABEL_74;
    v8 = v16 >= v21;
    v24 = v16 - v21;
    if (!v8)
      goto LABEL_74;
    if (v24 >= v20)
      v25 = v20;
    else
      v25 = v24;
  }
  if ((v30 & 0x80u) == 0)
    v26 = __p;
  else
    v26 = (void **)__p[0];
  v27 = memcmp((char *)a1 + v21, v26, v25);
  v22 = v25 == v20 && v27 == 0;
  if (v19 < 0)
LABEL_43:
    operator delete(__p[0]);
LABEL_44:
  if ((v32 & 0x80) != 0)
LABEL_45:
    operator delete(v31[0]);
  return v22;
}

void sub_1AD9DB4BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL kaldi::EndsWith(uint64_t **a1, _QWORD *a2)
{
  size_t v2;
  size_t v3;
  size_t v4;
  int v5;
  size_t v6;
  size_t v7;
  size_t v10;
  BOOL v11;
  size_t v12;

  v2 = *((unsigned __int8 *)a1 + 23);
  v3 = (size_t)a1[1];
  if ((v2 & 0x80u) == 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = (size_t)a1[1];
  v5 = *((char *)a2 + 23);
  if (v5 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = a2[1];
  v11 = v4 >= v6;
  v7 = v4 - v6;
  if (!v11)
    return 0;
  if ((v2 & 0x80) != 0)
  {
    v11 = v6 != -1 && v3 >= v7;
    if (v11)
    {
      v12 = v3 - v7;
      if (v12 >= v6)
        v10 = v6;
      else
        v10 = v12;
      a1 = (uint64_t **)*a1;
      goto LABEL_26;
    }
LABEL_34:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v2 < v7 || v6 == -1)
    goto LABEL_34;
  if (v2 - v7 >= v6)
    v10 = v6;
  else
    v10 = v2 - v7;
LABEL_26:
  if (v5 < 0)
    a2 = (_QWORD *)*a2;
  return !memcmp((char *)a1 + v7, a2, v10) && v10 == v6;
}

unint64_t kaldi::quasar::SetComputeEngineCacheLookupHandler(unint64_t this, void (*a2)(const char *, const char *, char *, unint64_t))
{
  atomic_store(this, (unint64_t *)&kaldi::quasar::sComputeEngineCacheLookupHandler);
  return this;
}

_QWORD *kaldi::quasar::MakeComputeEngineCachePath@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  void (*v6)(uint64_t *, uint64_t *, char *, uint64_t);
  uint64_t *v7;
  uint64_t *v8;
  char __s[1024];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  bzero(__s, 0x400uLL);
  v6 = (void (*)(uint64_t *, uint64_t *, char *, uint64_t))atomic_load((unint64_t *)&kaldi::quasar::sComputeEngineCacheLookupHandler);
  if (*((char *)a1 + 23) >= 0)
    v7 = a1;
  else
    v7 = (uint64_t *)*a1;
  if (*((char *)a2 + 23) >= 0)
    v8 = a2;
  else
    v8 = (uint64_t *)*a2;
  v6(v7, v8, __s, 1024);
  return std::string::basic_string[abi:ne180100]<0>(a3, __s);
}

void kaldi::quasar::CreateComputeEngineConfig(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  size_t v4;
  size_t v5;
  size_t v6;
  int v7;
  size_t v8;
  size_t v9;
  _BOOL4 v10;
  uint64_t v11;
  BOOL v12;
  size_t v13;
  size_t v14;
  uint64_t v15;
  const void *v17;
  int v18;
  size_t v20;
  size_t v21;
  size_t v22;
  int v23;
  size_t v24;
  size_t v25;
  _BOOL4 v26;
  uint64_t v27;
  size_t v28;
  size_t v29;
  uint64_t v30;
  const void *p_p;
  int v32;
  size_t v34;
  size_t v35;
  size_t v36;
  unsigned __int8 v37;
  size_t v38;
  size_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  size_t v44;
  unint64_t v45;
  _BOOL4 v46;
  size_t v47;
  size_t v48;
  uint64_t v49;
  size_t v50;
  size_t v51;
  uint64_t v52;
  const void *v53;
  int v54;
  size_t v55;
  size_t v56;
  size_t v57;
  int v58;
  size_t v59;
  size_t v60;
  BOOL isEspressoV2Mil;
  void *v62;
  size_t v63;
  size_t v64;
  uint64_t v65;
  void **v66;
  int v67;
  const void *v69;
  int v70;
  _BOOL4 v71;
  int matched;
  _QWORD *v73;
  std::string v74;
  void *__p;
  size_t v76;
  unsigned __int8 v77;
  void *v78[2];
  unsigned __int8 v79;

  std::string::basic_string[abi:ne180100]<0>(&__p, ".bnns.mil");
  v4 = *(unsigned __int8 *)(a1 + 23);
  v5 = *(_QWORD *)(a1 + 8);
  if ((v4 & 0x80u) == 0)
    v6 = *(unsigned __int8 *)(a1 + 23);
  else
    v6 = *(_QWORD *)(a1 + 8);
  v7 = (char)v77;
  if ((v77 & 0x80u) == 0)
    v8 = v77;
  else
    v8 = v76;
  v12 = v6 >= v8;
  v9 = v6 - v8;
  if (!v12)
  {
    v10 = 0;
    if (((char)v77 & 0x80000000) == 0)
      goto LABEL_9;
LABEL_43:
    operator delete(__p);
    if (v10)
      goto LABEL_10;
LABEL_44:
    std::string::basic_string[abi:ne180100]<0>(&__p, ".mlmodelc");
    v20 = *(unsigned __int8 *)(a1 + 23);
    v21 = *(_QWORD *)(a1 + 8);
    if ((v20 & 0x80u) == 0)
      v22 = *(unsigned __int8 *)(a1 + 23);
    else
      v22 = *(_QWORD *)(a1 + 8);
    v23 = (char)v77;
    if ((v77 & 0x80u) == 0)
      v24 = v77;
    else
      v24 = v76;
    v12 = v22 >= v24;
    v25 = v22 - v24;
    if (!v12)
    {
      v26 = 0;
      if (((char)v77 & 0x80000000) == 0)
        goto LABEL_52;
      goto LABEL_78;
    }
    if ((v20 & 0x80) != 0)
    {
      if (v24 == -1 || v21 < v25)
LABEL_179:
        std::string::__throw_out_of_range[abi:ne180100]();
      if (v21 - v25 >= v24)
        v29 = v24;
      else
        v29 = v21 - v25;
      v30 = *(_QWORD *)a1;
    }
    else
    {
      if (v24 == -1)
        goto LABEL_179;
      v12 = v20 >= v25;
      v28 = v20 - v25;
      if (!v12)
        goto LABEL_179;
      if (v28 >= v24)
        v29 = v24;
      else
        v29 = v28;
      v30 = a1;
    }
    if ((v77 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    v32 = memcmp((const void *)(v30 + v25), p_p, v29);
    v26 = v29 == v24 && v32 == 0;
    if ((v23 & 0x80000000) == 0)
    {
LABEL_52:
      if (v26)
      {
LABEL_53:
        v27 = operator new();
        kaldi::quasar::CoreMLNetworkConfig::CoreMLNetworkConfig(v27, a1);
LABEL_138:
        *a2 = v27;
        return;
      }
LABEL_79:
      std::string::basic_string[abi:ne180100]<0>(&__p, ".espresso/code.nitroir");
      v34 = *(unsigned __int8 *)(a1 + 23);
      v35 = *(_QWORD *)(a1 + 8);
      if ((v34 & 0x80u) == 0)
        v36 = *(unsigned __int8 *)(a1 + 23);
      else
        v36 = *(_QWORD *)(a1 + 8);
      v37 = v77;
      if ((v77 & 0x80u) == 0)
        v38 = v77;
      else
        v38 = v76;
      v12 = v36 >= v38;
      v39 = v36 - v38;
      if (!v12)
        goto LABEL_86;
      if ((v34 & 0x80) != 0)
      {
        if (v38 == -1 || v35 < v39)
LABEL_180:
          std::string::__throw_out_of_range[abi:ne180100]();
        if (v35 - v39 >= v38)
          v48 = v38;
        else
          v48 = v35 - v39;
        v49 = *(_QWORD *)a1;
      }
      else
      {
        if (v38 == -1)
          goto LABEL_180;
        v12 = v34 >= v39;
        v47 = v34 - v39;
        if (!v12)
          goto LABEL_180;
        if (v47 >= v38)
          v48 = v38;
        else
          v48 = v47;
        v49 = a1;
      }
      if ((v77 & 0x80u) == 0)
        v53 = &__p;
      else
        v53 = __p;
      v54 = memcmp((const void *)(v49 + v39), v53, v48);
      if (v48 == v38 && !v54)
      {
        v46 = 1;
        if ((v37 & 0x80) == 0)
        {
LABEL_96:
          if (v46)
          {
LABEL_97:
            v27 = operator new();
            kaldi::quasar::ESNetworkConfig::ESNetworkConfig(v27, a1);
            goto LABEL_138;
          }
LABEL_127:
          std::string::basic_string[abi:ne180100]<0>(&__p, ".bundle");
          v55 = *(unsigned __int8 *)(a1 + 23);
          v56 = *(_QWORD *)(a1 + 8);
          if ((v55 & 0x80u) == 0)
            v57 = *(unsigned __int8 *)(a1 + 23);
          else
            v57 = *(_QWORD *)(a1 + 8);
          v58 = (char)v77;
          if ((v77 & 0x80u) == 0)
            v59 = v77;
          else
            v59 = v76;
          v12 = v57 >= v59;
          v60 = v57 - v59;
          if (!v12)
            goto LABEL_134;
          v62 = __p;
          if ((v55 & 0x80) != 0)
          {
            if (v59 == -1 || v56 < v60)
LABEL_187:
              std::string::__throw_out_of_range[abi:ne180100]();
            if (v56 - v60 >= v59)
              v64 = v59;
            else
              v64 = v56 - v60;
            v65 = *(_QWORD *)a1;
          }
          else
          {
            if (v59 == -1)
              goto LABEL_187;
            v12 = v55 >= v60;
            v63 = v55 - v60;
            if (!v12)
              goto LABEL_187;
            if (v63 >= v59)
              v64 = v59;
            else
              v64 = v63;
            v65 = a1;
          }
          if ((v77 & 0x80u) == 0)
            v69 = &__p;
          else
            v69 = __p;
          v70 = memcmp((const void *)(v65 + v60), v69, v64);
          if (v64 == v59 && !v70)
          {
            if (v58 < 0)
              operator delete(v62);
            goto LABEL_137;
          }
LABEL_134:
          isEspressoV2Mil = kaldi::quasar::isEspressoV2Mil((uint64_t *)a1);
          if ((char)v77 < 0)
            operator delete(__p);
          if (!isEspressoV2Mil)
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, ".pb");
            v71 = kaldi::EndsWith((uint64_t **)a1, &__p);
            if ((char)v77 < 0)
              operator delete(__p);
            if (v71)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
              std::operator<<[abi:ne180100]<std::char_traits<char>>(&__p, "Compile with USE_TENSORFLOW=ON to use TensorFlow models");
            }
            else
            {
              if (*(char *)(a1 + 23) < 0)
                std::string::__init_copy_ctor_external(&v74, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
              else
                v74 = *(std::string *)a1;
              std::string::basic_string[abi:ne180100]<0>(&__p, ".pt|.zip");
              matched = kaldi::quasar::MatchSuffix((uint64_t *)&v74, (uint64_t)&__p);
              if ((char)v77 < 0)
                operator delete(__p);
              if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v74.__r_.__value_.__l.__data_);
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
              if (matched)
              {
                std::operator<<[abi:ne180100]<std::char_traits<char>>(&__p, "Compile with USE_TORCH=ON to use Torch models");
              }
              else
              {
                v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"No ComputeEngineConfigItf for model file: ", 42);
                std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v73, a1);
              }
            }
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
          }
LABEL_137:
          v27 = operator new();
          kaldi::quasar::EspressoV2NetworkConfig::EspressoV2NetworkConfig(v27, a1);
          goto LABEL_138;
        }
LABEL_126:
        operator delete(__p);
        if (v46)
          goto LABEL_97;
        goto LABEL_127;
      }
LABEL_86:
      std::string::basic_string[abi:ne180100]<0>(v78, ".espresso.net");
      v40 = *(unsigned __int8 *)(a1 + 23);
      v41 = *(_QWORD *)(a1 + 8);
      if ((v40 & 0x80u) == 0)
        v42 = *(unsigned __int8 *)(a1 + 23);
      else
        v42 = *(_QWORD *)(a1 + 8);
      v43 = (char)v79;
      if ((v79 & 0x80u) == 0)
        v44 = v79;
      else
        v44 = (size_t)v78[1];
      v12 = v42 >= v44;
      v45 = v42 - v44;
      if (!v12)
      {
        v46 = 0;
        if (((char)v79 & 0x80000000) == 0)
          goto LABEL_95;
        goto LABEL_94;
      }
      if ((v40 & 0x80) != 0)
      {
        if (v44 == -1 || v41 < v45)
LABEL_181:
          std::string::__throw_out_of_range[abi:ne180100]();
        if (v41 - v45 >= v44)
          v51 = v44;
        else
          v51 = v41 - v45;
        v52 = *(_QWORD *)a1;
      }
      else
      {
        if (v44 == -1)
          goto LABEL_181;
        v12 = v40 >= v45;
        v50 = v40 - v45;
        if (!v12)
          goto LABEL_181;
        if (v50 >= v44)
          v51 = v44;
        else
          v51 = v50;
        v52 = a1;
      }
      if ((v79 & 0x80u) == 0)
        v66 = v78;
      else
        v66 = (void **)v78[0];
      v67 = memcmp((const void *)(v52 + v45), v66, v51);
      v46 = v51 == v44 && v67 == 0;
      if ((v43 & 0x80000000) == 0)
      {
LABEL_95:
        if ((v77 & 0x80) == 0)
          goto LABEL_96;
        goto LABEL_126;
      }
LABEL_94:
      operator delete(v78[0]);
      goto LABEL_95;
    }
LABEL_78:
    operator delete(__p);
    if (v26)
      goto LABEL_53;
    goto LABEL_79;
  }
  if ((v4 & 0x80) != 0)
  {
    if (v8 == -1 || v5 < v9)
LABEL_178:
      std::string::__throw_out_of_range[abi:ne180100]();
    if (v5 - v9 >= v8)
      v14 = v8;
    else
      v14 = v5 - v9;
    v15 = *(_QWORD *)a1;
  }
  else
  {
    v12 = v8 != -1 && v4 >= v9;
    if (!v12)
      goto LABEL_178;
    v13 = v4 - v9;
    if (v13 >= v8)
      v14 = v8;
    else
      v14 = v13;
    v15 = a1;
  }
  if ((v77 & 0x80u) == 0)
    v17 = &__p;
  else
    v17 = __p;
  v18 = memcmp((const void *)(v15 + v9), v17, v14);
  v10 = v14 == v8 && v18 == 0;
  if (v7 < 0)
    goto LABEL_43;
LABEL_9:
  if (!v10)
    goto LABEL_44;
LABEL_10:
  std::string::basic_string[abi:ne180100]<0>(v78, "bnnsir");
  kaldi::quasar::MakeComputeEngineCachePath((uint64_t *)a1, (uint64_t *)v78, &__p);
  if ((char)v79 < 0)
    operator delete(v78[0]);
  v11 = operator new();
  kaldi::quasar::BNNSGraphNetworkConfig::BNNSGraphNetworkConfig(v11, a1, &__p);
  *a2 = v11;
  if ((char)v77 < 0)
    operator delete(__p);
}

void sub_1AD9DBC88(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
}

void sub_1AD9DBCD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(a1);
}

void sub_1AD9DBD60()
{
  uint64_t v0;

  if (*(char *)(v0 - 65) < 0)
    JUMPOUT(0x1AD9DBD70);
  JUMPOUT(0x1AD9DBD74);
}

uint64_t kaldi::quasar::MatchSuffix(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  size_t v13;
  uint64_t *v14;
  const void *v16;
  int v17;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;

  v21 = 0;
  v22 = 0;
  v23 = 0;
  v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  if (!v2
    || (kaldi::SplitStringToVector((const std::string *)a2, "|", 1, (uint64_t)&v21), v4 = v21, v5 = v22, v21 == v22))
  {
LABEL_39:
    v19 = 0;
  }
  else
  {
    v6 = *((unsigned __int8 *)a1 + 23);
    v7 = a1[1];
    if ((v6 & 0x80u) == 0)
      v8 = *((unsigned __int8 *)a1 + 23);
    else
      v8 = a1[1];
    while (1)
    {
      v9 = *(char *)(v4 + 23);
      v10 = v9 >= 0 ? *(unsigned __int8 *)(v4 + 23) : *(_QWORD *)(v4 + 8);
      v11 = v8 - v10;
      if (v8 >= v10)
      {
        if ((v6 & 0x80) != 0)
        {
          if (v10 == -1 || v7 < v11)
LABEL_42:
            std::string::__throw_out_of_range[abi:ne180100]();
          v13 = v7 - v11 >= v10 ? v10 : v7 - v11;
          v14 = (uint64_t *)*a1;
        }
        else
        {
          if (v10 == -1 || v6 < v11)
            goto LABEL_42;
          v13 = v6 - v11 >= v10 ? v10 : v6 - v11;
          v14 = a1;
        }
        v16 = v9 >= 0 ? (const void *)v4 : *(const void **)v4;
        v17 = memcmp((char *)v14 + v11, v16, v13);
        if (v13 == v10 && v17 == 0)
          break;
      }
      v4 += 24;
      if (v4 == v5)
        goto LABEL_39;
    }
    v19 = 1;
  }
  v24 = (void **)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v24);
  return v19;
}

void sub_1AD9DBED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::WrappedComputeEngineConfig::~WrappedComputeEngineConfig(kaldi::quasar::WrappedComputeEngineConfig *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E5D33E98;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E5D33E98;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E5D33E98;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x1AF44D190);
}

void kaldi::quasar::WrappedComputeEngineConfig::Read(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _BYTE v6[15];
  unsigned __int8 v7;

  v7 = 0;
  kaldi::Input::Input(v6, a3, &v7);
  v5 = kaldi::Input::Stream((kaldi::Input *)v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 24))(a1, a2, v5, v7);
  kaldi::Input::~Input((kaldi::Input *)v6);
}

void sub_1AD9DC028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::Input::~Input((kaldi::Input *)&a9);
  _Unwind_Resume(a1);
}

void kaldi::quasar::WrappedComputeEngineConfig::Read(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  void **v8;
  uint64_t v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  void *__p[2];
  char v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;

  kaldi::quasar::CreateComputeEngineConfig(a2, (uint64_t *)__p);
  v7 = a1[1];
  a1[1] = __p[0];
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  while ((*((_BYTE *)a3 + *(_QWORD *)(*a3 - 24) + 32) & 2) == 0)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    kaldi::ReadToken(a3, a4, (uint64_t)&v16);
    if (SHIBYTE(v18) < 0)
    {
      if (v17 != 8)
        goto LABEL_10;
      v8 = v16;
    }
    else
    {
      if (SHIBYTE(v18) != 8)
        goto LABEL_10;
      v8 = (void **)&v16;
    }
    if (*v8 == (void *)0x3E656E69676E453CLL)
    {
      v9 = a1[1];
      std::string::basic_string[abi:ne180100]<0>(__p, "</Engine>");
      (*(void (**)(uint64_t, uint64_t *, uint64_t, void **))(*(_QWORD *)v9 + 16))(v9, a3, a4, __p);
      if (v15 < 0)
        operator delete(__p[0]);
      goto LABEL_11;
    }
LABEL_10:
    if (((*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t, void ***))(*a1 + 32))(a1, a3, a4, &v16) & 1) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unknown token ", 14);
      if (v18 >= 0)
        v11 = (void **)&v16;
      else
        v11 = v16;
      if (v18 >= 0)
        v12 = HIBYTE(v18);
      else
        v12 = v17;
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", a typo in config file?", 24);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
    }
LABEL_11:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a3);
    if (SHIBYTE(v18) < 0)
      operator delete(v16);
  }
}

void sub_1AD9DC230(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 65) < 0)
    operator delete(*(void **)(v1 - 88));
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::WrappedComputeEngineConfig::HandleToken()
{
  return 0;
}

void kaldi::quasar::DefaultComputeEngineCacheLookupHandler(kaldi::quasar *this, const char *a2, char *a3, char *a4)
{
  CC_LONG v8;
  std::string *v9;
  std::string *v10;
  __int128 v11;
  _QWORD *v12;
  std::string *v13;
  std::string::size_type size;
  std::string::size_type v15;
  unsigned __int8 *v16;
  std::string *v17;
  unsigned __int8 *v18;
  FILE *v19;
  FILE *v20;
  _QWORD *v21;
  std::string *v22;
  std::string::size_type v23;
  _QWORD *v24;
  std::string *v25;
  std::string::size_type v26;
  std::string *v27;
  _QWORD *v28;
  int *v29;
  char *v30;
  CC_LONG v31;
  std::string v32;
  char __s[1024];
  unsigned __int8 md[32];
  std::string v35;
  unsigned __int8 v36[8];
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v8 = strlen((const char *)this);
  CC_SHA256(this, v8, md);
  bzero(__s, 0x400uLL);
  getuid();
  if (!__user_local_dirname())
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v35);
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Could not get root temp directory: ", 35);
    v29 = __error();
    v30 = strerror(*v29);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v28, v30);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v35);
  }
  std::string::basic_string[abi:ne180100]<0>(&v35, __s);
  v9 = std::string::append(&v35, "/");
  v10 = std::string::append(v9, "SpeechModelCache");
  if (SHIBYTE(v10->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v32, v10->__r_.__value_.__l.__data_, v10->__r_.__value_.__l.__size_);
  }
  else
  {
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v11;
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v35);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Testing if writable: ", 21);
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &v32;
    else
      v13 = (std::string *)v32.__r_.__value_.__r.__words[0];
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
    else
      size = v32.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, size);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v35);
  }
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v35, (char *)&v32);
  std::__fs::filesystem::__create_directories((const std::__fs::filesystem::path *)&v35, 0);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  else
    v15 = v32.__r_.__value_.__l.__size_;
  v16 = v36;
  std::string::basic_string[abi:ne180100]((uint64_t)v36, v15 + 5);
  if (v37 < 0)
    v16 = *(unsigned __int8 **)v36;
  if (v15)
  {
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = &v32;
    else
      v17 = (std::string *)v32.__r_.__value_.__r.__words[0];
    memmove(v16, v17, v15);
  }
  strcpy((char *)&v16[v15], "/test");
  if (v37 >= 0)
    v18 = v36;
  else
    v18 = *(unsigned __int8 **)v36;
  v19 = fopen((const char *)v18, "w");
  v20 = v19;
  if (v19)
  {
    fclose(v19);
  }
  else if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v35);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Not writable (via fopen): ", 26);
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &v32;
    else
      v22 = (std::string *)v32.__r_.__value_.__r.__words[0];
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
    else
      v23 = v32.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v35);
  }
  if (v37 < 0)
  {
    operator delete(*(void **)v36);
    if (!v20)
    {
LABEL_58:
      v31 = strlen((const char *)this);
      CC_SHA256(this, v31, v36);
      confstr(65537, (char *)&v35, 0x400uLL);
      snprintf(a3, (size_t)a4, "%s/%02x%02x%02x%02x.%s", (const char *)&v35, v36[0], v36[1], v36[2], v36[3], a2);
      goto LABEL_59;
    }
  }
  else if (!v20)
  {
    goto LABEL_58;
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v35);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Writable: ", 10);
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = &v32;
    else
      v25 = (std::string *)v32.__r_.__value_.__r.__words[0];
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
    else
      v26 = v32.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v35);
  }
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v35, (char *)&v32);
  std::__fs::filesystem::__create_directories((const std::__fs::filesystem::path *)&v35, 0);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  v27 = &v32;
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v27 = (std::string *)v32.__r_.__value_.__r.__words[0];
  snprintf(a3, (size_t)a4, "%s/%02x%02x%02x%02x.%s", (const char *)v27, md[0], md[1], md[2], md[3], a2);
LABEL_59:
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
}

void sub_1AD9DC73C()
{
  __cxa_end_catch();
  JUMPOUT(0x1AD9DC770);
}

void sub_1AD9DC780(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x48F]) < 0)
    JUMPOUT(0x1AD9DC790);
  _Unwind_Resume(a1);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(std::string *a1, char *a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  LODWORD(v3) = a2[23];
  v4 = (int)v3 < 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((int)v3 < 0)
    a2 = *(char **)a2;
  v3 = v3;
  if (v4)
    v3 = v5;
  std::string::append[abi:ne180100]<char const*,0>(a1, a2, &a2[v3]);
  return a1;
}

void sub_1AD9DC7EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

kaldi::quasar::LmeFstBuilderCompact *kaldi::quasar::LmeFstBuilderCompact::LmeFstBuilderCompact(kaldi::quasar::LmeFstBuilderCompact *this, int a2, int a3, char a4)
{
  kaldi::quasar::LmeTrie *v8;

  v8 = (kaldi::quasar::LmeTrie *)operator new();
  kaldi::quasar::LmeTrie::LmeTrie(v8, a2, a3, a4);
  *(_QWORD *)this = v8;
  return this;
}

void sub_1AD9DC874(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1020C40611EBE97);
  _Unwind_Resume(a1);
}

void kaldi::quasar::LmeFstBuilderCompact::~LmeFstBuilderCompact(kaldi::quasar::LmeTrie **this)
{
  std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](this, 0);
}

void kaldi::quasar::LmeFstBuilderCompact::AddPath(uint64_t *a1, uint64_t a2, int a3, float a4)
{
  kaldi::quasar::LmeTrie::AddPath(*a1, a2, a3, a4);
}

void kaldi::quasar::LmeTrie::AddPath(uint64_t a1, uint64_t a2, int a3, float a4)
{
  const void *v6;
  uint64_t v7;
  int v10;
  int *v11;
  char *v12;
  unint64_t v13;
  int v14;
  float v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  int v27;
  int *v28;
  int v29;
  int *v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  int v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  int v48;
  void *__p;
  char *v50;
  char *v51;

  v6 = *(const void **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (v6 != (const void *)v7)
  {
    if (a3 <= 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&__p, "olabel > 0");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
    __p = 0;
    v50 = 0;
    v51 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v6, v7, (v7 - (uint64_t)v6) >> 2);
    v10 = *(_DWORD *)(a1 + 56);
    if (v10)
      v11 = (int *)(*(_QWORD *)(a1 + 32) + 4 * v10);
    else
      v11 = 0;
    v12 = (char *)__p;
    if (v50 != __p)
    {
      v13 = 0;
      v14 = 0;
      v15 = 0.0;
      while (1)
      {
        v16 = *(_DWORD *)&v12[4 * v13];
        v17 = *v11;
        if (v17)
        {
          v48 = a3;
          v18 = 0;
          v19 = 0;
          do
          {
            v20 = *(_QWORD *)(a1 + 8) + 24 * v17;
            v21 = *(float *)(v20 + 8);
            if (v15 == -INFINITY || v21 == -INFINITY)
            {
              v22 = NAN;
            }
            else
            {
              v23 = v21 == INFINITY || v15 == INFINITY;
              v22 = v15 + v21;
              if (v23)
                v22 = INFINITY;
            }
            *(float *)(v20 + 8) = v22;
            v24 = *(_DWORD *)v20;
            if (*(_DWORD *)v20 == v16)
              v25 = v20;
            else
              v25 = v19;
            if (v24 == v16 || v14 == 0)
            {
              v19 = v25;
            }
            else
            {
              kaldi::quasar::LmeTrie::ArcSetOlabel(a1, v20, v14);
              v24 = *(_DWORD *)v20;
            }
            if (*(_DWORD *)a1 <= v24 && v24 < *(_DWORD *)(a1 + 4) + *(_DWORD *)a1)
              ++v18;
            v17 = *(_DWORD *)(v20 + 20);
          }
          while (v17);
          a3 = v48;
        }
        else
        {
          v19 = 0;
          v18 = 0;
        }
        if (v16 == -1)
        {
          if (v18 >= *(_DWORD *)(a1 + 4))
            goto LABEL_105;
          v16 = *(_DWORD *)a1 + v18;
          if (!v19)
          {
LABEL_39:
            if (v13 + 1 == (v50 - (_BYTE *)__p) >> 2)
            {
              v29 = *(_DWORD *)(a1 + 60);
              if (v10)
                goto LABEL_41;
LABEL_43:
              v30 = 0;
            }
            else
            {
              v29 = kaldi::quasar::LmeTrie::StateNew((kaldi::quasar::LmeTrie *)a1);
              if (!v10)
                goto LABEL_43;
LABEL_41:
              v30 = (int *)(*(_QWORD *)(a1 + 32) + 4 * v10);
            }
            v31 = kaldi::quasar::LmeTrie::ArcNew((_QWORD *)a1, v30, v16, v29, a4);
            a4 = 0.0;
            v14 = 0;
            if (v31)
              v19 = *(_QWORD *)(a1 + 8) + 24 * v31;
            else
              v19 = 0;
            v15 = 0.0;
            if (!a3)
              goto LABEL_97;
            goto LABEL_92;
          }
        }
        else if (!v19)
        {
          goto LABEL_39;
        }
        if (*(_DWORD *)(v19 + 16) == *(_DWORD *)(a1 + 60))
        {
          v27 = kaldi::quasar::LmeTrie::StateNew((kaldi::quasar::LmeTrie *)a1);
          *(_DWORD *)(v19 + 16) = v27;
          if (v27)
            v28 = (int *)(*(_QWORD *)(a1 + 32) + 4 * v27);
          else
            v28 = 0;
          v32 = *(_QWORD *)(a1 + 8);
          kaldi::quasar::LmeTrie::ArcNew((_QWORD *)a1, v28, *(_DWORD *)a1, *(_DWORD *)(a1 + 60), 0.0);
          v33 = 0xAAAAAAAAAAAAAAABLL * ((v19 - v32) >> 3);
          if ((_DWORD)v33)
            v19 = *(_QWORD *)(a1 + 8) + 24 * (int)v33;
          else
            v19 = 0;
        }
        v34 = (char *)__p;
        v35 = v50;
        if (v13 + 1 == (v50 - (_BYTE *)__p) >> 2)
        {
          if (v50 >= v51)
          {
            v37 = v13 + 2;
            if ((v13 + 2) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v38 = v51 - (_BYTE *)__p;
            if ((v51 - (_BYTE *)__p) >> 1 > v37)
              v37 = v38 >> 1;
            if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
              v39 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v39 = v37;
            if (v39)
            {
              v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v51, v39);
              v34 = (char *)__p;
              v35 = v50;
            }
            else
            {
              v40 = 0;
            }
            v41 = &v40[4 * v13 + 4];
            *(_DWORD *)v41 = -1;
            v36 = v41 + 4;
            while (v35 != v34)
            {
              v42 = *((_DWORD *)v35 - 1);
              v35 -= 4;
              *((_DWORD *)v41 - 1) = v42;
              v41 -= 4;
            }
            __p = v41;
            v50 = v36;
            v51 = &v40[4 * v39];
            if (v34)
              operator delete(v34);
          }
          else
          {
            *(_DWORD *)v50 = -1;
            v36 = v35 + 4;
          }
          v50 = v36;
        }
        v43 = kaldi::quasar::LmeTrie::Plus((kaldi::quasar::LmeTrie *)a1, *(float *)(v19 + 8), a4);
        v44 = *(float *)(v19 + 8);
        if (*(_BYTE *)(a1 + 68))
        {
          v15 = NAN;
          if (v44 != -INFINITY)
          {
            v23 = v44 == INFINITY;
            v45 = v44 - v43;
            if (v23)
              v45 = INFINITY;
            if ((LODWORD(v43) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
              v15 = v45;
            else
              v15 = NAN;
          }
          v46 = NAN;
          if (a4 != -INFINITY)
            goto LABEL_79;
        }
        else
        {
          v15 = NAN;
          if (v44 != -INFINITY)
          {
            v23 = v44 == INFINITY;
            v47 = v44 - v43;
            if (v23)
              v47 = INFINITY;
            if ((LODWORD(v43) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
              v15 = v47;
            else
              v15 = NAN;
          }
          v46 = NAN;
          if (a4 != -INFINITY)
          {
LABEL_79:
            if ((LODWORD(v43) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
            {
              v46 = INFINITY;
              if (a4 != INFINITY)
                v46 = a4 - v43;
            }
            else
            {
              v46 = NAN;
            }
          }
        }
        *(float *)(v19 + 8) = v43;
        a4 = v46;
        if (!a3)
          goto LABEL_97;
LABEL_92:
        if (!v14)
        {
          v14 = *(_DWORD *)(v19 + 4);
          if (v14 == a3)
            goto LABEL_100;
          if (!*(_BYTE *)(v19 + 12))
          {
            kaldi::quasar::LmeTrie::ArcSetOlabel(a1, v19, a3);
LABEL_100:
            v14 = 0;
            a3 = 0;
            goto LABEL_101;
          }
          if (v14)
            *(_DWORD *)(v19 + 4) = 0;
LABEL_98:
          *(_BYTE *)(v19 + 12) = 1;
          goto LABEL_101;
        }
LABEL_97:
        if (a3)
          goto LABEL_98;
LABEL_101:
        v10 = *(_DWORD *)(v19 + 16);
        if (v10)
          v11 = (int *)(*(_QWORD *)(a1 + 32) + 4 * v10);
        else
          v11 = 0;
        ++v13;
        v12 = (char *)__p;
        if (v13 >= (v50 - (_BYTE *)__p) >> 2)
        {
LABEL_105:
          if (!a3)
            ++*(_DWORD *)(a1 + 64);
          v12 = (char *)__p;
          break;
        }
      }
    }
    if (v12)
    {
      v50 = v12;
      operator delete(v12);
    }
  }
}

void sub_1AD9DCE14(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  __break(1u);
}

uint64_t kaldi::quasar::LmeTrie::GetFst(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int i;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  int v19;
  int v20;

  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 248))(a2, (*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2);
  v5 = *(_DWORD *)(a1 + 56);
  v4 = *(_DWORD *)(a1 + 60);
  if (*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32) >= 5uLL)
  {
    v6 = 1;
    do
    {
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
      if (v6 - 1 != v7)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v18);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&v18, "fst_state_id == trie_state_id - 1");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v18);
      }
      v8 = v7;
      v9 = *(_QWORD *)(a1 + 32);
      v10 = *(_DWORD *)(v9 + 4 * v6);
      if (v10)
      {
        v11 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 24 * v10 + 20);
        if (v11)
        {
          v12 = 1;
          do
          {
            ++v12;
            v11 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 24 * v11 + 20);
          }
          while (v11);
        }
        else
        {
          v12 = 1;
        }
      }
      else
      {
        v12 = 0;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 256))(a2, v7, v12);
      for (i = *(_DWORD *)(v9 + 4 * v6); i; i = *(_DWORD *)(v14 + 20))
      {
        v14 = *(_QWORD *)(a1 + 8) + 24 * i;
        v15 = *(_DWORD *)(v14 + 8);
        v16 = *(_DWORD *)(v14 + 16) - 1;
        v18 = *(_QWORD *)v14;
        v19 = v15;
        v20 = v16;
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 208))(a2, v8, &v18);
      }
      ++v6;
    }
    while (v6 < (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2);
  }
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 176))(a2, (v5 - 1));
  return (*(uint64_t (**)(uint64_t, _QWORD, float))(*(_QWORD *)a2 + 184))(a2, (v4 - 1), 0.0);
}

void kaldi::quasar::LmeFstBuilderCompact::GetFinalLmeFst(kaldi::quasar::LmeTrie **a1, _QWORD *a2, _DWORD *a3)
{
  kaldi::quasar::LmeTrie *v4;
  _QWORD v6[34];

  v4 = *a1;
  if (!v4)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, "trie");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  *a3 = *((_DWORD *)v4 + 16);
  kaldi::quasar::LmeTrie::GetFst((uint64_t)v4, (uint64_t)a2);
  std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](a1, 0);
  fst::MinimizeEncoded<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a2, 0.00097656);
  fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a2);
}

uint64_t fst::MinimizeEncoded<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(_QWORD *a1, float a2)
{
  uint64_t v3;
  uint64_t v4;
  float v6;
  uint64_t v7;
  char v8;
  float v9[2];
  uint64_t v10;
  char v11;

  v9[0] = a2;
  fst::ArcMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::QuantizeMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>((uint64_t)a1, v9);
  fst::EncodeMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::EncodeMapper((uint64_t)&v6, 3, 1);
  v3 = (*(uint64_t (**)(_QWORD *))(*a1 + 112))(a1);
  fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetInputSymbols(v7, v3);
  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 120))(a1);
  fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetOutputSymbols(v7, v4);
  fst::ArcMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::EncodeMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>((uint64_t)a1, (uint64_t)&v6);
  fst::AcceptorMinimize<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1);
  v9[0] = v6;
  LODWORD(v9[1]) = 2;
  v10 = v7;
  v11 = v8;
  ++*(_DWORD *)(v7 + 80);
  fst::ArcMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::EncodeMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>((uint64_t)a1, (uint64_t)v9);
  fst::EncodeMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~EncodeMapper((uint64_t)v9);
  fst::RmFinalEpsilon<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)a1);
  (*(void (**)(_QWORD *, _QWORD))(*a1 + 280))(a1, *(_QWORD *)(v7 + 88));
  (*(void (**)(_QWORD *, _QWORD))(*a1 + 288))(a1, *(_QWORD *)(v7 + 96));
  return fst::EncodeMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~EncodeMapper((uint64_t)&v6);
}

void sub_1AD9DD1B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  fst::EncodeMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~EncodeMapper((uint64_t)&a12);
  fst::EncodeMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~EncodeMapper((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(void *a1)
{
  void *v1[2];
  void *__p[2];
  __int128 v3;
  char v4;

  v1[0] = a1;
  v1[1] = &v4;
  *(_OWORD *)__p = 0u;
  v3 = 0u;
  fst::StateMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)a1, v1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1AD9DD228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::LmeTrie::ArcSetOlabel(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  _QWORD v4[34];

  v3 = *(_DWORD *)(a2 + 4);
  if (*(_BYTE *)(a2 + 12) != (v3 != 0))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "static_cast<BOOL>(arc->has_word) == static_cast<BOOL>(arc->olabel)");
    goto LABEL_8;
  }
  if (*(_BYTE *)(a2 + 12))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "!arc->has_word");
    goto LABEL_8;
  }
  if (v3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "!arc->olabel");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  *(_BYTE *)(a2 + 12) = 1;
  *(_DWORD *)(a2 + 4) = a3;
}

unint64_t kaldi::quasar::LmeTrie::StateNew(kaldi::quasar::LmeTrie *this)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *i;
  int v19;
  unint64_t result;

  v2 = *((_QWORD *)this + 4);
  v3 = (_DWORD *)*((_QWORD *)this + 5);
  v4 = (uint64_t)v3 - v2;
  v5 = (char *)this + 32;
  v8 = *((_QWORD *)v5 + 2);
  v6 = (uint64_t)(v5 + 16);
  v7 = v8;
  if ((unint64_t)v3 >= v8)
  {
    v10 = (v4 >> 2) + 1;
    if (v10 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v7 - v2;
    v12 = (uint64_t)(v7 - v2) >> 1;
    if (v12 <= v10)
      v12 = (v4 >> 2) + 1;
    if (v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v6, v13);
    else
      v14 = 0;
    v15 = &v14[4 * (v4 >> 2)];
    v16 = &v14[4 * v13];
    *(_DWORD *)v15 = 0;
    v9 = v15 + 4;
    v17 = (char *)*((_QWORD *)this + 4);
    for (i = (char *)*((_QWORD *)this + 5); i != v17; i -= 4)
    {
      v19 = *((_DWORD *)i - 1);
      *((_DWORD *)v15 - 1) = v19;
      v15 -= 4;
    }
    *((_QWORD *)this + 4) = v15;
    *((_QWORD *)this + 5) = v9;
    *((_QWORD *)this + 6) = v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v3 = 0;
    v9 = v3 + 1;
  }
  result = (unint64_t)v4 >> 2;
  *((_QWORD *)this + 5) = v9;
  *(v9 - 1) = 0;
  return result;
}

uint64_t kaldi::quasar::LmeTrie::ArcNew(_QWORD *a1, int *a2, int a3, int a4, float a5)
{
  uint64_t v10;
  _QWORD *v11;
  void **v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  int v28;

  v10 = a1[1];
  v11 = (_QWORD *)a1[2];
  v12 = (void **)(a1 + 1);
  v13 = ((uint64_t)v11 - v10) / 24;
  v14 = a1 + 1;
  v17 = v14[2];
  v15 = (uint64_t)(v14 + 2);
  v16 = v17;
  if ((unint64_t)v11 >= v17)
  {
    if ((unint64_t)(v13 + 1) > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - v10) >> 3);
    v20 = 2 * v19;
    if (2 * v19 <= v13 + 1)
      v20 = v13 + 1;
    if (v19 >= 0x555555555555555)
      v21 = 0xAAAAAAAAAAAAAAALL;
    else
      v21 = v20;
    if (v21)
      v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v15, v21);
    else
      v22 = 0;
    v23 = &v22[24 * v13];
    v24 = &v22[24 * v21];
    *(_QWORD *)v23 = 0;
    *((_QWORD *)v23 + 1) = 0;
    *((_QWORD *)v23 + 2) = 0;
    v18 = v23 + 24;
    v26 = (char *)a1[1];
    v25 = (char *)a1[2];
    if (v25 != v26)
    {
      do
      {
        v27 = *(_OWORD *)(v25 - 24);
        *((_QWORD *)v23 - 1) = *((_QWORD *)v25 - 1);
        *(_OWORD *)(v23 - 24) = v27;
        v23 -= 24;
        v25 -= 24;
      }
      while (v25 != v26);
      v25 = (char *)*v12;
    }
    a1[1] = v23;
    a1[2] = v18;
    a1[3] = v24;
    if (v25)
      operator delete(v25);
  }
  else
  {
    *v11 = 0;
    v11[1] = 0;
    v18 = v11 + 3;
    v11[2] = 0;
  }
  a1[2] = v18;
  *((_DWORD *)v18 - 6) = a3;
  *((_DWORD *)v18 - 5) = 0;
  *((float *)v18 - 4) = a5;
  *((_BYTE *)v18 - 12) = 0;
  v28 = *a2;
  *((_DWORD *)v18 - 2) = a4;
  *((_DWORD *)v18 - 1) = v28;
  *a2 = v13;
  return v13;
}

float kaldi::quasar::LmeTrie::Plus(kaldi::quasar::LmeTrie *this, float a2, float a3)
{
  float v3;
  float v4;
  float v7;
  float v8;

  v3 = a3;
  v4 = a2;
  if (*((_BYTE *)this + 68))
  {
    if (a2 >= a3)
      a2 = a3;
    if (a3 == -INFINITY || v4 == -INFINITY)
      return NAN;
    else
      return a2;
  }
  else if (a2 != INFINITY)
  {
    if (a3 == INFINITY)
    {
      return a2;
    }
    else if (a2 <= a3)
    {
      v8 = expf(-(float)(a3 - a2));
      return v4 - logf(v8 + 1.0);
    }
    else
    {
      v7 = expf(-(float)(a2 - a3));
      return v3 - logf(v7 + 1.0);
    }
  }
  return v3;
}

uint64_t fst::StateMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, void **a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  _BYTE *v9;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result != -1)
  {
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    v6 = (*(uint64_t (**)(void *))(*(_QWORD *)*a2 + 24))(*a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 176))(a1, v6);
    if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1) >= 1)
    {
      v7 = 0;
      do
      {
        fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetState(a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(a1, v7);
        for (i = (unint64_t)a2[5]; ; a2[5] = (void *)i)
        {
          v9 = a2[2];
          if (i >= ((_BYTE *)a2[3] - v9) >> 4)
            break;
          (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 208))(a1, v7, &v9[16 * i]);
          i = (unint64_t)a2[5] + 1;
        }
        (*(void (**)(void *, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 184))(a1, v7);
        v7 = (v7 + 1);
      }
      while ((int)v7 < (*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1));
    }
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v5 & 0x3FFF0FFF0007 | (((v5 >> 16) & 1) << 30) | 0x10000000, 0x3FFFFFFF0007);
  }
  return result;
}

void fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetState(void **a1, uint64_t a2)
{
  void **v4;
  unint64_t v5;
  void *v6;
  _OWORD *v7;
  unint64_t v8;
  char *v9;
  _OWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __n128 *v20;
  __int128 *v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[3];
  _DWORD *v25;
  unint64_t v26;

  a1[5] = 0;
  v4 = a1 + 2;
  a1[3] = a1[2];
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)*a1 + 40))(*a1);
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::reserve(v4, v5);
  v6 = *a1;
  v26 = 0;
  (*(void (**)(void *, uint64_t, _QWORD *))(*(_QWORD *)v6 + 136))(v6, a2, v24);
  while (1)
  {
    if (!v24[0])
    {
      if (v26 >= v24[2])
        goto LABEL_29;
      goto LABEL_7;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v24[0] + 24))(v24[0]))
      break;
    if (v24[0])
    {
      v7 = (_OWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v24[0] + 32))();
      goto LABEL_8;
    }
LABEL_7:
    v7 = (_OWORD *)(v24[1] + 16 * v26);
LABEL_8:
    v9 = (char *)a1[3];
    v8 = (unint64_t)a1[4];
    if ((unint64_t)v9 >= v8)
    {
      v11 = (v9 - (_BYTE *)*v4) >> 4;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 60)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v13 = v8 - (_QWORD)*v4;
      if (v13 >> 3 > v12)
        v12 = v13 >> 3;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
        v14 = 0xFFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a1 + 4), v14);
      else
        v15 = 0;
      v16 = &v15[16 * v11];
      *(_OWORD *)v16 = *v7;
      v18 = (char *)a1[2];
      v17 = (char *)a1[3];
      v19 = v16;
      if (v17 != v18)
      {
        do
        {
          *((_OWORD *)v19 - 1) = *((_OWORD *)v17 - 1);
          v19 -= 16;
          v17 -= 16;
        }
        while (v17 != v18);
        v17 = (char *)*v4;
      }
      v10 = v16 + 16;
      a1[2] = v19;
      a1[3] = v16 + 16;
      a1[4] = &v15[16 * v14];
      if (v17)
        operator delete(v17);
    }
    else
    {
      *(_OWORD *)v9 = *v7;
      v10 = v9 + 16;
    }
    a1[3] = v10;
    if (v24[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v24[0] + 40))(v24[0]);
    else
      ++v26;
  }
  if (v24[0])
  {
    (*(void (**)(void))(*(_QWORD *)v24[0] + 8))();
    goto LABEL_31;
  }
LABEL_29:
  if (v25)
    --*v25;
LABEL_31:
  v20 = (__n128 *)a1[2];
  v21 = (__int128 *)a1[3];
  v22 = 126 - 2 * __clz(((char *)v21 - (char *)v20) >> 4);
  if (v21 == (__int128 *)v20)
    v23 = 0;
  else
    v23 = v22;
  std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,false>(v20, v21, (uint64_t)v24, v23, 1);
}

void sub_1AD9DD9A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  }
  else if (a13)
  {
    --*a13;
  }
  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,false>(__n128 *a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __n128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  __int128 *v16;
  char v17;
  BOOL v18;
  __int128 *v19;
  signed __int32 v20;
  __int128 *v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  int v26;
  __int128 v27;
  __int128 v28;

_QWORD *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = v4[2];
        if ((int)v6 < *(_DWORD *)v4)
        {
          v7 = v4[3];
          v8 = v3;
          while (1)
          {
            *(_OWORD *)((char *)result + v8 + 16) = *(_OWORD *)((char *)result + v8);
            if (!v8)
              break;
            v9 = *(_DWORD *)((char *)result + v8 - 16);
            v8 -= 16;
            if ((int)v6 >= v9)
            {
              v10 = (_QWORD *)((char *)result + v8 + 16);
              goto LABEL_10;
            }
          }
          v10 = result;
LABEL_10:
          *v10 = v6;
          v10[1] = v7;
        }
        v2 = v5 + 2;
        v3 += 16;
        v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(__int128 *a1, int *a2, int *a3)
{
  int v3;
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3 = *a2;
  v4 = *a3;
  if (*a2 < *(_DWORD *)a1)
  {
    if (v4 < v3)
    {
      v5 = *a1;
      *a1 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v5;
      return 1;
    }
    v8 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v8;
    if (*a3 >= *a2)
      return 1;
    v9 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v9;
    return 2;
  }
  if (v4 < v3)
  {
    v6 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v6;
    if (*a2 >= *(_DWORD *)a1)
      return 1;
    v7 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v7;
    return 2;
  }
  return 0;
}

_DWORD *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &>(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  int v3;
  _DWORD *v4;
  int v5;
  _DWORD *v6;
  int v7;
  int v8;
  int v9;
  __int128 v11;

  v2 = *a1;
  v3 = *a1;
  if (v3 >= *((_DWORD *)a2 - 4))
  {
    v6 = a1 + 1;
    do
    {
      v4 = v6;
      if (v6 >= (_DWORD *)a2)
        break;
      v6 += 4;
    }
    while (v3 >= *v4);
  }
  else
  {
    v4 = a1;
    do
    {
      v5 = v4[4];
      v4 += 4;
    }
    while (v3 >= v5);
  }
  if (v4 < (_DWORD *)a2)
  {
    do
      v7 = *((_DWORD *)a2-- - 4);
    while (v3 < v7);
  }
  while (v4 < (_DWORD *)a2)
  {
    v11 = *(_OWORD *)v4;
    *(_OWORD *)v4 = *a2;
    *a2 = v11;
    do
    {
      v8 = v4[4];
      v4 += 4;
    }
    while (v3 >= v8);
    do
      v9 = *((_DWORD *)a2-- - 4);
    while (v3 < v9);
  }
  if (v4 - 4 != (_DWORD *)a1)
    *a1 = *((_OWORD *)v4 - 1);
  *((_OWORD *)v4 - 1) = v2;
  return v4;
}

__int128 *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &>(__int128 *a1, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;
  int v4;
  int v5;
  __int128 *v6;
  __int128 *v7;
  int v8;
  int v9;
  __int128 *v10;
  __int128 *v11;
  __int128 v12;
  int v13;
  int v14;

  v2 = 0;
  v3 = *a1;
  v4 = *a1;
  do
    v5 = a1[++v2];
  while (v4 > v5);
  v6 = &a1[v2];
  v7 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v6 >= a2)
        break;
      v9 = *((_DWORD *)a2-- - 4);
    }
    while (v4 <= v9);
  }
  else
  {
    do
      v8 = *((_DWORD *)a2-- - 4);
    while (v4 <= v8);
  }
  if (v6 < a2)
  {
    v10 = &a1[v2];
    v11 = a2;
    do
    {
      v12 = *v10;
      *v10 = *v11;
      *v11 = v12;
      do
        v13 = *((_DWORD *)v10++ + 4);
      while (v4 > v13);
      do
        v14 = *((_DWORD *)v11-- - 4);
      while (v4 <= v14);
    }
    while (v10 < v11);
    v7 = v10 - 1;
  }
  if (v7 != a1)
    *a1 = *v7;
  *v7 = v3;
  return v7;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(uint64_t a1, __n128 *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  _DWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  int v15;
  _OWORD *v16;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)&a2[-1];
      if ((signed __int32)a2[-1].n128_u32[0] < *(_DWORD *)a1)
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)a1, (int *)(a1 + 16), (int *)&a2[-1]);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)a1, (int *)(a1 + 16), (int *)(a1 + 32), (__n128 *)a2[-1].n128_u64);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)a1, (int *)(a1 + 16), (int *)(a1 + 32), (__n128 *)(a1 + 48), a2 - 1);
      return 1;
    default:
      v8 = (_DWORD *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)a1, (int *)(a1 + 16), (int *)(a1 + 32));
      v9 = (_OWORD *)(a1 + 48);
      if ((__n128 *)(a1 + 48) == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v9;
    if (v13 < *v8)
    {
      v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = *(_DWORD *)(a1 + v14 + 16);
        v14 -= 16;
        if (v13 >= v15)
        {
          v16 = (_OWORD *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      v16 = (_OWORD *)a1;
LABEL_12:
      *v16 = v12;
      if (++v11 == 8)
        return v9 + 1 == (_OWORD *)a2;
    }
    v8 = v9;
    v10 += 16;
    if (++v9 == (_OWORD *)a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(__int128 *a1, int *a2, int *a3, _OWORD *a4)
{
  __n128 result;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(a1, a2, a3);
  if (*(_DWORD *)a4 < *a3)
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (*a3 < *a2)
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*a2 < *(_DWORD *)a1)
      {
        result = (__n128)*a1;
        *a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(__int128 *a1, int *a2, int *a3, __n128 *a4, __n128 *a5)
{
  __n128 result;

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(a1, a2, a3, a4).n128_u64[0];
  if ((signed __int32)a5->n128_u32[0] < (signed __int32)a4->n128_u32[0])
  {
    result = *a4;
    *a4 = *a5;
    *a5 = result;
    if ((signed __int32)a4->n128_u32[0] < *a3)
    {
      result = *(__n128 *)a3;
      *(__n128 *)a3 = *a4;
      *a4 = result;
      if (*a3 < *a2)
      {
        result = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(__n128 *)a3 = result;
        if (*a2 < *(_DWORD *)a1)
        {
          result = (__n128)*a1;
          *a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

__int128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 *v12;
  __int128 *v13;
  __int128 *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int128 *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  __int128 v30;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if (*(_DWORD *)v14 < *(_DWORD *)a1)
        {
          v15 = *v14;
          *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v16 = (unint64_t)v8 >> 4;
      do
      {
        v17 = 0;
        v30 = *a1;
        v18 = a1;
        do
        {
          v19 = (uint64_t)&v18[v17 + 1];
          v20 = (2 * v17) | 1;
          v21 = 2 * v17 + 2;
          if (v21 < v16 && *(_DWORD *)v19 < *(_DWORD *)(v19 + 16))
          {
            v19 += 16;
            v20 = v21;
          }
          *v18 = *(_OWORD *)v19;
          v18 = (_OWORD *)v19;
          v17 = v20;
        }
        while (v20 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if ((__int128 *)v19 == --v6)
        {
          *(_OWORD *)v19 = v30;
        }
        else
        {
          *(_OWORD *)v19 = *v6;
          *v6 = v30;
          v22 = v19 - (_QWORD)a1 + 16;
          if (v22 >= 17)
          {
            v23 = (((unint64_t)v22 >> 4) - 2) >> 1;
            v24 = &a1[v23];
            v25 = *(_QWORD *)v19;
            if (*(_DWORD *)v24 < (int)*(_QWORD *)v19)
            {
              v26 = *(_QWORD *)(v19 + 8);
              do
              {
                v27 = v24;
                *(_OWORD *)v19 = *v24;
                if (!v23)
                  break;
                v23 = (v23 - 1) >> 1;
                v24 = &a1[v23];
                v19 = (uint64_t)v27;
              }
              while (*(_DWORD *)v24 < (int)v25);
              *(_QWORD *)v27 = v25;
              *((_QWORD *)v27 + 1) = v26;
            }
          }
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(uint64_t result, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  int v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = (__int128 *)(result + 16 * v7);
      v9 = v6 + 2;
      v10 = *(_QWORD *)v8;
      if (v9 < a3 && (int)v10 < (int)*((_QWORD *)v8 + 2))
      {
        v10 = *((_QWORD *)v8++ + 2);
        v7 = v9;
      }
      v11 = *a4;
      v12 = *a4;
      if (v12 <= (int)v10)
      {
        do
        {
          v13 = v8;
          *a4 = *v8;
          if (v5 < v7)
            break;
          v14 = (2 * v7) | 1;
          v8 = (__int128 *)(result + 16 * v14);
          v15 = 2 * v7 + 2;
          v16 = *(_QWORD *)v8;
          if (v15 < a3 && (int)v16 < (int)*((_QWORD *)v8 + 2))
          {
            v16 = *((_QWORD *)v8++ + 2);
            v14 = v15;
          }
          a4 = v13;
          v7 = v14;
        }
        while (v12 <= (int)v16);
        *v13 = v11;
      }
    }
  }
  return result;
}

void fst::AcceptorMinimize<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(_QWORD *a1)
{
  fst *v2;
  _QWORD *v3;
  fst *v4;
  _QWORD *v5;
  fst *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9[2];
  __int128 v10;
  void *__p[2];
  char v12;
  char v13;

  if ((*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 64))(a1, 0x200010000, 1))
  {
    fst::Connect<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)a1);
    if ((*(unsigned int (**)(_QWORD *))(*a1 + 160))(a1))
    {
      if ((*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 64))(a1, 0x800000000, 1))
      {
        if (FLAGS_v >= 2)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
          v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
          v3 = (_QWORD *)fst::cerr(v2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Acyclic Minimization", 20);
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
          if (v12 < 0)
            operator delete(__p[0]);
        }
        fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1);
        fst::AcyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AcyclicMinimizer((uint64_t)__p, a1);
        fst::MergeStates<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(__p, (uint64_t)a1);
        fst::Partition<int>::~Partition(__p);
      }
      else
      {
        if (FLAGS_v >= 2)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
          v6 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
          v7 = (_QWORD *)fst::cerr(v6);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Cyclic Minimization", 19);
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
          if (v12 < 0)
            operator delete(__p[0]);
        }
        fst::CyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LifoQueue<int>>::CyclicMinimizer((uint64_t)__p, (uint64_t)a1);
        fst::MergeStates<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(__p, (uint64_t)a1);
        fst::CyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LifoQueue<int>>::~CyclicMinimizer(__p);
      }
      v8 = a1;
      *(_OWORD *)v9 = 0u;
      v10 = 0u;
      fst::StateMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>((uint64_t)a1, (uint64_t *)&v8);
      if (v9[0])
      {
        v9[1] = v9[0];
        operator delete(v9[0]);
      }
    }
  }
  else
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v4 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
    v5 = (_QWORD *)fst::cerr(v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"FST is not an unweighted acceptor", 33);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
    if (v12 < 0)
      operator delete(__p[0]);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 192))(a1, 4, 4);
  }
}

void sub_1AD9DE818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1AD9DE880(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    JUMPOUT(0x1AD9DE874);
  JUMPOUT(0x1AD9DE878);
}

uint64_t fst::ArcMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::QuantizeMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, float *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  unint64_t v9;
  __n128 v10;
  _QWORD v11[2];
  uint64_t v12;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result != -1)
  {
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1) >= 1)
    {
      v6 = 0;
      do
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 296))(a1, v6, &v12);
        while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12))
        {
          v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
          v8 = *(float *)(v7 + 8);
          if ((LODWORD(v8) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
            v8 = *a2 * floorf((float)(v8 / *a2) + 0.5);
          v9 = LODWORD(v8) | ((unint64_t)*(unsigned int *)(v7 + 12) << 32);
          v11[0] = *(_QWORD *)v7;
          v11[1] = v9;
          (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v12 + 88))(v12, v11);
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
        }
        if (v12)
          (*(void (**)(void))(*(_QWORD *)v12 + 8))();
        v10.n128_f32[0] = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v6);
        if ((v10.n128_u32[0] & 0x7FFFFFFF) <= 0x7F7FFFFF)
          v10.n128_f32[0] = *a2 * floorf((float)(v10.n128_f32[0] / *a2) + 0.5);
        (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)a1 + 184))(a1, v6, v10);
        v6 = (v6 + 1);
      }
      while ((int)v6 < (*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1));
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v5 & 0x3FFCFFFF0007, 0x3FFFFFFF0007);
  }
  return result;
}

void sub_1AD9DEA70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t fst::EncodeMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::EncodeMapper(uint64_t a1, int a2, int a3)
{
  uint64_t v5;

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  v5 = operator new();
  fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::EncodeTable(v5, a2);
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  return a1;
}

void sub_1AD9DEAF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10A0C40782F6942);
  _Unwind_Resume(a1);
}

uint64_t fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::EncodeTable(uint64_t a1, int a2)
{
  int v4;
  char v5;
  BOOL v6;

  *(_DWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v4 = a2;
  v5 = a2 & 1;
  v6 = (a2 & 2) != 0;
  std::unordered_map<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,int,fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TupleKey,fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TupleEqual,std::allocator<std::pair<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const* const,int>>>::unordered_map(a1 + 32, 0x400uLL, &v4);
  *(_DWORD *)(a1 + 80) = 1;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  return a1;
}

void sub_1AD9DEB84(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 16) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_map<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,int,fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TupleKey,fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TupleEqual,std::allocator<std::pair<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const* const,int>>>::unordered_map(uint64_t a1, size_t a2, int *a3)
{
  int v4;

  v4 = *a3;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 36) = v4 & 1;
  *(_BYTE *)(a1 + 37) = (v4 & 2) != 0;
  *(_DWORD *)(a1 + 40) = 1065353216;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1AD9DEBF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::EncodeMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unsigned int *v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  __n128 v12;
  unsigned __int32 v13;
  unsigned __int32 v14;
  int v15;
  fst *v16;
  _QWORD *v17;
  unsigned int v18;
  unint64_t v19;
  float v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *__p[2];
  char v27;
  char v28;
  _QWORD v29[2];
  char v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;

  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 280))(a1, 0);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 288))(a1, 0);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result != -1)
  {
    v25 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    if (*(_DWORD *)(a2 + 4) == 1 && (*(_BYTE *)a2 & 2) != 0)
    {
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
      (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)a1 + 184))(a1, v5, 0.0);
      v6 = 0;
    }
    else
    {
      LODWORD(v5) = -1;
      v6 = 1;
    }
    if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1) >= 1)
    {
      v7 = 0;
      while (1)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 296))(a1, v7, &v34);
        while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v34 + 24))(v34))
        {
          v8 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 32))(v34);
          v32 = fst::EncodeMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::operator()((int *)a2, v8);
          v33 = v9;
          (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v34 + 88))(v34, &v32);
          (*(void (**)(uint64_t))(*(_QWORD *)v34 + 40))(v34);
        }
        if (v34)
          (*(void (**)(void))(*(_QWORD *)v34 + 8))();
        if ((v6 & 1) != 0)
          break;
        if ((_DWORD)v7 != (_DWORD)v5)
        {
          *(float *)&v18 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v7);
          v32 = 0;
          v33 = v18 | 0xFFFFFFFF00000000;
          v19 = fst::EncodeMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::operator()((int *)a2, (unsigned int *)&v32);
          if (!v19 && (*(float *)&v32 = v20, LODWORD(v34) = 2139095040, v20 == INFINITY))
          {
            v12.n128_u32[0] = 2139095040;
          }
          else
          {
            v32 = v19;
            v33 = __PAIR64__(v5, LODWORD(v20));
            (*(void (**)(uint64_t, uint64_t, unint64_t *))(*(_QWORD *)a1 + 208))(a1, v7, &v32);
            v12.n128_u32[0] = 2139095040;
          }
          goto LABEL_30;
        }
LABEL_31:
        v7 = (v7 + 1);
        if ((int)v7 >= (*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1))
          goto LABEL_34;
      }
      *(float *)&v10 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v7);
      v32 = 0;
      v33 = v10 | 0xFFFFFFFF00000000;
      v11 = fst::EncodeMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::operator()((int *)a2, (unsigned int *)&v32);
      v14 = v13;
      if (!v11)
      {
LABEL_29:
        v12.n128_u32[0] = v14;
LABEL_30:
        (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)a1 + 184))(a1, v7, v12);
        goto LABEL_31;
      }
      v15 = FLAGS_fst_error_fatal;
      if (FLAGS_fst_error_fatal)
      {
        std::string::basic_string[abi:ne180100]<0>(v29, "FATAL");
        v16 = fst::LogMessage::LogMessage((fst *)&v31, (uint64_t)v29);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        v16 = fst::LogMessage::LogMessage((fst *)&v28, (uint64_t)__p);
      }
      v17 = (_QWORD *)fst::cerr(v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"ArcMap: non-zero arc labels for superfinal arc", 46);
      if (v15)
      {
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v31);
        if (v30 < 0)
        {
          v21 = (void *)v29[0];
LABEL_27:
          operator delete(v21);
        }
      }
      else
      {
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v28);
        if (v27 < 0)
        {
          v21 = __p[0];
          goto LABEL_27;
        }
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, 4, 4);
      goto LABEL_29;
    }
LABEL_34:
    v22 = 0x3FFF00000007;
    if ((*(_DWORD *)a2 & 1) == 0)
      v22 = 0x3FFFFFFF0007;
    if ((*(_DWORD *)a2 & 2) != 0)
    {
      v23 = 0x1D7C48100007;
      if (*(_DWORD *)(a2 + 4) == 1)
        v23 = 0x2EBC84200007;
      v22 &= v23;
    }
    if (*(_BYTE *)(a2 + 16))
      v24 = v25 | 4;
    else
      v24 = v25;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v22 & v24, 0x3FFFFFFF0007);
  }
  return result;
}

void sub_1AD9DEFD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a19);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  unsigned int v6;

  v4 = *(_QWORD *)(a1 + 88);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (a2)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v6 = *(_DWORD *)a1 | 4;
  }
  else
  {
    result = 0;
    v6 = *(_DWORD *)a1 & 0xFFFFFFFB;
  }
  *(_QWORD *)(a1 + 88) = result;
  *(_DWORD *)a1 = v6;
  return result;
}

uint64_t fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  unsigned int v6;

  v4 = *(_QWORD *)(a1 + 96);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (a2)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v6 = *(_DWORD *)a1 | 8;
  }
  else
  {
    result = 0;
    v6 = *(_DWORD *)a1 & 0xFFFFFFF7;
  }
  *(_QWORD *)(a1 + 96) = result;
  *(_DWORD *)a1 = v6;
  return result;
}

unint64_t fst::EncodeMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::operator()(int *a1, unsigned int *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  fst *v8;
  _QWORD *v9;
  fst *v10;
  _QWORD *v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  fst *v16;
  _QWORD *v17;
  void *v18[2];
  char v19;
  char v20;
  void *v21[2];
  char v22;
  char v23;
  void *__p[2];
  char v25;
  char v26;

  v4 = a2[3];
  if (a1[1] == 1)
  {
    if (v4 == -1)
    {
      if ((*(_BYTE *)a1 & 2) == 0
        || (LODWORD(__p[0]) = 0, LODWORD(__p[0]) = a2[2], LODWORD(v21[0]) = 2139095040, *(float *)__p == INFINITY))
      {
LABEL_14:
        v5 = *a2;
        v6 = a2[1];
        return v5 | (unint64_t)(v6 << 32);
      }
    }
    v5 = fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Encode(*((int8x8_t **)a1 + 1), (uint64_t)a2);
    LODWORD(v6) = a2[1];
    if ((*a1 & 1) != 0)
      v6 = v5;
    else
      v6 = v6;
  }
  else
  {
    if (v4 == -1 || !*a2)
      goto LABEL_14;
    v7 = *a1;
    if ((*a1 & 1) != 0 && *a2 != a2[1])
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v8 = fst::LogMessage::LogMessage((fst *)&v26, (uint64_t)__p);
      v9 = (_QWORD *)fst::cerr(v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"EncodeMapper: Label-encoded arc has different input and output labels", 69);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v26);
      if (v25 < 0)
        operator delete(__p[0]);
      *((_BYTE *)a1 + 16) = 1;
      v7 = *a1;
    }
    if ((v7 & 2) != 0)
    {
      LODWORD(v21[0]) = 0;
      LODWORD(v21[0]) = a2[2];
      LODWORD(v18[0]) = 0;
      if (*(float *)v21 != 0.0)
      {
        if (FLAGS_fst_error_fatal)
          std::string::basic_string[abi:ne180100]<0>(v21, "FATAL");
        else
          std::string::basic_string[abi:ne180100]<0>(v21, "ERROR");
        v10 = fst::LogMessage::LogMessage((fst *)&v23, (uint64_t)v21);
        v11 = (_QWORD *)fst::cerr(v10);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"EncodeMapper: Weight-encoded arc has non-trivial weight", 55);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v23);
        if (v22 < 0)
          operator delete(v21[0]);
        *((_BYTE *)a1 + 16) = 1;
      }
    }
    v12 = (unsigned int *)fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Decode(*((_QWORD *)a1 + 1), *a2);
    if (v12)
    {
      v13 = v12;
      v5 = *v12;
      if ((*a1 & 1) != 0)
        v14 = v13;
      else
        v14 = a2;
      v6 = v14[1];
    }
    else
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(v18, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(v18, "ERROR");
      v16 = fst::LogMessage::LogMessage((fst *)&v20, (uint64_t)v18);
      v17 = (_QWORD *)fst::cerr(v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"EncodeMapper: decode failed", 27);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v20);
      if (v19 < 0)
        operator delete(v18[0]);
      *((_BYTE *)a1 + 16) = 1;
      v5 = -1;
      v6 = 0xFFFFFFFFLL;
    }
  }
  return v5 | (unint64_t)(v6 << 32);
}

void sub_1AD9DF40C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a28);
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Encode(int8x8_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  float v5;
  _QWORD *v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  int8x8_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  float v25;
  uint64_t *v26;

  v3 = (uint64_t)&a1[4];
  v4 = (a1->i32[0] << 31 >> 31) & *(_DWORD *)(a2 + 4);
  v5 = *(float *)(a2 + 8);
  if ((a1->i32[0] & 2) == 0)
    v5 = 0.0;
  LODWORD(v24) = *(_DWORD *)a2;
  HIDWORD(v24) = v4;
  v25 = v5;
  v26 = &v24;
  v6 = std::__hash_table<std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,int>,std::__unordered_map_hasher<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,int>,fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TupleKey,fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TupleEqual,false>,std::__unordered_map_equal<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,int>,fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TupleEqual,fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TupleKey,true>,std::allocator<std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,int>>>::find<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*>(a1 + 4, (uint64_t *)&v26);
  if (v6)
    return *((unsigned int *)v6 + 6);
  v8 = operator new();
  *(_QWORD *)v8 = v24;
  *(float *)(v8 + 8) = v25;
  v9 = (unint64_t)a1[3];
  v10 = (uint64_t *)a1[2];
  if ((unint64_t)v10 >= v9)
  {
    v12 = a1[1];
    v13 = ((uint64_t)v10 - *(_QWORD *)&v12) >> 3;
    if ((unint64_t)(v13 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v14 = v9 - *(_QWORD *)&v12;
    v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v13 + 1))
      v15 = v13 + 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&a1[3], v16);
    else
      v17 = 0;
    v18 = (uint64_t *)&v17[8 * v13];
    v19 = &v17[8 * v16];
    *v18 = v8;
    v11 = v18 + 1;
    v21 = (char *)a1[1];
    v20 = (char *)a1[2];
    if (v20 != v21)
    {
      do
      {
        v22 = *((_QWORD *)v20 - 1);
        v20 -= 8;
        *--v18 = v22;
      }
      while (v20 != v21);
      v20 = (char *)a1[1];
    }
    a1[1] = (int8x8_t)v18;
    a1[2] = (int8x8_t)v11;
    a1[3] = (int8x8_t)v19;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *v10 = v8;
    v11 = v10 + 1;
  }
  a1[2] = (int8x8_t)v11;
  v23 = ((unint64_t)v11 - *(_QWORD *)&a1[1]) >> 3;
  v26 = v11 - 1;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,int>,std::__unordered_map_hasher<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,int>,fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TupleKey,fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TupleEqual,false>,std::__unordered_map_equal<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,int>,fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TupleEqual,fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TupleKey,true>,std::allocator<std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,int>>>::__emplace_unique_key_args<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,std::piecewise_construct_t const&,std::tuple<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const* const&>,std::tuple<>>(v3, v11 - 1, (uint64_t)&std::piecewise_construct, &v26)+ 6) = v23;
  return (*(_QWORD *)&a1[2] - *(_QWORD *)&a1[1]) >> 3;
}

uint64_t fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Decode(uint64_t a1, int a2)
{
  uint64_t v2;
  fst *v3;
  _QWORD *v4;
  void *__p[2];
  char v7;
  char v8;

  if (a2 >= 1)
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (a2 <= (unint64_t)((*(_QWORD *)(a1 + 16) - v2) >> 3))
      return *(_QWORD *)(v2 + 8 * (a2 - 1));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v3 = fst::LogMessage::LogMessage((fst *)&v8, (uint64_t)__p);
  v4 = (_QWORD *)fst::cerr(v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"EncodeTable::Decode: unknown decode key: ", 41);
  std::ostream::operator<<();
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v8);
  if (v7 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1AD9DF6DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,int>,std::__unordered_map_hasher<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,int>,fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TupleKey,fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TupleEqual,false>,std::__unordered_map_equal<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,int>,fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TupleEqual,fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TupleKey,true>,std::allocator<std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,int>>>::find<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*>(int8x8_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int8x8_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;

  v3 = *a2;
  v4 = *(int *)*a2;
  if (!a1[4].i8[4])
  {
    if (!a1[4].i8[5])
    {
      v5 = *(int *)*a2;
      goto LABEL_7;
    }
    v5 = 7867 * *(unsigned int *)(v3 + 8);
    goto LABEL_6;
  }
  v5 = v4 + 7853 * *(int *)(v3 + 4);
  if (a1[4].i8[5])
  {
    v4 = 7867 * *(unsigned int *)(v3 + 8);
LABEL_6:
    v5 += v4;
  }
LABEL_7:
  v6 = a1[1];
  if (!*(_QWORD *)&v6)
    return 0;
  v7 = (uint8x8_t)vcnt_s8(v6);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v5;
    if (v5 >= *(_QWORD *)&v6)
      v9 = v5 % *(_QWORD *)&v6;
  }
  else
  {
    v9 = (*(_QWORD *)&v6 - 1) & v5;
  }
  v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = (_QWORD *)*v10;
  if (*v10)
  {
    v12 = (uint64_t)&a1[5];
    do
    {
      v13 = v11[1];
      if (v13 == v5)
      {
        if (fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TupleEqual::operator()(v12, v11[2], *a2))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v6)
            v13 %= *(_QWORD *)&v6;
        }
        else
        {
          v13 &= *(_QWORD *)&v6 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  return v11;
}

BOOL fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TupleEqual::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_DWORD *)a2 == *(_DWORD *)a3
      && *(_DWORD *)(a2 + 4) == *(_DWORD *)(a3 + 4)
      && *(float *)(a2 + 8) == *(float *)(a3 + 8);
}

_QWORD *std::__hash_table<std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,int>,std::__unordered_map_hasher<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,int>,fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TupleKey,fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TupleEqual,false>,std::__unordered_map_equal<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,int>,fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TupleEqual,fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TupleKey,true>,std::allocator<std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,int>>>::__emplace_unique_key_args<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const*,std::piecewise_construct_t const&,std::tuple<fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Tuple const* const&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  _QWORD *v15;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v8 = *a2;
  v9 = *(int *)*a2;
  if (!*(_BYTE *)(a1 + 36))
  {
    if (!*(_BYTE *)(a1 + 37))
    {
      v10 = *(int *)*a2;
      goto LABEL_7;
    }
    v10 = 7867 * *(unsigned int *)(v8 + 8);
    goto LABEL_6;
  }
  v10 = v9 + 7853 * *(int *)(v8 + 4);
  if (*(_BYTE *)(a1 + 37))
  {
    v9 = 7867 * *(unsigned int *)(v8 + 8);
LABEL_6:
    v10 += v9;
  }
LABEL_7:
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        do
        {
          v16 = v15[1];
          if (v16 == v10)
          {
            if (fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TupleEqual::operator()(a1 + 40, v15[2], *a2))
            {
              return v15;
            }
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11)
                v16 %= v11;
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
  v15 = operator new(0x20uLL);
  *v15 = 0;
  v15[1] = v10;
  v15[2] = **a4;
  *((_DWORD *)v15 + 6) = 0;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 40);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *v15 = *v24;
LABEL_45:
    *v24 = v15;
    goto LABEL_46;
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v23 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    v25 = *(_QWORD *)(*v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11)
        v25 %= v11;
    }
    else
    {
      v25 &= v11 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_45;
  }
LABEL_46:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_1AD9DFB1C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void fst::MergeStates<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  std::vector<int>::pointer begin;
  unint64_t v10;
  unsigned int *v11;
  int v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  std::vector<int> v16;

  std::vector<int>::vector(&v16, (int)((uint64_t)(a1[5] - a1[4]) >> 3));
  v5 = a1[4];
  v4 = a1[5];
  v6 = v4 - v5;
  if (((unint64_t)(v4 - v5) >> 3))
  {
    v7 = 0;
    v8 = (int)(v6 >> 3);
    begin = v16.__begin_;
    if (v8 <= 1)
      v8 = 1;
    do
    {
      *begin++ = **(_DWORD **)(v5 + (v7 >> 29));
      v7 += 0x100000000;
      --v8;
    }
    while (v8);
  }
  if ((v6 & 0x7FFFFFFF8) != 0)
  {
    v10 = 0;
    do
    {
      v11 = *(unsigned int **)(v5 + 8 * (int)v10);
      if (v11)
      {
        do
        {
          v12 = *v11;
          (*(void (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)a2 + 296))(a2, *v11, &v15);
          while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
          {
            v14 = *(_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
            HIDWORD(v14) = v16.__begin_[*(int *)(a1[10] + 4 * SHIDWORD(v14))];
            if (v12 == v16.__begin_[v10])
              (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v15 + 88))(v15, &v14);
            else
              (*(void (**)(uint64_t))(*(_QWORD *)a2 + 208))(a2);
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
          }
          if (v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
          v11 = (unsigned int *)*((_QWORD *)v11 + 1);
        }
        while (v11);
        v5 = a1[4];
        v4 = a1[5];
      }
      ++v10;
    }
    while (v10 < (int)((unint64_t)(v4 - v5) >> 3));
  }
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 176))(a2, v16.__begin_[*(int *)(a1[10] + 4 * v13)]);
  fst::Connect<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a2);
  if (v16.__begin_)
  {
    v16.__end_ = v16.__begin_;
    operator delete(v16.__begin_);
  }
}

void sub_1AD9DFD04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::AcyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AcyclicMinimizer(uint64_t a1, _QWORD *a2)
{
  BOOL v4;

  v4 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a2 + 64))(a2, 0x40000, 1) == 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = v4;
  if (!(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a2 + 64))(a2, 0x40000, 1))
    FstCheck(1, "Weight::Properties() & kIdempotent", "../libquasar/libkaldi/tools/openfst/src/include/fst/minimize.h");
  fst::AcyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Initialize((_QWORD *)a1, (uint64_t)a2);
  fst::AcyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Refine((_QWORD *)a1, a2);
  return a1;
}

void sub_1AD9DFE0C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  fst::Partition<int>::~Partition(v1);
  _Unwind_Resume(a1);
}

void fst::AcyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Initialize(_QWORD *a1, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;

  v12 = 0;
  v10 = 0u;
  v11 = 0u;
  fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AcyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::HeightVisitor,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a2, (uint64_t)&v10, 0);
  fst::Partition<int>::Initialize((uint64_t)a1, v12);
  fst::Partition<int>::AllocateClasses((uint64_t)a1, DWORD2(v11) + 1);
  v3 = (_DWORD *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1) != (_QWORD)v10)
  {
    v4 = 0;
    v5 = 0;
    v3 = (_DWORD *)v10;
    do
    {
      v6 = v3[v5];
      v7 = *(_QWORD *)(a1[1] + (v4 >> 29));
      v8 = a1[4];
      v9 = *(_QWORD *)(v8 + 8 * v6);
      if (v9)
      {
        *(_QWORD *)(v9 + 16) = v7;
        v9 = *(_QWORD *)(v8 + 8 * v6);
      }
      *(_QWORD *)(v7 + 8) = v9;
      *(_QWORD *)(v7 + 16) = 0;
      *(_QWORD *)(v8 + 8 * v6) = v7;
      *(_DWORD *)(a1[10] + 4 * (v4 >> 32)) = v6;
      ++*(_DWORD *)(a1[13] + 4 * v6);
      ++v5;
      v3 = (_DWORD *)v10;
      v4 += 0x100000000;
    }
    while (v5 < (uint64_t)(*((_QWORD *)&v10 + 1) - v10) >> 2);
  }
  if (v3)
  {
    *((_QWORD *)&v10 + 1) = v3;
    operator delete(v3);
  }
}

void sub_1AD9DFF0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::AcyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Refine(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t *v16;
  _QWORD *v17[4];
  int v18;
  unsigned int *v19;

  v2 = a1[5] - a1[4];
  if (((unint64_t)v2 >> 3))
  {
    v5 = 0;
    v6 = (int)(v2 >> 3);
    if (v6 <= 1)
      v7 = 1;
    else
      v7 = v6;
    do
    {
      v17[0] = 0;
      v17[1] = 0;
      v17[2] = a2;
      v17[3] = a1;
      v18 = 7;
      v16 = (uint64_t *)v17;
      v8 = *(_QWORD *)(a1[4] + 8 * (int)v5);
      v15 = *(_DWORD *)v8;
      v19 = (unsigned int *)&v15;
      *((_DWORD *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(&v16, (unsigned int *)&v15, (uint64_t)&std::piecewise_construct, &v19)+ 8) = v5;
      for (i = *(_QWORD *)(v8 + 8); i; i = *(_QWORD *)(i + 8))
      {
        v15 = 0;
        v15 = *(_DWORD *)i;
        v10 = std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::find<int>((uint64_t)&v16, (unsigned int *)&v15);
        if (v17 == (_QWORD **)v10)
          v11 = fst::Partition<int>::AddClass((uint64_t)a1);
        else
          v11 = *(_DWORD *)(v10 + 32);
        v19 = (unsigned int *)&v15;
        *((_DWORD *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(&v16, (unsigned int *)&v15, (uint64_t)&std::piecewise_construct, &v19)+ 8) = v11;
      }
      v12 = *(_QWORD *)(a1[4] + 8 * (int)v5);
      while (v12)
      {
        v15 = 0;
        v15 = *(_DWORD *)v12;
        v13 = *(_DWORD *)(a1[10] + 4 * v15);
        v19 = (unsigned int *)&v15;
        v14 = *((_DWORD *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(&v16, (unsigned int *)&v15, (uint64_t)&std::piecewise_construct, &v19)+ 8);
        v12 = *(_QWORD *)(v12 + 8);
        if (v13 != v14)
          fst::Partition<int>::Move(a1, v15, v14);
      }
      std::__tree<int>::destroy((uint64_t)&v16, v17[0]);
      ++v5;
    }
    while (v5 != v7);
  }
}

void sub_1AD9E00EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  std::__tree<int>::destroy((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void fst::Partition<int>::Initialize(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::vector<int>::value_type __x;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = (_QWORD *)(a1 + 8);
  if (v5 == v4)
  {
    v4 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(v4 + 8 * v7);
      if (v8)
      {
        MEMORY[0x1AF44D190](v8, 0x1020C40F89CB87BLL);
        v4 = *(_QWORD *)(a1 + 8);
        v5 = *(_QWORD *)(a1 + 16);
      }
      ++v7;
    }
    while (v7 < (v5 - v4) >> 3);
  }
  v9 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 88) = v9;
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v6, a2);
  __x = -1;
  std::vector<int>::resize((std::vector<int> *)(a1 + 80), a2, &__x);
  std::vector<int>::reserve((std::vector<unsigned int> *)(a1 + 104), a2);
  if (a2)
  {
    v10 = 0;
    do
    {
      v11 = operator new();
      *(_DWORD *)v11 = v10;
      *(_QWORD *)(v11 + 8) = 0;
      *(_QWORD *)(v11 + 16) = 0;
      *(_QWORD *)(*v6 + 8 * v10++) = v11;
    }
    while (a2 != v10);
  }
  *(_DWORD *)a1 = a2;
}

void fst::Partition<int>::AllocateClasses(uint64_t a1, int a2)
{
  std::vector<int> *v2;
  unint64_t v3;
  std::vector<int>::value_type __x[2];

  v2 = (std::vector<int> *)(a1 + 32);
  v3 = ((uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3) + a2;
  *(_QWORD *)__x = 0;
  std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize(a1 + 32, v3, __x);
  __x[0] = 0;
  std::vector<int>::resize(v2 + 3, v3, __x);
  *(_QWORD *)__x = 0;
  std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize((uint64_t)&v2[1], v3, __x);
  __x[0] = 0;
  std::vector<int>::resize(v2 + 4, v3, __x);
}

void fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AcyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::HeightVisitor,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char inited;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::vector<char>::pointer begin;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  int v36;
  std::vector<char>::pointer end;
  char *v38;
  std::vector<char>::pointer v39;
  int64_t v40;
  int64_t v41;
  unint64_t v42;
  size_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char v48;
  char v49;
  uint64_t v50;
  int v51;
  std::vector<char>::value_type v52[8];
  std::vector<char>::value_type __x[8];
  int v54;
  int v55;
  void *v56;
  _QWORD v57[6];
  _QWORD *v58;
  _OWORD v59[2];
  __int128 v60;
  std::vector<char> v61;

  v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v51 == -1)
    return;
  memset(&v61, 0, sizeof(v61));
  v60 = 0u;
  memset(v59, 0, sizeof(v59));
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MemoryPool(&v56, 64);
  v50 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v50)
    v6 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v6 = (v51 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v6 <= (std::vector<char>::pointer)(v61.__end_ - v61.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v6 < (std::vector<char>::pointer)(v61.__end_ - v61.__begin_))
      v61.__end_ = &v61.__begin_[(int)v6];
  }
  else
  {
    std::vector<char>::__append(&v61, (int)v6 - (unint64_t)(v61.__end_ - v61.__begin_), __x);
  }
  v55 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v51 >= (int)v6)
    goto LABEL_107;
  v7 = v51;
  v49 = a3;
  do
  {
    v61.__begin_[(int)v7] = 1;
    v8 = (uint64_t)v58;
    if (v58)
    {
      v58 = (_QWORD *)v58[6];
    }
    else
    {
      v8 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v57, 1);
      *(_QWORD *)(v8 + 48) = 0;
    }
    *(_DWORD *)v8 = v7;
    *(_QWORD *)(v8 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v7, v8 + 8);
    *(_QWORD *)v52 = v8;
    std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>::push_back(v59, v52);
    inited = fst::AcyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::HeightVisitor::InitState((char **)a2, v7);
LABEL_15:
    v10 = inited;
    while (*((_QWORD *)&v60 + 1))
    {
      v11 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v59[0] + 1)
                                   + (((unint64_t)(*((_QWORD *)&v60 + 1) + v60 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((*((_QWORD *)&v60 + 1) + v60 - 1) & 0x1FF));
      v12 = *(int *)v11;
      v13 = v61.__end_ - v61.__begin_;
      if (v61.__end_ - v61.__begin_ <= v12)
      {
        v6 = (v12 + 1);
        v52[0] = 0;
        if ((int)v6 <= v13)
        {
          if ((int)v6 < v13)
            v61.__end_ = &v61.__begin_[(int)v6];
        }
        else
        {
          std::vector<char>::__append(&v61, (int)v6 - v13, v52);
        }
      }
      if ((v10 & 1) == 0)
        goto LABEL_32;
      v14 = v11[1];
      if (!v14)
      {
        if (v11[5] < v11[3])
          goto LABEL_28;
        goto LABEL_32;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
      {
LABEL_32:
        v61.__begin_[v12] = 2;
        v20 = v11[1];
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        }
        else
        {
          v21 = (_DWORD *)v11[4];
          if (v21)
            --*v21;
        }
        v11[6] = v58;
        v58 = v11;
        --*((_QWORD *)&v60 + 1);
        std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v59, 1);
        if (*((_QWORD *)&v60 + 1))
        {
          v22 = *(unsigned int **)(*(_QWORD *)(*((_QWORD *)&v59[0] + 1)
                                             + (((unint64_t)(*((_QWORD *)&v60 + 1) + v60 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                 + 8 * ((*((_QWORD *)&v60 + 1) + v60 - 1) & 0x1FF));
          v23 = *v22;
          v24 = *((_QWORD *)v22 + 1);
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
          v25 = *(char **)a2;
          v26 = *(_DWORD *)(*(_QWORD *)a2 + 4 * v12);
          if (v26 == -1)
          {
            v26 = 0;
            *(_DWORD *)&v25[4 * v12] = 0;
            if ((v23 & 0x80000000) != 0)
              goto LABEL_49;
          }
          else if ((v23 & 0x80000000) != 0)
          {
            goto LABEL_49;
          }
          v27 = v26 + 1;
          if (v26 >= *(_DWORD *)&v25[4 * v23])
            *(_DWORD *)&v25[4 * v23] = v27;
          if (*(_QWORD *)(a2 + 24) < (unint64_t)v27)
            *(_QWORD *)(a2 + 24) = v27;
LABEL_49:
          v28 = *((_QWORD *)v22 + 1);
          if (v28)
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
          else
            ++*((_QWORD *)v22 + 5);
        }
        else if (*(_DWORD *)(*(_QWORD *)a2 + 4 * v12) == -1)
        {
          *(_DWORD *)(*(_QWORD *)a2 + 4 * v12) = 0;
        }
      }
      else
      {
        v15 = v11[1];
        if (v15)
        {
          v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
          goto LABEL_29;
        }
LABEL_28:
        v16 = v11[2] + 16 * v11[5];
LABEL_29:
        v17 = *(int *)(v16 + 12);
        begin = v61.__begin_;
        v19 = v61.__end_ - v61.__begin_;
        if (v61.__end_ - v61.__begin_ <= v17)
        {
          v6 = (v17 + 1);
          v52[0] = 0;
          if ((int)v6 <= v19)
          {
            if ((int)v6 < v19)
              v61.__end_ = &v61.__begin_[(int)v6];
          }
          else
          {
            std::vector<char>::__append(&v61, (int)v6 - v19, v52);
            v17 = *(int *)(v16 + 12);
            begin = v61.__begin_;
          }
        }
        v29 = begin[v17];
        if (v29 != 1)
        {
          if (v29 != 2)
          {
            begin[v17] = 1;
            v32 = (uint64_t)v58;
            if (v58)
            {
              v58 = (_QWORD *)v58[6];
            }
            else
            {
              v32 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v57, 1);
              *(_QWORD *)(v32 + 48) = 0;
            }
            *(_DWORD *)v32 = *(_DWORD *)(v16 + 12);
            *(_QWORD *)(v32 + 40) = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
            *(_QWORD *)v52 = v32;
            std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>::push_back(v59, v52);
            inited = fst::AcyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::HeightVisitor::InitState((char **)a2, *(_DWORD *)(v16 + 12));
            goto LABEL_15;
          }
          v30 = *(_DWORD *)(*(_QWORD *)a2 + 4 * v17);
          if (v30 >= *(_DWORD *)(*(_QWORD *)a2 + 4 * v12))
            *(_DWORD *)(*(_QWORD *)a2 + 4 * v12) = v30 + 1;
        }
        v31 = v11[1];
        if (v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
        else
          ++v11[5];
        v10 = 1;
      }
    }
    if ((a3 & 1) != 0)
      break;
    if ((_DWORD)v7 == v51)
      v7 = 0;
    else
      v7 = (v7 + 1);
    if ((int)v7 < (int)v6)
    {
      v33 = &v61.__begin_[(int)v7];
      v34 = (int)v6 - (uint64_t)(int)v7;
      while (*v33++)
      {
        v7 = (v7 + 1);
        if (!--v34)
        {
          v7 = v6;
          break;
        }
      }
    }
    if (v50 || (_DWORD)v7 != (_DWORD)v6)
      continue;
LABEL_77:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v36 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_83;
      }
    }
    else if (v55 >= v54)
    {
      continue;
    }
    v36 = v55;
LABEL_83:
    if (v36 != (_DWORD)v6)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v55;
      goto LABEL_77;
    }
    end = v61.__end_;
    if (v61.__end_ >= v61.__end_cap_.__value_)
    {
      v39 = v61.__begin_;
      v40 = v61.__end_ - v61.__begin_;
      v41 = v61.__end_ - v61.__begin_ + 1;
      if (v41 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v42 = v61.__end_cap_.__value_ - v61.__begin_;
      if (2 * (v61.__end_cap_.__value_ - v61.__begin_) > (unint64_t)v41)
        v41 = 2 * v42;
      if (v42 >= 0x3FFFFFFFFFFFFFFFLL)
        v43 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v43 = v41;
      if (v43)
        v44 = (char *)operator new(v43);
      else
        v44 = 0;
      v45 = &v44[v40];
      v46 = &v44[v40];
      *v46 = 0;
      v38 = v46 + 1;
      if (end != v39)
      {
        v47 = &end[~(unint64_t)v39];
        do
        {
          v48 = *--end;
          (v47--)[(_QWORD)v44] = v48;
        }
        while (end != v39);
        end = v61.__begin_;
        v45 = v44;
      }
      v61.__begin_ = v45;
      v61.__end_ = v38;
      v61.__end_cap_.__value_ = &v44[v43];
      a3 = v49;
      if (end)
        operator delete(end);
    }
    else
    {
      *v61.__end_ = 0;
      v38 = end + 1;
    }
    v61.__end_ = v38;
    v6 = (v6 + 1);
  }
  while ((v10 & 1) != 0 && (int)v7 < (int)v6);
LABEL_107:
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v56 = &unk_1E5D198C8;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Link>::~MemoryArena(v57);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v56);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v59);
  if (v61.__begin_)
  {
    v61.__end_ = v61.__begin_;
    operator delete(v61.__begin_);
  }
}

void sub_1AD9E0930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D198C8;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::AcyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::HeightVisitor::InitState(char **a1, int a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int v16;

  v4 = a1[1];
  v5 = (v4 - *a1) >> 2;
  v6 = a2;
  if (v5 <= a2)
  {
    v7 = a1 + 2;
    do
    {
      if ((unint64_t)v4 >= *v7)
      {
        v9 = *a1;
        v10 = (v4 - *a1) >> 2;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v12 = *v7 - (_QWORD)v9;
        if (v12 >> 1 > v11)
          v11 = v12 >> 1;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
          v13 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
        {
          v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 2), v13);
          v9 = *a1;
          v4 = a1[1];
        }
        else
        {
          v14 = 0;
        }
        v15 = &v14[4 * v10];
        *(_DWORD *)v15 = -1;
        v8 = v15 + 4;
        while (v4 != v9)
        {
          v16 = *((_DWORD *)v4 - 1);
          v4 -= 4;
          *((_DWORD *)v15 - 1) = v16;
          v15 -= 4;
        }
        *a1 = v15;
        a1[1] = v8;
        a1[2] = &v14[4 * v13];
        if (v9)
          operator delete(v9);
      }
      else
      {
        *(_DWORD *)v4 = -1;
        v8 = v4 + 4;
      }
      a1[1] = v8;
      ++v5;
      v4 = v8;
    }
    while (v5 <= v6);
  }
  if ((unint64_t)a1[4] <= v6)
    a1[4] = (char *)(a2 + 1);
  return 1;
}

uint64_t fst::Partition<int>::AddClass(uint64_t a1)
{
  std::vector<int> *v1;
  uint64_t v2;
  std::vector<int>::value_type __x[2];

  v1 = (std::vector<int> *)(a1 + 32);
  v2 = (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3;
  *(_QWORD *)__x = 0;
  std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize(a1 + 32, v2 + 1, __x);
  __x[0] = 0;
  std::vector<int>::resize(v1 + 3, v2 + 1, __x);
  *(_QWORD *)__x = 0;
  std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize((uint64_t)&v1[1], v2 + 1, __x);
  __x[0] = 0;
  std::vector<int>::resize(v1 + 4, v2 + 1, __x);
  return v2;
}

_QWORD *fst::Partition<int>::Move(_QWORD *result, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(int *)(result[10] + 4 * a2);
  v4 = result[1];
  v5 = *(_QWORD *)(v4 + 8 * a2);
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
    *(_QWORD *)(v6 + 16) = *(_QWORD *)(v5 + 16);
  v7 = *(_QWORD *)(v5 + 16);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = v6;
  }
  else
  {
    *(_QWORD *)(result[4] + 8 * v3) = v6;
    v4 = result[1];
  }
  v8 = *(_QWORD *)(v4 + 8 * a2);
  v9 = result[4];
  v10 = *(_QWORD *)(v9 + 8 * a3);
  if (v10)
  {
    *(_QWORD *)(v10 + 16) = v8;
    v10 = *(_QWORD *)(v9 + 8 * a3);
  }
  *(_QWORD *)(v8 + 8) = v10;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v9 + 8 * a3) = v8;
  *(_DWORD *)(result[10] + 4 * a2) = a3;
  v11 = result[13];
  ++*(_DWORD *)(v11 + 4 * a3);
  --*(_DWORD *)(v11 + 4 * v3);
  return result;
}

uint64_t *std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, unsigned int **a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::__find_equal<int>((uint64_t)a1, &v10, a2);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = **a4;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::__find_equal<int>(uint64_t a1, _QWORD *a2, unsigned int *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v7;
  uint64_t *v8;

  v5 = (uint64_t *)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v7 = (_QWORD *)(a1 + 24);
    do
    {
      while (1)
      {
        v8 = v4;
        if (!fst::StateComparator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::operator()(v7, *a3, *((unsigned int *)v4 + 7)))break;
        v4 = (uint64_t *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!fst::StateComparator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::operator()(v7, *((unsigned int *)v8 + 7), *a3))break;
      v5 = v8 + 1;
      v4 = (uint64_t *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (uint64_t *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t fst::StateComparator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::operator()(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  int v15;
  float v16;
  float v17;
  uint64_t v18;
  char v19;
  _QWORD v21[3];
  _DWORD *v22;
  unint64_t v23;
  _QWORD v24[3];
  _DWORD *v25;
  unint64_t v26;

  v6 = *((_DWORD *)a1 + 4);
  if ((v6 & 1) != 0)
  {
    v16 = (*(float (**)(void))(*(_QWORD *)*a1 + 32))();
    v17 = (*(float (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, a3);
    if (LODWORD(v16) < LODWORD(v17))
      return 1;
    if (LODWORD(v16) <= LODWORD(v17) && (a1[2] & 2) != 0)
      goto LABEL_3;
    return 0;
  }
  if ((v6 & 2) == 0)
    return 0;
LABEL_3:
  v7 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, a2);
  if (v7 < (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, a3))
    return 1;
  v8 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, a2);
  if (v8 > (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, a3) || (a1[2] & 4) == 0)
    return 0;
  v9 = *a1;
  v26 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v9 + 136))(v9, a2, v24);
  v10 = *a1;
  v23 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v10 + 136))(v10, a3, v21);
  while (1)
  {
    if (v24[0])
    {
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v24[0] + 24))(v24[0]) & 1) != 0)
        goto LABEL_36;
    }
    else if (v26 >= v24[2])
    {
      goto LABEL_36;
    }
    if (v21[0])
    {
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v21[0] + 24))(v21[0]) & 1) != 0)
        goto LABEL_36;
    }
    else if (v23 >= v21[2])
    {
LABEL_36:
      v18 = 0;
      v19 = 1;
      goto LABEL_39;
    }
    if (v24[0])
      v11 = (_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v24[0] + 32))(v24[0]);
    else
      v11 = (_DWORD *)(v24[1] + 16 * v26);
    if (v21[0])
      v12 = (_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v21[0] + 32))(v21[0]);
    else
      v12 = (_DWORD *)(v21[1] + 16 * v23);
    if (*v11 < *v12)
      goto LABEL_37;
    if (*v11 > *v12)
      break;
    v13 = *(_QWORD *)(a1[1] + 80);
    v14 = *(_DWORD *)(v13 + 4 * (int)v11[3]);
    v15 = *(_DWORD *)(v13 + 4 * (int)v12[3]);
    if (v14 < v15)
    {
LABEL_37:
      v19 = 0;
      v18 = 1;
      goto LABEL_39;
    }
    if (v14 > v15)
      break;
    if (v24[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v24[0] + 40))(v24[0]);
    else
      ++v26;
    if (v21[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v21[0] + 40))(v21[0]);
    else
      ++v23;
  }
  v19 = 0;
  v18 = 0;
LABEL_39:
  if (v21[0])
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v21[0] + 8))(v21[0]);
  }
  else if (v22)
  {
    --*v22;
  }
  if (v24[0])
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v24[0] + 8))(v24[0]);
  }
  else if (v25)
  {
    --*v25;
  }
  if ((v19 & 1) != 0)
    return 0;
  return v18;
}

void sub_1AD9E1024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _DWORD *a17)
{
  if (a14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  }
  else if (a17)
  {
    --*a17;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::find<int>(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 24);
  v6 = a1 + 8;
  do
  {
    v7 = fst::StateComparator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::operator()(v5, *(unsigned int *)(v3 + 28), *a2);
    v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2
    || fst::StateComparator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::operator()(v5, *a2, *(unsigned int *)(v6 + 28)))
  {
    return v2;
  }
  return v6;
}

_QWORD *fst::Partition<int>::~Partition(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 != v3)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v3 + 8 * v4);
      if (v5)
      {
        MEMORY[0x1AF44D190](v5, 0x1020C40F89CB87BLL);
        v3 = a1[1];
        v2 = a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  v6 = (void *)a1[19];
  if (v6)
  {
    a1[20] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[16];
  if (v7)
  {
    a1[17] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[13];
  if (v8)
  {
    a1[14] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[10];
  if (v9)
  {
    a1[11] = v9;
    operator delete(v9);
  }
  v10 = (void *)a1[7];
  if (v10)
  {
    a1[8] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[4];
  if (v11)
  {
    a1[5] = v11;
    operator delete(v11);
  }
  v12 = (void *)a1[1];
  if (v12)
  {
    a1[2] = v12;
    operator delete(v12);
  }
  return a1;
}

uint64_t fst::CyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LifoQueue<int>>::CyclicMinimizer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x40000, 1);
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = v4 == 0;
  *(_DWORD *)(a1 + 192) = 2;
  *(_BYTE *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 184) = &unk_1E5D27B60;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::VectorFst((_QWORD *)(a1 + 248));
  if (!(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x40000, 1))
    FstCheck(1, "Weight::Properties() & kIdempotent", "../libquasar/libkaldi/tools/openfst/src/include/fst/minimize.h");
  fst::CyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LifoQueue<int>>::Initialize((_QWORD *)a1, a2);
  fst::CyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LifoQueue<int>>::Compute((_QWORD *)a1);
  return a1;
}

void sub_1AD9E12E0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  std::deque<int>::~deque[abi:ne180100](v2);
  fst::Partition<int>::~Partition(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::CyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LifoQueue<int>>::Initialize(_QWORD *a1, uint64_t a2)
{
  void *v4;
  _QWORD *result;

  v4 = a1 + 31;
  fst::Reverse<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a2, a1 + 31, 1);
  fst::ArcSort<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v4);
  fst::Partition<int>::Initialize((uint64_t)a1, (((*(_QWORD *)(a1[32] + 72) - *(_QWORD *)(a1[32] + 64)) << 29) - 0x100000000) >> 32);
  fst::CyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LifoQueue<int>>::PrePartition(a1, a2);
  result = (_QWORD *)operator new();
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  result[3] = a1;
  a1[33] = result;
  return result;
}

void fst::CyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LifoQueue<int>>::Compute(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  v1 = a1[30];
  if (v1)
  {
    v3 = (uint64_t)(a1 + 25);
    do
    {
      v4 = *(_DWORD *)(*(_QWORD *)(a1[26] + ((a1[29] >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (a1[29] & 0x3FFLL));
      ++a1[29];
      a1[30] = v1 - 1;
      std::deque<int>::__maybe_remove_front_spare[abi:ne180100](v3, 1);
      fst::CyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LifoQueue<int>>::Split(a1, v4);
      v1 = a1[30];
    }
    while (v1);
  }
}

void fst::ArcSort<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(void *a1)
{
  void *v1[2];
  void *__p[2];
  __int128 v3;
  char v4;

  v1[0] = a1;
  v1[1] = &v4;
  *(_OWORD *)__p = 0u;
  v3 = 0u;
  fst::StateMap<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ArcSortMapper<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>((uint64_t)a1, v1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1AD9E1490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::CyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LifoQueue<int>>::PrePartition(_QWORD *a1, uint64_t a2)
{
  fst *v4;
  _QWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  fst *v27;
  _QWORD *v28;
  void *v29[2];
  char v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  void *__p;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  int v40;

  if (FLAGS_v >= 5)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "INFO");
    v4 = fst::LogMessage::LogMessage((fst *)&v32, (uint64_t)&__p);
    v5 = (_QWORD *)fst::cerr(v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"PrePartition", 12);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v32);
    if (SHIBYTE(v37) < 0)
      operator delete(__p);
  }
  v37 = 0;
  v38 = a2;
  v39 = a1;
  v40 = 1;
  __p = &v36;
  v36 = 0;
  v34 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v32);
  v6 = fst::Partition<int>::AddClass((uint64_t)a1);
  if (v32)
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
  else
    v7 = v34;
  v8 = *(_QWORD *)(a1[1] + 8 * v7);
  v9 = a1[4];
  v10 = *(_QWORD *)(v9 + 8 * v6);
  if (v10)
  {
    *(_QWORD *)(v10 + 16) = v8;
    v10 = *(_QWORD *)(v9 + 8 * v6);
  }
  *(_QWORD *)(v8 + 8) = v10;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v9 + 8 * v6) = v8;
  *(_DWORD *)(a1[10] + 4 * v7) = v6;
  ++*(_DWORD *)(a1[13] + 4 * v6);
  if (v32)
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
  else
    v11 = v34;
  v31 = v11;
  v29[0] = &v31;
  *((_DWORD *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t **)&__p, (unsigned int *)&v31, (uint64_t)&std::piecewise_construct, (unsigned int **)v29)+ 8) = v6;
  LODWORD(v29[0]) = v6;
  std::deque<int>::push_front((uint64_t)(a1 + 25), v29);
  v12 = v32;
  if (v32)
    goto LABEL_28;
  ++v34;
  while (v32)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32) & 1) != 0)
      goto LABEL_30;
    v31 = 0;
    if (!v32)
      goto LABEL_19;
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
LABEL_20:
    v31 = v13;
    v14 = std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::find<int>((uint64_t)&__p, (unsigned int *)&v31);
    if (&v36 == (_QWORD **)v14)
    {
      v21 = fst::Partition<int>::AddClass((uint64_t)a1);
      v22 = v21;
      v23 = v31;
      v24 = *(_QWORD *)(a1[1] + 8 * v31);
      v25 = a1[4];
      v26 = *(_QWORD *)(v25 + 8 * v21);
      if (v26)
      {
        *(_QWORD *)(v26 + 16) = v24;
        v26 = *(_QWORD *)(v25 + 8 * v21);
      }
      *(_QWORD *)(v24 + 8) = v26;
      *(_QWORD *)(v24 + 16) = 0;
      *(_QWORD *)(v25 + 8 * v21) = v24;
      *(_DWORD *)(a1[10] + 4 * v23) = v21;
      ++*(_DWORD *)(a1[13] + 4 * v21);
      v29[0] = &v31;
      *((_DWORD *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t **)&__p, (unsigned int *)&v31, (uint64_t)&std::piecewise_construct, (unsigned int **)v29)+ 8) = v21;
      LODWORD(v29[0]) = v22;
      std::deque<int>::push_front((uint64_t)(a1 + 25), v29);
    }
    else
    {
      v15 = v31;
      v16 = *(_DWORD *)(v14 + 32);
      v17 = *(_QWORD *)(a1[1] + 8 * v31);
      v18 = a1[4];
      v19 = *(_QWORD *)(v18 + 8 * v16);
      if (v19)
      {
        *(_QWORD *)(v19 + 16) = v17;
        v19 = *(_QWORD *)(v18 + 8 * v16);
      }
      *(_QWORD *)(v17 + 8) = v19;
      *(_QWORD *)(v17 + 16) = 0;
      *(_QWORD *)(v18 + 8 * v16) = v17;
      *(_DWORD *)(a1[10] + 4 * v15) = v16;
      ++*(_DWORD *)(a1[13] + 4 * v16);
      v20 = *(_DWORD *)(v14 + 32);
      v29[0] = &v31;
      *((_DWORD *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t **)&__p, (unsigned int *)&v31, (uint64_t)&std::piecewise_construct, (unsigned int **)v29)+ 8) = v20;
    }
    v12 = v32;
    if (v32)
LABEL_28:
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 32))(v12);
    else
      ++v34;
  }
  if (v34 < v33)
  {
LABEL_19:
    v13 = v34;
    goto LABEL_20;
  }
LABEL_30:
  if (FLAGS_v >= 5)
  {
    std::string::basic_string[abi:ne180100]<0>(v29, "INFO");
    v27 = fst::LogMessage::LogMessage((fst *)&v31, (uint64_t)v29);
    v28 = (_QWORD *)fst::cerr(v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Initial Partition: ", 19);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v31);
    if (v30 < 0)
      operator delete(v29[0]);
  }
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  std::__tree<int>::destroy((uint64_t)&__p, v36);
}

void sub_1AD9E1878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,_QWORD *a21,int a22,__int16 a23,char a24,char a25)
{
  if (a14 < 0)
    operator delete(__p);
  if (a17)
    (*(void (**)(uint64_t))(*(_QWORD *)a17 + 8))(a17);
  std::__tree<int>::destroy((uint64_t)&a20, a21);
  _Unwind_Resume(a1);
}

uint64_t fst::StateMap<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ArcSortMapper<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(uint64_t a1, void **a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  _BYTE *v9;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result != -1)
  {
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    v6 = (*(uint64_t (**)(void *))(*(_QWORD *)*a2 + 24))(*a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 176))(a1, v6);
    if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1) >= 1)
    {
      v7 = 0;
      do
      {
        fst::ArcSortMapper<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(a1, v7);
        for (i = (unint64_t)a2[5]; ; a2[5] = (void *)i)
        {
          v9 = a2[2];
          if (i >= ((_BYTE *)a2[3] - v9) >> 4)
            break;
          (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 208))(a1, v7, &v9[16 * i]);
          i = (unint64_t)a2[5] + 1;
        }
        (*(void (**)(void *, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 184))(a1, v7);
        v7 = (v7 + 1);
      }
      while ((int)v7 < (*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1));
    }
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v5 & 0x3FFF0FFF0007 | (((v5 >> 16) & 1) << 30) | 0x10000000, 0x3FFFFFFF0007);
  }
  return result;
}

void fst::ArcSortMapper<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(void **a1, uint64_t a2)
{
  void **v4;
  unint64_t v5;
  void *v6;
  _OWORD *v7;
  unint64_t v8;
  char *v9;
  _OWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __n128 *v20;
  __int128 *v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[3];
  _DWORD *v25;
  unint64_t v26;

  a1[5] = 0;
  v4 = a1 + 2;
  a1[3] = a1[2];
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)*a1 + 40))(*a1);
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::reserve(v4, v5);
  v6 = *a1;
  v26 = 0;
  (*(void (**)(void *, uint64_t, _QWORD *))(*(_QWORD *)v6 + 136))(v6, a2, v24);
  while (1)
  {
    if (!v24[0])
    {
      if (v26 >= v24[2])
        goto LABEL_29;
      goto LABEL_7;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v24[0] + 24))(v24[0]))
      break;
    if (v24[0])
    {
      v7 = (_OWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v24[0] + 32))();
      goto LABEL_8;
    }
LABEL_7:
    v7 = (_OWORD *)(v24[1] + 16 * v26);
LABEL_8:
    v9 = (char *)a1[3];
    v8 = (unint64_t)a1[4];
    if ((unint64_t)v9 >= v8)
    {
      v11 = (v9 - (_BYTE *)*v4) >> 4;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 60)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v13 = v8 - (_QWORD)*v4;
      if (v13 >> 3 > v12)
        v12 = v13 >> 3;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
        v14 = 0xFFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a1 + 4), v14);
      else
        v15 = 0;
      v16 = &v15[16 * v11];
      *(_OWORD *)v16 = *v7;
      v18 = (char *)a1[2];
      v17 = (char *)a1[3];
      v19 = v16;
      if (v17 != v18)
      {
        do
        {
          *((_OWORD *)v19 - 1) = *((_OWORD *)v17 - 1);
          v19 -= 16;
          v17 -= 16;
        }
        while (v17 != v18);
        v17 = (char *)*v4;
      }
      v10 = v16 + 16;
      a1[2] = v19;
      a1[3] = v16 + 16;
      a1[4] = &v15[16 * v14];
      if (v17)
        operator delete(v17);
    }
    else
    {
      *(_OWORD *)v9 = *v7;
      v10 = v9 + 16;
    }
    a1[3] = v10;
    if (v24[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v24[0] + 40))(v24[0]);
    else
      ++v26;
  }
  if (v24[0])
  {
    (*(void (**)(void))(*(_QWORD *)v24[0] + 8))();
    goto LABEL_31;
  }
LABEL_29:
  if (v25)
    --*v25;
LABEL_31:
  v20 = (__n128 *)a1[2];
  v21 = (__int128 *)a1[3];
  v22 = 126 - 2 * __clz(((char *)v21 - (char *)v20) >> 4);
  if (v21 == (__int128 *)v20)
    v23 = 0;
  else
    v23 = v22;
  std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*,false>(v20, v21, (uint64_t)v24, v23, 1);
}

void sub_1AD9E1CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  }
  else if (a13)
  {
    --*a13;
  }
  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*,false>(__n128 *a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __n128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  __int128 *v16;
  char v17;
  BOOL v18;
  __int128 *v19;
  signed __int32 v20;
  __int128 *v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  int v26;
  __int128 v27;
  __int128 v28;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>(uint64_t a1, __n128 *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  _DWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  int v15;
  _OWORD *v16;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)&a2[-1];
      if ((signed __int32)a2[-1].n128_u32[0] < *(_DWORD *)a1)
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)a1, (int *)(a1 + 16), (int *)&a2[-1]);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)a1, (int *)(a1 + 16), (int *)(a1 + 32), (__n128 *)a2[-1].n128_u64);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)a1, (int *)(a1 + 16), (int *)(a1 + 32), (__n128 *)(a1 + 48), a2 - 1);
      return 1;
    default:
      v8 = (_DWORD *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)a1, (int *)(a1 + 16), (int *)(a1 + 32));
      v9 = (_OWORD *)(a1 + 48);
      if ((__n128 *)(a1 + 48) == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v9;
    if (v13 < *v8)
    {
      v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = *(_DWORD *)(a1 + v14 + 16);
        v14 -= 16;
        if (v13 >= v15)
        {
          v16 = (_OWORD *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      v16 = (_OWORD *)a1;
LABEL_12:
      *v16 = v12;
      if (++v11 == 8)
        return v9 + 1 == (_OWORD *)a2;
    }
    v8 = v9;
    v10 += 16;
    if (++v9 == (_OWORD *)a2)
      return 1;
  }
}

void fst::CyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LifoQueue<int>>::Split(_QWORD *a1, int a2)
{
  int *i;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD **v27;
  _QWORD *v28;
  char v29;
  uint64_t v30;
  _DWORD *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  void **v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void *v50;
  void *v51;

  for (i = *(int **)(a1[4] + 8 * a2); i; i = (int *)*((_QWORD *)i + 1))
  {
    v4 = *i + 1;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[32] + 64) + 8 * v4) + 32) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[32] + 64) + 8 * v4)
                                                                                           + 24))
    {
      v5 = (void **)a1[33];
      v6 = operator new();
      *(_QWORD *)(v6 + 32) = 0;
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[31] + 136))(a1 + 31, v4, v6);
      v7 = (unint64_t)v5[2];
      v8 = (uint64_t *)v5[1];
      if ((unint64_t)v8 >= v7)
      {
        v10 = ((char *)v8 - (_BYTE *)*v5) >> 3;
        if ((unint64_t)(v10 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v11 = v7 - (_QWORD)*v5;
        v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1))
          v12 = v10 + 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
          v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v5 + 2), v13);
        else
          v14 = 0;
        v15 = (uint64_t *)&v14[8 * v10];
        *v15 = v6;
        v9 = (uint64_t)(v15 + 1);
        v17 = (char *)*v5;
        v16 = (char *)v5[1];
        if (v16 != *v5)
        {
          do
          {
            v18 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            *--v15 = v18;
          }
          while (v16 != v17);
          v16 = (char *)*v5;
        }
        *v5 = v15;
        v5[1] = (void *)v9;
        v5[2] = &v14[8 * v13];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *v8 = v6;
        v9 = (uint64_t)(v8 + 1);
      }
      v5[1] = (void *)v9;
      v19 = *v5;
      v51 = v5[3];
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::CyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LifoQueue<int>>::ArcIterCompare &,std::__wrap_iter<fst::ArcIterator<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> **>>((_BOOL8)v19, v9, (uint64_t)&v51, (v9 - (uint64_t)v19) >> 3);
    }
  }
  v20 = a1[33];
  v21 = *(_QWORD **)v20;
  v22 = (_QWORD *)(v20 + 8);
  v23 = *(_QWORD *)(v20 + 8);
  if (*(_QWORD *)v20 != v23)
  {
    v24 = -1;
    while (1)
    {
      v25 = (_QWORD *)*v21;
      v51 = *(void **)(v20 + 24);
      if (v23 - (uint64_t)v21 >= 9)
      {
        v26 = (_QWORD *)*v21;
        v27 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::CyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LifoQueue<int>>::ArcIterCompare &,std::__wrap_iter<fst::ArcIterator<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> **>>(v21, (uint64_t)&v51, (unint64_t)(v23 - (_QWORD)v21) >> 3);
        v28 = (_QWORD *)(v23 - 8);
        if ((_QWORD **)(v23 - 8) == v27)
        {
          *v27 = v26;
        }
        else
        {
          *v27 = (_QWORD *)*v28;
          *v28 = v26;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::CyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LifoQueue<int>>::ArcIterCompare &,std::__wrap_iter<fst::ArcIterator<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> **>>((_BOOL8)v21, (uint64_t)(v27 + 1), (uint64_t)&v51, v27 + 1 - (_QWORD **)v21);
        }
      }
      *v22 -= 8;
      if (!*v25)
        break;
      v29 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v25 + 24))(*v25);
      v30 = *v25;
      if ((v29 & 1) == 0)
      {
        if (v30)
        {
          v32 = (int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 32))(v30);
          if (*v25)
          {
            v33 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v25 + 32))(*v25);
            goto LABEL_40;
          }
        }
        else
        {
LABEL_38:
          v32 = (int *)(v25[1] + 16 * v25[4]);
        }
        v33 = v25[1] + 16 * v25[4];
LABEL_40:
        v34 = *(int *)(v33 + 12);
        v35 = *v32;
        if (v24 != *v32)
          fst::Partition<int>::FinalizeSplit<fst::LifoQueue<int>>((uint64_t)a1, (uint64_t)(a1 + 23));
        if (*(_DWORD *)(a1[13] + 4 * *(int *)(a1[10] + 4 * (v34 - 1))) >= 2u)
          fst::Partition<int>::SplitOn(a1, v34 - 1);
        if (*v25)
        {
          (*(void (**)(_QWORD))(*(_QWORD *)*v25 + 40))(*v25);
          if (*v25)
          {
            if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v25 + 24))(*v25) & 1) != 0)
            {
              if (*v25)
              {
                (*(void (**)(_QWORD))(*(_QWORD *)*v25 + 8))(*v25);
                goto LABEL_55;
              }
LABEL_53:
              v40 = (_DWORD *)v25[3];
              if (v40)
                --*v40;
LABEL_55:
              MEMORY[0x1AF44D190](v25, 0x1070C401ACC3EEFLL);
LABEL_71:
              v24 = v35;
              goto LABEL_72;
            }
LABEL_51:
            v36 = (void **)a1[33];
            v37 = (char *)v36[1];
            v38 = (unint64_t)v36[2];
            if ((unint64_t)v37 >= v38)
            {
              v41 = (v37 - (_BYTE *)*v36) >> 3;
              if ((unint64_t)(v41 + 1) >> 61)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v42 = v38 - (_QWORD)*v36;
              v43 = v42 >> 2;
              if (v42 >> 2 <= (unint64_t)(v41 + 1))
                v43 = v41 + 1;
              if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
                v44 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v44 = v43;
              if (v44)
                v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v36 + 2), v44);
              else
                v45 = 0;
              v46 = &v45[8 * v41];
              *(_QWORD *)v46 = v25;
              v39 = (uint64_t)(v46 + 8);
              v48 = (char *)*v36;
              v47 = (char *)v36[1];
              if (v47 != *v36)
              {
                do
                {
                  v49 = *((_QWORD *)v47 - 1);
                  v47 -= 8;
                  *((_QWORD *)v46 - 1) = v49;
                  v46 -= 8;
                }
                while (v47 != v48);
                v47 = (char *)*v36;
              }
              *v36 = v46;
              v36[1] = (void *)v39;
              v36[2] = &v45[8 * v44];
              if (v47)
                operator delete(v47);
            }
            else
            {
              *(_QWORD *)v37 = v25;
              v39 = (uint64_t)(v37 + 8);
            }
            v36[1] = (void *)v39;
            v50 = *v36;
            v51 = v36[3];
            std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::CyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LifoQueue<int>>::ArcIterCompare &,std::__wrap_iter<fst::ArcIterator<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> **>>((_BOOL8)v50, v39, (uint64_t)&v51, (v39 - (uint64_t)v50) >> 3);
            goto LABEL_71;
          }
        }
        else
        {
          ++v25[4];
        }
        if (v25[4] >= v25[2])
          goto LABEL_53;
        goto LABEL_51;
      }
      if (!v30)
        goto LABEL_32;
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
LABEL_34:
      MEMORY[0x1AF44D190](v25, 0x1070C401ACC3EEFLL);
LABEL_72:
      v20 = a1[33];
      v21 = *(_QWORD **)v20;
      v22 = (_QWORD *)(v20 + 8);
      v23 = *(_QWORD *)(v20 + 8);
      if (*(_QWORD *)v20 == v23)
        goto LABEL_73;
    }
    if (v25[4] < v25[2])
      goto LABEL_38;
LABEL_32:
    v31 = (_DWORD *)v25[3];
    if (v31)
      --*v31;
    goto LABEL_34;
  }
LABEL_73:
  fst::Partition<int>::FinalizeSplit<fst::LifoQueue<int>>((uint64_t)a1, (uint64_t)(a1 + 23));
}

void sub_1AD9E26A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1070C401ACC3EEFLL);
  _Unwind_Resume(a1);
}

void fst::Partition<int>::FinalizeSplit<fst::LifoQueue<int>>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  v3 = *(_QWORD *)(a1 + 160);
  if (v3 != *(_QWORD *)(a1 + 152))
  {
    v5 = 0;
    v6 = a2 + 16;
    v3 = *(_QWORD *)(a1 + 152);
    do
    {
      v7 = fst::Partition<int>::SplitRefine(a1, *(_DWORD *)(v3 + 4 * v5));
      if (a2 && v7 != -1)
      {
        v8 = v7;
        std::deque<int>::push_front(v6, &v8);
      }
      ++v5;
      v3 = *(_QWORD *)(a1 + 152);
    }
    while (v5 < (*(_QWORD *)(a1 + 160) - v3) >> 2);
  }
  *(_QWORD *)(a1 + 160) = v3;
}

_QWORD *fst::Partition<int>::SplitOn(_QWORD *result, int a2)
{
  int v2;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  int *v8;
  _DWORD *v9;
  int *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int *v16;
  char *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *(_DWORD *)(result[10] + 4 * a2);
  if (*(_DWORD *)(result[13] + 4 * v2) != 1)
  {
    v4 = result;
    v5 = result[16];
    v6 = *(_DWORD *)(v5 + 4 * v2);
    if (!v6)
    {
      v7 = result[21];
      v8 = (int *)result[20];
      if ((unint64_t)v8 >= v7)
      {
        v10 = (int *)result[19];
        v11 = v8 - v10;
        if ((unint64_t)(v11 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v12 = v7 - (_QWORD)v10;
        v13 = (uint64_t)(v7 - (_QWORD)v10) >> 1;
        if (v13 <= v11 + 1)
          v13 = v11 + 1;
        if (v12 >= 0x7FFFFFFFFFFFFFFCLL)
          v14 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v4 + 21), v14);
          v10 = (int *)v4[19];
          v8 = (int *)v4[20];
        }
        else
        {
          v15 = 0;
        }
        v16 = (int *)&v15[4 * v11];
        v17 = &v15[4 * v14];
        *v16 = v2;
        v9 = v16 + 1;
        while (v8 != v10)
        {
          v18 = *--v8;
          *--v16 = v18;
        }
        v4[19] = v16;
        v4[20] = v9;
        v4[21] = v17;
        if (v10)
          operator delete(v10);
      }
      else
      {
        *v8 = v2;
        v9 = v8 + 1;
      }
      v4[20] = v9;
      *(_QWORD *)(v4[7] + 8 * v2) = *(_QWORD *)(v4[4] + 8 * v2);
      v5 = v4[16];
      v6 = *(_DWORD *)(v5 + 4 * v2);
    }
    *(_DWORD *)(v5 + 4 * v2) = v6 + 1;
    v19 = v4[7];
    v20 = *(_QWORD *)(v19 + 8 * v2);
    if (v20)
    {
      if (v20 == *(_QWORD *)(v4[1] + 8 * a2))
        *(_QWORD *)(v19 + 8 * v2) = *(_QWORD *)(v20 + 8);
    }
    return fst::Partition<int>::Move(v4, a2, v2);
  }
  return result;
}

BOOL std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::CyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LifoQueue<int>>::ArcIterCompare &,std::__wrap_iter<fst::ArcIterator<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> **>>(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _BOOL8 v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD **v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = (_QWORD **)(result + 8 * (v4 >> 1));
    v9 = (_QWORD **)(a2 - 8);
    result = fst::CyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LifoQueue<int>>::ArcIterCompare::operator()(a3, *v8, *(_QWORD **)(a2 - 8));
    if (result)
    {
      v10 = *v9;
      do
      {
        v11 = v8;
        *v9 = *v8;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (_QWORD **)(v6 + 8 * v7);
        result = fst::CyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LifoQueue<int>>::ArcIterCompare::operator()(a3, *v8, v10);
        v9 = (_QWORD **)v11;
      }
      while (result);
      *v11 = v10;
    }
  }
  return result;
}

BOOL fst::CyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LifoQueue<int>>::ArcIterCompare::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _DWORD *v4;
  _DWORD *v5;

  if (*a2)
    v4 = (_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 32))(*a2);
  else
    v4 = (_DWORD *)(a2[1] + 16 * a2[4]);
  if (*a3)
    v5 = (_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 32))(*a3);
  else
    v5 = (_DWORD *)(a3[1] + 16 * a3[4]);
  return *v4 > *v5;
}

_QWORD **std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::CyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LifoQueue<int>>::ArcIterCompare &,std::__wrap_iter<fst::ArcIterator<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> **>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD **v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = (_QWORD **)&a1[v6 + 1];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3
      && fst::CyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LifoQueue<int>>::ArcIterCompare::operator()(a2, *v9, (_QWORD *)a1[v6 + 2]))
    {
      ++v9;
      v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t fst::Partition<int>::SplitRefine(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;

  v3 = a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * a2);
  if (v4)
  {
    result = fst::Partition<int>::AddClass(a1);
    if (*(_BYTE *)(a1 + 176))
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v3);
      if (v6 == v4)
      {
        v7 = 0;
      }
      else
      {
        v7 = 0;
        do
        {
          ++v7;
          v6 = *(_QWORD *)(v6 + 8);
        }
        while (v6 != v4);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 128) + 4 * v3) = v7;
    }
    else
    {
      v7 = *(_DWORD *)(*(_QWORD *)(a1 + 128) + 4 * v3);
    }
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * v3) - v7;
    if (v8 >= v7)
    {
      v9 = (int)result;
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (int)result) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v3);
      v11 = *(_QWORD *)(a1 + 104);
      *(_DWORD *)(v11 + 4 * v3) = v8;
      *(_DWORD *)(v11 + 4 * (int)result) = *(_DWORD *)(*(_QWORD *)(a1 + 128) + 4 * v3);
      *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v3) = v4;
    }
    else
    {
      v9 = (int)result;
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (int)result) = v4;
      *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      v10 = *(_QWORD *)(a1 + 104);
      *(_DWORD *)(v10 + 4 * v3) = *(_DWORD *)(*(_QWORD *)(a1 + 128) + 4 * v3);
      *(_DWORD *)(v10 + 4 * (int)result) = v8;
    }
    v12 = *(int **)(*(_QWORD *)(a1 + 32) + 8 * v9);
    if (v12)
    {
      v13 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v13 + 4 * *v12) = result;
        v12 = (int *)*((_QWORD *)v12 + 1);
      }
      while (v12);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v3) = 0;
  }
  else
  {
    result = 0xFFFFFFFFLL;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 128) + 4 * v3) = 0;
  return result;
}

_QWORD *fst::CyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LifoQueue<int>>::~CyclicMinimizer(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  _DWORD *v4;
  int v5;

  v2 = a1[33];
  if (v2)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x1AF44D190](v2, 0xE0C40DD5D8FE3);
  }
  a1[31] = &unk_1E5D24B80;
  v4 = (_DWORD *)a1[32];
  if (v4)
  {
    v5 = v4[14] - 1;
    v4[14] = v5;
    if (!v5)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  }
  std::deque<int>::~deque[abi:ne180100](a1 + 25);
  return fst::Partition<int>::~Partition(a1);
}

uint64_t fst::StateMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  uint64_t v9;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result != -1)
  {
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 24))(*a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 176))(a1, v6);
    if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1) >= 1)
    {
      v7 = 0;
      do
      {
        fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetState(a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(a1, v7);
        for (i = a2[5]; ; a2[5] = i)
        {
          v9 = a2[2];
          if (i >= (a2[3] - v9) >> 4)
            break;
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)a1 + 208))(a1, v7, v9 + 16 * i);
          i = a2[5] + 1;
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 184))(a1, v7);
        v7 = (v7 + 1);
      }
      while ((int)v7 < (*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1));
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v5 & 0xA6A0A950007, 0x3FFFFFFF0007);
  }
  return result;
}

void fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetState(uint64_t *a1, uint64_t a2)
{
  void **v4;
  unint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  unint64_t v8;
  char *v9;
  _OWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 *v20;
  __int128 *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[3];
  _DWORD *v26;
  unint64_t v27;

  a1[5] = 0;
  v4 = (void **)(a1 + 2);
  a1[3] = a1[2];
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 40))(*a1);
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::reserve(v4, v5);
  v6 = *a1;
  v27 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v6 + 136))(v6, a2, v25);
  while (1)
  {
    if (!v25[0])
    {
      if (v27 >= v25[2])
        goto LABEL_29;
      goto LABEL_7;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v25[0] + 24))(v25[0]))
      break;
    if (v25[0])
    {
      v7 = (_OWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v25[0] + 32))();
      goto LABEL_8;
    }
LABEL_7:
    v7 = (_OWORD *)(v25[1] + 16 * v27);
LABEL_8:
    v9 = (char *)a1[3];
    v8 = a1[4];
    if ((unint64_t)v9 >= v8)
    {
      v11 = (v9 - (_BYTE *)*v4) >> 4;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 60)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v13 = v8 - (_QWORD)*v4;
      if (v13 >> 3 > v12)
        v12 = v13 >> 3;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
        v14 = 0xFFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a1 + 4), v14);
      else
        v15 = 0;
      v16 = &v15[16 * v11];
      *(_OWORD *)v16 = *v7;
      v18 = (char *)a1[2];
      v17 = (char *)a1[3];
      v19 = v16;
      if (v17 != v18)
      {
        do
        {
          *((_OWORD *)v19 - 1) = *((_OWORD *)v17 - 1);
          v19 -= 16;
          v17 -= 16;
        }
        while (v17 != v18);
        v17 = (char *)*v4;
      }
      v10 = v16 + 16;
      a1[2] = (uint64_t)v19;
      a1[3] = (uint64_t)(v16 + 16);
      a1[4] = (uint64_t)&v15[16 * v14];
      if (v17)
        operator delete(v17);
    }
    else
    {
      *(_OWORD *)v9 = *v7;
      v10 = v9 + 16;
    }
    a1[3] = (uint64_t)v10;
    if (v25[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v25[0] + 40))(v25[0]);
    else
      ++v27;
  }
  if (v25[0])
  {
    (*(void (**)(void))(*(_QWORD *)v25[0] + 8))();
    goto LABEL_31;
  }
LABEL_29:
  if (v26)
    --*v26;
LABEL_31:
  v20 = (__int128 *)a1[2];
  v21 = (__int128 *)a1[3];
  v22 = 126 - 2 * __clz(v21 - v20);
  if (v21 == v20)
    v23 = 0;
  else
    v23 = v22;
  std::__introsort<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,false>(v20, v21, (uint64_t)v25, v23, 1);
  v24 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *>,std::__wrap_iter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *>,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Equal &>(a1[2], (_OWORD *)a1[3], (uint64_t)v25);
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::resize((uint64_t)v4, (v24 - a1[2]) >> 4);
}

void sub_1AD9E3018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  }
  else if (a13)
  {
    --*a13;
  }
  _Unwind_Resume(exception_object);
}

void std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::__append((char **)a1, a2 - v2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,false>(__int128 *a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  int v16;
  int v17;
  int v18;
  __int128 *v19;
  char v20;
  BOOL v21;
  __int128 *v22;
  int v23;
  int v24;
  int v25;
  __int128 v26;
  __int128 v27;

_OWORD *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(_OWORD *result, _OWORD *a2)
{
  _OWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  _DWORD *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _DWORD *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;

  if (result == a2)
    return result;
  v2 = result + 1;
  if (result + 1 == a2)
    return result;
  v3 = 0;
  v4 = result;
  do
  {
    v5 = v4;
    v4 = v2;
    v6 = v5[4];
    if (v6 >= *v5)
    {
      if (v6 > *v5)
        goto LABEL_22;
      v7 = v5[5];
      v14 = v5[1];
      if (v7 >= v14 && (v7 > v14 || v5[7] >= v5[3]))
        goto LABEL_22;
    }
    else
    {
      v7 = v5[5];
    }
    v8 = v5[6];
    v9 = v5[7];
    *v4 = *(_OWORD *)v5;
    v10 = result;
    if (v5 == (_DWORD *)result)
      goto LABEL_21;
    v11 = v3;
    while (1)
    {
      v12 = *(_DWORD *)((char *)result + v11 - 16);
      if (v6 >= v12)
      {
        if (v6 > v12)
          goto LABEL_20;
        v13 = *(_DWORD *)((char *)result + v11 - 12);
        if (v7 >= v13)
          break;
      }
LABEL_13:
      v5 -= 4;
      *(_OWORD *)((char *)result + v11) = *(_OWORD *)((char *)result + v11 - 16);
      v11 -= 16;
      if (!v11)
      {
        v10 = result;
        goto LABEL_21;
      }
    }
    if (v7 <= v13)
    {
      v10 = (_DWORD *)((char *)result + v11);
      if (v9 >= *(_DWORD *)((char *)result + v11 - 4))
        goto LABEL_21;
      goto LABEL_13;
    }
LABEL_20:
    v10 = v5;
LABEL_21:
    *v10 = v6;
    v10[1] = v7;
    v10[2] = v8;
    v10[3] = v9;
LABEL_22:
    v2 = v4 + 1;
    v3 += 16;
  }
  while (v4 + 1 != a2);
  return result;
}

_DWORD *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(_DWORD *result, _DWORD *a2)
{
  _DWORD *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  _DWORD *v8;
  int v9;
  BOOL v10;
  int v11;

  if (result != a2)
  {
    while (1)
    {
      if (result + 4 == a2)
        return result;
      v2 = result;
      result += 4;
      v3 = v2[4];
      if (v3 >= *v2)
      {
        if (v3 <= *v2)
        {
          v4 = v2[5];
          v5 = v2[1];
          if (v4 < v5 || v4 <= v5 && v2[7] < v2[3])
            goto LABEL_9;
        }
      }
      else
      {
        v4 = v2[5];
LABEL_9:
        v6 = v2[6];
        v7 = v2[7];
        do
        {
          do
          {
            v8 = v2;
            *((_OWORD *)v2 + 1) = *(_OWORD *)v2;
            v9 = *(v2 - 4);
            v2 -= 4;
            v10 = v3 <= v9;
          }
          while (v3 < v9);
          if (!v10)
            break;
          v11 = *(v8 - 3);
        }
        while (v4 < v11 || v4 <= v11 && v7 < *(v8 - 1));
        *v8 = v3;
        v8[1] = v4;
        v8[2] = v6;
        v8[3] = v7;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(__int128 *a1, int *a2, __int128 *a3)
{
  int v3;
  __int128 v4;
  int v6;
  int v7;
  __int128 v8;
  __int128 v9;
  int v10;
  int v11;
  __int128 v12;
  __int128 v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;

  v3 = *a2;
  if (*a2 < *(_DWORD *)a1
    || v3 <= *(_DWORD *)a1
    && ((v14 = a2[1], v15 = *((_DWORD *)a1 + 1), v14 < v15) || v14 <= v15 && a2[3] < *((_DWORD *)a1 + 3)))
  {
    if (*(_DWORD *)a3 < v3
      || *(_DWORD *)a3 <= v3
      && ((v10 = *((_DWORD *)a3 + 1), v11 = a2[1], v10 < v11) || v10 <= v11 && *((_DWORD *)a3 + 3) < a2[3]))
    {
      v4 = *a1;
      *a1 = *a3;
      *a3 = v4;
    }
    else
    {
      v12 = *a1;
      *a1 = *(_OWORD *)a2;
      *(_OWORD *)a2 = v12;
      if (*(_DWORD *)a3 < *a2
        || *(_DWORD *)a3 <= *a2
        && ((v18 = *((_DWORD *)a3 + 1), v19 = a2[1], v18 < v19) || v18 <= v19 && *((_DWORD *)a3 + 3) < a2[3]))
      {
        v13 = *(_OWORD *)a2;
        *(_OWORD *)a2 = *a3;
        *a3 = v13;
        return 2;
      }
    }
    return 1;
  }
  if (*(_DWORD *)a3 < v3
    || *(_DWORD *)a3 <= v3
    && ((v6 = *((_DWORD *)a3 + 1), v7 = a2[1], v6 < v7) || v6 <= v7 && *((_DWORD *)a3 + 3) < a2[3]))
  {
    v8 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *a3;
    *a3 = v8;
    if (*a2 < *(_DWORD *)a1
      || *a2 <= *(_DWORD *)a1
      && ((v16 = a2[1], v17 = *((_DWORD *)a1 + 1), v16 < v17) || v16 <= v17 && a2[3] < *((_DWORD *)a1 + 3)))
    {
      v9 = *a1;
      *a1 = *(_OWORD *)a2;
      *(_OWORD *)a2 = v9;
      return 2;
    }
    return 1;
  }
  return 0;
}

_DWORD *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &>(_DWORD *a1, unint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  _DWORD *i;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  int v21;
  __int128 v22;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[3];
  v5 = *(_DWORD *)(a2 - 16);
  if (*a1 >= v5 && (v2 > v5 || (v6 = *(_DWORD *)(a2 - 12), v3 >= v6) && (v3 > v6 || v4 >= *(_DWORD *)(a2 - 4))))
  {
    for (i = a1 + 4; (unint64_t)i < a2; i += 4)
    {
      if (v2 < *i)
        break;
      if (v2 <= *i)
      {
        v21 = i[1];
        if (v3 < v21 || v3 <= v21 && v4 < i[3])
          break;
      }
    }
  }
  else
  {
    i = a1;
    while (1)
    {
      v9 = i[4];
      i += 4;
      v8 = v9;
      if (v2 < v9)
        break;
      if (v2 <= v8)
      {
        v10 = i[1];
        if (v3 < v10 || v3 <= v10 && v4 < i[3])
          break;
      }
    }
  }
  if ((unint64_t)i < a2)
  {
    for (a2 -= 16; ; a2 -= 16)
    {
      if (v2 >= v5)
      {
        if (v2 > v5)
          break;
        v11 = *(_DWORD *)(a2 + 4);
        if (v3 >= v11 && (v3 > v11 || v4 >= *(_DWORD *)(a2 + 12)))
          break;
      }
      v12 = *(_DWORD *)(a2 - 16);
      v5 = v12;
    }
  }
  v13 = a1[2];
  while ((unint64_t)i < a2)
  {
    v22 = *(_OWORD *)i;
    *(_OWORD *)i = *(_OWORD *)a2;
    *(_OWORD *)a2 = v22;
    while (1)
    {
      v15 = i[4];
      i += 4;
      v14 = v15;
      if (v2 < v15)
        break;
      if (v2 <= v14)
      {
        v16 = i[1];
        if (v3 < v16 || v3 <= v16 && v4 < i[3])
          break;
      }
    }
    do
    {
      do
      {
        v17 = *(_DWORD *)(a2 - 16);
        a2 -= 16;
        v18 = v2 <= v17;
      }
      while (v2 < v17);
      if (!v18)
        break;
      v19 = *(_DWORD *)(a2 + 4);
    }
    while (v3 < v19 || v3 <= v19 && v4 < *(_DWORD *)(a2 + 12));
  }
  if (i - 4 != a1)
    *(_OWORD *)a1 = *((_OWORD *)i - 1);
  *(i - 4) = v2;
  *(i - 3) = v3;
  *(i - 2) = v13;
  *(i - 1) = v4;
  return i;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &>(int *a1, unint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unint64_t v17;
  unint64_t v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  int v23;
  int v24;
  __int128 v26;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  while (1)
  {
    v7 = a1[v2 + 4];
    if (v7 >= v3)
    {
      if (v7 > v3)
        break;
      v8 = a1[v2 + 5];
      if (v8 >= v4 && (v8 > v4 || a1[v2 + 7] >= v6))
        break;
    }
    v2 += 4;
  }
  v9 = (unint64_t)&a1[v2 + 4];
  if (v2 * 4)
  {
    while (1)
    {
      v11 = *(_DWORD *)(a2 - 16);
      a2 -= 16;
      v10 = v11;
      if (v11 < v3)
        break;
      if (v10 <= v3)
      {
        v12 = *(_DWORD *)(a2 + 4);
        if (v12 < v4 || v12 <= v4 && *(_DWORD *)(a2 + 12) < v6)
          break;
      }
    }
  }
  else
  {
LABEL_25:
    if (v9 < a2)
    {
      do
      {
        v14 = *(_DWORD *)(a2 - 16);
        a2 -= 16;
        v13 = v14;
        if (v14 < v3)
          break;
        if (v13 > v3)
          goto LABEL_25;
        v15 = *(_DWORD *)(a2 + 4);
        if (v15 < v4)
          break;
        if (v15 > v4)
          goto LABEL_25;
      }
      while (*(_DWORD *)(a2 + 12) >= v6 && v9 < a2);
    }
  }
  v17 = v9;
  if (v9 < a2)
  {
    v18 = a2;
    do
    {
      v26 = *(_OWORD *)v17;
      *(_OWORD *)v17 = *(_OWORD *)v18;
      *(_OWORD *)v18 = v26;
      do
      {
        do
        {
          v19 = *(_DWORD *)(v17 + 16);
          v17 += 16;
          v20 = v19 <= v3;
        }
        while (v19 < v3);
        if (!v20)
          break;
        v21 = *(_DWORD *)(v17 + 4);
      }
      while (v21 < v4 || v21 <= v4 && *(_DWORD *)(v17 + 12) < v6);
      while (1)
      {
        v23 = *(_DWORD *)(v18 - 16);
        v18 -= 16;
        v22 = v23;
        if (v23 < v3)
          break;
        if (v22 <= v3)
        {
          v24 = *(_DWORD *)(v18 + 4);
          if (v24 < v4 || v24 <= v4 && *(_DWORD *)(v18 + 12) < v6)
            break;
        }
      }
    }
    while (v17 < v18);
  }
  if ((int *)(v17 - 16) != a1)
    *(_OWORD *)a1 = *(_OWORD *)(v17 - 16);
  *(_DWORD *)(v17 - 16) = v3;
  *(_DWORD *)(v17 - 12) = v4;
  *(_DWORD *)(v17 - 8) = v5;
  *(_DWORD *)(v17 - 4) = v6;
  return v17 - 16;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  int v7;
  __int128 v8;
  __int128 *v9;
  __int128 *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  _DWORD *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 1;
      v7 = *((_DWORD *)a2 - 4);
      if (v7 < *(_DWORD *)a1
        || v7 <= *(_DWORD *)a1
        && ((v22 = *((_DWORD *)a2 - 3), v23 = *(_DWORD *)(a1 + 4), v22 < v23)
         || v22 <= v23 && *((_DWORD *)a2 - 1) < *(_DWORD *)(a1 + 12)))
      {
        v8 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)a1, (int *)(a1 + 16), a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(a1, (int *)(a1 + 16), a1 + 32, (uint64_t)(a2 - 1));
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(a1, (int *)(a1 + 16), a1 + 32, a1 + 48, (uint64_t)(a2 - 1));
      return 1;
    default:
      v9 = (__int128 *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)a1, (int *)(a1 + 16), (__int128 *)(a1 + 32));
      v10 = (__int128 *)(a1 + 48);
      if ((__int128 *)(a1 + 48) == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(_DWORD *)v10;
    if (*(_DWORD *)v10 < *(_DWORD *)v9)
      break;
    if (v13 <= *(_DWORD *)v9)
    {
      v14 = *((_DWORD *)v10 + 1);
      v21 = *((_DWORD *)v9 + 1);
      if (v14 < v21 || v14 <= v21 && *((_DWORD *)v10 + 3) < *((_DWORD *)v9 + 3))
        goto LABEL_9;
    }
LABEL_26:
    v9 = v10;
    v11 += 16;
    if (++v10 == a2)
      return 1;
  }
  v14 = *((_DWORD *)v10 + 1);
LABEL_9:
  v15 = *((_DWORD *)v10 + 2);
  v16 = *((_DWORD *)v10 + 3);
  *v10 = *v9;
  v17 = (_DWORD *)a1;
  if (v9 != (__int128 *)a1)
  {
    v18 = v11;
    while (1)
    {
      v19 = *(_DWORD *)(a1 + v18 + 16);
      if (v13 >= v19)
      {
        if (v13 > v19)
          goto LABEL_23;
        v20 = *(_DWORD *)(a1 + v18 + 20);
        if (v14 >= v20)
        {
          if (v14 > v20)
          {
LABEL_23:
            v17 = v9;
            goto LABEL_25;
          }
          if (v16 >= *(_DWORD *)(a1 + v18 + 28))
            break;
        }
      }
      --v9;
      *(_OWORD *)(a1 + v18 + 32) = *(_OWORD *)(a1 + v18 + 16);
      v18 -= 16;
      if (v18 == -32)
      {
        v17 = (_DWORD *)a1;
        goto LABEL_25;
      }
    }
    v17 = (_DWORD *)(a1 + v18 + 32);
  }
LABEL_25:
  *v17 = v13;
  v17[1] = v14;
  v17[2] = v15;
  v17[3] = v16;
  if (++v12 != 8)
    goto LABEL_26;
  return v10 + 1 == a2;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)a1, a2, (__int128 *)a3);
  if (*(_DWORD *)a4 < *(_DWORD *)a3
    || *(_DWORD *)a4 <= *(_DWORD *)a3
    && ((v9 = *(_DWORD *)(a4 + 4), v10 = *(_DWORD *)(a3 + 4), v9 < v10)
     || v9 <= v10 && *(_DWORD *)(a4 + 12) < *(_DWORD *)(a3 + 12)))
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    if (*(_DWORD *)a3 < *a2
      || *(_DWORD *)a3 <= *a2
      && ((v11 = *(_DWORD *)(a3 + 4), v12 = a2[1], v11 < v12) || v11 <= v12 && *(_DWORD *)(a3 + 12) < a2[3]))
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*a2 < *(_DWORD *)a1
        || *a2 <= *(_DWORD *)a1
        && ((v13 = a2[1], v14 = *(_DWORD *)(a1 + 4), v13 < v14) || v13 <= v14 && a2[3] < *(_DWORD *)(a1 + 12)))
      {
        result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v10;
  int v11;
  int v12;
  __int128 v13;
  int v14;
  int v15;
  __int128 v16;
  int v17;
  int v18;
  __int128 v19;
  int v20;
  int v21;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(a1, a2, a3, a4);
  if (*(_DWORD *)a5 < *(_DWORD *)a4
    || *(_DWORD *)a5 <= *(_DWORD *)a4
    && ((v20 = *(_DWORD *)(a5 + 4), v21 = *(_DWORD *)(a4 + 4), v20 < v21)
     || v20 <= v21 && *(_DWORD *)(a5 + 12) < *(_DWORD *)(a4 + 12)))
  {
    v10 = *(_OWORD *)a4;
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)a5 = v10;
    if (*(_DWORD *)a4 < *(_DWORD *)a3
      || *(_DWORD *)a4 <= *(_DWORD *)a3
      && ((v11 = *(_DWORD *)(a4 + 4), v12 = *(_DWORD *)(a3 + 4), v11 < v12)
       || v11 <= v12 && *(_DWORD *)(a4 + 12) < *(_DWORD *)(a3 + 12)))
    {
      v13 = *(_OWORD *)a3;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)a4 = v13;
      if (*(_DWORD *)a3 < *a2
        || *(_DWORD *)a3 <= *a2
        && ((v14 = *(_DWORD *)(a3 + 4), v15 = a2[1], v14 < v15) || v14 <= v15 && *(_DWORD *)(a3 + 12) < a2[3]))
      {
        v16 = *(_OWORD *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)a3 = v16;
        if (*a2 < *(_DWORD *)a1
          || *a2 <= *(_DWORD *)a1
          && ((v17 = a2[1], v18 = *(_DWORD *)(a1 + 4), v17 < v18) || v17 <= v18 && a2[3] < *(_DWORD *)(a1 + 12)))
        {
          v19 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)a2 = v19;
        }
      }
    }
  }
}

int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(int *a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  int *v13;
  int *v14;
  int v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  int *v19;
  int *v20;
  __int128 v23;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[4 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((uint64_t)a1, a4, v9, v12);
        v12 -= 4;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (*v14 < *a1 || *v14 <= *a1 && ((v15 = v14[1], v16 = a1[1], v15 < v16) || v15 <= v16 && v14[3] < a1[3]))
        {
          v17 = *(_OWORD *)v14;
          *(_OWORD *)v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v17;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 4;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v18 = (unint64_t)v8 >> 4;
      v19 = a2 - 4;
      do
      {
        v23 = *(_OWORD *)a1;
        std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(a1, a4, v18);
        if (v19 == v20)
        {
          *(_OWORD *)v20 = v23;
        }
        else
        {
          *(_OWORD *)v20 = *(_OWORD *)v19;
          *(_OWORD *)v19 = v23;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((uint64_t)a1, (uint64_t)(v20 + 4), a4, ((char *)(v20 + 4) - (char *)a1) >> 4);
        }
        v19 -= 4;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = (int *)(result + 16 * v7);
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = v8[4];
        if (*v8 < v10
          || *v8 <= v10
          && ((v11 = *(_DWORD *)(result + 16 * v7 + 4), v12 = v8[5], v11 < v12)
           || v11 <= v12 && *(_DWORD *)(result + 16 * v7 + 12) < v8[7]))
        {
          v8 += 4;
          v7 = v9;
        }
      }
      v13 = *a4;
      if (*v8 >= *a4)
      {
        if (*v8 <= v13)
        {
          v15 = v8[1];
          v14 = a4[1];
          if (v15 < v14 || v15 <= v14 && v8[3] < a4[3])
            return result;
        }
        else
        {
          v14 = a4[1];
        }
        v16 = a4[2];
        v17 = a4[3];
        *(_OWORD *)a4 = *(_OWORD *)v8;
        while (v5 >= v7)
        {
          v18 = v8;
          v19 = 2 * v7;
          v7 = (2 * v7) | 1;
          v8 = (int *)(result + 16 * v7);
          v20 = v19 + 2;
          if (v20 < a3)
          {
            v21 = v8[4];
            if (*v8 < v21
              || *v8 <= v21
              && ((v22 = *(_DWORD *)(result + 16 * v7 + 4), v23 = v8[5], v22 < v23)
               || v22 <= v23 && *(_DWORD *)(result + 16 * v7 + 12) < v8[7]))
            {
              v8 += 4;
              v7 = v20;
            }
          }
          if (*v8 < v13 || *v8 <= v13 && ((v24 = v8[1], v24 < v14) || v24 <= v14 && v8[3] < v17))
          {
            v8 = v18;
            break;
          }
          *(_OWORD *)v18 = *(_OWORD *)v8;
        }
        *v8 = v13;
        v8[1] = v14;
        v8[2] = v16;
        v8[3] = v17;
      }
    }
  }
  return result;
}

__n128 std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  __n128 result;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = a1;
    v7 = v3 + 1;
    a1 += 4 * v3 + 4;
    v8 = 2 * v3;
    v3 = (2 * v3) | 1;
    v9 = v8 + 2;
    if (v9 < a3)
    {
      v10 = a1[4];
      if (*a1 < v10
        || *a1 <= v10 && ((v11 = DWORD1(v6[v7]), v12 = a1[5], v11 < v12) || v11 <= v12 && SHIDWORD(v6[v7]) < a1[7]))
      {
        a1 += 4;
        v3 = v9;
      }
    }
    result = *(__n128 *)a1;
    *v6 = *(_OWORD *)a1;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  _DWORD *v12;
  unint64_t v13;
  int v14;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (_DWORD *)(result + 16 * (v4 >> 1));
    v7 = *(_DWORD *)(a2 - 16);
    if (*v6 >= v7)
    {
      if (*v6 > v7)
        return result;
      v9 = *(_DWORD *)(result + 16 * v5 + 4);
      v8 = *(_DWORD *)(a2 - 12);
      if (v9 >= v8 && (v9 > v8 || *(_DWORD *)(result + 16 * v5 + 12) >= *(_DWORD *)(a2 - 4)))
        return result;
    }
    else
    {
      v8 = *(_DWORD *)(a2 - 12);
    }
    v10 = *(_DWORD *)(a2 - 8);
    v11 = *(_DWORD *)(a2 - 4);
    *(_OWORD *)(a2 - 16) = *(_OWORD *)v6;
    if (v4 >= 2)
    {
      while (1)
      {
        v13 = v5 - 1;
        v5 = (v5 - 1) >> 1;
        v12 = (_DWORD *)(result + 16 * v5);
        if (*v12 >= v7)
        {
          if (*v12 > v7)
            break;
          v14 = *(_DWORD *)(result + 16 * v5 + 4);
          if (v14 >= v8 && (v14 > v8 || *(_DWORD *)(result + 16 * v5 + 12) >= v11))
            break;
        }
        *(_OWORD *)v6 = *(_OWORD *)v12;
        v6 = (_DWORD *)(result + 16 * v5);
        if (v13 <= 1)
          goto LABEL_16;
      }
    }
    v12 = v6;
LABEL_16:
    *v12 = v7;
    v12[1] = v8;
    v12[2] = v10;
    v12[3] = v11;
  }
  return result;
}

uint64_t std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *>,std::__wrap_iter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *>,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Equal &>(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  _BOOL4 v8;
  _OWORD *v9;
  uint64_t v10;

  result = (uint64_t)a2;
  if ((_OWORD *)a1 != a2)
  {
    do
    {
      v7 = a1 + 16;
      if ((_OWORD *)(a1 + 16) == a2)
        return (uint64_t)a2;
      v8 = fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Equal::operator()(a3, a1, a1 + 16);
      a1 = v7;
    }
    while (!v8);
    v9 = (_OWORD *)(v7 + 16);
    v10 = v7 - 16;
    while (v9 != a2)
    {
      if (!fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Equal::operator()(a3, v10, (uint64_t)v9))
      {
        *(_OWORD *)(v10 + 16) = *v9;
        v10 += 16;
      }
      ++v9;
    }
    return v10 + 16;
  }
  return result;
}

BOOL fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Equal::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_DWORD *)a2 == *(_DWORD *)a3
      && *(_DWORD *)(a2 + 4) == *(_DWORD *)(a3 + 4)
      && *(_DWORD *)(a2 + 12) == *(_DWORD *)(a3 + 12)
      && *(float *)(a2 + 8) == *(float *)(a3 + 8);
}

void std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;

  v4 = (uint64_t)(a1 + 2);
  v5 = a1[2];
  v6 = a1[1];
  if (a2 <= (v5 - v6) >> 4)
  {
    a1[1] = &v6[16 * a2];
  }
  else
  {
    v7 = *a1;
    v8 = v6 - *a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - v7;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v4, v12);
      v7 = *a1;
      v6 = a1[1];
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    v16 = &v14[16 * a2];
    if (v6 != v7)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v6 - 1);
        v14 -= 16;
        v6 -= 16;
      }
      while (v6 != v7);
      v7 = *a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v7)
      operator delete(v7);
  }
}

void fst::RmFinalEpsilon<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1)
{
  unsigned int v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  BOOL v13;
  float v14;
  float v15;
  _OWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  _BYTE *v33;
  _BYTE *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _DWORD *v44;
  unint64_t v45;
  unsigned int v46;
  void *__p;
  _BYTE *v48;
  char *v49;
  _OWORD v50[2];
  int v51;
  uint64_t v52[11];
  uint64_t v53;
  void *v54[3];
  void *v55[4];

  memset(v55, 0, 24);
  memset(v54, 0, sizeof(v54));
  v53 = 0;
  v52[0] = 0;
  v52[1] = (uint64_t)v55;
  v52[2] = (uint64_t)v54;
  v52[3] = (uint64_t)&v53;
  fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, v52, 0);
  memset(v50, 0, sizeof(v50));
  v51 = 1065353216;
  LODWORD(v49) = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 128))(a1, &__p);
  while (1)
  {
    if (!__p)
    {
      if ((int)v49 >= (int)v48)
        goto LABEL_35;
LABEL_7:
      v2 = v49;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(void *))(*(_QWORD *)__p + 16))(__p))
      break;
    v46 = 0;
    if (!__p)
      goto LABEL_7;
    v2 = (*(uint64_t (**)(void))(*(_QWORD *)__p + 24))();
LABEL_8:
    v46 = v2;
    LODWORD(v41) = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    LODWORD(v38) = 2139095040;
    if (*(float *)&v41 == INFINITY)
      goto LABEL_30;
    v45 = 0;
    (*(void (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)a1 + 136))(a1, v46, &v41);
    while (1)
    {
      if (v41)
      {
        v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 24))(v41);
        v4 = v41;
        if ((v3 & 1) != 0)
        {
          v6 = 0;
          if (v41)
            goto LABEL_21;
          goto LABEL_23;
        }
        if (v41)
        {
          v5 = (*(uint64_t (**)(void))(*(_QWORD *)v41 + 32))();
          v4 = v41;
          goto LABEL_16;
        }
      }
      else if (v45 >= v43)
      {
        if (v44)
          --*v44;
        goto LABEL_29;
      }
      v4 = 0;
      v5 = v42 + 16 * v45;
LABEL_16:
      if (((*(_QWORD *)((char *)v54[0] + (((unint64_t)*(int *)(v5 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(v5 + 12)) & 1) != 0)
        break;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
      else
        ++v45;
    }
    v6 = 1;
    if (v4)
    {
LABEL_21:
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      goto LABEL_25;
    }
LABEL_23:
    if (v44)
      --*v44;
LABEL_25:
    if ((v6 & 1) != 0)
      goto LABEL_30;
LABEL_29:
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v50, (int *)&v46, &v46);
LABEL_30:
    if (__p)
      (*(void (**)(void *))(*(_QWORD *)__p + 32))(__p);
    else
      LODWORD(v49) = (_DWORD)v49 + 1;
  }
  if (__p)
    (*(void (**)(void))(*(_QWORD *)__p + 8))();
LABEL_35:
  __p = 0;
  v48 = 0;
  v49 = 0;
  v40 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v38);
  while (2)
  {
    if (!v38)
    {
      if ((int)v40 >= v39)
        goto LABEL_116;
      goto LABEL_41;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38))
    {
      if (v38)
      {
        v7 = (*(uint64_t (**)(void))(*(_QWORD *)v38 + 24))();
        goto LABEL_42;
      }
LABEL_41:
      v7 = v40;
LABEL_42:
      v8 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v7);
      v48 = __p;
      v45 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 136))(a1, v7, &v41);
LABEL_43:
      if (v41)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v41 + 24))(v41))
        {
          if (v41)
          {
            (*(void (**)(void))(*(_QWORD *)v41 + 8))();
          }
          else
          {
LABEL_105:
            if (v44)
              --*v44;
          }
          v34 = __p;
          v33 = v48;
          if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v7) > (unint64_t)((v33 - v34) >> 4))
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(a1, v7);
            (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)a1 + 184))(a1, v7, v8);
            v35 = (char *)__p;
            if (v48 != __p)
            {
              v36 = 0;
              v37 = 0;
              do
              {
                (*(void (**)(uint64_t, uint64_t, char *))(*(_QWORD *)a1 + 208))(a1, v7, &v35[v36]);
                ++v37;
                v35 = (char *)__p;
                v36 += 16;
              }
              while (v37 < (v48 - (_BYTE *)__p) >> 4);
            }
          }
          if (v38)
            (*(void (**)(uint64_t))(*(_QWORD *)v38 + 32))(v38);
          else
            ++v40;
          continue;
        }
        if (v41)
        {
          v9 = (*(uint64_t (**)(void))(*(_QWORD *)v41 + 32))();
          goto LABEL_49;
        }
      }
      else if (v45 >= v43)
      {
        goto LABEL_105;
      }
      v9 = v42 + 16 * v45;
LABEL_49:
      if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v50, (int *)(v9 + 12)))
      {
        if (!*(_QWORD *)v9)
        {
          v10 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, *(unsigned int *)(v9 + 12));
          v11 = NAN;
          if (v10 != -INFINITY)
          {
            v12 = *(float *)(v9 + 8);
            v11 = NAN;
            if (v12 != -INFINITY)
            {
              v11 = INFINITY;
              v13 = v12 == INFINITY || v10 == INFINITY;
              v14 = v10 + v12;
              if (!v13)
                v11 = v14;
            }
          }
          if (v11 >= v8)
            v15 = v8;
          else
            v15 = v11;
          if (v8 == -INFINITY || v11 == -INFINITY)
            v8 = NAN;
          else
            v8 = v15;
          goto LABEL_100;
        }
        v18 = v48;
        if (v48 < v49)
        {
LABEL_80:
          *v18 = *(_OWORD *)v9;
          v24 = v18 + 1;
LABEL_99:
          v48 = v24;
LABEL_100:
          if (v41)
            (*(void (**)(uint64_t))(*(_QWORD *)v41 + 40))(v41);
          else
            ++v45;
          goto LABEL_43;
        }
        v25 = (v48 - (_BYTE *)__p) >> 4;
        v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 60)
LABEL_123:
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v27 = v49 - (_BYTE *)__p;
        if ((v49 - (_BYTE *)__p) >> 3 > v26)
          v26 = v27 >> 3;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0)
          v22 = 0xFFFFFFFFFFFFFFFLL;
        else
          v22 = v26;
        if (v22)
          v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v49, v22);
        else
          v23 = 0;
        v28 = &v23[16 * v25];
        *(_OWORD *)v28 = *(_OWORD *)v9;
        v32 = (char *)__p;
        v29 = v48;
        v31 = v28;
        if (v48 != __p)
        {
          do
          {
            *((_OWORD *)v31 - 1) = *((_OWORD *)v29 - 1);
            v31 -= 16;
            v29 -= 16;
          }
          while (v29 != v32);
          goto LABEL_96;
        }
      }
      else
      {
        v18 = v48;
        if (v48 < v49)
          goto LABEL_80;
        v19 = (v48 - (_BYTE *)__p) >> 4;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 60)
          goto LABEL_123;
        v21 = v49 - (_BYTE *)__p;
        if ((v49 - (_BYTE *)__p) >> 3 > v20)
          v20 = v21 >> 3;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
          v22 = 0xFFFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        if (v22)
          v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v49, v22);
        else
          v23 = 0;
        v28 = &v23[16 * v19];
        *(_OWORD *)v28 = *(_OWORD *)v9;
        v30 = (char *)__p;
        v29 = v48;
        v31 = v28;
        if (v48 != __p)
        {
          do
          {
            *((_OWORD *)v31 - 1) = *((_OWORD *)v29 - 1);
            v31 -= 16;
            v29 -= 16;
          }
          while (v29 != v30);
LABEL_96:
          v29 = (char *)__p;
        }
      }
      v24 = v28 + 16;
      __p = v31;
      v48 = v28 + 16;
      v49 = &v23[16 * v22];
      if (v29)
        operator delete(v29);
      goto LABEL_99;
    }
    break;
  }
  if (v38)
    (*(void (**)(void))(*(_QWORD *)v38 + 8))();
LABEL_116:
  fst::Connect<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1);
  if (__p)
  {
    v48 = __p;
    operator delete(__p);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v50);
  if (v54[0])
    operator delete(v54[0]);
  if (v55[0])
    operator delete(v55[0]);
}

void sub_1AD9E4CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;
  void *v23;
  void *v24;

  if (__p)
    operator delete(__p);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a21);
  v23 = *(void **)(v21 - 152);
  if (v23)
    operator delete(v23);
  v24 = *(void **)(v21 - 128);
  if (v24)
    operator delete(v24);
  _Unwind_Resume(a1);
}

uint64_t fst::EncodeMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~EncodeMapper(uint64_t a1)
{
  uint64_t v2;
  int v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_DWORD *)(v2 + 80) - 1;
  *(_DWORD *)(v2 + 80) = v3;
  if (!v3)
  {
    v4 = fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~EncodeTable((_QWORD *)v2);
    MEMORY[0x1AF44D190](v4, 0x10A0C40782F6942);
  }
  return a1;
}

_QWORD *fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~EncodeTable(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 != v3)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v3 + 8 * v4);
      if (v5)
      {
        MEMORY[0x1AF44D190](v5, 0x1000C403E1C8BA9);
        v3 = a1[1];
        v2 = a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  v6 = a1[11];
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a1[12];
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(a1 + 4));
  v8 = (void *)a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
  }
  return a1;
}

kaldi::quasar::LmeTrie *kaldi::quasar::LmeTrie::LmeTrie(kaldi::quasar::LmeTrie *this, int a2, int a3, char a4)
{
  char **v5;
  std::vector<unsigned int> *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  unint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *i;
  int v32;

  *(_DWORD *)this = a2;
  *((_DWORD *)this + 1) = a3 - a2 + 1;
  *(_OWORD *)((char *)this + 8) = 0u;
  v5 = (char **)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  v6 = (std::vector<unsigned int> *)((char *)this + 32);
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_BYTE *)this + 68) = a4;
  std::vector<kaldi::quasar::LmeTrie::Arc>::reserve((void **)this + 1, 0x400000uLL);
  std::vector<int>::reserve(v6, 0x200000uLL);
  v7 = *((_QWORD *)this + 3);
  v8 = (_QWORD *)*((_QWORD *)this + 2);
  if ((unint64_t)v8 >= v7)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - *v5) >> 3);
    v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)*v5) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)this + 24, v13);
    else
      v14 = 0;
    v15 = &v14[24 * v10];
    v16 = &v14[24 * v13];
    *(_QWORD *)v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
    *((_QWORD *)v15 + 2) = 0;
    v9 = v15 + 24;
    v18 = (char *)*((_QWORD *)this + 1);
    v17 = (char *)*((_QWORD *)this + 2);
    if (v17 != v18)
    {
      do
      {
        v19 = *(_OWORD *)(v17 - 24);
        *((_QWORD *)v15 - 1) = *((_QWORD *)v17 - 1);
        *(_OWORD *)(v15 - 24) = v19;
        v15 -= 24;
        v17 -= 24;
      }
      while (v17 != v18);
      v17 = *v5;
    }
    *((_QWORD *)this + 1) = v15;
    *((_QWORD *)this + 2) = v9;
    *((_QWORD *)this + 3) = v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v8 = 0;
    v8[1] = 0;
    v9 = v8 + 3;
    v8[2] = 0;
  }
  v20 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 2) = v9;
  v21 = (_DWORD *)*((_QWORD *)this + 5);
  if ((unint64_t)v21 >= v20)
  {
    v23 = v21 - v6->__begin_;
    if ((unint64_t)(v23 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v24 = v20 - (unint64_t)v6->__begin_;
    v25 = v24 >> 1;
    if (v24 >> 1 <= (unint64_t)(v23 + 1))
      v25 = v23 + 1;
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
      v26 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v26 = v25;
    if (v26)
      v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 48, v26);
    else
      v27 = 0;
    v28 = &v27[4 * v23];
    v29 = &v27[4 * v26];
    *(_DWORD *)v28 = 0;
    v22 = v28 + 4;
    v30 = (char *)*((_QWORD *)this + 4);
    for (i = (char *)*((_QWORD *)this + 5); i != v30; i -= 4)
    {
      v32 = *((_DWORD *)i - 1);
      *((_DWORD *)v28 - 1) = v32;
      v28 -= 4;
    }
    *((_QWORD *)this + 4) = v28;
    *((_QWORD *)this + 5) = v22;
    *((_QWORD *)this + 6) = v29;
    if (v30)
      operator delete(v30);
  }
  else
  {
    *v21 = 0;
    v22 = v21 + 1;
  }
  *((_QWORD *)this + 5) = v22;
  *((_DWORD *)this + 14) = kaldi::quasar::LmeTrie::StateNew(this);
  *((_DWORD *)this + 15) = kaldi::quasar::LmeTrie::StateNew(this);
  *((_DWORD *)this + 16) = 0;
  return this;
}

void sub_1AD9E50F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 40) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<kaldi::quasar::LmeTrie::Arc>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 24;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v3, a2);
    v7 = &v6[24 * v5];
    v9 = &v6[24 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_OWORD *)(v10 - 24);
        *((_QWORD *)v12 - 1) = *((_QWORD *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v13;
        v12 -= 24;
        v10 -= 24;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

kaldi::quasar::LmeTrie *std::unique_ptr<kaldi::quasar::LmeTrie>::reset[abi:ne180100](kaldi::quasar::LmeTrie **a1, kaldi::quasar::LmeTrie *a2)
{
  kaldi::quasar::LmeTrie *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    kaldi::quasar::LmeTrie::~LmeTrie(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

void kaldi::quasar::LmeTrie::~LmeTrie(kaldi::quasar::LmeTrie *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  _QWORD v9[34];

  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"LmeTrie: arc_count ", 19);
    v2 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" arc_sizeof ", 12);
    v3 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" arc_bytes ", 11);
    v4 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" state_count ", 13);
    v5 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" state_sizeof ", 14);
    v6 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" state_bytes ", 13);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v9);
  }
  v7 = (void *)*((_QWORD *)this + 4);
  if (v7)
  {
    *((_QWORD *)this + 5) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 1);
  if (v8)
  {
    *((_QWORD *)this + 2) = v8;
    operator delete(v8);
  }
}

uint64_t quasar::SyncSpeechRecognizer::SyncSpeechRecognizer(uint64_t a1, __int128 *a2)
{
  __int128 v3;

  *(_QWORD *)a1 = &off_1E5D37EC8;
  *(_QWORD *)(a1 + 8) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v3;
  }
  *(_BYTE *)(a1 + 40) = 0;
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)(a1 + 48));
  *(_OWORD *)(a1 + 1648) = 0u;
  *(_OWORD *)(a1 + 1592) = 0u;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(_OWORD *)(a1 + 1624) = 0u;
  *(_QWORD *)(a1 + 1640) = a1 + 1648;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(_QWORD *)(a1 + 1664) = a1 + 1672;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_QWORD *)(a1 + 1688) = a1 + 1696;
  *(_OWORD *)(a1 + 1792) = 0u;
  *(_QWORD *)(a1 + 1776) = 0;
  *(_OWORD *)(a1 + 1760) = 0u;
  *(_OWORD *)(a1 + 1744) = 0u;
  *(_OWORD *)(a1 + 1728) = 0u;
  *(_OWORD *)(a1 + 1712) = 0u;
  *(_OWORD *)(a1 + 1816) = 0u;
  *(_QWORD *)(a1 + 1784) = a1 + 1792;
  *(_QWORD *)(a1 + 1808) = a1 + 1816;
  *(_OWORD *)(a1 + 1840) = 0u;
  *(_QWORD *)(a1 + 1832) = a1 + 1840;
  *(_OWORD *)(a1 + 1880) = 0u;
  *(_QWORD *)(a1 + 1872) = a1 + 1880;
  *(_OWORD *)(a1 + 1904) = 0u;
  *(_QWORD *)(a1 + 1896) = a1 + 1904;
  *(_OWORD *)(a1 + 1928) = 0u;
  *(_QWORD *)(a1 + 1920) = a1 + 1928;
  *(_OWORD *)(a1 + 1944) = 0u;
  *(_QWORD *)(a1 + 1960) = 0;
  *(_DWORD *)(a1 + 1968) = 27;
  kaldi::Srand((kaldi *)0x2A);
  return a1;
}

void sub_1AD9E54B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, quasar::SystemConfig *a10, uint64_t *a11, uint64_t a12)
{
  uint64_t v13;

  v13 = *a11;
  *a11 = 0;
  if (v13)
    std::default_delete<quasar::SessionData>::operator()[abi:ne180100]((uint64_t)a11, v13);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::SyncSpeechRecognizer::init(quasar::SyncSpeechRecognizer *this, char a2)
{
  quasar::SystemConfig *v4;
  char *v5;
  int JsonFile;
  uint64_t ModelLoader;
  uint64_t SpeechModelInfo;
  quasar::PTree *Ptree;
  uint64_t v11;
  uint64_t v12;
  int64x2_t *v13;
  std::string *String;
  uint64_t v15;
  _OWORD *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  _QWORD *v26;
  char *v27;
  __int128 v28;
  int64x2_t v29;
  _OWORD *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  int v38;
  void **v39;
  void **v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  void *exception;
  char *v50;
  void *__p[2];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t ConfigFileVersion;
  __int128 v69;
  _QWORD *v70[3];
  uint64_t v71;
  std::__shared_weak_count *v72;
  _QWORD *v73[3];
  void **v74;
  int64x2_t v75;
  uint64_t v76;
  char *v77;

  v4 = (quasar::SyncSpeechRecognizer *)((char *)this + 48);
  v5 = (char *)this + 16;
  v74 = 0;
  v75 = 0uLL;
  *(_OWORD *)__p = 0u;
  v52 = 0u;
  LODWORD(v53) = 1065353216;
  JsonFile = quasar::SystemConfig::readJsonFile((uint64_t)this + 48, (uint64_t)this + 16, (uint64_t *)&v74, (uint64_t)__p, 0, 0);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
  __p[0] = &v74;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (JsonFile == 2)
    return 1;
  ModelLoader = quasar::SystemConfig::getModelLoader(v4);
  quasar::ModelLoader::enableEmbeddedMlock(ModelLoader, a2);
  SpeechModelInfo = quasar::SystemConfig::getSpeechModelInfo(v4);
  quasar::SpeechModelInfo::operator=((uint64_t)this + 1592, SpeechModelInfo);
  std::string::basic_string[abi:ne180100]<0>(__p, "recognizers");
  Ptree = (quasar::PTree *)quasar::SystemConfig::getPtree((uint64_t)v4, (uint64_t)__p);
  if (SBYTE7(v52) < 0)
    operator delete(__p[0]);
  v50 = v5;
  v11 = quasar::PTree::begin(Ptree);
  v12 = quasar::PTree::end(Ptree);
  if (v11 != v12)
  {
    v13 = (int64x2_t *)((char *)this + 1944);
    do
    {
      String = (std::string *)quasar::PTree::getString((quasar::PTree *)(v11 + 24));
      std::string::basic_string[abi:ne180100]<0>(&v74, "::");
      quasar::splitAndTrim(String, (char *)&v74, (uint64_t *)__p);
      if (v75.i8[15] < 0)
        operator delete(v74);
      quasar::SyncSpeechRecognizer::getFrontend((const void **)__p[0], v4, (uint64_t **)this + 234, (uint64_t)v73);
      (*(void (**)(uint64_t *__return_ptr, quasar::SyncSpeechRecognizer *, char *))(*(_QWORD *)this + 72))(&v71, this, (char *)__p[0] + 24);
      (*(void (**)(_QWORD **__return_ptr, quasar::SyncSpeechRecognizer *, char *))(*(_QWORD *)this + 64))(v70, this, (char *)__p[0] + 48);
      ConfigFileVersion = quasar::SystemConfig::getConfigFileVersion(v4);
      v15 = quasar::PTree::getString((quasar::PTree *)(v11 + 24));
      std::allocate_shared[abi:ne180100]<quasar::RecognizerComponents<quasar::SyncDecoder>,std::allocator<quasar::RecognizerComponents<quasar::SyncDecoder>>,quasar::SystemConfig::Version,std::string const&,std::string const&,std::vector<std::shared_ptr<quasar::FeatureExtractor>> &,std::shared_ptr<quasar::Decodable> &,std::vector<std::shared_ptr<quasar::SyncDecoder>> &,void>((uint64_t)&ConfigFileVersion, v11, v15, v73, &v71, v70, &v69);
      v16 = (_OWORD *)*((_QWORD *)this + 244);
      v17 = *((_QWORD *)this + 245);
      if ((unint64_t)v16 >= v17)
      {
        v18 = ((uint64_t)v16 - v13->i64[0]) >> 4;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v20 = v17 - v13->i64[0];
        if (v20 >> 3 > v19)
          v19 = v20 >> 3;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
          v21 = 0xFFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        v77 = (char *)this + 1960;
        v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)this + 1960, v21);
        v24 = &v22[16 * v18];
        *(_OWORD *)v24 = v69;
        v69 = 0uLL;
        v25 = (_QWORD *)*((_QWORD *)this + 244);
        v26 = (_QWORD *)*((_QWORD *)this + 243);
        if (v25 == v26)
        {
          v29 = vdupq_n_s64((unint64_t)v25);
          v27 = &v22[16 * v18];
        }
        else
        {
          v27 = &v22[16 * v18];
          do
          {
            v28 = *((_OWORD *)v25 - 1);
            v25 -= 2;
            *((_OWORD *)v27 - 1) = v28;
            v27 -= 16;
            *v25 = 0;
            v25[1] = 0;
          }
          while (v25 != v26);
          v29 = *v13;
        }
        v30 = v24 + 16;
        *((_QWORD *)this + 243) = v27;
        *((_QWORD *)this + 244) = v24 + 16;
        v75 = v29;
        v31 = *((_QWORD *)this + 245);
        *((_QWORD *)this + 245) = &v22[16 * v23];
        v76 = v31;
        v74 = (void **)v29.i64[0];
        std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)&v74);
        v32 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
        *((_QWORD *)this + 244) = v30;
        if (v32)
        {
          p_shared_owners = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldaxr(p_shared_owners);
          while (__stlxr(v34 - 1, p_shared_owners));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
      }
      else
      {
        *v16 = v69;
        *((_QWORD *)this + 244) = v16 + 1;
      }
      v74 = (void **)v70;
      std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v74);
      v35 = v72;
      if (v72)
      {
        v36 = (unint64_t *)&v72->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v74 = (void **)v73;
      std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v74);
      v74 = __p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v74);
      v11 += 88;
    }
    while (v11 != v12);
  }
  if ((quasar::RecognizerComponents<quasar::SyncDecoder>::validateFilters((_QWORD *)this + 199, (uint64_t *)this + 243) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "Found missing recognizer request handlers.");
    quasar::PTree::Error::Error(exception, __p);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "feature-read.");
  quasar::SystemConfig::setPrefix((std::string *)v4, (const std::string *)__p);
  if (SBYTE7(v52) < 0)
    operator delete(__p[0]);
  kaldi::OnlineFeatureMatrixOptions::Register((uint64_t)this + 1968, (uint64_t)v4);
  std::string::basic_string[abi:ne180100]<0>(__p, "feature-read");
  quasar::SystemConfig::readPtree((uint64_t)v4, (uint64_t)__p, 0, 0);
  if (SBYTE7(v52) < 0)
    operator delete(__p[0]);
  v38 = quasar::gLogLevel;
  if (quasar::gLogLevel >= 5)
  {
    quasar::SystemConfig::getFullListOfParams(v4, (uint64_t)&v74);
    v39 = v74;
    v40 = (void **)v75.i64[0];
    if (v74 != (void **)v75.i64[0])
    {
      v41 = quasar::gLogLevel;
      do
      {
        if (v41 >= 5)
        {
          v66 = 0u;
          v67 = 0u;
          v64 = 0u;
          v65 = 0u;
          v62 = 0u;
          v63 = 0u;
          v60 = 0u;
          v61 = 0u;
          v58 = 0u;
          v59 = 0u;
          v56 = 0u;
          v57 = 0u;
          v54 = 0u;
          v55 = 0u;
          v52 = 0u;
          v53 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          v42 = *((char *)v39 + 23);
          if (v42 >= 0)
            v43 = (uint64_t)v39;
          else
            v43 = (uint64_t)*v39;
          if (v42 >= 0)
            v44 = *((unsigned __int8 *)v39 + 23);
          else
            v44 = (uint64_t)v39[1];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, v43, v44);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
          v41 = quasar::gLogLevel;
        }
        v39 += 3;
      }
      while (v39 != v40);
    }
    __p[0] = &v74;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    v38 = quasar::gLogLevel;
  }
  *((_BYTE *)this + 40) = 1;
  if (v38 >= 3)
  {
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Initialized SyncSpeechRecognizer with config ", 45);
    v46 = *((char *)this + 39);
    if (v46 >= 0)
      v47 = (uint64_t)v50;
    else
      v47 = *((_QWORD *)this + 2);
    if (v46 >= 0)
      v48 = *((unsigned __int8 *)this + 39);
    else
      v48 = *((_QWORD *)this + 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, v47, v48);
    quasar::QuasarProdInfoMessage::~QuasarProdInfoMessage((quasar::QuasarProdInfoMessage *)__p);
  }
  return 0;
}

void sub_1AD9E5AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 __p, __int128 a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25,__int128 a26,__int128 a27)
{
  void *v27;
  void *v28;
  _QWORD *v29;
  const char *v30;
  size_t v31;
  _QWORD *v32;

  if (a2 == 2)
  {
    v27 = __cxa_begin_catch(a1);
    if (quasar::gLogLevel >= 1)
    {
LABEL_8:
      v28 = v27;
      a26 = 0u;
      a27 = 0u;
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Error reading JSON config file: ", 32);
      v30 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v28 + 16))(v28);
      v31 = strlen(v30);
      v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v32);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__p);
    }
  }
  else
  {
    if (a2 != 1)
      _Unwind_Resume(a1);
    v27 = __cxa_begin_catch(a1);
    if (quasar::gLogLevel >= 1)
      goto LABEL_8;
  }
  __cxa_end_catch();
  JUMPOUT(0x1AD9E55D0);
}

void sub_1AD9E5DA4()
{
  __cxa_end_catch();
  JUMPOUT(0x1AD9E5B24);
}

void sub_1AD9E5DC8(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)va);
  JUMPOUT(0x1AD9E5DD4);
}

char *quasar::SyncSpeechRecognizer::getFrontend@<X0>(const void **a1@<X0>, quasar::SystemConfig *a2@<X1>, uint64_t **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t Ptree;
  __int128 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t i;
  std::string *v13;
  __int128 v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  std::string v26;
  std::string v27;
  __int128 v28;
  std::string __p;
  const void **v30;
  std::string v31;
  std::string v32;
  char v33;

  if (a3 + 1 == (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)a3, a1))
  {
    std::operator+<char>();
    Ptree = quasar::SystemConfig::getPtree((uint64_t)a2, (uint64_t)&__p);
    LODWORD(v30) = *(_DWORD *)Ptree;
    if (*(char *)(Ptree + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(Ptree + 8), *(_QWORD *)(Ptree + 16));
    }
    else
    {
      v9 = *(_OWORD *)(Ptree + 8);
      v31.__r_.__value_.__r.__words[2] = *(_QWORD *)(Ptree + 24);
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v9;
    }
    memset(&v32, 0, sizeof(v32));
    std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v32, *(_QWORD *)(Ptree + 32), *(_QWORD *)(Ptree + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(Ptree + 40) - *(_QWORD *)(Ptree + 32)) >> 3));
    v33 = *(_BYTE *)(Ptree + 56);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    memset(&__p, 0, sizeof(__p));
    v26.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
    v10 = std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, a1, (uint64_t)&std::piecewise_construct, (__int128 **)&v26);
    std::vector<std::shared_ptr<quasar::Decoder>>::__vdeallocate((void **)v10 + 7);
    *(std::string *)(v10 + 7) = __p;
    memset(&__p, 0, sizeof(__p));
    v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
    v11 = quasar::PTree::begin((quasar::PTree *)&v30);
    for (i = quasar::PTree::end((quasar::PTree *)&v30); v11 != i; v11 += 88)
    {
      std::operator+<char>();
      v13 = std::string::append(&v26, ".");
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v27.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      v15 = *(char *)(v11 + 23);
      if (v15 >= 0)
        v16 = (const std::string::value_type *)v11;
      else
        v16 = *(const std::string::value_type **)v11;
      if (v15 >= 0)
        v17 = *(unsigned __int8 *)(v11 + 23);
      else
        v17 = *(_QWORD *)(v11 + 8);
      v18 = std::string::append(&v27, v16, v17);
      v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      quasar::FeatureExtractorSimpleFactory::createFeatureExtractor(&__p, &v28);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v27.__r_.__value_.__l.__data_);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      quasar::FeatureExtractor::init((quasar::FeatureExtractor *)v28, a2);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
      v20 = std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, a1, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
      std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100]((char **)v20 + 7, &v28);
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
      if (*((_QWORD *)&v28 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
    quasar::PTree::~PTree((quasar::PTree *)&v30);
  }
  v30 = a1;
  v24 = std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, a1, (uint64_t)&std::piecewise_construct, (__int128 **)&v30);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  return std::vector<std::shared_ptr<quasar::FeatureExtractor>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::FeatureExtractor>*,std::shared_ptr<quasar::FeatureExtractor>*>((char *)a4, (_QWORD *)v24[7], (_QWORD *)v24[8], (v24[8] - v24[7]) >> 4);
}

void sub_1AD9E60E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  quasar::PTree::~PTree((quasar::PTree *)&a31);
  _Unwind_Resume(a1);
}

uint64_t quasar::RecognizerComponents<quasar::SyncDecoder>::validateFilters(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned __int8 **v9;
  char **v10;
  int v11;
  char **v12;
  char **v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  char *v18;
  char **v19;
  BOOL v20;
  char *v21;
  char **v22;
  char *v23;
  char **v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned int v37;
  std::string __p;
  uint64_t v40;
  std::__shared_weak_count *v41;
  char **v42;
  char *v43[2];
  __int16 v44;

  v3 = 1;
  v44 = 1;
  quasar::RecogRequestFilter::getPowerContextOptions((uint64_t)&v42);
  v4 = (_QWORD *)a1[6];
  v5 = a1 + 7;
  if (v4 != a1 + 7)
  {
    v6 = a1 + 10;
    do
    {
      v7 = (_QWORD *)a1[9];
      if (v7 != v6)
      {
        v37 = *((_DWORD *)v4 + 7);
        v33 = v5;
        v34 = a1;
        v31 = v4;
        v32 = v6;
        while (2)
        {
          v8 = 0;
          v35 = v7;
          v9 = (unsigned __int8 **)(v7 + 4);
          do
          {
            v10 = v42;
            if (v42 != v43)
            {
              v11 = *((unsigned __int8 *)&v44 + v8);
              v36 = v8;
              while (1)
              {
                v12 = v42;
                if (v42 != v43)
                  break;
LABEL_30:
                v23 = v10[1];
                if (v23)
                {
                  do
                  {
                    v24 = (char **)v23;
                    v23 = *(char **)v23;
                  }
                  while (v23);
                }
                else
                {
                  do
                  {
                    v24 = (char **)v10[2];
                    v20 = *v24 == (char *)v10;
                    v10 = v24;
                  }
                  while (!v20);
                }
                v10 = v24;
                v8 = v36;
                if (v24 == v43)
                  goto LABEL_36;
              }
              while (1)
              {
                v13 = v42;
                if (v42 != v43)
                  break;
LABEL_24:
                v21 = v12[1];
                if (v21)
                {
                  do
                  {
                    v22 = (char **)v21;
                    v21 = *(char **)v21;
                  }
                  while (v21);
                }
                else
                {
                  do
                  {
                    v22 = (char **)v12[2];
                    v20 = *v22 == (char *)v12;
                    v12 = v22;
                  }
                  while (!v20);
                }
                v12 = v22;
                if (v22 == v43)
                  goto LABEL_30;
              }
              while (1)
              {
                std::string::basic_string[abi:ne180100]<0>(&__p, "*");
                quasar::RecognizerComponents<quasar::SyncDecoder>::lookupRecognizerComponents((std::string *)(v13 + 4), v37, v9, &__p, v11 != 0, 1, (std::string *)(v10 + 4), (std::string *)(v12 + 4), &v40, a2);
                v15 = v40;
                v14 = v41;
                if (v41)
                {
                  p_shared_owners = (unint64_t *)&v41->__shared_owners_;
                  do
                    v17 = __ldaxr(p_shared_owners);
                  while (__stlxr(v17 - 1, p_shared_owners));
                  if (!v17)
                  {
                    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
                    std::__shared_weak_count::__release_weak(v14);
                  }
                }
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                if (!v15)
                  break;
                v18 = v13[1];
                if (v18)
                {
                  do
                  {
                    v19 = (char **)v18;
                    v18 = *(char **)v18;
                  }
                  while (v18);
                }
                else
                {
                  do
                  {
                    v19 = (char **)v13[2];
                    v20 = *v19 == (char *)v13;
                    v13 = v19;
                  }
                  while (!v20);
                }
                v13 = v19;
                if (v19 == v43)
                  goto LABEL_24;
              }
              v3 = 0;
              goto LABEL_51;
            }
LABEL_36:
            ++v8;
          }
          while (v8 != 2);
          v25 = v35;
          v26 = (_QWORD *)v35[1];
          if (v26)
          {
            do
            {
              v27 = v26;
              v26 = (_QWORD *)*v26;
            }
            while (v26);
          }
          else
          {
            do
            {
              v27 = (_QWORD *)v25[2];
              v20 = *v27 == (_QWORD)v25;
              v25 = v27;
            }
            while (!v20);
          }
          v7 = v27;
          v6 = v32;
          v5 = v33;
          a1 = v34;
          v4 = v31;
          if (v27 != v32)
            continue;
          break;
        }
      }
      v28 = (_QWORD *)v4[1];
      if (v28)
      {
        do
        {
          v29 = v28;
          v28 = (_QWORD *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v29 = (_QWORD *)v4[2];
          v20 = *v29 == (_QWORD)v4;
          v4 = v29;
        }
        while (!v20);
      }
      v3 = 1;
      v4 = v29;
    }
    while (v29 != v5);
  }
LABEL_51:
  std::__tree<std::string>::destroy((uint64_t)&v42, v43[0]);
  return v3;
}

void sub_1AD9E645C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,char a26,char *a27)
{
  if (a23 < 0)
    operator delete(__p);
  std::__tree<std::string>::destroy((uint64_t)&a26, a27);
  _Unwind_Resume(a1);
}

char *quasar::SyncSpeechRecognizer::getDecoderChain@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t **v6;
  quasar::SystemConfig *v7;
  uint64_t Ptree;
  __int128 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t i;
  std::string *v13;
  __int128 v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  std::string v26;
  std::string v27;
  __int128 v28;
  void *__p[2];
  uint64_t v30;
  const void **v31;
  std::string v32;
  std::string v33;
  char v34;

  v6 = (uint64_t **)(a1 + 1920);
  if (a1 + 1928 == std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 1920, a2))
  {
    v7 = (quasar::SystemConfig *)(a1 + 48);
    std::operator+<char>();
    Ptree = quasar::SystemConfig::getPtree((uint64_t)v7, (uint64_t)__p);
    LODWORD(v31) = *(_DWORD *)Ptree;
    if (*(char *)(Ptree + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)(Ptree + 8), *(_QWORD *)(Ptree + 16));
    }
    else
    {
      v9 = *(_OWORD *)(Ptree + 8);
      v32.__r_.__value_.__r.__words[2] = *(_QWORD *)(Ptree + 24);
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v9;
    }
    memset(&v33, 0, sizeof(v33));
    std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v33, *(_QWORD *)(Ptree + 32), *(_QWORD *)(Ptree + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(Ptree + 40) - *(_QWORD *)(Ptree + 32)) >> 3));
    v34 = *(_BYTE *)(Ptree + 56);
    if (SHIBYTE(v30) < 0)
      operator delete(__p[0]);
    __p[0] = 0;
    __p[1] = 0;
    v30 = 0;
    v26.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    v10 = std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v26);
    std::vector<std::shared_ptr<quasar::Decoder>>::__vdeallocate((void **)v10 + 7);
    *(_OWORD *)(v10 + 7) = *(_OWORD *)__p;
    v10[9] = v30;
    __p[1] = 0;
    v30 = 0;
    __p[0] = 0;
    v27.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
    v11 = quasar::PTree::begin((quasar::PTree *)&v31);
    for (i = quasar::PTree::end((quasar::PTree *)&v31); v11 != i; v11 += 88)
    {
      std::operator+<char>();
      v13 = std::string::append(&v26, ".");
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v27.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      v15 = *(char *)(v11 + 23);
      if (v15 >= 0)
        v16 = (const std::string::value_type *)v11;
      else
        v16 = *(const std::string::value_type **)v11;
      if (v15 >= 0)
        v17 = *(unsigned __int8 *)(v11 + 23);
      else
        v17 = *(_QWORD *)(v11 + 8);
      v18 = std::string::append(&v27, v16, v17);
      v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v30 = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      quasar::SyncDecoder::createDecoder((uint64_t)__p, (uint64_t)&v28);
      if (SHIBYTE(v30) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v27.__r_.__value_.__l.__data_);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      if ((_QWORD)v28)
      {
        quasar::SyncDecoder::init((quasar::SyncDecoder *)v28, v7);
        __p[0] = a2;
        v20 = std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
        std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100]((char **)v20 + 7, &v28);
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
      if (*((_QWORD *)&v28 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
    quasar::PTree::~PTree((quasar::PTree *)&v31);
  }
  v31 = a2;
  v24 = std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v31);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return std::vector<std::shared_ptr<quasar::SyncDecoder>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::SyncDecoder>*,std::shared_ptr<quasar::SyncDecoder>*>((char *)a3, (_QWORD *)v24[7], (_QWORD *)v24[8], (v24[8] - v24[7]) >> 4);
}

void sub_1AD9E6798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  quasar::PTree::~PTree((quasar::PTree *)&a31);
  _Unwind_Resume(a1);
}

uint64_t *quasar::SyncSpeechRecognizer::getDecodable@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t **v6;
  std::string *v7;
  uint64_t Ptree;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  uint64_t *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t *result;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::string v26;
  std::string v27;
  quasar::Decodable *v28;
  std::__shared_weak_count *v29;
  std::string __p;
  const void **v31;
  std::string v32;
  std::string v33;
  char v34;

  v6 = (uint64_t **)(a1 + 1896);
  if (a1 + 1904 == std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 1896, a2))
  {
    v7 = (std::string *)(a1 + 48);
    std::operator+<char>();
    Ptree = quasar::SystemConfig::getPtree((uint64_t)v7, (uint64_t)&__p);
    LODWORD(v31) = *(_DWORD *)Ptree;
    if (*(char *)(Ptree + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)(Ptree + 8), *(_QWORD *)(Ptree + 16));
    }
    else
    {
      v9 = *(_OWORD *)(Ptree + 8);
      v32.__r_.__value_.__r.__words[2] = *(_QWORD *)(Ptree + 24);
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v9;
    }
    memset(&v33, 0, sizeof(v33));
    std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v33, *(_QWORD *)(Ptree + 32), *(_QWORD *)(Ptree + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(Ptree + 40) - *(_QWORD *)(Ptree + 32)) >> 3));
    v34 = *(_BYTE *)(Ptree + 56);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::operator+<char>();
    v10 = std::string::append(&v26, ".");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = quasar::PTree::begin((quasar::PTree *)&v31);
    v13 = *(char *)(v12 + 23);
    if (v13 >= 0)
      v14 = (const std::string::value_type *)v12;
    else
      v14 = *(const std::string::value_type **)v12;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(v12 + 23);
    else
      v15 = *(_QWORD *)(v12 + 8);
    v16 = std::string::append(&v27, v14, v15);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    quasar::Decodable::createDecodable(&__p, &v28);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    quasar::Decodable::init(v28, v7);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    v18 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v18 + 7, (uint64_t *)&v28);
    v19 = v29;
    if (v29)
    {
      p_shared_owners = (unint64_t *)&v29->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    quasar::PTree::~PTree((quasar::PTree *)&v31);
  }
  v31 = a2;
  result = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v31);
  v23 = result[8];
  *a3 = result[7];
  a3[1] = v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  return result;
}

void sub_1AD9E6AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a30 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  quasar::PTree::~PTree((quasar::PTree *)&a32);
  _Unwind_Resume(a1);
}

void quasar::SyncSpeechRecognizer::reset(uint64_t a1, unsigned int a2, uint64_t a3, unsigned __int8 **a4, uint64_t a5, uint64_t a6, std::string *a7, unsigned __int8 a8, unsigned __int8 a9, int a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  _OWORD v29[17];
  unsigned __int8 v30;
  unsigned __int8 v31;
  unsigned int v32;

  v32 = a2;
  v31 = a8;
  v30 = a9;
  if (!*(_BYTE *)(a1 + 40))
  {
    memset(v29, 0, sizeof(v29));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v29, "SyncSpeechRecognizer not initialized");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v29);
  }
  v15 = a1 + 8;
  v14 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v14)
    std::default_delete<quasar::SessionData>::operator()[abi:ne180100](a1 + 8, v14);
  std::make_unique[abi:ne180100]<quasar::SessionData,unsigned int &,std::string const&,std::string const&,BOOL &,BOOL &,char const(&)[1],char const(&)[1],char const(&)[1],std::string const&,unsigned int const&,std::vector<std::shared_ptr<quasar::RecognizerComponents<quasar::SyncDecoder>>> &,kaldi::OnlineFeatureMatrixOptions &>(&v32, a4, a7, &v31, &v30, "", "", "", (uint64_t *)v29, a6, &a10, (uint64_t *)(a1 + 1944), (_DWORD *)(a1 + 1968));
  v16 = *(_QWORD *)&v29[0];
  *(_QWORD *)&v29[0] = 0;
  v17 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v16;
  if (v17)
  {
    std::default_delete<quasar::SessionData>::operator()[abi:ne180100](v15, v17);
    v18 = *(_QWORD *)&v29[0];
    *(_QWORD *)&v29[0] = 0;
    if (v18)
      std::default_delete<quasar::SessionData>::operator()[abi:ne180100]((uint64_t)v29, v18);
  }
  v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v15 + 40) - 16);
  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 56))(v19);
  v20 = *(_QWORD *)(*(_QWORD *)v15 + 16);
  v21 = *(uint64_t **)(v20 + 80);
  v22 = *(uint64_t **)(v20 + 88);
  while (v21 != v22)
  {
    v23 = *v21;
    if (*v21)
    {
      v24 = (std::__shared_weak_count *)v21[1];
      *(_QWORD *)&v29[0] = *v21;
      *((_QWORD *)&v29[0] + 1) = v24;
      if (v24)
      {
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldxr(p_shared_owners);
        while (__stxr(v26 + 1, p_shared_owners));
      }
    }
    else
    {
      v24 = 0;
      v29[0] = 0uLL;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
    if (v24)
    {
      v27 = (unint64_t *)&v24->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v21 += 2;
  }
}

void sub_1AD9E6D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<quasar::SessionData,unsigned int &,std::string const&,std::string const&,BOOL &,BOOL &,char const(&)[1],char const(&)[1],char const(&)[1],std::string const&,unsigned int const&,std::vector<std::shared_ptr<quasar::RecognizerComponents<quasar::SyncDecoder>>> &,kaldi::OnlineFeatureMatrixOptions &>(unsigned int *a1@<X0>, unsigned __int8 **a2@<X1>, std::string *a3@<X2>, unsigned __int8 *a4@<X3>, unsigned __int8 *a5@<X4>, char *a6@<X5>, char *a7@<X6>, char *a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, _DWORD *a11, uint64_t *a12, _DWORD *a13)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::string __p;
  std::string v26;
  std::string v27;

  v22 = operator new();
  v23 = *a1;
  LODWORD(a4) = *a4;
  LODWORD(a5) = *a5;
  std::string::basic_string[abi:ne180100]<0>(&v27, a6);
  std::string::basic_string[abi:ne180100]<0>(&v26, a7);
  std::string::basic_string[abi:ne180100]<0>(&__p, a8);
  LODWORD(v24) = *a11;
  quasar::SessionData::SessionData(v22, v23, a2, a3, (_DWORD)a4 != 0, (_DWORD)a5 != 0, &v27, &v26, &__p, a10, v24, a12, a13);
  *a9 = v22;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
}

void sub_1AD9E6E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a31 < 0)
    operator delete(a26);
  MEMORY[0x1AF44D190](v31, 0x20C40313AD07FLL);
  _Unwind_Resume(a1);
}

uint64_t quasar::SyncSpeechRecognizer::addAudio@<X0>(quasar::SyncRecogAudioBuffer ***this@<X0>, const __int16 *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  quasar::SyncRecogAudioBuffer::addAudio(*this[1], a2, a3);
  return quasar::SyncSpeechRecognizer::runDecoders((uint64_t)this, a4);
}

uint64_t quasar::SyncSpeechRecognizer::runDecoders@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v3 = *(_QWORD **)(this + 8);
  v4 = v3[2];
  v5 = *(uint64_t **)(v4 + 80);
  v6 = *(uint64_t **)(v4 + 88);
  if (v5 != v6)
  {
    v7 = this;
    do
    {
      v8 = *v5;
      v5 += 2;
      this = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 16))(v8, *(_QWORD *)(v7 + 8));
    }
    while (v5 != v6);
    v3 = *(_QWORD **)(v7 + 8);
  }
  v10 = v3[11];
  v9 = v3[12];
  *a2 = v10;
  a2[1] = v9;
  if (v9)
  {
    v11 = (unint64_t *)(v9 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return this;
}

uint64_t quasar::SyncSpeechRecognizer::addScaledAudio@<X0>(quasar::SyncRecogAudioBuffer ***this@<X0>, float *a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  quasar::SyncRecogAudioBuffer::addScaledAudio(*this[1], a2, a3);
  return quasar::SyncSpeechRecognizer::runDecoders((uint64_t)this, a4);
}

uint64_t quasar::SyncSpeechRecognizer::addUnscaledAudio@<X0>(quasar::SyncRecogAudioBuffer ***this@<X0>, float *a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  quasar::SyncRecogAudioBuffer::addUnscaledAudio(*this[1], a2, a3);
  return quasar::SyncSpeechRecognizer::runDecoders((uint64_t)this, a4);
}

uint64_t quasar::SyncSpeechRecognizer::endAudio@<X0>(quasar::SyncSpeechRecognizer *this@<X0>, _QWORD *a2@<X8>)
{
  quasar::SyncRecogAudioBuffer::endAudio(**((_QWORD **)this + 1));
  return quasar::SyncSpeechRecognizer::runDecoders((uint64_t)this, a2);
}

void quasar::SyncSpeechRecognizer::~SyncSpeechRecognizer(quasar::SyncSpeechRecognizer *this)
{
  quasar::SyncSpeechRecognizer::~SyncSpeechRecognizer(this);
  JUMPOUT(0x1AF44D190);
}

{
  uint64_t v2;
  void **v3;

  *(_QWORD *)this = &off_1E5D37EC8;
  v3 = (void **)((char *)this + 1944);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>>>::destroy((uint64_t)this + 1920, *((_QWORD **)this + 241));
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 1896, *((_QWORD **)this + 238));
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>>>::destroy((uint64_t)this + 1872, *((_QWORD **)this + 235));
  quasar::SpeechModelInfo::~SpeechModelInfo((quasar::SyncSpeechRecognizer *)((char *)this + 1592));
  quasar::SystemConfig::~SystemConfig((quasar::SyncSpeechRecognizer *)((char *)this + 48));
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
  v2 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    std::default_delete<quasar::SessionData>::operator()[abi:ne180100]((uint64_t)this + 8, v2);
}

void quasar::QuasarProdInfoMessage::~QuasarProdInfoMessage(quasar::QuasarProdInfoMessage *this)
{
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  void *__p;
  char v6;

  v2 = (void (*)(uint64_t))quasar::QuasarProdInfoMessage::logger;
  std::stringbuf::str();
  v2((uint64_t)&__p);
  if (v6 < 0)
    operator delete(__p);
  v3 = MEMORY[0x1E0DE4F60];
  v4 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)this = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = *(_QWORD *)(v3 + 24);
  *((_QWORD *)this + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF44D094]((char *)this + 112);
}

void std::default_delete<quasar::SessionData>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void **v4;

  if (a2)
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2 + 88);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2 + 72);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2 + 56);
    v4 = (void **)(a2 + 32);
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v4);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2 + 16);
    v3 = std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2);
    MEMORY[0x1AF44D190](v3, 0x20C40313AD07FLL);
  }
}

void std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::RecognizerComponents<quasar::SyncDecoder>,std::allocator<quasar::RecognizerComponents<quasar::SyncDecoder>>,quasar::SystemConfig::Version,std::string const&,std::string const&,std::vector<std::shared_ptr<quasar::FeatureExtractor>> &,std::shared_ptr<quasar::Decodable> &,std::vector<std::shared_ptr<quasar::SyncDecoder>> &,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD **a4@<X4>, uint64_t *a5@<X5>, _QWORD **a6@<X6>, _QWORD *a7@<X8>)
{
  _QWORD *v14;
  _QWORD *result;

  v14 = operator new(0x98uLL);
  result = std::__shared_ptr_emplace<quasar::RecognizerComponents<quasar::SyncDecoder>>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig::Version,std::string const&,std::string const&,std::vector<std::shared_ptr<quasar::FeatureExtractor>> &,std::shared_ptr<quasar::Decodable> &,std::vector<std::shared_ptr<quasar::SyncDecoder>> &,std::allocator<quasar::RecognizerComponents<quasar::SyncDecoder>>,0>(v14, a1, a2, a3, a4, a5, a6);
  *a7 = v14 + 3;
  a7[1] = v14;
  return result;
}

void sub_1AD9E733C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::RecognizerComponents<quasar::SyncDecoder>>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig::Version,std::string const&,std::string const&,std::vector<std::shared_ptr<quasar::FeatureExtractor>> &,std::shared_ptr<quasar::Decodable> &,std::vector<std::shared_ptr<quasar::SyncDecoder>> &,std::allocator<quasar::RecognizerComponents<quasar::SyncDecoder>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5, uint64_t *a6, _QWORD **a7)
{
  char v9;

  a1[2] = 0;
  *a1 = &unk_1E5D43830;
  a1[1] = 0;
  std::allocator<quasar::RecognizerComponents<quasar::SyncDecoder>>::construct[abi:ne180100]<quasar::RecognizerComponents<quasar::SyncDecoder>,quasar::SystemConfig::Version,std::string const&,std::string const&,std::vector<std::shared_ptr<quasar::FeatureExtractor>> &,std::shared_ptr<quasar::Decodable> &,std::vector<std::shared_ptr<quasar::SyncDecoder>> &>((uint64_t)&v9, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7);
  return a1;
}

void sub_1AD9E73B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::RecognizerComponents<quasar::SyncDecoder>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43830;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::RecognizerComponents<quasar::SyncDecoder>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43830;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::RecognizerComponents<quasar::SyncDecoder>>::__on_zero_shared(uint64_t a1)
{
  char v2;

  return std::allocator<quasar::RecognizerComponents<quasar::SyncDecoder>>::destroy[abi:ne180100]((uint64_t)&v2, a1 + 24);
}

void std::allocator<quasar::RecognizerComponents<quasar::SyncDecoder>>::construct[abi:ne180100]<quasar::RecognizerComponents<quasar::SyncDecoder>,quasar::SystemConfig::Version,std::string const&,std::string const&,std::vector<std::shared_ptr<quasar::FeatureExtractor>> &,std::shared_ptr<quasar::Decodable> &,std::vector<std::shared_ptr<quasar::SyncDecoder>> &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD **a6, uint64_t *a7, _QWORD **a8)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::string v22;
  std::string v23;

  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v23 = *(std::string *)a4;
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    v22 = *(std::string *)a5;
  v14 = (std::__shared_weak_count *)a7[1];
  v20 = *a7;
  v21 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  quasar::RecognizerComponents<quasar::SyncDecoder>::RecognizerComponents(a2, a3, (uint64_t)&v23, (uint64_t)&v22, a6, &v20, a8);
  v17 = v21;
  if (v21)
  {
    v18 = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
}

void sub_1AD9E7564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::RecognizerComponents<quasar::SyncDecoder>::RecognizerComponents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5, _QWORD *a6, _QWORD **a7)
{
  __int128 v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v17;

  std::allocate_shared[abi:ne180100]<quasar::RecogRequestFilter,std::allocator<quasar::RecogRequestFilter>,quasar::SystemConfig::Version const&,std::string const&,void>(&v17);
  *(_OWORD *)a1 = v17;
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    v12 = *(_OWORD *)a4;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a4 + 16);
    *(_OWORD *)(a1 + 16) = v12;
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  std::vector<std::shared_ptr<quasar::FeatureExtractor>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::FeatureExtractor>*,std::shared_ptr<quasar::FeatureExtractor>*>((char *)(a1 + 40), *a5, a5[1], ((char *)a5[1] - (char *)*a5) >> 4);
  *(_QWORD *)(a1 + 64) = *a6;
  v13 = a6[1];
  *(_QWORD *)(a1 + 72) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  std::vector<std::shared_ptr<quasar::SyncDecoder>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::SyncDecoder>*,std::shared_ptr<quasar::SyncDecoder>*>((char *)(a1 + 80), *a7, a7[1], ((char *)a7[1] - (char *)*a7) >> 4);
  quasar::removeSpaces(a4, (std::string *)(a1 + 104));
  return a1;
}

void sub_1AD9E76A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::RecogRequestFilter,std::allocator<quasar::RecogRequestFilter>,quasar::SystemConfig::Version const&,std::string const&,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0xF0uLL);
  result = std::__shared_ptr_emplace<quasar::RecogRequestFilter>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig::Version const&,std::string const&,std::allocator<quasar::RecogRequestFilter>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD9E7750(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::RecogRequestFilter>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig::Version const&,std::string const&,std::allocator<quasar::RecogRequestFilter>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D43398;
  a1[1] = 0;
  quasar::RecogRequestFilter::RecogRequestFilter(a1 + 3);
  return a1;
}

void sub_1AD9E779C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::RecogRequestFilter>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43398;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::RecogRequestFilter>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43398;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::RecogRequestFilter>::__on_zero_shared(uint64_t a1)
{
  quasar::RecogRequestFilter::~RecogRequestFilter((quasar::RecogRequestFilter *)(a1 + 24));
}

uint64_t std::allocator<quasar::RecognizerComponents<quasar::SyncDecoder>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void **v4;

  if (*(char *)(a2 + 127) < 0)
    operator delete(*(void **)(a2 + 104));
  v4 = (void **)(a2 + 80);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2 + 64);
  v4 = (void **)(a2 + 40);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*(char *)(a2 + 39) < 0)
    operator delete(*(void **)(a2 + 16));
  return std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2);
}

void quasar::RecognizerComponents<quasar::SyncDecoder>::lookupRecognizerComponents(std::string *__str@<X7>, uint64_t a2@<X0>, unsigned __int8 **a3@<X1>, std::string *a4@<X2>, uint64_t a5@<X3>, uint64_t a6@<X4>, std::string *a7@<X5>, std::string *a8@<X6>, _QWORD *a9@<X8>, uint64_t *a10)
{
  uint64_t v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  void *__p[2];
  unsigned __int8 v27;
  _OWORD v28[18];

  v19 = *a10;
  v18 = a10[1];
  while (v19 != v18)
  {
    if (quasar::RecogRequestFilter::isMatch(**(_QWORD **)v19, a2, a3, a4, a5, a6, a7, a8, __str))
    {
      v22 = *(_QWORD *)(v19 + 8);
      *a9 = *(_QWORD *)v19;
      a9[1] = v22;
      if (v22)
      {
        v23 = (unint64_t *)(v22 + 8);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      return;
    }
    v19 += 16;
  }
  if (quasar::gLogLevel >= 1)
  {
    memset(v28, 0, 272);
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
    quasar::RecogRequestFilter::noMatchingComponentErrorMessage(a2, (uint64_t)a3, (uint64_t)a4, a5, a6, (uint64_t)a7, (uint64_t)a8, (uint64_t)__str);
    if ((v27 & 0x80u) == 0)
      v20 = __p;
    else
      v20 = (void **)__p[0];
    if ((v27 & 0x80u) == 0)
      v21 = v27;
    else
      v21 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v20, v21);
    if ((char)v27 < 0)
      operator delete(__p[0]);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v28);
  }
  *a9 = 0;
  a9[1] = 0;
}

void sub_1AD9E7A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0)
    operator delete(__p);
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a18);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1AD9E7B54(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

char *std::vector<std::shared_ptr<quasar::SyncDecoder>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::SyncDecoder>*,std::shared_ptr<quasar::SyncDecoder>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1AD9E7C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<quasar::FeatureExtractor>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::FeatureExtractor>*,std::shared_ptr<quasar::FeatureExtractor>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1AD9E7CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void kaldi::quasar::Mil2BnnsCompiler::readCompileOptionsFromConfig(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  _QWORD *v4;
  int v5;
  void *__p[2];
  char v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[15];
  unsigned __int8 v12;

  v12 = 0;
  kaldi::Input::Input(v11, a2, &v12);
  v3 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v11);
  while ((*((_BYTE *)v3 + *(_QWORD *)(*v3 - 24) + 32) & 2) == 0)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    kaldi::ReadToken(v3, v12, (uint64_t)&v8);
    if (SHIBYTE(v10) < 0)
    {
      if (v9 == 8)
      {
        v4 = v8;
        goto LABEL_7;
      }
    }
    else if (SHIBYTE(v10) == 8)
    {
      v4 = &v8;
LABEL_7:
      if (*v4 == 0x3E656E69676E453CLL)
      {
        v5 = v12;
        std::string::basic_string[abi:ne180100]<0>(__p, "</Engine>");
        (*(void (**)(uint64_t, uint64_t *, BOOL, void **))(*(_QWORD *)a1 + 16))(a1, v3, v5 != 0, __p);
        if (v7 < 0)
          operator delete(__p[0]);
      }
    }
    std::ws[abi:ne180100]<char,std::char_traits<char>>(v3);
    if (SHIBYTE(v10) < 0)
      operator delete(v8);
  }
  kaldi::Input::~Input((kaldi::Input *)v11);
}

void sub_1AD9E7E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  kaldi::Input::~Input((kaldi::Input *)&a21);
  _Unwind_Resume(a1);
}

BOOL kaldi::quasar::onDeviceMil2BnnsCompile(__int128 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _BOOL8 v5;
  void *v7[2];
  char v8;
  void *v9[20];

  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
    return 0;
  kaldi::quasar::BNNSGraphNetworkConfig::BNNSGraphNetworkConfig((uint64_t)v9, a1, (__int128 *)a2);
  v9[0] = &unk_1E5D334F8;
  kaldi::quasar::Mil2BnnsCompiler::readCompileOptionsFromConfig((uint64_t)v9, a3);
  kaldi::quasar::BNNSGraphNetworkConfig::CompiledBNNSGraph((kaldi::quasar::BNNSGraphNetworkConfig *)v9, (uint64_t)v7);
  v5 = v7[0] != 0;
  if (v8)
    munmap(v7[0], (size_t)v7[1]);
  else
    free(v7[0]);
  kaldi::quasar::BNNSGraphNetworkConfig::~BNNSGraphNetworkConfig(v9);
  return v5;
}

void sub_1AD9E7F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::quasar::BNNSGraphNetworkConfig::~BNNSGraphNetworkConfig((void **)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::validateBnnsIr(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  size_t v3;

  v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0)
    v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  result = (uint64_t)kaldi::quasar::BNNSGraphNetworkConfig::MapBNNSIRFile(a1);
  if (result)
  {
    munmap((void *)result, v3);
    return 1;
  }
  return result;
}

void kaldi::quasar::Mil2BnnsCompiler::~Mil2BnnsCompiler(void **this)
{
  kaldi::quasar::BNNSGraphNetworkConfig::~BNNSGraphNetworkConfig(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::quasar::BNNSGraphNetworkConfig::~BNNSGraphNetworkConfig(void **this)
{
  void **v2;

  *this = &off_1E5D33AC8;
  v2 = this + 16;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  kaldi::quasar::ComputeEngineConfigItf::~ComputeEngineConfigItf((kaldi::quasar::ComputeEngineConfigItf *)this);
}

{
  kaldi::quasar::BNNSGraphNetworkConfig::~BNNSGraphNetworkConfig(this);
  JUMPOUT(0x1AF44D190);
}

void sub_1AD9E811C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1AD9E84B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 __p, __int128 a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  void *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  void *v51;
  void *v52;
  _QWORD *v53;
  const char *v54;
  size_t v55;

  if (a2 == 1)
  {
    v51 = __cxa_begin_catch(a1);
    if (quasar::gLogLevel >= 1)
    {
      v52 = v51;
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      a10 = 0u;
      a11 = 0u;
      __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"EAR Initialization failed for QuasarEuclid, error:", 50);
      v54 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
      v55 = strlen(v54);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)v54, v55);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__p);
    }
    __cxa_end_catch();
    JUMPOUT(0x1AD9E846CLL);
  }
  _Block_object_dispose(&a35, 8);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v49);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&a46);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t __Block_byref_object_dispose__5(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(a1 + 48);
}

void sub_1AD9E872C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;

  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1AD9E8948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;

  __p = &a15;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_1AD9E8A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;

  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1AD9E8BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1AD9E8CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1AD9E8D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1AD9E8E38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1AD9E8EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_1AD9E8F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_1AD9E8FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<kaldi::CuVector<float>,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32))
  {
    *(_QWORD *)a1 = &unk_1E5D341C8;
    kaldi::CuVector<float>::Destroy(a1);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

_QWORD *std::vector<quasar::Token>::__init_with_size[abi:ne180100]<std::__wrap_iter<quasar::Token const*>,std::__wrap_iter<quasar::Token const*>>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::Token>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Token>,quasar::Token const*,quasar::Token const*,quasar::Token*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1AD9E90F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Token>,quasar::Token const*,quasar::Token const*,quasar::Token*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      quasar::Token::Token((std::string *)(a4 + v7), (const quasar::Token *)(a2 + v7));
      v7 += 224;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1AD9E916C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 224;
    do
    {
      quasar::Token::~Token((void **)(v4 + v2));
      v2 -= 224;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::mt::utils::readWordsFromFile@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::locale::id *v5;
  const std::locale::facet *v6;
  unsigned __int8 v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *__p[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  std::locale v33;
  _QWORD v34[2];
  _BYTE v35[408];
  _QWORD v36[20];

  v36[19] = *MEMORY[0x1E0C80C00];
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  std::ifstream::basic_ifstream(v34);
  v4 = *(_QWORD *)(v34[0] - 24);
  if ((v35[v4 + 16] & 5) != 0)
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"failed to open word list file '", 31);
    v12 = *(char *)(a1 + 23);
    if (v12 >= 0)
      v13 = a1;
    else
      v13 = *(_QWORD *)a1;
    if (v12 >= 0)
      v14 = *(unsigned __int8 *)(a1 + 23);
    else
      v14 = *(_QWORD *)(a1 + 8);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"'", 1);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v17 = 0;
  v5 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v34 + v4));
    v6 = std::locale::use_facet(&v33, v5);
    v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale(&v33);
    v8 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v34, (uint64_t)__p, v7);
    v9 = (void *)BYTE7(v17);
    if ((*((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 32) & 5) != 0)
      break;
    if (SBYTE7(v17) < 0)
      v9 = __p[1];
    if (v9)
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a2, (unsigned __int8 *)__p, (uint64_t)__p);
    v4 = *(_QWORD *)(v34[0] - 24);
  }
  if ((BYTE7(v17) & 0x80) != 0)
    operator delete(__p[0]);
  v34[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v34 + *(_QWORD *)(v34[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1AF44CA70](v35);
  std::istream::~istream();
  return MEMORY[0x1AF44D094](v36);
}

void sub_1AD9E93A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,std::locale a46,char a47)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1AD9E9E7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AD9EA140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **p_p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  void *v27;

  p_p = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);

  _Unwind_Resume(a1);
}

void sub_1AD9EA274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)_EARLanguageDetectorV2;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1AD9EA4EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1AD9EA5AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1AD9EA684(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1AD9EA7F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{

}

void sub_1AD9EA914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t maxpool(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  float v6;

  result = kaldi::MatrixBase<float>::NumCols(a1);
  if ((int)result >= 1)
  {
    v5 = 0;
    do
    {
      v6 = kaldi::MatrixBase<float>::MaxByCol(a1, v5, 0);
      if (v6 < *(float *)(*a2 + 4 * v5))
        v6 = *(float *)(*a2 + 4 * v5);
      *(float *)(*a2 + 4 * v5++) = v6;
      result = kaldi::MatrixBase<float>::NumCols(a1);
    }
    while (v5 < (int)result);
  }
  return result;
}

void sub_1AD9EAE58(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  void *v11;
  va_list va;

  va_start(va, a10);

  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_48c54_ZTSNSt3__110shared_ptrIN6quasar17PSRAudioProcessorEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_48c54_ZTSNSt3__110shared_ptrIN6quasar17PSRAudioProcessorEEE(uint64_t a1)
{
  return std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 48);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::RecogAudioBuffer,std::allocator<quasar::RecogAudioBuffer>,unsigned long &,int,int,BOOL,char const(&)[1],std::shared_ptr<kaldi::Timer const>,int,void>@<X0>(unsigned int *a1@<X1>, int *a2@<X2>, int *a3@<X3>, char *a4@<X4>, char *a5@<X5>, __int128 *a6@<X6>, int *a7@<X7>, _QWORD *a8@<X8>)
{
  _QWORD *v16;
  _QWORD *result;

  v16 = operator new(0x160uLL);
  result = std::__shared_ptr_emplace<quasar::RecogAudioBuffer>::__shared_ptr_emplace[abi:ne180100]<unsigned long &,int,int,BOOL,char const(&)[1],std::shared_ptr<kaldi::Timer const>,int,std::allocator<quasar::RecogAudioBuffer>,0>(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_1AD9EB06C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::RecogAudioBuffer>::__shared_ptr_emplace[abi:ne180100]<unsigned long &,int,int,BOOL,char const(&)[1],std::shared_ptr<kaldi::Timer const>,int,std::allocator<quasar::RecogAudioBuffer>,0>(_QWORD *a1, unsigned int *a2, int *a3, int *a4, char *a5, char *__s, __int128 *a7, int *a8)
{
  char v10;

  a1[2] = 0;
  *a1 = &unk_1E5D42F00;
  a1[1] = 0;
  std::allocator<quasar::RecogAudioBuffer>::construct[abi:ne180100]<quasar::RecogAudioBuffer,unsigned long &,int,int,BOOL,char const(&)[1],std::shared_ptr<kaldi::Timer const>,int>((int)&v10, (uint64_t)(a1 + 3), a2, a3, a4, a5, __s, a7, a8);
  return a1;
}

void sub_1AD9EB0E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::RecogAudioBuffer>::construct[abi:ne180100]<quasar::RecogAudioBuffer,unsigned long &,int,int,BOOL,char const(&)[1],std::shared_ptr<kaldi::Timer const>,int>(int a1, uint64_t a2, unsigned int *a3, int *a4, int *a5, char *a6, char *__s, __int128 *a8, int *a9)
{
  unsigned int v11;
  int v12;
  int v13;
  char v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  void *__p[2];
  char v20;

  v11 = *a3;
  v12 = *a4;
  v13 = *a5;
  v14 = *a6;
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  v18 = *a8;
  *(_QWORD *)a8 = 0;
  *((_QWORD *)a8 + 1) = 0;
  quasar::RecogAudioBuffer::RecogAudioBuffer(a2, v11, v12, v13, v14, (__int128 *)__p, &v18, *a9, 0, 4000);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v20 < 0)
    operator delete(__p[0]);
}

void sub_1AD9EB1E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::PSRAudioProcessor,std::allocator<quasar::PSRAudioProcessor>,quasar::SystemConfig &,std::string,unsigned long &,std::shared_ptr<quasar::RecogAudioBuffer> &,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, unsigned int *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x68uLL);
  result = std::__shared_ptr_emplace<quasar::PSRAudioProcessor>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig &,std::string,unsigned long &,std::shared_ptr<quasar::RecogAudioBuffer> &,std::allocator<quasar::PSRAudioProcessor>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1AD9EB268(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::PSRAudioProcessor>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig &,std::string,unsigned long &,std::shared_ptr<quasar::RecogAudioBuffer> &,std::allocator<quasar::PSRAudioProcessor>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  a1[2] = 0;
  *a1 = &unk_1E5D43088;
  a1[1] = 0;
  quasar::PSRAudioProcessor::PSRAudioProcessor(a1 + 3, a2, a3, *a4);
  return a1;
}

void sub_1AD9EB2B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::PSRAudioProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43088;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::PSRAudioProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43088;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::PSRAudioProcessor>::__on_zero_shared(uint64_t a1)
{
  char v2;

  return std::allocator<quasar::PSRAudioProcessor>::destroy[abi:ne180100]((uint64_t)&v2, a1 + 24);
}

uint64_t std::allocator<quasar::PSRAudioProcessor>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void **v4;

  v4 = (void **)(a2 + 56);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)(a2 + 32);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2 + 16);
  return std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2);
}

uint64_t quasar::PTree::getInt<int>(uint64_t a1)
{
  return std::stoi((const std::string *)(a1 + 8), 0, 10);
}

uint64_t quasar::PTree::getInt<int>(uint64_t a1, __int128 *a2)
{
  uint64_t Child;

  Child = quasar::PTree::getChild(a1, a2);
  return std::stoi((const std::string *)(Child + 8), 0, 10);
}

uint64_t quasar::PTree::getChild(uint64_t a1, __int128 *a2)
{
  unsigned __int8 **v4;
  unsigned __int8 **v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  _QWORD *exception;
  void *__p[2];
  char v17;
  unsigned __int8 **v18;
  unsigned __int8 **v19;

  std::string::basic_string[abi:ne180100]<0>(__p, ".");
  quasar::split((uint64_t)a2, (uint64_t *)__p, 0, (uint64_t)&v18);
  if (v17 < 0)
    operator delete(__p[0]);
  v4 = v18;
  v5 = v19;
  if (v18 == v19 || (v7 = *(_QWORD *)(a1 + 32), v6 = *(_QWORD *)(a1 + 40), v7 == v6))
  {
LABEL_26:
    exception = __cxa_allocate_exception(0x20uLL);
    quasar::PTree::BadPath::BadPath(exception, a2);
  }
  while (2)
  {
    v8 = *((char *)v4 + 23);
    if (v8 >= 0)
      v9 = (unsigned __int8 *)*((unsigned __int8 *)v4 + 23);
    else
      v9 = v4[1];
    while (1)
    {
      v10 = *(unsigned __int8 *)(v7 + 23);
      v11 = (v10 & 0x80u) == 0 ? (unsigned __int8 *)*(unsigned __int8 *)(v7 + 23) : *(unsigned __int8 **)(v7 + 8);
      if (v11 == v9)
      {
        if (v8 >= 0)
          v12 = (unsigned __int8 *)v4;
        else
          v12 = *v4;
        if ((v10 & 0x80) == 0)
        {
          if (!*(_BYTE *)(v7 + 23))
            break;
          v13 = 0;
          while (*(unsigned __int8 *)(v7 + v13) == v12[v13])
          {
            if (v10 == ++v13)
              goto LABEL_24;
          }
          goto LABEL_22;
        }
        if (!memcmp(*(const void **)v7, v12, *(_QWORD *)(v7 + 8)))
          break;
      }
LABEL_22:
      v7 += 88;
      if (v7 == v6)
        goto LABEL_26;
    }
LABEL_24:
    v4 += 3;
    if (v4 != v5)
    {
      v6 = *(_QWORD *)(v7 + 64);
      v7 = *(_QWORD *)(v7 + 56);
      if (v7 == v6)
        goto LABEL_26;
      continue;
    }
    break;
  }
  __p[0] = &v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return v7 + 24;
}

{
  unsigned __int8 **v4;
  unsigned __int8 **v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  _QWORD *exception;
  void *__p[2];
  char v17;
  unsigned __int8 **v18;
  unsigned __int8 **v19;

  std::string::basic_string[abi:ne180100]<0>(__p, ".");
  quasar::split((uint64_t)a2, (uint64_t *)__p, 0, (uint64_t)&v18);
  if (v17 < 0)
    operator delete(__p[0]);
  v4 = v18;
  v5 = v19;
  if (v18 == v19 || (v7 = *(_QWORD *)(a1 + 32), v6 = *(_QWORD *)(a1 + 40), v7 == v6))
  {
LABEL_26:
    exception = __cxa_allocate_exception(0x20uLL);
    quasar::PTree::BadPath::BadPath(exception, a2);
  }
  while (2)
  {
    v8 = *((char *)v4 + 23);
    if (v8 >= 0)
      v9 = (unsigned __int8 *)*((unsigned __int8 *)v4 + 23);
    else
      v9 = v4[1];
    while (1)
    {
      v10 = *(unsigned __int8 *)(v7 + 23);
      v11 = (v10 & 0x80u) == 0 ? (unsigned __int8 *)*(unsigned __int8 *)(v7 + 23) : *(unsigned __int8 **)(v7 + 8);
      if (v11 == v9)
      {
        if (v8 >= 0)
          v12 = (unsigned __int8 *)v4;
        else
          v12 = *v4;
        if ((v10 & 0x80) == 0)
        {
          if (!*(_BYTE *)(v7 + 23))
            break;
          v13 = 0;
          while (*(unsigned __int8 *)(v7 + v13) == v12[v13])
          {
            if (v10 == ++v13)
              goto LABEL_24;
          }
          goto LABEL_22;
        }
        if (!memcmp(*(const void **)v7, v12, *(_QWORD *)(v7 + 8)))
          break;
      }
LABEL_22:
      v7 += 88;
      if (v7 == v6)
        goto LABEL_26;
    }
LABEL_24:
    v4 += 3;
    if (v4 != v5)
    {
      v6 = *(_QWORD *)(v7 + 64);
      v7 = *(_QWORD *)(v7 + 56);
      if (v7 == v6)
        goto LABEL_26;
      continue;
    }
    break;
  }
  __p[0] = &v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return v7 + 24;
}

void sub_1AD9EB534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::PTree::getIntOptional<int>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = quasar::PTree::getChildOptional(a1, a2);
  if (result)
    return std::stoi((const std::string *)(result + 8), 0, 10) | 0x100000000;
  return result;
}

uint64_t quasar::PTree::getChildOptional(uint64_t a1, uint64_t a2)
{
  uint64_t ChildOptional;
  void *__p[2];
  char v7;
  uint64_t v8[3];
  void **v9;

  std::string::basic_string[abi:ne180100]<0>(__p, ".");
  quasar::split(a2, (uint64_t *)__p, 0, (uint64_t)v8);
  ChildOptional = quasar::PTree::getChildOptional(a1, v8);
  v9 = (void **)v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v9);
  if (v7 < 0)
    operator delete(__p[0]);
  return ChildOptional;
}

{
  uint64_t ChildOptional;
  void *__p[2];
  char v7;
  uint64_t v8[3];
  void **v9;

  std::string::basic_string[abi:ne180100]<0>(__p, ".");
  quasar::split(a2, (uint64_t *)__p, 0, (uint64_t)v8);
  ChildOptional = quasar::PTree::getChildOptional(a1, v8);
  v9 = (void **)v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v9);
  if (v7 < 0)
    operator delete(__p[0]);
  return ChildOptional;
}

void sub_1AD9EB630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::PTree::getAndEraseInt<int>(uint64_t a1, __int128 *a2)
{
  uint64_t Child;
  uint64_t v5;

  Child = quasar::PTree::getChild(a1, a2);
  v5 = std::stoi((const std::string *)(Child + 8), 0, 10);
  quasar::PTree::erase(a1, (unsigned __int8 *)a2);
  return v5;
}

void quasar::PTree::erase(uint64_t a1, unsigned __int8 *a2)
{
  signed __int8 v4;
  int64_t v5;
  char *v6;
  char *v7;
  void *v8;
  char *v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  __int128 *v18;
  uint64_t v19;
  _OWORD v20[17];

  v4 = a2[23];
  if (v4 >= 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  if (v4 >= 0)
    v6 = (char *)a2;
  else
    v6 = *(char **)a2;
  if (v5 >= 1)
  {
    v7 = &v6[v5];
    v8 = v6;
    do
    {
      v9 = (char *)memchr(v8, 46, v5);
      if (!v9)
        break;
      if (*v9 == 46)
      {
        if (v9 != v7 && v9 - v6 != -1)
        {
          memset(v20, 0, sizeof(v20));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
          std::operator<<[abi:ne180100]<std::char_traits<char>>(v20, "nested erase() not implemented");
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v20);
        }
        break;
      }
      v8 = v9 + 1;
      v5 = v7 - (_BYTE *)v8;
    }
    while (v7 - (_BYTE *)v8 >= 1);
  }
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(__int128 **)(a1 + 40);
  while ((__int128 *)v10 != v11)
  {
    v12 = *(unsigned __int8 *)(v10 + 23);
    if ((v12 & 0x80u) == 0)
      v13 = *(unsigned __int8 *)(v10 + 23);
    else
      v13 = *(_QWORD *)(v10 + 8);
    v14 = a2[23];
    v15 = (char)v14;
    if ((v14 & 0x80u) != 0)
      v14 = *((_QWORD *)a2 + 1);
    if (v13 == v14)
    {
      if (v15 >= 0)
        v16 = a2;
      else
        v16 = *(unsigned __int8 **)a2;
      if ((v12 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v10, v16, *(_QWORD *)(v10 + 8)))
        {
LABEL_33:
          std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::pair<std::string,quasar::PTree> *,std::pair<std::string,quasar::PTree> *,std::pair<std::string,quasar::PTree> *,0>((__int128 *)(v10 + 88), v11, v10);
          v11 = v18;
          v19 = *(_QWORD *)(a1 + 40);
          if ((__int128 *)v19 != v18)
          {
            do
            {
              v19 -= 88;
              std::allocator<std::pair<std::string,quasar::PTree>>::destroy[abi:ne180100](a1 + 48, v19);
            }
            while ((__int128 *)v19 != v11);
          }
          *(_QWORD *)(a1 + 40) = v11;
          continue;
        }
      }
      else
      {
        if (!*(_BYTE *)(v10 + 23))
          goto LABEL_33;
        v17 = (unsigned __int8 *)v10;
        while (*v17 == *v16)
        {
          ++v17;
          ++v16;
          if (!--v12)
            goto LABEL_33;
        }
      }
    }
    v10 += 88;
  }
}

unint64_t quasar::PTree::getInt<unsigned int>(uint64_t a1)
{
}

unint64_t quasar::`anonymous namespace'::StringToInteger<unsigned int>::convert(uint64_t a1)
{
  const char *v2;
  unint64_t v3;
  std::logic_error *exception;

  *__error() = 0;
  if (*(char *)(a1 + 23) >= 0)
    v2 = (const char *)a1;
  else
    v2 = *(const char **)a1;
  v3 = strtoul(v2, 0, 10);
  if (*__error() == 34)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "strtoul: out of range");
    __cxa_throw(exception, (struct type_info *)off_1E5CFD1B8, MEMORY[0x1E0DE42E0]);
  }
  return v3;
}

void sub_1AD9EB900(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::PTree::getIntOptional<unsigned int>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = quasar::PTree::getChildOptional(a1, a2);
  if (result)
  return result;
}

void quasar::PTree::addChild(quasar::PTree *this, const quasar::PTree *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  _BYTE v7[8];
  void *v8;
  void *__p[2];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  const char *v26;

  v3 = *((_QWORD *)this + 4);
  v4 = (uint64_t *)((char *)this + 32);
  if (v3 != *((_QWORD *)this + 5))
  {
    if ((*(char *)(v3 + 23) & 0x80000000) == 0)
    {
      if (!*(_BYTE *)(v3 + 23))
        goto LABEL_4;
LABEL_12:
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      v13 = 0u;
      v11 = 0u;
      v12 = 0u;
      *(_OWORD *)__p = 0u;
      v10 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Can't add a value array-like to a tree that is already dictionary-like");
      goto LABEL_14;
    }
    if (*(_QWORD *)(v3 + 8))
      goto LABEL_12;
  }
LABEL_4:
  if (*((_BYTE *)this + 56))
  {
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v13 = 0u;
    v11 = 0u;
    v12 = 0u;
    *(_OWORD *)__p = 0u;
    v10 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Leaves can't have children");
LABEL_14:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v26 = "";
  std::pair<char const*,quasar::PTree>::pair[abi:ne180100]<true,0>((uint64_t)v7, &v26, (uint64_t)a2);
  std::pair<std::string,quasar::PTree>::pair[abi:ne180100]<char const*,quasar::PTree,0>((uint64_t)__p, (uint64_t)v7);
  v5 = *((_QWORD *)this + 5);
  if (v5 >= *((_QWORD *)this + 6))
  {
    v6 = std::vector<std::pair<std::string,quasar::PTree>>::__push_back_slow_path<std::pair<std::string,quasar::PTree>>(v4, (__int128 *)__p);
  }
  else
  {
    std::pair<std::string,quasar::PTree>::pair[abi:ne180100](*((_QWORD *)this + 5), (__int128 *)__p);
    v6 = v5 + 88;
    *((_QWORD *)this + 5) = v5 + 88;
  }
  *((_QWORD *)this + 5) = v6;
  quasar::PTree::~PTree((void **)&v10 + 1);
  if (SBYTE7(v10) < 0)
    operator delete(__p[0]);
  quasar::PTree::~PTree(&v8);
}

void quasar::PTree::~PTree(void **this)
{
  void **v2;

  v2 = this + 4;
  std::vector<std::pair<std::string,quasar::PTree>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

double quasar::PTree::PTree(quasar::PTree *this)
{
  double result;

  *(_DWORD *)this = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_BYTE *)this + 56) = 0;
  return result;
}

double quasar::PTree::getMatrix<float>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  double result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  const void *v14[3];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 56))
    v5 = 0;
  else
    v5 = v3 == v4;
  if (v5)
    return kaldi::Matrix<float>::Matrix(a2);
  if (v3 == v4)
    goto LABEL_14;
  if ((*(char *)(v3 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(v3 + 23))
      goto LABEL_8;
LABEL_14:
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v15 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v15);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v15, "Unable to convert non-list structure to matrix.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v15);
  }
  if (*(_QWORD *)(v3 + 8))
    goto LABEL_14;
LABEL_8:
  kaldi::Matrix<float>::Matrix(a2, -1171354717 * ((unint64_t)(v4 - v3) >> 3), -1171354717 * ((*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56)) >> 3), 0, 0);
  v9 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v9 != v8)
  {
    v10 = 0;
    do
    {
      v11 = *(_QWORD *)a2;
      v12 = *(_DWORD *)(a2 + 16);
      v13 = kaldi::MatrixBase<float>::NumCols(a2);
      *(_QWORD *)&v16 = 0;
      *(_QWORD *)&v15 = v11 + 4 * v12 * v10;
      *((_QWORD *)&v15 + 1) = v13;
      quasar::PTree::getVector<float>(v9 + 24, (uint64_t)v14);
      kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v15, v14);
      kaldi::Vector<float>::Destroy((uint64_t)v14);
      v9 += 88;
      ++v10;
    }
    while (v9 != v8);
  }
  return result;
}

void sub_1AD9EBCEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::Matrix<float>::~Matrix(v1);
  _Unwind_Resume(a1);
}

BOOL quasar::PTree::isDict(quasar::PTree *this)
{
  uint64_t v2;
  uint64_t v3;

  if (*((_BYTE *)this + 56))
    return 0;
  v2 = *((_QWORD *)this + 4);
  if (v2 == *((_QWORD *)this + 5))
    return 1;
  if (*(char *)(v2 + 23) < 0)
    v3 = *(_QWORD *)(v2 + 8);
  else
    v3 = *(unsigned __int8 *)(v2 + 23);
  return v3 != 0;
}

BOOL quasar::PTree::empty(quasar::PTree *this)
{
  return *((_QWORD *)this + 4) == *((_QWORD *)this + 5);
}

BOOL quasar::PTree::isList(quasar::PTree *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 4);
  if (v1 == *((_QWORD *)this + 5))
    return 0;
  if (*(char *)(v1 + 23) < 0)
    v2 = *(_QWORD *)(v1 + 8);
  else
    v2 = *(unsigned __int8 *)(v1 + 23);
  return v2 == 0;
}

uint64_t quasar::PTree::size(quasar::PTree *this)
{
  return 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 3);
}

uint64_t quasar::PTree::begin(quasar::PTree *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t quasar::PTree::end(quasar::PTree *this)
{
  return *((_QWORD *)this + 5);
}

void quasar::PTree::getVector<float>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  _OWORD v12[17];

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 56))
    v5 = 0;
  else
    v5 = v3 == v4;
  if (v5)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    return;
  }
  if (v3 == v4)
    goto LABEL_15;
  if ((*(char *)(v3 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(v3 + 23))
      goto LABEL_8;
LABEL_15:
    memset(v12, 0, sizeof(v12));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, "Unable to convert non-list structure to vector.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v12);
  }
  if (*(_QWORD *)(v3 + 8))
    goto LABEL_15;
LABEL_8:
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  kaldi::Vector<float>::Resize((void **)a2, -1171354717 * ((unint64_t)(v4 - v3) >> 3), 0);
  v8 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  if (v8 != v7)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = std::stod((const std::string *)(v8 + 32), 0);
      ++v10;
      *(float *)(*(_QWORD *)a2 + (v9 >> 30)) = v11;
      v8 += 88;
      v9 += 0x100000000;
    }
    while (v8 != v7);
  }
}

void sub_1AD9EBF20(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::Vector<float>::Destroy(v1);
  _Unwind_Resume(a1);
}

double quasar::PTree::getDouble(quasar::PTree *this)
{
  return std::stod((const std::string *)((char *)this + 8), 0);
}

uint64_t quasar::getType(quasar *this, float a2)
{
  return 1;
}

uint64_t quasar::getType(quasar *this)
{
  return 3;
}

{
  return 2;
}

_QWORD *quasar::PTree::BadPath::BadPath(_QWORD *a1, __int128 *a2)
{
  std::string *v3;
  __int128 v4;

  *a1 = off_1E5D3B920;
  v3 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

void sub_1AD9EBFB0(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::PTree::BadPath::what(quasar::PTree::BadPath *this)
{
  uint64_t result;

  result = (uint64_t)this + 8;
  if (*((char *)this + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

_QWORD *quasar::PTree::Error::Error(_QWORD *a1, __int128 *a2)
{
  std::string *v3;
  __int128 v4;

  *a1 = off_1E5D3B8F8;
  v3 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

void sub_1AD9EC034(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::PTree::Error::what(quasar::PTree::Error *this)
{
  uint64_t result;

  result = (uint64_t)this + 8;
  if (*((char *)this + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

_QWORD *quasar::PTree::JsonParseError::JsonParseError(_QWORD *a1, __int128 *a2)
{
  std::string *v3;
  __int128 v4;

  *a1 = off_1E5D3B8D0;
  v3 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

void sub_1AD9EC0BC(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::PTree::JsonParseError::what(quasar::PTree::JsonParseError *this)
{
  uint64_t result;

  result = (uint64_t)this + 8;
  if (*((char *)this + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t quasar::PTree::PTree(uint64_t a1, __int128 *a2)
{
  std::string *v3;
  __int128 v4;

  *(_DWORD *)a1 = 0;
  v3 = (std::string *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 1;
  return a1;
}

quasar::PTree *quasar::PTree::PTree(quasar::PTree *this, char *a2)
{
  std::string *v3;
  int v4;
  void *__p[2];
  uint64_t v7;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  *(_DWORD *)this = 0;
  v3 = (std::string *)((char *)this + 8);
  if (SHIBYTE(v7) < 0)
  {
    std::string::__init_copy_ctor_external(v3, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v4 = SHIBYTE(v7);
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 4) = 0;
    *((_BYTE *)this + 56) = 1;
    if (v4 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *((_QWORD *)this + 3) = v7;
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 4) = 0;
    *((_BYTE *)this + 56) = 1;
  }
  return this;
}

void sub_1AD9EC1D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::PTree::readJson(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  void *v7;
  std::string v8;
  std::string *v9;
  std::string *v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v12 = 0uLL;
  v13 = 0;
  v4 = operator new();
  v5 = operator new(0x60uLL);
  *(_QWORD *)(v4 + 8) = v5;
  v5[7] = 0;
  v5[8] = v5 + 7;
  v5[9] = v5 + 7;
  v5[10] = v5 + 10;
  v5[11] = v5 + 10;
  *(_QWORD *)(v4 + 24) = 0;
  v14 = v4;
  boost::property_tree::json_parser::read_json<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(a2, &v12);
  quasar::PTreeHelper::PTreeFromPTree((uint64_t)&v12, (uint64_t)&v7);
  *(_DWORD *)a1 = (_DWORD)v7;
  std::string::operator=((std::string *)(a1 + 8), &v8);
  if (&v7 != (void **)a1)
    std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(a1 + 32, v9, v10, 0x2E8BA2E8BA2E8BA3 * (((char *)v10 - (char *)v9) >> 3));
  *(_BYTE *)(a1 + 56) = v11;
  quasar::PTree::~PTree(&v7);
  return boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v12);
}

void sub_1AD9EC2EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 __p, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  void *v21;
  _QWORD *exception;
  char *v23;

  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&a19);
  if (a2 == 1)
  {
    v21 = __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x20uLL);
    v23 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v21 + 16))(v21);
    std::string::basic_string[abi:ne180100]<0>(&__p, v23);
    quasar::PTree::JsonParseError::JsonParseError(exception, &__p);
  }
  _Unwind_Resume(a1);
}

void boost::property_tree::json_parser::read_json<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(_QWORD *a1, __int128 *a2)
{
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  boost::property_tree::json_parser::detail::read_json_internal<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(a1, a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1AD9EC430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::PTreeHelper::PTreeFromPTree(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12[8];
  std::string __p;
  void *v14;

  *(_OWORD *)(a2 + 8) = 0u;
  v4 = (std::string *)(a2 + 8);
  *(_DWORD *)a2 = 0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_BYTE *)(a2 + 56) = 0;
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24))
  {
    v5 = *(unsigned __int8 *)(a1 + 23);
    if ((v5 & 0x80u) != 0)
      v5 = *(_QWORD *)(a1 + 8);
    if (v5)
      *(_BYTE *)(a2 + 56) = 1;
  }
  std::string::operator=(v4, (const std::string *)a1);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  v7 = *(_QWORD *)(v6 + 88);
  if (v7)
    v8 = v7 - 80;
  else
    v8 = 0;
  while (v8 != v6)
  {
    quasar::PTreeHelper::PTreeFromPTree(v12, v8 + 24);
    std::pair<std::string,quasar::PTree>::pair[abi:ne180100]<std::string const&,quasar::PTree,0>(&__p, (__int128 *)v8, (uint64_t)v12);
    v9 = *(_QWORD *)(a2 + 40);
    if (v9 >= *(_QWORD *)(a2 + 48))
    {
      v10 = std::vector<std::pair<std::string,quasar::PTree>>::__push_back_slow_path<std::pair<std::string,quasar::PTree>>((uint64_t *)(a2 + 32), (__int128 *)&__p);
    }
    else
    {
      std::pair<std::string,quasar::PTree>::pair[abi:ne180100](*(_QWORD *)(a2 + 40), (__int128 *)&__p);
      v10 = v9 + 88;
      *(_QWORD *)(a2 + 40) = v9 + 88;
    }
    *(_QWORD *)(a2 + 40) = v10;
    quasar::PTree::~PTree(&v14);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    quasar::PTree::~PTree(v12);
    v11 = *(_QWORD *)(v8 + 88);
    if (v11)
      v8 = v11 - 80;
    else
      v8 = 0;
  }
}

void sub_1AD9EC588(_Unwind_Exception *a1)
{
  void **v1;

  quasar::PTree::~PTree(v1);
  _Unwind_Resume(a1);
}

void quasar::PTree::JsonParseError::~JsonParseError(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_1E5D3B8D0;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
}

{
  this->__vftable = (std::exception_vtbl *)off_1E5D3B8D0;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::PTree::readJsonFromFile(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  _QWORD *v5;
  std::locale v7;
  std::string v8;
  std::string *v9;
  std::string *v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v12 = 0uLL;
  v13 = 0;
  v4 = operator new();
  v5 = operator new(0x60uLL);
  *(_QWORD *)(v4 + 8) = v5;
  v5[7] = 0;
  v5[8] = v5 + 7;
  v5[9] = v5 + 7;
  v5[10] = v5 + 10;
  v5[11] = v5 + 10;
  *(_QWORD *)(v4 + 24) = 0;
  v14 = v4;
  MEMORY[0x1AF44CFA4](&v7);
  boost::property_tree::json_parser::read_json<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(a2, &v12, &v7);
  std::locale::~locale(&v7);
  quasar::PTreeHelper::PTreeFromPTree((uint64_t)&v12, (uint64_t)&v7);
  *(_DWORD *)a1 = v7.__locale_;
  std::string::operator=((std::string *)(a1 + 8), &v8);
  if (&v7 != (std::locale *)a1)
    std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(a1 + 32, v9, v10, 0x2E8BA2E8BA2E8BA3 * (((char *)v10 - (char *)v9) >> 3));
  *(_BYTE *)(a1 + 56) = v11;
  quasar::PTree::~PTree((void **)&v7.__locale_);
  return boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v12);
}

void sub_1AD9EC714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 __p, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  void *v21;
  _QWORD *exception;
  char *v23;

  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&a19);
  if (a2 == 1)
  {
    v21 = __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x20uLL);
    v23 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v21 + 16))(v21);
    std::string::basic_string[abi:ne180100]<0>(&__p, v23);
    quasar::PTree::JsonParseError::JsonParseError(exception, &__p);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::property_tree::json_parser::read_json<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(__int128 *a1, __int128 *a2, const std::locale *a3)
{
  std::ios_base *v6;
  std::locale *rdbuf;
  std::locale *v8;
  std::locale v10;
  _QWORD v11[3];
  std::locale v12;
  std::locale v13;
  _QWORD v14[2];
  uint64_t v15;
  _QWORD v16[20];

  v16[19] = *MEMORY[0x1E0C80C00];
  std::ifstream::basic_ifstream(v14);
  v6 = (std::ios_base *)((char *)v14 + *(_QWORD *)(v14[0] - 24));
  if ((v6->__rdstate_ & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v12, "cannot open file");
    boost::property_tree::file_parser_error::file_parser_error((uint64_t)&v13, (uint64_t)&v12, a1, 0);
    v13.__locale_ = (std::locale::__imp *)&unk_1E5D297D0;
    v11[0] = "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Deve"
             "loper/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/boost/property"
             "_tree/json_parser.hpp";
    v11[1] = "void boost::property_tree::json_parser::read_json(const std::string &, Ptree &, const std::locale &) [Ptree"
             " = boost::property_tree::basic_ptree<std::string, std::string>]";
    v11[2] = 73;
    boost::throw_exception<boost::property_tree::json_parser::json_parser_error>((uint64_t)&v13, (uint64_t)v11);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(v14[0] - 24)));
  std::ios_base::imbue(v6, a3);
  std::locale::~locale(&v13);
  rdbuf = (std::locale *)v6->__rdbuf_;
  if (rdbuf)
  {
    (*((void (**)(std::locale *, const std::locale *))rdbuf->__locale_ + 2))(rdbuf, a3);
    v8 = rdbuf + 1;
    std::locale::locale(&v12, v8);
    std::locale::operator=(v8, a3);
    std::locale::~locale(&v12);
  }
  std::locale::~locale(&v10);
  boost::property_tree::json_parser::detail::read_json_internal<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(v14, a2, (std::string *)a1);
  v14[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1AF44CA70](&v15);
  std::istream::~istream();
  return MEMORY[0x1AF44D094](v16);
}

void sub_1AD9EC9E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, std::runtime_error a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  boost::property_tree::file_parser_error::~file_parser_error(&a20);
  if (a19 < 0)
    operator delete(__p);
  std::ifstream::~ifstream(&a28);
  _Unwind_Resume(a1);
}

uint64_t quasar::PTree::writeJsonToFile(quasar::PTreeHelper *a1, __int128 *a2)
{
  std::locale v4;
  std::string v5;

  quasar::PTreeHelper::PTreeFromPTree(a1, &v5);
  MEMORY[0x1AF44CFA4](&v4);
  boost::property_tree::json_parser::write_json<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(a2, (uint64_t)&v5, &v4, 1);
  std::locale::~locale(&v4);
  return boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v5);
}

void sub_1AD9ECA98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, char a11)
{
  std::locale::~locale(&a10);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t quasar::PTreeHelper::PTreeFromPTree@<X0>(quasar::PTreeHelper *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  const quasar::PTree *v8;
  __int128 *v9;
  __int128 *i;
  __int128 v11[2];
  std::string v12;
  uint64_t v13;
  void *__p[2];
  char v15;
  uint64_t v16;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v5 = operator new();
  v6 = operator new(0x60uLL);
  *(_QWORD *)(v5 + 8) = v6;
  v6[7] = 0;
  v6[8] = v6 + 7;
  v6[9] = v6 + 7;
  v6[10] = v6 + 10;
  v6[11] = v6 + 10;
  *(_QWORD *)(v5 + 24) = 0;
  a2[1].__r_.__value_.__r.__words[0] = v5;
  result = (uint64_t)std::string::operator=(a2, (const std::string *)((char *)this + 8));
  v9 = (__int128 *)*((_QWORD *)this + 4);
  for (i = (__int128 *)*((_QWORD *)this + 5); v9 != i; v9 = (__int128 *)((char *)v9 + 88))
  {
    quasar::PTreeHelper::PTreeFromPTree((uint64_t *)v11, (quasar::PTreeHelper *)((char *)v9 + 24), v8);
    std::pair<std::string,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string const&,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>(&v12, v9, v11);
    std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>((uint64_t)__p, (__int128 *)&v12);
    boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::insert(a2[1].__r_.__value_.__r.__words[0] + 16, *(_QWORD *)(a2[1].__r_.__value_.__r.__words[0] + 8), (__int128 *)__p);
    boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v16);
    if (v15 < 0)
      operator delete(__p[0]);
    boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v13);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
    result = boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)v11);
  }
  return result;
}

void sub_1AD9ECBE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::property_tree::json_parser::write_json<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(__int128 *a1, uint64_t a2, const std::locale *a3, uint64_t a4)
{
  std::ios_base *v8;
  std::locale *rdbuf;
  std::locale *v10;
  std::locale v12;
  _QWORD v13[3];
  std::locale v14;
  std::locale v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[20];

  v18[19] = *MEMORY[0x1E0C80C00];
  std::ofstream::basic_ofstream(&v16);
  v8 = (std::ios_base *)((char *)&v16 + *(_QWORD *)(v16 - 24));
  if ((v8->__rdstate_ & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v14, "cannot open file");
    boost::property_tree::file_parser_error::file_parser_error((uint64_t)&v15, (uint64_t)&v14, a1, 0);
    v15.__locale_ = (std::locale::__imp *)&unk_1E5D297D0;
    v13[0] = "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Deve"
             "loper/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/boost/property"
             "_tree/json_parser.hpp";
    v13[1] = "void boost::property_tree::json_parser::write_json(const std::string &, const Ptree &, const std::locale &,"
             " BOOL) [Ptree = boost::property_tree::basic_ptree<std::string, std::string>]";
    v13[2] = 126;
    boost::throw_exception<boost::property_tree::json_parser::json_parser_error>((uint64_t)&v15, (uint64_t)v13);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)&v16 + *(_QWORD *)(v16 - 24)));
  std::ios_base::imbue(v8, a3);
  std::locale::~locale(&v15);
  rdbuf = (std::locale *)v8->__rdbuf_;
  if (rdbuf)
  {
    (*((void (**)(std::locale *, const std::locale *))rdbuf->__locale_ + 2))(rdbuf, a3);
    v10 = rdbuf + 1;
    std::locale::locale(&v14, v10);
    std::locale::operator=(v10, a3);
    std::locale::~locale(&v14);
  }
  std::locale::~locale(&v12);
  boost::property_tree::json_parser::write_json_internal<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(&v16, a2, a1, a4);
  v16 = *MEMORY[0x1E0DE4F48];
  *(uint64_t *)((char *)&v16 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
  MEMORY[0x1AF44CA70](&v17);
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](v18);
}

void sub_1AD9ECE10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, std::runtime_error a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  boost::property_tree::file_parser_error::~file_parser_error(&a19);
  if (a18 < 0)
    operator delete(__p);
  std::ofstream::~ofstream(&a27);
  _Unwind_Resume(a1);
}

uint64_t quasar::PTree::writeJson(quasar::PTreeHelper *a1, _QWORD *a2, uint64_t a3)
{
  std::string v6;

  quasar::PTreeHelper::PTreeFromPTree(a1, &v6);
  boost::property_tree::json_parser::write_json<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(a2, (uint64_t)&v6, a3);
  return boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v6);
}

void sub_1AD9ECEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::PTree::getBool(quasar::PTree *this)
{
  uint64_t v1;
  std::string __p;

  if (*((char *)this + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  else
    __p = *(std::string *)((char *)this + 8);
  v1 = quasar::PTree::toBool(&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v1;
}

void sub_1AD9ECF30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::PTree::toBool(std::string *this)
{
  std::string *v2;
  std::string *v3;
  uint64_t result;
  _QWORD *exception;
  __int128 v6;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    v3 = (std::string *)this->__r_.__value_.__r.__words[0];
    v2 = (std::string *)(this->__r_.__value_.__r.__words[0] + this->__r_.__value_.__l.__size_);
  }
  else
  {
    v2 = (std::string *)((char *)this + HIBYTE(this->__r_.__value_.__r.__words[2]));
    v3 = this;
  }
  while (v3 != v2)
  {
    v3->__r_.__value_.__s.__data_[0] = __tolower(v3->__r_.__value_.__s.__data_[0]);
    v3 = (std::string *)((char *)v3 + 1);
  }
  if (!std::string::compare(this, "true") || !std::string::compare(this, "t") || !std::string::compare(this, "1"))
    return 1;
  result = std::string::compare(this, "false");
  if ((_DWORD)result)
  {
    result = std::string::compare(this, "f");
    if ((_DWORD)result)
    {
      result = std::string::compare(this, "0");
      if ((_DWORD)result)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        std::operator+<char>();
        quasar::PTree::Error::Error(exception, &v6);
      }
    }
  }
  return result;
}

void sub_1AD9ED07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t quasar::PTree::getBool(uint64_t a1, __int128 *a2)
{
  uint64_t Child;
  uint64_t v3;
  std::string __p;

  Child = quasar::PTree::getChild(a1, a2);
  if (*(char *)(Child + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(Child + 8), *(_QWORD *)(Child + 16));
  else
    __p = *(std::string *)(Child + 8);
  v3 = quasar::PTree::toBool(&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v3;
}

void sub_1AD9ED124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::PTree::getBoolOptional(uint64_t a1, uint64_t a2)
{
  uint64_t ChildOptional;
  __int128 v3;
  int v4;
  int v5;
  std::string __p;

  ChildOptional = quasar::PTree::getChildOptional(a1, a2);
  if (ChildOptional)
  {
    if (*(char *)(ChildOptional + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(ChildOptional + 8), *(_QWORD *)(ChildOptional + 16));
    }
    else
    {
      v3 = *(_OWORD *)(ChildOptional + 8);
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(ChildOptional + 24);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v3;
    }
    v4 = quasar::PTree::toBool(&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v5 = 1;
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  return v4 | (v5 << 8);
}

void sub_1AD9ED1C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double quasar::PTree::getDouble(uint64_t a1, __int128 *a2)
{
  uint64_t Child;

  Child = quasar::PTree::getChild(a1, a2);
  return std::stod((const std::string *)(Child + 8), 0);
}

double quasar::PTree::getDoubleOptional(uint64_t a1, uint64_t a2)
{
  uint64_t ChildOptional;
  double result;

  ChildOptional = quasar::PTree::getChildOptional(a1, a2);
  if (ChildOptional)
    return std::stod((const std::string *)(ChildOptional + 8), 0);
  return result;
}

double quasar::PTree::getAndEraseDouble(uint64_t a1, __int128 *a2)
{
  uint64_t Child;
  double v5;

  Child = quasar::PTree::getChild(a1, a2);
  v5 = std::stod((const std::string *)(Child + 8), 0);
  quasar::PTree::erase(a1, (unsigned __int8 *)a2);
  return v5;
}

uint64_t quasar::PTree::getString(quasar::PTree *this)
{
  return (uint64_t)this + 8;
}

uint64_t quasar::PTree::getString(uint64_t a1, __int128 *a2)
{
  return quasar::PTree::getChild(a1, a2) + 8;
}

void quasar::PTree::getAndEraseString(uint64_t a1@<X0>, __int128 *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t Child;

  Child = quasar::PTree::getChild(a1, a2);
  if (*(char *)(Child + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(Child + 8), *(_QWORD *)(Child + 16));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)(Child + 8);
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(Child + 24);
  }
  quasar::PTree::erase(a1, (unsigned __int8 *)a2);
}

void sub_1AD9ED304(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void quasar::PTree::getStringOptional(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t ChildOptional;
  __int128 v5;
  char v6;

  ChildOptional = quasar::PTree::getChildOptional(a1, a2);
  if (ChildOptional)
  {
    if (*(char *)(ChildOptional + 31) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(ChildOptional + 8), *(_QWORD *)(ChildOptional + 16));
    }
    else
    {
      v5 = *(_OWORD *)(ChildOptional + 8);
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(ChildOptional + 24);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v5;
    }
    v6 = 1;
  }
  else
  {
    v6 = 0;
    a3->__r_.__value_.__s.__data_[0] = 0;
  }
  a3[1].__r_.__value_.__s.__data_[0] = v6;
}

void sub_1AD9ED4F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::PTree::BadPath::~BadPath(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_1E5D3B920;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
}

{
  this->__vftable = (std::exception_vtbl *)off_1E5D3B920;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::PTree::getChildWithoutSplit(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  if (v2 == v3)
    return 0;
  v4 = *((_BYTE *)a2 + 23);
  if (v4 >= 0)
    v5 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
  else
    v5 = a2[1];
  if (v4 >= 0)
    v6 = (unsigned __int8 *)a2;
  else
    v6 = *a2;
  while (1)
  {
    v7 = *(unsigned __int8 *)(v2 + 23);
    if ((v7 & 0x80u) == 0)
      v8 = (unsigned __int8 *)*(unsigned __int8 *)(v2 + 23);
    else
      v8 = *(unsigned __int8 **)(v2 + 8);
    if (v8 != v5)
      goto LABEL_19;
    if ((v7 & 0x80) != 0)
      break;
    if (!*(_BYTE *)(v2 + 23))
      return v2 + 24;
    v9 = 0;
    while (*(unsigned __int8 *)(v2 + v9) == v6[v9])
    {
      if (v7 == ++v9)
        return v2 + 24;
    }
LABEL_19:
    v2 += 88;
    if (v2 == v3)
      return 0;
  }
  if (memcmp(*(const void **)v2, v6, *(_QWORD *)(v2 + 8)))
    goto LABEL_19;
  return v2 + 24;
}

void sub_1AD9ED6B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::PTree::getChildOptional(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
    return 0;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  if (v4 == v5)
    return 0;
  while (2)
  {
    v6 = *(char *)(v2 + 23);
    if (v6 >= 0)
      v7 = *(unsigned __int8 *)(v2 + 23);
    else
      v7 = *(_QWORD *)(v2 + 8);
    while (1)
    {
      v8 = *(unsigned __int8 *)(v4 + 23);
      if ((v8 & 0x80u) == 0)
        v9 = *(unsigned __int8 *)(v4 + 23);
      else
        v9 = *(_QWORD *)(v4 + 8);
      if (v9 != v7)
        goto LABEL_20;
      v10 = v6 >= 0 ? (unsigned __int8 *)v2 : *(unsigned __int8 **)v2;
      if ((v8 & 0x80) != 0)
        break;
      if (!*(_BYTE *)(v4 + 23))
        goto LABEL_22;
      v11 = 0;
      while (*(unsigned __int8 *)(v4 + v11) == v10[v11])
      {
        if (v8 == ++v11)
          goto LABEL_22;
      }
LABEL_20:
      v4 += 88;
      if (v4 == v5)
        return 0;
    }
    if (memcmp(*(const void **)v4, v10, *(_QWORD *)(v4 + 8)))
      goto LABEL_20;
LABEL_22:
    v2 += 24;
    if (v2 != v3)
    {
      v5 = *(_QWORD *)(v4 + 64);
      v4 = *(_QWORD *)(v4 + 56);
      if (v4 == v5)
        return 0;
      continue;
    }
    return v4 + 24;
  }
}

void quasar::PTree::putChild(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  int v6;
  std::string::size_type v7;
  uint64_t *v8;
  void *v10;
  std::vector<std::wstring>::pointer begin;
  std::vector<std::wstring>::pointer end;
  uint64_t v13;
  uint64_t v14;
  int v15;
  std::wstring::size_type size;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::vector<std::wstring>::pointer v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *exception;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;
  void *__p;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  char v33;
  std::vector<std::wstring> v34;
  void **v35;
  _BYTE __str[32];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned __int8 *)(a2 + 23);
  v6 = (char)v5;
  v7 = *(_QWORD *)(a2 + 8);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 8);
  if (!v5)
  {
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v37 = 0u;
    memset(__str, 0, sizeof(__str));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__str, "Use add() to append array elements");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__str);
  }
  v8 = (uint64_t *)a1;
  if (*(_BYTE *)(a1 + 56))
  {
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v37 = 0u;
    memset(__str, 0, sizeof(__str));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__str, "Leaves can't have children");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__str);
  }
  memset(&v34, 0, sizeof(v34));
  v28 = a3;
  if (!a4)
  {
    if (v6 < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)a2, v7);
    }
    else
    {
      *(_OWORD *)__str = *(_OWORD *)a2;
      *(_QWORD *)&__str[16] = *(_QWORD *)(a2 + 16);
    }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v34, (std::string *)__str, (__int128 *)&__str[24], 1uLL);
    if ((__str[23] & 0x80000000) == 0)
      goto LABEL_14;
    v10 = *(void **)__str;
    goto LABEL_13;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, ".");
  quasar::split(a2, (uint64_t *)&__p, 0, (uint64_t)__str);
  std::vector<std::string>::__vdeallocate(&v34);
  v34 = *(std::vector<std::wstring> *)__str;
  v35 = (void **)__str;
  memset(__str, 0, 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v35);
  if (SHIBYTE(v30) < 0)
  {
    v10 = __p;
LABEL_13:
    operator delete(v10);
  }
LABEL_14:
  begin = v34.__begin_;
  end = v34.__end_;
  if (v34.__begin_ == v34.__end_)
    goto LABEL_49;
LABEL_15:
  v14 = v8[4];
  v13 = v8[5];
  if (v14 == v13)
    goto LABEL_41;
  v15 = SHIBYTE(begin->__r_.__value_.__r.__words[2]);
  if (v15 >= 0)
    size = HIBYTE(begin->__r_.__value_.__r.__words[2]);
  else
    size = begin->__r_.__value_.__l.__size_;
  v17 = v8[4];
  while (1)
  {
    v18 = *(unsigned __int8 *)(v17 + 23);
    v19 = (v18 & 0x80u) == 0 ? *(unsigned __int8 *)(v17 + 23) : *(_QWORD *)(v17 + 8);
    if (v19 == size)
    {
      if (v15 >= 0)
        v20 = begin;
      else
        v20 = (std::vector<std::wstring>::pointer)begin->__r_.__value_.__r.__words[0];
      if ((v18 & 0x80) == 0)
      {
        if (!*(_BYTE *)(v17 + 23))
          break;
        v21 = 0;
        while (*(unsigned __int8 *)(v17 + v21) == *((unsigned __int8 *)&v20->__r_.__value_.__l.__data_ + v21))
        {
          if (v18 == ++v21)
            goto LABEL_38;
        }
        goto LABEL_34;
      }
      if (!memcmp(*(const void **)v17, v20, *(_QWORD *)(v17 + 8)))
        break;
    }
LABEL_34:
    v17 += 88;
    if (v17 == v13)
    {
      if (*(char *)(v14 + 23) < 0)
      {
        if (!*(_QWORD *)(v14 + 8))
          goto LABEL_59;
      }
      else if (!*(_BYTE *)(v14 + 23))
      {
LABEL_59:
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v37 = 0u;
        memset(__str, 0, sizeof(__str));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"Can't add a value dictionary-like to a tree that is already array-like", 70);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__str);
      }
LABEL_41:
      if (&begin[1] == end)
      {
        std::pair<std::string,quasar::PTree>::pair[abi:ne180100]<std::string&,quasar::PTree const&,0>((std::string *)__str, (__int128 *)begin, v28);
        v25 = v8[5];
        if (v25 >= v8[6])
        {
          v26 = std::vector<std::pair<std::string,quasar::PTree>>::__push_back_slow_path<std::pair<std::string,quasar::PTree>>(v8 + 4, (__int128 *)__str);
        }
        else
        {
          std::pair<std::string,quasar::PTree>::pair[abi:ne180100](v8[5], (__int128 *)__str);
          v26 = v25 + 88;
          v8[5] = v25 + 88;
        }
        v8[5] = v26;
        quasar::PTree::~PTree((void **)&__str[24]);
        if ((__str[23] & 0x80000000) != 0)
          operator delete(*(void **)__str);
        goto LABEL_58;
      }
      LODWORD(__p) = 0;
      v30 = 0u;
      v31 = 0u;
      v32 = 0u;
      v33 = 0;
      std::pair<std::string,quasar::PTree>::pair[abi:ne180100]<std::string&,quasar::PTree,0>((std::string *)__str, (__int128 *)begin, (uint64_t)&__p);
      v22 = v8[5];
      if (v22 >= v8[6])
      {
        v23 = std::vector<std::pair<std::string,quasar::PTree>>::__push_back_slow_path<std::pair<std::string,quasar::PTree>>(v8 + 4, (__int128 *)__str);
      }
      else
      {
        std::pair<std::string,quasar::PTree>::pair[abi:ne180100](v8[5], (__int128 *)__str);
        v23 = v22 + 88;
        v8[5] = v22 + 88;
      }
      v8[5] = v23;
      quasar::PTree::~PTree((void **)&__str[24]);
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
      quasar::PTree::~PTree(&__p);
      v8 = (uint64_t *)(v8[5] - 64);
      end = v34.__end_;
LABEL_48:
      if (++begin == end)
      {
LABEL_49:
        exception = __cxa_allocate_exception(0x20uLL);
        quasar::PTree::BadPath::BadPath(exception, (__int128 *)a2);
      }
      goto LABEL_15;
    }
  }
LABEL_38:
  v8 = (uint64_t *)(v17 + 24);
  if (&begin[1] != end)
    goto LABEL_48;
  *(_DWORD *)(v17 + 24) = *(_DWORD *)v28;
  std::string::operator=((std::string *)(v17 + 32), (const std::string *)(v28 + 8));
  if (v8 != (uint64_t *)v28)
    std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(v17 + 56, *(std::string **)(v28 + 32), *(std::string **)(v28 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(v28 + 40) - *(_QWORD *)(v28 + 32)) >> 3));
  *(_BYTE *)(v17 + 80) = *(_BYTE *)(v28 + 56);
LABEL_58:
  *(_QWORD *)__str = &v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
}

void sub_1AD9EDCD8(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1AD9EDD44);
}

void sub_1AD9EDCE8()
{
  JUMPOUT(0x1AD9EDD44);
}

void sub_1AD9EDCF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25)
{
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)(v25 + 40) = v26;
  std::pair<std::string,quasar::PTree>::~pair((uint64_t)&a25);
  quasar::PTree::~PTree(&a13);
  a25 = (void **)&a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a25);
  _Unwind_Resume(a1);
}

void sub_1AD9EDD20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25)
{
  a25 = (void **)&a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a25);
  _Unwind_Resume(a1);
}

void sub_1AD9EDD28()
{
  void *v0;

  __cxa_free_exception(v0);
  JUMPOUT(0x1AD9EDD34);
}

void quasar::PTree::replaceChild(uint64_t a1, __int128 *a2, uint64_t a3)
{
  quasar::PTree::getChild(a1, a2);
  quasar::PTree::putChild(a1, (uint64_t)a2, a3, 1);
}

uint64_t quasar::PTree::isLeaf(quasar::PTree *this)
{
  return *((unsigned __int8 *)this + 56);
}

uint64_t quasar::PTree::getDataType(quasar::PTree *this)
{
  if (*((_BYTE *)this + 56))
    return *(unsigned int *)this;
  else
    return 4;
}

void quasar::PTree::writeProperJson()
{
  _OWORD v0[17];

  memset(v0, 0, sizeof(v0));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "writeProperJson unsupported");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v0);
}

std::string *std::pair<std::string,quasar::PTree>::pair[abi:ne180100]<std::string const&,quasar::PTree,0>(std::string *this, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = *(_DWORD *)a3;
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 8);
    this[2].__r_.__value_.__r.__words[0] = *(_QWORD *)(a3 + 24);
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = v6;
  }
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((std::string *)((char *)this + 56), *(_QWORD *)(a3 + 32), *(_QWORD *)(a3 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a3 + 40) - *(_QWORD *)(a3 + 32)) >> 3));
  this[3].__r_.__value_.__s.__data_[8] = *(_BYTE *)(a3 + 56);
  return this;
}

void sub_1AD9EDFCC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::pair<std::string,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string const&,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  std::string::size_type v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  v7 = operator new();
  boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::multi_index_container(v7, *((_QWORD *)a3 + 3));
  this[2].__r_.__value_.__r.__words[0] = v7;
  return this;
}

void sub_1AD9EE0AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v5;
  }
  v6 = operator new();
  boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::multi_index_container(v6, *((_QWORD *)a2 + 6));
  *(_QWORD *)(a1 + 48) = v6;
  return a1;
}

void sub_1AD9EE19C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::pair<std::string,quasar::PTree>::pair[abi:ne180100]<std::string&,quasar::PTree const&,0>(std::string *this, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = *(_DWORD *)a3;
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 8);
    this[2].__r_.__value_.__r.__words[0] = *(_QWORD *)(a3 + 24);
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = v6;
  }
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((std::string *)((char *)this + 56), *(_QWORD *)(a3 + 32), *(_QWORD *)(a3 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a3 + 40) - *(_QWORD *)(a3 + 32)) >> 3));
  this[3].__r_.__value_.__s.__data_[8] = *(_BYTE *)(a3 + 56);
  return this;
}

void sub_1AD9EE2B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::pair<std::string,quasar::PTree>::pair[abi:ne180100]<std::string&,quasar::PTree,0>(std::string *this, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = *(_DWORD *)a3;
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 8);
    this[2].__r_.__value_.__r.__words[0] = *(_QWORD *)(a3 + 24);
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = v6;
  }
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((std::string *)((char *)this + 56), *(_QWORD *)(a3 + 32), *(_QWORD *)(a3 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a3 + 40) - *(_QWORD *)(a3 + 32)) >> 3));
  this[3].__r_.__value_.__s.__data_[8] = *(_BYTE *)(a3 + 56);
  return this;
}

void sub_1AD9EE3B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<char const*,quasar::PTree>::pair[abi:ne180100]<true,0>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  __int128 v5;

  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a3;
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a3 + 24);
    *(_OWORD *)(a1 + 16) = v5;
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((std::string *)(a1 + 40), *(_QWORD *)(a3 + 32), *(_QWORD *)(a3 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a3 + 40) - *(_QWORD *)(a3 + 32)) >> 3));
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a3 + 56);
  return a1;
}

void sub_1AD9EE48C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string,quasar::PTree>::pair[abi:ne180100]<char const*,quasar::PTree,0>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 v5;

  v4 = std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, *(char **)a2);
  *((_DWORD *)v4 + 6) = *(_DWORD *)(a2 + 8);
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v4 + 4), *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    v4[6] = *(_QWORD *)(a2 + 32);
    *((_OWORD *)v4 + 2) = v5;
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((std::string *)(a1 + 56), *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 64);
  return a1;
}

void sub_1AD9EE54C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::pair<std::string,quasar::PTree>>::__push_back_slow_path<std::pair<std::string,quasar::PTree>>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1745D1745D1745DLL)
    v9 = 0x2E8BA2E8BA2E8BALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,quasar::PTree>>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[88 * v4];
  v16 = &v10[88 * v9];
  std::pair<std::string,quasar::PTree>::pair[abi:ne180100]((uint64_t)v14, a2);
  v15 = v14 + 88;
  std::vector<std::pair<std::string,quasar::PTree>>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<std::pair<std::string,quasar::PTree>>::~__split_buffer(&v13);
  return v11;
}

void sub_1AD9EE688(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::string,quasar::PTree>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,quasar::PTree>::pair[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *((const std::string::value_type **)a2 + 4), *((_QWORD *)a2 + 5));
  }
  else
  {
    v5 = a2[2];
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
    *(_OWORD *)(a1 + 32) = v5;
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((std::string *)(a1 + 56), *((_QWORD *)a2 + 7), *((_QWORD *)a2 + 8), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3));
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  return a1;
}

void sub_1AD9EE750(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::pair<std::string,quasar::PTree>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,quasar::PTree>>,std::reverse_iterator<std::pair<std::string,quasar::PTree>*>,std::reverse_iterator<std::pair<std::string,quasar::PTree>*>,std::reverse_iterator<std::pair<std::string,quasar::PTree>*>>((uint64_t)(a1 + 2), a1[1], (__int128 *)a1[1], *a1, (__int128 *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,quasar::PTree>>,std::reverse_iterator<std::pair<std::string,quasar::PTree>*>,std::reverse_iterator<std::pair<std::string,quasar::PTree>*>,std::reverse_iterator<std::pair<std::string,quasar::PTree>*>>(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 *v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 = (__int128 *)((char *)v9 - 88);
      std::pair<std::string,quasar::PTree>::pair[abi:ne180100]((std::string *)(v7 - 88), v9);
      v7 = *((_QWORD *)&v15 + 1) - 88;
      *((_QWORD *)&v15 + 1) -= 88;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::PTree>>,std::reverse_iterator<std::pair<std::string,quasar::PTree>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_1AD9EE89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::PTree>>,std::reverse_iterator<std::pair<std::string,quasar::PTree>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::PTree>>,std::reverse_iterator<std::pair<std::string,quasar::PTree>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::PTree>>,std::reverse_iterator<std::pair<std::string,quasar::PTree>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,quasar::PTree>>,std::reverse_iterator<std::pair<std::string,quasar::PTree>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<std::pair<std::string,quasar::PTree>>::destroy[abi:ne180100](v3, v1);
      v1 += 88;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<std::pair<std::string,quasar::PTree>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::pair<std::string,quasar::PTree>>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::pair<std::string,quasar::PTree>>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 88;
    std::allocator<std::pair<std::string,quasar::PTree>>::destroy[abi:ne180100](v4, i - 88);
  }
}

uint64_t boost::property_tree::json_parser::detail::read_json_internal<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(_QWORD *a1, __int128 *a2, std::string *a3)
{
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  void *v17[2];
  void *__p[2];
  __int128 v19;

  v14 = 0uLL;
  v15 = 0;
  v6 = operator new();
  v7 = operator new(0x60uLL);
  *(_QWORD *)(v6 + 8) = v7;
  v7[7] = 0;
  v7[8] = v7 + 7;
  v7[9] = v7 + 7;
  v7[10] = v7 + 10;
  v7[11] = v7 + 10;
  *(_QWORD *)(v6 + 24) = 0;
  v16 = v6;
  *(_OWORD *)v17 = 0u;
  *(_OWORD *)__p = 0u;
  v19 = 0u;
  boost::property_tree::json_parser::detail::read_json_internal<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>,boost::property_tree::json_parser::detail::encoding<char>,boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>(*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40), 0, (uint64_t)&v13, (uint64_t)&v14, a3);
  v8 = *a2;
  *a2 = v14;
  v14 = v8;
  v9 = *((_QWORD *)a2 + 2);
  v10 = *((_QWORD *)a2 + 3);
  v11 = v16;
  *((_QWORD *)a2 + 2) = v15;
  *((_QWORD *)a2 + 3) = v11;
  v15 = v9;
  v16 = v10;
  if (__p[1])
  {
    *(void **)&v19 = __p[1];
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v17[0]);
  return boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v14);
}

void sub_1AD9EEAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::~standard_callbacks((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::property_tree::json_parser::detail::read_json_internal<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>,boost::property_tree::json_parser::detail::encoding<char>,boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, std::string *__str)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9[2];
  std::string __p;
  uint64_t v11;

  *(_QWORD *)&v7 = a4;
  *((_QWORD *)&v7 + 1) = a3;
  v8 = a3;
  memset(&__p, 0, sizeof(__p));
  std::string::operator=(&__p, __str);
  v9[0] = a1;
  v9[1] = (uint64_t)a2;
  boost::property_tree::json_parser::detail::utf8_utf8_encoding::skip_introduction<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(v8, v9, a2);
  v11 = 1;
  boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_value(&v7);
  boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::finish((uint64_t)&v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1AD9EEB68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::~standard_callbacks(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree(a1);
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_value(__int128 *a1)
{
  uint64_t result;

  result = boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_object((uint64_t)a1);
  if ((result & 1) == 0)
  {
    result = boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_array((uint64_t)a1);
    if ((result & 1) == 0)
    {
      result = boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_string((uint64_t)a1);
      if ((result & 1) == 0)
      {
        result = boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_BOOLean((uint64_t)a1);
        if ((result & 1) == 0)
        {
          result = boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_null((uint64_t)a1);
          if ((result & 1) == 0)
          {
            result = boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_number(a1);
            if ((result & 1) == 0)
              boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error((uint64_t)(a1 + 1), "expected value");
          }
        }
      }
    }
  }
  return result;
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::finish(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = a1 + 16;
  while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
  result = std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)(a1 + 24), (_QWORD **)(a1 + 32));
  if ((result & 1) == 0)
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(v2, "garbage after data");
  return result;
}

uint64_t boost::property_tree::json_parser::detail::utf8_utf8_encoding::skip_introduction<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  unsigned __int8 *v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;

  v13 = a3;
  result = std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)a2, &v13);
  if ((result & 1) == 0)
  {
    result = *a2;
    v5 = *(unsigned __int8 **)(*a2 + 24);
    if (v5 == *(unsigned __int8 **)(*a2 + 32))
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
      v6 = result;
    }
    else
    {
      v6 = *v5;
    }
    if (v6 == 239)
    {
      v7 = (_QWORD *)*a2;
      v8 = *(_QWORD *)(*a2 + 24);
      if (v8 == *(_QWORD *)(*a2 + 32))
        (*(void (**)(_QWORD *))(*v7 + 80))(v7);
      else
        v7[3] = v8 + 1;
      result = std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)a2, &v13);
      if ((result & 1) == 0)
      {
        v9 = (_QWORD *)*a2;
        v10 = *(_QWORD *)(*a2 + 24);
        if (v10 == *(_QWORD *)(*a2 + 32))
          (*(void (**)(_QWORD *))(*v9 + 80))(v9);
        else
          v9[3] = v10 + 1;
        result = std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)a2, &v13);
        if ((result & 1) == 0)
        {
          v11 = (_QWORD *)*a2;
          v12 = *(_QWORD *)(*a2 + 24);
          if (v12 == *(_QWORD *)(*a2 + 32))
            (*(void (**)(_QWORD *))(*v11 + 80))(v11);
          else
            v11[3] = v12 + 1;
          return std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)a2, &v13);
        }
      }
    }
  }
  return result;
}

uint64_t std::istreambuf_iterator<char>::equal[abi:ne180100](_QWORD **a1, _QWORD **a2)
{
  _QWORD *v4;
  _BOOL4 v5;
  _QWORD *v6;
  _BOOL4 v7;

  v4 = *a1;
  if (v4)
  {
    if (v4[3] != v4[4])
    {
      v5 = 0;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(_QWORD *))(*v4 + 72))(v4) != -1)
    {
      v5 = *a1 == 0;
      goto LABEL_8;
    }
    *a1 = 0;
  }
  v5 = 1;
LABEL_8:
  v6 = *a2;
  if (!*a2)
    goto LABEL_14;
  if (v6[3] == v6[4])
  {
    if ((*(unsigned int (**)(_QWORD *))(*v6 + 72))(v6) != -1)
    {
      v7 = *a2 == 0;
      return v5 ^ v7 ^ 1u;
    }
    *a2 = 0;
LABEL_14:
    v7 = 1;
    return v5 ^ v7 ^ 1u;
  }
  v7 = 0;
  return v5 ^ v7 ^ 1u;
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_object(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _BYTE *v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  _BYTE *v10;
  int v11;
  uint64_t v12;

  v2 = a1 + 16;
  while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
  v3 = (_QWORD *)(a1 + 24);
  if ((std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)(a1 + 24), (_QWORD **)(a1 + 32)) & 1) != 0)
    return 0;
  v4 = *(_BYTE **)(*v3 + 24);
  v5 = v4 == *(_BYTE **)(*v3 + 32)
     ? (*(unsigned __int8 (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3)
     : *v4;
  if (v5 != 123)
    return 0;
  if (*(_QWORD *)(*v3 + 24) == *(_QWORD *)(*v3 + 32))
    (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3);
  boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
  v6 = *(_QWORD *)a1;
  boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_tree(*(_QWORD *)a1);
  *(_DWORD *)(*(_QWORD *)(v6 + 64) - 16) = 1;
  while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
  if ((std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)(a1 + 24), (_QWORD **)(a1 + 32)) & 1) != 0
    || ((v7 = *(unsigned __int8 **)(*v3 + 24), v7 == *(unsigned __int8 **)(*v3 + 32))
      ? (v8 = (*(unsigned __int8 (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3))
      : (v8 = *v7),
        v8 != 125))
  {
    while (1)
    {
      if ((boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_string(a1) & 1) == 0)
        boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(v2, "expected key string");
      while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_colon, 0, "expected ':'");
      boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_value(a1);
      while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
      if ((std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)(a1 + 24), (_QWORD **)(a1 + 32)) & 1) != 0)
        break;
      v10 = *(_BYTE **)(*v3 + 24);
      v11 = v10 == *(_BYTE **)(*v3 + 32)
          ? (*(unsigned __int8 (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3)
          : *v10;
      if (v11 != 44)
        break;
      if (*(_QWORD *)(*v3 + 24) == *(_QWORD *)(*v3 + 32))
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3);
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
    }
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_close_brace, 0, "expected '}' or ','");
  }
  else
  {
    if (*(_QWORD *)(*v3 + 24) == *(_QWORD *)(*v3 + 32))
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3);
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
  }
  v12 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  if (*(_DWORD *)(v12 - 16) == 3)
    v12 -= 16;
  *(_QWORD *)(*(_QWORD *)a1 + 64) = v12 - 16;
  return 1;
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_array(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _BYTE *v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  _BYTE *v10;
  int v11;
  uint64_t v12;

  v2 = a1 + 16;
  while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
  v3 = (_QWORD *)(a1 + 24);
  if ((std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)(a1 + 24), (_QWORD **)(a1 + 32)) & 1) != 0)
    return 0;
  v4 = *(_BYTE **)(*v3 + 24);
  v5 = v4 == *(_BYTE **)(*v3 + 32)
     ? (*(unsigned __int8 (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3)
     : *v4;
  if (v5 != 91)
    return 0;
  if (*(_QWORD *)(*v3 + 24) == *(_QWORD *)(*v3 + 32))
    (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3);
  boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
  v6 = *(_QWORD *)a1;
  boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_tree(*(_QWORD *)a1);
  *(_DWORD *)(*(_QWORD *)(v6 + 64) - 16) = 0;
  while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
  if ((std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)(a1 + 24), (_QWORD **)(a1 + 32)) & 1) != 0
    || ((v7 = *(unsigned __int8 **)(*v3 + 24), v7 == *(unsigned __int8 **)(*v3 + 32))
      ? (v8 = (*(unsigned __int8 (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3))
      : (v8 = *v7),
        v8 != 93))
  {
    while (1)
    {
      boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_value(a1);
      while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
      if ((std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)(a1 + 24), (_QWORD **)(a1 + 32)) & 1) != 0)
        break;
      v10 = *(_BYTE **)(*v3 + 24);
      v11 = v10 == *(_BYTE **)(*v3 + 32)
          ? (*(unsigned __int8 (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3)
          : *v10;
      if (v11 != 44)
        break;
      if (*(_QWORD *)(*v3 + 24) == *(_QWORD *)(*v3 + 32))
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3);
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
    }
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_close_bracket, 0, "expected ']' or ','");
  }
  else
  {
    if (*(_QWORD *)(*v3 + 24) == *(_QWORD *)(*v3 + 32))
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3);
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
  }
  v12 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  if (*(_DWORD *)(v12 - 16) == 3)
    v12 -= 16;
  *(_QWORD *)(*(_QWORD *)a1 + 64) = v12 - 16;
  return 1;
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_string(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _BYTE *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  _QWORD *v10;
  _QWORD v12[4];
  _QWORD v13[3];

  v2 = a1 + 16;
  while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
  v3 = (_QWORD *)(a1 + 24);
  if ((std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)(a1 + 24), (_QWORD **)(a1 + 32)) & 1) != 0)
    return 0;
  v4 = *(_BYTE **)(*v3 + 24);
  v5 = v4 == *(_BYTE **)(*v3 + 32)
     ? (*(unsigned __int8 (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3)
     : *v4;
  if (v5 != 34)
    return 0;
  if (*(_QWORD *)(*v3 + 24) == *(_QWORD *)(*v3 + 32))
    (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3);
  boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
  boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_value(*(_QWORD *)a1);
  v7 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  while (boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::need_cur(v2, "unterminated string") != 34)
  {
    v8 = *(unsigned __int8 **)(*v3 + 24);
    if (v8 == *(unsigned __int8 **)(*v3 + 32))
      v9 = (*(unsigned __int8 (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3);
    else
      v9 = *v8;
    if (v9 == 92)
    {
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
      boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_escape((uint64_t *)a1);
    }
    else
    {
      v10 = *(_QWORD **)(a1 + 32);
      v13[0] = boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::on_code_unit;
      v13[1] = 0;
      v13[2] = v7;
      v12[0] = boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error;
      v12[1] = 0;
      v12[2] = a1;
      v12[3] = "invalid code sequence";
      boost::property_tree::json_parser::detail::utf8_utf8_encoding::transcode_codepoint<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>,boost::_bi::bind_t<void,boost::_mfi::mf1<void,boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,char>,boost::_bi::list2<boost::reference_wrapper<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>,boost::arg<1>>>,boost::_bi::bind_t<void,boost::_mfi::mf1<void,boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>,char const*>,boost::_bi::list2<boost::_bi::value<boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>*>,boost::_bi::value<char const*>>>>(v6, (_QWORD **)(a1 + 24), v10, (uint64_t)v13, (uint64_t)v12);
    }
  }
  boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
  return 1;
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_BOOLean(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _BYTE *v4;
  int v5;
  char *v6;
  const char *v7;
  _BYTE *v8;
  int v9;
  uint64_t v10;

  v2 = a1 + 16;
  while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
  v3 = (_QWORD *)(a1 + 24);
  if ((std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)(a1 + 24), (_QWORD **)(a1 + 32)) & 1) == 0)
  {
    v4 = *(_BYTE **)(*v3 + 24);
    v5 = v4 == *(_BYTE **)(*v3 + 32)
       ? (*(unsigned __int8 (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3)
       : *v4;
    if (v5 == 116)
    {
      if (*(_QWORD *)(*v3 + 24) == *(_QWORD *)(*v3 + 32))
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3);
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
      v6 = "expected 'true'";
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_r, 0, "expected 'true'");
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_u, 0, "expected 'true'");
      v7 = "true";
LABEL_19:
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_e, 0, v6);
      v10 = boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_value(*(_QWORD *)a1);
      MEMORY[0x1AF44C914](v10, v7);
      return 1;
    }
  }
  if ((std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)(a1 + 24), (_QWORD **)(a1 + 32)) & 1) == 0)
  {
    v8 = *(_BYTE **)(*v3 + 24);
    v9 = v8 == *(_BYTE **)(*v3 + 32)
       ? (*(unsigned __int8 (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3)
       : *v8;
    if (v9 == 102)
    {
      if (*(_QWORD *)(*v3 + 24) == *(_QWORD *)(*v3 + 32))
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3);
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
      v6 = "expected 'false'";
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_a, 0, "expected 'false'");
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_l, 0, "expected 'false'");
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_s, 0, "expected 'false'");
      v7 = "false";
      goto LABEL_19;
    }
  }
  return 0;
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_null(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _BYTE *v4;
  int v5;
  uint64_t v6;

  v2 = a1 + 16;
  while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
  v3 = (_QWORD *)(a1 + 24);
  if ((std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)(a1 + 24), (_QWORD **)(a1 + 32)) & 1) != 0)
    return 0;
  v4 = *(_BYTE **)(*v3 + 24);
  v5 = v4 == *(_BYTE **)(*v3 + 32)
     ? (*(unsigned __int8 (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3)
     : *v4;
  if (v5 != 110)
    return 0;
  if (*(_QWORD *)(*v3 + 24) == *(_QWORD *)(*v3 + 32))
    (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 72))(*v3);
  boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
  boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_u, 0, "expected 'null'");
  boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_l, 0, "expected 'null'");
  boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_l, 0, "expected 'null'");
  v6 = boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_value(*(_QWORD *)a1);
  MEMORY[0x1AF44C914](v6, "null");
  return 1;
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_number(__int128 *a1)
{
  uint64_t v2;
  int v3;
  __int128 v5;
  char v6;

  v2 = (uint64_t)(a1 + 1);
  while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
  v5 = *a1;
  v6 = 1;
  v3 = boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_minus, 0, (uint64_t)&v5);
  if ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(v2, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_0, 0, (uint64_t)&v5) & 1) != 0|| (boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_int_part((uint64_t)a1, (uint64_t)&v5) & 1) != 0)
  {
    boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_frac_part((uint64_t)a1, (uint64_t)&v5);
    boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_exp_part((uint64_t)a1, (uint64_t)&v5);
    return 1;
  }
  else
  {
    if (v3)
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(v2, "expected digits after -");
    return 0;
  }
}

void boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(uint64_t a1, char *a2)
{
  boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(a1 + 16, a2);
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_close_brace(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 125;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_colon(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 58;
}

uint64_t boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, unsigned int a2)
{
  return (a2 < 0x21) & (0x100002600uLL >> a2);
}

uint64_t boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(uint64_t a1, uint64_t (*a2)(_QWORD *, _QWORD), uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;
  char *v9;
  char v10;

  v6 = (_QWORD *)(a1 + 8);
  if ((std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)(a1 + 8), (_QWORD **)(a1 + 16)) & 1) != 0)
    return 0;
  v8 = (_QWORD *)(*(_QWORD *)a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    a2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v8 + a2);
  v9 = *(char **)(*v6 + 24);
  if (v9 == *(char **)(*v6 + 32))
    v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 72))(*v6);
  else
    v10 = *v9;
  result = a2(v8, v10);
  if ((_DWORD)result)
  {
    if (*(_QWORD *)(*v6 + 24) == *(_QWORD *)(*v6 + 32))
      (*(void (**)(_QWORD))(*(_QWORD *)*v6 + 72))(*v6);
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(a1);
    return 1;
  }
  return result;
}

_QWORD *boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 *v3;
  int v4;
  _QWORD *result;
  uint64_t v6;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = (unsigned __int8 *)v2[3];
  if (v3 == (unsigned __int8 *)v2[4])
    v4 = (*(unsigned __int8 (**)(_QWORD *))(*v2 + 72))(v2);
  else
    v4 = *v3;
  if (v4 == 10)
    *(_QWORD *)(a1 + 48) = (*(_DWORD *)(a1 + 48) + 1);
  else
    ++*(_DWORD *)(a1 + 52);
  result = *(_QWORD **)(a1 + 8);
  v6 = result[3];
  if (v6 == result[4])
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 80))(result);
  result[3] = v6 + 1;
  return result;
}

uint64_t boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_tree(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  char **v4;
  _QWORD *v5;
  BOOL v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  std::string __p;
  _BYTE v55[32];
  __int128 v56;
  char v57;
  _BYTE v58[32];

  v1 = a1;
  v2 = *(_QWORD **)(a1 + 56);
  v3 = *(_QWORD **)(a1 + 64);
  v4 = (char **)(a1 + 56);
  if (v2 != v3)
  {
    v5 = v3 - 2;
    while (*(_DWORD *)v5 == 3)
    {
      *(_QWORD *)(a1 + 64) = v5;
      v6 = v5 == v2;
      v5 -= 2;
      if (v6)
        goto LABEL_6;
    }
    if (*(_DWORD *)v5)
    {
      v31 = v5[1];
      v49 = 0uLL;
      v50 = 0;
      v32 = operator new();
      v33 = operator new(0x60uLL);
      *(_QWORD *)(v32 + 8) = v33;
      v33[7] = 0;
      v33[8] = v33 + 7;
      v33[9] = v33 + 7;
      v33[10] = v33 + 10;
      v33[11] = v33 + 10;
      *(_QWORD *)(v32 + 24) = 0;
      v51 = v32;
      std::pair<std::string,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string&,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>(&__p, (__int128 *)(v1 + 32), &v49);
      std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>((uint64_t)&v56, (__int128 *)&__p);
      boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::insert(*(_QWORD *)(v31 + 24) + 16, *(_QWORD *)(*(_QWORD *)(v31 + 24) + 8), &v56);
      boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)v58);
      if (v57 < 0)
        operator delete((void *)v56);
      boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)v55);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v49);
      *(_DWORD *)v5 = 1;
      v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5[1] + 24) + 8) + 80);
      if (v34)
        v35 = v34 - 80;
      else
        v35 = 0;
      v15 = v35 + 24;
      v36 = *(_QWORD *)(v1 + 72);
      v17 = *(_QWORD **)(v1 + 64);
      if ((unint64_t)v17 >= v36)
      {
        v38 = ((char *)v17 - *v4) >> 4;
        v39 = v38 + 1;
        if (!((unint64_t)(v38 + 1) >> 60))
        {
          v40 = v36 - (_QWORD)*v4;
          if (v40 >> 3 > v39)
            v39 = v40 >> 3;
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
            v41 = 0xFFFFFFFFFFFFFFFLL;
          else
            v41 = v39;
          if (v41)
            v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v1 + 72, v41);
          else
            v42 = 0;
          v43 = &v42[16 * v38];
          v44 = &v42[16 * v41];
          *(_QWORD *)v43 = 3;
          *((_QWORD *)v43 + 1) = v15;
          v37 = v43 + 16;
          v46 = *(char **)(v1 + 56);
          v45 = *(char **)(v1 + 64);
          if (v45 == v46)
            goto LABEL_63;
          do
          {
            *((_OWORD *)v43 - 1) = *((_OWORD *)v45 - 1);
            v43 -= 16;
            v45 -= 16;
          }
          while (v45 != v46);
          goto LABEL_62;
        }
LABEL_67:
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
    }
    else
    {
      v10 = v5[1];
      v52 = 0uLL;
      v53 = 0;
      v49 = 0uLL;
      v50 = 0;
      v11 = operator new();
      v12 = operator new(0x60uLL);
      *(_QWORD *)(v11 + 8) = v12;
      v12[7] = 0;
      v12[8] = v12 + 7;
      v12[9] = v12 + 7;
      v12[10] = v12 + 10;
      v12[11] = v12 + 10;
      *(_QWORD *)(v11 + 24) = 0;
      v51 = v11;
      std::pair<std::string,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>((uint64_t)&__p, &v52, &v49);
      std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>((uint64_t)&v56, (__int128 *)&__p);
      boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::insert(*(_QWORD *)(v10 + 24) + 16, *(_QWORD *)(*(_QWORD *)(v10 + 24) + 8), &v56);
      boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)v58);
      if (v57 < 0)
        operator delete((void *)v56);
      boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)v55);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v49);
      if (SHIBYTE(v53) < 0)
        operator delete((void *)v52);
      v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5[1] + 24) + 8) + 80);
      if (v13)
        v14 = v13 - 80;
      else
        v14 = 0;
      v15 = v14 + 24;
      v16 = *(_QWORD *)(v1 + 72);
      v17 = *(_QWORD **)(v1 + 64);
      if ((unint64_t)v17 >= v16)
      {
        v18 = ((char *)v17 - *v4) >> 4;
        v19 = v18 + 1;
        if (!((unint64_t)(v18 + 1) >> 60))
        {
          v20 = v16 - (_QWORD)*v4;
          if (v20 >> 3 > v19)
            v19 = v20 >> 3;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
            v21 = 0xFFFFFFFFFFFFFFFLL;
          else
            v21 = v19;
          if (v21)
            v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v1 + 72, v21);
          else
            v22 = 0;
          v43 = &v22[16 * v18];
          v44 = &v22[16 * v21];
          *(_QWORD *)v43 = 3;
          *((_QWORD *)v43 + 1) = v15;
          v37 = v43 + 16;
          v47 = *(char **)(v1 + 56);
          v45 = *(char **)(v1 + 64);
          if (v45 == v47)
            goto LABEL_63;
          do
          {
            *((_OWORD *)v43 - 1) = *((_OWORD *)v45 - 1);
            v43 -= 16;
            v45 -= 16;
          }
          while (v45 != v47);
LABEL_62:
          v45 = *v4;
LABEL_63:
          *(_QWORD *)(v1 + 56) = v43;
          *(_QWORD *)(v1 + 64) = v37;
          *(_QWORD *)(v1 + 72) = v44;
          if (v45)
            operator delete(v45);
          goto LABEL_65;
        }
        goto LABEL_67;
      }
    }
    *v17 = 3;
    v17[1] = v15;
    v37 = v17 + 2;
LABEL_65:
    *(_QWORD *)(v1 + 64) = v37;
    return *(v37 - 1);
  }
LABEL_6:
  v7 = a1 + 72;
  v8 = *(_QWORD *)(v1 + 72);
  if ((unint64_t)v2 >= v8)
  {
    v23 = v8 - (_QWORD)v2;
    v24 = v23 >> 3;
    if ((unint64_t)(v23 >> 3) <= 1)
      v24 = 1;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
      v25 = 0xFFFFFFFFFFFFFFFLL;
    else
      v25 = v24;
    v26 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v7, v25);
    v28 = &v26[2 * v27];
    *v26 = 3;
    v26[1] = v1;
    v9 = v26 + 2;
    v30 = *(char **)(v1 + 56);
    v29 = *(char **)(v1 + 64);
    if (v29 != v30)
    {
      do
      {
        *((_OWORD *)v26 - 1) = *((_OWORD *)v29 - 1);
        v26 -= 2;
        v29 -= 16;
      }
      while (v29 != v30);
      v29 = *v4;
    }
    *(_QWORD *)(v1 + 56) = v26;
    *(_QWORD *)(v1 + 64) = v9;
    *(_QWORD *)(v1 + 72) = v28;
    if (v29)
      operator delete(v29);
  }
  else
  {
    *v2 = 3;
    v2[1] = v1;
    v9 = v2 + 2;
  }
  *(_QWORD *)(v1 + 64) = v9;
  return v1;
}

void sub_1AD9EFEEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  uint64_t v23;

  std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::~pair(v23 - 104);
  std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::~pair((uint64_t)&a23);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v5 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 24) = v6;
  }
  v7 = operator new();
  boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::multi_index_container(v7, *((_QWORD *)a3 + 3));
  *(_QWORD *)(a1 + 48) = v7;
  return a1;
}

void sub_1AD9F0050(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::pair<std::string,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string&,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  std::string::size_type v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  v7 = operator new();
  boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::multi_index_container(v7, *((_QWORD *)a3 + 3));
  this[2].__r_.__value_.__r.__words[0] = v7;
  return this;
}

void sub_1AD9F0150(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(uint64_t a1, uint64_t (*a2)(_QWORD *, _QWORD), uint64_t a3, char *a4)
{
  uint64_t result;

  result = boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(a1, a2, a3);
  if ((result & 1) == 0)
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(a1, a4);
  return result;
}

void boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(uint64_t a1, char *a2)
{
  _QWORD v3[3];
  _QWORD v4[3];
  _QWORD v5[9];

  std::string::basic_string[abi:ne180100]<0>(v4, a2);
  boost::property_tree::file_parser_error::file_parser_error((uint64_t)v5, (uint64_t)v4, (__int128 *)(a1 + 24), *(int *)(a1 + 48));
  v5[0] = &unk_1E5D297D0;
  v3[0] = "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Develop"
          "er/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/boost/property_tree/"
          "json_parser/detail/parser.hpp";
  v3[1] = "void boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<cha"
          "r>, std::istreambuf_iterator<char>, std::istreambuf_iterator<char>>::parse_error(const char *) [Encoding = boo"
          "st::property_tree::json_parser::detail::encoding<char>, Iterator = std::istreambuf_iterator<char>, Sentinel = "
          "std::istreambuf_iterator<char>]";
  v3[2] = 47;
  boost::throw_exception<boost::property_tree::json_parser::json_parser_error>((uint64_t)v5, (uint64_t)v3);
}

void sub_1AD9F0254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, std::runtime_error a19)
{
  boost::property_tree::file_parser_error::~file_parser_error(&a19);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_close_bracket(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 93;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_backslash(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 92;
}

void boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_escape(uint64_t *a1)
{
  uint64_t v2;
  _QWORD **v3;
  _QWORD **v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  std::string *v8;
  _BYTE *v9;
  int v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  std::string::value_type v14;
  uint64_t v15;
  _BYTE *v16;
  int v17;
  uint64_t v18;
  _BYTE *v19;
  int v20;
  uint64_t v21;
  _BYTE *v22;
  int v23;
  uint64_t v24;
  _BYTE *v25;
  int v26;
  uint64_t v27;
  _BYTE *v28;
  int v29;
  uint64_t v30;
  unsigned __int8 *v31;
  int v32;

  v2 = (uint64_t)(a1 + 2);
  v3 = (_QWORD **)(a1 + 3);
  v4 = (_QWORD **)(a1 + 4);
  if ((std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)a1 + 3, (_QWORD **)a1 + 4) & 1) == 0)
  {
    v5 = (_BYTE *)(*v3)[3];
    v6 = v5 == (_BYTE *)(*v3)[4] ? (*(unsigned __int8 (**)(_QWORD))(**v3 + 72))(*v3) : *v5;
    if (v6 == 34)
    {
      if ((*v3)[3] == (*v3)[4])
        (*(void (**)(_QWORD))(**v3 + 72))(*v3);
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
      v7 = *(_QWORD *)(*a1 + 64);
      if (*(_DWORD *)(v7 - 16) == 2)
        v8 = (std::string *)(*a1 + 32);
      else
        v8 = *(std::string **)(v7 - 8);
      v14 = 34;
LABEL_98:
      std::string::push_back(v8, v14);
      return;
    }
  }
  if ((std::istreambuf_iterator<char>::equal[abi:ne180100](v3, v4) & 1) == 0)
  {
    v9 = (_BYTE *)(*v3)[3];
    v10 = v9 == (_BYTE *)(*v3)[4]
        ? (*(unsigned __int8 (**)(_QWORD))(**v3 + 72))(*v3)
        : *v9;
    if (v10 == 92)
    {
      if ((*v3)[3] == (*v3)[4])
        (*(void (**)(_QWORD))(**v3 + 72))(*v3);
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
      v11 = *(_QWORD *)(*a1 + 64);
      if (*(_DWORD *)(v11 - 16) == 2)
        v8 = (std::string *)(*a1 + 32);
      else
        v8 = *(std::string **)(v11 - 8);
      v14 = 92;
      goto LABEL_98;
    }
  }
  if ((std::istreambuf_iterator<char>::equal[abi:ne180100](v3, v4) & 1) == 0)
  {
    v12 = (_BYTE *)(*v3)[3];
    v13 = v12 == (_BYTE *)(*v3)[4]
        ? (*(unsigned __int8 (**)(_QWORD))(**v3 + 72))(*v3)
        : *v12;
    if (v13 == 47)
    {
      if ((*v3)[3] == (*v3)[4])
        (*(void (**)(_QWORD))(**v3 + 72))(*v3);
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
      v15 = *(_QWORD *)(*a1 + 64);
      if (*(_DWORD *)(v15 - 16) == 2)
        v8 = (std::string *)(*a1 + 32);
      else
        v8 = *(std::string **)(v15 - 8);
      v14 = 47;
      goto LABEL_98;
    }
  }
  if ((std::istreambuf_iterator<char>::equal[abi:ne180100](v3, v4) & 1) == 0)
  {
    v16 = (_BYTE *)(*v3)[3];
    v17 = v16 == (_BYTE *)(*v3)[4]
        ? (*(unsigned __int8 (**)(_QWORD))(**v3 + 72))(*v3)
        : *v16;
    if (v17 == 98)
    {
      if ((*v3)[3] == (*v3)[4])
        (*(void (**)(_QWORD))(**v3 + 72))(*v3);
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
      v18 = *(_QWORD *)(*a1 + 64);
      if (*(_DWORD *)(v18 - 16) == 2)
        v8 = (std::string *)(*a1 + 32);
      else
        v8 = *(std::string **)(v18 - 8);
      v14 = 8;
      goto LABEL_98;
    }
  }
  if ((std::istreambuf_iterator<char>::equal[abi:ne180100](v3, v4) & 1) == 0)
  {
    v19 = (_BYTE *)(*v3)[3];
    v20 = v19 == (_BYTE *)(*v3)[4]
        ? (*(unsigned __int8 (**)(_QWORD))(**v3 + 72))(*v3)
        : *v19;
    if (v20 == 102)
    {
      if ((*v3)[3] == (*v3)[4])
        (*(void (**)(_QWORD))(**v3 + 72))(*v3);
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
      v21 = *(_QWORD *)(*a1 + 64);
      if (*(_DWORD *)(v21 - 16) == 2)
        v8 = (std::string *)(*a1 + 32);
      else
        v8 = *(std::string **)(v21 - 8);
      v14 = 12;
      goto LABEL_98;
    }
  }
  if ((std::istreambuf_iterator<char>::equal[abi:ne180100](v3, v4) & 1) == 0)
  {
    v22 = (_BYTE *)(*v3)[3];
    v23 = v22 == (_BYTE *)(*v3)[4]
        ? (*(unsigned __int8 (**)(_QWORD))(**v3 + 72))(*v3)
        : *v22;
    if (v23 == 110)
    {
      if ((*v3)[3] == (*v3)[4])
        (*(void (**)(_QWORD))(**v3 + 72))(*v3);
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
      v24 = *(_QWORD *)(*a1 + 64);
      if (*(_DWORD *)(v24 - 16) == 2)
        v8 = (std::string *)(*a1 + 32);
      else
        v8 = *(std::string **)(v24 - 8);
      v14 = 10;
      goto LABEL_98;
    }
  }
  if ((std::istreambuf_iterator<char>::equal[abi:ne180100](v3, v4) & 1) == 0)
  {
    v25 = (_BYTE *)(*v3)[3];
    v26 = v25 == (_BYTE *)(*v3)[4]
        ? (*(unsigned __int8 (**)(_QWORD))(**v3 + 72))(*v3)
        : *v25;
    if (v26 == 114)
    {
      if ((*v3)[3] == (*v3)[4])
        (*(void (**)(_QWORD))(**v3 + 72))(*v3);
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
      v27 = *(_QWORD *)(*a1 + 64);
      if (*(_DWORD *)(v27 - 16) == 2)
        v8 = (std::string *)(*a1 + 32);
      else
        v8 = *(std::string **)(v27 - 8);
      v14 = 13;
      goto LABEL_98;
    }
  }
  if ((std::istreambuf_iterator<char>::equal[abi:ne180100](v3, v4) & 1) == 0)
  {
    v28 = (_BYTE *)(*v3)[3];
    v29 = v28 == (_BYTE *)(*v3)[4]
        ? (*(unsigned __int8 (**)(_QWORD))(**v3 + 72))(*v3)
        : *v28;
    if (v29 == 116)
    {
      if ((*v3)[3] == (*v3)[4])
        (*(void (**)(_QWORD))(**v3 + 72))(*v3);
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
      v30 = *(_QWORD *)(*a1 + 64);
      if (*(_DWORD *)(v30 - 16) == 2)
        v8 = (std::string *)(*a1 + 32);
      else
        v8 = *(std::string **)(v30 - 8);
      v14 = 9;
      goto LABEL_98;
    }
  }
  if ((std::istreambuf_iterator<char>::equal[abi:ne180100](v3, v4) & 1) != 0
    || ((v31 = (unsigned __int8 *)(*v3)[3], v31 == (unsigned __int8 *)(*v3)[4])
      ? (v32 = (*(unsigned __int8 (**)(_QWORD))(**v3 + 72))(*v3))
      : (v32 = *v31),
        v32 != 117))
  {
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(v2, "invalid escape sequence");
  }
  if ((*v3)[3] == (*v3)[4])
    (*(void (**)(_QWORD))(**v3 + 72))(*v3);
  boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
  boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_codepoint_ref(a1);
}

uint64_t boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_value(uint64_t a1)
{
  _DWORD *v1;
  _DWORD *v2;
  _DWORD *i;

  v1 = *(_DWORD **)(a1 + 56);
  v2 = *(_DWORD **)(a1 + 64);
  if (v1 == v2)
    return boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_tree(a1);
  for (i = v2 - 4; *i == 3; i -= 4)
  {
    *(_QWORD *)(a1 + 64) = i;
    if (i == v1)
      return boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_tree(a1);
  }
  if (*i != 1)
    return boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_tree(a1);
  *i = 2;
  if (*(char *)(a1 + 55) < 0)
  {
    **(_BYTE **)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 55) = 0;
  }
  return a1 + 32;
}

uint64_t boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::need_cur(uint64_t a1, char *a2)
{
  _QWORD *v4;
  char *v5;

  v4 = (_QWORD *)(a1 + 8);
  if (std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)(a1 + 8), (_QWORD **)(a1 + 16)))
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(a1, a2);
  v5 = *(char **)(*v4 + 24);
  if (v5 == *(char **)(*v4 + 32))
    return (char)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 72))(*v4);
  else
    return *v5;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_r(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 114;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_u(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 117;
}

void boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_codepoint_ref(uint64_t *a1)
{
  unsigned int v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];

  v2 = boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_hex_quad((uint64_t)a1);
  if ((v2 & 0xFC00) == 0xD800)
  {
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect((uint64_t)(a1 + 2), (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_backslash, 0, "invalid codepoint, stray high surrogate");
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect((uint64_t)(a1 + 2), (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_u, 0, "expected codepoint reference after high surrogate");
    v3 = boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_hex_quad((uint64_t)a1);
    if ((v3 & 0xFC00) != 0xDC00)
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error((uint64_t)(a1 + 2), "expected low surrogate after high surrogate");
    v2 = (v3 & 0x3FF | ((v2 & 0x3FF) << 10)) + 0x10000;
  }
  else if ((v2 & 0xFC00) == 0xDC00)
  {
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error((uint64_t)(a1 + 2), "invalid codepoint, stray low surrogate");
  }
  v5 = *a1;
  v4 = a1[1];
  v6[0] = boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::on_code_unit;
  v6[1] = 0;
  v6[2] = v5;
  boost::property_tree::json_parser::detail::utf8_utf8_encoding::feed_codepoint<boost::_bi::bind_t<void,boost::_mfi::mf1<void,boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,char>,boost::_bi::list2<boost::reference_wrapper<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>,boost::arg<1>>>>(v4, v2, (uint64_t)v6);
}

void boost::property_tree::json_parser::detail::utf8_utf8_encoding::feed_codepoint<boost::_bi::bind_t<void,boost::_mfi::mf1<void,boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,char>,boost::_bi::list2<boost::reference_wrapper<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>,boost::arg<1>>>>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(_QWORD *, uint64_t);
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(_QWORD *, uint64_t);
  _QWORD *v15;
  uint64_t v16;
  void (*v17)(_QWORD *, uint64_t);
  _QWORD *v18;
  uint64_t v19;
  void (*v20)(_QWORD *, uint64_t);
  _QWORD *v21;
  uint64_t v22;

  if (a2 > 0x7F)
  {
    if (a2 > 0x7FF)
    {
      if (HIWORD(a2))
      {
        if (HIWORD(a2) > 0x10u)
          return;
        v12 = (a2 >> 18) | 0xFFFFFFF0;
        v13 = *(_QWORD *)(a3 + 8);
        v14 = *(void (**)(_QWORD *, uint64_t))a3;
        v15 = (_QWORD *)(*(_QWORD *)(a3 + 16) + (v13 >> 1));
        if ((v13 & 1) != 0)
          v14 = *(void (**)(_QWORD *, uint64_t))(*v15 + v14);
        v14(v15, v12);
        v11 = (a2 >> 12) & 0x3F | 0xFFFFFF80;
      }
      else
      {
        v11 = (a2 >> 12) | 0xFFFFFFE0;
      }
      v16 = *(_QWORD *)(a3 + 8);
      v17 = *(void (**)(_QWORD *, uint64_t))a3;
      v18 = (_QWORD *)(*(_QWORD *)(a3 + 16) + (v16 >> 1));
      if ((v16 & 1) != 0)
        v17 = *(void (**)(_QWORD *, uint64_t))(*v18 + v17);
      v17(v18, v11);
      v10 = (a2 >> 6) & 0x3F | 0xFFFFFF80;
    }
    else
    {
      v10 = (a2 >> 6) | 0xFFFFFFC0;
    }
    v19 = *(_QWORD *)(a3 + 8);
    v20 = *(void (**)(_QWORD *, uint64_t))a3;
    v21 = (_QWORD *)(*(_QWORD *)(a3 + 16) + (v19 >> 1));
    if ((v19 & 1) != 0)
      v20 = *(void (**)(_QWORD *, uint64_t))(*v21 + v20);
    v20(v21, v10);
    v9 = a2 & 0x3F | 0xFFFFFF80;
    v22 = *(_QWORD *)(a3 + 8);
    v7 = *(void (**)(_QWORD *, uint64_t))a3;
    v8 = (_QWORD *)(*(_QWORD *)(a3 + 16) + (v22 >> 1));
    if ((v22 & 1) != 0)
      v7 = *(void (**)(_QWORD *, uint64_t))(*v8 + v7);
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 8);
    v5 = *(_QWORD *)(a3 + 16);
    v7 = *(void (**)(_QWORD *, uint64_t))a3;
    v8 = (_QWORD *)(v5 + (v6 >> 1));
    if ((v6 & 1) != 0)
      v7 = *(void (**)(_QWORD *, uint64_t))(*v8 + v7);
    v9 = (char)a2;
  }
  v7(v8, v9);
}

void boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::on_code_unit(uint64_t a1, std::string::value_type a2)
{
  uint64_t v2;
  std::string *v3;

  v2 = *(_QWORD *)(a1 + 64);
  if (*(_DWORD *)(v2 - 16) == 2)
    v3 = (std::string *)(a1 + 32);
  else
    v3 = *(std::string **)(v2 - 8);
  std::string::push_back(v3, a2);
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_hex_quad(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;

  LODWORD(v1) = 0;
  v2 = a1 + 16;
  v3 = 4;
  do
  {
    v4 = boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::need_cur(v2, "invalid escape sequence");
    v5 = v4 - 48;
    if ((v4 - 48) <= 9)
      goto LABEL_5;
    if ((v4 - 65) <= 5)
    {
      v5 = v4 - 55;
LABEL_5:
      if (v5 < 0)
        goto LABEL_9;
      goto LABEL_10;
    }
    if ((v4 - 97) > 5 || (v5 = v4 - 87, v4 - 87 < 0))
LABEL_9:
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(v2, "invalid escape sequence");
LABEL_10:
    v1 = (v5 + 16 * v1);
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
    --v3;
  }
  while (v3);
  return v1;
}

_QWORD *boost::property_tree::json_parser::detail::utf8_utf8_encoding::transcode_codepoint<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>,boost::_bi::bind_t<void,boost::_mfi::mf1<void,boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,char>,boost::_bi::list2<boost::reference_wrapper<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>,boost::arg<1>>>,boost::_bi::bind_t<void,boost::_mfi::mf1<void,boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>,char const*>,boost::_bi::list2<boost::_bi::value<boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>*>,boost::_bi::value<char const*>>>>(uint64_t a1, _QWORD **a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unint64_t v11;
  void (*v12)(_QWORD, _QWORD);
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void (*v16)(_QWORD, _QWORD);
  _QWORD *v17;
  _QWORD *result;
  uint64_t v19;
  char v20;
  void (*v21)(_QWORD, _QWORD);
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void (*v25)(_QWORD, _QWORD);
  _QWORD *v26;
  int v27;
  char *v28;
  char v29;
  uint64_t v30;
  void (*v31)(_QWORD, _QWORD);
  _QWORD *v32;
  char *v33;
  char v34;
  uint64_t v35;
  void (*v36)(_QWORD, _QWORD);
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;

  v39 = a3;
  v8 = *a2;
  v9 = (unsigned __int8 *)(*a2)[3];
  v10 = (unsigned __int8 *)(*a2)[4];
  if (v9 == v10)
  {
    v11 = (*(uint64_t (**)(_QWORD *))(*v8 + 72))(v8);
    v8 = *a2;
    v9 = (unsigned __int8 *)(*a2)[3];
    v10 = (unsigned __int8 *)(*a2)[4];
  }
  else
  {
    v11 = *v9;
  }
  if (v9 == v10)
  {
    (*(void (**)(_QWORD *))(*v8 + 80))(v8);
    if ((v11 & 0x80) == 0)
      goto LABEL_6;
  }
  else
  {
    v8[3] = v9 + 1;
    if ((v11 & 0x80) == 0)
    {
LABEL_6:
      if (v11 <= 0x1Fu)
      {
        v12 = *(void (**)(_QWORD, _QWORD))a5;
        v13 = *(_QWORD *)(a5 + 8);
        v14 = (_QWORD *)(*(_QWORD *)(a5 + 16) + (v13 >> 1));
        if ((v13 & 1) != 0)
          v12 = *(void (**)(_QWORD, _QWORD))(*v14 + v12);
        v12(v14, *(_QWORD *)(a5 + 24));
      }
      v15 = *(_QWORD *)(a4 + 8);
      v16 = *(void (**)(_QWORD, _QWORD))a4;
      v17 = (_QWORD *)(*(_QWORD *)(a4 + 16) + (v15 >> 1));
      if ((v15 & 1) != 0)
        v16 = *(void (**)(_QWORD, _QWORD))(*v17 + v16);
      return (_QWORD *)((uint64_t (*)(_QWORD *, _QWORD))v16)(v17, (char)v11);
    }
  }
  v19 = (v11 >> 3) & 0xF;
  v20 = boost::property_tree::json_parser::detail::utf8_utf8_encoding::trail_table(unsigned char)const::table[v19];
  if ((unint64_t)(v19 - 15) <= 0xFFFFFFFFFFFFFFF8)
  {
    v21 = *(void (**)(_QWORD, _QWORD))a5;
    v22 = *(_QWORD *)(a5 + 8);
    v23 = (_QWORD *)(*(_QWORD *)(a5 + 16) + (v22 >> 1));
    if ((v22 & 1) != 0)
      v21 = *(void (**)(_QWORD, _QWORD))(*v23 + v21);
    v21(v23, *(_QWORD *)(a5 + 24));
  }
  v24 = *(_QWORD *)(a4 + 8);
  v25 = *(void (**)(_QWORD, _QWORD))a4;
  v26 = (_QWORD *)(*(_QWORD *)(a4 + 16) + (v24 >> 1));
  if ((v24 & 1) != 0)
    v25 = *(void (**)(_QWORD, _QWORD))(*v26 + v25);
  result = (_QWORD *)((uint64_t (*)(_QWORD *, _QWORD))v25)(v26, (char)v11);
  if ((unint64_t)(v19 - 8) <= 6)
  {
    if (v20 <= 1)
      v27 = 1;
    else
      v27 = v20;
    do
    {
      if ((std::istreambuf_iterator<char>::equal[abi:ne180100](a2, &v39) & 1) != 0
        || ((v28 = (char *)(*a2)[3], v28 == (char *)(*a2)[4])
          ? (v29 = (*(uint64_t (**)(_QWORD))(**a2 + 72))(*a2))
          : (v29 = *v28),
            (v29 & 0xC0) != 0x80))
      {
        v30 = *(_QWORD *)(a5 + 8);
        v31 = *(void (**)(_QWORD, _QWORD))a5;
        v32 = (_QWORD *)(*(_QWORD *)(a5 + 16) + (v30 >> 1));
        if ((v30 & 1) != 0)
          v31 = *(void (**)(_QWORD, _QWORD))(*v32 + v31);
        v31(v32, *(_QWORD *)(a5 + 24));
      }
      v33 = (char *)(*a2)[3];
      if (v33 == (char *)(*a2)[4])
        v34 = (*(uint64_t (**)(_QWORD))(**a2 + 72))(*a2);
      else
        v34 = *v33;
      v35 = *(_QWORD *)(a4 + 8);
      v36 = *(void (**)(_QWORD, _QWORD))a4;
      v37 = (_QWORD *)(*(_QWORD *)(a4 + 16) + (v35 >> 1));
      if ((v35 & 1) != 0)
        v36 = *(void (**)(_QWORD, _QWORD))(*v37 + v36);
      v36(v37, v34);
      result = *a2;
      v38 = (*a2)[3];
      if (v38 == (*a2)[4])
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 80))(result);
      else
        result[3] = v38 + 1;
      --v27;
    }
    while (v27);
  }
  return result;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_e(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 101;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_a(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 97;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_l(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 108;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_s(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 115;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_minus(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 45;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_0(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 48;
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_int_part(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1 + 16;
  v4 = boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(a1 + 16, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_digit0, 0, a2);
  if ((_DWORD)v4)
  {
    while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(v3, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_digit, 0, a2) & 1) != 0);
  }
  return v4;
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_frac_part(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = a1 + 16;
  result = boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(a1 + 16, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_dot, 0, a2);
  if ((_DWORD)result)
  {
    if ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(v3, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_digit, 0, a2) & 1) == 0)boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(v3, "need at least one digit after '.'");
    do
      result = boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(v3, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_digit, 0, a2);
    while ((result & 1) != 0);
  }
  return result;
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_exp_part(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = a1 + 16;
  result = boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(a1 + 16, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_eE, 0, a2);
  if ((_DWORD)result)
  {
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(v3, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_plusminus, 0, a2);
    if ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(v3, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_digit, 0, a2) & 1) == 0)boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(v3, "need at least one digit in exponent");
    do
      result = boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(v3, (uint64_t (*)(_QWORD *, _QWORD))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_digit, 0, a2);
    while ((result & 1) != 0);
  }
  return result;
}

uint64_t boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(uint64_t a1, uint64_t (*a2)(_QWORD *, _QWORD), uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;
  char *v11;
  char v12;
  std::string::value_type *v13;
  std::string::value_type v14;

  v8 = (_QWORD *)(a1 + 8);
  if ((std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)(a1 + 8), (_QWORD **)(a1 + 16)) & 1) != 0)
    return 0;
  v10 = (_QWORD *)(*(_QWORD *)a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    a2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v10 + a2);
  v11 = *(char **)(*v8 + 24);
  if (v11 == *(char **)(*v8 + 32))
    v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v8 + 72))(*v8);
  else
    v12 = *v11;
  result = a2(v10, v12);
  if ((_DWORD)result)
  {
    v13 = *(std::string::value_type **)(*v8 + 24);
    if (v13 == *(std::string::value_type **)(*v8 + 32))
      v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v8 + 72))(*v8);
    else
      v14 = *v13;
    boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>::operator()(a4, v14);
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(a1);
    return 1;
  }
  return result;
}

void boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>::operator()(uint64_t a1, std::string::value_type __c)
{
  uint64_t v4;
  std::string *v5;

  if (*(_BYTE *)(a1 + 16))
  {
    boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_value(*(_QWORD *)a1);
    *(_BYTE *)(a1 + 16) = 0;
  }
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  if (*(_DWORD *)(v4 - 16) == 2)
    v5 = (std::string *)(*(_QWORD *)a1 + 32);
  else
    v5 = *(std::string **)(v4 - 8);
  std::string::push_back(v5, __c);
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_digit0(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, unsigned __int8 a2)
{
  return a2 - 49 < 9;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_digit(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, unsigned __int8 a2)
{
  return a2 - 48 < 0xA;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_dot(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 46;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_eE(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, char a2)
{
  return (a2 & 0xDF) == 69;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_plusminus(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 43 || a2 == 45;
}

__int128 *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::pair<std::string,quasar::PTree> *,std::pair<std::string,quasar::PTree> *,std::pair<std::string,quasar::PTree> *,0>(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      std::pair<std::string,quasar::PTree>::operator=[abi:ne180100](a3, v4);
      v4 = (__int128 *)((char *)v4 + 88);
      a3 += 88;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t std::pair<std::string,quasar::PTree>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v4;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  std::string::operator=((std::string *)(a1 + 32), (const std::string *)(a2 + 2));
  if ((__int128 *)a1 != a2)
    std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(a1 + 56, *((std::string **)a2 + 7), *((std::string **)a2 + 8), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3));
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  return a1;
}

uint64_t TInputStream::verifyVersion(TInputStream *this, char *a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  char *v10;
  uint64_t v11;
  char *v12;
  unsigned int *v13;
  unsigned __int8 v14;
  unsigned int v15;
  _QWORD *v16;
  _QWORD *v18;
  TLocaleInfo *v19;
  void *__p[2];
  char v21;

  v10 = (char *)this + 152;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v12 = (char *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)v10, (const void **)__p);
  if (v21 < 0)
    operator delete(__p[0]);
  if ((char *)this + 160 != v12)
  {
    LOBYTE(__p[0]) = 0;
    v13 = (unsigned int *)(v12 + 56);
    if (v12[79] < 0)
      v13 = *(unsigned int **)v13;
    if ((v14 & 1) == 0
    {
      v19 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v19);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v19;
    }
    v15 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v13, (BOOL *)__p);
    if (LOBYTE(__p[0]))
    {
      v16 = (_QWORD *)((char *)this + 16);
      if (*((char *)this + 39) < 0)
        v16 = (_QWORD *)*v16;
      tknPrintf("Error: %s : Expected %s in range [%llu,%llu]\n", v11, v16, a2, a3, a4);
      return 1;
    }
    a5 = v15;
  }
  if (a5 >= a3 && a5 <= a4)
    return 0;
  v18 = (_QWORD *)((char *)this + 16);
  if (*((char *)this + 39) < 0)
    v18 = (_QWORD *)*v18;
  tknPrintf("Error: %s : %llu : Expected %s in range [%llu,%llu]\n", v11, v18, a5, a2, a3, a4);
  return 1;
}

void sub_1AD9F13A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  MEMORY[0x1AF44D190](v19, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TInputStream::verifyHeader(uint64_t a1, char *__s, uint64_t a3, uint64_t a4)
{
  const void **v8;
  size_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  const void *v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  size_t v23;
  const void *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  char v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;

  v8 = (const void **)(a1 + 40);
  v9 = strlen(__s);
  v11 = v9;
  v12 = *(unsigned __int8 *)(a1 + 63);
  if (*(char *)(a1 + 63) < 0)
  {
    if (v9 != *(_QWORD *)(a1 + 48))
      goto LABEL_9;
    if (v9 == -1)
      goto LABEL_57;
    v13 = *v8;
  }
  else
  {
    if (v9 != v12)
      goto LABEL_9;
    v13 = v8;
    if (v11 == -1)
LABEL_57:
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (memcmp(v13, __s, v11))
  {
LABEL_9:
    v14 = (_QWORD *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
    {
      v14 = (_QWORD *)*v14;
      if ((v12 & 0x80) == 0)
        goto LABEL_11;
    }
    else if ((v12 & 0x80) == 0)
    {
LABEL_11:
      tknPrintf("Error: File '%s' : '%s' : Bad file type, expected '%s'\n", v10, v14, v8, __s);
      return 1;
    }
    v8 = (const void **)*v8;
    goto LABEL_11;
  }
  v34 = a3;
  if (!a4)
  {
LABEL_37:
    v27 = (_QWORD *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      v27 = (_QWORD *)*v27;
    v28 = (_QWORD *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0)
      v28 = (_QWORD *)*v28;
    tknPrintf("Error: File '%s' : '%s' : Unsupported file version prefix. Supported file versions: ", v10, v27, v28);
    if (a4)
    {
      v30 = (_QWORD *)(v34 + 24);
      v31 = 1;
      do
      {
        if (!*(v30 - 2))
        {
          if ((v31 & 1) == 0)
            tknPrintString(", ");
          if (*(_BYTE *)*(v30 - 1))
            tknPrintf("%s.", v29, *(v30 - 1));
          tknPrintf("%llu", v29, *v30);
          v31 = 0;
        }
        v30 += 4;
        --a4;
      }
      while (a4);
    }
    tknPrintString("\n");
    return 1;
  }
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = *(unsigned __int8 *)(a1 + 95);
  v20 = v34 + 16;
  v21 = a4;
  do
  {
    v22 = strlen(*(const char **)v20);
    v23 = v22;
    if ((v19 & 0x80) != 0)
    {
      if (v22 != *(_QWORD *)(a1 + 80))
        goto LABEL_31;
      if (v22 == -1)
        std::string::__throw_out_of_range[abi:ne180100]();
      v24 = *(const void **)(a1 + 72);
    }
    else
    {
      v24 = (const void *)(a1 + 72);
      if (v23 != v19)
        goto LABEL_31;
    }
    if (!memcmp(v24, *(const void **)v20, v23))
    {
      if (*(_QWORD *)(a1 + 96) == *(_QWORD *)(v20 + 8))
        v21 = v16;
      if (v18)
        v25 = v18;
      else
        v25 = *(_QWORD *)(v20 + 8);
      if (!*(_QWORD *)(v20 - 8))
      {
        v18 = v25;
        v17 = *(_QWORD *)(v20 + 8);
      }
    }
LABEL_31:
    ++v16;
    v20 += 32;
  }
  while (a4 != v16);
  if (!v18)
    goto LABEL_37;
  if (v21 == a4)
  {
    v26 = (_QWORD *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      v26 = (_QWORD *)*v26;
    tknPrintf("Error: %s : %llu : Expected file version in range [%llu,%llu]\n", v10, v26, *(_QWORD *)(a1 + 96), v18, v17);
    return 1;
  }
  v32 = *(_QWORD *)(v34 + 32 * v21 + 8);
  if (v32)
  {
    v33 = (_QWORD *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      v33 = (_QWORD *)*v33;
    tknPrintf("Error: %s : %llu : Deprecated in or around TextProc version %s. Expected file version in range [%llu,%llu]\n", v10, v33, *(_QWORD *)(a1 + 96), v32, v18, v17);
    return 1;
  }
  return 0;
}

uint64_t TInputStream::readHeader(TInputStream *this)
{
  std::string *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *NextToken;
  void **v7;
  uint64_t v8;
  std::string::size_type v9;
  uint64_t v10;
  _QWORD *v11;
  const char *v12;
  _QWORD *v13;
  std::exception_vtbl *v14;
  _QWORD *v15;
  const char *v16;
  _QWORD *v17;
  char v18;
  uint64_t v19;
  char *v20;
  char *v21;
  std::exception_vtbl *v22;
  uint64_t v23;
  std::exception_vtbl *v24;
  uint64_t v25;
  std::exception_vtbl *v26;
  std::exception_vtbl *v27;
  std::exception_vtbl *v28;
  char *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  const char *v34;
  uint64_t v35;
  std::string *p_str;
  int v40;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  std::string *p_second;
  std::pair<std::string, std::string> *v47;
  uint64_t v48;
  std::string::size_type v49;
  uint64_t *v50;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  _QWORD *exception;
  _QWORD *v57;
  const char *size;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  _QWORD *v74;
  _QWORD *v75;
  std::pair<std::string, std::string> *v76;
  std::exception_vtbl *v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  _QWORD *v83;
  _QWORD *v84;
  const char *v85;
  _QWORD *v86;
  _QWORD *v87;
  const char *v88;
  _QWORD *v89;
  _QWORD *v90;
  const char *v91;
  _QWORD *v92;
  _QWORD *v93;
  const char *v94;
  _QWORD *v95;
  _QWORD *v96;
  const char *v97;
  _QWORD *v98;
  _QWORD *v99;
  const char *v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  const char *v105;
  _QWORD *v106;
  int v107;
  void *v108[2];
  char v109;
  std::exception v110[2];
  char v111;
  char v112;
  std::vector<std::pair<std::string, std::string>> v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  std::string __str;
  void *v124[2];
  char v125;
  uint64_t v126;
  char v127;
  char v128;
  void *__p;
  __int128 v130;
  _BYTE v131[17];
  char v132;
  std::exception v133;
  __int128 v134;
  _BYTE v135[7];
  char v136;
  char v137;
  char *__s1;
  __int128 v139;
  _BYTE v140[256];
  char v141;
  uint64_t v142;

  v142 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 8))
    return 0;
  v2 = (std::string *)((char *)this + 72);
  MEMORY[0x1AF44C914]((char *)this + 72, "");
  *((_QWORD *)this + 12) = 1;
  if (*((char *)this + 63) < 0)
  {
    **((_BYTE **)this + 5) = 0;
    *((_QWORD *)this + 6) = 0;
  }
  else
  {
    *((_BYTE *)this + 40) = 0;
    *((_BYTE *)this + 63) = 0;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 152, *((_QWORD **)this + 20));
  *((_QWORD *)this + 19) = (char *)this + 160;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 20) = 0;
  std::istream::tellg();
  v4 = v126;
  __s1 = v140;
  v139 = xmmword_1AE1418C0;
  v141 = 1;
  TInputStream::getNextLine((uint64_t)this, (uint64_t)&__s1);
  if (*((_QWORD *)&v139 + 1) >= (unint64_t)v139)
  {
    if (v141)
    {
      __str.__r_.__value_.__s.__data_[0] = 0;
      TBuffer<char>::insert((uint64_t)&__s1, *((unint64_t *)&v139 + 1), (char *)&__str, 1uLL);
      --*((_QWORD *)&v139 + 1);
    }
    else if ((_QWORD)v139)
    {
      __s1[(_QWORD)v139 - 1] = 0;
    }
  }
  else
  {
    __s1[*((_QWORD *)&v139 + 1)] = 0;
  }
  v5 = __s1;
  if (!strncmp(__s1, "TKNHEADER_", 0xAuLL))
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v124;
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_1AE1418C0;
    v127 = 1;
    while (1)
    {
      if (*((_QWORD *)&v139 + 1) >= (unint64_t)v139)
      {
        if (v141)
        {
          LOBYTE(v133.__vftable) = 0;
          TBuffer<char>::insert((uint64_t)&__s1, *((unint64_t *)&v139 + 1), (char *)&v133, 1uLL);
          --*((_QWORD *)&v139 + 1);
        }
        else if ((_QWORD)v139)
        {
          __s1[(_QWORD)v139 - 1] = 0;
        }
      }
      else
      {
        __s1[*((_QWORD *)&v139 + 1)] = 0;
      }
      NextToken = getNextToken(__s1, (uint64_t)&__str, " ");
      if (__str.__r_.__value_.__r.__words[2] >= __str.__r_.__value_.__l.__size_)
      {
        if (v127)
        {
          LOBYTE(v133.__vftable) = 0;
          TBuffer<char>::insert((uint64_t)&__str, __str.__r_.__value_.__r.__words[2]--, (char *)&v133, 1uLL);
        }
        else if (__str.__r_.__value_.__l.__size_)
        {
          *(_BYTE *)(__str.__r_.__value_.__l.__size_ + __str.__r_.__value_.__r.__words[0] - 1) = 0;
        }
      }
      else
      {
        *(_BYTE *)(__str.__r_.__value_.__r.__words[0] + __str.__r_.__value_.__r.__words[2]) = 0;
      }
      v7 = (void **)__str.__r_.__value_.__r.__words[0];
      if (!strcmp(__str.__r_.__value_.__l.__data_, "TKNHEADER_END"))
        break;
      if (!NextToken)
      {
        v52 = (_QWORD *)((char *)this + 16);
        if (*((char *)this + 39) < 0)
          v52 = (_QWORD *)*v52;
        v53 = TBuffer<char>::c_str((uint64_t)&__s1);
        tknPrintf("Error: File '%s' : '%s' : Bad entry in file header\n", v54, v52, v53);
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        TException::TException(&v133, (__int128 *)&__p);
        v133.__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
        if (v136 >= 0)
          v55 = (const char *)&v134;
        else
          v55 = (const char *)v134;
        conditionalAssert(v55, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 239);
        TException::~TException(&v133);
        if (SHIBYTE(v130) < 0)
          operator delete(__p);
        exception = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&v133, "");
        TException::TException(exception, (__int128 *)&v133);
        *exception = &unk_1E5D16AB0;
      }
      if (__str.__r_.__value_.__r.__words[2] >= __str.__r_.__value_.__l.__size_)
      {
        if (v127)
        {
          LOBYTE(v133.__vftable) = 0;
          TBuffer<char>::insert((uint64_t)&__str, __str.__r_.__value_.__r.__words[2]--, (char *)&v133, 1uLL);
        }
        else if (__str.__r_.__value_.__l.__size_)
        {
          *((_BYTE *)v7 + __str.__r_.__value_.__l.__size_ - 1) = 0;
        }
      }
      else
      {
        *((_BYTE *)v7 + __str.__r_.__value_.__r.__words[2]) = 0;
      }
      v9 = __str.__r_.__value_.__r.__words[0];
      if (!strcmp(__str.__r_.__value_.__l.__data_, "TKNHEADER_FILETYPE"))
      {
        getNextToken(NextToken, (uint64_t)&__str, " ");
        if (__str.__r_.__value_.__r.__words[2] >= __str.__r_.__value_.__l.__size_)
        {
          if (v127)
          {
            LOBYTE(v133.__vftable) = 0;
            TBuffer<char>::insert((uint64_t)&__str, __str.__r_.__value_.__r.__words[2]--, (char *)&v133, 1uLL);
          }
          else if (__str.__r_.__value_.__l.__size_)
          {
            *(_BYTE *)(__str.__r_.__value_.__l.__size_ + __str.__r_.__value_.__r.__words[0] - 1) = 0;
          }
        }
        else
        {
          *(_BYTE *)(__str.__r_.__value_.__r.__words[0] + __str.__r_.__value_.__r.__words[2]) = 0;
        }
        MEMORY[0x1AF44C914]((char *)this + 40, __str.__r_.__value_.__r.__words[0]);
      }
      else
      {
        if (__str.__r_.__value_.__r.__words[2] >= __str.__r_.__value_.__l.__size_)
        {
          if (v127)
          {
            LOBYTE(v133.__vftable) = 0;
            TBuffer<char>::insert((uint64_t)&__str, __str.__r_.__value_.__r.__words[2]--, (char *)&v133, 1uLL);
          }
          else if (__str.__r_.__value_.__l.__size_)
          {
            *(_BYTE *)(__str.__r_.__value_.__l.__size_ + v9 - 1) = 0;
          }
        }
        else
        {
          *(_BYTE *)(v9 + __str.__r_.__value_.__r.__words[2]) = 0;
        }
        if (strcmp(__str.__r_.__value_.__l.__data_, "TKNHEADER_FILEVERSION"))
        {
          v60 = (_QWORD *)((char *)this + 16);
          if (*((char *)this + 39) < 0)
            v60 = (_QWORD *)*v60;
          v61 = TBuffer<char>::c_str((uint64_t)&__str);
          tknPrintf("Error: File '%s' : '%s' : Bad entry in file header\n", v62, v60, v61);
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          TException::TException(&v133, (__int128 *)&__p);
          v133.__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
          if (v136 >= 0)
            v63 = (const char *)&v134;
          else
            v63 = (const char *)v134;
          conditionalAssert(v63, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 255);
          TException::~TException(&v133);
          if (SHIBYTE(v130) < 0)
            operator delete(__p);
          v64 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&v133, "");
          TException::TException(v64, (__int128 *)&v133);
          *v64 = &unk_1E5D16AB0;
        }
        *((_QWORD *)this + 12) = atol(NextToken);
      }
      if (!TInputStream::getNextLine((uint64_t)this, (uint64_t)&__s1))
      {
        v11 = (_QWORD *)((char *)this + 16);
        if (*((char *)this + 39) < 0)
          v11 = (_QWORD *)*v11;
        tknPrintf("Error: File '%s' : Missing TKNHEADER_END\n", v10, v11);
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        TException::TException(&v133, (__int128 *)&__p);
        v133.__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
        if (v136 >= 0)
          v12 = (const char *)&v134;
        else
          v12 = (const char *)v134;
        conditionalAssert(v12, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 263);
        TException::~TException(&v133);
        if (SHIBYTE(v130) < 0)
          operator delete(__p);
        v13 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&v133, "");
        TException::TException(v13, (__int128 *)&v133);
        *v13 = &unk_1E5D16AB0;
      }
    }
    if (!NextToken)
    {
      v84 = (_QWORD *)((char *)this + 16);
      if (*((char *)this + 39) < 0)
        v84 = (_QWORD *)*v84;
      tknPrintf("Error: '%s' : TKNHEADER_END does not take a parameter\n", v8, v84);
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      TException::TException(&v133, (__int128 *)&__p);
      v133.__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
      if (v136 >= 0)
        v85 = (const char *)&v134;
      else
        v85 = (const char *)v134;
      conditionalAssert(v85, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 228);
      TException::~TException(&v133);
      if (SHIBYTE(v130) < 0)
        operator delete(__p);
      v86 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&v133, "");
      TException::TException(v86, (__int128 *)&v133);
      *v86 = &unk_1E5D16AB0;
    }
    if (*((char *)this + 63) < 0)
    {
      if (*((_QWORD *)this + 6))
      {
LABEL_64:
        if (v127 && v7 != v124 && v7)
        {
          v14 = (std::exception_vtbl *)v7;
          goto LABEL_266;
        }
LABEL_267:
        v3 = 1;
        goto LABEL_268;
      }
    }
    else if (*((_BYTE *)this + 63))
    {
      goto LABEL_64;
    }
    v15 = (_QWORD *)((char *)this + 16);
    if (*((char *)this + 39) < 0)
      v15 = (_QWORD *)*v15;
    tknPrintf("Error: File '%s' : Missing TKNHEADER_FILETYPE\n", v8, v15);
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    TException::TException(&v133, (__int128 *)&__p);
    v133.__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
    if (v136 >= 0)
      v16 = (const char *)&v134;
    else
      v16 = (const char *)v134;
    conditionalAssert(v16, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 269);
    TException::~TException(&v133);
    if (SHIBYTE(v130) < 0)
      operator delete(__p);
    v17 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&v133, "");
    TException::TException(v17, (__int128 *)&v133);
    *v17 = &unk_1E5D16AB0;
  }
  if (*((_QWORD *)&v139 + 1) >= (unint64_t)v139)
  {
    if (v141)
    {
      __str.__r_.__value_.__s.__data_[0] = 0;
      TBuffer<char>::insert((uint64_t)&__s1, *((unint64_t *)&v139 + 1), (char *)&__str, 1uLL);
      --*((_QWORD *)&v139 + 1);
    }
    else if ((_QWORD)v139)
    {
      v5[(_QWORD)v139 - 1] = 0;
    }
  }
  else
  {
    v5[*((_QWORD *)&v139 + 1)] = 0;
  }
  if (!strcmp(__s1, "HEADER_BEGIN"))
  {
    v133.__vftable = (std::exception_vtbl *)v135;
    v134 = xmmword_1AE1418C0;
    v18 = 1;
    v137 = 1;
    __p = v131;
    v130 = xmmword_1AE1418C0;
    v132 = 1;
    v107 = *(_DWORD *)(*((_QWORD *)this + 22) + 64);
    memset(&v113, 0, sizeof(v113));
    while (1)
    {
      if (!TInputStream::getNextLine((uint64_t)this, (uint64_t)&__s1))
      {
        v57 = (_QWORD *)((char *)this + 16);
        if (*((char *)this + 39) < 0)
          v57 = (_QWORD *)*v57;
        tknPrintf("Error: File '%s' : Missing HEADER_END\n", v19, v57);
        std::string::basic_string[abi:ne180100]<0>(v110, "");
        TException::TException(&__str, (__int128 *)v110);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D16AB0;
        if (SHIBYTE(v124[0]) >= 0)
          size = &__str.__r_.__value_.__s.__data_[8];
        else
          size = (const char *)__str.__r_.__value_.__l.__size_;
        conditionalAssert(size, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 384);
        TException::~TException((std::exception *)&__str);
        if (v111 < 0)
          operator delete(v110[0].__vftable);
        v59 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&__str, "");
        TException::TException(v59, (__int128 *)&__str);
        *v59 = &unk_1E5D16AB0;
      }
      if (*((_QWORD *)&v139 + 1) >= (unint64_t)v139)
      {
        if (v141)
        {
          LOBYTE(v110[0].__vftable) = 0;
          TBuffer<char>::insert((uint64_t)&__s1, *((unint64_t *)&v139 + 1), (char *)v110, 1uLL);
          --*((_QWORD *)&v139 + 1);
        }
        else if ((_QWORD)v139)
        {
          __s1[(_QWORD)v139 - 1] = 0;
        }
      }
      else
      {
        __s1[*((_QWORD *)&v139 + 1)] = 0;
      }
      v20 = getNextToken(__s1, (uint64_t)&v133, " ");
      v21 = getNextToken(v20, (uint64_t)&__p, " ");
      if (*((_QWORD *)&v134 + 1) >= (unint64_t)v134)
      {
        if (v137)
        {
          LOBYTE(v110[0].__vftable) = 0;
          TBuffer<char>::insert((uint64_t)&v133, *((unint64_t *)&v134 + 1), (char *)v110, 1uLL);
          --*((_QWORD *)&v134 + 1);
        }
        else if ((_QWORD)v134)
        {
          *((_BYTE *)v133.__vftable + v134 - 1) = 0;
        }
      }
      else
      {
        *((_BYTE *)&v133.~exception + *((_QWORD *)&v134 + 1)) = 0;
      }
      v22 = v133.__vftable;
      if (!strcmp((const char *)v133.__vftable, "HEADER_END"))
      {
        if (v21)
        {
          v87 = (_QWORD *)((char *)this + 16);
          if (*((char *)this + 39) < 0)
            v87 = (_QWORD *)*v87;
          tknPrintf("Error: '%s' : HEADER_END does not take a parameter\n", v23, v87);
          std::string::basic_string[abi:ne180100]<0>(v110, "");
          TException::TException(&__str, (__int128 *)v110);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D16AB0;
          if (SHIBYTE(v124[0]) >= 0)
            v88 = &__str.__r_.__value_.__s.__data_[8];
          else
            v88 = (const char *)__str.__r_.__value_.__l.__size_;
          conditionalAssert(v88, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 297);
          TException::~TException((std::exception *)&__str);
          if (v111 < 0)
            operator delete(v110[0].__vftable);
          v89 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&__str, "");
          TException::TException(v89, (__int128 *)&__str);
          *v89 = &unk_1E5D16AB0;
        }
        if (*((char *)this + 63) < 0)
          v43 = *((_QWORD *)this + 6);
        else
          v43 = *((unsigned __int8 *)this + 63);
        if (!v43)
        {
          v90 = (_QWORD *)((char *)this + 16);
          if (*((char *)this + 39) < 0)
            v90 = (_QWORD *)*v90;
          tknPrintf("Error: File '%s' : Missing FILE_TYPE\n", v23, v90);
          std::string::basic_string[abi:ne180100]<0>(v110, "");
          TException::TException(&__str, (__int128 *)v110);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D16AB0;
          if (SHIBYTE(v124[0]) >= 0)
            v91 = &__str.__r_.__value_.__s.__data_[8];
          else
            v91 = (const char *)__str.__r_.__value_.__l.__size_;
          conditionalAssert(v91, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 390);
          TException::~TException((std::exception *)&__str);
          if (v111 < 0)
            operator delete(v110[0].__vftable);
          v92 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&__str, "");
          TException::TException(v92, (__int128 *)&__str);
          *v92 = &unk_1E5D16AB0;
        }
        if (*(_DWORD *)(*((_QWORD *)this + 22) + 64) != v107)
        {
          v93 = (_QWORD *)((char *)this + 16);
          if (*((char *)this + 39) < 0)
            v93 = (_QWORD *)*v93;
          tknPrintf("Error: File '%s' : File codepage does not match the voc codepage\n", v23, v93);
          std::string::basic_string[abi:ne180100]<0>(v110, "");
          TException::TException(&__str, (__int128 *)v110);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D16BC8;
          if (SHIBYTE(v124[0]) >= 0)
            v94 = &__str.__r_.__value_.__s.__data_[8];
          else
            v94 = (const char *)__str.__r_.__value_.__l.__size_;
          conditionalAssert(v94, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 397);
          TException::~TException((std::exception *)&__str);
          if (v111 < 0)
            operator delete(v110[0].__vftable);
          v95 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&__str, "");
          TException::TException(v95, (__int128 *)&__str);
          *v95 = &unk_1E5D16BC8;
        }
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v124;
        *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_1AE1418C0;
        v128 = 1;
        if (v113.__end_ == v113.__begin_)
          goto LABEL_257;
        v44 = 0;
        v45 = 0;
        do
        {
          TBuffer<wchar_t>::resize((uint64_t)&__str, 0);
          p_second = &v113.__begin_[v44].second;
          if (SHIBYTE(v113.__begin_[v44].second.__r_.__value_.__r.__words[2]) < 0)
            p_second = (std::string *)p_second->__r_.__value_.__r.__words[0];
          TLocaleInfo::multiByteToUnicode(*((_QWORD *)this + 22), (unsigned __int8 *)p_second, (uint64_t)&__str);
          v47 = &v113.__begin_[v44];
          if (SHIBYTE(v113.__begin_[v44].first.__r_.__value_.__r.__words[2]) < 0)
            v47 = (std::pair<std::string, std::string> *)v47->first.__r_.__value_.__r.__words[0];
          if (TInputStream::isParameter(this, (char *)v47))
          {
            v75 = (_QWORD *)((char *)this + 16);
            if (*((char *)this + 39) < 0)
              v75 = (_QWORD *)*v75;
            v76 = &v113.__begin_[v44];
            if (SHIBYTE(v113.__begin_[v44].first.__r_.__value_.__r.__words[2]) < 0)
              v76 = (std::pair<std::string, std::string> *)v76->first.__r_.__value_.__r.__words[0];
            tknPrintf("Error: %s : Duplicate setting for %s parameter\n", v48, v75, v76);
            std::string::basic_string[abi:ne180100]<0>(v108, "");
            TException::TException(v110, (__int128 *)v108);
            v110[0].__vftable = (std::exception_vtbl *)&unk_1E5D16668;
            if (v112 >= 0)
              v77 = (std::exception_vtbl *)&v110[1];
            else
              v77 = v110[1].__vftable;
            conditionalAssert((const char *)v77, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 414);
            TException::~TException(v110);
            if (v109 < 0)
              operator delete(v108[0]);
            v78 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(v110, "");
            TException::TException(v78, (__int128 *)v110);
            *v78 = &unk_1E5D16668;
          }
          if (__str.__r_.__value_.__r.__words[2] >= __str.__r_.__value_.__l.__size_)
          {
            if (v128)
            {
              LODWORD(v110[0].__vftable) = 0;
              TBuffer<wchar_t>::insert((uint64_t)&__str, __str.__r_.__value_.__r.__words[2], (int *)v110, 1uLL);
              v49 = __str.__r_.__value_.__r.__words[0];
              --__str.__r_.__value_.__r.__words[2];
            }
            else
            {
              v49 = __str.__r_.__value_.__r.__words[0];
              if (__str.__r_.__value_.__l.__size_)
                *(_DWORD *)(__str.__r_.__value_.__r.__words[0] + 4 * __str.__r_.__value_.__l.__size_ - 4) = 0;
            }
          }
          else
          {
            v49 = __str.__r_.__value_.__r.__words[0];
            *(_DWORD *)(__str.__r_.__value_.__r.__words[0] + 4 * __str.__r_.__value_.__r.__words[2]) = 0;
          }
          v110[0].__vftable = (std::exception_vtbl *)&v113.__begin_[v44];
          v50 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 19, (const void **)&v113.__begin_[v44].first.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)v110);
          MEMORY[0x1AF44C9E0](v50 + 7, v49);
          ++v45;
          ++v44;
        }
        while (v45 < 0xAAAAAAAAAAAAAAABLL * (((char *)v113.__end_ - (char *)v113.__begin_) >> 4));
        if (v128)
        {
LABEL_257:
          if ((void **)__str.__r_.__value_.__l.__data_ != v124 && __str.__r_.__value_.__r.__words[0])
            MEMORY[0x1AF44D160]();
        }
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
        std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
        if (v132 && __p != v131 && __p)
          MEMORY[0x1AF44D160]();
        if (v137)
        {
          v14 = v133.__vftable;
          if (v133.__vftable != (std::exception_vtbl *)v135)
          {
            if (v133.__vftable)
LABEL_266:
              MEMORY[0x1AF44D160](v14, 0x1000C8077774924);
          }
        }
        goto LABEL_267;
      }
      if (!v21)
      {
        v65 = (_QWORD *)((char *)this + 16);
        if (*((char *)this + 39) < 0)
          v65 = (_QWORD *)*v65;
        v66 = TBuffer<char>::c_str((uint64_t)&__s1);
        tknPrintf("Error: File '%s' : %s : Syntax error in header\n", v67, v65, v66);
        std::string::basic_string[abi:ne180100]<0>(v110, "");
        TException::TException(&__str, (__int128 *)v110);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D16AB0;
        if (SHIBYTE(v124[0]) >= 0)
          v68 = &__str.__r_.__value_.__s.__data_[8];
        else
          v68 = (const char *)__str.__r_.__value_.__l.__size_;
        conditionalAssert(v68, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 308);
        TException::~TException((std::exception *)&__str);
        if (v111 < 0)
          operator delete(v110[0].__vftable);
        v69 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&__str, "");
        TException::TException(v69, (__int128 *)&__str);
        *v69 = &unk_1E5D16AB0;
      }
      if (*((_QWORD *)&v134 + 1) >= (unint64_t)v134)
      {
        if (v137)
        {
          LOBYTE(v110[0].__vftable) = 0;
          TBuffer<char>::insert((uint64_t)&v133, *((unint64_t *)&v134 + 1), (char *)v110, 1uLL);
          --*((_QWORD *)&v134 + 1);
        }
        else if ((_QWORD)v134)
        {
          *((_BYTE *)v22 + v134 - 1) = 0;
        }
      }
      else
      {
        *((_BYTE *)&v22->~exception + *((_QWORD *)&v134 + 1)) = 0;
      }
      v24 = v133.__vftable;
      if (!strcmp((const char *)v133.__vftable, "VERSION"))
        break;
      if (*((_QWORD *)&v134 + 1) >= (unint64_t)v134)
      {
        if (v137)
        {
          LOBYTE(v110[0].__vftable) = 0;
          TBuffer<char>::insert((uint64_t)&v133, *((unint64_t *)&v134 + 1), (char *)v110, 1uLL);
          --*((_QWORD *)&v134 + 1);
        }
        else if ((_QWORD)v134)
        {
          *((_BYTE *)v24 + v134 - 1) = 0;
        }
      }
      else
      {
        *((_BYTE *)&v24->~exception + *((_QWORD *)&v134 + 1)) = 0;
      }
      v26 = v133.__vftable;
      if (!strcmp((const char *)v133.__vftable, "FILE_TYPE"))
      {
        if (*((_QWORD *)&v130 + 1) >= (unint64_t)v130)
        {
          if (v132)
          {
            LOBYTE(v110[0].__vftable) = 0;
            TBuffer<char>::insert((uint64_t)&__p, *((unint64_t *)&v130 + 1), (char *)v110, 1uLL);
            --*((_QWORD *)&v130 + 1);
          }
          else if ((_QWORD)v130)
          {
            *((char *)__p + v130 - 1) = 0;
          }
        }
        else
        {
          *((_BYTE *)__p + *((_QWORD *)&v130 + 1)) = 0;
        }
        MEMORY[0x1AF44C914]((char *)this + 40, __p);
        goto LABEL_196;
      }
      if (*((_QWORD *)&v134 + 1) >= (unint64_t)v134)
      {
        if (v137)
        {
          LOBYTE(v110[0].__vftable) = 0;
          TBuffer<char>::insert((uint64_t)&v133, *((unint64_t *)&v134 + 1), (char *)v110, 1uLL);
          --*((_QWORD *)&v134 + 1);
        }
        else if ((_QWORD)v134)
        {
          *((_BYTE *)v26 + v134 - 1) = 0;
        }
      }
      else
      {
        *((_BYTE *)&v26->~exception + *((_QWORD *)&v134 + 1)) = 0;
      }
      v27 = v133.__vftable;
      if (!strcmp((const char *)v133.__vftable, "FILE_VERSION"))
      {
        if (*((_QWORD *)&v130 + 1) >= (unint64_t)v130)
        {
          if (v132)
          {
            LOBYTE(v110[0].__vftable) = 0;
            TBuffer<char>::insert((uint64_t)&__p, *((unint64_t *)&v130 + 1), (char *)v110, 1uLL);
            --*((_QWORD *)&v130 + 1);
          }
          else if ((_QWORD)v130)
          {
            *((char *)__p + v130 - 1) = 0;
          }
        }
        else
        {
          *((_BYTE *)__p + *((_QWORD *)&v130 + 1)) = 0;
        }
        v31 = __p;
        v32 = strrchr((char *)__p, 46);
        if (v32)
        {
          v33 = v32;
          if (*((_QWORD *)&v130 + 1) >= (unint64_t)v130)
          {
            if (v132)
            {
              LOBYTE(v110[0].__vftable) = 0;
              TBuffer<char>::insert((uint64_t)&__p, *((unint64_t *)&v130 + 1), (char *)v110, 1uLL);
              --*((_QWORD *)&v130 + 1);
            }
            else if ((_QWORD)v130)
            {
              v31[(_QWORD)v130 - 1] = 0;
            }
          }
          else
          {
            v31[*((_QWORD *)&v130 + 1)] = 0;
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, (char *)__p);
          if (*((_QWORD *)&v130 + 1) >= (unint64_t)v130)
          {
            if (v132)
            {
              LOBYTE(v110[0].__vftable) = 0;
              TBuffer<char>::insert((uint64_t)&__p, *((unint64_t *)&v130 + 1), (char *)v110, 1uLL);
              --*((_QWORD *)&v130 + 1);
            }
            else if ((_QWORD)v130)
            {
              *((char *)__p + v130 - 1) = 0;
            }
          }
          else
          {
            *((_BYTE *)__p + *((_QWORD *)&v130 + 1)) = 0;
          }
          std::string::assign(v2, &__str, 0, v33 - (_BYTE *)__p);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          v34 = v33 + 1;
        }
        else
        {
          if (*((_QWORD *)&v130 + 1) >= (unint64_t)v130)
          {
            if (v132)
            {
              LOBYTE(v110[0].__vftable) = 0;
              TBuffer<char>::insert((uint64_t)&__p, *((unint64_t *)&v130 + 1), (char *)v110, 1uLL);
              --*((_QWORD *)&v130 + 1);
            }
            else if ((_QWORD)v130)
            {
              v31[(_QWORD)v130 - 1] = 0;
            }
          }
          else
          {
            v31[*((_QWORD *)&v130 + 1)] = 0;
          }
          v34 = (const char *)__p;
        }
        *((_QWORD *)this + 12) = atol(v34);
        goto LABEL_196;
      }
      if (*((_QWORD *)&v134 + 1) >= (unint64_t)v134)
      {
        if (v137)
        {
          LOBYTE(v110[0].__vftable) = 0;
          TBuffer<char>::insert((uint64_t)&v133, *((unint64_t *)&v134 + 1), (char *)v110, 1uLL);
          --*((_QWORD *)&v134 + 1);
        }
        else if ((_QWORD)v134)
        {
          *((_BYTE *)v27 + v134 - 1) = 0;
        }
      }
      else
      {
        *((_BYTE *)&v27->~exception + *((_QWORD *)&v134 + 1)) = 0;
      }
      v28 = v133.__vftable;
      if (!strcmp((const char *)v133.__vftable, "PARAMETER"))
      {
        v29 = getNextToken(v20 + 1, (uint64_t)&v133, "=");
        if (!v29)
        {
          v70 = (_QWORD *)((char *)this + 16);
          if (*((char *)this + 39) < 0)
            v70 = (_QWORD *)*v70;
          v71 = TBuffer<char>::c_str((uint64_t)&__s1);
          tknPrintf("Error: File '%s' : %s : PARAMETER must contain 'name=value'\n", v72, v70, v71);
          std::string::basic_string[abi:ne180100]<0>(v110, "");
          TException::TException(&__str, (__int128 *)v110);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D16AB0;
          if (SHIBYTE(v124[0]) >= 0)
            v73 = &__str.__r_.__value_.__s.__data_[8];
          else
            v73 = (const char *)__str.__r_.__value_.__l.__size_;
          conditionalAssert(v73, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 353);
          TException::~TException((std::exception *)&__str);
          if (v111 < 0)
            operator delete(v110[0].__vftable);
          v74 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&__str, "");
          TException::TException(v74, (__int128 *)&__str);
          *v74 = &unk_1E5D16AB0;
        }
        if (*((_QWORD *)&v134 + 1) >= (unint64_t)v134)
        {
          if (v137)
          {
            LOBYTE(v108[0]) = 0;
            TBuffer<char>::insert((uint64_t)&v133, *((unint64_t *)&v134 + 1), (char *)v108, 1uLL);
            --*((_QWORD *)&v134 + 1);
          }
          else if ((_QWORD)v134)
          {
            *((_BYTE *)v133.__vftable + v134 - 1) = 0;
          }
        }
        else
        {
          *((_BYTE *)&v133.~exception + *((_QWORD *)&v134 + 1)) = 0;
        }
        v110[0] = v133;
        v110[1].__vftable = (std::exception_vtbl *)(v29 + 1);
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const*,char const*,0>(&__str, (char **)v110);
        std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v113, (__int128 *)&__str);
        if (v125 < 0)
          operator delete(v124[0]);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        v18 = 0;
      }
      else
      {
        if (*((_QWORD *)&v134 + 1) >= (unint64_t)v134)
        {
          if (v137)
          {
            LOBYTE(v110[0].__vftable) = 0;
            TBuffer<char>::insert((uint64_t)&v133, *((unint64_t *)&v134 + 1), (char *)v110, 1uLL);
            --*((_QWORD *)&v134 + 1);
          }
          else if ((_QWORD)v134)
          {
            *((_BYTE *)v28 + v134 - 1) = 0;
          }
        }
        else
        {
          *((_BYTE *)&v28->~exception + *((_QWORD *)&v134 + 1)) = 0;
        }
        if (!strcmp((const char *)v133.__vftable, "CODEPAGE"))
        {
          if (*((_QWORD *)&v130 + 1) >= (unint64_t)v130)
          {
            if (v132)
            {
              LOBYTE(v110[0].__vftable) = 0;
              TBuffer<char>::insert((uint64_t)&__p, *((unint64_t *)&v130 + 1), (char *)v110, 1uLL);
              --*((_QWORD *)&v130 + 1);
            }
            else if ((_QWORD)v130)
            {
              *((char *)__p + v130 - 1) = 0;
            }
          }
          else
          {
            *((_BYTE *)__p + *((_QWORD *)&v130 + 1)) = 0;
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, (char *)__p);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            if (__str.__r_.__value_.__l.__size_ != 4)
            {
              if (__str.__r_.__value_.__l.__size_ == 5)
              {
                if (*(_DWORD *)__str.__r_.__value_.__l.__data_ != 759583829
                  || *(_BYTE *)(__str.__r_.__value_.__r.__words[0] + 4) != 56)
                {
                  goto LABEL_380;
                }
                v42 = 2;
              }
              else
              {
                if (__str.__r_.__value_.__l.__size_ != 7)
                  goto LABEL_380;
                if (*(_DWORD *)__str.__r_.__value_.__l.__data_ != 1769234764
                  || *(_DWORD *)(__str.__r_.__value_.__r.__words[0] + 3) != 1227714153)
                {
                  goto LABEL_380;
                }
LABEL_233:
                v42 = 1;
              }
              v107 = v42;
              operator delete(__str.__r_.__value_.__l.__data_);
              goto LABEL_196;
            }
            if (*(_DWORD *)__str.__r_.__value_.__l.__data_ != 842347057)
              goto LABEL_380;
            goto LABEL_233;
          }
          if (HIBYTE(__str.__r_.__value_.__r.__words[2]) != 4)
          {
            if (HIBYTE(__str.__r_.__value_.__r.__words[2]) == 5)
            {
              if (LODWORD(__str.__r_.__value_.__l.__data_) != 759583829 || __str.__r_.__value_.__s.__data_[4] != 56)
              {
LABEL_379:
                p_str = &__str;
LABEL_380:
                tknPrintf("Error: '%s' : Invalid codepage.\n", v35, p_str);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str.__r_.__value_.__l.__data_);
                v102 = (_QWORD *)((char *)this + 16);
                if (*((char *)this + 39) < 0)
                  v102 = (_QWORD *)*v102;
                v103 = TBuffer<char>::c_str((uint64_t)&__p);
                tknPrintf("Error: File '%s' : '%s' : Invalid codepage\n", v104, v102, v103);
                std::string::basic_string[abi:ne180100]<0>(v110, "");
                TException::TException(&__str, (__int128 *)v110);
                __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D16BC8;
                if (SHIBYTE(v124[0]) >= 0)
                  v105 = &__str.__r_.__value_.__s.__data_[8];
                else
                  v105 = (const char *)__str.__r_.__value_.__l.__size_;
                conditionalAssert(v105, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 367);
                TException::~TException((std::exception *)&__str);
                if (v111 < 0)
                  operator delete(v110[0].__vftable);
                v106 = __cxa_allocate_exception(0x20uLL);
                std::string::basic_string[abi:ne180100]<0>(&__str, "");
                TException::TException(v106, (__int128 *)&__str);
                *v106 = &unk_1E5D16BC8;
              }
              v40 = 2;
            }
            else
            {
              if (HIBYTE(__str.__r_.__value_.__r.__words[2]) != 7)
                goto LABEL_379;
              if (LODWORD(__str.__r_.__value_.__l.__data_) != 1769234764
                || *(_DWORD *)((char *)__str.__r_.__value_.__r.__words + 3) != 1227714153)
              {
                goto LABEL_379;
              }
LABEL_224:
              v40 = 1;
            }
            v107 = v40;
            goto LABEL_196;
          }
          if (LODWORD(__str.__r_.__value_.__l.__data_) != 842347057)
            goto LABEL_379;
          goto LABEL_224;
        }
LABEL_196:
        v18 = 0;
        if (getNextToken(v21, (uint64_t)&__p, " "))
        {
          v79 = (_QWORD *)((char *)this + 16);
          if (*((char *)this + 39) < 0)
            v79 = (_QWORD *)*v79;
          v80 = TBuffer<char>::c_str((uint64_t)&__s1);
          tknPrintf("Error: File '%s' : %s : Syntax error in header\n", v81, v79, v80);
          std::string::basic_string[abi:ne180100]<0>(v110, "");
          TException::TException(&__str, (__int128 *)v110);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D16AB0;
          if (SHIBYTE(v124[0]) >= 0)
            v82 = &__str.__r_.__value_.__s.__data_[8];
          else
            v82 = (const char *)__str.__r_.__value_.__l.__size_;
          conditionalAssert(v82, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 375);
          TException::~TException((std::exception *)&__str);
          if (v111 < 0)
            operator delete(v110[0].__vftable);
          v83 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&__str, "");
          TException::TException(v83, (__int128 *)&__str);
          *v83 = &unk_1E5D16AB0;
        }
      }
    }
    if ((v18 & 1) == 0)
    {
      v96 = (_QWORD *)((char *)this + 16);
      if (*((char *)this + 39) < 0)
        v96 = (_QWORD *)*v96;
      tknPrintf("Error: '%s' : VERSION must be the first line in header\n", v25, v96);
      std::string::basic_string[abi:ne180100]<0>(v110, "");
      TException::TException(&__str, (__int128 *)v110);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D16AB0;
      if (SHIBYTE(v124[0]) >= 0)
        v97 = &__str.__r_.__value_.__s.__data_[8];
      else
        v97 = (const char *)__str.__r_.__value_.__l.__size_;
      conditionalAssert(v97, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 317);
      TException::~TException((std::exception *)&__str);
      if (v111 < 0)
        operator delete(v110[0].__vftable);
      v98 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&__str, "");
      TException::TException(v98, (__int128 *)&__str);
      *v98 = &unk_1E5D16AB0;
    }
    if (*((_QWORD *)&v130 + 1) >= (unint64_t)v130)
    {
      if (v132)
      {
        LOBYTE(v110[0].__vftable) = 0;
        TBuffer<char>::insert((uint64_t)&__p, *((unint64_t *)&v130 + 1), (char *)v110, 1uLL);
        --*((_QWORD *)&v130 + 1);
      }
      else if ((_QWORD)v130)
      {
        *((char *)__p + v130 - 1) = 0;
      }
    }
    else
    {
      *((_BYTE *)__p + *((_QWORD *)&v130 + 1)) = 0;
    }
    if (atol((const char *)__p) != 1)
    {
      v99 = (_QWORD *)((char *)this + 16);
      if (*((char *)this + 39) < 0)
        v99 = (_QWORD *)*v99;
      tknPrintf("Error: '%s' : VERSION must be 1\n", v30, v99);
      std::string::basic_string[abi:ne180100]<0>(v110, "");
      TException::TException(&__str, (__int128 *)v110);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D16BC8;
      if (SHIBYTE(v124[0]) >= 0)
        v100 = &__str.__r_.__value_.__s.__data_[8];
      else
        v100 = (const char *)__str.__r_.__value_.__l.__size_;
      conditionalAssert(v100, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 325);
      TException::~TException((std::exception *)&__str);
      if (v111 < 0)
        operator delete(v110[0].__vftable);
      v101 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&__str, "");
      TException::TException(v101, (__int128 *)&__str);
      *v101 = &unk_1E5D16BC8;
    }
    goto LABEL_196;
  }
  v114 = 0u;
  v115 = 0u;
  v116 = 0u;
  v117 = 0u;
  v118 = 0u;
  v119 = 0u;
  v120 = 0u;
  v121 = 0u;
  v122 = v4;
  std::istream::seekg();
  v3 = 0;
LABEL_268:
  if (v141 && __s1 != v140 && __s1)
    MEMORY[0x1AF44D160]();
  return v3;
}

void sub_1AD9F349C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,std::exception a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  void *v51;
  int v52;
  unint64_t v55;
  unint64_t v56;

  if (a51 < 0)
  {
    operator delete(__p);
    if ((v52 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v52)
  {
LABEL_6:
    __p = &a26;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (LOBYTE(STACK[0x660]))
    {
      if (STACK[0x548] != a13 && STACK[0x548] != 0)
        MEMORY[0x1AF44D160]();
    }
    if (LOBYTE(STACK[0x780]))
    {
      v55 = STACK[0x668];
      if (STACK[0x668] != a14)
      {
        if (v55)
          MEMORY[0x1AF44D160](v55, 0x1000C8077774924);
      }
    }
    if (LOBYTE(STACK[0x8A0]))
    {
      v56 = STACK[0x788];
      if (STACK[0x788] != a16)
      {
        if (v56)
          MEMORY[0x1AF44D160](v56, 0x1000C8077774924);
      }
    }
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v51);
  goto LABEL_6;
}

BOOL TInputStream::getNextLine(uint64_t a1, uint64_t a2)
{
  const char **v3;
  std::locale::id *v4;
  uint64_t v5;
  const std::locale::facet *v6;
  _QWORD *v7;
  int v8;
  const char *v9;
  char *v10;
  unsigned int v11;
  char *v12;
  int v13;
  unsigned int v14;
  char *v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  std::locale v23;
  char __s1[2048];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = (const char **)(a1 + 104);
  v4 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  v5 = MEMORY[0x1E0C80978];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)(*(_QWORD *)a1 + *(_QWORD *)(**(_QWORD **)a1 - 24)));
    v6 = std::locale::use_facet(&v23, v4);
    ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale(&v23);
    v7 = (_QWORD *)std::istream::getline();
    v8 = *(_DWORD *)((_BYTE *)v7 + *(_QWORD *)(*v7 - 24) + 32) & 5;
    if (v8)
      return v8 == 0;
    ++*(_QWORD *)(a1 + 64);
    if (*(char *)(a1 + 127) < 0)
    {
      if (*(_QWORD *)(a1 + 112))
      {
        v9 = *v3;
LABEL_8:
        v10 = strstr(__s1, v9);
        if (v10)
          *v10 = 0;
      }
    }
    else
    {
      v9 = (const char *)v3;
      if (*(_BYTE *)(a1 + 127))
        goto LABEL_8;
    }
    v11 = __s1[0];
    if (__s1[0])
    {
      v12 = __s1;
      do
      {
        if ((v11 & 0x80) != 0)
          v13 = __maskrune(v11, 0x4000uLL);
        else
          v13 = *(_DWORD *)(v5 + 4 * v11 + 60) & 0x4000;
        if (!v13)
          break;
        v14 = *++v12;
        v11 = v14;
      }
      while (v14);
    }
    else
    {
      v12 = __s1;
    }
    v15 = &__s1[strlen(__s1)];
    v16 = v15 - v12;
    do
    {
      v17 = v15;
      v18 = v16;
      if (v15 <= v12)
        break;
      --v15;
      v19 = *(v17 - 1);
      v20 = *(v17 - 1) < 0 ? __maskrune(v19, 0x4000uLL) : *(_DWORD *)(v5 + 4 * v19 + 60) & 0x4000;
      v16 = v18 - 1;
    }
    while (v20);
    if (v17 != v12)
    {
      TBuffer<char>::resize(a2, 0);
      TBuffer<char>::insert(a2, 0, v12, v18);
      return v8 == 0;
    }
  }
}

{
  const std::locale::facet *v3;
  _QWORD *v4;
  int v5;
  __int32 *v6;
  const __int32 *v7;
  __int32 *v8;
  __int32 *v9;
  unint64_t v10;
  int v11;
  unsigned __int8 v12;
  unint64_t v16;
  TLocaleInfo *v17;
  int v18;
  unsigned __int8 v19;
  __int32 *v22;
  TLocaleInfo *v24;
  const __int32 **v26;
  __int32 *__s1;
  __int128 v28;
  _BYTE v29[1024];
  char v30;
  std::locale v31;
  unsigned __int8 v32[2048];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v26 = (const __int32 **)(a1 + 128);
  __s1 = (__int32 *)v29;
  v28 = xmmword_1AE1418C0;
  v30 = 1;
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)(*(_QWORD *)a1 + *(_QWORD *)(**(_QWORD **)a1 - 24)));
    v3 = std::locale::use_facet(&v31, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
    std::locale::~locale(&v31);
    v4 = (_QWORD *)std::istream::getline();
    v5 = *(_DWORD *)((_BYTE *)v4 + *(_QWORD *)(*v4 - 24) + 32) & 5;
    if (v5)
      goto LABEL_78;
    ++*(_QWORD *)(a1 + 64);
    TBuffer<wchar_t>::resize((uint64_t)&__s1, 0);
    TLocaleInfo::multiByteToUnicode(*(_QWORD *)(a1 + 176), v32, (uint64_t)&__s1);
    if (*(char *)(a1 + 151) < 0)
    {
      if (*(_QWORD *)(a1 + 136))
      {
LABEL_7:
        if (*((_QWORD *)&v28 + 1) >= (unint64_t)v28)
        {
          if (v30)
          {
            LODWORD(v31.__locale_) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&__s1, *((unint64_t *)&v28 + 1), (int *)&v31, 1uLL);
            v6 = __s1;
            --*((_QWORD *)&v28 + 1);
          }
          else
          {
            v6 = __s1;
            if ((_QWORD)v28)
              __s1[(_QWORD)v28 - 1] = 0;
          }
        }
        else
        {
          v6 = __s1;
          __s1[*((_QWORD *)&v28 + 1)] = 0;
        }
        v7 = (const __int32 *)v26;
        if (*(char *)(a1 + 151) < 0)
          v7 = *v26;
        v8 = wcsstr(v6, v7);
        if (v8)
        {
          if (*((_QWORD *)&v28 + 1) >= (unint64_t)v28)
          {
            if (v30)
            {
              LODWORD(v31.__locale_) = 0;
              TBuffer<wchar_t>::insert((uint64_t)&__s1, *((unint64_t *)&v28 + 1), (int *)&v31, 1uLL);
              v9 = __s1;
              --*((_QWORD *)&v28 + 1);
            }
            else
            {
              v9 = __s1;
              if ((_QWORD)v28)
                __s1[(_QWORD)v28 - 1] = 0;
            }
          }
          else
          {
            v9 = __s1;
            __s1[*((_QWORD *)&v28 + 1)] = 0;
          }
          TBuffer<wchar_t>::resize((uint64_t)&__s1, v8 - v9);
        }
      }
    }
    else if (*(_BYTE *)(a1 + 151))
    {
      goto LABEL_7;
    }
    if (*((_QWORD *)&v28 + 1))
    {
      v10 = 0;
      while (1)
      {
        v11 = __s1[v10];
        if ((v12 & 1) == 0
        {
          v17 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v17);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v17;
        }
        if (v11 <= 159)
        {
          if (v11 > 0x20 || ((1 << v11) & 0x100002600) == 0)
            goto LABEL_48;
          goto LABEL_44;
        }
        if (v11 >= 12288)
          break;
        if (v11 != 160 && v11 != 8203)
          goto LABEL_48;
LABEL_44:
        ++v10;
        v16 = *((_QWORD *)&v28 + 1);
        if (v10 >= *((_QWORD *)&v28 + 1))
          goto LABEL_49;
      }
      if (v11 == 12288 || v11 == 65279)
        goto LABEL_44;
LABEL_48:
      v16 = *((_QWORD *)&v28 + 1);
LABEL_49:
      if (v16 > v10)
      {
        do
        {
          v18 = __s1[v16 - 1];
          if ((v19 & 1) == 0
          {
            v24 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v24);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v24;
          }
          if (v18 > 159)
          {
            if (v18 >= 12288)
            {
              if (v18 != 65279 && v18 != 12288)
                goto LABEL_70;
            }
            else if (v18 != 160 && v18 != 8203)
            {
              goto LABEL_70;
            }
          }
          else if (v18 > 0x20 || ((1 << v18) & 0x100002600) == 0)
          {
            goto LABEL_70;
          }
          --v16;
        }
        while (v16 > v10);
        v16 = v10;
      }
LABEL_70:
      if (v16 != v10)
        break;
    }
  }
  if (*((_QWORD *)&v28 + 1) >= (unint64_t)v28)
  {
    if (v30)
    {
      LODWORD(v31.__locale_) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&__s1, *((unint64_t *)&v28 + 1), (int *)&v31, 1uLL);
      v22 = __s1;
      --*((_QWORD *)&v28 + 1);
    }
    else
    {
      v22 = __s1;
      if ((_QWORD)v28)
        __s1[(_QWORD)v28 - 1] = 0;
    }
  }
  else
  {
    v22 = __s1;
    __s1[*((_QWORD *)&v28 + 1)] = 0;
  }
  TBuffer<wchar_t>::resize(a2, 0);
  TBuffer<wchar_t>::insert(a2, 0, &v22[v10], v16 - v10);
LABEL_78:
  if (v30 && __s1 != (__int32 *)v29 && __s1)
    MEMORY[0x1AF44D160]();
  return v5 == 0;
}

void sub_1AD9F3A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t TBuffer<char>::c_str(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= v3)
  {
    if (*(_BYTE *)(a1 + 280))
    {
      v5 = 0;
      TBuffer<char>::insert(a1, v2, &v5, 1uLL);
      --*(_QWORD *)(a1 + 16);
    }
    else if (v3)
    {
      *(_BYTE *)(v3 + *(_QWORD *)a1 - 1) = 0;
    }
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)a1 + v2) = 0;
  }
  return *(_QWORD *)a1;
}

BOOL TInputStream::isParameter(TInputStream *this, char *a2)
{
  char *v3;
  TInputStream *v4;
  void *__p[2];
  char v7;

  v3 = (char *)this + 152;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v4 = (TInputStream *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)v3, (const void **)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  return (TInputStream *)((char *)this + 160) != v4;
}

void sub_1AD9F3B24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1AD9F3FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  MEMORY[0x1AF44D190](a10, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x440]))
  {
    if (a14 != a11 && a14 != 0)
      MEMORY[0x1AF44D160]();
  }
  _Unwind_Resume(a1);
}

uint64_t TInputStream::getStringParameter(uint64_t a1, char *a2, uint64_t a3, int *a4)
{
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v11;

  v7 = a1 + 152;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(v7, (const void **)__p);
  if (v11 < 0)
    operator delete(__p[0]);
  if (a1 + 160 != v8)
  {
    a4 = (int *)(v8 + 56);
    if (*(char *)(v8 + 79) < 0)
      a4 = *(int **)a4;
  }
  return TBuffer<wchar_t>::assign(a3, a4);
}

void sub_1AD9F40D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void TBuffer<char>::resize(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  const void *v6;
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;

  if (*(_BYTE *)(a1 + 280) && *(_QWORD *)(a1 + 8) < a2)
  {
    *(_QWORD *)(a1 + 8) = a2 + 1;
    v4 = (void *)operator new[]();
    v5 = v4;
    v6 = *(const void **)a1;
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      memmove(v4, *(const void **)a1, v7);
    if (v6 != (const void *)(a1 + 24) && v6)
      MEMORY[0x1AF44D160](v6, 0x1000C8077774924);
    *(_QWORD *)a1 = v5;
  }
  v8 = *(_QWORD *)(a1 + 16);
  if (v8 < a2)
  {
    v9 = a2;
    if (*(_BYTE *)(a1 + 280)
      || ((v10 = *(_QWORD *)(a1 + 8), v10 >= a2) ? (v9 = a2) : (v9 = *(_QWORD *)(a1 + 8)),
          v8 < v10 ? (v11 = v9 == v8) : (v11 = 1),
          !v11))
    {
      bzero((void *)(*(_QWORD *)a1 + v8), v9 - v8);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
}

void TInputModel::TInputModel(TInputModel *this, const TDataManager *a2, const TDataManager *a3, char a4, const char *a5)
{
  int IntVar;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  TDataManager *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int BoolVar;
  std::exception_vtbl *v18;
  _QWORD *v19;
  std::exception_vtbl *v20;
  _QWORD *exception;
  std::exception_vtbl *v22;
  _QWORD *v23;
  std::exception_vtbl *v24;
  _QWORD *v25;
  std::exception_vtbl *v26;
  _QWORD *v27;
  std::exception_vtbl *v28;
  _QWORD *v29;
  std::exception_vtbl *v30;
  _QWORD *v31;
  std::exception_vtbl *v32;
  _QWORD *v33;
  std::exception_vtbl *v34;
  _QWORD *v35;
  std::exception_vtbl *v36;
  _QWORD *v37;
  std::exception_vtbl *v38;
  _QWORD *v39;
  std::exception_vtbl *v40;
  _QWORD *v41;
  __int128 __p;
  uint64_t v43;
  std::exception v44[3];
  char v45;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  IntVar = TInputModel::getIntVar((TDataManager **)this, "Version", 1);
  *((_QWORD *)this + 2) = IntVar;
  if ((IntVar - 3) <= 0xFFFFFFFD)
  {
    tknPrintf("Error: %llu : Expected %s in range [%llu,%llu]\n", v8, IntVar, "Version", 1, 2);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Unsupported version");
    TException::TException(v44, &__p);
    v44[0].__vftable = (std::exception_vtbl *)&unk_1E5D16668;
    if (v45 >= 0)
      v20 = (std::exception_vtbl *)&v44[1];
    else
      v20 = v44[1].__vftable;
    conditionalAssert((const char *)v20, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 609);
    TException::~TException(v44);
    if (SHIBYTE(v43) < 0)
      operator delete((void *)__p);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v44, "Unsupported version");
    TException::TException(exception, (__int128 *)v44);
    *exception = &unk_1E5D16668;
  }
  if (IntVar == 2)
  {
    v10 = *((_QWORD *)this + 1);
    if (v10)
    {
      if (!(*(uint64_t (**)(uint64_t, const char *, _QWORD, _QWORD))(*(_QWORD *)v10 + 40))(v10, "Version", 0, 0))
      {
        tknPrintf("Error: bad model. Couldn't locate %s in static component.\n", v11, "Version");
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        TException::TException(v44, &__p);
        v44[0].__vftable = (std::exception_vtbl *)&unk_1E5D16668;
        if (v45 >= 0)
          v28 = (std::exception_vtbl *)&v44[1];
        else
          v28 = v44[1].__vftable;
        conditionalAssert((const char *)v28, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 683);
        TException::~TException(v44);
        if (SHIBYTE(v43) < 0)
          operator delete((void *)__p);
        v29 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v44, "");
        TException::TException(v29, (__int128 *)v44);
        *v29 = &unk_1E5D16668;
      }
      if ((TDataManager::getBoolVar(*((TDataManager **)this + 1), "IsStaticComponent", 0) & 1) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "Bad static data spec");
        TException::TException(v44, &__p);
        v44[0].__vftable = (std::exception_vtbl *)&unk_1E5D16668;
        if (v45 >= 0)
          v30 = (std::exception_vtbl *)&v44[1];
        else
          v30 = v44[1].__vftable;
        conditionalAssert((const char *)v30, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 689);
        TException::~TException(v44);
        if (SHIBYTE(v43) < 0)
          operator delete((void *)__p);
        v31 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v44, "Bad static data spec");
        TException::TException(v31, (__int128 *)v44);
        *v31 = &unk_1E5D16668;
      }
    }
    if (*(_QWORD *)this)
    {
      if (!(*(uint64_t (**)(_QWORD, const char *, _QWORD, _QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this, "Version", 0, 0))
      {
        tknPrintf("Error: bad model. Couldn't locate %s in dynamic component.\n", v12, "Version");
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        TException::TException(v44, &__p);
        v44[0].__vftable = (std::exception_vtbl *)&unk_1E5D16668;
        if (v45 >= 0)
          v32 = (std::exception_vtbl *)&v44[1];
        else
          v32 = v44[1].__vftable;
        conditionalAssert((const char *)v32, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 699);
        TException::~TException(v44);
        if (SHIBYTE(v43) < 0)
          operator delete((void *)__p);
        v33 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v44, "");
        TException::TException(v33, (__int128 *)v44);
        *v33 = &unk_1E5D16668;
      }
      if (TDataManager::getBoolVar(*(TDataManager **)this, "IsStaticComponent", 0))
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "Bad dynamic data spec");
        TException::TException(v44, &__p);
        v44[0].__vftable = (std::exception_vtbl *)&unk_1E5D16668;
        if (v45 >= 0)
          v34 = (std::exception_vtbl *)&v44[1];
        else
          v34 = v44[1].__vftable;
        conditionalAssert((const char *)v34, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 705);
        TException::~TException(v44);
        if (SHIBYTE(v43) < 0)
          operator delete((void *)__p);
        v35 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v44, "Bad dynamic data spec");
        TException::TException(v35, (__int128 *)v44);
        *v35 = &unk_1E5D16668;
      }
      if (*(_QWORD *)this)
      {
        v13 = (TDataManager *)*((_QWORD *)this + 1);
        if (v13)
        {
          v14 = TDataManager::getIntVar(v13, "Version", 1);
          if (v14 == TDataManager::getIntVar(*(TDataManager **)this, "Version", 1))
          {
            __p = 0uLL;
            v43 = 0;
            TDataManager::getStringVar(*(_QWORD *)this, (uint64_t)"EnhVersion", (uint64_t)&__p);
          }
          tknPrintf("Error: %s : Unmatched dynamic and static data specs\n", v15, "Version");
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          TException::TException(v44, &__p);
          v44[0].__vftable = (std::exception_vtbl *)&unk_1E5D16668;
          if (v45 >= 0)
            v40 = (std::exception_vtbl *)&v44[1];
          else
            v40 = v44[1].__vftable;
          conditionalAssert((const char *)v40, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 715);
          TException::~TException(v44);
          if (SHIBYTE(v43) < 0)
            operator delete((void *)__p);
          v41 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(v44, "");
          TException::TException(v41, (__int128 *)v44);
          *v41 = &unk_1E5D16668;
        }
      }
    }
    if (g_bCheckVocCompatibility)
    {
      __p = 0uLL;
      v43 = 0;
      TInputModel::getStringVar((uint64_t *)this, (uint64_t)"VocVersionID", (uint64_t)&__p);
    }
  }
  else if (IntVar == 1)
  {
    if (!*(_QWORD *)this)
    {
      tknPrintf("Error: Bad model. %s is 1 but there is not dynamic component.\n", v8, "Version");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      TException::TException(v44, &__p);
      v44[0].__vftable = (std::exception_vtbl *)&unk_1E5D16668;
      if (v45 >= 0)
        v22 = (std::exception_vtbl *)&v44[1];
      else
        v22 = v44[1].__vftable;
      conditionalAssert((const char *)v22, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 617);
      TException::~TException(v44);
      if (SHIBYTE(v43) < 0)
        operator delete((void *)__p);
      v23 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v44, "");
      TException::TException(v23, (__int128 *)v44);
      *v23 = &unk_1E5D16668;
    }
    if (!(*(uint64_t (**)(_QWORD, const char *, _QWORD, _QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this, "Version", 0, 0))
    {
      tknPrintf("Error: Bad model. Couldn't locate %s\n", v9, "Version");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      TException::TException(v44, &__p);
      v44[0].__vftable = (std::exception_vtbl *)&unk_1E5D16668;
      if (v45 >= 0)
        v24 = (std::exception_vtbl *)&v44[1];
      else
        v24 = v44[1].__vftable;
      conditionalAssert((const char *)v24, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 624);
      TException::~TException(v44);
      if (SHIBYTE(v43) < 0)
        operator delete((void *)__p);
      v25 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v44, "");
      TException::TException(v25, (__int128 *)v44);
      *v25 = &unk_1E5D16668;
    }
    if (g_bCheckVocCompatibility)
    {
      __p = 0uLL;
      v43 = 0;
      TDataManager::getStringVar(*(_QWORD *)this, (uint64_t)"VocVersionID", (uint64_t)&__p);
    }
    if (TDataManager::getBoolVar(*(TDataManager **)this, "IsStaticComponent", 0))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Bad data spec");
      TException::TException(v44, &__p);
      v44[0].__vftable = (std::exception_vtbl *)&unk_1E5D16668;
      if (v45 >= 0)
        v26 = (std::exception_vtbl *)&v44[1];
      else
        v26 = v44[1].__vftable;
      conditionalAssert((const char *)v26, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 641);
      TException::~TException(v44);
      if (SHIBYTE(v43) < 0)
        operator delete((void *)__p);
      v27 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v44, "Bad data spec");
      TException::TException(v27, (__int128 *)v44);
      *v27 = &unk_1E5D16668;
    }
    v16 = *((_QWORD *)this + 1);
    BoolVar = TDataManager::getBoolVar(*(TDataManager **)this, "HasStaticComponent", 0);
    if (v16)
    {
      if ((BoolVar & 1) != 0)
      {
        if ((TDataManager::getBoolVar(*((TDataManager **)this + 1), "IsStaticComponent", 0) & 1) != 0)
        {
          __p = 0uLL;
          v43 = 0;
          TDataManager::getStringVar(*(_QWORD *)this, (uint64_t)"EnhVersion", (uint64_t)&__p);
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "Bad static data spec");
        TException::TException(v44, &__p);
        v44[0].__vftable = (std::exception_vtbl *)&unk_1E5D16668;
        if (v45 >= 0)
          v38 = (std::exception_vtbl *)&v44[1];
        else
          v38 = v44[1].__vftable;
        conditionalAssert((const char *)v38, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 662);
        TException::~TException(v44);
        if (SHIBYTE(v43) < 0)
          operator delete((void *)__p);
        v39 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v44, "Bad static data spec");
        TException::TException(v39, (__int128 *)v44);
        *v39 = &unk_1E5D16668;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "Bad static data spec");
      TException::TException(v44, &__p);
      v44[0].__vftable = (std::exception_vtbl *)&unk_1E5D16668;
      if (v45 >= 0)
        v36 = (std::exception_vtbl *)&v44[1];
      else
        v36 = v44[1].__vftable;
      conditionalAssert((const char *)v36, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 657);
      TException::~TException(v44);
      if (SHIBYTE(v43) < 0)
        operator delete((void *)__p);
      v37 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v44, "Bad static data spec");
      TException::TException(v37, (__int128 *)v44);
      *v37 = &unk_1E5D16668;
    }
    if ((a4 & 1) == 0 && ((BoolVar ^ 1) & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "The data spec has a static component but it was not specified");
      TException::TException(v44, &__p);
      v44[0].__vftable = (std::exception_vtbl *)&unk_1E5D16668;
      if (v45 >= 0)
        v18 = (std::exception_vtbl *)&v44[1];
      else
        v18 = v44[1].__vftable;
      conditionalAssert((const char *)v18, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/misc.cpp", 649);
      TException::~TException(v44);
      if (SHIBYTE(v43) < 0)
        operator delete((void *)__p);
      v19 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v44, "The data spec has a static component but it was not specified");
      TException::TException(v19, (__int128 *)v44);
      *v19 = &unk_1E5D16668;
    }
  }
}

void sub_1AD9F5318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  void *v31;
  int v32;
  uint64_t v33;

  if (*(char *)(v33 - 57) < 0)
  {
    operator delete(*(void **)(v33 - 80));
    if ((v32 & 1) == 0)
    {
LABEL_6:
      if (a31 < 0)
        operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (!v32)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v31);
  goto LABEL_6;
}

uint64_t TInputModel::getIntVar(TDataManager **this, const char *a2, uint64_t a3)
{
  TDataManager *v6;
  TDataManager *v7;

  v6 = *this;
  if (v6
    && (*(uint64_t (**)(TDataManager *, const char *, _QWORD, _QWORD))(*(_QWORD *)v6 + 40))(v6, a2, 0, 0))
  {
    v7 = *this;
    return TDataManager::getIntVar(v7, a2, a3);
  }
  v7 = this[1];
  if (v7)
    return TDataManager::getIntVar(v7, a2, a3);
  return a3;
}

void TInputModel::getStringVar(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *a1;
  if (v6 && (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 40))(v6, a2, 0, 0))
  {
    v7 = *a1;
  }
  else
  {
    v7 = a1[1];
    if (!v7)
      JUMPOUT(0x1AF44C914);
  }
  TDataManager::getStringVar(v7, a2, a3);
}

BOOL TInputModel::isVar(TInputModel *this, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  v4 = *(_QWORD *)this;
  result = 1;
  if (!v4
    || !(*(uint64_t (**)(uint64_t, const char *, _QWORD, _QWORD))(*(_QWORD *)v4 + 40))(v4, a2, 0, 0))
  {
    v5 = *((_QWORD *)this + 1);
    if (!v5
      || !(*(uint64_t (**)(uint64_t, const char *, _QWORD, _QWORD))(*(_QWORD *)v5 + 40))(v5, a2, 0, 0))
    {
      return 0;
    }
  }
  return result;
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const*,char const*,0>(_QWORD *a1, char **a2)
{
  _QWORD *v4;

  v4 = std::string::basic_string[abi:ne180100]<0>(a1, *a2);
  std::string::basic_string[abi:ne180100]<0>(v4 + 3, a2[1]);
  return a1;
}

void sub_1AD9F56E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::NumFrames(int a1, uint64_t a2)
{
  float v2;
  double v3;
  int v4;
  double v5;

  v2 = *(float *)(a2 + 52);
  if (v2 <= 0.0)
    v2 = *(float *)a2;
  v3 = v2 * 0.001;
  v4 = (int)(v3 * *(float *)(a2 + 4));
  if (!*(_BYTE *)(a2 + 49))
    return (int)(float)((float)((float)a1 / (float)v4) + 0.5);
  v5 = v3 * *(float *)(a2 + 8);
  if (a1 >= (int)v5)
    return ((a1 - (int)v5) / v4 + 1);
  else
    return 0;
}

void kaldi::Dither(uint64_t a1, float a2)
{
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  uint64_t v10;

  if (*(int *)(a1 + 8) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = ((double)(int)kaldi::Rand(0) + 1.0) / 2147483650.0;
      v6 = sqrtf(logf(v5) * -2.0);
      v7 = ((double)(int)kaldi::Rand(0) + 1.0) / 2147483650.0;
      v8 = v7 * 6.28318531;
      v9 = cosf(v8);
      v10 = *(int *)(a1 + 8);
      *(float *)(*(_QWORD *)a1 + 4 * v4) = *(float *)(*(_QWORD *)a1 + 4 * v4) + (float)((float)(v6 * v9) * a2);
      ++v4;
    }
    while (v4 < v10);
  }
}

kaldi::FeatureWindowFunction *kaldi::FeatureWindowFunction::FeatureWindowFunction(kaldi::FeatureWindowFunction *this, const kaldi::FrameExtractionOptions *a2)
{
  float v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  double v8;
  float v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  int *v13;
  int v15;
  int v16;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  float v22;
  long double v26;
  double v27;
  _QWORD *v29;
  int v30;
  char *v31;
  uint64_t v32;
  _QWORD v33[35];

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v4 = *((float *)a2 + 13);
  if (v4 <= 0.0)
    v4 = *(float *)a2;
  v5 = (int)(v4 * 0.001 * *((float *)a2 + 2));
  kaldi::Vector<float>::Resize((void **)this, v5, 0);
  v6 = 0;
  v7 = (char *)a2 + 24;
  v8 = (double)((int)v5 - 1);
  do
  {
    v9 = (float)(int)v6;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
    {
      v10 = *((unsigned __int8 *)a2 + 47);
      if (v10 == 5)
      {
        if (*(_DWORD *)v7 != 1702260592 || *((_BYTE *)a2 + 28) != 121)
        {
LABEL_52:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v33);
          v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Invalid window type ", 20);
          v30 = *((char *)a2 + 47);
          if (v30 >= 0)
            v31 = (char *)a2 + 24;
          else
            v31 = (char *)*((_QWORD *)a2 + 3);
          if (v30 >= 0)
            v32 = *((unsigned __int8 *)a2 + 47);
          else
            v32 = *((_QWORD *)a2 + 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v31, v32);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v33);
        }
LABEL_46:
        v26 = cos(v9 * 6.28318531 / v8);
        v27 = pow(v26 * -0.5 + 0.5, 0.85);
      }
      else
      {
        if (v10 != 7)
        {
          v11 = (uint64_t *)((char *)a2 + 24);
          if (v10 != 11)
            goto LABEL_52;
          goto LABEL_27;
        }
        if (*(_DWORD *)v7 == 1852727656 && *(_DWORD *)((char *)a2 + 27) == 1735289198)
        {
LABEL_47:
          v27 = cos(v9 * 6.28318531 / v8) * -0.5 + 0.5;
        }
        else
        {
          if (*(_DWORD *)v7 != 1835884904 || *(_DWORD *)((char *)a2 + 27) != 1735289197)
            goto LABEL_52;
LABEL_48:
          v27 = cos(v9 * 6.28318531 / v8) * -0.46 + 0.54;
        }
      }
      v22 = v27;
      goto LABEL_50;
    }
    v12 = *((_QWORD *)a2 + 4);
    if (v12 == 7)
    {
      v13 = *(int **)v7;
      if (**(_DWORD **)v7 == 1852727656 && *(_DWORD *)(*(_QWORD *)v7 + 3) == 1735289198)
        goto LABEL_47;
      v15 = *v13;
      v16 = *(int *)((char *)v13 + 3);
      if (v15 == 1835884904 && v16 == 1735289197)
        goto LABEL_48;
      v12 = *((_QWORD *)a2 + 4);
    }
    if (v12 == 5)
    {
      if (**(_DWORD **)v7 == 1702260592 && *(_BYTE *)(*(_QWORD *)v7 + 4) == 121)
        goto LABEL_46;
      v12 = *((_QWORD *)a2 + 4);
    }
    if (v12 != 11)
      goto LABEL_52;
    v11 = *(uint64_t **)v7;
LABEL_27:
    v19 = *v11;
    v20 = *(uint64_t *)((char *)v11 + 3);
    v21 = v19 == 0x75676E6174636572 && v20 == 0x72616C75676E6174;
    v22 = 1.0;
    if (!v21)
      goto LABEL_52;
LABEL_50:
    *(float *)(*(_QWORD *)this + 4 * v6++) = v22;
  }
  while (v5 != v6);
  return this;
}

void kaldi::ExtractWindow(uint64_t *a1, int a2, uint64_t a3, float **a4, void **a5, float *a6)
{
  float v12;
  double v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  unint64_t v34;
  float *v35;
  float v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  uint64_t v42;
  uint64_t v43;
  const void *v44[3];

  v12 = *(float *)(a3 + 52);
  if (v12 <= 0.0)
    v12 = *(float *)a3;
  v13 = v12 * 0.001;
  v14 = (int)(v13 * *(float *)(a3 + 4));
  v15 = (int)(v13 * *(float *)(a3 + 8));
  memset(v44, 0, sizeof(v44));
  kaldi::Vector<float>::Resize((void **)v44, v15, 0);
  if (*(_BYTE *)(a3 + 49))
  {
    v42 = 0;
    v43 = 0;
    v41 = (float *)(*a1 + 4 * (v14 * a2));
    LODWORD(v42) = v15;
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)v44, (const void **)&v41);
  }
  else
  {
    if ((int)v15 >= 0)
      v16 = v15;
    else
      v16 = v15 + 1;
    v17 = (int)(((double)a2 + 0.5) * (double)v14) - (v16 >> 1);
    v18 = v17 + v15;
    v19 = v17 & ~(v17 >> 31);
    v20 = *((_DWORD *)a1 + 2);
    if (v20 >= v17 + (int)v15)
      v20 = v17 + v15;
    v43 = 0;
    v40 = 0;
    v41 = (float *)((char *)v44[0] + 4 * (int)(v19 - v17));
    v42 = v20 - v19;
    v38 = *a1 + 4 * v19;
    v39 = v42;
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v41, (const void **)&v38);
    v21 = *((int *)a1 + 2);
    if (v17 < 0)
    {
      v22 = 0;
      v23 = *a1;
      v24 = v44[0];
      do
        v24[v22] = *(_DWORD *)(v23 + 4 * ((v17 + (int)v22) / (int)v21 * v21 - (v17 + v22)));
      while (v17 + 1 + (_DWORD)v22++ != 0);
    }
    if ((int)v21 < v18)
    {
      v26 = 0;
      v27 = *a1;
      v28 = (char *)v44[0] + 4 * v21 + -4 * v17;
      do
      {
        *(_DWORD *)&v28[4 * v26] = *(_DWORD *)(v27 + 4 * ((int)v21 + ~((int)v26 % (int)v21)));
        ++v26;
      }
      while (v21 + v26 < v18);
    }
  }
  v29 = kaldi::FrameExtractionOptions::PaddedWindowSize((kaldi::FrameExtractionOptions *)a3);
  if (*((_DWORD *)a5 + 2) != (_DWORD)v29)
    kaldi::Vector<float>::Resize(a5, v29, 0);
  v42 = 0;
  v43 = 0;
  v41 = (float *)*a5;
  LODWORD(v42) = v15;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v41, v44);
  v30 = *(float *)(a3 + 12);
  if (v30 != 0.0)
    kaldi::Dither((uint64_t)&v41, v30);
  if (*(_BYTE *)(a3 + 20))
  {
    v31 = kaldi::VectorBase<float>::Sum((uint64_t)&v41);
    kaldi::VectorBase<float>::Add((uint64_t)&v41, (float)-v31 / (float)(int)v15);
  }
  if (a6)
  {
    v32 = kaldi::VecVec<float>((uint64_t)&v41, (const float **)&v41);
    if (v32 < 1.1755e-38)
      v32 = 1.1755e-38;
    *a6 = v32;
  }
  v33 = *(float *)(a3 + 16);
  if (v33 != 0.0)
  {
    v34 = v42;
    v35 = v41;
    v36 = -v33;
    if ((int)v42 >= 2)
    {
      do
        v35[(v34 - 1)] = v35[(v34 - 1)] + (float)(v36 * v35[(v34 - 2)]);
      while (v34-- > 2);
    }
    *v35 = *v35 + (float)(v36 * *v35);
  }
  kaldi::VectorBase<float>::MulElements((uint64_t)&v41, a4);
  if ((_DWORD)v29 != (_DWORD)v15)
  {
    v39 = 0;
    v40 = 0;
    v38 = (uint64_t)*a5 + 4 * (int)v15;
    v39 = (v29 - v15);
    kaldi::VectorBase<float>::SetZero((uint64_t)&v38);
  }
  kaldi::Vector<float>::Destroy((uint64_t)v44);
}

void sub_1AD9F5E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::ExtractWaveformRemainder(uint64_t a1, float *a2, void **a3)
{
  float v5;
  float v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = a2[13];
  if (v5 <= 0.0)
    v5 = *a2;
  v7 = *(_DWORD *)(a1 + 8);
  v6 = a2[1];
  v8 = kaldi::NumFrames(v7, (uint64_t)a2) * (int)(v5 * 0.001 * v6);
  kaldi::Vector<float>::Resize(a3, (v7 - v8), 0);
  if (v7 != v8)
  {
    v10 = 0;
    v11 = 0;
    v9 = *(_QWORD *)a1 + 4 * v8;
    v10 = (v7 - v8);
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)a3, (const void **)&v9);
  }
}

float kaldi::ComputePowerSpectrum(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  float *v4;
  float v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  uint64_t i;
  float result;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 0)
    v2 = *(_DWORD *)(a1 + 8);
  else
    v2 = v1 + 1;
  v3 = v2 >> 1;
  v4 = *(float **)a1;
  v5 = **(float **)a1;
  v6 = *(float *)(*(_QWORD *)a1 + 4);
  if (v1 >= 4)
  {
    v7 = 2;
    if (v3 <= 2)
      v8 = 2;
    else
      v8 = v3;
    v9 = v4 + 3;
    for (i = 1; i != v8; ++i)
    {
      v4[i] = (float)(*v9 * *v9) + (float)(*(v9 - 1) * *(v9 - 1));
      v7 += 2;
      v9 += 2;
    }
  }
  result = v5 * v5;
  *v4 = result;
  v4[v3] = v6 * v6;
  return result;
}

_QWORD *kaldi::DeltaFeatures::DeltaFeatures(_QWORD *a1, unsigned int *a2)
{
  void ***v4;
  uint64_t v5;
  void **v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;

  *a1 = *(_QWORD *)a2;
  a1[1] = 0;
  v4 = (void ***)(a1 + 1);
  a1[2] = 0;
  a1[3] = 0;
  std::vector<kaldi::Vector<float>>::resize(a1 + 1, *a2 + 1);
  kaldi::Vector<float>::Resize(*v4, 1, 0);
  *(_DWORD *)**v4 = 1065353216;
  if ((int)*a2 >= 1)
  {
    v5 = 1;
    do
    {
      v6 = &(*v4)[3 * v5];
      v7 = a2[1];
      v8 = *((_DWORD *)v6 - 4);
      if (v8 >= 1)
        v9 = v8 - 1;
      else
        v9 = *((_DWORD *)v6 - 4);
      kaldi::Vector<float>::Resize(&(*v4)[3 * v5], v8 + 2 * v7, 0);
      if ((v7 & 0x80000000) != 0)
      {
        v15 = 0.0;
      }
      else
      {
        v10 = 0;
        v11 = v9 >> 1;
        v12 = -v7;
        if (v9 >> 1 >= 0)
          v13 = v9 >> 1;
        else
          v13 = -v11;
        v14 = v11 + v13 + 1;
        v15 = 0.0;
        do
        {
          if ((v8 & 0x80000000) == 0)
          {
            v16 = 0;
            v17 = (uint64_t)*(v6 - 3);
            v18 = (float *)*v6;
            do
            {
              v18[v10 + (int)v16] = v18[v10 + (int)v16] + (float)((float)v12 * *(float *)(v17 + 4 * v16));
              ++v16;
            }
            while (v14 != (_DWORD)v16);
          }
          v15 = v15 + (float)(v12 * v12);
          ++v10;
        }
        while (v12++ != v7);
      }
      kaldi::VectorBase<float>::Scale((uint64_t)v6, 1.0 / v15);
    }
    while (v5++ < (int)*a2);
  }
  return a1;
}

void sub_1AD9F6114(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void kaldi::DeltaFeatures::Process(_DWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  float v18;
  int v19;
  const float *v20;
  int v21;
  uint64_t v23;
  _DWORD *v24;
  _QWORD *v25;
  int v26;
  const float *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  kaldi::MatrixBase<float>::NumRows(a2);
  v8 = kaldi::MatrixBase<float>::NumRows(a2);
  v25 = (_QWORD *)a4;
  v26 = kaldi::MatrixBase<float>::NumCols(a2);
  kaldi::VectorBase<float>::SetZero(a4);
  v9 = *a1;
  if ((*a1 & 0x80000000) == 0)
  {
    v10 = 0;
    v23 = a3;
    v24 = a1;
    do
    {
      v11 = *((_QWORD *)a1 + 1) + 24 * v10;
      v12 = *(_DWORD *)(v11 + 8);
      v32 = 0;
      v33 = 0;
      v31 = *v25 + 4 * v10 * v26;
      LODWORD(v32) = v26;
      if ((v12 & 0x80000000) == 0)
      {
        v13 = v12 - 1;
        if (v12 < 1)
          v13 = v12;
        v14 = (v13 >> 1);
        v15 = v14 - (int)v14;
        v16 = v23 - (int)v14;
        v17 = v13 | 1;
        do
        {
          v18 = *(float *)(*(_QWORD *)v11 + 4 * v15);
          if (v18 != 0.0)
          {
            if (v16 >= v8)
              v19 = v8 - 1;
            else
              v19 = v16;
            if (v16 < 0)
              v19 = 0;
            v20 = (const float *)(*(_QWORD *)a2 + 4 * *(_DWORD *)(a2 + 16) * v19);
            v21 = kaldi::MatrixBase<float>::NumCols(a2);
            v29 = 0;
            v30 = 0;
            v27 = v20;
            v28 = v21;
            kaldi::VectorBase<float>::AddVec<float>((uint64_t)&v31, &v27, v18);
          }
          ++v15;
          ++v16;
          --v17;
        }
        while (v17);
        a1 = v24;
        v9 = *v24;
      }
    }
    while (v10++ < v9);
  }
}

void kaldi::ComputeDeltas(unsigned int *a1, uint64_t a2, int32x2_t *a3)
{
  uint64_t v6;
  int v7;
  int i;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = kaldi::MatrixBase<float>::NumRows(a2);
  v7 = kaldi::MatrixBase<float>::NumCols(a2);
  kaldi::Matrix<float>::Resize(a3, v6, v7 + v7 * *a1, 0, 0);
  kaldi::DeltaFeatures::DeltaFeatures(&v12, a1);
  for (i = 0; i < (int)kaldi::MatrixBase<float>::NumRows(a2); ++i)
  {
    v10 = 0;
    v11 = 0;
    v9 = (void **)(*(_QWORD *)a3 + 4 * a3[2].i32[0] * i);
    LODWORD(v10) = kaldi::MatrixBase<float>::NumCols((uint64_t)a3);
    kaldi::DeltaFeatures::Process(&v12, a2, i, (uint64_t)&v9);
  }
  v9 = (void **)&v13;
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
}

void sub_1AD9F639C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  a10 = (void **)&a14;
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t kaldi::SlidingWindowCmnOptions::Check(uint64_t this)
{
  int v1;
  _QWORD v2[34];

  if (*(_BYTE *)(this + 13))
  {
    v1 = *(_DWORD *)(this + 8);
    if (v1)
    {
      if (v1 != *(_DWORD *)this - (*(_DWORD *)this >> 1))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Inconsistent setting: center=true but lookahead is set to ", 58);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
      }
    }
  }
  return this;
}

void kaldi::SlidingWindowCmnInternal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  _QWORD *v21;
  int v22;
  double *v23;
  uint64_t v24;
  uint64_t v25;
  double *v26[3];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  const double *v36[4];

  kaldi::SlidingWindowCmnOptions::Check(a1);
  v6 = kaldi::MatrixBase<float>::NumRows(a2);
  v7 = kaldi::MatrixBase<float>::NumCols(a2);
  memset(v36, 0, 24);
  kaldi::Vector<double>::Resize((void **)v36, v7, 0);
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v22 = v7;
  kaldi::Vector<double>::Resize(&v33, v7, 0);
  if (v6 >= 1)
  {
    v8 = 0;
    v9 = -1;
    v10 = -1;
    do
    {
      v11 = v10;
      v12 = *(_DWORD *)a1;
      if (*(_BYTE *)(a1 + 13))
      {
        if (v12 >= 0)
          v13 = *(_DWORD *)a1;
        else
          v13 = v12 + 1;
        v14 = (v8 - (v13 >> 1)) & ~((v8 - (v13 >> 1)) >> 31);
        v15 = v14 + v12;
      }
      else
      {
        v16 = v8 + *(_DWORD *)(a1 + 8);
        v17 = v16 + 1;
        v18 = v16 - v12;
        v14 = v18 & ~(v18 >> 31);
        v15 = v17 - (v18 & (v18 >> 31));
        if (v15 > v8)
        {
          v15 = *(_DWORD *)(a1 + 4);
          if (v17 > v15)
            v15 = v17;
        }
      }
      if (v15 <= v6)
        v10 = v14;
      else
        v10 = (v14 + v6 - v15) & ~((v14 + v6 - v15) >> 31);
      if (v15 >= v6)
        v19 = v6;
      else
        v19 = v15;
      if (v11 == -1)
      {
        kaldi::SubMatrix<double>::SubMatrix((uint64_t)&v23, a2, v10, v19 - v10, 0, v22);
        kaldi::VectorBase<double>::AddRowSumMat((uint64_t)v36, (const double **)&v23, 1.0, 0.0);
        if (*(_BYTE *)(a1 + 12))
          kaldi::VectorBase<double>::AddDiagMat2((uint64_t)&v33, (const double **)&v23, 112, 1.0, 0.0);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v23);
      }
      else
      {
        if (v10 > v11)
        {
          v24 = 0;
          v25 = 0;
          v23 = (double *)(*(_QWORD *)a2 + 8 * (int)(*(_DWORD *)(a2 + 16) * v11));
          LODWORD(v24) = kaldi::MatrixBase<float>::NumCols(a2);
          kaldi::VectorBase<double>::AddVec<double>((uint64_t)v36, (const double **)&v23, -1.0);
          if (*(_BYTE *)(a1 + 12))
            kaldi::VectorBase<double>::AddVec2((uint64_t)&v33, &v23, -1.0);
        }
        if (v19 > v9)
        {
          v24 = 0;
          v25 = 0;
          v23 = (double *)(*(_QWORD *)a2 + 8 * *(_DWORD *)(a2 + 16) * v9);
          LODWORD(v24) = kaldi::MatrixBase<float>::NumCols(a2);
          kaldi::VectorBase<double>::AddVec<double>((uint64_t)v36, (const double **)&v23, 1.0);
          if (*(_BYTE *)(a1 + 12))
            kaldi::VectorBase<double>::AddVec2((uint64_t)&v33, &v23, 1.0);
        }
      }
      v31 = 0;
      v32 = 0;
      v30 = *(_QWORD *)a2 + 8 * *(_DWORD *)(a2 + 16) * v8;
      LODWORD(v31) = kaldi::MatrixBase<float>::NumCols(a2);
      v28 = 0;
      v29 = 0;
      v27 = *(_QWORD *)a3 + 8 * *(_DWORD *)(a3 + 16) * v8;
      LODWORD(v28) = kaldi::MatrixBase<float>::NumCols(a3);
      kaldi::VectorBase<double>::CopyFromVec((uint64_t)&v27, (const void **)&v30);
      v20 = v19 - v10;
      kaldi::VectorBase<double>::AddVec<double>((uint64_t)&v27, v36, -1.0 / (double)(int)(v19 - v10));
      if (*(_BYTE *)(a1 + 12))
      {
        if (v20 == 1)
        {
          kaldi::VectorBase<double>::Set((uint64_t)&v27, 0.0);
        }
        else
        {
          memset(v26, 0, sizeof(v26));
          kaldi::Vector<double>::Resize((void **)v26, v34, 1);
          kaldi::VectorBase<double>::CopyFromVec((uint64_t)v26, (const void **)&v33);
          kaldi::VectorBase<double>::Scale((uint64_t)v26, 1.0 / (double)v20);
          kaldi::VectorBase<double>::AddVec2((uint64_t)v26, (double **)v36, -1.0 / (double)(v20 * v20));
          if ((int)kaldi::VectorBase<double>::ApplyFloor((uint64_t)v26, 1.0e-10) >= 1
            && v6 != 1
            && kaldi::g_kaldi_verbose_level >= -1)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v23);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v23, (uint64_t)"Flooring variance When normalizing variance, floored ", 53);
            v21 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" elements; num-frames was ",
              26);
            std::ostream::operator<<();
            kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v23);
          }
          kaldi::VectorBase<double>::ApplyPow((uint64_t)v26, -0.5);
          kaldi::VectorBase<double>::MulElements((uint64_t)&v27, v26);
          kaldi::Vector<float>::Destroy((uint64_t)v26);
        }
      }
      ++v8;
      v9 = v19;
    }
    while (v6 != v8);
  }
  kaldi::Vector<float>::Destroy((uint64_t)&v33);
  kaldi::Vector<float>::Destroy((uint64_t)v36);
}

void sub_1AD9F6850(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::Vector<float>::Destroy(v1 - 144);
  _Unwind_Resume(a1);
}

uint64_t kaldi::SlidingWindowCmn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[40];
  _BYTE v10[40];

  kaldi::SameDim<float>(a2, a3);
  kaldi::MatrixBase<float>::NumRows(a2);
  kaldi::Matrix<double>::Matrix<float>(v10, a2, 111);
  v6 = kaldi::MatrixBase<float>::NumRows(a2);
  v7 = kaldi::MatrixBase<float>::NumCols(a2);
  kaldi::Matrix<double>::Matrix((uint64_t)v9, v6, v7, 0, 0);
  kaldi::SlidingWindowCmnInternal(a1, (uint64_t)v10, (uint64_t)v9);
  kaldi::MatrixBase<float>::CopyFromMat<double>(a3, (uint64_t)v9, 111);
  kaldi::Matrix<float>::~Matrix((uint64_t)v9);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v10);
}

void sub_1AD9F6994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  kaldi::Matrix<float>::~Matrix((uint64_t)&a9);
  kaldi::Matrix<float>::~Matrix((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t *StorageAccessor::MMapFileAccessor::MMapFileAccessor(uint64_t *a1, uint64_t a2)
{
  const char *v4;
  off_t st_size;
  const char *v6;
  FILE *v7;
  FILE *v8;
  int v9;
  void *v10;
  std::string *v11;
  uint64_t v12;
  std::string::size_type v13;
  std::runtime_error *v15;
  std::runtime_error *exception;
  std::runtime_error *v17;
  stat v18;
  std::string v19;
  std::string *v20;
  std::string v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  a1[5] = 0;
  a1[6] = 0;
  a1[4] = 0;
  if (*(char *)(a2 + 23) >= 0)
    v4 = (const char *)a2;
  else
    v4 = *(const char **)a2;
  if (stat(v4, &v18))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v21);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  st_size = v18.st_size;
  if (*(char *)(a2 + 23) >= 0)
    v6 = (const char *)a2;
  else
    v6 = *(const char **)a2;
  v7 = fopen(v6, "r+");
  v8 = v7;
  if (!v7)
  {
    v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(v17, &v21);
    __cxa_throw(v17, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v9 = fileno(v7);
  v10 = mmap(0, st_size, 3, 1, v9, 0);
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E5D3D300;
  v19.__r_.__value_.__l.__size_ = st_size;
  v20 = &v19;
  v21.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v21.__r_.__value_.__l.__size_, (uint64_t)&v19);
  v11 = v20;
  if (v20 == &v19)
  {
    v12 = 4;
    v11 = &v19;
  }
  else
  {
    if (!v20)
      goto LABEL_14;
    v12 = 5;
  }
  (*(void (**)(void))(v11->__r_.__value_.__r.__words[0] + 8 * v12))();
LABEL_14:
  v13 = v21.__r_.__value_.__r.__words[0];
  if (v21.__r_.__value_.__r.__words[0] + 1 <= 1)
  {
    v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(v15, &v19);
    __cxa_throw(v15, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (!st_size)
    v13 = 0;
  a1[5] = v13;
  a1[6] = st_size;
  std::unique_ptr<void,std::function<void ()(void *)>>::operator=[abi:ne180100](a1, (uint64_t *)&v21);
  std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v21);
  fclose(v8);
  return a1;
}

void sub_1AD9F6C10(_Unwind_Exception *a1)
{
  uint64_t *v1;
  void *v2;
  int v3;
  uint64_t v4;

  if (*(char *)(v4 - 73) < 0)
  {
    operator delete(*(void **)(v4 - 96));
    if ((v3 & 1) == 0)
    {
LABEL_6:
      std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v1);
      _Unwind_Resume(a1);
    }
  }
  else if (!v3)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v2);
  goto LABEL_6;
}

uint64_t *std::unique_ptr<void,std::function<void ()(void *)>>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  *a2 = 0;
  std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100](a1, v4);
  std::__function::__value_func<void ()(void *)>::operator=[abi:ne180100](a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

unint64_t StorageAccessor::MMapFileAccessor::ReadData(StorageAccessor::MMapFileAccessor *this, unint64_t a2, uint64_t a3)
{
  return StorageAccessor::Span<unsigned char,18446744073709551615ul>::Slice((_QWORD *)this + 5, a2, a3);
}

unint64_t StorageAccessor::Span<unsigned char,18446744073709551615ul>::Slice(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  BOOL v4;
  std::runtime_error *exception;

  if (!a3 || ((v3 = a1[1], v3 > a2) ? (v4 = a3 + a2 > v3) : (v4 = 1), v4))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_1E5CFD1A8, MEMORY[0x1E0DE42B0]);
  }
  return *a1 + a2;
}

void sub_1AD9F6D68(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *StorageAccessor::MMapFileAccessor::WriteData(_QWORD *result, uint64_t a2, uint64_t a3)
{
  size_t v4;
  std::runtime_error *exception;

  v4 = *(_QWORD *)(a3 + 8);
  if (v4 + a2 > result[6])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "out of bounds");
    __cxa_throw(exception, (struct type_info *)off_1E5CFD1A8, MEMORY[0x1E0DE42B0]);
  }
  if (v4)
    return memmove((void *)(*result + a2), *(const void **)a3, v4);
  return result;
}

void sub_1AD9F6DFC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100](a1, 0);
  v2 = (uint64_t *)a1[4];
  if (v2 == a1 + 1)
  {
    v3 = 4;
    v2 = a1 + 1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t *std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v4 = v2;
    v3 = result[4];
    if (!v3)
      std::__throw_bad_function_call[abi:ne180100]();
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v4);
  }
  return result;
}

void std::__function::__func<StorageAccessor::MMapFileAccessor::MMapFileAccessor(std::string const&)::$_0,std::allocator<StorageAccessor::MMapFileAccessor::MMapFileAccessor(std::string const&)::$_0>,void ()(void *)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<StorageAccessor::MMapFileAccessor::MMapFileAccessor(std::string const&)::$_0,std::allocator<StorageAccessor::MMapFileAccessor::MMapFileAccessor(std::string const&)::$_0>,void ()(void *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5D3D300;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<StorageAccessor::MMapFileAccessor::MMapFileAccessor(std::string const&)::$_0,std::allocator<StorageAccessor::MMapFileAccessor::MMapFileAccessor(std::string const&)::$_0>,void ()(void *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5D3D300;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<StorageAccessor::MMapFileAccessor::MMapFileAccessor(std::string const&)::$_0,std::allocator<StorageAccessor::MMapFileAccessor::MMapFileAccessor(std::string const&)::$_0>,void ()(void *)>::operator()(uint64_t a1, void **a2)
{
  return munmap(*a2, *(_QWORD *)(a1 + 8));
}

uint64_t std::__function::__func<StorageAccessor::MMapFileAccessor::MMapFileAccessor(std::string const&)::$_0,std::allocator<StorageAccessor::MMapFileAccessor::MMapFileAccessor(std::string const&)::$_0>,void ()(void *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<StorageAccessor::MMapFileAccessor::MMapFileAccessor(std::string const&)::$_0,std::allocator<StorageAccessor::MMapFileAccessor::MMapFileAccessor(std::string const&)::$_0>,void ()(void *)>::target_type()
{
}

uint64_t std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

_QWORD *std::__function::__value_func<void ()(void *)>::operator=[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)a1[3];
  a1[3] = 0;
  if (v4 == a1)
  {
    v5 = 4;
    v4 = a1;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    if (v6 == a2)
    {
      a1[3] = a1;
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v6;
      *(_QWORD *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

float kaldi::quasar::InverseLengthPenaltyValue(kaldi::quasar *this, float a2)
{
  return pow(((double)(int)this + 5.0) / 6.0, (float)-a2);
}

uint64_t kaldi::quasar::SeevaBeamSearchBase::Initialize(kaldi::quasar::SeevaBeamSearchBase *a1, uint64_t *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  int64x2_t v24;
  unint64_t v25;
  uint64_t v26;
  void **v27;
  void **v28;
  unint64_t v29;
  void **v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void **v38;
  void **v39;
  unint64_t v40;
  void **v41;
  uint64_t *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void **v50;
  void **v51;
  _QWORD *v52;
  unint64_t v53;
  void **v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  void *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void **v63;
  void **v64;
  _QWORD *v65;
  unint64_t v66;
  void **v67;
  _BYTE *v68;
  void **v69;
  unint64_t v70;
  void **v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void **v75;
  void **v76;
  _QWORD *v77;
  unint64_t v78;
  void **v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  void *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t i;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int64x2_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  std::vector<int> v100;
  int v101;
  std::vector<int>::value_type __x[2];
  int64x2_t v103;
  char *v104;
  unint64_t *v105;

  v101 = *(_DWORD *)(*((_QWORD *)a1 + 2) + 152);
  std::vector<int>::vector(&v100, v101, (const std::vector<int>::value_type *)a1 + 8);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, std::vector<int> *, _QWORD))(**(_QWORD **)(*((_QWORD *)a1 + 1)
                                                                                                  + 16)
                                                                                    + 16))(&v99, *(_QWORD *)(*((_QWORD *)a1 + 1) + 16), &v100, 0);
  v96 = 0;
  v97 = 0;
  v98 = 0;
  v6 = *((_QWORD *)a1 + 1);
  *(_QWORD *)__x = 0;
  v103 = 0uLL;
  kaldi::quasar::SeevaStepInference::RunDecoder(v6, &v99, a2, __x, 1, (uint64_t)&v96);
  v93.i64[0] = (uint64_t)__x;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
  v7 = *(v97 - 1);
  *(v97 - 1) = 0;
  v94 = 0;
  v95 = v7;
  v8 = *(_DWORD *)(*((_QWORD *)a1 + 1) + 564);
  v93 = 0uLL;
  v9 = v96;
  v10 = v97;
  if (v96 != v97)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      if ((unint64_t)v11 >= v94)
      {
        v14 = ((uint64_t)v11 - v93.i64[0]) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v15 = (uint64_t)(v94 - v93.i64[0]) >> 2;
        if (v15 <= v14 + 1)
          v15 = v14 + 1;
        if (v94 - v93.i64[0] >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        v105 = &v94;
        if (v16)
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v94, v16);
        else
          v17 = 0;
        v18 = &v17[8 * v14];
        v19 = &v17[8 * v16];
        v104 = v19;
        v20 = *v9;
        *v9 = 0;
        *(_QWORD *)v18 = v20;
        v11 = v18 + 8;
        v103.i64[1] = (uint64_t)(v18 + 8);
        v21 = (_QWORD *)v93.i64[1];
        v22 = (_QWORD *)v93.i64[0];
        if (v93.i64[1] == v93.i64[0])
        {
          v24 = vdupq_n_s64(v93.u64[1]);
        }
        else
        {
          do
          {
            v23 = *--v21;
            *v21 = 0;
            *((_QWORD *)v18 - 1) = v23;
            v18 -= 8;
          }
          while (v21 != v22);
          v24 = v93;
          v11 = (_QWORD *)v103.i64[1];
          v19 = v104;
        }
        v93.i64[0] = (uint64_t)v18;
        v93.i64[1] = (uint64_t)v11;
        v103 = v24;
        v25 = v94;
        v94 = (unint64_t)v19;
        v104 = (char *)v25;
        *(_QWORD *)__x = v24.i64[0];
        std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)__x);
      }
      else
      {
        v13 = *v9;
        *v9 = 0;
        *v11++ = v13;
      }
      v93.i64[1] = (uint64_t)v11;
      if (++v12 == v8)
        break;
      ++v9;
    }
    while (v9 != v10);
  }
  if ((a3 & 1) == 0 && (kaldi::quasar::SeevaBeamSearchBase::ShouldWait((uint64_t)a1, &v93) & 1) != 0)
  {
    v26 = 0;
    goto LABEL_105;
  }
  v27 = (void **)*((_QWORD *)a1 + 32);
  v28 = (void **)*((_QWORD *)a1 + 33);
  if (v28 == v27)
  {
    v32 = (_QWORD *)((char *)a1 + 288);
    v28 = (void **)*((_QWORD *)a1 + 32);
  }
  else
  {
    v29 = *((_QWORD *)a1 + 35);
    v30 = &v27[v29 / 0xAA];
    v31 = (unint64_t)*v30 + 24 * (v29 % 0xAA);
    v32 = (_QWORD *)((char *)a1 + 288);
    v33 = (unint64_t)v27[(*((_QWORD *)a1 + 36) + v29) / 0xAA] + 24 * ((*((_QWORD *)a1 + 36) + v29) % 0xAA);
    if (v31 != v33)
    {
      do
      {
        *(_QWORD *)__x = v31;
        std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
        v31 += 24;
        if (v31 - (_QWORD)*v30 == 4080)
        {
          v34 = (unint64_t)v30[1];
          ++v30;
          v31 = v34;
        }
      }
      while (v31 != v33);
      v27 = (void **)*((_QWORD *)a1 + 32);
      v28 = (void **)*((_QWORD *)a1 + 33);
    }
  }
  *v32 = 0;
  v35 = (char *)v28 - (char *)v27;
  if (v35 >= 0x11)
  {
    do
    {
      operator delete(*v27);
      v36 = *((_QWORD *)a1 + 33);
      v27 = (void **)(*((_QWORD *)a1 + 32) + 8);
      *((_QWORD *)a1 + 32) = v27;
      v35 = v36 - (_QWORD)v27;
    }
    while (v35 > 0x10);
  }
  if (v35 >> 3 == 1)
  {
    v37 = 85;
  }
  else
  {
    if (v35 >> 3 != 2)
      goto LABEL_38;
    v37 = 170;
  }
  *((_QWORD *)a1 + 35) = v37;
LABEL_38:
  std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::emplace_back<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>((_QWORD *)a1 + 31, (uint64_t)&v93);
  v38 = (void **)*((_QWORD *)a1 + 38);
  v39 = (void **)*((_QWORD *)a1 + 39);
  if (v39 == v38)
  {
    v43 = (_QWORD *)((char *)a1 + 336);
    v39 = (void **)*((_QWORD *)a1 + 38);
  }
  else
  {
    v40 = *((_QWORD *)a1 + 41);
    v41 = &v38[v40 >> 9];
    v42 = (uint64_t *)((char *)*v41 + 8 * (v40 & 0x1FF));
    v43 = (_QWORD *)((char *)a1 + 336);
    v44 = *(uint64_t *)((char *)v38 + (((*((_QWORD *)a1 + 42) + v40) >> 6) & 0x3FFFFFFFFFFFFF8))
        + 8 * ((*((_QWORD *)a1 + 42) + v40) & 0x1FF);
    if (v42 != (uint64_t *)v44)
    {
      do
      {
        v45 = *v42;
        *v42 = 0;
        if (v45)
          (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
        if ((char *)++v42 - (_BYTE *)*v41 == 4096)
        {
          v46 = (uint64_t *)v41[1];
          ++v41;
          v42 = v46;
        }
      }
      while (v42 != (uint64_t *)v44);
      v38 = (void **)*((_QWORD *)a1 + 38);
      v39 = (void **)*((_QWORD *)a1 + 39);
    }
  }
  *v43 = 0;
  v47 = (char *)v39 - (char *)v38;
  if (v47 >= 0x11)
  {
    do
    {
      operator delete(*v38);
      v48 = *((_QWORD *)a1 + 39);
      v38 = (void **)(*((_QWORD *)a1 + 38) + 8);
      *((_QWORD *)a1 + 38) = v38;
      v47 = v48 - (_QWORD)v38;
    }
    while (v47 > 0x10);
  }
  if (v47 >> 3 == 1)
  {
    v49 = 256;
  }
  else
  {
    if (v47 >> 3 != 2)
      goto LABEL_54;
    v49 = 512;
  }
  *((_QWORD *)a1 + 41) = v49;
LABEL_54:
  std::deque<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::push_back((_QWORD *)a1 + 37, &v95);
  v50 = (void **)*((_QWORD *)a1 + 11);
  v51 = (void **)*((_QWORD *)a1 + 12);
  if (v51 == v50)
  {
    v52 = (_QWORD *)((char *)a1 + 120);
    v51 = (void **)*((_QWORD *)a1 + 11);
  }
  else
  {
    v52 = (_QWORD *)((char *)a1 + 120);
    v53 = *((_QWORD *)a1 + 14);
    v54 = &v50[v53 / 0xAA];
    v55 = (unint64_t)*v54;
    v56 = (unint64_t)*v54 + 24 * (v53 % 0xAA);
    v57 = (unint64_t)v50[(*((_QWORD *)a1 + 15) + v53) / 0xAA] + 24 * ((*((_QWORD *)a1 + 15) + v53) % 0xAA);
    if (v56 != v57)
    {
      do
      {
        v58 = *(void **)v56;
        if (*(_QWORD *)v56)
        {
          *(_QWORD *)(v56 + 8) = v58;
          operator delete(v58);
          v55 = (unint64_t)*v54;
        }
        v56 += 24;
        if (v56 - v55 == 4080)
        {
          v59 = (unint64_t)v54[1];
          ++v54;
          v55 = v59;
          v56 = v59;
        }
      }
      while (v56 != v57);
      v50 = (void **)*((_QWORD *)a1 + 11);
      v51 = (void **)*((_QWORD *)a1 + 12);
    }
  }
  *v52 = 0;
  v60 = (char *)v51 - (char *)v50;
  if ((unint64_t)((char *)v51 - (char *)v50) >= 0x11)
  {
    do
    {
      operator delete(*v50);
      v61 = *((_QWORD *)a1 + 12);
      v50 = (void **)(*((_QWORD *)a1 + 11) + 8);
      *((_QWORD *)a1 + 11) = v50;
      v60 = v61 - (_QWORD)v50;
    }
    while (v60 > 0x10);
  }
  if (v60 >> 3 == 1)
  {
    v62 = 85;
  }
  else
  {
    if (v60 >> 3 != 2)
      goto LABEL_70;
    v62 = 170;
  }
  *((_QWORD *)a1 + 14) = v62;
LABEL_70:
  *(_QWORD *)__x = 0;
  std::deque<std::vector<float>>::emplace_back<int const&,double>((_QWORD *)a1 + 10, &v101, (double *)__x);
  v63 = (void **)*((_QWORD *)a1 + 17);
  v64 = (void **)*((_QWORD *)a1 + 18);
  if (v64 == v63)
  {
    v65 = (_QWORD *)((char *)a1 + 168);
    v64 = (void **)*((_QWORD *)a1 + 17);
  }
  else
  {
    v65 = (_QWORD *)((char *)a1 + 168);
    v66 = *((_QWORD *)a1 + 20);
    v67 = &v63[v66 / 0xAA];
    v68 = *v67;
    v69 = (void **)((char *)*v67 + 24 * (v66 % 0xAA));
    v70 = (unint64_t)v63[(*((_QWORD *)a1 + 21) + v66) / 0xAA] + 24 * ((*((_QWORD *)a1 + 21) + v66) % 0xAA);
    if (v69 != (void **)v70)
    {
      do
      {
        if (*v69)
        {
          operator delete(*v69);
          v68 = *v67;
        }
        v69 += 3;
        if ((char *)v69 - v68 == 4080)
        {
          v71 = (void **)v67[1];
          ++v67;
          v68 = v71;
          v69 = v71;
        }
      }
      while (v69 != (void **)v70);
      v63 = (void **)*((_QWORD *)a1 + 17);
      v64 = (void **)*((_QWORD *)a1 + 18);
    }
  }
  *v65 = 0;
  v72 = (char *)v64 - (char *)v63;
  if ((unint64_t)((char *)v64 - (char *)v63) >= 0x11)
  {
    do
    {
      operator delete(*v63);
      v73 = *((_QWORD *)a1 + 18);
      v63 = (void **)(*((_QWORD *)a1 + 17) + 8);
      *((_QWORD *)a1 + 17) = v63;
      v72 = v73 - (_QWORD)v63;
    }
    while (v72 > 0x10);
  }
  if (v72 >> 3 == 1)
  {
    v74 = 85;
  }
  else
  {
    if (v72 >> 3 != 2)
      goto LABEL_86;
    v74 = 170;
  }
  *((_QWORD *)a1 + 20) = v74;
LABEL_86:
  LOBYTE(__x[0]) = 0;
  std::deque<std::vector<BOOL>>::emplace_back<int const&,BOOL>((_QWORD *)a1 + 16, &v101, (unsigned __int8 *)__x);
  v75 = (void **)*((_QWORD *)a1 + 23);
  v76 = (void **)*((_QWORD *)a1 + 24);
  if (v76 == v75)
  {
    v77 = (_QWORD *)((char *)a1 + 216);
    v76 = (void **)*((_QWORD *)a1 + 23);
  }
  else
  {
    v77 = (_QWORD *)((char *)a1 + 216);
    v78 = *((_QWORD *)a1 + 26);
    v79 = &v75[v78 / 0xAA];
    v80 = (unint64_t)*v79;
    v81 = (unint64_t)*v79 + 24 * (v78 % 0xAA);
    v82 = (unint64_t)v75[(*((_QWORD *)a1 + 27) + v78) / 0xAA] + 24 * ((*((_QWORD *)a1 + 27) + v78) % 0xAA);
    if (v81 != v82)
    {
      do
      {
        v83 = *(void **)v81;
        if (*(_QWORD *)v81)
        {
          *(_QWORD *)(v81 + 8) = v83;
          operator delete(v83);
          v80 = (unint64_t)*v79;
        }
        v81 += 24;
        if (v81 - v80 == 4080)
        {
          v84 = (unint64_t)v79[1];
          ++v79;
          v80 = v84;
          v81 = v84;
        }
      }
      while (v81 != v82);
      v75 = (void **)*((_QWORD *)a1 + 23);
      v76 = (void **)*((_QWORD *)a1 + 24);
    }
  }
  *v77 = 0;
  v85 = (char *)v76 - (char *)v75;
  if ((unint64_t)((char *)v76 - (char *)v75) >= 0x11)
  {
    do
    {
      operator delete(*v75);
      v86 = *((_QWORD *)a1 + 24);
      v75 = (void **)(*((_QWORD *)a1 + 23) + 8);
      *((_QWORD *)a1 + 23) = v75;
      v85 = v86 - (_QWORD)v75;
    }
    while (v85 > 0x10);
  }
  if (v85 >> 3 == 1)
  {
    v87 = 85;
    goto LABEL_101;
  }
  if (v85 >> 3 == 2)
  {
    v87 = 170;
LABEL_101:
    *((_QWORD *)a1 + 26) = v87;
  }
  __x[0] = 0;
  std::deque<std::vector<int>>::emplace_back<int const&,int>((_QWORD *)a1 + 22, &v101, __x);
  v89 = *((_QWORD *)a1 + 28);
  for (i = *((_QWORD *)a1 + 29);
        i != v89;
        std::allocator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>::destroy[abi:ne180100]((uint64_t)a1 + 240, i))
  {
    i -= 72;
  }
  *((_QWORD *)a1 + 29) = v89;
  (*(void (**)(kaldi::quasar::SeevaBeamSearchBase *))(*(_QWORD *)a1 + 24))(a1);
  v26 = a3 | kaldi::quasar::SeevaBeamSearchBase::UpdateSearchStats(a1, 1) ^ 1;
LABEL_105:
  *(_QWORD *)__x = &v93;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
  v90 = v95;
  v95 = 0;
  if (v90)
    (*(void (**)(uint64_t))(*(_QWORD *)v90 + 8))(v90);
  *(_QWORD *)__x = &v96;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
  v91 = v99;
  v99 = 0;
  if (v91)
    (*(void (**)(uint64_t))(*(_QWORD *)v91 + 8))(v91);
  if (v100.__begin_)
  {
    v100.__end_ = v100.__begin_;
    operator delete(v100.__begin_);
  }
  return v26;
}

void sub_1AD9F7888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v18 - 88) = &a9;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v18 - 88));
  v20 = a12;
  a12 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  a9 = &a13;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  v21 = a16;
  a16 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::SeevaBeamSearchBase::ShouldWait(uint64_t a1, _QWORD *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  float v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  float v18;
  _QWORD *v19;
  _QWORD *v20;
  char v21;
  char v22;
  void **v24[35];
  uint64_t v25;
  uint64_t v26;

  kaldi::quasar::SeevaBeamSearchBase::GetCurrentAlignment(a1, a2, &v25);
  v3 = kaldi::MatrixBase<float>::NumCols(v25);
  v4 = v25;
  v5 = v26;
  if (v25 == v26)
  {
    v7 = 0;
LABEL_24:
    v21 = 0;
  }
  else
  {
    v6 = v3;
    v7 = 0;
    v8 = v3;
    while (1)
    {
      v9 = kaldi::MatrixBase<float>::NumRows(v4);
      if (v9 >= 1)
        break;
      v11 = 0;
LABEL_18:
      v7 |= v11 == v9;
      v4 += 40;
      if (v4 == v5)
        goto LABEL_24;
    }
    v10 = 0;
    v11 = 0;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(float *)(v12 + 196);
    v14 = *(_DWORD *)(v12 + 172);
    while (1)
    {
      if (v6 < 1)
      {
        v18 = -1.0;
        v17 = -1;
      }
      else
      {
        v15 = 0;
        v17 = -1;
        v18 = -1.0;
        do
        {
          v16 = *(_QWORD *)v4 + 4 * *(_DWORD *)(v4 + 16) * v10;
          if (*(float *)(v16 + 4 * v15) > v18)
          {
            v17 = v15;
            v18 = *(float *)(v16 + 4 * v15);
          }
          ++v15;
        }
        while (v8 != v15);
      }
      if (v6 - v17 < v14)
        break;
      if (v18 > v13)
        ++v11;
      if (++v10 == v9)
        goto LABEL_18;
    }
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v24, 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"On beam ", 8);
      v19 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" peak attention at ", 19);
      v20 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" which is too close to ", 23);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v24);
    }
    v21 = 1;
  }
  v22 = v21 | ~v7;
  v24[0] = (void **)&v25;
  std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100](v24);
  return v22 & 1;
}

void sub_1AD9F7AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;

  a9 = (void **)(v9 - 104);
  std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::deque<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::push_back(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  v9 = *(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8));
  v10 = *a2;
  *a2 = 0;
  *(_QWORD *)(v9 + 8 * (v8 & 0x1FF)) = v10;
  a1[5] = v7 + 1;
}

uint64_t std::deque<std::vector<float>>::emplace_back<int const&,double>(_QWORD *a1, int *a2, double *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  float v20;

  v6 = a1[1];
  v7 = a1[2];
  v8 = 170 * ((v7 - v6) >> 3) - 1;
  if (v7 == v6)
    v8 = 0;
  if (v8 == a1[5] + a1[4])
  {
    std::deque<std::vector<float>>::__add_back_capacity(a1);
    v6 = a1[1];
    v7 = a1[2];
  }
  if (v7 == v6)
  {
    v10 = 0;
  }
  else
  {
    v9 = a1[5] + a1[4];
    v10 = (_QWORD *)(*(_QWORD *)(v6 + 8 * (v9 / 0xAA)) + 24 * (v9 % 0xAA));
  }
  v11 = *a2;
  v12 = *a3;
  v20 = v12;
  std::vector<float>::vector(v10, v11, &v20);
  v13 = a1[4];
  v14 = a1[5] + 1;
  a1[5] = v14;
  v15 = v13 + v14;
  v16 = a1[1];
  v17 = (_QWORD *)(v16 + 8 * (v15 / 0xAA));
  v18 = *v17 + 24 * (v15 % 0xAA);
  if (a1[2] == v16)
    v18 = 0;
  if (v18 == *v17)
    v18 = *(v17 - 1) + 4080;
  return v18 - 24;
}

uint64_t std::deque<std::vector<BOOL>>::emplace_back<int const&,BOOL>(_QWORD *a1, int *a2, unsigned __int8 *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v6 = a1[1];
  v7 = a1[2];
  v8 = 170 * ((v7 - v6) >> 3) - 1;
  if (v7 == v6)
    v8 = 0;
  if (v8 == a1[5] + a1[4])
  {
    std::deque<std::vector<BOOL>>::__add_back_capacity(a1);
    v6 = a1[1];
    v7 = a1[2];
  }
  if (v7 == v6)
  {
    v10 = 0;
  }
  else
  {
    v9 = a1[5] + a1[4];
    v10 = (_QWORD *)(*(_QWORD *)(v6 + 8 * (v9 / 0xAA)) + 24 * (v9 % 0xAA));
  }
  std::vector<BOOL>::vector(v10, *a2, a3);
  v11 = a1[4];
  v12 = a1[5] + 1;
  a1[5] = v12;
  v13 = v11 + v12;
  v14 = a1[1];
  v15 = (_QWORD *)(v14 + 8 * (v13 / 0xAA));
  v16 = *v15 + 24 * (v13 % 0xAA);
  if (a1[2] == v14)
    v16 = 0;
  if (v16 == *v15)
    v16 = *(v15 - 1) + 4080;
  return v16 - 24;
}

uint64_t std::deque<std::vector<int>>::emplace_back<int const&,int>(_QWORD *a1, int *a2, std::vector<int>::value_type *__x)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  std::vector<int> *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v6 = a1[1];
  v7 = a1[2];
  v8 = 170 * ((v7 - v6) >> 3) - 1;
  if (v7 == v6)
    v8 = 0;
  if (v8 == a1[5] + a1[4])
  {
    std::deque<std::vector<int>>::__add_back_capacity(a1);
    v6 = a1[1];
    v7 = a1[2];
  }
  if (v7 == v6)
  {
    v10 = 0;
  }
  else
  {
    v9 = a1[5] + a1[4];
    v10 = (std::vector<int> *)(*(_QWORD *)(v6 + 8 * (v9 / 0xAA)) + 24 * (v9 % 0xAA));
  }
  std::vector<int>::vector(v10, *a2, __x);
  v11 = a1[4];
  v12 = a1[5] + 1;
  a1[5] = v12;
  v13 = v11 + v12;
  v14 = a1[1];
  v15 = (_QWORD *)(v14 + 8 * (v13 / 0xAA));
  v16 = *v15 + 24 * (v13 % 0xAA);
  if (a1[2] == v14)
    v16 = 0;
  if (v16 == *v15)
    v16 = *(v15 - 1) + 4080;
  return v16 - 24;
}

uint64_t kaldi::quasar::SeevaBeamSearchBase::UpdateSearchStats(kaldi::quasar::SeevaBeamSearchBase *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  _DWORD *v16;
  unint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *__p;
  void *v33;
  uint64_t v34;
  int v35;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  _DWORD *v42;
  void *v43;
  uint64_t v44;

  v42 = 0;
  v43 = 0;
  v44 = 0;
  v4 = *((_QWORD *)this + 42) + *((_QWORD *)this + 41) - 1;
  v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 38) + ((v4 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v4 & 0x1FF));
  (*(void (**)(uint64_t, _DWORD **))(*(_QWORD *)v5 + 56))(v5, &v42);
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v37 = 0;
  v38 = 0;
  v36 = 0;
  (*(void (**)(kaldi::quasar::SeevaBeamSearchBase *, uint64_t, _DWORD **, void **, void **))(*(_QWORD *)this + 16))(this, a2, &v42, &v39, &v36);
  v35 = *(_DWORD *)(*((_QWORD *)this + 2) + 152);
  v33 = 0;
  v34 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>(&__p, v36, (uint64_t)v36 + 4 * v35, v35);
  v6 = *((_QWORD *)this + 29);
  if (v6 >= *((_QWORD *)this + 30))
  {
    v7 = std::vector<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>::__emplace_back_slow_path<int const&>((uint64_t *)this + 28, &v35);
  }
  else
  {
    kaldi::quasar::SeevaBeamSearchBase::Breadcrumb::Breadcrumb(*((kaldi::quasar::SeevaBeamSearchBase::Breadcrumb **)this + 29), v35);
    v7 = v6 + 72;
    *((_QWORD *)this + 29) = v6 + 72;
  }
  *((_QWORD *)this + 29) = v7;
  if (v35 < 1)
    goto LABEL_16;
  v8 = 0;
  v9 = (int *)__p;
  v10 = *(_QWORD *)(v7 - 48);
  v11 = *(_QWORD *)(v7 - 72);
  v12 = v42;
  v13 = *(_QWORD *)(v7 - 24);
  do
  {
    *(_DWORD *)(v10 + 4 * v8) = v9[v8] % *((_DWORD *)this + 11);
    *(_DWORD *)(v11 + 4 * v8) = v9[v8] / *((_DWORD *)this + 11);
    *(_DWORD *)(v13 + 4 * v8) = v12[v9[v8]];
    ++v8;
  }
  while (v8 < v35);
  v14 = v35;
  if (v35 < 1)
  {
LABEL_16:
    v25 = 1;
  }
  else
  {
    v15 = (int *)__p;
    v16 = v39;
    v17 = *((_QWORD *)this + 15) + *((_QWORD *)this + 14) - 1;
    v18 = *(_DWORD **)(*(_QWORD *)(*((_QWORD *)this + 11) + 8 * (v17 / 0xAA)) + 24 * (v17 % 0xAA));
    v19 = v35;
    do
    {
      v20 = *v15++;
      *v18++ = v16[v20];
      --v19;
    }
    while (v19);
    v21 = 0;
    v22 = *(_QWORD *)(v7 - 48);
    v23 = *((_DWORD *)this + 9);
    v24 = *((_QWORD *)this + 17);
    v25 = 1;
    do
    {
      v26 = *((_QWORD *)this + 21) + *((_QWORD *)this + 20) - 1;
      v27 = *(_QWORD *)(*(_QWORD *)(v24 + 8 * (v26 / 0xAA)) + 24 * (v26 % 0xAA));
      v28 = v21 >> 6;
      v29 = 1 << v21;
      if (*(_DWORD *)(v22 + 4 * v21) == v23)
      {
        v30 = *(_QWORD *)(v27 + 8 * v28) | v29;
      }
      else
      {
        v25 = 0;
        v30 = *(_QWORD *)(v27 + 8 * v28) & ~v29;
      }
      *(_QWORD *)(v27 + 8 * v28) = v30;
      ++v21;
    }
    while (v14 != v21);
  }
  if (__p)
  {
    v33 = __p;
    operator delete(__p);
  }
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
  if (v42)
  {
    v43 = v42;
    operator delete(v42);
  }
  return v25 & 1;
}

void sub_1AD9F8158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  uint64_t v18;
  void *v20;

  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  if (a17)
    operator delete(a17);
  v20 = *(void **)(v18 - 40);
  if (v20)
  {
    *(_QWORD *)(v18 - 32) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::SeevaBeamSearchBase::BeamSearch(uint64_t *a1, uint64_t *a2, int a3)
{
  int v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t i;
  unint64_t v8;
  uint64_t v9;
  int *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  int64x2_t v27;
  char *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  int64x2_t v45;
  unint64_t v46;
  int updated;
  char v48;
  int v49;
  unint64_t v50;
  int ShouldWait;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  char v59;
  uint64_t v61;
  char v62;
  _QWORD *v64;
  _QWORD *v65;
  int64x2_t *v67;
  int64x2_t v68;
  char *v69;
  unint64_t *v70;
  int64x2_t v71;
  unint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  int64x2_t v76;
  _QWORD v77[2];
  uint64_t v78;
  uint64_t v79[3];

  v3 = a3;
  v5 = *(int *)(a1[2] + 152);
  v61 = 0x71C71C71C71C71C7 * ((a1[29] - a1[28]) >> 3);
  v65 = a1 + 37;
  v6 = *(unsigned int *)(a1[1] + 564);
  v64 = a1 + 31;
  do
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1[1] + 16) + 16))(&v78, *(_QWORD *)(a1[1] + 16), a1[29] - 48, 0);
    v76 = 0uLL;
    v77[0] = 0;
    if ((int)v6 >= 1)
    {
      for (i = 0; i != v6; ++i)
      {
        v8 = a1[36] + a1[35] - 1;
        (*(void (**)(uint64_t **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1[1] + 16) + 104))(&v73, *(_QWORD *)(a1[1] + 16), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[32] + 8 * (v8 / 0xAA)) + 24 * (v8 % 0xAA)) + 8 * i));
        std::vector<kaldi::quasar::ComputeEngineBufferItf *>::vector(&v71, v5);
        v9 = a1[29];
        v10 = *(int **)(v9 - 72);
        v11 = *(int **)(v9 - 64);
        if (v10 != v11)
        {
          v12 = 0;
          do
          {
            v13 = *v10++;
            *(_QWORD *)(v71.i64[0] + v12) = v73[v13];
            v12 += 8;
          }
          while (v10 != v11);
        }
        (*(void (**)(uint64_t *__return_ptr, _QWORD, int64x2_t *, _QWORD))(**(_QWORD **)(a1[1] + 16) + 96))(v79, *(_QWORD *)(a1[1] + 16), &v71, 0);
        v14 = v76.i64[1];
        if (v76.i64[1] >= v77[0])
        {
          v17 = (v76.i64[1] - v76.i64[0]) >> 3;
          if ((unint64_t)(v17 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v18 = (v77[0] - v76.i64[0]) >> 2;
          if (v18 <= v17 + 1)
            v18 = v17 + 1;
          if (v77[0] - v76.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL)
            v19 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v19 = v18;
          v70 = v77;
          if (v19)
            v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v77, v19);
          else
            v20 = 0;
          v21 = &v20[8 * v17];
          v22 = &v20[8 * v19];
          v69 = v22;
          v23 = v79[0];
          v79[0] = 0;
          *(_QWORD *)v21 = v23;
          v16 = v21 + 8;
          v68.i64[1] = (uint64_t)(v21 + 8);
          v24 = (_QWORD *)v76.i64[1];
          v25 = (_QWORD *)v76.i64[0];
          if (v76.i64[1] == v76.i64[0])
          {
            v27 = vdupq_n_s64(v76.u64[1]);
          }
          else
          {
            do
            {
              v26 = *--v24;
              *v24 = 0;
              *((_QWORD *)v21 - 1) = v26;
              v21 -= 8;
            }
            while (v24 != v25);
            v27 = v76;
            v16 = (_QWORD *)v68.i64[1];
            v22 = v69;
          }
          v76.i64[0] = (uint64_t)v21;
          v76.i64[1] = (uint64_t)v16;
          v68 = v27;
          v28 = (char *)v77[0];
          v77[0] = v22;
          v69 = v28;
          v67 = (int64x2_t *)v27.i64[0];
          std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v67);
        }
        else
        {
          v15 = v79[0];
          v79[0] = 0;
          *(_QWORD *)v76.i64[1] = v15;
          v16 = (_QWORD *)(v14 + 8);
        }
        v76.i64[1] = (uint64_t)v16;
        v29 = v79[0];
        v79[0] = 0;
        if (v29)
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
        if (v71.i64[0])
        {
          v71.i64[1] = v71.i64[0];
          operator delete((void *)v71.i64[0]);
        }
        v67 = (int64x2_t *)&v73;
        std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
      }
    }
    v73 = 0;
    v74 = 0;
    v75 = 0;
    kaldi::quasar::SeevaStepInference::RunDecoder(a1[1], &v78, a2, &v76, 0, (uint64_t)&v73);
    kaldi::quasar::SeevaBeamSearchBase::ControlSearchStatsSize((kaldi::quasar::SeevaBeamSearchBase *)a1, v3);
    std::deque<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::push_back(v65, v74 - 1);
    v71 = 0uLL;
    v72 = 0;
    v31 = v73;
    v30 = v74;
    if (v73 != v74)
    {
      v32 = 0;
      v33 = 0;
      do
      {
        if ((unint64_t)v32 >= v72)
        {
          v35 = ((uint64_t)v32 - v71.i64[0]) >> 3;
          if ((unint64_t)(v35 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v36 = (uint64_t)(v72 - v71.i64[0]) >> 2;
          if (v36 <= v35 + 1)
            v36 = v35 + 1;
          if (v72 - v71.i64[0] >= 0x7FFFFFFFFFFFFFF8)
            v37 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v37 = v36;
          v70 = &v72;
          if (v37)
            v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v72, v37);
          else
            v38 = 0;
          v39 = &v38[8 * v35];
          v40 = &v38[8 * v37];
          v69 = v40;
          v41 = *v31;
          *v31 = 0;
          *(_QWORD *)v39 = v41;
          v32 = v39 + 8;
          v68.i64[1] = (uint64_t)(v39 + 8);
          v42 = (_QWORD *)v71.i64[1];
          v43 = (_QWORD *)v71.i64[0];
          if (v71.i64[1] == v71.i64[0])
          {
            v45 = vdupq_n_s64(v71.u64[1]);
          }
          else
          {
            do
            {
              v44 = *--v42;
              *v42 = 0;
              *((_QWORD *)v39 - 1) = v44;
              v39 -= 8;
            }
            while (v42 != v43);
            v45 = v71;
            v32 = (_QWORD *)v68.i64[1];
            v40 = v69;
          }
          v71.i64[0] = (uint64_t)v39;
          v71.i64[1] = (uint64_t)v32;
          v68 = v45;
          v46 = v72;
          v72 = (unint64_t)v40;
          v69 = (char *)v46;
          v67 = (int64x2_t *)v45.i64[0];
          std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v67);
        }
        else
        {
          v34 = *v31;
          *v31 = 0;
          *v32++ = v34;
        }
        v71.i64[1] = (uint64_t)v32;
        if (++v33 == (_DWORD)v6)
          break;
        ++v31;
      }
      while (v31 != v30);
    }
    std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::emplace_back<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>(v64, (uint64_t)&v71);
    updated = kaldi::quasar::SeevaBeamSearchBase::UpdateSearchStats((kaldi::quasar::SeevaBeamSearchBase *)a1, 0);
    v3 = a3;
    v48 = updated;
    if ((a3 & 1) == 0)
    {
      if (updated)
      {
        v49 = *(_DWORD *)(a1[2] + 184);
      }
      else
      {
        v50 = a1[36] + a1[35] - 1;
        ShouldWait = kaldi::quasar::SeevaBeamSearchBase::ShouldWait((uint64_t)a1, (_QWORD *)(*(_QWORD *)(a1[32] + 8 * (v50 / 0xAA)) + 24 * (v50 % 0xAA)));
        v53 = a1[28];
        v52 = a1[29];
        v54 = a1[2];
        if (!ShouldWait)
          goto LABEL_60;
        v55 = *(int *)(v54 + 188);
        v56 = v61 - 0x71C71C71C71C71C7 * ((v52 - v53) >> 3);
        if (v56 >= v55)
          v49 = v55;
        else
          v49 = v56;
      }
      if (v49 >= 1)
      {
        v62 = kaldi::quasar::SeevaBeamSearchBase::Rollback((kaldi::quasar::SeevaBeamSearchBase *)a1, v49);
        v57 = 1;
        goto LABEL_63;
      }
    }
    if ((v48 & 1) != 0)
    {
      v57 = 3;
      goto LABEL_63;
    }
    v53 = a1[28];
    v52 = a1[29];
    v54 = a1[2];
LABEL_60:
    if (0x8E38E38E38E38E39 * ((v52 - v53) >> 3) >= *(int *)(v54 + 160))
      v57 = 3;
    else
      v57 = 0;
LABEL_63:
    v67 = &v71;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
    v67 = (int64x2_t *)&v73;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
    v67 = &v76;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
    v58 = v78;
    v78 = 0;
    if (v58)
      (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  }
  while (!v57);
  if (v57 == 3)
  {
    v59 = 1;
    if (a3 && kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v67, 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67, (uint64_t)"total rollbacked steps are ", 27);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v67);
      v59 = 1;
    }
  }
  else
  {
    v59 = v62;
  }
  return v59 & 1;
}

void sub_1AD9F8798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::quasar::SeevaBeamSearchBase::ControlSearchStatsSize(kaldi::quasar::SeevaBeamSearchBase *this, int a2)
{
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v3 = (_QWORD *)((char *)this + 296);
  if (a2)
  {
    std::deque<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::pop_front(v3);
    return (_QWORD *)std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::pop_front((int64x2_t *)((char *)this + 248));
  }
  else
  {
    if (*((_DWORD *)this + 12) <= (int)*((_QWORD *)this + 42))
    {
      std::deque<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::pop_front(v3);
      std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::pop_front((int64x2_t *)((char *)this + 248));
      std::deque<std::vector<float>>::pop_front((_QWORD *)this + 10);
      std::deque<std::vector<BOOL>>::pop_front((_QWORD *)this + 16);
      std::deque<std::vector<float>>::pop_front((_QWORD *)this + 22);
    }
    v5 = *((_QWORD *)this + 15) + *((_QWORD *)this + 14) - 1;
    std::deque<std::vector<float>>::push_back((_QWORD *)this + 10, *(_QWORD *)(*((_QWORD *)this + 11) + 8 * (v5 / 0xAA)) + 24 * (v5 % 0xAA));
    v6 = *((_QWORD *)this + 21) + *((_QWORD *)this + 20) - 1;
    std::deque<std::vector<BOOL>>::push_back((_QWORD *)this + 16, *(_QWORD *)(*((_QWORD *)this + 17) + 8 * (v6 / 0xAA)) + 24 * (v6 % 0xAA));
    v7 = *((_QWORD *)this + 27) + *((_QWORD *)this + 26) - 1;
    return std::deque<std::vector<int>>::push_back((_QWORD *)this + 22, *(_QWORD *)(*((_QWORD *)this + 23) + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  }
}

uint64_t kaldi::quasar::SeevaBeamSearchBase::Rollback(kaldi::quasar::SeevaBeamSearchBase *this, int a2)
{
  unint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t result;
  _QWORD v8[36];

  v3 = 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)this + 29) - *((_QWORD *)this + 28)) >> 3);
  if (v3 <= a2 || *((_QWORD *)this + 15) <= (unint64_t)a2)
  {
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v8, 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Not enough steps to rollback, need wait for more audio and reinitialization", 75);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v8);
      v3 = 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)this + 29) - *((_QWORD *)this + 28)) >> 3);
    }
    result = 0;
    *((_DWORD *)this + 13) += v3;
  }
  else
  {
    if (a2 >= 1)
    {
      v5 = a2;
      do
      {
        v6 = *((_QWORD *)this + 29) - 72;
        std::allocator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>::destroy[abi:ne180100]((uint64_t)this + 240, v6);
        *((_QWORD *)this + 29) = v6;
        std::deque<std::vector<float>>::pop_back((_QWORD *)this + 10);
        std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::pop_back((_QWORD *)this + 31);
        std::deque<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::pop_back((_QWORD *)this + 37);
        std::deque<std::vector<BOOL>>::pop_back((_QWORD *)this + 16);
        std::deque<std::vector<float>>::pop_back((_QWORD *)this + 22);
        --v5;
      }
      while (v5);
    }
    *((_DWORD *)this + 13) += a2;
    return 1;
  }
  return result;
}

void sub_1AD9F8AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::pop_front(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[4];
  v3 = *(_QWORD *)(a1[1] + ((v2 >> 6) & 0x3FFFFFFFFFFFFF8));
  v4 = *(_QWORD *)(v3 + 8 * (v2 & 0x1FF));
  *(_QWORD *)(v3 + 8 * (v2 & 0x1FF)) = 0;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v2 = a1[4];
  }
  v5 = a1[5] - 1;
  a1[4] = v2 + 1;
  a1[5] = v5;
  return std::deque<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

uint64_t std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::pop_front(int64x2_t *a1)
{
  void **v3;

  v3 = (void **)(*(_QWORD *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0xAAuLL)) + 24 * (a1[2].i64[0] % 0xAAuLL));
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v3);
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1AE13F780);
  return std::deque<kaldi::Vector<float>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

uint64_t std::deque<std::vector<float>>::pop_front(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v2 = a1[4];
  v3 = *(_QWORD *)(a1[1] + 8 * (v2 / 0xAA));
  v4 = *(void **)(v3 + 24 * (v2 % 0xAA));
  if (v4)
  {
    *(_QWORD *)(v3 + 24 * (v2 % 0xAA) + 8) = v4;
    operator delete(v4);
    v2 = a1[4];
  }
  v5 = a1[5] - 1;
  a1[4] = v2 + 1;
  a1[5] = v5;
  return std::deque<kaldi::Vector<float>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

uint64_t std::deque<std::vector<BOOL>>::pop_front(_QWORD *a1)
{
  unint64_t v2;
  void *v3;
  uint64_t v4;

  v2 = a1[4];
  v3 = *(void **)(*(_QWORD *)(a1[1] + 8 * (v2 / 0xAA)) + 24 * (v2 % 0xAA));
  if (v3)
  {
    operator delete(v3);
    v2 = a1[4];
  }
  v4 = a1[5] - 1;
  a1[4] = v2 + 1;
  a1[5] = v4;
  return std::deque<kaldi::Vector<float>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

_QWORD *std::deque<std::vector<float>>::push_back(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::vector<float>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (_QWORD *)(*(_QWORD *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  *v8 = 0;
  v8[1] = 0;
  v8[2] = 0;
  result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v8, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  ++a1[5];
  return result;
}

_QWORD *std::deque<std::vector<BOOL>>::push_back(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v4 = a1[1];
  v5 = a1[2];
  v6 = 170 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    std::deque<std::vector<BOOL>>::__add_back_capacity(a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 == v4)
  {
    v8 = 0;
  }
  else
  {
    v7 = a1[5] + a1[4];
    v8 = (_QWORD *)(*(_QWORD *)(v4 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  }
  result = std::vector<BOOL>::vector(v8, a2);
  ++a1[5];
  return result;
}

_QWORD *std::deque<std::vector<int>>::push_back(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::vector<int>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (_QWORD *)(*(_QWORD *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  *v8 = 0;
  v8[1] = 0;
  v8[2] = 0;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v8, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  ++a1[5];
  return result;
}

uint64_t kaldi::quasar::SeevaBeamSearchBase::GetCurrentAlignment@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v8;
  unint64_t v9;
  __n128 v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;

  v4 = *(_QWORD *)(result + 8);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v5 = *(_QWORD **)(v4 + 568);
  v6 = (_QWORD *)(v4 + 576);
  if (v5 != (_QWORD *)(v4 + 576))
  {
    do
    {
      v8 = *((int *)v5 + 7);
      v9 = a3[1];
      if (v9 >= a3[2])
      {
        v11 = std::vector<kaldi::Matrix<float>>::__emplace_back_slow_path<>(a3);
      }
      else
      {
        v10.n128_f64[0] = kaldi::Matrix<float>::Matrix(a3[1]);
        v11 = v9 + 40;
        a3[1] = v9 + 40;
      }
      a3[1] = v11;
      result = (*(uint64_t (**)(_QWORD, uint64_t, __n128))(**(_QWORD **)(*a2 + 8 * v8) + 24))(*(_QWORD *)(*a2 + 8 * v8), v11 - 40, v10);
      v12 = (_QWORD *)v5[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v5[2];
          v14 = *v13 == (_QWORD)v5;
          v5 = v13;
        }
        while (!v14);
      }
      v5 = v13;
    }
    while (v13 != v6);
  }
  return result;
}

void sub_1AD9F8FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  a10 = (void **)v10;
  std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::vector<float>>::pop_back(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;

  v2 = a1[5] - 1;
  v3 = v2 + a1[4];
  v4 = *(_QWORD *)(a1[1] + 8 * (v3 / 0xAA));
  v5 = v3 % 0xAA;
  v6 = *(void **)(v4 + 24 * v5);
  if (v6)
  {
    *(_QWORD *)(v4 + 24 * v5 + 8) = v6;
    operator delete(v6);
    v2 = a1[5] - 1;
  }
  a1[5] = v2;
  return std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

uint64_t std::deque<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::pop_back(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v2 = a1[5] - 1;
  v3 = v2 + a1[4];
  v4 = *(_QWORD *)(a1[1] + ((v3 >> 6) & 0x3FFFFFFFFFFFFF8));
  v5 = v3 & 0x1FF;
  v6 = *(_QWORD *)(v4 + 8 * v5);
  *(_QWORD *)(v4 + 8 * v5) = 0;
  if (v6)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v2 = a1[5] - 1;
  }
  a1[5] = v2;
  return std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

uint64_t std::deque<std::vector<BOOL>>::pop_back(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  v2 = a1[5] - 1;
  v3 = *(void **)(*(_QWORD *)(a1[1] + 8 * ((v2 + a1[4]) / 0xAAuLL)) + 24 * ((v2 + a1[4]) % 0xAAuLL));
  if (v3)
  {
    operator delete(v3);
    v2 = a1[5] - 1;
  }
  a1[5] = v2;
  return std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

void kaldi::quasar::SeevaBeamSearchBase::UpdateBeamScore(uint64_t a1, int a2, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v9;
  float *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  void *v20;
  void *__p;
  void *v22;
  uint64_t v23;
  std::vector<int> v24;

  v9 = *(int *)(*(_QWORD *)(a1 + 16) + 152);
  if (a2)
  {
    if (a4 != (char *)a3)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a4, *(char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
    v10 = *(float **)a4;
    v11 = *(int *)(a1 + 44);
    v12 = *(_QWORD *)a4 + 4 * v11;
    v22 = 0;
    v23 = 0;
    __p = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(&__p, v10, v12, v11);
    kaldi::quasar::argsortn<float,false>((uint64_t *)&__p, v9, &v24);
  }
  else
  {
    kaldi::quasar::SeevaBeamSearchBase::MaskEos(a1, (_QWORD *)a3);
    kaldi::quasar::SeevaBeamSearchBase::UpdateBeamLength((_QWORD *)a1);
    if (a4 != (char *)a3)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a4, *(char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
    if ((int)v9 >= 1)
    {
      v13 = 0;
      v14 = *(unsigned int *)(a1 + 44);
      v15 = *(float **)a4;
      do
      {
        if ((int)v14 >= 1)
        {
          v16 = *(_QWORD *)(a1 + 120) + *(_QWORD *)(a1 + 112) - 1;
          v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * (v16 / 0xAA)) + 24 * (v16 % 0xAA));
          v18 = v14;
          v19 = v15;
          do
          {
            *v19 = *(float *)(v17 + 4 * v13) + *v19;
            ++v19;
            --v18;
          }
          while (v18);
        }
        ++v13;
        v15 += (int)v14;
      }
      while (v13 != v9);
    }
    kaldi::quasar::SeevaBeamSearchBase::ApplyLengthNorm(a1, (uint64_t)a4, (float **)&__p);
    kaldi::quasar::argsortn<float,false>((uint64_t *)&__p, v9, &v24);
  }
  v20 = *(void **)a5;
  if (*(_QWORD *)a5)
  {
    *(_QWORD *)(a5 + 8) = v20;
    operator delete(v20);
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
  }
  *(std::vector<int> *)a5 = v24;
  memset(&v24, 0, sizeof(v24));
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
}

void sub_1AD9F9300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *kaldi::quasar::argsortn<float,false>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, std::vector<int> *a3@<X8>)
{
  int *result;
  int *end;
  int v8;
  int *begin;
  uint64_t *v10;

  std::vector<int>::vector(a3, (a1[1] - *a1) >> 2);
  result = a3->__begin_;
  end = a3->__end_;
  if (a3->__begin_ != end)
  {
    v8 = 0;
    begin = a3->__begin_;
    do
      *begin++ = v8++;
    while (begin != end);
  }
  v10 = a1;
  if (a2)
    return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<int> kaldi::quasar::argsortn<float,false>(std::vector<float> const&,unsigned long)::{lambda(int,int)#1} &,std::__wrap_iter<int *>,std::__wrap_iter<int *>>(result, &result[a2], end, &v10);
  return result;
}

void sub_1AD9F93A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::SeevaBeamSearchBase::MaskEos(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int64x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64x2_t v10;
  float *v11;
  int64x2_t v12;
  int32x2_t v13;
  float v14;
  float v15;

  v2 = *(unsigned int *)(*(_QWORD *)(result + 16) + 152);
  if ((int)v2 >= 1)
  {
    v3 = 0;
    v4 = *(_QWORD *)(result + 168) + *(_QWORD *)(result + 160) - 1;
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 136) + 8 * (v4 / 0xAA)) + 24 * (v4 % 0xAA));
    v6 = vdupq_n_s64(2uLL);
    do
    {
      if (((*(_QWORD *)(v5 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
      {
        v7 = *(unsigned int *)(result + 44);
        if ((int)v7 >= 1)
        {
          v8 = *(unsigned int *)(result + 36);
          v9 = (v7 + 1) & 0x1FFFFFFFELL;
          v10 = (uint64x2_t)vdupq_n_s64(v7 - 1);
          v11 = (float *)(*a2 + 4 * (int)v7 * (int)v3 + 4);
          v12 = (int64x2_t)xmmword_1AE140A90;
          do
          {
            v13 = vmovn_s64((int64x2_t)vcgeq_u64(v10, (uint64x2_t)v12));
            if ((v13.i8[0] & 1) != 0)
            {
              if (v8)
                v14 = -1000000000.0;
              else
                v14 = 0.0;
              *(v11 - 1) = v14;
            }
            if ((v13.i8[4] & 1) != 0)
            {
              if (v8 == 1)
                v15 = 0.0;
              else
                v15 = -1000000000.0;
              *v11 = v15;
            }
            v12 = vaddq_s64(v12, v6);
            v8 -= 2;
            v11 += 2;
            v9 -= 2;
          }
          while (v9);
        }
      }
      ++v3;
    }
    while (v3 != v2);
  }
  return result;
}

_QWORD *kaldi::quasar::SeevaBeamSearchBase::UpdateBeamLength(_QWORD *this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v1 = *(unsigned int *)(this[2] + 152);
  if ((int)v1 >= 1)
  {
    v2 = 0;
    v3 = this[21] + this[20] - 1;
    v4 = *(_QWORD *)(*(_QWORD *)(this[17] + 8 * (v3 / 0xAA)) + 24 * (v3 % 0xAA));
    do
    {
      if (((*(_QWORD *)(v4 + ((v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v2) & 1) == 0)
      {
        v5 = this[27] + this[26] - 1;
        v6 = *(_QWORD *)(*(_QWORD *)(this[23] + 8 * (v5 / 0xAA)) + 24 * (v5 % 0xAA));
        ++*(_DWORD *)(v6 + 4 * v2);
      }
      ++v2;
    }
    while (v1 != v2);
  }
  return this;
}

void kaldi::quasar::SeevaBeamSearchBase::ApplyLengthNorm(uint64_t a1@<X0>, uint64_t a2@<X1>, float **a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  long double v11;
  uint64_t v12;
  float *v13;
  double v14;
  float v15;
  uint64_t v16;
  float *v17;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(unsigned int *)(v5 + 152);
  v7 = *(float *)(v5 + 8);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  if ((int)v6 >= 1)
  {
    v8 = 0;
    v9 = *(_QWORD *)(a1 + 216) + *(_QWORD *)(a1 + 208) - 1;
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 8 * (v9 / 0xAA)) + 24 * (v9 % 0xAA));
    v11 = (float)-v7;
    v12 = *(unsigned int *)(a1 + 44);
    v13 = *a3;
    do
    {
      v14 = pow(((double)*(int *)(v10 + 4 * v8) + 5.0) / 6.0, v11);
      if ((int)v12 >= 1)
      {
        v15 = v14;
        v16 = v12;
        v17 = v13;
        do
        {
          *v17 = *v17 * v15;
          ++v17;
          --v16;
        }
        while (v16);
      }
      ++v8;
      v13 += (int)v12;
    }
    while (v8 != v6);
  }
}

uint64_t kaldi::quasar::SeevaBeamSearchBase::EndCurrentSearch(kaldi::quasar::SeevaBeamSearchBase *this)
{
  return 0;
}

uint64_t kaldi::quasar::SeevaBeamSearchBase::GetCurrentBreadcrumb(kaldi::quasar::SeevaBeamSearchBase *this)
{
  return (uint64_t)this + 224;
}

uint64_t kaldi::quasar::SeevaBeamSearchBase::DecodedSteps(kaldi::quasar::SeevaBeamSearchBase *this)
{
  return 954437177 * ((*((_QWORD *)this + 29) - *((_QWORD *)this + 28)) >> 3);
}

void kaldi::quasar::SeevaBeamSearchBase::TraceBack(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::vector<int>::size_type v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void *v28;
  void *v29;
  std::vector<int>::pointer begin;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  long double v35;
  std::vector<int>::pointer v36;
  char **v37;
  char *v38;
  char **v39;
  char *v40;
  char *v41;
  int v42;
  _QWORD *v43;
  char *v44;
  BOOL v45;
  char *v46;
  unint64_t v47;
  float **v48;
  float *v49;
  float *v50;
  double v51;
  float v52;
  float v53;
  int v54;
  unint64_t v55;
  std::vector<int> v56;
  std::vector<int> *v57;

  v7 = *a2;
  v6 = a2[1];
  v8 = *(unsigned int *)(*(_QWORD *)(a1 + 16) + 152);
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 0;
  std::vector<std::vector<int>>::vector(&v56, (int)v8);
  std::vector<std::vector<int>>::__vdeallocate((uint64_t *)a3);
  *(std::vector<int> *)a3 = v56;
  memset(&v56, 0, sizeof(v56));
  v57 = &v56;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
  std::vector<std::vector<float>>::vector(&v56, (int)v8);
  v9 = (_QWORD *)(a3 + 24);
  std::vector<std::vector<int>>::__vdeallocate((uint64_t *)(a3 + 24));
  *(std::vector<int> *)(a3 + 24) = v56;
  memset(&v56, 0, sizeof(v56));
  v57 = &v56;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
  if ((int)v8 >= 1)
  {
    v10 = 0;
    v55 = 0x8E38E38E38E38E39 * ((v6 - v7) >> 3);
    v11 = v55 - 1;
    do
    {
      std::vector<int>::vector(&v56, v11);
      v12 = *(_QWORD *)a3 + v10;
      v13 = *(void **)v12;
      if (*(_QWORD *)v12)
      {
        *(_QWORD *)(v12 + 8) = v13;
        operator delete(v13);
        *(_QWORD *)v12 = 0;
        *(_QWORD *)(v12 + 8) = 0;
        *(_QWORD *)(v12 + 16) = 0;
      }
      *(std::vector<int> *)v12 = v56;
      std::vector<float>::vector(&v56, v11);
      v14 = *v9 + v10;
      v15 = *(void **)v14;
      if (*(_QWORD *)v14)
      {
        *(_QWORD *)(v14 + 8) = v15;
        operator delete(v15);
        *(_QWORD *)v14 = 0;
        *(_QWORD *)(v14 + 8) = 0;
        *(_QWORD *)(v14 + 16) = 0;
      }
      *(std::vector<int> *)v14 = v56;
      v10 += 24;
    }
    while (24 * v8 != v10);
    v16 = 0;
    v17 = *(_QWORD *)(*a2 + 72 * v11);
    v18 = *(_QWORD *)a3;
    v19 = *(_QWORD *)(a3 + 24);
    v20 = *a2 + 72 * (v55 - 2) + 24;
    do
    {
      if ((((_DWORD)v55 - 2) & 0x80000000) == 0)
      {
        v21 = (int *)(v17 + 4 * v16);
        v22 = *(_QWORD *)(v18 + 24 * v16);
        v23 = *(_QWORD *)(v19 + 24 * v16);
        v24 = (_QWORD *)v20;
        v25 = (v55 - 2);
        do
        {
          v26 = *v21;
          *(_DWORD *)(v22 + 4 * v25) = *(_DWORD *)(*v24 + 4 * v26);
          *(_DWORD *)(v23 + 4 * v25) = *(_DWORD *)(v24[3] + 4 * v26);
          v21 = (int *)(*(v24 - 3) + 4 * v26);
          v24 -= 9;
        }
        while (v25-- > 0);
      }
      ++v16;
    }
    while (v16 != v8);
  }
  std::vector<int>::vector(&v56, (int)v8);
  v28 = *(void **)(a3 + 72);
  if (v28)
  {
    *(_QWORD *)(a3 + 80) = v28;
    operator delete(v28);
    *(_QWORD *)(a3 + 72) = 0;
    *(_QWORD *)(a3 + 80) = 0;
    *(_QWORD *)(a3 + 88) = 0;
  }
  *(std::vector<int> *)(a3 + 72) = v56;
  std::vector<float>::vector(&v56, (int)v8);
  v29 = *(void **)(a3 + 48);
  if (v29)
  {
    *(_QWORD *)(a3 + 56) = v29;
    operator delete(v29);
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    *(_QWORD *)(a3 + 64) = 0;
  }
  begin = v56.__begin_;
  *(std::vector<int> *)(a3 + 48) = v56;
  *(_DWORD *)(a3 + 96) = v8;
  if ((int)v8 >= 1)
  {
    v31 = 0;
    v32 = *(_QWORD *)a3;
    v33 = *(_QWORD *)(a3 + 72);
    v34 = *(_QWORD *)(a3 + 24);
    v35 = (float)-*(float *)(*(_QWORD *)(a1 + 16) + 8);
    v36 = begin;
    do
    {
      v37 = (char **)(v32 + 24 * v31);
      v38 = *v37;
      v41 = v37[1];
      v39 = v37 + 1;
      v40 = v41;
      if (v38 == v41)
      {
LABEL_25:
        v46 = v38;
      }
      else
      {
        v42 = *(_DWORD *)(a1 + 36);
        v43 = (_QWORD *)(*v9 + 24 * v31 + 8);
        v44 = v40 - 4;
        while (*(_DWORD *)v44 == v42)
        {
          *v39 = v44;
          *v43 -= 4;
          v45 = v44 == v38;
          v44 -= 4;
          if (v45)
            goto LABEL_25;
        }
        v46 = v44 + 4;
      }
      v47 = (unint64_t)(v46 - v38) >> 2;
      *(_DWORD *)(v33 + 4 * v31) = v47;
      v48 = (float **)(v34 + 24 * v31);
      v49 = *v48;
      v50 = v48[1];
      v51 = 0.0;
      while (v49 != v50)
      {
        v52 = *v49++;
        v51 = v51 + v52;
      }
      v53 = pow(((double)(int)v47 + 5.0) / 6.0, v35);
      *(float *)&v54 = v51 * v53;
      v36[v31++] = v54;
    }
    while (v31 != v8);
  }
}

void sub_1AD9F9A68(_Unwind_Exception *a1)
{
  kaldi::quasar::SeevaBeamSearchBase::DecodeOutputData *v1;

  kaldi::quasar::SeevaBeamSearchBase::DecodeOutputData::~DecodeOutputData(v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::SeevaBeamSearchBase::DecodeOutputData::~DecodeOutputData(kaldi::quasar::SeevaBeamSearchBase::DecodeOutputData *this)
{
  void *v2;
  void *v3;
  void **v4;

  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 7) = v3;
    operator delete(v3);
  }
  v4 = (void **)((char *)this + 24);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)this;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void std::deque<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1AD9F9DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::deque<std::vector<float>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1AD9FA0D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::deque<std::vector<BOOL>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1AD9FA3E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::deque<std::vector<int>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1AD9FA6F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::allocator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;

  v3 = *(void **)(a2 + 48);
  if (v3)
  {
    *(_QWORD *)(a2 + 56) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a2 + 24);
  if (v4)
  {
    *(_QWORD *)(a2 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v5;
    operator delete(v5);
  }
}

uint64_t std::vector<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>::__emplace_back_slow_path<int const&>(uint64_t *a1, int *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  kaldi::quasar::SeevaBeamSearchBase::Breadcrumb *v14;
  kaldi::quasar::SeevaBeamSearchBase::Breadcrumb *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1C71C71C71C71C7)
    v9 = 0x38E38E38E38E38ELL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationToken>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (kaldi::quasar::SeevaBeamSearchBase::Breadcrumb *)&v10[72 * v4];
  v15 = v14;
  v16 = &v10[72 * v9];
  kaldi::quasar::SeevaBeamSearchBase::Breadcrumb::Breadcrumb(v14, *a2);
  v15 = (kaldi::quasar::SeevaBeamSearchBase::Breadcrumb *)((char *)v14 + 72);
  std::vector<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>::~__split_buffer(&v13);
  return v11;
}

void sub_1AD9FA8A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

kaldi::quasar::SeevaBeamSearchBase::Breadcrumb *kaldi::quasar::SeevaBeamSearchBase::Breadcrumb::Breadcrumb(kaldi::quasar::SeevaBeamSearchBase::Breadcrumb *this, int a2)
{
  char *v3;
  char *v4;
  std::vector<int>::size_type v5;
  void *v6;
  void *v7;
  void *v8;
  std::vector<int> v10;

  *((_OWORD *)this + 3) = 0u;
  v3 = (char *)this + 48;
  *((_QWORD *)this + 8) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  v4 = (char *)this + 24;
  *(_OWORD *)this = 0u;
  v5 = a2;
  std::vector<int>::vector(&v10, a2);
  v6 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v6;
    operator delete(v6);
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
  }
  *(std::vector<int> *)this = v10;
  std::vector<int>::vector(&v10, v5);
  v7 = *(void **)v4;
  if (*(_QWORD *)v4)
  {
    *((_QWORD *)this + 4) = v7;
    operator delete(v7);
    *(_QWORD *)v4 = 0;
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = 0;
  }
  *((std::vector<int> *)this + 1) = v10;
  std::vector<float>::vector(&v10, v5);
  v8 = *(void **)v3;
  if (*(_QWORD *)v3)
  {
    *((_QWORD *)this + 7) = v8;
    operator delete(v8);
    *(_QWORD *)v3 = 0;
    *((_QWORD *)v3 + 1) = 0;
    *((_QWORD *)v3 + 2) = 0;
  }
  *((std::vector<int> *)this + 2) = v10;
  return this;
}

void sub_1AD9FA9A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;
  void *v7;

  v5 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 56) = v5;
    operator delete(v5);
  }
  v6 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 32) = v6;
    operator delete(v6);
  }
  v7 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>,std::reverse_iterator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb*>,std::reverse_iterator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb*>,std::reverse_iterator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>,std::reverse_iterator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb*>,std::reverse_iterator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb*>,std::reverse_iterator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 72;
      std::allocator<quasar::PhoneticMatchAlignmentSpan>::construct[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan,quasar::PhoneticMatchAlignmentSpan>(a1, (_QWORD *)(v7 - 72), v9);
      v7 = *((_QWORD *)&v16 + 1) - 72;
      *((_QWORD *)&v16 + 1) -= 72;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>,std::reverse_iterator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>,std::reverse_iterator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>,std::reverse_iterator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>,std::reverse_iterator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>::destroy[abi:ne180100](v3, v1);
      v1 += 72;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>::~__split_buffer(void **a1)
{
  std::__split_buffer<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 72;
    std::allocator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>::destroy[abi:ne180100](v4, i - 72);
  }
}

_QWORD *std::vector<kaldi::quasar::ComputeEngineBufferItf *>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1AD9FAC5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::deque<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x200)
    a2 = 1;
  if (v2 < 0x400)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 512;
  }
  return v4 ^ 1u;
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, v4);
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>>(a1, *(_QWORD **)a2, 0, (_QWORD *)(*(_QWORD *)a2 + 8 * (*(_QWORD *)(a2 + 8) >> 6)), *(_QWORD *)(a2 + 8) & 0x3F, *(_QWORD *)(a2 + 8));
  }
  return a1;
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>>(_QWORD *a1, _QWORD *a2, unint64_t a3, _QWORD *a4, int a5, uint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  _BYTE v11[32];

  v6 = a1[1];
  v7 = v6 + a6;
  a1[1] = v6 + a6;
  if (!v6 || ((v7 - 1) ^ (v6 - 1)) >= 0x40)
  {
    if (v7 >= 0x41)
      v8 = (v7 - 1) >> 6;
    else
      v8 = 0;
    *(_QWORD *)(*a1 + 8 * v8) = 0;
  }
  v9 = *a1 + 8 * (v6 >> 6);
  v10 = v6 & 0x3F;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(a2, a3, a4, a5, (uint64_t)&v9, (uint64_t)v11);
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(_QWORD *a1@<X1>, unint64_t a2@<X2>, _QWORD *a3@<X3>, int a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  _BOOL4 v12;

  LODWORD(v6) = a2;
  v7 = *(uint64_t **)a5;
  v8 = *(_DWORD *)(a5 + 8);
  if (a1 != a3 || (_DWORD)a2 != a4)
  {
    do
    {
      v9 = 1 << v8;
      if (((*a1 >> a2) & 1) != 0)
        v10 = *v7 | v9;
      else
        v10 = *v7 & ~v9;
      *v7 = v10;
      v11 = (_DWORD)v6 == 63;
      v12 = v6 == 63;
      v6 = (a2 + 1);
      if (v11)
        v6 = 0;
      if (v8 == 63)
      {
        v8 = 0;
        *(_QWORD *)a5 = ++v7;
      }
      else
      {
        ++v8;
      }
      a1 += v12;
      a2 = v6 | a2 & 0xFFFFFFFF00000000;
      *(_DWORD *)(a5 + 8) = v8;
    }
    while (a1 != a3 || (_DWORD)v6 != a4);
    a1 = a3;
  }
  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = v7;
  *(_DWORD *)(a6 + 24) = v8;
}

void std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = kaldi::Matrix<float>::~Matrix(v4 - 40);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<kaldi::Matrix<float>>::__emplace_back_slow_path<>(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t *v15;

  v2 = *a1;
  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v5 = (uint64_t)(a1 + 2);
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v2) >> 3);
  if (2 * v6 > v4)
    v4 = 2 * v6;
  if (v6 >= 0x333333333333333)
    v7 = 0x666666666666666;
  else
    v7 = v4;
  v15 = a1 + 2;
  if (v7)
    v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v5, v7);
  else
    v8 = 0;
  v11 = v8;
  v12 = &v8[40 * v3];
  v14 = &v8[40 * v7];
  kaldi::Matrix<float>::Matrix((uint64_t)v12);
  v13 = v12 + 40;
  std::vector<kaldi::Matrix<float>>::__swap_out_circular_buffer(a1, &v11);
  v9 = a1[1];
  std::__split_buffer<kaldi::Matrix<float>>::~__split_buffer((uint64_t)&v11);
  return v9;
}

void sub_1AD9FAFA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::Matrix<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<int> kaldi::quasar::argsortn<float,false>(std::vector<float> const&,unsigned long)::{lambda(int,int)#1} &,std::__wrap_iter<int *>,std::__wrap_iter<int *>>(int *a1, int *a2, int *a3, uint64_t **a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int v18;
  int *v19;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<int> kaldi::quasar::argsortn<float,false>(std::vector<float> const&,unsigned long)::{lambda(int,int)#1} &,std::__wrap_iter<int *>>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    if (a2 == a3)
    {
      a3 = a2;
    }
    else
    {
      v13 = a2;
      do
      {
        v14 = *v13;
        v15 = *a1;
        if (*(float *)(**a4 + 4 * v14) > *(float *)(**a4 + 4 * v15))
        {
          *v13 = v15;
          *a1 = v14;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<int> kaldi::quasar::argsortn<float,false>(std::vector<float> const&,unsigned long)::{lambda(int,int)#1} &,std::__wrap_iter<int *>>((uint64_t)a1, a4, v9, a1);
        }
        ++v13;
      }
      while (v13 != a3);
    }
    if (v8 >= 5)
    {
      v16 = (unint64_t)v8 >> 2;
      v17 = a2 - 1;
      do
      {
        v18 = *a1;
        v19 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<int> kaldi::quasar::argsortn<float,false>(std::vector<float> const&,unsigned long)::{lambda(int,int)#1} &,std::__wrap_iter<int *>>(a1, a4, v16);
        if (v17 == v19)
        {
          *v19 = v18;
        }
        else
        {
          *v19 = *v17;
          *v17 = v18;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<int> kaldi::quasar::argsortn<float,false>(std::vector<float> const&,unsigned long)::{lambda(int,int)#1} &,std::__wrap_iter<int *>>((uint64_t)a1, (uint64_t)(v19 + 1), a4, v19 + 1 - a1);
        }
        --v17;
      }
      while (v16-- > 2);
    }
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<int> kaldi::quasar::argsortn<float,false>(std::vector<float> const&,unsigned long)::{lambda(int,int)#1} &,std::__wrap_iter<int *>>(uint64_t result, uint64_t **a2, uint64_t a3, int *a4)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;

  if (a3 >= 2)
  {
    v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= ((uint64_t)a4 - result) >> 2)
    {
      v5 = ((uint64_t)a4 - result) >> 1;
      v6 = v5 | 1;
      v7 = (int *)(result + 4 * (v5 | 1));
      v8 = v5 + 2;
      v9 = **a2;
      if (v8 < a3 && *(float *)(v9 + 4 * *v7) > *(float *)(v9 + 4 * v7[1]))
      {
        ++v7;
        v6 = v8;
      }
      v10 = *v7;
      v11 = *a4;
      v12 = *(float *)(v9 + 4 * v11);
      if (*(float *)(v9 + 4 * v10) <= v12)
      {
        do
        {
          *a4 = v10;
          a4 = v7;
          if (v4 < v6)
            break;
          v13 = 2 * v6;
          v6 = (2 * v6) | 1;
          v7 = (int *)(result + 4 * v6);
          v14 = v13 + 2;
          if (v14 < a3 && *(float *)(v9 + 4 * *v7) > *(float *)(v9 + 4 * v7[1]))
          {
            ++v7;
            v6 = v14;
          }
          v10 = *v7;
        }
        while (*(float *)(v9 + 4 * v10) <= v12);
        *a4 = v11;
      }
    }
  }
  return result;
}

int *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<int> kaldi::quasar::argsortn<float,false>(std::vector<float> const&,unsigned long)::{lambda(int,int)#1} &,std::__wrap_iter<int *>>(int *result, _QWORD **a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  v6 = *a2;
  do
  {
    v7 = result;
    result += v3 + 1;
    v8 = 2 * v3;
    v3 = (2 * v3) | 1;
    v9 = v8 + 2;
    if (v9 < a3 && *(float *)(*v6 + 4 * *result) > *(float *)(*v6 + 4 * result[1]))
    {
      ++result;
      v3 = v9;
    }
    *v7 = *result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<int> kaldi::quasar::argsortn<float,false>(std::vector<float> const&,unsigned long)::{lambda(int,int)#1} &,std::__wrap_iter<int *>>(uint64_t result, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  unint64_t v4;
  int *v5;
  uint64_t v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  _DWORD *v12;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = (int *)(result + 4 * v4);
    v6 = *v5;
    v9 = *(int *)(a2 - 4);
    v7 = (_DWORD *)(a2 - 4);
    v8 = v9;
    v10 = **a3;
    v11 = *(float *)(v10 + 4 * v9);
    if (*(float *)(v10 + 4 * v6) > v11)
    {
      do
      {
        v12 = v5;
        *v7 = v6;
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
        v5 = (int *)(result + 4 * v4);
        v6 = *v5;
        v7 = v12;
      }
      while (*(float *)(v10 + 4 * v6) > v11);
      *v12 = v8;
    }
  }
  return result;
}

double quasar::PronGuessStats::PronGuessStats(quasar::PronGuessStats *this)
{
  double result;

  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 7) = 0;
  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(_OWORD *)((char *)this + 25) = 0u;
  *((_QWORD *)this + 6) = (char *)this + 56;
  return result;
}

void quasar::PronGuessStats::addRecord(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  const void *v12;
  uint64_t v13;
  _QWORD *v14;
  void *__p[2];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v4 = a4;
  if ((a4 & 0x80000000) != 0)
  {
    if (quasar::gLogLevel >= 5)
    {
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Detected latency overflow, change to int_max.", 45);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
    v4 = 0x7FFFFFFFLL;
  }
  v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 48, (const void **)a2);
  if (a1 + 56 == v8)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a2;
      *(_QWORD *)&v16 = *(_QWORD *)(a2 + 16);
    }
    *((_QWORD *)&v16 + 1) = a3 | (unint64_t)(v4 << 32);
    std::__tree<std::__value_type<std::string,quasar::PronGuessStats::Record>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PronGuessStats::Record>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::PronGuessStats::Record>>>::__emplace_unique_key_args<std::string,std::pair<std::string,quasar::PronGuessStats::Record>>((uint64_t **)(a1 + 48), (const void **)__p, (uint64_t)__p);
    if (SBYTE7(v16) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v9 = v8;
    if (quasar::gLogLevel >= 5)
    {
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"dup stat: token=", 16);
      v11 = *(char *)(a2 + 23);
      if (v11 >= 0)
        v12 = (const void *)a2;
      else
        v12 = *(const void **)a2;
      if (v11 >= 0)
        v13 = *(unsigned __int8 *)(a2 + 23);
      else
        v13 = *(_QWORD *)(a2 + 8);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v12, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", source=", 9);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
    if (*(_DWORD *)(v9 + 60) < (int)v4)
    {
      *(_DWORD *)(v9 + 56) = a3;
      *(_DWORD *)(v9 + 60) = v4;
    }
  }
}

void sub_1AD9FB4B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__p);
  _Unwind_Resume(a1);
}

void quasar::G2P::~G2P(quasar::G2P *this)
{
  *(_QWORD *)this = off_1E5D3B690;
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)this + 112);
  std::locale::~locale((std::locale *)this + 13);
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  std::unique_ptr<quasar::PronCombinator>::reset[abi:ne180100]((uint64_t *)this + 5, 0);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

void quasar::G2P::getProns(_QWORD *a1@<X0>, __int128 ***a2@<X2>, _DWORD *a3@<X3>, quasar::LmeData **a4@<X4>, _BYTE *a5@<X5>, uint64_t a6@<X6>, uint64_t *a7@<X8>)
{
  __int128 **v8;
  __int128 *v14;
  __int128 *v15;
  __int128 v16;
  quasar::LmeData *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  int HumanReadableProns;
  unint64_t *v22;
  unint64_t v23;
  void **v24;
  int v25;
  void **v26;
  int *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int *v36;
  int *v37;
  uint64_t **v38;
  uint64_t *v39;
  uint64_t *v40;
  unint64_t v41;
  _DWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  _BYTE *v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _BYTE *v52;
  BOOL v53;
  uint64_t *v54;
  __int128 **v55;
  __int128 **v56;
  uint64_t v57;
  quasar::LmeData *v58[2];
  void *__p;
  _BYTE *v60;
  uint64_t v61;
  void **v62;
  void **v63;
  unint64_t v64;
  __int128 v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  unint64_t v69;
  _BYTE v70[32];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  void **v86[2];

  v8 = *a2;
  v55 = a2[1];
  if (*a2 == v55)
  {
    if (quasar::gLogLevel >= 4)
    {
      v84 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v72 = 0u;
      v73 = 0u;
      v71 = 0u;
      memset(v70, 0, sizeof(v70));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"Empty tokenStrings received", 27);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v70);
    }
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
  }
  else
  {
    v54 = a7;
    v67 = 0;
    v68 = 0;
    v69 = 0;
    do
    {
      v65 = 0uLL;
      v66 = 0;
      v62 = 0;
      v63 = 0;
      v64 = 0;
      v15 = *v8;
      v14 = v8[1];
      v56 = v8;
      if (*v8 == v14)
      {
        if (quasar::gLogLevel >= 4)
        {
          v84 = 0u;
          v85 = 0u;
          v82 = 0u;
          v83 = 0u;
          v80 = 0u;
          v81 = 0u;
          v78 = 0u;
          v79 = 0u;
          v76 = 0u;
          v77 = 0u;
          v74 = 0u;
          v75 = 0u;
          v72 = 0u;
          v73 = 0u;
          v71 = 0u;
          memset(v70, 0, sizeof(v70));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v70);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"Empty tokenStrings[0] received", 30);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v70);
        }
      }
      else
      {
        do
        {
          if (*((char *)v15 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v70, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
          }
          else
          {
            v16 = *v15;
            *(_QWORD *)&v70[16] = *((_QWORD *)v15 + 2);
            *(_OWORD *)v70 = v16;
          }
          *(_DWORD *)&v70[24] = *((_DWORD *)v15 + 6);
          __p = 0;
          v60 = 0;
          v61 = 0;
          v17 = a4[1];
          v58[0] = *a4;
          v58[1] = v17;
          if (v17)
          {
            v18 = (unint64_t *)((char *)v17 + 8);
            do
              v19 = __ldxr(v18);
            while (__stxr(v19 + 1, v18));
          }
          v20 = a1;
          HumanReadableProns = quasar::G2P::getHumanReadableProns(a1, (uint64_t)v70, (uint64_t)&__p, a3, v58, a5, a6);
          if (v17)
          {
            v22 = (unint64_t *)((char *)v17 + 8);
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              (*(void (**)(quasar::LmeData *))(*(_QWORD *)v17 + 16))(v17);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v17);
            }
          }
          if (HumanReadableProns == -1)
          {
            v25 = 5;
          }
          else
          {
            v24 = v63;
            if (__p == v60)
            {
              v26 = v62;
              while (v24 != v26)
              {
                v24 -= 3;
                v86[0] = v24;
                std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](v86);
              }
              v25 = 4;
            }
            else if ((unint64_t)v63 >= v64)
            {
              v26 = (void **)std::vector<std::vector<quasar::PronChoice>>::__push_back_slow_path<std::vector<quasar::PronChoice> const&>((uint64_t *)&v62, (uint64_t *)&__p);
              v25 = 0;
            }
            else
            {
              *v63 = 0;
              v24[1] = 0;
              v24[2] = 0;
              std::vector<quasar::PronChoice>::__init_with_size[abi:ne180100]<quasar::PronChoice*,quasar::PronChoice*>(v24, (uint64_t)__p, (uint64_t)v60, 0xCCCCCCCCCCCCCCCDLL * ((v60 - (_BYTE *)__p) >> 3));
              v25 = 0;
              v26 = v24 + 3;
            }
            v63 = v26;
          }
          a1 = v20;
          v86[0] = &__p;
          std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](v86);
          if ((v70[23] & 0x80000000) != 0)
            operator delete(*(void **)v70);
          if (v25 != 5 && v25)
            break;
          v15 += 2;
        }
        while (v15 != v14);
        v27 = (int *)v20[5];
        std::string::basic_string[abi:ne180100]<0>(&__p, ".");
        quasar::PronCombinator::operator()(v27, &v62, (uint64_t *)v70);
        std::vector<quasar::PronChoice>::__vdeallocate((uint64_t *)&v65);
        v65 = *(_OWORD *)v70;
        v66 = *(_QWORD *)&v70[16];
        memset(v70, 0, 24);
        v86[0] = (void **)v70;
        std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](v86);
        if (SHIBYTE(v61) < 0)
          operator delete(__p);
        v28 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v65 + 1) - v65) >> 3));
        if (*((_QWORD *)&v65 + 1) == (_QWORD)v65)
          v29 = 0;
        else
          v29 = v28;
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *,false>(v65, *((uint64_t *)&v65 + 1), (uint64_t)&__p, v29, 1);
        v30 = v68;
        if ((unint64_t)v68 >= v69)
        {
          v31 = std::vector<std::vector<quasar::PronChoice>>::__push_back_slow_path<std::vector<quasar::PronChoice> const&>((uint64_t *)&v67, (uint64_t *)&v65);
        }
        else
        {
          *v68 = 0;
          v30[1] = 0;
          v30[2] = 0;
          std::vector<quasar::PronChoice>::__init_with_size[abi:ne180100]<quasar::PronChoice*,quasar::PronChoice*>(v30, v65, *((uint64_t *)&v65 + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v65 + 1) - v65) >> 3));
          v31 = (uint64_t)(v30 + 3);
        }
        v68 = (_QWORD *)v31;
      }
      *(_QWORD *)v70 = &v62;
      std::vector<std::vector<quasar::PronChoice>>::__destroy_vector::operator()[abi:ne180100]((void ***)v70);
      *(_QWORD *)v70 = &v65;
      std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)v70);
      v8 = v56 + 4;
    }
    while (v56 + 4 != v55);
    *(_OWORD *)&v70[8] = 0uLL;
    *(_QWORD *)v70 = &v70[8];
    v33 = (uint64_t)v67;
    v32 = v68;
    if (v68 == v67)
    {
      *v54 = 0;
      v54[1] = 0;
      v54[2] = 0;
    }
    else
    {
      v57 = (uint64_t)a1;
      v34 = 0;
      do
      {
        v35 = v33 + 24 * v34;
        v36 = *(int **)v35;
        v37 = *(int **)(v35 + 8);
        if (*(int **)v35 != v37)
        {
          do
          {
            *(_QWORD *)&v65 = v36;
            v38 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)v70, v36, (uint64_t)&std::piecewise_construct, (_DWORD **)&v65);
            std::vector<std::vector<quasar::PronChoice>>::resize((uint64_t *)v38 + 5, 0xAAAAAAAAAAAAAAABLL * (v68 - v67));
            *(_QWORD *)&v65 = v36;
            v39 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)v70, v36, (uint64_t)&std::piecewise_construct, (_DWORD **)&v65)[5];
            v40 = &v39[3 * v34];
            v42 = (_DWORD *)v40[1];
            v41 = v40[2];
            v43 = v40 + 1;
            if ((unint64_t)v42 >= v41)
            {
              v44 = std::vector<quasar::PronChoice>::__push_back_slow_path<quasar::PronChoice const&>(&v39[3 * v34], (uint64_t)v36);
            }
            else
            {
              quasar::PronChoice::PronChoice(v42, (uint64_t)v36);
              v44 = (uint64_t)(v42 + 10);
              *v43 = (uint64_t)(v42 + 10);
            }
            *v43 = v44;
            v36 += 10;
          }
          while (v36 != v37);
          v33 = (uint64_t)v67;
          v32 = v68;
        }
        ++v34;
      }
      while (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v32 - v33) >> 3) > v34);
      v45 = *(_BYTE **)v70;
      v54[1] = 0;
      v54[2] = 0;
      *v54 = 0;
      if (v45 != &v70[8])
      {
        do
        {
          quasar::G2P::selectTopProns(v57, (uint64_t)(v45 + 40), (uint64_t *)&v65);
          v46 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v65 + 1) - v65) >> 3);
          v47 = *(int *)(v57 + 100);
          if (v46 <= v47)
          {
            v49 = 126 - 2 * __clz(v46);
            if (*((_QWORD *)&v65 + 1) == (_QWORD)v65)
              v50 = 0;
            else
              v50 = v49;
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *,false>(v65, *((uint64_t *)&v65 + 1), (uint64_t)&__p, v50, 1);
          }
          else
          {
            if ((_DWORD)v47)
            {
              std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<quasar::PronChoice *>,std::__wrap_iter<quasar::PronChoice *>>(v65, v65 + 40 * (int)v47, *((uint64_t *)&v65 + 1), (uint64_t)&__p);
              v48 = *(_DWORD *)(v57 + 100);
            }
            else
            {
              v48 = 0;
            }
            std::vector<quasar::PronChoice>::resize((uint64_t *)&v65, v48);
          }
          std::vector<quasar::PronChoice>::__insert_with_size[abi:ne180100]<std::__wrap_iter<quasar::PronChoice*>,std::__wrap_iter<quasar::PronChoice*>>(v54, v54[1], v65, *((uint64_t *)&v65 + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v65 + 1) - v65) >> 3));
          v62 = (void **)&v65;
          std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](&v62);
          v51 = (_QWORD *)*((_QWORD *)v45 + 1);
          if (v51)
          {
            do
            {
              v52 = v51;
              v51 = (_QWORD *)*v51;
            }
            while (v51);
          }
          else
          {
            do
            {
              v52 = (_BYTE *)*((_QWORD *)v45 + 2);
              v53 = *(_QWORD *)v52 == (_QWORD)v45;
              v45 = v52;
            }
            while (!v53);
          }
          v45 = v52;
        }
        while (v52 != &v70[8]);
      }
    }
    std::__tree<std::__value_type<quasar::PronType,std::vector<std::vector<quasar::PronChoice>>>,std::__map_value_compare<quasar::PronType,std::__value_type<quasar::PronType,std::vector<std::vector<quasar::PronChoice>>>,std::less<quasar::PronType>,true>,std::allocator<std::__value_type<quasar::PronType,std::vector<std::vector<quasar::PronChoice>>>>>::destroy((uint64_t)v70, *(char **)&v70[8]);
    *(_QWORD *)v70 = &v67;
    std::vector<std::vector<quasar::PronChoice>>::__destroy_vector::operator()[abi:ne180100]((void ***)v70);
  }
}

void sub_1AD9FBBA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a30);
  _Unwind_Resume(a1);
}

uint64_t quasar::G2P::getHumanReadableProns(_QWORD *a1, uint64_t a2, uint64_t a3, _DWORD *a4, quasar::LmeData **a5, _BYTE *a6, uint64_t a7)
{
  quasar::LmeData *v14;
  unint64_t *v15;
  unint64_t v16;
  clockid_t v17;
  int v18;
  unint64_t *v19;
  unint64_t v20;
  int *v21;
  int *v22;
  char *v23;
  void *v24;
  clockid_t v25;
  uint64_t v26;
  uint64_t v27;
  double Seconds;
  double v29;
  clockid_t v30;
  int updated;
  clockid_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  _QWORD *v36;
  std::string *v37;
  std::string::size_type size;
  quasar::LmeData *v40;
  void *v41;
  void *v42[2];
  char v43;
  std::string v44;
  void *v45[2];
  char v46;
  std::string v47;
  void *v48[2];
  void *__p[2];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  double v65;
  char *v66;
  char v67;
  uint64_t v68;
  quasar::LmeData *v69[2];
  __int16 v70;
  std::string v71;
  int v72;
  void **v73[3];

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v71, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v71 = *(std::string *)a2;
  v72 = *(_DWORD *)(a2 + 24);
  v70 = 0;
  v14 = a5[1];
  v69[0] = *a5;
  v69[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)((char *)v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v18 = quasar::G2P::lookupHumanReadableProns(a1, (uint64_t)&v71, (uint64_t *)a3, (uint64_t)a4, v69, (_BYTE *)&v70 + 1, (BOOL *)&v70, a7);
  if (v14)
  {
    v19 = (unint64_t *)((char *)v14 + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      (*(void (**)(quasar::LmeData *))(*(_QWORD *)v14 + 16))(v14);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v14);
    }
  }
  if (v18 == -1)
  {
    v35 = 0xFFFFFFFFLL;
    goto LABEL_40;
  }
  if (HIBYTE(v70))
  {
    v67 = 1;
    kaldi::Timer::Reset((kaldi::Timer *)&v65, v17);
    v68 = 0;
    (*(void (**)(void **__return_ptr, _QWORD *, std::string *, uint64_t))(*a1 + 16))(v48, a1, &v71, a7);
    std::vector<quasar::PronChoice>::__vdeallocate((uint64_t *)a3);
    *(_OWORD *)a3 = *(_OWORD *)v48;
    *(void **)(a3 + 16) = __p[0];
    v48[1] = 0;
    __p[0] = 0;
    v48[0] = 0;
    v73[0] = v48;
    std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](v73);
    v48[0] = 0;
    v48[1] = 0;
    __p[0] = 0;
    v21 = *(int **)a3;
    v22 = *(int **)(a3 + 8);
    while (v21 != v22)
    {
      if (quasar::pronTypeMatchesPronRequest(*v21, a7))
      {
        v23 = (char *)v48[1];
        if (v48[1] >= __p[0])
        {
          v24 = (void *)std::vector<quasar::PronChoice>::__push_back_slow_path<quasar::PronChoice const&>((uint64_t *)v48, (uint64_t)v21);
        }
        else
        {
          quasar::PronChoice::PronChoice((_DWORD *)v48[1], (uint64_t)v21);
          v24 = v23 + 40;
        }
        v48[1] = v24;
      }
      v21 += 10;
    }
    if (v48 != (void **)a3)
      std::vector<quasar::PronChoice>::__assign_with_size[abi:ne180100]<quasar::PronChoice*,quasar::PronChoice*>(a3, (uint64_t)v48[0], (uint64_t)v48[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)v48[1] - (char *)v48[0]) >> 3));
    v73[0] = v48;
    std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](v73);
    *a6 = 1;
    v26 = *(_QWORD *)a3;
    v27 = *(_QWORD *)(a3 + 8);
    if (*(_QWORD *)a3 != v27)
    {
      Seconds = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v25);
      v29 = v65;
      kaldi::Timer::Reset((kaldi::Timer *)&v65, v30);
      quasar::PronGuessStats::addRecord((uint64_t)a4, (uint64_t)&v71, 3u, (int)((Seconds - v29) * 1000000.0));
      quasar::fromPronChoices((uint64_t *)a3, (uint64_t)v48);
      updated = quasar::G2P::updateCache((uint64_t)a1, (uint64_t)&v71, (uint64_t)v48);
      v73[0] = v48;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v73);
      v34 = (int)((kaldi::Timer::GetSeconds((kaldi::Timer *)5, v32) - v65) * 1000000.0);
LABEL_37:
      quasar::G2P::updateCacheSetStats(v33, (uint64_t)&v71, v34, updated, v26 == v27, a4);
      goto LABEL_38;
    }
    if (quasar::gLogLevel >= 4)
    {
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v50 = 0u;
      *(_OWORD *)v48 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v48);
      v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"Failed to generated pronunciations for word=", 44);
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v37 = &v71;
      else
        v37 = (std::string *)v71.__r_.__value_.__r.__words[0];
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
      else
        size = v71.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, size);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v48);
    }
    ++a4[5];
    if (*(_BYTE *)(a1[1] + 8))
    {
      v48[0] = 0;
      v48[1] = 0;
      __p[0] = 0;
      updated = quasar::G2P::updateCache((uint64_t)a1, (uint64_t)&v71, (uint64_t)v48);
      v73[0] = v48;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v73);
      v34 = 0;
      goto LABEL_37;
    }
  }
LABEL_38:
  if (!(_BYTE)v70)
  {
    v40 = *a5;
    if (v40)
    {
      if ((_DWORD)a7 == 2)
      {
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v47, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
        else
          v47 = v71;
        std::string::basic_string[abi:ne180100]<0>(v45, "");
        quasar::LmeDataFactoryBase::PronSet::PronSet(&v65, a3);
        quasar::LmeDataFactoryBase::Word::Word(v48, &v47, v45, 1, &v65);
        quasar::LmeData::addWordToEmbeddingCache(v40, (std::string *)v48, 3);
        std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v51 + 8, (char *)v52);
        if (SHIBYTE(v50) < 0)
          operator delete(__p[1]);
        if (SHIBYTE(__p[0]) < 0)
          operator delete(v48[0]);
        std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v65, v66);
        if (v46 < 0)
          operator delete(v45[0]);
        if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_39;
        v41 = (void *)v47.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v44, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
        else
          v44 = v71;
        std::string::basic_string[abi:ne180100]<0>(v42, "");
        quasar::LmeDataFactoryBase::PronSet::PronSet(&v65, a3);
        quasar::LmeDataFactoryBase::Word::Word(v48, &v44, v42, 1, &v65);
        quasar::LmeData::addWordToPronCache(v40, (std::string *)v48, 3);
        std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v51 + 8, (char *)v52);
        if (SHIBYTE(v50) < 0)
          operator delete(__p[1]);
        if (SHIBYTE(__p[0]) < 0)
          operator delete(v48[0]);
        std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v65, v66);
        if (v43 < 0)
          operator delete(v42[0]);
        if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_39;
        v41 = (void *)v44.__r_.__value_.__r.__words[0];
      }
      operator delete(v41);
    }
  }
LABEL_39:
  v35 = 0;
LABEL_40:
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
  return v35;
}

void sub_1AD9FC22C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,char a35,uint64_t a36)
{
  uint64_t v36;

  if (*(char *)(v36 - 137) < 0)
    operator delete(*(void **)(v36 - 160));
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<quasar::PronChoice>>::resize(uint64_t *a1, unint64_t a2)
{
  void **v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;

  v3 = (void **)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<quasar::PronChoice>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      v8 = v3;
      std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

uint64_t quasar::G2P::selectTopProns@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _DWORD *v4;
  _DWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v14 = result;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  do
  {
    if (0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v5 - *a3) >> 3) >= *(int *)(v14 + 100))
      break;
    v8 = *(_QWORD **)a2;
    v7 = *(_QWORD **)(a2 + 8);
    if (*(_QWORD **)a2 == v7)
    {
      v9 = 0;
      v13 = *(_QWORD **)a2;
    }
    else
    {
      v9 = 0;
      do
      {
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8[1] - *v8) >> 3) <= v6)
        {
          ++v9;
        }
        else
        {
          v10 = *a3;
          if ((_DWORD *)*a3 != v5)
          {
            v11 = *v8 + 40 * v6;
            while (1)
            {
              result = quasar::PronChoice::operator==(v10, v11);
              if ((result & 1) != 0)
                break;
              v10 += 40;
              if ((_DWORD *)v10 == v5)
                goto LABEL_13;
            }
            v5 = (_DWORD *)v10;
LABEL_13:
            v4 = (_DWORD *)a3[1];
          }
          if (v5 == v4)
          {
            v12 = *v8 + 40 * v6;
            if ((unint64_t)v4 >= a3[2])
            {
              result = std::vector<quasar::PronChoice>::__push_back_slow_path<quasar::PronChoice const&>(a3, v12);
              v4 = (_DWORD *)result;
            }
            else
            {
              result = (uint64_t)quasar::PronChoice::PronChoice(v4, v12);
              v4 += 10;
              a3[1] = (uint64_t)v4;
            }
            a3[1] = (uint64_t)v4;
          }
          v5 = v4;
        }
        v8 += 3;
      }
      while (v8 != v7);
      v8 = *(_QWORD **)a2;
      v13 = *(_QWORD **)(a2 + 8);
    }
    ++v6;
  }
  while (0xAAAAAAAAAAAAAAABLL * (v13 - v8) != v9);
  return result;
}

void sub_1AD9FC570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::vector<quasar::PronChoice>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<quasar::PronChoice>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 40 * a2;
    while (v3 != v7)
    {
      if (*(char *)(v3 - 9) < 0)
        operator delete(*(void **)(v3 - 32));
      v3 -= 40;
    }
    a1[1] = v7;
  }
}

void quasar::G2P::convertPhonemePronsToAllProns(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t *v6;
  int v7;
  int v8;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    v5 = 0;
    v6 = (unint64_t *)(a2 + 2);
    do
    {
      v7 = 0;
      v8 = 1;
      if (v5 >= *v6)
      {
        v5 = std::vector<quasar::PronChoice>::__emplace_back_slow_path<quasar::PronType,std::string const&,int>(a2, &v8, v2, &v7);
      }
      else
      {
        std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType,std::string const&,int>((uint64_t)v6, v5, &v8, v2, &v7);
        v5 += 40;
        a2[1] = v5;
      }
      a2[1] = v5;
      v2 += 24;
    }
    while (v2 != v3);
  }
}

void sub_1AD9FC6D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::G2P::lookupHumanReadableProns(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, quasar::LmeData **a5, _BYTE *a6, BOOL *a7, int a8)
{
  clockid_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  std::string *v21;
  quasar::LmeData *v22;
  void *v23;
  clockid_t v24;
  _QWORD *v25;
  int *v26;
  int *v27;
  unint64_t v28;
  int *v29;
  int *v30;
  BOOL v31;
  double Seconds;
  uint64_t v33;
  int v34;
  clockid_t v35;
  int v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  void **v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  double v47;
  char v48;
  clockid_t v49;
  clockid_t v50;
  double v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v61;
  char v62;
  void **v63[2];
  void *v64[2];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  int v83;
  void *v84[2];
  char v85;
  std::string v86;
  void **v87;
  void **v88;
  uint64_t v89;
  void *v90[2];
  char v91;
  std::string v92;
  double v93[3];
  char v94;
  uint64_t v95;

  v94 = 1;
  kaldi::Timer::Reset((kaldi::Timer *)v93, (clockid_t)a2);
  v95 = 0;
  *a7 = 0;
  *a6 = 0;
  v17 = *(unsigned __int8 *)(a2 + 23);
  v18 = v17;
  v19 = *(_QWORD *)(a2 + 8);
  if ((v17 & 0x80u) == 0)
    v20 = *(unsigned __int8 *)(a2 + 23);
  else
    v20 = *(_QWORD *)(a2 + 8);
  if (!v20)
    return 0xFFFFFFFFLL;
  v21 = (std::string *)a1[3];
  if (v21)
  {
    quasar::LmeDataFactory::applyG2PRewrite(v21, a2);
    v17 = *(unsigned __int8 *)(a2 + 23);
    v19 = *(_QWORD *)(a2 + 8);
    v18 = *(_BYTE *)(a2 + 23);
  }
  if (v18 < 0)
    v17 = v19;
  if (!v17)
    return 0xFFFFFFFFLL;
  if (!*a5)
    goto LABEL_49;
  quasar::LmeDataFactoryBase::PronSet::PronSet(&v81);
  v22 = *a5;
  if (a8 == 2)
  {
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v92, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v92 = *(std::string *)a2;
    std::string::basic_string[abi:ne180100]<0>(v90, "");
    v87 = 0;
    v88 = 0;
    v89 = 0;
    quasar::LmeDataFactoryBase::Word::Word(v64, &v92, v90, 0, &v87);
    *a7 = quasar::LmeData::lookupWordEmbeddingCache(v22, (const quasar::LmeDataFactoryBase::Word *)v64, 3, (char **)&v81);
    std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v67 + 8, (char *)v68);
    if (SHIBYTE(v66) < 0)
      operator delete(*((void **)&v65 + 1));
    if (SBYTE7(v65) < 0)
      operator delete(v64[0]);
    v63[0] = (void **)&v87;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v63);
    if (v91 < 0)
      operator delete(v90[0]);
    if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_35;
    v23 = (void *)v92.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v86, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v86 = *(std::string *)a2;
    std::string::basic_string[abi:ne180100]<0>(v84, "");
    v87 = 0;
    v88 = 0;
    v89 = 0;
    quasar::LmeDataFactoryBase::Word::Word(v64, &v86, v84, 0, &v87);
    *a7 = quasar::LmeData::lookupWordPronCache(v22, (const quasar::LmeDataFactoryBase::Word *)v64, 3, (char **)&v81);
    std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v67 + 8, (char *)v68);
    if (SHIBYTE(v66) < 0)
      operator delete(*((void **)&v65 + 1));
    if (SBYTE7(v65) < 0)
      operator delete(v64[0]);
    v63[0] = (void **)&v87;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v63);
    if (v85 < 0)
      operator delete(v84[0]);
    if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_35;
    v23 = (void *)v86.__r_.__value_.__r.__words[0];
  }
  operator delete(v23);
LABEL_35:
  if (*a7)
  {
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v81);
    v26 = (int *)(v25 + 1);
    v27 = (int *)*v25;
    if ((_QWORD *)*v25 != v25 + 1)
    {
      v28 = a3[1];
      do
      {
        if (v28 >= a3[2])
        {
          v28 = std::vector<quasar::PronChoice>::__emplace_back_slow_path<quasar::PronType const&,std::string const&,float const&>(a3, v27 + 8, (uint64_t)(v27 + 10), v27 + 16);
        }
        else
        {
          std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType const&,std::string const&,float const&>((uint64_t)(a3 + 2), v28, v27 + 8, (uint64_t)(v27 + 10), v27 + 16);
          v28 += 40;
          a3[1] = v28;
        }
        a3[1] = v28;
        v29 = (int *)*((_QWORD *)v27 + 1);
        if (v29)
        {
          do
          {
            v30 = v29;
            v29 = *(int **)v29;
          }
          while (v29);
        }
        else
        {
          do
          {
            v30 = (int *)*((_QWORD *)v27 + 2);
            v31 = *(_QWORD *)v30 == (_QWORD)v27;
            v27 = v30;
          }
          while (!v31);
        }
        v27 = v30;
      }
      while (v30 != v26);
    }
    Seconds = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v24);
    quasar::PronGuessStats::addRecord(a4, a2, 2u, (int)((Seconds - v93[0]) * 1000000.0));
  }
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v81, *((char **)&v81 + 1));
LABEL_49:
  if (!*a7)
  {
    kaldi::Timer::Reset((kaldi::Timer *)v93, v16);
    v81 = 0u;
    v82 = 0u;
    v83 = 1065353216;
    v33 = a1[3];
    if (v33)
    {
      v34 = quasar::LmeDataFactory::lookUpProns(v33, a2, (uint64_t)&v81);
      v36 = *((_QWORD *)&v82 + 1) ? v34 : 0;
      if (v36 == 1)
      {
        if (quasar::gLogLevel >= 5)
        {
          v79 = 0u;
          v80 = 0u;
          v77 = 0u;
          v78 = 0u;
          v75 = 0u;
          v76 = 0u;
          v73 = 0u;
          v74 = 0u;
          v71 = 0u;
          v72 = 0u;
          v69 = 0u;
          v70 = 0u;
          v67 = 0u;
          v68 = 0u;
          v65 = 0u;
          v66 = 0u;
          *(_OWORD *)v64 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v64);
          v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"Token=", 6);
          v38 = *(char *)(a2 + 23);
          if (v38 >= 0)
            v39 = a2;
          else
            v39 = *(_QWORD *)a2;
          if (v38 >= 0)
            v40 = *(unsigned __int8 *)(a2 + 23);
          else
            v40 = *(_QWORD *)(a2 + 8);
          v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, v39, v40);
          v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" found in Lexicon, prons=", 25);
          v63[0] = (void **)", ";
          v63[1] = (void **)2;
          quasar::join<std::unordered_set<std::string>>((uint64_t)&v81, (uint64_t *)v63);
          if (v89 >= 0)
            v43 = (void **)&v87;
          else
            v43 = v87;
          if (v89 >= 0)
            v44 = HIBYTE(v89);
          else
            v44 = (uint64_t)v88;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v43, v44);
          if (SHIBYTE(v89) < 0)
            operator delete(v87);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v64);
        }
        v45 = (_QWORD *)v82;
        if ((_QWORD)v82)
        {
          v46 = a3[1];
          do
          {
            LODWORD(v64[0]) = 1;
            LODWORD(v87) = 0;
            if (v46 >= a3[2])
            {
              v46 = std::vector<quasar::PronChoice>::__emplace_back_slow_path<quasar::PronType,std::string const&,int>(a3, (int *)v64, (uint64_t)(v45 + 2), (int *)&v87);
            }
            else
            {
              std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType,std::string const&,int>((uint64_t)(a3 + 2), v46, (int *)v64, (uint64_t)(v45 + 2), (int *)&v87);
              v46 += 40;
              a3[1] = v46;
            }
            a3[1] = v46;
            v45 = (_QWORD *)*v45;
          }
          while (v45);
        }
        v47 = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v35);
        quasar::PronGuessStats::addRecord(a4, a2, 0, (int)((v47 - v93[0]) * 1000000.0));
LABEL_107:
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v81);
        return 0;
      }
    }
    v62 = 0;
    v48 = (*(uint64_t (**)(_QWORD *, uint64_t, char *))(*a1 + 40))(a1, a2, &v62);
    if (v62)
      *(_BYTE *)(a4 + 40) = 1;
    if ((v48 & 1) != 0)
    {
      kaldi::Timer::Reset((kaldi::Timer *)v93, v49);
      v61 = 0;
      quasar::G2P::getFromCache((uint64_t)a1, a2, (uint64_t)&v61);
      if (v87 == v88)
      {
        switch(v61)
        {
          case 0:
            ++*(_DWORD *)a4;
            goto LABEL_104;
          case 1:
            goto LABEL_104;
          case 2:
            ++*(_DWORD *)(a4 + 4);
            goto LABEL_104;
          case 5:
            ++*(_DWORD *)(a4 + 36);
            break;
          default:
            ++*(_DWORD *)(a4 + 12);
LABEL_104:
            *a6 = 1;
            break;
        }
      }
      else
      {
        v51 = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v50);
        quasar::PronGuessStats::addRecord(a4, a2, 1u, (int)((v51 - v93[0]) * 1000000.0));
        quasar::toPronChoices((uint64_t *)&v87, (uint64_t *)v64);
        std::vector<quasar::PronChoice>::__vdeallocate(a3);
        *(_OWORD *)a3 = *(_OWORD *)v64;
        a3[2] = v65;
        v64[1] = 0;
        *(_QWORD *)&v65 = 0;
        v64[0] = 0;
        v63[0] = v64;
        std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](v63);
        if (quasar::gLogLevel >= 5)
        {
          v79 = 0u;
          v80 = 0u;
          v77 = 0u;
          v78 = 0u;
          v75 = 0u;
          v76 = 0u;
          v73 = 0u;
          v74 = 0u;
          v71 = 0u;
          v72 = 0u;
          v69 = 0u;
          v70 = 0u;
          v67 = 0u;
          v68 = 0u;
          v65 = 0u;
          v66 = 0u;
          *(_OWORD *)v64 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v64);
          v52 = *(char *)(a2 + 23);
          if (v52 >= 0)
            v53 = a2;
          else
            v53 = *(_QWORD *)a2;
          if (v52 >= 0)
            v54 = *(unsigned __int8 *)(a2 + 23);
          else
            v54 = *(_QWORD *)(a2 + 8);
          v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, v53, v54);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)" found in PronCache", 19);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v64);
        }
      }
      v64[0] = &v87;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v64);
      goto LABEL_107;
    }
    if (quasar::gLogLevel >= 5)
    {
      v79 = 0u;
      v80 = 0u;
      v77 = 0u;
      v78 = 0u;
      v75 = 0u;
      v76 = 0u;
      v73 = 0u;
      v74 = 0u;
      v71 = 0u;
      v72 = 0u;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      *(_OWORD *)v64 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v64);
      v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"Skipping invalid token=", 23);
      v57 = *(char *)(a2 + 23);
      if (v57 >= 0)
        v58 = a2;
      else
        v58 = *(_QWORD *)a2;
      if (v57 >= 0)
        v59 = *(unsigned __int8 *)(a2 + 23);
      else
        v59 = *(_QWORD *)(a2 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, v58, v59);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v64);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v81);
    return 0xFFFFFFFFLL;
  }
  return 0;
}

void sub_1AD9FCE8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  uint64_t v57;

  a13 = v57 - 208;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a47);
  _Unwind_Resume(a1);
}

uint64_t quasar::join<std::unordered_set<std::string>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[11];
  char v8;
  uint64_t v9;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  quasar::joinToStream<std::unordered_set<std::string>>(v7, a1, a2);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v7[0] = v4;
  v7[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v8 < 0)
    operator delete((void *)v7[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v9);
}

void sub_1AD9FD0B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::G2P::getFromCache(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  std::string __p;

  v4 = *(_QWORD *)(a1 + 8);
  quasar::G2P::generateCacheKey(a1, a2, &__p);
  (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v4 + 32))(v4, &__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1AD9FD12C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::toPronChoices(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  std::string *v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  __int128 __p;
  uint64_t v13;
  int v14;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *a1;
  if (a1[1] != *a1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      quasar::PronChoice::fromString((std::string *)(v3 + v5), (uint64_t)&v11);
      v7 = a2[1];
      if (v7 >= a2[2])
      {
        v10 = std::vector<quasar::PronChoice>::__push_back_slow_path<quasar::PronChoice>(a2, (uint64_t)&v11);
      }
      else
      {
        *(_DWORD *)v7 = v11;
        v8 = (std::string *)(v7 + 8);
        if (SHIBYTE(v13) < 0)
        {
          std::string::__init_copy_ctor_external(v8, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
        }
        else
        {
          v9 = __p;
          *(_QWORD *)(v7 + 24) = v13;
          *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
        }
        *(_DWORD *)(v7 + 32) = v14;
        v10 = v7 + 40;
        a2[1] = v7 + 40;
      }
      a2[1] = v10;
      if (SHIBYTE(v13) < 0)
        operator delete((void *)__p);
      ++v6;
      v3 = *a1;
      v5 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) > v6);
  }
}

void sub_1AD9FD250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v16 + 8) = v17;
  if (a16 < 0)
    operator delete(__p);
  a10 = v16;
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

uint64_t quasar::G2P::updateCache(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  std::string __p;

  v4 = *(_QWORD *)(a1 + 8);
  quasar::G2P::generateCacheKey(a1, a2, &__p);
  v5 = (*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v4 + 16))(v4, &__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v5;
}

void sub_1AD9FD2EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::fromPronChoices(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  std::string *v14;
  std::string *v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  void *__p[2];
  std::string::size_type v20;
  std::__split_buffer<std::string> __v;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v3 = *a1;
  if (a1[1] != *a1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      quasar::PronChoice::toString((uint64_t *)__p, (quasar::PronChoice *)(v3 + v5));
      v8 = *(_QWORD *)(a2 + 8);
      v7 = *(_QWORD *)(a2 + 16);
      if (v8 >= v7)
      {
        v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *(_QWORD *)a2) >> 3);
        v11 = v10 + 1;
        if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *(_QWORD *)a2) >> 3);
        if (2 * v12 > v11)
          v11 = 2 * v12;
        if (v12 >= 0x555555555555555)
          v13 = 0xAAAAAAAAAAAAAAALL;
        else
          v13 = v11;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
        if (v13)
          v14 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a2 + 16, v13);
        else
          v14 = 0;
        v15 = v14 + v10;
        __v.__first_ = v14;
        __v.__begin_ = v15;
        __v.__end_cap_.__value_ = &v14[v13];
        v16 = *(_OWORD *)__p;
        v15->__r_.__value_.__r.__words[2] = v20;
        *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
        __p[1] = 0;
        v20 = 0;
        __p[0] = 0;
        __v.__end_ = v15 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
        v17 = *(_QWORD *)(a2 + 8);
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        v18 = SHIBYTE(v20);
        *(_QWORD *)(a2 + 8) = v17;
        if (v18 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v9 = *(_OWORD *)__p;
        *(_QWORD *)(v8 + 16) = v20;
        *(_OWORD *)v8 = v9;
        *(_QWORD *)(a2 + 8) = v8 + 24;
      }
      ++v6;
      v3 = *a1;
      v5 += 40;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3) > v6);
  }
}

void sub_1AD9FD4A0(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::wstring> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__pa);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(__p);
}

void quasar::G2P::updateCacheSetStats(uint64_t a1, uint64_t a2, int a3, int a4, int a5, _DWORD *a6)
{
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _OWORD v12[17];

  if (a4 == 2)
  {
    ++a6[2];
  }
  else if (a4 == 1)
  {
    if (quasar::gLogLevel >= 5)
    {
      memset(v12, 0, sizeof(v12));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"in backoff window, skip updating pron cache for token ", 54);
      v8 = *(char *)(a2 + 23);
      if (v8 >= 0)
        v9 = a2;
      else
        v9 = *(_QWORD *)a2;
      if (v8 >= 0)
        v10 = *(unsigned __int8 *)(a2 + 23);
      else
        v10 = *(_QWORD *)(a2 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v12);
    }
  }
  else if (a4)
  {
    ++a6[4];
  }
  else if (a5)
  {
    ++a6[8];
  }
  else
  {
    v11 = a6[7] + a3;
    ++a6[6];
    a6[7] = v11;
  }
}

void sub_1AD9FD5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  _Unwind_Resume(a1);
}

void quasar::G2P::generateCacheKey(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  std::string *v6;
  std::string::size_type size;
  std::string *v8;
  __int128 v9;
  int v10;
  std::string *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  std::string v19;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string v23;

  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 48), (const void **)(a1 + 72), (uint64_t)&v21);
  std::to_string(&v20, *(_DWORD *)(a1 + 96));
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v20;
  else
    v6 = (std::string *)v20.__r_.__value_.__r.__words[0];
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
  else
    size = v20.__r_.__value_.__l.__size_;
  v8 = std::string::append(&v21, (const std::string::value_type *)v6, size);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  std::to_string(&v19, v10);
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v19;
  else
    v11 = (std::string *)v19.__r_.__value_.__r.__words[0];
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  else
    v12 = v19.__r_.__value_.__l.__size_;
  v13 = std::string::append(&v22, (const std::string::value_type *)v11, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = *(char *)(a2 + 23);
  if (v15 >= 0)
    v16 = (const std::string::value_type *)a2;
  else
    v16 = *(const std::string::value_type **)a2;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(a2 + 23);
  else
    v17 = *(_QWORD *)(a2 + 8);
  v18 = std::string::append(&v23, v16, v17);
  *a3 = *v18;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_1AD9FD75C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 41) < 0)
    operator delete(*(void **)(v33 - 64));
  if (a15 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void quasar::getAlternativeSpelledProns(uint64_t *a1@<X0>, int *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  __int128 *v18;
  unint64_t v19;
  uint64_t v20;
  char *v23;
  char *v24;
  unint64_t v25;
  void *__p[2];
  _QWORD *v27;
  char *v28;
  unint64_t *v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  if (a1[1] != *a1)
  {
    v4 = 0;
    do
    {
      v5 = v24;
      if ((unint64_t)v24 >= v25)
      {
        v7 = 0xAAAAAAAAAAAAAAABLL * ((v24 - v23) >> 3);
        v8 = v7 + 1;
        if (v7 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(v25 - (_QWORD)v23) >> 3) > v8)
          v8 = 0x5555555555555556 * ((uint64_t)(v25 - (_QWORD)v23) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (_QWORD)v23) >> 3) >= 0x555555555555555)
          v9 = 0xAAAAAAAAAAAAAAALL;
        else
          v9 = v8;
        v29 = &v25;
        if (v9)
          v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v25, v9);
        else
          v10 = 0;
        v11 = &v10[24 * v7];
        __p[0] = v10;
        __p[1] = v11;
        v28 = &v10[24 * v9];
        *(_QWORD *)v11 = 0;
        *((_QWORD *)v11 + 1) = 0;
        *((_QWORD *)v11 + 2) = 0;
        v27 = v11 + 24;
        std::vector<std::vector<std::string>>::__swap_out_circular_buffer((uint64_t *)&v23, __p);
        v6 = v24;
        std::__split_buffer<std::vector<std::string>>::~__split_buffer(__p);
      }
      else
      {
        *(_QWORD *)v24 = 0;
        *((_QWORD *)v5 + 1) = 0;
        v6 = v5 + 24;
        *((_QWORD *)v5 + 2) = 0;
      }
      v24 = v6;
      v12 = *a1;
      v13 = *a1 + 72 * v4;
      v14 = *(_QWORD *)(v13 + 24);
      v15 = *(_QWORD *)(v13 + 32);
      if (v14 != v15)
      {
        do
        {
          v16 = v24;
          v17 = (uint64_t *)(v24 - 24);
          v18 = (__int128 *)(v14 + 8);
          v19 = *((_QWORD *)v24 - 2);
          if (v19 >= *((_QWORD *)v24 - 1))
          {
            v20 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v17, v18);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v17, v18);
            v20 = v19 + 24;
          }
          *((_QWORD *)v16 - 2) = v20;
          v14 += 40;
        }
        while (v14 != v15);
        v12 = *a1;
      }
      ++v4;
    }
    while (0x8E38E38E38E38E39 * ((a1[1] - v12) >> 3) > v4);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, ".");
  quasar::PronCombinator::operator()(a2, &v23, (uint64_t)__p, a3);
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
  __p[0] = &v23;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1AD9FD9DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  if (a20 < 0)
    operator delete(__p);
  a23 = &a12;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  _Unwind_Resume(a1);
}

uint64_t quasar::G2P::tokenIsLegal(quasar::G2P *this, const Token *a2, BOOL *a3)
{
  return 1;
}

void std::vector<quasar::PronChoice>::__assign_with_size[abi:ne180100]<quasar::PronChoice*,quasar::PronChoice*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = a1 + 16;
  v9 = *(_QWORD *)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<quasar::PronChoice>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0x666666666666666)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x999999999999999ALL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v10;
    std::vector<quasar::AlternativeSelectionSpan>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::PronChoice>,quasar::PronChoice*,quasar::PronChoice*,quasar::PronChoice*>(v8, a2, a3, *(_DWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 8) - v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((*(_QWORD *)(a1 + 8) - v9) >> 3);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<quasar::PronChoice *>,std::__wrap_iter<quasar::PronChoice *>,quasar::PronChoice *,0>(a2, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::PronChoice>,quasar::PronChoice*,quasar::PronChoice*,quasar::PronChoice*>(v8, v13, a3, *(_DWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<quasar::PronChoice *>,std::__wrap_iter<quasar::PronChoice *>,quasar::PronChoice *,0>(a2, a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      if (*(char *)(v16 - 9) < 0)
        operator delete(*(void **)(v16 - 32));
      v16 -= 40;
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1AD9FDB98(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1AD9FDBA0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<quasar::PronChoice>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<quasar::PronChoice>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_OWORD *std::__tree<std::__value_type<std::string,quasar::PronGuessStats::Record>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PronGuessStats::Record>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::PronGuessStats::Record>>>::__emplace_unique_key_args<std::string,std::pair<std::string,quasar::PronGuessStats::Record>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v5 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x40uLL);
    v6[2] = *(_OWORD *)a3;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    v8 = *(_QWORD *)(a3 + 16);
    v9 = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 16) = 0;
    *((_QWORD *)v6 + 6) = v8;
    *((_QWORD *)v6 + 7) = v9;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t std::vector<std::vector<quasar::PronChoice>>::__push_back_slow_path<std::vector<quasar::PronChoice> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<quasar::PronChoice>::__init_with_size[abi:ne180100]<quasar::PronChoice*,quasar::PronChoice*>(v11, *a2, a2[1], 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3));
  v15 += 24;
  std::vector<std::vector<quasar::PronChoice>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<quasar::PronChoice>>::~__split_buffer(v14);
  return v12;
}

void sub_1AD9FDD7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::PronChoice>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<quasar::PronChoice>::__init_with_size[abi:ne180100]<quasar::PronChoice*,quasar::PronChoice*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::AlternativeSelectionSpan>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::PronChoice>,quasar::PronChoice*,quasar::PronChoice*,quasar::PronChoice*>((uint64_t)(v6 + 2), a2, a3, (_DWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1AD9FDDF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<quasar::PronChoice>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::PronChoice>>,std::reverse_iterator<std::vector<quasar::PronChoice>*>,std::reverse_iterator<std::vector<quasar::PronChoice>*>,std::reverse_iterator<std::vector<quasar::PronChoice>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::PronChoice>>,std::reverse_iterator<std::vector<quasar::PronChoice>*>,std::reverse_iterator<std::vector<quasar::PronChoice>*>,std::reverse_iterator<std::vector<quasar::PronChoice>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::PronChoice>>,std::reverse_iterator<std::vector<quasar::PronChoice>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::PronChoice>>,std::reverse_iterator<std::vector<quasar::PronChoice>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::PronChoice>>,std::reverse_iterator<std::vector<quasar::PronChoice>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::PronChoice>>,std::reverse_iterator<std::vector<quasar::PronChoice>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<quasar::PronChoice>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<quasar::PronChoice>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<quasar::PronChoice>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *,false>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  _BOOL4 v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v7 = a2;
  v8 = a1;
  v22 = a2;
  v23 = a1;
  while (2)
  {
    v9 = 1 - a4;
LABEL_3:
    v10 = v7 - v8;
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - v8) >> 3);
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v22 = v7 - 40;
        if (*(float *)(v7 - 8) < *(float *)(v8 + 32))
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::PronChoice *&,quasar::PronChoice *&>((uint64_t *)&v23, &v22);
        return;
      case 3uLL:
        v22 = v7 - 40;
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(v8, v8 + 40, v7 - 40);
        return;
      case 4uLL:
        v22 = v7 - 40;
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(v8, v8 + 40, v8 + 80, v7 - 40);
        return;
      case 5uLL:
        v22 = v7 - 40;
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(v8, v8 + 40, v8 + 80, v8 + 120, v7 - 40);
        return;
      default:
        if (v10 <= 959)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(v8, v7);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(v8, v7);
          return;
        }
        if (v9 == 1)
        {
          if (v8 != v7)
            std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *,quasar::PronChoice *>(v8, v7, v7, a3);
          return;
        }
        v12 = v11 >> 1;
        v13 = v7 - 40;
        if ((unint64_t)v10 < 0x1401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(v8 + 40 * (v11 >> 1), v8, v13);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(v8, v8 + 40 * (v11 >> 1), v13);
          v14 = v22;
          v15 = 5 * v12;
          v16 = 40 * v12;
          v17 = 40 * v12 - 40;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(v23 + 40, v23 + v17, v22 - 80);
          v16 += 40;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(v23 + 80, v23 + v16, v14 - 120);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(v23 + v17, v23 + 8 * v15, v23 + v16);
          v21 = v23 + 8 * v15;
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::PronChoice *&,quasar::PronChoice *>((uint64_t *)&v23, (uint64_t *)&v21);
        }
        if ((a5 & 1) == 0)
        {
          v7 = v22;
          if (*(float *)(v23 - 8) < *(float *)(v23 + 32))
            goto LABEL_12;
          v8 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,quasar::PronChoice *,std::__less<void,void> &>(v23, v22);
LABEL_21:
          a5 = 0;
          v23 = v8;
          a4 = -v9;
          continue;
        }
        v7 = v22;
LABEL_12:
        v18 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,quasar::PronChoice *,std::__less<void,void> &>(v23, v7);
        if ((v19 & 1) == 0)
        {
LABEL_19:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *,false>(v23, v18, a3, -v9, a5 & 1);
          v8 = v18 + 40;
          goto LABEL_21;
        }
        v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(v23, v18);
        v8 = v18 + 40;
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(v18 + 40, v7))
        {
          if (v20)
          {
            v23 = v18 + 40;
            goto LABEL_18;
          }
          goto LABEL_19;
        }
        if (!v20)
        {
          v22 = v18;
          v8 = v23;
          v7 = v18;
LABEL_18:
          ++v9;
          goto LABEL_3;
        }
        return;
    }
  }
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::PronChoice *&,quasar::PronChoice *&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  std::string __p;
  int v6;

  v2 = *a1;
  v3 = *a2;
  quasar::PronChoice::PronChoice(&v4, *a1);
  *(_DWORD *)v2 = *(_DWORD *)v3;
  std::string::operator=((std::string *)(v2 + 8), (const std::string *)(v3 + 8));
  *(_DWORD *)(v2 + 32) = *(_DWORD *)(v3 + 32);
  *(_DWORD *)v3 = v4;
  std::string::operator=((std::string *)(v3 + 8), &__p);
  *(_DWORD *)(v3 + 32) = v6;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1AD9FE38C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  std::string __p;
  float v15;

  if (a1 != a2)
  {
    v4 = a1 + 40;
    if (a1 + 40 != a2)
    {
      v5 = 0;
      v6 = a1;
      do
      {
        v7 = *(float *)(v6 + 72);
        v8 = *(float *)(v6 + 32);
        v6 = v4;
        if (v7 < v8)
        {
          quasar::PronChoice::PronChoice(&v13, v4);
          v9 = v5;
          while (1)
          {
            v10 = v9;
            v11 = a1 + v9;
            *(_DWORD *)(a1 + v9 + 40) = *(_DWORD *)(a1 + v9);
            std::string::operator=((std::string *)(a1 + v9 + 48), (const std::string *)(a1 + v9 + 8));
            *(_DWORD *)(v11 + 72) = *(_DWORD *)(v11 + 32);
            if (!v10)
              break;
            v9 = v10 - 40;
            if (v15 >= *(float *)(a1 + v10 - 8))
            {
              v12 = a1 + v10;
              goto LABEL_10;
            }
          }
          v12 = a1;
LABEL_10:
          *(_DWORD *)v12 = v13;
          std::string::operator=((std::string *)(a1 + v10 + 8), &__p);
          *(float *)(v12 + 32) = v15;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        v4 = v6 + 40;
        v5 += 40;
      }
      while (v6 + 40 != a2);
    }
  }
}

void sub_1AD9FE4C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  std::string *v5;
  float v6;
  float v7;
  std::string *v8;
  float *v9;
  float v10;
  int v11;
  std::string __p;
  float v13;

  if (a1 != a2)
  {
    v3 = a1;
    v4 = a1 + 40;
    if (a1 + 40 != a2)
    {
      v5 = (std::string *)(a1 + 72);
      do
      {
        v6 = *(float *)(v3 + 72);
        v7 = *(float *)(v3 + 32);
        v3 = v4;
        if (v6 < v7)
        {
          quasar::PronChoice::PronChoice(&v11, v4);
          v8 = v5;
          do
          {
            LODWORD(v8[-2].__r_.__value_.__r.__words[2]) = v8[-3].__r_.__value_.__l.__data_;
            std::string::operator=(v8 - 1, (std::string *)((char *)v8 - 64));
            v9 = (float *)&v8[-2].__r_.__value_.__r.__words[1];
            LODWORD(v8->__r_.__value_.__l.__data_) = v8[-2].__r_.__value_.__r.__words[1];
            v10 = *(float *)&v8[-4].__r_.__value_.__r.__words[2];
            v8 = (std::string *)((char *)v8 - 40);
          }
          while (v13 < v10);
          *((_DWORD *)v9 - 8) = v11;
          std::string::operator=((std::string *)v9 - 1, &__p);
          *v9 = v13;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        v4 = v3 + 40;
        v5 = (std::string *)((char *)v5 + 40);
      }
      while (v3 + 40 != a2);
    }
  }
}

void sub_1AD9FE5CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v3;
  float v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = a3;
  v9 = a2;
  v3 = *(float *)(a2 + 32);
  v4 = *(float *)(a3 + 32);
  if (v3 < *(float *)(a1 + 32))
  {
    if (v4 < v3)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::PronChoice *&,quasar::PronChoice *&>(&v10, &v8);
      return 1;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::PronChoice *&,quasar::PronChoice *&>(&v10, &v9);
    if (*(float *)(v8 + 32) >= *(float *)(v9 + 32))
      return 1;
    v5 = &v9;
    v6 = &v8;
LABEL_9:
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::PronChoice *&,quasar::PronChoice *&>(v5, v6);
    return 2;
  }
  if (v4 < v3)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::PronChoice *&,quasar::PronChoice *&>(&v9, &v8);
    if (*(float *)(v9 + 32) >= *(float *)(v10 + 32))
      return 1;
    v5 = &v10;
    v6 = &v9;
    goto LABEL_9;
  }
  return 0;
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::PronChoice *&,quasar::PronChoice *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  std::string __p;
  int v6;

  v2 = *a1;
  v3 = *a2;
  quasar::PronChoice::PronChoice(&v4, *a1);
  *(_DWORD *)v2 = *(_DWORD *)v3;
  std::string::operator=((std::string *)(v2 + 8), (const std::string *)(v3 + 8));
  *(_DWORD *)(v2 + 32) = *(_DWORD *)(v3 + 32);
  *(_DWORD *)v3 = v4;
  std::string::operator=((std::string *)(v3 + 8), &__p);
  *(_DWORD *)(v3 + 32) = v6;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1AD9FE738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,quasar::PronChoice *,std::__less<void,void> &>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  float v6;
  unint64_t v7;
  float v8;
  float v9;
  float v10;
  unint64_t v11;
  float v12;
  uint64_t v13;
  int v15;
  std::string __p;
  float v17;
  unint64_t v18;
  unint64_t v19;

  v2 = a2;
  v18 = a2;
  quasar::PronChoice::PronChoice(&v15, a1);
  if (v17 >= *(float *)(v2 - 8))
  {
    v7 = a1 + 40;
    do
    {
      v5 = v7;
      if (v7 >= v2)
        break;
      v8 = *(float *)(v7 + 32);
      v7 += 40;
    }
    while (v17 >= v8);
  }
  else
  {
    v4 = a1;
    do
    {
      v5 = v4 + 40;
      v6 = *(float *)(v4 + 72);
      v4 += 40;
    }
    while (v17 >= v6);
  }
  v19 = v5;
  if (v5 < v2)
  {
    do
    {
      v9 = *(float *)(v2 - 8);
      v2 -= 40;
    }
    while (v17 < v9);
    v18 = v2;
  }
  if (v5 < v2)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::PronChoice *&,quasar::PronChoice *&>((uint64_t *)&v19, (uint64_t *)&v18);
      v5 = v19;
      do
      {
        v10 = *(float *)(v5 + 72);
        v5 += 40;
      }
      while (v17 >= v10);
      v19 = v5;
      v11 = v18;
      do
      {
        v12 = *(float *)(v11 - 8);
        v11 -= 40;
      }
      while (v17 < v12);
      v18 = v11;
    }
    while (v5 < v11);
  }
  if (v5 - 40 != a1)
  {
    *(_DWORD *)a1 = *(_DWORD *)(v5 - 40);
    std::string::operator=((std::string *)(a1 + 8), (const std::string *)(v5 - 32));
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v5 - 8);
  }
  *(_DWORD *)(v5 - 40) = v15;
  std::string::operator=((std::string *)(v5 - 32), &__p);
  *(float *)(v5 - 8) = v17;
  v13 = v19;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v13;
}

void sub_1AD9FE8B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,quasar::PronChoice *,std::__less<void,void> &>(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  float v5;
  unint64_t v6;
  unint64_t v7;
  float v8;
  float v9;
  unint64_t v10;
  float v11;
  unint64_t v12;
  float v13;
  int v15;
  std::string __p;
  float v17;
  unint64_t v18;
  unint64_t v19;

  quasar::PronChoice::PronChoice(&v15, a1);
  v4 = 0;
  do
  {
    v5 = *(float *)(a1 + v4 + 72);
    v4 += 40;
  }
  while (v5 < v17);
  v6 = a1 + v4;
  v19 = a1 + v4;
  if (v4 == 40)
  {
    while (v6 < a2)
    {
      v7 = a2 - 40;
      v9 = *(float *)(a2 - 8);
      a2 -= 40;
      if (v9 < v17)
        goto LABEL_9;
    }
    v7 = a2;
  }
  else
  {
    do
    {
      v7 = a2 - 40;
      v8 = *(float *)(a2 - 8);
      a2 -= 40;
    }
    while (v8 >= v17);
  }
LABEL_9:
  v18 = v7;
  v10 = a1 + v4;
  if (v6 < v7)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::PronChoice *&,quasar::PronChoice *&>((uint64_t *)&v19, (uint64_t *)&v18);
      v10 = v19;
      do
      {
        v11 = *(float *)(v10 + 72);
        v10 += 40;
      }
      while (v11 < v17);
      v19 = v10;
      v12 = v18;
      do
      {
        v13 = *(float *)(v12 - 8);
        v12 -= 40;
      }
      while (v13 >= v17);
      v18 = v12;
    }
    while (v10 < v12);
  }
  if (v10 - 40 != a1)
  {
    *(_DWORD *)a1 = *(_DWORD *)(v10 - 40);
    std::string::operator=((std::string *)(a1 + 8), (const std::string *)(v10 - 32));
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v10 - 8);
  }
  *(_DWORD *)(v10 - 40) = v15;
  std::string::operator=((std::string *)(v10 - 32), &__p);
  *(float *)(v10 - 8) = v17;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v10 - 40;
}

void sub_1AD9FEA34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  std::string __p;
  float v12;
  uint64_t v13;
  uint64_t v14;

  v2 = a2;
  v13 = a2;
  v14 = a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v13 = a2 - 40;
      if (*(float *)(a2 - 8) < *(float *)(a1 + 32))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::PronChoice *&,quasar::PronChoice *&>(&v14, &v13);
        return 1;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(a1, a1 + 40, a2 - 40);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v6 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(a1, a1 + 40, a1 + 80);
      v7 = a1 + 120;
      if (v7 == v2)
        return 1;
      v8 = 0;
      break;
  }
  while (1)
  {
    if (*(float *)(v7 + 32) < *(float *)(v6 + 32))
    {
      quasar::PronChoice::PronChoice(&v10, v7);
      do
      {
        v9 = v6;
        *(_DWORD *)(v6 + 40) = *(_DWORD *)v6;
        std::string::operator=((std::string *)(v6 + 48), (const std::string *)(v6 + 8));
        *(_DWORD *)(v6 + 72) = *(_DWORD *)(v6 + 32);
        if (v6 == v14)
          break;
        v6 -= 40;
      }
      while (v12 < *(float *)(v9 - 8));
      *(_DWORD *)v9 = v10;
      std::string::operator=((std::string *)(v9 + 8), &__p);
      *(float *)(v9 + 32) = v12;
      v2 = v13;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (++v8 == 8)
        break;
    }
    v6 = v7;
    v7 += 40;
    if (v7 == v2)
      return 1;
  }
  return v7 + 40 == v2;
}

void sub_1AD9FEC34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v10 = a2;
  v11 = a1;
  v8 = a4;
  v9 = a3;
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(a1, a2, a3);
  if (*(float *)(a4 + 32) < *(float *)(a3 + 32))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::PronChoice *&,quasar::PronChoice *&>(&v9, &v8);
    if (*(float *)(v9 + 32) < *(float *)(a2 + 32))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::PronChoice *&,quasar::PronChoice *&>(&v10, &v9);
      if (*(float *)(v10 + 32) < *(float *)(a1 + 32))
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::PronChoice *&,quasar::PronChoice *&>(&v11, &v10);
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a2;
  v14 = a1;
  v11 = a4;
  v12 = a3;
  v10 = a5;
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(a1, a2, a3, a4);
  if (*(float *)(a5 + 32) < *(float *)(a4 + 32))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::PronChoice *&,quasar::PronChoice *&>(&v11, &v10);
    if (*(float *)(v11 + 32) < *(float *)(a3 + 32))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::PronChoice *&,quasar::PronChoice *&>(&v12, &v11);
      if (*(float *)(v12 + 32) < *(float *)(a2 + 32))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::PronChoice *&,quasar::PronChoice *&>(&v13, &v12);
        if (*(float *)(v13 + 32) < *(float *)(a1 + 32))
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::PronChoice *&,quasar::PronChoice *&>(&v14, &v13);
      }
    }
  }
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *,quasar::PronChoice *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  BOOL v16;
  uint64_t v18;
  uint64_t v19;

  v19 = a1;
  if (a1 != a2)
  {
    v6 = a2;
    v7 = a1;
    v8 = a2 - a1;
    v9 = (a2 - a1) / 40;
    if (a2 - a1 >= 41)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = a1 + 40 * v10;
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(v7, a4, v9, v12);
        v12 -= 40;
        --v11;
      }
      while (v11);
    }
    v18 = v6;
    if (v6 == a3)
    {
      a3 = v6;
    }
    else
    {
      v13 = v6;
      do
      {
        if (*(float *)(v13 + 32) < *(float *)(v19 + 32))
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<quasar::PronChoice *&,quasar::PronChoice *&>(&v18, &v19);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(v19, a4, v9, v19);
          v13 = v18;
        }
        v13 += 40;
        v18 = v13;
      }
      while (v13 != a3);
      v7 = v19;
      v8 = v6 - v19;
    }
    if (v8 >= 41)
    {
      v14 = v8 / 0x28uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,quasar::PronChoice *>(v7, v6, a4, v14);
        v6 -= 40;
        v15 = v14 >= 2;
        v16 = v14-- == 2;
      }
      while (!v16 && v15);
      return v18;
    }
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  int64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  uint64_t v13;
  int v14;
  std::string __p;
  float v16;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((a4 - a1) >> 3)))
    {
      v9 = (0x999999999999999ALL * ((a4 - a1) >> 3)) | 1;
      v10 = a1 + 40 * v9;
      if ((uint64_t)(0x999999999999999ALL * ((a4 - a1) >> 3) + 2) < a3
        && *(float *)(a1 + 40 * v9 + 32) < *(float *)(v10 + 72))
      {
        v10 += 40;
        v9 = 0x999999999999999ALL * ((a4 - a1) >> 3) + 2;
      }
      if (*(float *)(v10 + 32) >= *(float *)(a4 + 32))
      {
        quasar::PronChoice::PronChoice(&v14, a4);
        do
        {
          v11 = v10;
          v12 = (std::string *)(v10 + 8);
          *(_DWORD *)v5 = *(_DWORD *)v10;
          std::string::operator=((std::string *)(v5 + 8), (const std::string *)(v10 + 8));
          *(_DWORD *)(v5 + 32) = *(_DWORD *)(v10 + 32);
          if (v7 < v9)
            break;
          v13 = (2 * v9) | 1;
          v10 = a1 + 40 * v13;
          if (2 * v9 + 2 < a3 && *(float *)(a1 + 40 * v13 + 32) < *(float *)(v10 + 72))
          {
            v10 += 40;
            v13 = 2 * v9 + 2;
          }
          v5 = v11;
          v9 = v13;
        }
        while (*(float *)(v10 + 32) >= v16);
        *(_DWORD *)v11 = v14;
        std::string::operator=(v12, &__p);
        *(float *)(v11 + 32) = v16;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_1AD9FF0A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,quasar::PronChoice *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _DWORD *v8;
  std::string *v9;
  int v10;
  std::string __p;
  int v12;

  if (a4 >= 2)
  {
    quasar::PronChoice::PronChoice(&v10, a1);
    v8 = (_DWORD *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(a1, a3, a4);
    v9 = (std::string *)(v8 + 2);
    if (v8 == (_DWORD *)(a2 - 40))
    {
      *v8 = v10;
      std::string::operator=(v9, &__p);
      v8[8] = v12;
    }
    else
    {
      *v8 = *(_DWORD *)(a2 - 40);
      std::string::operator=(v9, (const std::string *)(a2 - 32));
      v8[8] = *(_DWORD *)(a2 - 8);
      *(_DWORD *)(a2 - 40) = v10;
      std::string::operator=((std::string *)(a2 - 32), &__p);
      *(_DWORD *)(a2 - 8) = v12;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(a1, (uint64_t)(v8 + 10), a3, 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v8 - a1 + 40) >> 3));
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1AD9FF1CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = a1;
    v9 = v5 + 1;
    a1 += 40 * (v5 + 1);
    v10 = 2 * v5;
    v5 = (2 * v5) | 1;
    v11 = v10 + 2;
    if (v11 < a3 && *(float *)(v8 + 40 * v9 + 32) < *(float *)(a1 + 72))
    {
      a1 += 40;
      v5 = v11;
    }
    *(_DWORD *)v8 = *(_DWORD *)a1;
    std::string::operator=((std::string *)(v8 + 8), (const std::string *)(a1 + 8));
    *(_DWORD *)(v8 + 32) = *(_DWORD *)(a1 + 32);
  }
  while (v5 <= v7);
  return a1;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  std::string __p;
  float v11;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = v4 >> 1;
    if (*(float *)(a1 + 40 * (v4 >> 1) + 32) < *(float *)(a2 - 8))
    {
      v7 = a2 - 40;
      quasar::PronChoice::PronChoice(&v9, a2 - 40);
      do
      {
        v8 = a1 + 40 * v6;
        *(_DWORD *)v7 = *(_DWORD *)v8;
        std::string::operator=((std::string *)(v7 + 8), (const std::string *)(v8 + 8));
        *(_DWORD *)(v7 + 32) = *(_DWORD *)(v8 + 32);
        if (!v6)
          break;
        v6 = (v6 - 1) >> 1;
        v7 = v8;
      }
      while (*(float *)(a1 + 40 * v6 + 32) < v11);
      *(_DWORD *)v8 = v9;
      std::string::operator=((std::string *)(v8 + 8), &__p);
      *(float *)(v8 + 32) = v11;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1AD9FF38C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<quasar::PronType,std::vector<std::vector<quasar::PronChoice>>>,std::__map_value_compare<quasar::PronType,std::__value_type<quasar::PronType,std::vector<std::vector<quasar::PronChoice>>>,std::less<quasar::PronType>,true>,std::allocator<std::__value_type<quasar::PronType,std::vector<std::vector<quasar::PronChoice>>>>>::destroy(uint64_t a1, char *a2)
{
  void **v4;

  if (a2)
  {
    std::__tree<std::__value_type<quasar::PronType,std::vector<std::vector<quasar::PronChoice>>>,std::__map_value_compare<quasar::PronType,std::__value_type<quasar::PronType,std::vector<std::vector<quasar::PronChoice>>>,std::less<quasar::PronType>,true>,std::allocator<std::__value_type<quasar::PronType,std::vector<std::vector<quasar::PronChoice>>>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<quasar::PronType,std::vector<std::vector<quasar::PronChoice>>>,std::__map_value_compare<quasar::PronType,std::__value_type<quasar::PronType,std::vector<std::vector<quasar::PronChoice>>>,std::less<quasar::PronType>,true>,std::allocator<std::__value_type<quasar::PronType,std::vector<std::vector<quasar::PronChoice>>>>>::destroy(a1, *((_QWORD *)a2 + 1));
    v4 = (void **)(a2 + 40);
    std::vector<std::vector<quasar::PronChoice>>::__destroy_vector::operator()[abi:ne180100](&v4);
    operator delete(a2);
  }
}

void std::vector<std::vector<quasar::PronChoice>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<quasar::PronChoice>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<quasar::PronChoice>>::~__split_buffer(&v15);
  }
}

void sub_1AD9FF554(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::PronChoice>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::PronChoice>::__push_back_slow_path<quasar::PronChoice const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  _DWORD *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x333333333333333)
    v9 = 0x666666666666666;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[40 * v4];
  v16 = &v10[40 * v9];
  quasar::PronChoice::PronChoice(v14, a2);
  v15 = v14 + 40;
  std::vector<quasar::PronChoice>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1AD9FF658(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<quasar::PronChoice *>,std::__wrap_iter<quasar::PronChoice *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;

  v17 = a1;
  if (a1 != a2)
  {
    v6 = a2;
    v7 = a1;
    v8 = (a2 - a1) / 40;
    if (a2 - a1 >= 41)
    {
      v9 = (unint64_t)(v8 - 2) >> 1;
      v10 = v9 + 1;
      v11 = a1 + 40 * v9;
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<quasar::PronChoice *>>(v7, a4, v8, v11);
        v11 -= 40;
        --v10;
      }
      while (v10);
    }
    v18 = v6;
    if (v6 == a3)
    {
      a3 = v6;
    }
    else
    {
      v12 = v6;
      do
      {
        if (*(float *)(v12 + 32) < *(float *)(v17 + 32))
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<quasar::PronChoice *> &,std::__wrap_iter<quasar::PronChoice *> &>(&v18, &v17);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<quasar::PronChoice *>>(v17, a4, v8, v17);
          v12 = v18;
        }
        v12 += 40;
        v18 = v12;
      }
      while (v12 != a3);
      v7 = v17;
    }
    if (v6 - v7 >= 41)
    {
      v13 = (v6 - v7) / 0x28uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__wrap_iter<quasar::PronChoice *>>(v7, v6, a4, v13);
        v6 -= 40;
        v14 = v13 >= 2;
        v15 = v13-- == 2;
      }
      while (!v15 && v14);
      return v18;
    }
  }
  return a3;
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<quasar::PronChoice *> &,std::__wrap_iter<quasar::PronChoice *> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  std::string __p;
  int v6;

  v2 = *a1;
  v3 = *a2;
  quasar::PronChoice::PronChoice(&v4, *a1);
  *(_DWORD *)v2 = *(_DWORD *)v3;
  std::string::operator=((std::string *)(v2 + 8), (const std::string *)(v3 + 8));
  *(_DWORD *)(v2 + 32) = *(_DWORD *)(v3 + 32);
  *(_DWORD *)v3 = v4;
  std::string::operator=((std::string *)(v3 + 8), &__p);
  *(_DWORD *)(v3 + 32) = v6;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1AD9FF850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<quasar::PronChoice *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  int64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  uint64_t v13;
  int v14;
  std::string __p;
  float v16;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((a4 - a1) >> 3)))
    {
      v9 = (0x999999999999999ALL * ((a4 - a1) >> 3)) | 1;
      v10 = a1 + 40 * v9;
      if ((uint64_t)(0x999999999999999ALL * ((a4 - a1) >> 3) + 2) < a3
        && *(float *)(a1 + 40 * v9 + 32) < *(float *)(v10 + 72))
      {
        v10 += 40;
        v9 = 0x999999999999999ALL * ((a4 - a1) >> 3) + 2;
      }
      if (*(float *)(v10 + 32) >= *(float *)(a4 + 32))
      {
        quasar::PronChoice::PronChoice(&v14, a4);
        do
        {
          v11 = v5;
          v5 = v10;
          v12 = (std::string *)(v10 + 8);
          *(_DWORD *)v11 = *(_DWORD *)v10;
          std::string::operator=((std::string *)(v11 + 8), (const std::string *)(v10 + 8));
          *(_DWORD *)(v11 + 32) = *(_DWORD *)(v10 + 32);
          if (v7 < v9)
            break;
          v13 = (2 * v9) | 1;
          v10 = a1 + 40 * v13;
          if (2 * v9 + 2 < a3 && *(float *)(a1 + 40 * v13 + 32) < *(float *)(v10 + 72))
          {
            v10 += 40;
            v13 = 2 * v9 + 2;
          }
          v9 = v13;
        }
        while (*(float *)(v10 + 32) >= v16);
        *(_DWORD *)v5 = v14;
        std::string::operator=(v12, &__p);
        *(float *)(v5 + 32) = v16;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_1AD9FF9EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__wrap_iter<quasar::PronChoice *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _DWORD *v8;
  std::string *v9;
  int v10;
  std::string __p;
  int v12;

  if (a4 >= 2)
  {
    quasar::PronChoice::PronChoice(&v10, a1);
    v8 = (_DWORD *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::PronChoice *>(a1, a3, a4);
    v9 = (std::string *)(v8 + 2);
    if ((_DWORD *)(a2 - 40) == v8)
    {
      *v8 = v10;
      std::string::operator=(v9, &__p);
      v8[8] = v12;
    }
    else
    {
      *v8 = *(_DWORD *)(a2 - 40);
      std::string::operator=(v9, (const std::string *)(a2 - 32));
      v8[8] = *(_DWORD *)(a2 - 8);
      *(_DWORD *)(a2 - 40) = v10;
      std::string::operator=((std::string *)(a2 - 32), &__p);
      *(_DWORD *)(a2 - 8) = v12;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<quasar::PronChoice *>>(a1, (uint64_t)(v8 + 10), a3, 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v8 - a1 + 40) >> 3));
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1AD9FFB14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<quasar::PronChoice *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  std::string __p;
  float v11;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = v4 >> 1;
    if (*(float *)(a1 + 40 * (v4 >> 1) + 32) < *(float *)(a2 - 8))
    {
      v7 = a2 - 40;
      quasar::PronChoice::PronChoice(&v9, a2 - 40);
      do
      {
        v8 = a1 + 40 * v6;
        *(_DWORD *)v7 = *(_DWORD *)v8;
        std::string::operator=((std::string *)(v7 + 8), (const std::string *)(v8 + 8));
        *(_DWORD *)(v7 + 32) = *(_DWORD *)(v8 + 32);
        if (!v6)
          break;
        v6 = (v6 - 1) >> 1;
        v7 = v8;
      }
      while (*(float *)(a1 + 40 * v6 + 32) < v11);
      *(_DWORD *)v8 = v9;
      std::string::operator=((std::string *)(v8 + 8), &__p);
      *(float *)(v8 + 32) = v11;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1AD9FFC20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::PronChoice>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 40 * a2;
      do
      {
        *(_DWORD *)v7 = 0;
        *(_QWORD *)(v7 + 16) = 0;
        *(_QWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 8) = 0;
        *(_DWORD *)(v7 + 32) = 0;
        v7 += 40;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v9;
    v16[4] = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(result, v11);
    else
      v12 = 0;
    v14 = &v12[40 * v8];
    v16[0] = v12;
    v16[1] = v14;
    v16[3] = &v12[40 * v11];
    v15 = &v14[40 * a2];
    do
    {
      *(_DWORD *)v14 = 0;
      *((_QWORD *)v14 + 2) = 0;
      *((_QWORD *)v14 + 3) = 0;
      *((_QWORD *)v14 + 1) = 0;
      *((_DWORD *)v14 + 8) = 0;
      v14 += 40;
    }
    while (v14 != v15);
    v16[2] = v15;
    std::vector<quasar::PronChoice>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)v16);
  }
  return result;
}

void sub_1AD9FFD7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *quasar::joinToStream<std::unordered_set<std::string>>(_QWORD *result, uint64_t a2, uint64_t *a3)
{
  uint64_t **v3;
  _QWORD *v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(uint64_t ***)(a2 + 16);
  if (v3)
  {
    v5 = result;
    v6 = 1;
    do
    {
      if ((v6 & 1) == 0)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, *a3, a3[1]);
      v7 = *((char *)v3 + 39);
      if (v7 >= 0)
        v8 = (uint64_t)(v3 + 2);
      else
        v8 = (uint64_t)v3[2];
      if (v7 >= 0)
        v9 = *((unsigned __int8 *)v3 + 39);
      else
        v9 = (uint64_t)v3[3];
      result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v8, v9);
      v6 = 0;
      v3 = (uint64_t **)*v3;
    }
    while (v3);
  }
  return result;
}

uint64_t quasar::PronChoice::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  const void **v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;
  uint64_t result;

  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    return 0;
  v2 = *(unsigned __int8 *)(a1 + 31);
  if ((v2 & 0x80u) == 0)
    v3 = *(unsigned __int8 *)(a1 + 31);
  else
    v3 = *(_QWORD *)(a1 + 16);
  v4 = *(unsigned __int8 *)(a2 + 31);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 16);
  if (v3 != v4)
    return 0;
  v6 = (const void **)(a1 + 8);
  v9 = *(unsigned __int8 **)(a2 + 8);
  v7 = (unsigned __int8 *)(a2 + 8);
  v8 = v9;
  if (v5 < 0)
    v7 = v8;
  if ((v2 & 0x80) != 0)
    return memcmp(*v6, v7, *(_QWORD *)(a1 + 16)) == 0;
  if (!*(_BYTE *)(a1 + 31))
    return 1;
  v10 = v2 - 1;
  do
  {
    v12 = *(unsigned __int8 *)v6;
    v6 = (const void **)((char *)v6 + 1);
    v11 = v12;
    v14 = *v7++;
    v13 = v14;
    v16 = v10-- != 0;
    result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

uint64_t std::vector<quasar::PronChoice>::__push_back_slow_path<quasar::PronChoice>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  _DWORD *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x333333333333333)
    v9 = 0x666666666666666;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[40 * v4];
  v16 = &v10[40 * v9];
  quasar::PronChoice::PronChoice(v14, a2);
  v15 = v14 + 40;
  std::vector<quasar::PronChoice>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1AD9FFFA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *kaldi::TrainingGraphCompiler::TrainingGraphCompiler(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v9;
  int **v10;
  int *v11;
  int v12;
  int v13;
  uint64_t v14;
  int *v15;
  int *v16;
  int *v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  int *v21;
  unint64_t v22;
  unint64_t v23;
  int *v24;
  int *v25;
  int v26;
  int v27;
  int v28;
  _QWORD *v30;
  _QWORD v31[34];

  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1 + 3, *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
  a1[6] = 0;
  a1[7] = 0x43E800000;
  *((_BYTE *)a1 + 64) = 1;
  *(uint64_t *)((char *)a1 + 68) = 0x100000002;
  v9 = *a6;
  *((_DWORD *)a1 + 22) = *((_DWORD *)a6 + 2);
  a1[10] = v9;
  v10 = (int **)*a1;
  v11 = (int *)(*(_QWORD *)*a1 + 4);
  do
  {
    if (v11 == *(int **)(*a1 + 8))
      break;
    v13 = *(v11 - 1);
    v12 = *v11++;
  }
  while (v12 > v13);
  std::__sort<std::__less<int,int> &,int *>();
  v15 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<int *>,std::__wrap_iter<int *>,std::__equal_to &>((int *)a1[3], (int *)a1[4]);
  v16 = (int *)a1[3];
  if ((int *)a1[4] != v15)
  {
    v14 = a1[4];
    a1[4] = (uint64_t)v15;
  }
  v17 = v10[1];
  if (v15 == v16)
  {
    v27 = *(v17 - 1);
  }
  else
  {
    v18 = 0;
    v19 = v15 - v16;
    if (v19 <= 1)
      v19 = 1;
    do
    {
      if (v17 != *v10)
      {
        v20 = v16[v18];
        v21 = *v10;
        v22 = v17 - *v10;
        do
        {
          v23 = v22 >> 1;
          v24 = &v21[v22 >> 1];
          v26 = *v24;
          v25 = v24 + 1;
          v14 = v26;
          v22 += ~(v22 >> 1);
          if (v26 < v20)
            v21 = v25;
          else
            v22 = v23;
        }
        while (v22);
        if (v21 != v17 && v20 >= *v21)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Disambiguation symbol ", 22);
          v30 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" is also a phone.", 17);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31);
        }
      }
      ++v18;
    }
    while (v18 != v19);
    if (*(v17 - 1) <= *(v15 - 1))
      v27 = *(v15 - 1);
    else
      v27 = *(v17 - 1);
  }
  v28 = (**(uint64_t (***)(uint64_t, uint64_t))a3)(a3, v14);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3) != v28 - 1)
    fst::AddSubsequentialLoop<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(v27 + 1, a1[2]);
  fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>((void *)a1[2]);
  return a1;
}

void fst::AddSubsequentialLoop<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(unsigned int a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  int v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  float v19;
  float v20[4];
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  void *__p;
  char *v26;
  char *v27;
  int v28;

  __p = 0;
  v26 = 0;
  v27 = 0;
  v24 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v21);
  while (1)
  {
    if (!v21)
    {
      if ((int)v24 >= v22)
        goto LABEL_31;
      goto LABEL_7;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21))
      break;
    if (v21)
    {
      v4 = (*(uint64_t (**)(void))(*(_QWORD *)v21 + 24))();
      goto LABEL_8;
    }
LABEL_7:
    v4 = v24;
LABEL_8:
    v20[0] = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v4);
    v28 = 2139095040;
    if (v20[0] != INFINITY)
    {
      v5 = v26;
      if (v26 >= v27)
      {
        v7 = (char *)__p;
        v8 = (v26 - (_BYTE *)__p) >> 2;
        v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v10 = v27 - (_BYTE *)__p;
        if ((v27 - (_BYTE *)__p) >> 1 > v9)
          v9 = v10 >> 1;
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
          v11 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        if (v11)
        {
          v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v27, v11);
          v7 = (char *)__p;
          v5 = v26;
        }
        else
        {
          v12 = 0;
        }
        v13 = &v12[4 * v8];
        *(_DWORD *)v13 = v4;
        v6 = v13 + 4;
        while (v5 != v7)
        {
          v14 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *((_DWORD *)v13 - 1) = v14;
          v13 -= 4;
        }
        __p = v13;
        v26 = v6;
        v27 = &v12[4 * v11];
        if (v7)
          operator delete(v7);
      }
      else
      {
        *(_DWORD *)v26 = v4;
        v6 = v5 + 4;
      }
      v26 = v6;
    }
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 32))(v21);
    else
      ++v24;
  }
  if (v21)
    (*(void (**)(void))(*(_QWORD *)v21 + 8))();
LABEL_31:
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
  v21 = a1;
  v22 = 0;
  v23 = v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 208))(a2, v15, &v21);
  (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 184))(a2, v15, 0.0);
  v16 = (char *)__p;
  if (v26 == __p)
  {
    if (__p)
      goto LABEL_36;
  }
  else
  {
    v17 = 0;
    do
    {
      v18 = *(unsigned int *)&v16[4 * v17];
      v19 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v18);
      LODWORD(v20[0]) = a1;
      v20[1] = 0.0;
      v20[2] = v19;
      LODWORD(v20[3]) = v15;
      (*(void (**)(uint64_t, uint64_t, float *))(*(_QWORD *)a2 + 208))(a2, v18, v20);
      v16 = (char *)__p;
      v23 = *((_DWORD *)__p + v17++);
    }
    while (v17 < (v26 - (_BYTE *)__p) >> 2);
LABEL_36:
    v26 = v16;
    operator delete(v16);
  }
}

void sub_1ADA004DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(void *a1)
{
  void *v1[2];
  void *__p[2];
  __int128 v3;
  char v4;

  v1[0] = a1;
  v1[1] = &v4;
  *(_OWORD *)__p = 0u;
  v3 = 0u;
  fst::StateMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)a1, v1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1ADA00578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL kaldi::TrainingGraphCompiler::CompileGraphFromText(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _BOOL8 v6;
  uint64_t v7;
  int v8;
  void *v10;
  uint64_t v11;

  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v10);
  fst::MakeLinearAcceptor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>(a2, (uint64_t)&v10);
  v6 = kaldi::TrainingGraphCompiler::CompileGraph(a1, (uint64_t)&v10, a3);
  v10 = &unk_1E5D256C0;
  v7 = v11;
  if (v11)
  {
    v8 = *(_DWORD *)(v11 + 56) - 1;
    *(_DWORD *)(v11 + 56) = v8;
    if (!v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  return v6;
}

void sub_1ADA0062C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    fst::Compose<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>();
  _Unwind_Resume(exception_object);
}

uint64_t fst::MakeLinearAcceptor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _DWORD v8[4];

  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, v4);
  if (a1[1] == *a1)
  {
    v6 = v4;
  }
  else
  {
    v5 = 0;
    do
    {
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
      v8[0] = *(_DWORD *)(*a1 + 4 * v5);
      v8[1] = v8[0];
      v8[2] = 0;
      v8[3] = v6;
      (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)a2 + 208))(a2, v4, v8);
      ++v5;
      v4 = v6;
    }
    while (v5 < (uint64_t)(a1[1] - *a1) >> 2);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 184))(a2, v6, 0.0);
}

BOOL kaldi::TrainingGraphCompiler::CompileGraph(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _DWORD *v6;
  int v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  int v13;
  int v14;
  _QWORD *HTransducer;
  uint64_t v16;
  int v17;
  int v18;
  void *__p;
  __int128 v21;
  void *v22;
  void *v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  int v27;
  void *v28;
  uint64_t v29;
  void *v30;
  _DWORD *v31;

  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v30);
  fst::TableCompose<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(*(_QWORD *)(a1 + 16), a2, (uint64_t)&v30, a1 + 48);
  v6 = v31;
  v7 = v31[22];
  if (v7 == -1)
  {
    v30 = &unk_1E5D256C0;
LABEL_18:
    v18 = v6[14] - 1;
    v6[14] = v18;
    if (!v18)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    return v7 != -1;
  }
  v8 = *(_QWORD **)a1;
  v9 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) - 4);
  v10 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a1 + 24) != v10)
  {
    v11 = *(_DWORD *)(v10 - 4);
    if (v9 <= v11)
      v9 = v11;
  }
  v12 = (_QWORD *)operator new();
  v13 = (***(uint64_t (****)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 8));
  v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 8))(*(_QWORD *)(a1 + 8));
  fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::ContextFst(v12, v9 + 1, v8, a1 + 24, v13, v14);
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v28);
  LOBYTE(v22) = 1;
  HIDWORD(v22) = 0;
  fst::ComposeContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>((uint64_t)v12, (uint64_t)&v30, (uint64_t)&v28, &v22);
  v26 = 256;
  v27 = 981668463;
  v25 = *(_DWORD *)(a1 + 80);
  v22 = 0;
  v23 = 0;
  v24 = 0;
  HTransducer = kaldi::GetHTransducer((uint64_t *)(v12[1] + 240), *(_QWORD *)(a1 + 8), *(_QWORD *)a1, (uint64_t)&v25, (char **)&v22, -1);
  __p = (void *)0x43E800000;
  LOBYTE(v21) = 1;
  *(_QWORD *)((char *)&v21 + 4) = 0x100000002;
  fst::TableCompose<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)HTransducer, (uint64_t)&v28, (uint64_t)a3, (int32x2_t *)&__p);
  (*(void (**)(_QWORD *))(*a3 + 24))(a3);
  fst::DeterminizeStarInLog(a3, 0, -1, 0.00097656);
  if (v22 != v23)
  {
    fst::RemoveSomeInputSymbols<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>((uint64_t)&v22, (uint64_t)a3);
    if (*(_BYTE *)(a1 + 88))
      fst::RemoveEpsLocal<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)a3);
  }
  fst::MinimizeEncoded<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a3, 0.00097656);
  __p = 0;
  v21 = 0uLL;
  kaldi::AddSelfLoops(*(kaldi::TransitionModel **)a1, (uint64_t)&__p, *(unsigned __int8 *)(a1 + 89), a3, *(float *)(a1 + 84));
  (*(void (**)(_QWORD *))(*HTransducer + 8))(HTransducer);
  (*(void (**)(_QWORD *))(*v12 + 8))(v12);
  if (__p)
  {
    *(_QWORD *)&v21 = __p;
    operator delete(__p);
  }
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  v28 = &unk_1E5D256C0;
  v16 = v29;
  if (v29)
  {
    v17 = *(_DWORD *)(v29 + 56) - 1;
    *(_DWORD *)(v29 + 56) = v17;
    if (!v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  v6 = v31;
  v30 = &unk_1E5D256C0;
  if (v31)
    goto LABEL_18;
  return v7 != -1;
}

void sub_1ADA00A14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _DWORD *a18, uint64_t a19, _DWORD *a20)
{
  int v21;
  int v22;

  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  if (a18)
  {
    v21 = a18[14] - 1;
    a18[14] = v21;
    if (!v21)
      (*(void (**)(_DWORD *))(*(_QWORD *)a18 + 8))(a18);
  }
  if (a20)
  {
    v22 = a20[14] - 1;
    a20[14] = v22;
    if (!v22)
      (*(void (**)(_DWORD *))(*(_QWORD *)a20 + 8))(a20);
  }
  _Unwind_Resume(exception_object);
}

void fst::TableCompose<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int32x2_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  void *v13;
  uint64_t v14;
  char v15[8];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;

  v8 = (int32x2_t *)(a4 + 8);
  if (*(_DWORD *)(a4 + 24) == 1)
  {
    v15[0] = FLAGS_fst_default_cache_gc;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0;
    v9 = *(_QWORD **)a4;
    if (!*(_QWORD *)a4)
    {
      v9 = (_QWORD *)operator new();
      fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TableMatcher(v9, a1, 1, v8);
      *(_QWORD *)a4 = v9;
    }
    *(_QWORD *)&v17 = (*(uint64_t (**)(_QWORD *, _QWORD))(*v9 + 16))(v9, 0);
    v13 = &unk_1E5D19270;
    v14 = fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(a1, a2, (uint64_t)v15);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a3 + 168))(a3, &v13);
  }
  else
  {
    v15[0] = FLAGS_fst_default_cache_gc;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0;
    v10 = *(_QWORD **)a4;
    if (!*(_QWORD *)a4)
    {
      v10 = (_QWORD *)operator new();
      fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TableMatcher(v10, a2, 0, v8);
      *(_QWORD *)a4 = v10;
    }
    *((_QWORD *)&v17 + 1) = (*(uint64_t (**)(_QWORD *, _QWORD))(*v10 + 16))(v10, 0);
    v13 = &unk_1E5D19270;
    v14 = fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(a1, a2, (uint64_t)v15);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a3 + 168))(a3, &v13);
  }
  v13 = &unk_1E5D268B8;
  v11 = v14;
  if (v14)
  {
    v12 = *(_DWORD *)(v14 + 56) - 1;
    *(_DWORD *)(v14 + 56) = v12;
    if (!v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  if (*(_BYTE *)(a4 + 16))
    fst::Connect<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a3);
}

void sub_1ADA00CCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void fst::ComposeContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6;
  int v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char v14;

  LOBYTE(v10) = FLAGS_fst_default_cache_gc;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0;
  v8 = &unk_1E5D19270;
  v9 = fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(a1, a2, &v10);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a3 + 168))(a3, &v8);
  v8 = &unk_1E5D268B8;
  v6 = v9;
  if (v9)
  {
    v7 = *(_DWORD *)(v9 + 56) - 1;
    *(_DWORD *)(v9 + 56) = v7;
    if (!v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  if (*a4)
    fst::Connect<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a3);
}

void sub_1ADA00DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    fst::Compose<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>();
  _Unwind_Resume(exception_object);
}

void fst::TableCompose<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1, uint64_t a2, uint64_t a3, int32x2_t *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  void *v12;
  uint64_t v13;
  char v14[8];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char v18;

  if (a4[2].i32[0] == 1)
  {
    v14[0] = FLAGS_fst_default_cache_gc;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0;
    v8 = (_QWORD *)operator new();
    fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TableMatcher(v8, a1, 1, a4);
    *(_QWORD *)&v16 = v8;
    v12 = &unk_1E5D19270;
    v13 = fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(a1, a2, (uint64_t)v14);
  }
  else
  {
    v14[0] = FLAGS_fst_default_cache_gc;
    v15 = 0u;
    *(_QWORD *)&v16 = 0;
    v17 = 0u;
    v18 = 0;
    v9 = (_QWORD *)operator new();
    fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TableMatcher(v9, a2, 0, a4);
    *((_QWORD *)&v16 + 1) = v9;
    v12 = &unk_1E5D19270;
    v13 = fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(a1, a2, (uint64_t)v14);
  }
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a3 + 168))(a3, &v12);
  v12 = &unk_1E5D268B8;
  v10 = v13;
  if (v13)
  {
    v11 = *(_DWORD *)(v13 + 56) - 1;
    *(_DWORD *)(v13 + 56) = v11;
    if (!v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  if (a4[1].i8[0])
    fst::Connect<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a3);
}

void sub_1ADA00FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    fst::Compose<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>();
  _Unwind_Resume(exception_object);
}

_DWORD *fst::DeterminizeStarInLog(_QWORD *a1, _BYTE *a2, int a3, float a4)
{
  _DWORD *v8;
  _DWORD *result;
  int v10;
  int v11;
  _DWORD *v12;
  _QWORD v13[2];
  void *v14;
  _DWORD *v15;
  _QWORD v16[2];

  fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1);
  v16[0] = &unk_1E5D1AE10;
  v16[1] = a1;
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v14);
  v13[0] = &unk_1E5D21B88;
  v13[1] = &v14;
  fst::DeterminizeStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>((uint64_t)v16, (uint64_t)v13, a2, a3, 0, a4);
  v8 = v15;
  ++v15[14];
  result = (_DWORD *)a1[1];
  if (result && (v10 = result[14] - 1, (result[14] = v10) == 0))
  {
    result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    v12 = v15;
    a1[1] = v8;
    v14 = &unk_1E5D256C0;
    v8 = v12;
    if (!v12)
      return result;
  }
  else
  {
    a1[1] = v8;
    v14 = &unk_1E5D256C0;
  }
  v11 = v8[14] - 1;
  v8[14] = v11;
  if (!v11)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
  return result;
}

void sub_1ADA0114C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    fst::Compose<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>();
  _Unwind_Resume(exception_object);
}

void fst::RemoveSomeInputSymbols<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>(uint64_t a1, uint64_t a2)
{
  _BYTE v3[16];
  void *v4;
  void *__p;
  void *v6;
  _BYTE v7[16];
  void *v8;
  void *v9;
  void *v10;

  kaldi::ConstIntegerSet<int>::ConstIntegerSet((uint64_t)v7, a1);
  kaldi::ConstIntegerSet<int>::ConstIntegerSet((uint64_t)v3, (uint64_t)v7);
  fst::Map<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::RemoveSomeInputSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>(a2, (uint64_t)v3);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
  if (v4)
    operator delete(v4);
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
  if (v8)
    operator delete(v8);
}

void sub_1ADA011F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  kaldi::ConstIntegerSet<int>::~ConstIntegerSet(&a9);
  kaldi::ConstIntegerSet<int>::~ConstIntegerSet(&a17);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(uint64_t a1, uint64_t a2, _BYTE *a3, int a4, char a5, float a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[216];

  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 288))(a2, v12);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 280))(a2, v13);
  fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::DeterminizerStar((uint64_t)v16, a1, a4, a5, a6);
  fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Determinize((uint64_t)v16, a3);
  fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Output((uint64_t)v16, a2, 1);
  v14 = v16[90];
  fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::~DeterminizerStar((uint64_t)v16);
  return v14;
}

void sub_1ADA012F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::~DeterminizerStar((uint64_t)va);
  _Unwind_Resume(a1);
}

void fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~ArcPosingFst()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Start(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Final(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::NumArcs(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::NumInputEpsilons(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::NumOutputEpsilons(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Type(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8));
}

_QWORD *fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Copy(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E5D1AE10;
  result[1] = v3;
  return result;
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InputSymbols(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::OutputSymbols(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 120))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InitStateIterator(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = operator new();
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v4 = &unk_1E5D1C1E8;
  *(_DWORD *)(v4 + 24) = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 128))(v5, v4 + 8);
  *a2 = v4;
  return result;
}

void sub_1ADA01478(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10A1C406469E31DLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InitArcIterator(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  v6 = (_QWORD *)operator new();
  v7 = *(_QWORD *)(a1 + 8);
  *v6 = &unk_1E5D1A200;
  v6[5] = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v7 + 136))(v7, a2, v6 + 1);
  *a3 = v6;
  return result;
}

void sub_1ADA01514(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F1C40B8D9E71ALL);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::NumStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 160))(*(_QWORD *)(a1 + 8));
}

_QWORD *fst::StateIterator<fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~StateIterator(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E5D1C1E8;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void fst::StateIterator<fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~StateIterator(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_1E5D1C1E8;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::StateIterator<fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done_(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  else
    return *(_DWORD *)(a1 + 24) >= *(_DWORD *)(a1 + 16);
}

uint64_t fst::StateIterator<fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value_(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  else
    return *(unsigned int *)(a1 + 24);
}

uint64_t fst::StateIterator<fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Next_(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t fst::StateIterator<fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Reset_(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

_QWORD *fst::ArcIterator<fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ArcIterator(_QWORD *a1)
{
  uint64_t v2;
  _DWORD *v3;

  *a1 = &unk_1E5D1A200;
  v2 = a1[1];
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  else
  {
    v3 = (_DWORD *)a1[4];
    if (v3)
      --*v3;
  }
  return a1;
}

void fst::ArcIterator<fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ArcIterator(_QWORD *a1)
{
  uint64_t v2;
  _DWORD *v3;

  *a1 = &unk_1E5D1A200;
  v2 = a1[1];
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  else
  {
    v3 = (_DWORD *)a1[4];
    if (v3)
      --*v3;
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ArcIterator<fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done_(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  else
    return a1[5] >= a1[3];
}

uint64_t fst::ArcIterator<fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value_(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  else
    return a1[2] + 16 * a1[5];
}

uint64_t fst::ArcIterator<fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Next_(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  ++*(_QWORD *)(a1 + 40);
  return result;
}

uint64_t fst::ArcIterator<fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Position_(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  else
    return *(_QWORD *)(a1 + 40);
}

uint64_t fst::ArcIterator<fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Reset_(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

uint64_t fst::ArcIterator<fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Seek_(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  *(_QWORD *)(a1 + 40) = a2;
  return result;
}

uint64_t fst::ArcIterator<fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Flags_(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 72))(v1);
  else
    return 15;
}

uint64_t fst::ArcIterator<fst::ArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetFlags_(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 80))(result);
  return result;
}

void fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~MutableArcPosingFst()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Start(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24));
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Final(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24));
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::NumArcs(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24));
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::NumInputEpsilons(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 48))(*(_QWORD *)(a1 + 24));
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::NumOutputEpsilons(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 56))(*(_QWORD *)(a1 + 24));
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 64))(*(_QWORD *)(a1 + 24));
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Type(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 72))(*(_QWORD *)(a1 + 24));
}

_QWORD *fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Copy(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E5D21A48;
  result[1] = v3;
  v4 = *(_QWORD *)(a1 + 24);
  result[2] = &unk_1E5D21B88;
  result[3] = v4;
  return result;
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InputSymbols(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 112))(*(_QWORD *)(a1 + 24));
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::OutputSymbols(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 120))(*(_QWORD *)(a1 + 24));
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InitStateIterator(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = operator new();
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)v4 = &unk_1E5D1C1E8;
  *(_DWORD *)(v4 + 24) = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 128))(v5, v4 + 8);
  *a2 = v4;
  return result;
}

void sub_1ADA019C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10A1C406469E31DLL);
  _Unwind_Resume(a1);
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InitArcIterator(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  v6 = (_QWORD *)operator new();
  v7 = *(_QWORD *)(a1 + 24);
  *v6 = &unk_1E5D1A3A0;
  v6[5] = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v7 + 136))(v7, a2, v6 + 1);
  *a3 = v6;
  return result;
}

void sub_1ADA01A60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F1C40B8D9E71ALL);
  _Unwind_Resume(a1);
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::NumStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 160))(*(_QWORD *)(a1 + 24));
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetStart(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 176))(*(_QWORD *)(a1 + 24));
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetFinal(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 184))(*(_QWORD *)(a1 + 24));
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetProperties(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 192))(*(_QWORD *)(a1 + 24));
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddState(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 200))(*(_QWORD *)(a1 + 24));
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddArc(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 208))(*(_QWORD *)(a1 + 24));
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::DeleteStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 216))(*(_QWORD *)(a1 + 24));
}

{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 224))(*(_QWORD *)(a1 + 24));
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::DeleteArcs(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 232))(*(_QWORD *)(a1 + 24));
}

{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 240))(*(_QWORD *)(a1 + 24));
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ReserveStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 248))(*(_QWORD *)(a1 + 24));
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ReserveArcs(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 256))(*(_QWORD *)(a1 + 24));
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::MutableInputSymbols(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 264))(*(_QWORD *)(a1 + 24));
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::MutableOutputSymbols(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 272))(*(_QWORD *)(a1 + 24));
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetInputSymbols(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 280))(*(_QWORD *)(a1 + 24));
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetOutputSymbols(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 288))(*(_QWORD *)(a1 + 24));
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InitMutableArcIterator(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  v6 = (_QWORD *)operator new();
  v7 = *(_QWORD *)(a1 + 24);
  *v6 = &unk_1E5D20E70;
  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v7 + 296))(v7, a2, v6 + 1);
  *a3 = v6;
  return result;
}

void sub_1ADA01BF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::operator=(uint64_t a1, uint64_t a2)
{
  _QWORD v4[2];

  v4[0] = &unk_1E5D1AEC8;
  v4[1] = a2;
  (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 24) + 168))(*(_QWORD *)(a1 + 24), v4);
  return a1;
}

void `non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~MutableArcPosingFst()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t `non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t `non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Start(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

uint64_t `non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Final(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

uint64_t `non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::NumArcs(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

uint64_t `non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::NumInputEpsilons(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
}

uint64_t `non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::NumOutputEpsilons(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t `non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
}

uint64_t `non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Type(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8));
}

_QWORD *`non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Copy(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 - 8);
  *result = &unk_1E5D21A48;
  result[1] = v3;
  v4 = *(_QWORD *)(a1 + 8);
  result[2] = &unk_1E5D21B88;
  result[3] = v4;
  return result;
}

uint64_t `non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InputSymbols(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8));
}

uint64_t `non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::OutputSymbols(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 120))(*(_QWORD *)(a1 + 8));
}

uint64_t `non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InitStateIterator(uint64_t a1, uint64_t *a2)
{
  return fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InitStateIterator(a1 - 16, a2);
}

uint64_t `non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InitArcIterator(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InitArcIterator(a1 - 16, a2, a3);
}

uint64_t `non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::NumStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 160))(*(_QWORD *)(a1 + 8));
}

uint64_t `covariant return thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::operator=(uint64_t a1, uint64_t a2)
{
  _QWORD v4[2];

  v4[0] = &unk_1E5D1AEC8;
  v4[1] = a2;
  (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 8) + 168))(*(_QWORD *)(a1 + 8), v4);
  return a1;
}

uint64_t `non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetStart(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 176))(*(_QWORD *)(a1 + 8));
}

uint64_t `non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetFinal(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
}

uint64_t `non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetProperties(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8));
}

uint64_t `non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddState(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 200))(*(_QWORD *)(a1 + 8));
}

uint64_t `non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddArc(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 208))(*(_QWORD *)(a1 + 8));
}

uint64_t `non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::DeleteStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 216))(*(_QWORD *)(a1 + 8));
}

{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 224))(*(_QWORD *)(a1 + 8));
}

uint64_t `non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::DeleteArcs(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 232))(*(_QWORD *)(a1 + 8));
}

{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 240))(*(_QWORD *)(a1 + 8));
}

uint64_t `non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ReserveStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 248))(*(_QWORD *)(a1 + 8));
}

uint64_t `non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ReserveArcs(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 256))(*(_QWORD *)(a1 + 8));
}

uint64_t `non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::MutableInputSymbols(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 264))(*(_QWORD *)(a1 + 8));
}

uint64_t `non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::MutableOutputSymbols(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 272))(*(_QWORD *)(a1 + 8));
}

uint64_t `non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetInputSymbols(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 280))(*(_QWORD *)(a1 + 8));
}

uint64_t `non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetOutputSymbols(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 288))(*(_QWORD *)(a1 + 8));
}

uint64_t `non-virtual thunk to'fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InitMutableArcIterator(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InitMutableArcIterator(a1 - 16, a2, a3);
}

_QWORD *fst::ArcIterator<fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ArcIterator(_QWORD *a1)
{
  uint64_t v2;
  _DWORD *v3;

  *a1 = &unk_1E5D1A3A0;
  v2 = a1[1];
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  else
  {
    v3 = (_DWORD *)a1[4];
    if (v3)
      --*v3;
  }
  return a1;
}

void fst::ArcIterator<fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ArcIterator(_QWORD *a1)
{
  uint64_t v2;
  _DWORD *v3;

  *a1 = &unk_1E5D1A3A0;
  v2 = a1[1];
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  else
  {
    v3 = (_DWORD *)a1[4];
    if (v3)
      --*v3;
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ArcIterator<fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done_(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  else
    return a1[5] >= a1[3];
}

uint64_t fst::ArcIterator<fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value_(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  else
    return a1[2] + 16 * a1[5];
}

uint64_t fst::ArcIterator<fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Next_(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  ++*(_QWORD *)(a1 + 40);
  return result;
}

uint64_t fst::ArcIterator<fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Position_(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  else
    return *(_QWORD *)(a1 + 40);
}

uint64_t fst::ArcIterator<fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Reset_(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

uint64_t fst::ArcIterator<fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Seek_(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  *(_QWORD *)(a1 + 40) = a2;
  return result;
}

uint64_t fst::ArcIterator<fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Flags_(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 72))(v1);
  else
    return 15;
}

uint64_t fst::ArcIterator<fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetFlags_(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 80))(result);
  return result;
}

_QWORD *fst::MutableArcIterator<fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~MutableArcIterator(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E5D20E70;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void fst::MutableArcIterator<fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~MutableArcIterator(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_1E5D20E70;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::MutableArcIterator<fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::MutableArcIterator<fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::MutableArcIterator<fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Next_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::MutableArcIterator<fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Position_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::MutableArcIterator<fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Reset_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::MutableArcIterator<fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Seek_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::MutableArcIterator<fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Flags_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::MutableArcIterator<fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetFlags_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::MutableArcIterator<fst::MutableArcPosingFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetValue_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 88))(*(_QWORD *)(a1 + 8));
}

void fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>::~ArcPosingFst()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Start(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Final(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>::NumArcs(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>::NumInputEpsilons(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>::NumOutputEpsilons(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Type(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8));
}

_QWORD *fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Copy(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E5D1AEC8;
  result[1] = v3;
  return result;
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>::InputSymbols(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>::OutputSymbols(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 120))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>::InitStateIterator(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = operator new();
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v4 = &unk_1E5D1C228;
  *(_DWORD *)(v4 + 24) = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 128))(v5, v4 + 8);
  *a2 = v4;
  return result;
}

void sub_1ADA0234C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10A1C406469E31DLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>::InitArcIterator(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  v6 = (_QWORD *)operator new();
  v7 = *(_QWORD *)(a1 + 8);
  *v6 = &unk_1E5D1A268;
  v6[5] = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v7 + 136))(v7, a2, v6 + 1);
  *a3 = v6;
  return result;
}

void sub_1ADA023E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F1C40B8D9E71ALL);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>::NumStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 160))(*(_QWORD *)(a1 + 8));
}

_QWORD *fst::StateIterator<fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~StateIterator(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E5D1C228;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void fst::StateIterator<fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~StateIterator(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_1E5D1C228;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::StateIterator<fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Done_(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  else
    return *(_DWORD *)(a1 + 24) >= *(_DWORD *)(a1 + 16);
}

uint64_t fst::StateIterator<fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Value_(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  else
    return *(unsigned int *)(a1 + 24);
}

uint64_t fst::StateIterator<fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Next_(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t fst::StateIterator<fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Reset_(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

_QWORD *fst::ArcIterator<fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~ArcIterator(_QWORD *a1)
{
  uint64_t v2;
  _DWORD *v3;

  *a1 = &unk_1E5D1A268;
  v2 = a1[1];
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  else
  {
    v3 = (_DWORD *)a1[4];
    if (v3)
      --*v3;
  }
  return a1;
}

void fst::ArcIterator<fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~ArcIterator(_QWORD *a1)
{
  uint64_t v2;
  _DWORD *v3;

  *a1 = &unk_1E5D1A268;
  v2 = a1[1];
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  else
  {
    v3 = (_DWORD *)a1[4];
    if (v3)
      --*v3;
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ArcIterator<fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Done_(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  else
    return a1[5] >= a1[3];
}

uint64_t fst::ArcIterator<fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Value_(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  else
    return a1[2] + 16 * a1[5];
}

uint64_t fst::ArcIterator<fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Next_(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  ++*(_QWORD *)(a1 + 40);
  return result;
}

uint64_t fst::ArcIterator<fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Position_(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  else
    return *(_QWORD *)(a1 + 40);
}

uint64_t fst::ArcIterator<fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Reset_(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

uint64_t fst::ArcIterator<fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Seek_(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  *(_QWORD *)(a1 + 40) = a2;
  return result;
}

uint64_t fst::ArcIterator<fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Flags_(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 72))(v1);
  else
    return 15;
}

uint64_t fst::ArcIterator<fst::ArcPosingFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::SetFlags_(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 80))(result);
  return result;
}

void fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Determinize(uint64_t a1, _BYTE *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  fst *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  std::runtime_error *exception;
  void *__p;
  _DWORD *v24;
  _DWORD *v25;
  __int128 v26;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 24))(*(_QWORD *)(a1 + 72));
  if (v4 != -1)
  {
    v5 = v4;
    v6 = *(_DWORD *)(a1 + 204);
    __p = 0;
    v24 = 0;
    v25 = 0;
    v7 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,int>>>((uint64_t)&v25, 1uLL);
    v9 = &v7[3 * v8];
    *v7 = v5;
    v7[1] = v6;
    v7[2] = 0;
    v10 = v7 + 3;
    v12 = __p;
    v11 = v24;
    if (v24 != __p)
    {
      do
      {
        v13 = *(_QWORD *)(v11 - 3);
        v11 -= 3;
        v14 = v11[2];
        *(_QWORD *)(v7 - 3) = v13;
        v7 -= 3;
        v7[2] = v14;
      }
      while (v11 != v12);
      v11 = __p;
    }
    __p = v7;
    v24 = v10;
    v25 = v9;
    if (v11)
      operator delete(v11);
    v24 = v10;
    fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetToStateId(a1, (unint64_t)&__p);
    if (__p)
    {
      v24 = __p;
      operator delete(__p);
    }
    v15 = *(_QWORD *)(a1 + 40);
    if (v15)
    {
      while (1)
      {
        v16 = *(_QWORD *)(a1 + 32);
        v26 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + ((v16 >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * v16);
        *(_QWORD *)(a1 + 32) = v16 + 1;
        *(_QWORD *)(a1 + 40) = v15 - 1;
        std::deque<std::pair<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> *,int>>::__maybe_remove_front_spare[abi:ne180100](a1, 1);
        fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::ProcessSubset((fst *)a1, (uint64_t)&v26);
        if (a2 && *a2)
          fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Debug((fst *)a1);
        v18 = *(unsigned int *)(a1 + 84);
        if ((int)v18 >= 1 && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3) > v18)
          break;
        v15 = *(_QWORD *)(a1 + 40);
        if (!v15)
          goto LABEL_21;
      }
      if (!*(_BYTE *)(a1 + 89))
      {
        v20 = (_QWORD *)fst::cerr(v17);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Determinization aborted since passed ", 37);
        v21 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" states.\n", 9);
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "max-states reached in determinization");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Determinization terminated since passed ", 40);
        v19 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" states, partial results will be generated.", 43);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      }
      *(_BYTE *)(a1 + 90) = 1;
    }
  }
LABEL_21:
  *(_BYTE *)(a1 + 88) = 1;
}

void sub_1ADA0295C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;

  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

void fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Output(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  int **v10;
  int *v11;
  int *v12;
  __n128 v13;
  std::vector<unsigned int>::pointer end;
  std::vector<unsigned int>::pointer begin;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  unint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int *v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  std::vector<unsigned int> *p_p;
  int v36;
  int v37;
  std::vector<unsigned int> __p;

  if ((a3 & 1) != 0)
  {
    *(_BYTE *)(a1 + 88) = 0;
    v5 = (_QWORD *)(a1 + 48);
    v6 = *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48);
    fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::FreeMostMemory(a1);
  }
  else
  {
    v5 = (_QWORD *)(a1 + 48);
    v6 = *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48);
  }
  v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  if (!(_DWORD)v7)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, 0xFFFFFFFFLL);
    return;
  }
  v32 = a1;
  if ((int)v7 < 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 176))(a2, 0);
    goto LABEL_48;
  }
  v8 = v7;
  do
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
    --v8;
  }
  while (v8);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 176))(a2, 0);
  v9 = 0;
  v33 = v7;
  do
  {
    v10 = (int **)(*v5 + 24 * v9);
    v11 = *v10;
    v12 = v10[1];
    while (v11 != v12)
    {
      memset(&__p, 0, sizeof(__p));
      fst::StringRepository<int,int>::SeqOfId(v32 + 136, v11[1], &__p);
      begin = __p.__begin_;
      end = __p.__end_;
      if (v11[2] != -1)
      {
        if ((std::vector<unsigned int>::pointer)((char *)__p.__end_ - (char *)__p.__begin_) <= (std::vector<unsigned int>::pointer)4)
        {
          v37 = v11[2];
          v18 = v9;
        }
        else
        {
          v16 = 0;
          v17 = v9;
          do
          {
            v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
            v37 = v18;
            v19 = 0;
            if (!v16)
              v19 = v11[3];
            v36 = v19;
            v20 = *v11;
            if (v16)
              v20 = 0;
            LODWORD(p_p) = v20;
            HIDWORD(p_p) = __p.__begin_[v16];
            (*(void (**)(uint64_t, uint64_t, std::vector<unsigned int> **))(*(_QWORD *)a2 + 208))(a2, v17, &p_p);
            begin = __p.__begin_;
            end = __p.__end_;
            v21 = v16 + 2;
            ++v16;
            v17 = v18;
          }
          while (v21 < __p.__end_ - __p.__begin_);
          v37 = v11[2];
          if ((std::vector<unsigned int>::pointer)((char *)__p.__end_ - (char *)__p.__begin_) > (std::vector<unsigned int>::pointer)7)
          {
            v22 = 0;
            v23 = 0;
LABEL_31:
            v36 = v23;
            if (v22)
              v28 = *v11;
            else
              v28 = 0;
            LODWORD(p_p) = v28;
            if (end == begin)
              v29 = 0;
            else
              v29 = *(end - 1);
            HIDWORD(p_p) = v29;
            (*(void (**)(uint64_t, uint64_t, std::vector<unsigned int> **))(*(_QWORD *)a2 + 208))(a2, v18, &p_p);
            goto LABEL_38;
          }
        }
        v23 = v11[3];
        v22 = 1;
        goto LABEL_31;
      }
      v24 = v9;
      if (__p.__end_ == __p.__begin_)
        goto LABEL_27;
      v25 = 0;
      v26 = v9;
      do
      {
        v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
        v37 = v24;
        v27 = 0;
        if (!v25)
          v27 = v11[3];
        v36 = v27;
        LODWORD(p_p) = 0;
        HIDWORD(p_p) = __p.__begin_[v25];
        (*(void (**)(uint64_t, uint64_t, std::vector<unsigned int> **))(*(_QWORD *)a2 + 208))(a2, v26, &p_p);
        ++v25;
        v26 = v24;
      }
      while (v25 < __p.__end_ - __p.__begin_);
      v13.n128_u32[0] = 0;
      if (__p.__end_ == __p.__begin_)
LABEL_27:
        v13.n128_u32[0] = v11[3];
      (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)a2 + 184))(a2, v24, v13);
LABEL_38:
      if (__p.__begin_)
      {
        __p.__end_ = __p.__begin_;
        operator delete(__p.__begin_);
      }
      v11 += 4;
    }
    if (a3)
    {
      v30 = *v10;
      v10[1] = 0;
      v10[2] = 0;
      *v10 = 0;
      if (v30)
        operator delete(v30);
    }
    ++v9;
  }
  while (v9 != v33);
LABEL_48:
  if ((a3 & 1) != 0)
  {
    *(_OWORD *)&__p.__begin_ = *(_OWORD *)(v32 + 48);
    v31 = *(unsigned int **)(v32 + 64);
    *(_QWORD *)(v32 + 56) = 0;
    *(_QWORD *)(v32 + 64) = 0;
    *(_QWORD *)(v32 + 48) = 0;
    __p.__end_cap_.__value_ = v31;
    fst::StringRepository<int,int>::Destroy(v32 + 136);
    p_p = &__p;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  }
}

void sub_1ADA02D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::DeterminizerStar(uint64_t a1, uint64_t a2, int a3, char a4, float a5)
{
  uint64_t v10;
  int v11;
  int v12;
  size_t v13;

  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v10 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  *(float *)(a1 + 92) = a5;
  *(_QWORD *)(a1 + 72) = v10;
  *(float *)(a1 + 80) = a5;
  *(_DWORD *)(a1 + 84) = a3;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 89) = a4;
  *(_BYTE *)(a1 + 90) = 0;
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 1, 0))
  {
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 160))(a2);
    if (v11 >= 0)
      v12 = v11;
    else
      v12 = v11 + 1;
    v13 = (v12 >> 1) + 3;
  }
  else
  {
    v13 = 20;
  }
  std::unordered_map<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,std::allocator<std::pair<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const* const,int>>>::unordered_map(a1 + 96, v13, a1 + 91, (int *)(a1 + 92));
  *(_QWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(_OWORD *)(a1 + 200) = xmmword_1AE14E580;
  return a1;
}

void sub_1ADA02E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  a10 = (void **)(v10 + 48);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::deque<std::pair<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> *,int>>::~deque[abi:ne180100]((_QWORD *)v10);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,std::allocator<std::pair<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const* const,int>>>::unordered_map(uint64_t a1, size_t a2, uint64_t a3, int *a4)
{
  int v5;

  v5 = *a4;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_DWORD *)(a1 + 36) = v5;
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1ADA02EE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::pair<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> *,int>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 128;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 256;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

uint64_t fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetToStateId(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t **v5;
  uint64_t v6;
  uint64_t *v7;
  __n128 __p;
  uint64_t v10;
  uint64_t *v11;

  v4 = a1 + 96;
  __p.n128_u64[0] = a2;
  v5 = std::__hash_table<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,std::__unordered_map_hasher<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>>>::find<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*>((_QWORD *)(a1 + 96), (uint64_t **)&__p);
  if (v5)
    return *((unsigned int *)v5 + 6);
  v7 = (uint64_t *)operator new();
  v7[1] = 0;
  v7[2] = 0;
  *v7 = 0;
  std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>>::__init_with_size[abi:ne180100]<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element*,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element*>(v7, *(const void **)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2));
  v11 = v7;
  v6 = -1431655765 * ((*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3);
  __p.n128_u64[0] = (unint64_t)&v11;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,std::__unordered_map_hasher<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>>>::__emplace_unique_key_args<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::piecewise_construct_t const&,std::tuple<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const* const&>,std::tuple<>>(v4, &v11, (uint64_t)&std::piecewise_construct, &__p)+ 6) = v6;
  __p = 0uLL;
  v10 = 0;
  std::vector<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc>>>::push_back[abi:ne180100]((uint64_t *)(a1 + 48), (uint64_t)&__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (*(_BYTE *)(a1 + 89))
  {
    __p.n128_u64[0] = (unint64_t)v11;
    __p.n128_u32[2] = v6;
    std::deque<std::pair<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> *,int>>::push_back((_QWORD *)a1, &__p);
  }
  else
  {
    __p.n128_u64[0] = (unint64_t)v11;
    __p.n128_u32[2] = v6;
    std::deque<std::pair<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> *,int>>::push_front(a1, &__p);
  }
  return v6;
}

void sub_1ADA030C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::ProcessSubset(fst *a1, uint64_t a2)
{
  const void **v3;
  int v4;
  void *__p;
  void *v6;
  uint64_t v7;

  v3 = *(const void ***)a2;
  v4 = *(_DWORD *)(a2 + 8);
  __p = 0;
  v6 = 0;
  v7 = 0;
  fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::EpsilonClosure((uint64_t)a1, v3, (uint64_t)&__p);
  fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::ProcessFinal((uint64_t)a1, (float **)&__p, v4);
  fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::ProcessTransitions(a1, (float **)&__p, v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_1ADA03174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Debug(fst *a1)
{
  _QWORD *v2;
  fst *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  fst *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int *v15;
  unint64_t v16;
  unint64_t v17;
  char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  fst *begin;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  fst *v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v46;
  std::vector<unsigned int> __p;
  char *v48;
  char *v49;
  char *v50;
  _BYTE v51[32];
  uint64_t v52;
  char v53;

  v2 = (_QWORD *)fst::cerr(a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Debug function called (probably SIGUSR1 caught).\n", 49);
  memset(v51, 0, sizeof(v51));
  v52 = 0x3A8000003F800000;
  std::__hash_table<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,std::__unordered_map_hasher<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>>>::swap((uint64_t)v51, (uint64_t)a1 + 96);
  v3 = (fst *)std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v51);
  v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a1 + 7) - *((_QWORD *)a1 + 6)) >> 3);
  v5 = v4 - 2;
  if (v4 <= 2)
  {
    v6 = (_QWORD *)fst::cerr(v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, "Nothing to trace back");
    exit(1);
  }
  v7 = (fst *)std::vector<int>::vector((std::vector<int> *)v51, v4 - 1, &fst::kNoStateId);
  if (v5)
  {
    v8 = 0;
    v9 = *((_QWORD *)a1 + 6);
    do
    {
      v10 = (uint64_t *)(v9 + 24 * v8);
      v11 = *v10;
      v12 = v10[1] - *v10;
      if (v12)
      {
        v13 = v12 >> 4;
        v14 = *(_QWORD *)v51;
        if (v13 <= 1)
          v13 = 1;
        v15 = (int *)(v11 + 8);
        do
        {
          v17 = *v15;
          v15 += 4;
          v16 = v17;
          if (v5 >= v17 && v8 < v16)
            *(_DWORD *)(v14 + 4 * v16) = v8;
          --v13;
        }
        while (v13);
      }
      ++v8;
    }
    while (v8 != v5);
    v48 = 0;
    v49 = 0;
    v50 = 0;
    if ((v5 - 1) <= 0xFFFFFFFD)
    {
      v19 = 0;
      do
      {
        v20 = v5;
        LODWORD(v5) = *(_DWORD *)(*(_QWORD *)v51 + 4 * (int)v5);
        v21 = *(_QWORD *)(*((_QWORD *)a1 + 6) + 24 * (int)v5);
        v22 = *(_QWORD *)(*((_QWORD *)a1 + 6) + 24 * (int)v5 + 8) - v21;
        if (v22)
        {
          v23 = v22 >> 4;
          if (v23 <= 1)
            v23 = 1;
          v24 = (unsigned int *)(v21 + 4);
          while (v24[1] != v20)
          {
            v24 += 4;
            if (!--v23)
              goto LABEL_43;
          }
          v25 = *(v24 - 1);
          v26 = *v24;
          if (v19 >= v50)
          {
            v27 = (v19 - v48) >> 3;
            if ((unint64_t)(v27 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v28 = (v50 - v48) >> 2;
            if (v28 <= v27 + 1)
              v28 = v27 + 1;
            if ((unint64_t)(v50 - v48) >= 0x7FFFFFFFFFFFFFF8)
              v29 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v29 = v28;
            if (v29)
              v7 = (fst *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v50, v29);
            else
              v7 = 0;
            v30 = (uint64_t *)((char *)v7 + 8 * v27);
            *v30 = v25 | (v26 << 32);
            v19 = (char *)(v30 + 1);
            v32 = v48;
            v31 = v49;
            if (v49 != v48)
            {
              do
              {
                v33 = *((_QWORD *)v31 - 1);
                v31 -= 8;
                *--v30 = v33;
              }
              while (v31 != v32);
              v31 = v48;
            }
            v48 = (char *)v30;
            v49 = v19;
            v50 = (char *)v7 + 8 * v29;
            if (v31)
              operator delete(v31);
          }
          else
          {
            *(_QWORD *)v19 = v25 | (v26 << 32);
            v19 += 8;
          }
          v49 = v19;
        }
LABEL_43:
        ;
      }
      while ((v5 - 1) < 0xFFFFFFFE);
    }
    if ((_DWORD)v5 == -1)
    {
      v34 = (_QWORD *)fst::cerr(v7);
      v7 = (fst *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Traceback did not reach start state (possibly debug-code error)", 63);
    }
  }
  else
  {
    v48 = 0;
    v49 = 0;
    v50 = 0;
  }
  v35 = (_QWORD *)fst::cerr(v7);
  begin = (fst *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Traceback below (or on standard error) in format ilabel (olabel olabel) ilabel (olabel) ...\n", 92);
  if (v49 - v48 >= 1)
  {
    v37 = (unint64_t)(v49 - v48) >> 3;
    v38 = (uint64_t)a1 + 136;
    do
    {
      fst::cerr(begin);
      v39 = (_QWORD *)std::ostream::operator<<();
      LOBYTE(__p.__begin_) = 32;
      v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)&__p, 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"( ", 2);
      memset(&__p, 0, sizeof(__p));
      fst::StringRepository<int,int>::SeqOfId(v38, *(_DWORD *)&v48[8 * v37 - 4], &__p);
      if (__p.__end_ != __p.__begin_)
      {
        v42 = 0;
        do
        {
          fst::cerr(v41);
          v43 = (_QWORD *)std::ostream::operator<<();
          v53 = 32;
          v41 = (fst *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v53, 1);
          ++v42;
        }
        while (v42 < __p.__end_ - __p.__begin_);
      }
      v44 = (_QWORD *)fst::cerr(v41);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)") ", 2);
      begin = (fst *)__p.__begin_;
      if (__p.__begin_)
      {
        __p.__end_ = __p.__begin_;
        operator delete(__p.__begin_);
      }
    }
    while (v37-- > 1);
  }
  v46 = (_QWORD *)fst::cerr(begin);
  LOBYTE(__p.__begin_) = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)&__p, 1);
  exit(1);
}

void sub_1ADA03528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  if (a15)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc>>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1ADA036A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

int64x2_t std::deque<std::pair<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> *,int>>::push_front(uint64_t a1, _OWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  int64x2_t result;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    std::deque<std::pair<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> *,int>>::__add_front_capacity((void **)a1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 8 * (v4 >> 8));
  v7 = *v6 + 16 * v4;
  if (*(_QWORD *)(a1 + 16) == v5)
    v7 = 0;
  if (v7 == *v6)
    v7 = *(v6 - 1) + 4096;
  *(_OWORD *)(v7 - 16) = *a2;
  result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1AE140E90);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

__n128 std::deque<std::pair<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> *,int>>::push_back(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::pair<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> *,int>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

uint64_t **std::__hash_table<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,std::__unordered_map_hasher<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>>>::find<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*>(_QWORD *a1, uint64_t **a2)
{
  int *v3;
  int *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int8x8_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t ***v13;
  uint64_t **v14;
  float *v15;
  unint64_t v16;

  v3 = (int *)**a2;
  v4 = (int *)(*a2)[1];
  if (v3 == v4)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    do
    {
      v7 = *v3;
      v8 = v3[1];
      v3 += 3;
      v5 = v7 + v5 * v6 + 103333 * v8;
      v6 *= 23531;
    }
    while (v3 != v4);
  }
  v9 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v9)
    return 0;
  v10 = (uint8x8_t)vcnt_s8(v9);
  v10.i16[0] = vaddlv_u8(v10);
  v11 = v10.u32[0];
  if (v10.u32[0] > 1uLL)
  {
    v12 = v5;
    if (v5 >= *(_QWORD *)&v9)
      v12 = v5 % *(_QWORD *)&v9;
  }
  else
  {
    v12 = (*(_QWORD *)&v9 - 1) & v5;
  }
  v13 = *(uint64_t ****)(*a1 + 8 * v12);
  if (!v13)
    return 0;
  v14 = *v13;
  if (*v13)
  {
    v15 = (float *)a1 + 9;
    do
    {
      v16 = (unint64_t)v14[1];
      if (v16 == v5)
      {
        if ((fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual::operator()(v15, (unint64_t *)v14[2], *a2) & 1) != 0)return v14;
      }
      else
      {
        if (v11 > 1)
        {
          if (v16 >= *(_QWORD *)&v9)
            v16 %= *(_QWORD *)&v9;
        }
        else
        {
          v16 &= *(_QWORD *)&v9 - 1;
        }
        if (v16 != v12)
          return 0;
      }
      v14 = (uint64_t **)*v14;
    }
    while (v14);
  }
  return v14;
}

uint64_t fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual::operator()(float *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  float v6;
  float v7;

  v4 = *a2;
  v3 = a2[1];
  v5 = *a3;
  if (v3 - *a2 != a3[1] - *a3)
    return 0;
  while (v4 < v3)
  {
    if (*(_DWORD *)v4 != *(_DWORD *)v5 || *(_DWORD *)(v4 + 4) != *(_DWORD *)(v5 + 4))
      return 0;
    v6 = *(float *)(v4 + 8);
    v7 = *(float *)(v5 + 8);
    if (v7 > (float)(*a1 + v6) || v6 > (float)(*a1 + v7))
      return 0;
    v4 += 12;
    v5 += 12;
  }
  return 1;
}

_QWORD *std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>>::__init_with_size[abi:ne180100]<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element*,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1ADA039C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,std::__unordered_map_hasher<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>>>::__emplace_unique_key_args<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::piecewise_construct_t const&,std::tuple<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const* const&>,std::tuple<>>(uint64_t a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  int *v8;
  int *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint8x8_t v15;
  unint64_t v16;
  void **v17;
  void *i;
  unint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v8 = (int *)**a2;
  v9 = (int *)(*a2)[1];
  if (v8 == v9)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    do
    {
      v12 = *v8;
      v13 = v8[1];
      v8 += 3;
      v10 = v12 + v10 * v11 + 103333 * v13;
      v11 *= 23531;
    }
    while (v8 != v9);
  }
  v14 = *(_QWORD *)(a1 + 8);
  if (v14)
  {
    v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v15.i16[0] = vaddlv_u8(v15);
    v16 = v15.u32[0];
    if (v15.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v14)
        v4 = v10 % v14;
    }
    else
    {
      v4 = (v14 - 1) & v10;
    }
    v17 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v17)
    {
      for (i = *v17; i; i = *(void **)i)
      {
        v19 = *((_QWORD *)i + 1);
        if (v19 == v10)
        {
          if ((fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual::operator()((float *)(a1 + 36), *((unint64_t **)i + 2), *a2) & 1) != 0)return i;
        }
        else
        {
          if (v16 > 1)
          {
            if (v19 >= v14)
              v19 %= v14;
          }
          else
          {
            v19 &= v14 - 1;
          }
          if (v19 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  *((_QWORD *)i + 2) = **a4;
  *((_DWORD *)i + 6) = 0;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v14 || (float)(v21 * (float)v14) < v20)
  {
    v22 = 1;
    if (v14 >= 3)
      v22 = (v14 & (v14 - 1)) != 0;
    v23 = v22 | (2 * v14);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v25);
    v14 = *(_QWORD *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v10 >= v14)
        v4 = v10 % v14;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v14 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)i = *v27;
LABEL_43:
    *v27 = i;
    goto LABEL_44;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v26 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v28 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v28 >= v14)
        v28 %= v14;
    }
    else
    {
      v28 &= v14 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_43;
  }
LABEL_44:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1ADA03C50(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc>>>,std::reverse_iterator<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc>>*>,std::reverse_iterator<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc>>*>,std::reverse_iterator<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc>>>,std::reverse_iterator<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc>>*>,std::reverse_iterator<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc>>*>,std::reverse_iterator<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc>>>,std::reverse_iterator<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc>>>,std::reverse_iterator<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::TempArc>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::deque<std::pair<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> *,int>>::__add_front_capacity(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = v3 - v2;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = 32 * (v3 - v2) - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0x100)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 128;
      else
        v40 = (uint64_t)a1[4] + 256;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0x1000uLL);
        std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0x1000uLL);
      }
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 128;
      else
        v35 = (uint64_t)a1[4] + 256;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 256;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &__p);
  }
}

void sub_1ADA04070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::deque<std::pair<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> *,int>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1ADA04384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::pair<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> *,int>>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x100)
    a2 = 1;
  if (v2 < 0x200)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 256;
  }
  return v4 ^ 1u;
}

void fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::EpsilonClosure(uint64_t a1, const void **a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  char *v10;
  uint64_t v11;
  int v12;
  fst *v13;
  __n128 v14;
  float *v15;
  char v16;
  uint64_t v17;
  float *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  int v24;
  float v25;
  float v26;
  BOOL v27;
  unsigned int v28;
  std::vector<unsigned int>::pointer end;
  unsigned int *v30;
  std::vector<unsigned int>::pointer begin;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  char *v36;
  unsigned int *v37;
  unsigned int v38;
  _QWORD *v39;
  _QWORD **v40;
  _QWORD *v41;
  _QWORD **v42;
  int v43;
  _QWORD *v44;
  uint64_t **v45;
  float *v46;
  uint64_t *v47;
  float *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  float v53;
  float v54;
  float v55;
  float *v56;
  uint64_t *v57;
  _DWORD *v58;
  _DWORD *v59;
  float *v60;
  uint64_t v61;
  int v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float *v68;
  uint64_t *v69;
  float *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  float *v75;
  uint64_t *v76;
  _DWORD *v77;
  _DWORD *v78;
  float *v79;
  uint64_t v80;
  int v81;
  uint64_t *v82;
  _QWORD *v83;
  char *v84;
  uint64_t *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  int v97;
  uint64_t *v98;
  uint64_t *v99;
  _QWORD *v100;
  fst *v101;
  _QWORD *v102;
  fst *v103;
  _QWORD *v104;
  fst *v105;
  _QWORD *v106;
  std::runtime_error *v107;
  _QWORD *v108;
  _QWORD *v109;
  std::runtime_error *exception;
  unint64_t v111;
  _QWORD *v112;
  unint64_t v113;
  _QWORD *v114;
  int v115;
  std::vector<unsigned int> __p;
  int v117[2];
  float v118;
  __int128 v119;
  unint64_t v120;
  _DWORD *v121;
  unint64_t v122;
  int v123[2];
  float v124;
  void *v125;
  float *v126;
  char *v127;
  uint64_t *v128;
  _QWORD *v129;
  unint64_t v130;

  v129 = 0;
  v130 = 0;
  v128 = (uint64_t *)&v129;
  v6 = (char *)*a2;
  if (a2[1] != *a2)
  {
    v7 = 0;
    v8 = 0;
    v9 = (uint64_t *)&v129;
    do
    {
      v10 = &v6[v7];
      LODWORD(v119) = *(_DWORD *)v10;
      v11 = *(_QWORD *)v10;
      HIDWORD(v119) = *((_DWORD *)v10 + 2);
      *(_QWORD *)((char *)&v119 + 4) = v11;
      v9 = (uint64_t *)std::__tree<std::__value_type<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>>>::__emplace_hint_unique_key_args<int,std::pair<int const,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> const&>(&v128, v9, (int *)&v119, &v119);
      ++v8;
      v6 = (char *)*a2;
      v7 += 12;
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a2[1] - (_BYTE *)*a2) >> 2));
  }
  v12 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 72) + 64))(*(_QWORD *)(a1 + 72), 0x10000000, 0);
  v125 = 0;
  v126 = 0;
  v127 = 0;
  v13 = (fst *)std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>>::__init_with_size[abi:ne180100]<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element*,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element*>(&v125, *a2, (uint64_t)a2[1], 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a2[1] - (_BYTE *)*a2) >> 2));
  v15 = v126;
  if (v126 == v125)
    goto LABEL_118;
  v115 = 0;
  v16 = 0;
  v17 = a1 + 136;
  do
  {
    v19 = *(_QWORD *)(v15 - 3);
    v18 = v15 - 3;
    v124 = v18[2];
    *(_QWORD *)v123 = v19;
    v126 = v18;
    if ((v16 & 1) != 0)
    {
      *(_QWORD *)&v119 = v123;
      v13 = (fst *)std::__tree<std::__value_type<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v128, v123, (uint64_t)&std::piecewise_construct, (_DWORD **)&v119);
      if (*((_DWORD *)v13 + 8) != v123[0]
        || *((_DWORD *)v13 + 9) != v123[1]
        || (LODWORD(v119) = 0,
            LODWORD(v119) = *((_DWORD *)v13 + 10),
            *(float *)&__p.__begin_ = v124,
            v14.n128_u32[0] = v119,
            *(float *)&v119 != v124))
      {
        v16 = 1;
        goto LABEL_117;
      }
    }
    v20 = *(_DWORD *)(a1 + 84);
    if (v20 >= 1)
    {
      if (v115 > v20)
      {
        v108 = (_QWORD *)fst::cerr(v13);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)"Determinization aborted since looped more than ", 47);
        v109 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)" times during epsilon closure.\n", 31);
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "looped more than max-states times in determinization");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      ++v115;
    }
    v21 = *(_QWORD *)(a1 + 72);
    v122 = 0;
    (*(void (**)(uint64_t, _QWORD, __int128 *, __n128))(*(_QWORD *)v21 + 136))(v21, v123[0], &v119, v14);
    while (1)
    {
      v13 = (fst *)v119;
      if (!(_QWORD)v119)
      {
        if (v122 >= v120)
          goto LABEL_115;
LABEL_20:
        v23 = *((_QWORD *)&v119 + 1) + 16 * v122;
        goto LABEL_21;
      }
      v22 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v119 + 24))(v119);
      v13 = (fst *)v119;
      if ((v22 & 1) != 0)
        goto LABEL_113;
      if (!(_QWORD)v119)
        goto LABEL_20;
      v13 = (fst *)(*(uint64_t (**)(void))(*(_QWORD *)v119 + 32))();
      v23 = (uint64_t)v13;
LABEL_21:
      v24 = *(_DWORD *)v23;
      if ((v12 & 0x10000000) != 0)
      {
        if (v24)
          break;
      }
      if (!v24)
      {
        v117[0] = *(_DWORD *)(v23 + 12);
        v25 = NAN;
        if (v124 != -INFINITY)
        {
          v26 = *(float *)(v23 + 8);
          v25 = NAN;
          if (v26 != -INFINITY)
          {
            v25 = INFINITY;
            v27 = v26 == INFINITY || v124 == INFINITY;
            if (!v27)
              v25 = v124 + v26;
          }
        }
        v118 = v25;
        if (*(_DWORD *)(v23 + 4))
        {
          memset(&__p, 0, sizeof(__p));
          fst::StringRepository<int,int>::SeqOfId(a1 + 136, v123[1], &__p);
          v28 = *(_DWORD *)(v23 + 4);
          if (v28)
          {
            end = __p.__end_;
            if (__p.__end_ >= __p.__end_cap_.__value_)
            {
              begin = __p.__begin_;
              v32 = __p.__end_ - __p.__begin_;
              v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v34 = (char *)__p.__end_cap_.__value_ - (char *)__p.__begin_;
              if (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 1 > v33)
                v33 = v34 >> 1;
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
                v35 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v35 = v33;
              if (v35)
              {
                v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p.__end_cap_, v35);
                begin = __p.__begin_;
                end = __p.__end_;
                v28 = *(_DWORD *)(v23 + 4);
              }
              else
              {
                v36 = 0;
              }
              v37 = (unsigned int *)&v36[4 * v32];
              *v37 = v28;
              v30 = v37 + 1;
              while (end != begin)
              {
                v38 = *--end;
                *--v37 = v38;
              }
              __p.__begin_ = v37;
              __p.__end_ = v30;
              __p.__end_cap_.__value_ = (unsigned int *)&v36[4 * v35];
              if (begin)
                operator delete(begin);
            }
            else
            {
              *__p.__end_ = v28;
              v30 = end + 1;
            }
            __p.__end_ = v30;
          }
          v117[1] = fst::StringRepository<int,int>::IdOfSeq(a1 + 136, (uint64_t)&__p);
          v13 = (fst *)__p.__begin_;
          if (__p.__begin_)
          {
            __p.__end_ = __p.__begin_;
            operator delete(__p.__begin_);
          }
        }
        else
        {
          v117[1] = v123[1];
        }
        v39 = v129;
        if (!v129)
          goto LABEL_62;
        v40 = &v129;
        do
        {
          v41 = v39;
          v42 = v40;
          v43 = *((_DWORD *)v39 + 7);
          v44 = v39 + 1;
          if (v43 >= v117[0])
          {
            v44 = v41;
            v40 = (_QWORD **)v41;
          }
          v39 = (_QWORD *)*v44;
        }
        while (v39);
        if (v40 == &v129)
          goto LABEL_62;
        if (v43 < v117[0])
          v41 = v42;
        if (v117[0] >= *((_DWORD *)v41 + 7))
        {
          if (*((_DWORD *)v40 + 9) != v117[1])
          {
            v100 = (_QWORD *)fst::cerr(v13);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"DeterminizerStar: FST was not functional -> not determinizable\n", 63);
            memset(&__p, 0, sizeof(__p));
            fst::StringRepository<int,int>::SeqOfId(a1 + 136, *((_DWORD *)v40 + 9), &__p);
            v102 = (_QWORD *)fst::cerr(v101);
            v103 = (fst *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)"First string: ", 14);
            if (__p.__end_ != __p.__begin_)
            {
              v111 = 0;
              do
              {
                fst::cerr(v103);
                v112 = (_QWORD *)std::ostream::operator<<();
                v103 = (fst *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)" ", 1);
                ++v111;
              }
              while (v111 < __p.__end_ - __p.__begin_);
            }
            v104 = (_QWORD *)fst::cerr(v103);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)"\nSecond string: ", 16);
            fst::StringRepository<int,int>::SeqOfId(v17, v117[1], &__p);
            if (__p.__end_ != __p.__begin_)
            {
              v113 = 0;
              do
              {
                fst::cerr(v105);
                v114 = (_QWORD *)std::ostream::operator<<();
                v105 = (fst *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114, (uint64_t)" ", 1);
                ++v113;
              }
              while (v113 < __p.__end_ - __p.__begin_);
            }
            v106 = (_QWORD *)fst::cerr(v105);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v106, (uint64_t)"\n", 1);
            if (__p.__begin_)
            {
              __p.__end_ = __p.__begin_;
              operator delete(__p.__begin_);
            }
            v107 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v107, "Non-functional FST: cannot determinize.\n");
            __cxa_throw(v107, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v53 = *((float *)v40 + 10);
          v54 = v118;
          if (v53 == INFINITY)
          {
            v55 = v118;
          }
          else
          {
            v55 = *((float *)v40 + 10);
            if (v118 != INFINITY)
            {
              if (v53 <= v118)
              {
                v64 = expf(-(float)(v118 - v53));
                v55 = v53 - logf(v64 + 1.0);
              }
              else
              {
                v63 = expf(-(float)(v53 - v118));
                v55 = v54 - logf(v63 + 1.0);
              }
            }
          }
          v65 = *(float *)(a1 + 80);
          v66 = v53 + v65;
          v14.n128_f32[0] = v55 + v65;
          if (v53 > v14.n128_f32[0] || v55 > v66)
          {
            v68 = v126;
            if (v126 >= (float *)v127)
            {
              v71 = 0xAAAAAAAAAAAAAAABLL * (((char *)v126 - (_BYTE *)v125) >> 2);
              v72 = v71 + 1;
              if (v71 + 1 > 0x1555555555555555)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((v127 - (_BYTE *)v125) >> 2) > v72)
                v72 = 0x5555555555555556 * ((v127 - (_BYTE *)v125) >> 2);
              if (0xAAAAAAAAAAAAAAABLL * ((v127 - (_BYTE *)v125) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                v73 = 0x1555555555555555;
              else
                v73 = v72;
              if (v73)
                v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,int>>>((uint64_t)&v127, v73);
              else
                v74 = 0;
              v75 = (float *)&v74[12 * v71];
              v76 = *(uint64_t **)v117;
              v75[2] = v118;
              *(_QWORD *)v75 = v76;
              v78 = v125;
              v77 = v126;
              v79 = v75;
              if (v126 != v125)
              {
                do
                {
                  v80 = *(_QWORD *)(v77 - 3);
                  v77 -= 3;
                  v81 = v77[2];
                  *(_QWORD *)(v79 - 3) = v80;
                  v79 -= 3;
                  *((_DWORD *)v79 + 2) = v81;
                }
                while (v77 != v78);
                v77 = v125;
              }
              v70 = v75 + 3;
              v125 = v79;
              v126 = v75 + 3;
              v127 = &v74[12 * v73];
              if (v77)
                operator delete(v77);
            }
            else
            {
              v69 = *(uint64_t **)v117;
              v126[2] = v118;
              *(_QWORD *)v68 = v69;
              v70 = v68 + 3;
            }
            v126 = v70;
            v16 = 1;
          }
          *((float *)v40 + 10) = v55;
        }
        else
        {
LABEL_62:
          __p.__begin_ = (std::vector<unsigned int>::pointer)v117;
          v45 = std::__tree<std::__value_type<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v128, v117, (uint64_t)&std::piecewise_construct, &__p.__begin_);
          v45[4] = *(uint64_t **)v117;
          *((float *)v45 + 10) = v118;
          v46 = v126;
          if (v126 >= (float *)v127)
          {
            v49 = 0xAAAAAAAAAAAAAAABLL * (((char *)v126 - (_BYTE *)v125) >> 2);
            v50 = v49 + 1;
            if (v49 + 1 > 0x1555555555555555)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((v127 - (_BYTE *)v125) >> 2) > v50)
              v50 = 0x5555555555555556 * ((v127 - (_BYTE *)v125) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((v127 - (_BYTE *)v125) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v51 = 0x1555555555555555;
            else
              v51 = v50;
            if (v51)
              v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,int>>>((uint64_t)&v127, v51);
            else
              v52 = 0;
            v56 = (float *)&v52[12 * v49];
            v57 = *(uint64_t **)v117;
            v56[2] = v118;
            *(_QWORD *)v56 = v57;
            v59 = v125;
            v58 = v126;
            v60 = v56;
            if (v126 != v125)
            {
              do
              {
                v61 = *(_QWORD *)(v58 - 3);
                v58 -= 3;
                v62 = v58[2];
                *(_QWORD *)(v60 - 3) = v61;
                v60 -= 3;
                *((_DWORD *)v60 + 2) = v62;
              }
              while (v58 != v59);
              v58 = v125;
            }
            v48 = v56 + 3;
            v125 = v60;
            v126 = v56 + 3;
            v127 = &v52[12 * v51];
            if (v58)
              operator delete(v58);
          }
          else
          {
            v47 = *(uint64_t **)v117;
            v126[2] = v118;
            *(_QWORD *)v46 = v47;
            v48 = v46 + 3;
          }
          v126 = v48;
        }
      }
      if ((_QWORD)v119)
        (*(void (**)(_QWORD))(*(_QWORD *)v119 + 40))(v119);
      else
        ++v122;
    }
    v13 = (fst *)v119;
LABEL_113:
    if (v13)
    {
      v13 = (fst *)(*(uint64_t (**)(fst *))(*(_QWORD *)v13 + 8))(v13);
      goto LABEL_117;
    }
LABEL_115:
    if (v121)
      --*v121;
LABEL_117:
    v15 = v126;
  }
  while (v126 != v125);
LABEL_118:
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>>::reserve((char **)a3, v130);
  v82 = v128;
  if (v128 != (uint64_t *)&v129)
  {
    v83 = (_QWORD *)(a3 + 16);
    v84 = *(char **)(a3 + 8);
    do
    {
      v85 = v82 + 4;
      if ((unint64_t)v84 >= *v83)
      {
        v87 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v84[-*(_QWORD *)a3] >> 2);
        v88 = v87 + 1;
        if (v87 + 1 > 0x1555555555555555)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(*v83 - *(_QWORD *)a3) >> 2) > v88)
          v88 = 0x5555555555555556 * ((uint64_t)(*v83 - *(_QWORD *)a3) >> 2);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v83 - *(_QWORD *)a3) >> 2) >= 0xAAAAAAAAAAAAAAALL)
          v89 = 0x1555555555555555;
        else
          v89 = v88;
        if (v89)
          v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,int>>>(a3 + 16, v89);
        else
          v90 = 0;
        v91 = &v90[12 * v87];
        v92 = *v85;
        *((_DWORD *)v91 + 2) = *((_DWORD *)v82 + 10);
        *(_QWORD *)v91 = v92;
        v94 = *(char **)a3;
        v93 = *(char **)(a3 + 8);
        v95 = v91;
        if (v93 != *(char **)a3)
        {
          do
          {
            v96 = *(_QWORD *)(v93 - 12);
            v93 -= 12;
            v97 = *((_DWORD *)v93 + 2);
            *(_QWORD *)(v95 - 12) = v96;
            v95 -= 12;
            *((_DWORD *)v95 + 2) = v97;
          }
          while (v93 != v94);
          v93 = *(char **)a3;
        }
        v84 = v91 + 12;
        *(_QWORD *)a3 = v95;
        *(_QWORD *)(a3 + 8) = v91 + 12;
        *(_QWORD *)(a3 + 16) = &v90[12 * v89];
        if (v93)
          operator delete(v93);
      }
      else
      {
        v86 = *v85;
        *((_DWORD *)v84 + 2) = *((_DWORD *)v82 + 10);
        *(_QWORD *)v84 = v86;
        v84 += 12;
      }
      *(_QWORD *)(a3 + 8) = v84;
      v98 = (uint64_t *)v82[1];
      if (v98)
      {
        do
        {
          v99 = v98;
          v98 = (uint64_t *)*v98;
        }
        while (v98);
      }
      else
      {
        do
        {
          v99 = (uint64_t *)v82[2];
          v27 = *v99 == (_QWORD)v82;
          v82 = v99;
        }
        while (!v27);
      }
      v82 = v99;
    }
    while (v99 != (uint64_t *)&v129);
  }
  if (v125)
  {
    v126 = (float *)v125;
    operator delete(v125);
  }
  std::__tree<int>::destroy((uint64_t)&v128, v129);
}

void sub_1ADA04ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_DWORD *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,char a28,_QWORD *a29)
{
  void *v29;

  __cxa_free_exception(v29);
  if (a18)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a18 + 8))(a18);
  }
  else if (a21)
  {
    --*a21;
  }
  if (__p)
    operator delete(__p);
  std::__tree<int>::destroy((uint64_t)&a28, a29);
  _Unwind_Resume(a1);
}

void fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::ProcessFinal(uint64_t a1, float **a2, int a3)
{
  float v3;
  float *v4;
  unsigned int *v5;
  char v8;
  unsigned int v9;
  fst *v10;
  float v11;
  float v12;
  BOOL v13;
  float v14;
  float v15;
  float v16;
  BOOL v17;
  float v18;
  float v19;
  float v20;
  void **v21;
  char *v22;
  void **v23;
  char *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  _QWORD *v35;
  std::runtime_error *exception;

  v4 = *a2;
  v5 = (unsigned int *)a2[1];
  if (*a2 == (float *)v5)
    return;
  v8 = 0;
  v9 = 0;
  do
  {
    v11 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 72) + 32))(*(_QWORD *)(a1 + 72), *(unsigned int *)v4);
    if (v11 == INFINITY)
      goto LABEL_32;
    if ((v8 & 1) != 0)
    {
      if (v9 != *((_DWORD *)v4 + 1))
      {
        v35 = (_QWORD *)fst::cerr(v10);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"DeterminizerStar: FST was not functional -> not determinizable\n", 63);
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Non-functional FST: cannot determinize.\n");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v12 = v4[2];
      if (v12 == -INFINITY || v11 == -INFINITY)
      {
        v15 = NAN;
        if (v3 == INFINITY)
          goto LABEL_27;
      }
      else
      {
        v13 = v12 == INFINITY || v11 == INFINITY;
        v14 = v11 + v12;
        if (v13)
          v15 = INFINITY;
        else
          v15 = v14;
        if (v3 == INFINITY)
        {
LABEL_27:
          v8 = 1;
          v3 = v15;
          goto LABEL_32;
        }
        if (v15 == INFINITY)
          goto LABEL_31;
      }
      if (v3 <= v15)
      {
        v20 = expf(-(float)(v15 - v3));
        v3 = v3 - logf(v20 + 1.0);
      }
      else
      {
        v19 = expf(-(float)(v3 - v15));
        v3 = v15 - logf(v19 + 1.0);
      }
LABEL_31:
      v8 = 1;
      goto LABEL_32;
    }
    v16 = v4[2];
    v8 = 1;
    v3 = NAN;
    v9 = *((_DWORD *)v4 + 1);
    if (v16 != -INFINITY)
    {
      v9 = *((_DWORD *)v4 + 1);
      if (v11 != -INFINITY)
      {
        v17 = v16 == INFINITY || v11 == INFINITY;
        v18 = v11 + v16;
        if (v17)
          v3 = INFINITY;
        else
          v3 = v18;
        v9 = *((_DWORD *)v4 + 1);
      }
    }
LABEL_32:
    v4 += 3;
  }
  while (v4 != (float *)v5);
  if ((v8 & 1) != 0)
  {
    v21 = (void **)(*(_QWORD *)(a1 + 48) + 24 * a3);
    v23 = v21 + 1;
    v22 = (char *)v21[1];
    v24 = (char *)v21[2];
    if (v22 >= v24)
    {
      v26 = (v22 - (_BYTE *)*v21) >> 4;
      v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 60)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v28 = v24 - (_BYTE *)*v21;
      if (v28 >> 3 > v27)
        v27 = v28 >> 3;
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0)
        v29 = 0xFFFFFFFFFFFFFFFLL;
      else
        v29 = v27;
      if (v29)
        v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(v21 + 2), v29);
      else
        v30 = 0;
      v31 = &v30[16 * v26];
      v32 = &v30[16 * v29];
      *(_DWORD *)v31 = 0;
      *((_DWORD *)v31 + 1) = v9;
      *((_DWORD *)v31 + 2) = -1;
      *((float *)v31 + 3) = v3;
      v25 = v31 + 16;
      v33 = (char *)*v23;
      v34 = (char *)*v21;
      if (*v23 != *v21)
      {
        do
        {
          *((_OWORD *)v31 - 1) = *((_OWORD *)v33 - 1);
          v31 -= 16;
          v33 -= 16;
        }
        while (v33 != v34);
        v33 = (char *)*v21;
      }
      *v21 = v31;
      *v23 = v25;
      v21[2] = v32;
      if (v33)
        operator delete(v33);
    }
    else
    {
      *(_DWORD *)v22 = 0;
      *((_DWORD *)v22 + 1) = v9;
      *((_DWORD *)v22 + 2) = -1;
      *((float *)v22 + 3) = v3;
      v25 = v22 + 16;
    }
    *v23 = v25;
  }
}

void sub_1ADA052AC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::ProcessTransitions(fst *a1, float **a2, int a3)
{
  float *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  float v9;
  float v10;
  float v11;
  BOOL v12;
  float v13;
  int v14;
  std::vector<unsigned int>::pointer end;
  unsigned int *v16;
  unsigned int v17;
  std::vector<unsigned int>::pointer begin;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  char *v23;
  unsigned int *v24;
  unsigned int v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  int *v37;
  int *v38;
  unint64_t v39;
  uint64_t v40;
  int *v41;
  int *v42;
  int v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  _DWORD *v53;
  _DWORD *v54;
  char *v55;
  uint64_t v56;
  int v57;
  unsigned int *v58;
  std::vector<unsigned int> __p;
  void *v62;
  _DWORD *v63;
  char *v64;
  _DWORD *v65;
  unint64_t v66;
  void *v67;
  char *v68;
  char *v69;

  v67 = 0;
  v68 = 0;
  v69 = 0;
  v3 = *a2;
  v58 = (unsigned int *)a2[1];
  if (*a2 == (float *)v58)
  {
    v38 = 0;
    v37 = 0;
    goto LABEL_66;
  }
  v4 = (uint64_t)a1 + 136;
  do
  {
    v5 = *((_QWORD *)a1 + 9);
    v6 = *(unsigned int *)v3;
    v66 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v5 + 136))(v5, v6, &v62);
    while (1)
    {
      if (!v62)
      {
        if (v66 >= (unint64_t)v64)
          goto LABEL_61;
        goto LABEL_9;
      }
      if ((*(unsigned int (**)(void *))(*(_QWORD *)v62 + 24))(v62))
        break;
      if (v62)
      {
        v7 = (*(uint64_t (**)(void))(*(_QWORD *)v62 + 32))();
        goto LABEL_10;
      }
LABEL_9:
      v7 = (uint64_t)&v63[4 * v66];
LABEL_10:
      v8 = *(_DWORD *)v7;
      if (*(_DWORD *)v7)
      {
        v9 = v3[2];
        v10 = NAN;
        if (v9 != -INFINITY)
        {
          v11 = *(float *)(v7 + 8);
          v10 = NAN;
          if (v11 != -INFINITY)
          {
            v12 = v11 == INFINITY || v9 == INFINITY;
            v13 = v9 + v11;
            if (v12)
              v10 = INFINITY;
            else
              v10 = v13;
          }
        }
        v14 = *(_DWORD *)(v7 + 12);
        if (*(_DWORD *)(v7 + 4))
        {
          memset(&__p, 0, sizeof(__p));
          fst::StringRepository<int,int>::SeqOfId(v4, *((_DWORD *)v3 + 1), &__p);
          end = __p.__end_;
          if (__p.__end_ >= __p.__end_cap_.__value_)
          {
            begin = __p.__begin_;
            v19 = __p.__end_ - __p.__begin_;
            v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v21 = (char *)__p.__end_cap_.__value_ - (char *)__p.__begin_;
            if (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 1 > v20)
              v20 = v21 >> 1;
            if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
              v22 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v22 = v20;
            if (v22)
            {
              v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p.__end_cap_, v22);
              begin = __p.__begin_;
              end = __p.__end_;
            }
            else
            {
              v23 = 0;
            }
            v24 = (unsigned int *)&v23[4 * v19];
            *v24 = *(_DWORD *)(v7 + 4);
            v16 = v24 + 1;
            while (end != begin)
            {
              v25 = *--end;
              *--v24 = v25;
            }
            __p.__begin_ = v24;
            __p.__end_ = v16;
            __p.__end_cap_.__value_ = (unsigned int *)&v23[4 * v22];
            if (begin)
              operator delete(begin);
          }
          else
          {
            *__p.__end_ = *(_DWORD *)(v7 + 4);
            v16 = end + 1;
          }
          __p.__end_ = v16;
          v17 = fst::StringRepository<int,int>::IdOfSeq(v4, (uint64_t)&__p);
          if (__p.__begin_)
          {
            __p.__end_ = __p.__begin_;
            operator delete(__p.__begin_);
          }
        }
        else
        {
          v17 = *((_DWORD *)v3 + 1);
        }
        v26 = v68;
        if (v68 >= v69)
        {
          v28 = (v68 - (_BYTE *)v67) >> 4;
          v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v30 = v69 - (_BYTE *)v67;
          if ((v69 - (_BYTE *)v67) >> 3 > v29)
            v29 = v30 >> 3;
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
            v31 = 0xFFFFFFFFFFFFFFFLL;
          else
            v31 = v29;
          if (v31)
            v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v69, v31);
          else
            v32 = 0;
          v33 = &v32[16 * v28];
          *(_DWORD *)v33 = v8;
          *((_DWORD *)v33 + 1) = v14;
          *((_DWORD *)v33 + 2) = v17;
          *((float *)v33 + 3) = v10;
          v35 = (char *)v67;
          v34 = v68;
          v36 = v33;
          if (v68 != v67)
          {
            do
            {
              *((_OWORD *)v36 - 1) = *((_OWORD *)v34 - 1);
              v36 -= 16;
              v34 -= 16;
            }
            while (v34 != v35);
            v34 = (char *)v67;
          }
          v27 = v33 + 16;
          v67 = v36;
          v68 = v33 + 16;
          v69 = &v32[16 * v31];
          if (v34)
            operator delete(v34);
        }
        else
        {
          *(_DWORD *)v68 = v8;
          *((_DWORD *)v26 + 1) = v14;
          *((_DWORD *)v26 + 2) = v17;
          v27 = v26 + 16;
          *((float *)v26 + 3) = v10;
        }
        v68 = v27;
      }
      if (v62)
        (*(void (**)(void *))(*(_QWORD *)v62 + 40))(v62);
      else
        ++v66;
    }
    if (v62)
    {
      (*(void (**)(void))(*(_QWORD *)v62 + 8))();
      goto LABEL_63;
    }
LABEL_61:
    if (v65)
      --*v65;
LABEL_63:
    v3 += 3;
  }
  while (v3 != (float *)v58);
  v37 = (int *)v67;
  v38 = (int *)v68;
LABEL_66:
  v39 = 126 - 2 * __clz(((char *)v38 - (char *)v37) >> 4);
  if (v38 == v37)
    v40 = 0;
  else
    v40 = v39;
  std::__introsort<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *,false>((uint64_t)v37, v38, (uint64_t)&v62, v40, 1);
  v41 = (int *)v67;
  v42 = (int *)v68;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  while (v41 != v42)
  {
    v43 = *v41;
    v44 = (char *)v62;
    v63 = v62;
    while (*v41 == v43)
    {
      v45 = (uint64_t *)(v41 + 1);
      if (v44 >= v64)
      {
        v47 = 0xAAAAAAAAAAAAAAABLL * ((v44 - (_BYTE *)v62) >> 2);
        v48 = v47 + 1;
        if (v47 + 1 > 0x1555555555555555)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((v64 - (_BYTE *)v62) >> 2) > v48)
          v48 = 0x5555555555555556 * ((v64 - (_BYTE *)v62) >> 2);
        if (0xAAAAAAAAAAAAAAABLL * ((v64 - (_BYTE *)v62) >> 2) >= 0xAAAAAAAAAAAAAAALL)
          v49 = 0x1555555555555555;
        else
          v49 = v48;
        if (v49)
          v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,int>>>((uint64_t)&v64, v49);
        else
          v50 = 0;
        v51 = &v50[12 * v47];
        v52 = *v45;
        *((_DWORD *)v51 + 2) = v41[3];
        *(_QWORD *)v51 = v52;
        v54 = v62;
        v53 = v63;
        v55 = v51;
        if (v63 != v62)
        {
          do
          {
            v56 = *(_QWORD *)(v53 - 3);
            v53 -= 3;
            v57 = v53[2];
            *(_QWORD *)(v55 - 12) = v56;
            v55 -= 12;
            *((_DWORD *)v55 + 2) = v57;
          }
          while (v53 != v54);
          v53 = v62;
        }
        v44 = v51 + 12;
        v62 = v55;
        v63 = v51 + 12;
        v64 = &v50[12 * v49];
        if (v53)
          operator delete(v53);
      }
      else
      {
        v46 = *v45;
        *((_DWORD *)v44 + 2) = v41[3];
        *(_QWORD *)v44 = v46;
        v44 += 12;
      }
      v63 = v44;
      v41 += 4;
      if (v41 == v42)
      {
        v41 = v42;
        break;
      }
    }
    fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::ProcessTransition(a1, a3, v43, (float **)&v62);
  }
  if (v62)
  {
    v63 = v62;
    operator delete(v62);
  }
  if (v67)
  {
    v68 = (char *)v67;
    operator delete(v67);
  }
}

void sub_1ADA057F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::StringRepository<int,int>::SeqOfId(uint64_t a1, int a2, std::vector<unsigned int> *a3)
{
  uint64_t v6;

  if (*(_DWORD *)(a1 + 68) == a2)
  {
    a3->__end_ = a3->__begin_;
  }
  else if (*(_DWORD *)(a1 + 72) <= a2)
  {
    std::vector<int>::resize(a3, 1uLL);
    *a3->__begin_ = a2 - *(_DWORD *)(a1 + 72);
  }
  else
  {
    v6 = *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
    if ((std::vector<unsigned int> *)v6 != a3)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a3, *(char **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
  }
}

unint64_t fst::StringRepository<int,int>::IdOfSeq(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2;
  if (v2 == 1)
    return fst::StringRepository<int,int>::IdOfLabel(a1, **(_DWORD **)a2);
  if (v2)
    return fst::StringRepository<int,int>::IdOfSeqInternal((void **)a1, (uint64_t *)a2);
  return *(unsigned int *)(a1 + 68);
}

void std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>>::reserve(char **a1, unint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int v14;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 2) < a2)
  {
    if (a2 >= 0x1555555555555556)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = (a1[1] - *a1) / 12;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,int>>>(v3, a2);
    v7 = &v6[12 * v5];
    v9 = &v6[12 * v8];
    v11 = *a1;
    v10 = a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_QWORD *)(v10 - 12);
        v10 -= 12;
        v14 = *((_DWORD *)v10 + 2);
        *(_QWORD *)(v12 - 12) = v13;
        v12 -= 12;
        *((_DWORD *)v12 + 2) = v14;
      }
      while (v10 != v11);
      v10 = *a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

char *std::__tree<std::__value_type<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>>>::__emplace_hint_unique_key_args<int,std::pair<int const,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> const&>(uint64_t **a1, uint64_t *a2, int *a3, _OWORD *a4)
{
  uint64_t *v6;
  char *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<std::__value_type<quasar::PronType,int>,std::__map_value_compare<quasar::PronType,std::__value_type<quasar::PronType,int>,std::less<quasar::PronType>,true>,std::allocator<std::__value_type<quasar::PronType,int>>>::__find_equal<quasar::PronType>(a1, a2, &v11, &v10, a3);
  v7 = (char *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v7 + 28) = *a4;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t **std::__tree<std::__value_type<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[7] = **a4;
    v11[10] = 0;
    *((_QWORD *)v11 + 4) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

unint64_t fst::StringRepository<int,int>::IdOfLabel(uint64_t a1, int a2)
{
  _DWORD *v4;
  uint64_t v5;
  unint64_t v6;
  void *__p;
  void *v9;
  _DWORD *v10;

  if ((a2 & 0x80000000) == 0 && *(_DWORD *)(a1 + 76) >= a2)
    return (*(_DWORD *)(a1 + 72) + a2);
  v10 = 0;
  v4 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v10, 1uLL);
  *v4 = a2;
  __p = v4;
  v10 = &v4[v5];
  v9 = v4 + 1;
  v6 = fst::StringRepository<int,int>::IdOfSeqInternal((void **)a1, (uint64_t *)&__p);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
  return v6;
}

void sub_1ADA05C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t fst::StringRepository<int,int>::IdOfSeqInternal(void **a1, uint64_t *a2)
{
  uint64_t v4;
  const void ***v5;
  unint64_t v6;
  _BYTE *v7;
  char *v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  _QWORD *v24;
  uint64_t *v25;

  v4 = (uint64_t)(a1 + 3);
  v25 = a2;
  v5 = std::__hash_table<std::__hash_value_type<std::vector<int> const*,int>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,int>,fst::StringRepository<int,int>::VectorKey,fst::StringRepository<int,int>::VectorEqual,true>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,int>,fst::StringRepository<int,int>::VectorEqual,fst::StringRepository<int,int>::VectorKey,true>,std::allocator<std::__hash_value_type<std::vector<int> const*,int>>>::find<std::vector<int> const*>(a1 + 3, (uint64_t *)&v25);
  if (v5)
    return *((unsigned int *)v5 + 6);
  v8 = (char *)*a1;
  v7 = a1[1];
  v9 = (_QWORD *)operator new();
  v9[1] = 0;
  v9[2] = 0;
  *v9 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v9, (const void *)*a2, a2[1], (a2[1] - *a2) >> 2);
  v24 = v9;
  v10 = (unint64_t)a1[2];
  v11 = a1[1];
  if ((unint64_t)v11 >= v10)
  {
    v13 = ((char *)v11 - (_BYTE *)*a1) >> 3;
    if ((unint64_t)(v13 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v14 = v10 - (_QWORD)*a1;
    v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v13 + 1))
      v15 = v13 + 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), v16);
    else
      v17 = 0;
    v18 = &v17[8 * v13];
    v19 = &v17[8 * v16];
    *(_QWORD *)v18 = v9;
    v12 = v18 + 8;
    v21 = (char *)*a1;
    v20 = (char *)a1[1];
    if (v20 != *a1)
    {
      do
      {
        v22 = *((_QWORD *)v20 - 1);
        v20 -= 8;
        *((_QWORD *)v18 - 1) = v22;
        v18 -= 8;
      }
      while (v20 != v21);
      v20 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v12;
    a1[2] = v19;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *v11 = v9;
    v12 = v11 + 1;
  }
  v6 = (unint64_t)(v7 - v8) >> 3;
  a1[1] = v12;
  v25 = (uint64_t *)&v24;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::vector<int> const*,int>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,int>,fst::StringRepository<int,int>::VectorKey,fst::StringRepository<int,int>::VectorEqual,true>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,int>,fst::StringRepository<int,int>::VectorEqual,fst::StringRepository<int,int>::VectorKey,true>,std::allocator<std::__hash_value_type<std::vector<int> const*,int>>>::__emplace_unique_key_args<std::vector<int> const*,std::piecewise_construct_t const&,std::tuple<std::vector<int> const* const&>,std::tuple<>>(v4, (uint64_t *)&v24, (uint64_t)&std::piecewise_construct, &v25)+ 6) = v6;
  return v6;
}

void sub_1ADA05DCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10C402FEFCB83);
  _Unwind_Resume(a1);
}

const void ***std::__hash_table<std::__hash_value_type<std::vector<int> const*,int>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,int>,fst::StringRepository<int,int>::VectorKey,fst::StringRepository<int,int>::VectorEqual,true>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,int>,fst::StringRepository<int,int>::VectorEqual,fst::StringRepository<int,int>::VectorKey,true>,std::allocator<std::__hash_value_type<std::vector<int> const*,int>>>::find<std::vector<int> const*>(_QWORD *a1, uint64_t *a2)
{
  int *v3;
  int *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int8x8_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  const void ****v12;
  const void ***v13;
  uint64_t v14;
  unint64_t v15;

  v3 = *(int **)*a2;
  v4 = *(int **)(*a2 + 8);
  if (v3 == v4)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    do
    {
      v7 = *v3++;
      v5 += v6 * v7;
      v6 *= 103333;
    }
    while (v3 != v4);
  }
  v8 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v8)
    return 0;
  v9 = (uint8x8_t)vcnt_s8(v8);
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    v11 = v5;
    if (v5 >= *(_QWORD *)&v8)
      v11 = v5 % *(_QWORD *)&v8;
  }
  else
  {
    v11 = (*(_QWORD *)&v8 - 1) & v5;
  }
  v12 = *(const void *****)(*a1 + 8 * v11);
  if (!v12)
    return 0;
  v13 = *v12;
  if (*v12)
  {
    v14 = (uint64_t)(a1 + 4);
    do
    {
      v15 = (unint64_t)v13[1];
      if (v15 == v5)
      {
        if (std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,int>,fst::StringRepository<int,int>::VectorEqual,fst::StringRepository<int,int>::VectorKey,true>::operator()[abi:ne180100](v14, v13 + 2, a2))
        {
          return v13;
        }
      }
      else
      {
        if (v10 > 1)
        {
          if (v15 >= *(_QWORD *)&v8)
            v15 %= *(_QWORD *)&v8;
        }
        else
        {
          v15 &= *(_QWORD *)&v8 - 1;
        }
        if (v15 != v11)
          return 0;
      }
      v13 = (const void ***)*v13;
    }
    while (v13);
  }
  return v13;
}

BOOL std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,int>,fst::StringRepository<int,int>::VectorEqual,fst::StringRepository<int,int>::VectorKey,true>::operator()[abi:ne180100](uint64_t a1, const void ***a2, uint64_t *a3)
{
  uint64_t v3;
  _BYTE *v4;
  size_t v5;

  v3 = *a3;
  v4 = **a2;
  v5 = (_BYTE *)(*a2)[1] - v4;
  return v5 == *(_QWORD *)(v3 + 8) - *(_QWORD *)v3 && memcmp(v4, *(const void **)v3, v5) == 0;
}

void *std::__hash_table<std::__hash_value_type<std::vector<int> const*,int>,std::__unordered_map_hasher<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,int>,fst::StringRepository<int,int>::VectorKey,fst::StringRepository<int,int>::VectorEqual,true>,std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,int>,fst::StringRepository<int,int>::VectorEqual,fst::StringRepository<int,int>::VectorKey,true>,std::allocator<std::__hash_value_type<std::vector<int> const*,int>>>::__emplace_unique_key_args<std::vector<int> const*,std::piecewise_construct_t const&,std::tuple<std::vector<int> const* const&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  int *v8;
  int *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  void **v16;
  void *i;
  unint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v8 = *(int **)*a2;
  v9 = *(int **)(*a2 + 8);
  if (v8 == v9)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    do
    {
      v12 = *v8++;
      v10 += v11 * v12;
      v11 *= 103333;
    }
    while (v8 != v9);
  }
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    v15 = v14.u32[0];
    if (v14.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v13)
        v4 = v10 % v13;
    }
    else
    {
      v4 = (v13 - 1) & v10;
    }
    v16 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v16)
    {
      for (i = *v16; i; i = *(void **)i)
      {
        v18 = *((_QWORD *)i + 1);
        if (v18 == v10)
        {
          if (std::__unordered_map_equal<std::vector<int> const*,std::__hash_value_type<std::vector<int> const*,int>,fst::StringRepository<int,int>::VectorEqual,fst::StringRepository<int,int>::VectorKey,true>::operator()[abi:ne180100](a1 + 32, (const void ***)i + 2, a2))
          {
            return i;
          }
        }
        else
        {
          if (v15 > 1)
          {
            if (v18 >= v13)
              v18 %= v13;
          }
          else
          {
            v18 &= v13 - 1;
          }
          if (v18 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  *((_QWORD *)i + 2) = **a4;
  *((_DWORD *)i + 6) = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v13 || (float)(v20 * (float)v13) < v19)
  {
    v21 = 1;
    if (v13 >= 3)
      v21 = (v13 & (v13 - 1)) != 0;
    v22 = v21 | (2 * v13);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v24);
    v13 = *(_QWORD *)(a1 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v10 >= v13)
        v4 = v10 % v13;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v13 - 1) & v10;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v26)
  {
    *(_QWORD *)i = *v26;
LABEL_43:
    *v26 = i;
    goto LABEL_44;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v25 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v27 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v27 >= v13)
        v27 %= v13;
    }
    else
    {
      v27 &= v13 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_43;
  }
LABEL_44:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1ADA061C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::ProcessTransition(fst *a1, int a2, int a3, float **a4)
{
  float *v8;
  int *v9;
  unint64_t v10;
  float *v11;
  uint64_t v12;
  int v13;
  float v14;
  float v15;
  float v16;
  float v17;
  int *v18;
  int *v19;
  int *v20;
  std::vector<unsigned int>::size_type v21;
  std::vector<unsigned int>::pointer end;
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int>::size_type v24;
  int v25;
  float v26;
  int *v27;
  float v28;
  float v29;
  float v30;
  unsigned int *v31;
  uint64_t v32;
  float v33;
  float v34;
  BOOL v35;
  int v36;
  int v37;
  void **v38;
  char *v39;
  void **v40;
  char *v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  _QWORD *v52;
  std::runtime_error *exception;
  int v54;
  std::vector<unsigned int> __p;
  std::vector<unsigned int> v56;

  v8 = *a4;
  v9 = (int *)a4[1];
  if (*a4 == (float *)v9)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    v11 = *a4;
    while (1)
    {
      if (v8 != v11)
      {
        v12 = *(_QWORD *)v8;
        v11[2] = v8[2];
        *(_QWORD *)v11 = v12;
      }
      v8 += 3;
      if (v8 == (float *)v9)
        break;
      v13 = *(_DWORD *)v11;
      while (*(_DWORD *)v8 == v13)
      {
        if (*((_DWORD *)v8 + 1) != *((_DWORD *)v11 + 1))
        {
          v52 = (_QWORD *)fst::cerr(a1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"DeterminizerStar: FST was not functional -> not determinizable\n", 63);
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Non-functional FST: cannot determinize.\n");
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v14 = v11[2];
        v15 = v8[2];
        if (v14 != INFINITY)
        {
          if (v15 == INFINITY)
          {
            v15 = v11[2];
          }
          else if (v14 <= v15)
          {
            v17 = expf(-(float)(v15 - v14));
            v15 = v14 - logf(v17 + 1.0);
          }
          else
          {
            v16 = expf(-(float)(v14 - v15));
            v15 = v15 - logf(v16 + 1.0);
          }
        }
        v11[2] = v15;
        v8 += 3;
        if (v8 == (float *)v9)
          goto LABEL_19;
      }
      v11 += 3;
      ++v10;
      if (v8 == (float *)v9)
        goto LABEL_21;
    }
LABEL_19:
    ++v10;
  }
LABEL_21:
  std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>>::resize((uint64_t)a4, v10);
  memset(&v56, 0, sizeof(v56));
  v18 = (int *)*a4;
  v19 = (int *)a4[1];
  memset(&__p, 0, sizeof(__p));
  if (v18 != v19)
  {
    v20 = v18;
    while (1)
    {
      if (v20 == v18)
      {
        fst::StringRepository<int,int>::SeqOfId((uint64_t)a1 + 136, v18[1], &v56);
        begin = v56.__begin_;
        end = v56.__end_;
      }
      else
      {
        fst::StringRepository<int,int>::SeqOfId((uint64_t)a1 + 136, v20[1], &__p);
        v21 = __p.__end_ - __p.__begin_;
        begin = v56.__begin_;
        end = v56.__end_;
        if (v21 < v56.__end_ - v56.__begin_)
        {
          std::vector<int>::resize(&v56, v21);
          begin = v56.__begin_;
          end = v56.__end_;
        }
        if (end == begin)
          break;
        v24 = 0;
        do
        {
          if (__p.__begin_[v24] != begin[v24])
          {
            std::vector<int>::resize(&v56, v24);
            begin = v56.__begin_;
            end = v56.__end_;
          }
          ++v24;
        }
        while (v24 < end - begin);
      }
      if (end != begin)
      {
        v20 += 3;
        if (v20 != v19)
          continue;
      }
      break;
    }
  }
  v25 = fst::StringRepository<int,int>::IdOfSeq((uint64_t)a1 + 136, (uint64_t)&v56);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  v26 = *((float *)v18 + 2);
  v27 = v18 + 3;
  if (v18 + 3 == v19)
  {
    v28 = *((float *)v18 + 2);
  }
  else
  {
    do
    {
      v28 = *((float *)v27 + 2);
      if (v26 != INFINITY)
      {
        if (v28 == INFINITY)
        {
          v28 = v26;
        }
        else if (v26 <= v28)
        {
          v30 = expf(-(float)(v28 - v26));
          v28 = v26 - logf(v30 + 1.0);
        }
        else
        {
          v29 = expf(-(float)(v26 - v28));
          v28 = v28 - logf(v29 + 1.0);
        }
      }
      v27 += 3;
      v26 = v28;
    }
    while (v27 != v19);
  }
  v54 = a3;
  v31 = v56.__begin_;
  if (v18 != v19)
  {
    v32 = v56.__end_ - v56.__begin_;
    do
    {
      v33 = *((float *)v18 + 2);
      if (v33 == -INFINITY || (LODWORD(v28) & 0x7FFFFFFFu) > 0x7F7FFFFF)
      {
        v34 = NAN;
      }
      else
      {
        v35 = v33 == INFINITY;
        v34 = v33 - v28;
        if (v35)
          v34 = INFINITY;
      }
      *((float *)v18 + 2) = v34;
      v18[1] = fst::StringRepository<int,int>::RemovePrefix((uint64_t)a1 + 136, v18[1], v32);
      v18 += 3;
    }
    while (v18 != v19);
    v31 = v56.__begin_;
  }
  if (v31)
  {
    v56.__end_ = v31;
    operator delete(v31);
  }
  v36 = fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetToStateId((uint64_t)a1, (unint64_t)a4);
  v37 = v36;
  v38 = (void **)(*((_QWORD *)a1 + 6) + 24 * a2);
  v40 = v38 + 1;
  v39 = (char *)v38[1];
  v41 = (char *)v38[2];
  if (v39 >= v41)
  {
    v43 = (v39 - (_BYTE *)*v38) >> 4;
    v44 = v43 + 1;
    if ((unint64_t)(v43 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v45 = v41 - (_BYTE *)*v38;
    if (v45 >> 3 > v44)
      v44 = v45 >> 3;
    if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0)
      v46 = 0xFFFFFFFFFFFFFFFLL;
    else
      v46 = v44;
    if (v46)
      v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(v38 + 2), v46);
    else
      v47 = 0;
    v48 = &v47[16 * v43];
    v49 = &v47[16 * v46];
    *(_DWORD *)v48 = v54;
    *((_DWORD *)v48 + 1) = v25;
    *((_DWORD *)v48 + 2) = v37;
    *((float *)v48 + 3) = v28;
    v42 = v48 + 16;
    v50 = (char *)*v40;
    v51 = (char *)*v38;
    if (*v40 != *v38)
    {
      do
      {
        *((_OWORD *)v48 - 1) = *((_OWORD *)v50 - 1);
        v48 -= 16;
        v50 -= 16;
      }
      while (v50 != v51);
      v50 = (char *)*v38;
    }
    *v38 = v48;
    *v40 = v42;
    v38[2] = v49;
    if (v50)
      operator delete(v50);
  }
  else
  {
    *(_DWORD *)v39 = a3;
    *((_DWORD *)v39 + 1) = v25;
    *((_DWORD *)v39 + 2) = v36;
    v42 = v39 + 16;
    *((float *)v39 + 3) = v28;
  }
  *v40 = v42;
}

void sub_1ADA066CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *,false>(uint64_t result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  char v20;
  BOOL v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;

  v8 = result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = ((uint64_t)a2 - v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v22 = *(a2 - 4);
        v23 = *(_DWORD *)v9;
        if (v22 < *(_DWORD *)v9 || v22 <= v23 && *(a2 - 3) < *(_DWORD *)(v9 + 4))
        {
          *(_DWORD *)v9 = v22;
          *(a2 - 4) = v23;
          v26 = *(_QWORD *)(v9 + 4);
          v28 = *(_DWORD *)(v9 + 12);
          v24 = *(_QWORD *)(a2 - 3);
          *(_DWORD *)(v9 + 12) = *(a2 - 1);
          *(_QWORD *)(v9 + 4) = v24;
          *(_QWORD *)(a2 - 3) = v26;
          *(a2 - 1) = v28;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>((int *)v9, (int *)(v9 + 16), a2 - 4);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(v9, v9 + 16, v9 + 32, (uint64_t)(a2 - 4));
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(v9, v9 + 16, v9 + 32, v9 + 48, a2 - 4);
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>((int *)v9, a2);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>((int *)v9, a2);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = v9 + 16 * (v13 >> 1);
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>((int *)(v9 + 16 * (v13 >> 1)), (int *)v9, a2 - 4);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>((int *)v9, (int *)(v9 + 16 * (v13 >> 1)), a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>((int *)(v9 + 16), (int *)(v15 - 16), a2 - 8);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>((int *)(v9 + 32), (int *)(v9 + 16 + 16 * v14), a2 - 12);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>((int *)(v15 - 16), (int *)v15, (int *)(v9 + 16 + 16 * v14));
            v16 = *(_DWORD *)v9;
            *(_DWORD *)v9 = *(_DWORD *)v15;
            *(_DWORD *)v15 = v16;
            v27 = *(_DWORD *)(v9 + 12);
            v25 = *(_QWORD *)(v9 + 4);
            v17 = *(_QWORD *)(v15 + 4);
            *(_DWORD *)(v9 + 12) = *(_DWORD *)(v15 + 12);
            *(_QWORD *)(v9 + 4) = v17;
            *(_DWORD *)(v15 + 12) = v27;
            *(_QWORD *)(v15 + 4) = v25;
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          v18 = *(_DWORD *)(v9 - 16);
          if (v18 >= *(_DWORD *)v9 && (v18 > *(_DWORD *)v9 || *(_DWORD *)(v9 - 12) >= *(_DWORD *)(v9 + 4)))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &>((int *)v9, a2);
            v9 = result;
            goto LABEL_19;
          }
LABEL_14:
          v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &>((int *)v9, a2);
          if ((v20 & 1) == 0)
            goto LABEL_17;
          v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(v9, v19);
          v9 = v19 + 16;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(v19 + 16, (uint64_t)a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v21)
              continue;
LABEL_17:
            result = std::__introsort<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *,false>(v8, v19, a3, -v11, a5 & 1);
            v9 = v19 + 16;
LABEL_19:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = (int *)v19;
          if (v21)
            return result;
          goto LABEL_2;
        }
        if ((int *)v9 != a2)
          return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(v9, (uint64_t)a2, (uint64_t)a2, a3);
        return result;
    }
  }
}

int *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(int *result, int *a2)
{
  int *v2;
  uint64_t v3;
  int *v4;
  int *v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  if (result != a2)
  {
    v2 = result + 4;
    if (result + 4 != a2)
    {
      v3 = 0;
      v4 = result;
      while (1)
      {
        v5 = v4;
        v4 = v2;
        v6 = v5[4];
        v7 = *v5;
        if (v6 < *v5)
          break;
        if (v6 <= v7)
        {
          v8 = v5[5];
          if (v8 < v5[1])
            goto LABEL_6;
        }
LABEL_17:
        v2 = v4 + 4;
        v3 += 16;
        if (v4 + 4 == a2)
          return result;
      }
      v8 = v5[5];
LABEL_6:
      v9 = *((_QWORD *)v5 + 3);
      v5[4] = v7;
      v10 = v5 + 1;
      *(_QWORD *)(v4 + 1) = *(_QWORD *)(v5 + 1);
      v4[3] = v5[3];
      if (v5 == result)
      {
LABEL_13:
        v5 = result;
      }
      else
      {
        v11 = v3;
        while (1)
        {
          v12 = (uint64_t)result + v11;
          v13 = *(int *)((char *)result + v11 - 16);
          if (v6 >= v13)
          {
            if (v6 > v13)
              goto LABEL_14;
            if (v8 >= *(int *)((char *)result + v11 - 12))
              break;
          }
          v10 = v5 - 3;
          v5 -= 4;
          *(_DWORD *)v12 = v13;
          *(_QWORD *)(v12 + 4) = *(_QWORD *)(v12 - 12);
          *(_DWORD *)(v12 + 12) = *(_DWORD *)(v12 - 4);
          v11 -= 16;
          if (!v11)
          {
            v10 = result + 1;
            goto LABEL_13;
          }
        }
        v10 = (int *)((char *)result + v11 + 4);
        v5 = (int *)((char *)result + v11);
      }
LABEL_14:
      *v5 = v6;
      *v10 = v8;
      *((_QWORD *)v5 + 1) = v9;
      goto LABEL_17;
    }
  }
  return result;
}

int *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(int *result, int *a2)
{
  int *v2;
  int *i;
  int *v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int *j;

  if (result != a2)
  {
    v2 = result + 4;
    if (result + 4 != a2)
    {
      for (i = result + 1; ; i += 4)
      {
        v4 = result;
        result = v2;
        v5 = v4[4];
        v6 = *v4;
        if (v5 < *v4)
          break;
        if (v5 <= v6)
        {
          v7 = v4[5];
          if (v7 < v4[1])
            goto LABEL_6;
        }
LABEL_14:
        v2 = result + 4;
        if (result + 4 == a2)
          return result;
      }
      v7 = v4[5];
LABEL_6:
      v8 = *((_QWORD *)v4 + 3);
      for (j = i; ; j -= 4)
      {
        j[3] = v6;
        *((_QWORD *)j + 2) = *(_QWORD *)j;
        j[6] = j[2];
        v6 = *(j - 5);
        if (v5 >= v6 && (v5 > v6 || v7 >= *(j - 4)))
          break;
      }
      *(j - 1) = v5;
      *j = v7;
      *(_QWORD *)(j + 1) = v8;
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(int *a1, int *a2, int *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;

  v3 = *a2;
  v4 = *a1;
  if (*a2 < *a1 || v3 <= v4 && a2[1] < a1[1])
  {
    v5 = *a3;
    if (*a3 < v3 || v5 <= v3 && a3[1] < a2[1])
    {
      *a1 = v5;
      *a3 = v4;
      v6 = a1[3];
      v7 = *(_QWORD *)(a1 + 1);
      v8 = a3[3];
      *(_QWORD *)(a1 + 1) = *(_QWORD *)(a3 + 1);
      a1[3] = v8;
      *(_QWORD *)(a3 + 1) = v7;
      a3[3] = v6;
    }
    else
    {
      *a1 = v3;
      *a2 = v4;
      v20 = (uint64_t *)(a2 + 1);
      v21 = a1[3];
      v22 = *(_QWORD *)(a1 + 1);
      v23 = a2[3];
      *(_QWORD *)(a1 + 1) = *(_QWORD *)(a2 + 1);
      a1[3] = v23;
      *(_QWORD *)(a2 + 1) = v22;
      a2[3] = v21;
      v24 = *a3;
      v25 = *a2;
      if (*a3 < *a2 || v24 <= v25 && a3[1] < *(_DWORD *)v20)
      {
        *a2 = v24;
        *a3 = v25;
        v26 = a2[3];
        v27 = *v20;
        v28 = a3[3];
        *v20 = *(_QWORD *)(a3 + 1);
        a2[3] = v28;
        *(_QWORD *)(a3 + 1) = v27;
        a3[3] = v26;
        return 2;
      }
    }
    return 1;
  }
  v10 = *a3;
  if (*a3 < v3 || v10 <= v3 && a3[1] < a2[1])
  {
    *a2 = v10;
    *a3 = v3;
    v11 = a2 + 1;
    v12 = *(_QWORD *)(a2 + 1);
    v13 = a2[3];
    v14 = a3[3];
    *(_QWORD *)(a2 + 1) = *(_QWORD *)(a3 + 1);
    a2[3] = v14;
    *(_QWORD *)(a3 + 1) = v12;
    a3[3] = v13;
    v15 = *a2;
    v16 = *a1;
    if (*a2 < *a1 || v15 <= v16 && *(_DWORD *)v11 < a1[1])
    {
      *a1 = v15;
      *a2 = v16;
      v17 = a1[3];
      v18 = *(_QWORD *)(a1 + 1);
      v19 = a2[3];
      *(_QWORD *)(a1 + 1) = *v11;
      a1[3] = v19;
      *v11 = v18;
      a2[3] = v17;
      return 2;
    }
    return 1;
  }
  return 0;
}

_DWORD *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &>(int *a1, _DWORD *a2)
{
  int v2;
  int v3;
  int v4;
  _DWORD *i;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v18;
  int v19;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(a2 - 4);
  if (*a1 >= v4 && (v2 > v4 || v3 >= *(a2 - 3)))
  {
    for (i = a1 + 4; i < a2 && v2 >= *i && (v2 > *i || v3 >= i[1]); i += 4)
      ;
  }
  else
  {
    i = a1;
    do
    {
      v7 = i[4];
      i += 4;
      v6 = v7;
    }
    while (v2 >= v7 && (v2 > v6 || v3 >= i[1]));
  }
  if (i < a2)
  {
    for (a2 -= 4; v2 < v4 || v2 <= v4 && v3 < a2[1]; a2 -= 4)
    {
      v8 = *(a2 - 4);
      v4 = v8;
    }
  }
  v9 = *((_QWORD *)a1 + 1);
  if (i < a2)
  {
    v10 = *i;
    v11 = *a2;
    do
    {
      *i = v11;
      *a2 = v10;
      v19 = i[3];
      v18 = *(_QWORD *)(i + 1);
      v12 = *(_QWORD *)(a2 + 1);
      i[3] = a2[3];
      *(_QWORD *)(i + 1) = v12;
      a2[3] = v19;
      *(_QWORD *)(a2 + 1) = v18;
      do
      {
        v13 = i[4];
        i += 4;
        v10 = v13;
      }
      while (v2 >= v13 && (v2 > v10 || v3 >= i[1]));
      do
      {
        do
        {
          v14 = *(a2 - 4);
          a2 -= 4;
          v11 = v14;
          v15 = v2 <= v14;
        }
        while (v2 < v14);
      }
      while (v15 && v3 < a2[1]);
    }
    while (i < a2);
  }
  if (i - 4 != a1)
  {
    *a1 = *(i - 4);
    v16 = *(_QWORD *)(i - 3);
    a1[3] = *(i - 1);
    *(_QWORD *)(a1 + 1) = v16;
  }
  *(i - 4) = v2;
  *(i - 3) = v3;
  *((_QWORD *)i - 1) = v9;
  return i;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &>(int *a1, _DWORD *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v13;
  unint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  uint64_t v22;
  int v23;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  v5 = *((_QWORD *)a1 + 1);
  while (1)
  {
    v6 = a1[v2 + 4];
    if (v6 >= v3 && (v6 > v3 || a1[v2 + 5] >= v4))
      break;
    v2 += 4;
  }
  v7 = (unint64_t)&a1[v2 + 4];
  if (v2 * 4)
  {
    do
    {
      v9 = *(a2 - 4);
      a2 -= 4;
      v8 = v9;
    }
    while (v9 >= v3 && (v8 > v3 || a2[1] >= v4));
  }
  else
  {
LABEL_19:
    if (v7 < (unint64_t)a2)
    {
      do
      {
        v11 = *(a2 - 4);
        a2 -= 4;
        v10 = v11;
        if (v11 < v3)
          break;
        if (v10 > v3)
          goto LABEL_19;
      }
      while (a2[1] >= v4 && v7 < (unint64_t)a2);
    }
  }
  if (v7 >= (unint64_t)a2)
  {
    v14 = v7;
  }
  else
  {
    v13 = *a2;
    v14 = v7;
    v15 = a2;
    do
    {
      *(_DWORD *)v14 = v13;
      *v15 = v6;
      v23 = *(_DWORD *)(v14 + 12);
      v22 = *(_QWORD *)(v14 + 4);
      v16 = *(_QWORD *)(v15 + 1);
      *(_DWORD *)(v14 + 12) = v15[3];
      *(_QWORD *)(v14 + 4) = v16;
      v15[3] = v23;
      *(_QWORD *)(v15 + 1) = v22;
      do
      {
        do
        {
          v17 = *(_DWORD *)(v14 + 16);
          v14 += 16;
          v6 = v17;
          v18 = v17 <= v3;
        }
        while (v17 < v3);
      }
      while (v18 && *(_DWORD *)(v14 + 4) < v4);
      do
      {
        v19 = *(v15 - 4);
        v15 -= 4;
        v13 = v19;
      }
      while (v19 >= v3 && (v13 > v3 || v15[1] >= v4));
    }
    while (v14 < (unint64_t)v15);
  }
  if ((int *)(v14 - 16) != a1)
  {
    *a1 = *(_DWORD *)(v14 - 16);
    v20 = *(_QWORD *)(v14 - 12);
    a1[3] = *(_DWORD *)(v14 - 4);
    *(_QWORD *)(a1 + 1) = v20;
  }
  *(_DWORD *)(v14 - 16) = v3;
  *(_DWORD *)(v14 - 12) = v4;
  *(_QWORD *)(v14 - 8) = v5;
  return v14 - 16;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_DWORD *)(a2 - 16);
      v7 = *(_DWORD *)a1;
      if (v6 < *(_DWORD *)a1 || v6 <= v7 && *(_DWORD *)(a2 - 12) < *(_DWORD *)(a1 + 4))
      {
        *(_DWORD *)a1 = v6;
        *(_DWORD *)(a2 - 16) = v7;
        v8 = *(_DWORD *)(a1 + 12);
        v9 = *(_QWORD *)(a1 + 4);
        v10 = *(_DWORD *)(a2 - 4);
        *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 - 12);
        *(_DWORD *)(a1 + 12) = v10;
        *(_QWORD *)(a2 - 12) = v9;
        *(_DWORD *)(a2 - 4) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>((int *)a1, (int *)(a1 + 16), (int *)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(a1, a1 + 16, a1 + 32, a1 + 48, (int *)(a2 - 16));
      return 1;
    default:
      v11 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>((int *)a1, (int *)(a1 + 16), (int *)(a1 + 32));
      v12 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(_DWORD *)v12;
    v16 = *(_DWORD *)v11;
    if (*(_DWORD *)v12 < *(_DWORD *)v11)
      break;
    if (v15 <= v16)
    {
      v17 = *(_DWORD *)(v12 + 4);
      if (v17 < *(_DWORD *)(v11 + 4))
        goto LABEL_12;
    }
LABEL_21:
    v11 = v12;
    v13 += 16;
    v12 += 16;
    if (v12 == a2)
      return 1;
  }
  v17 = *(_DWORD *)(v12 + 4);
LABEL_12:
  v18 = *(_QWORD *)(v12 + 8);
  *(_DWORD *)v12 = v16;
  v19 = (_DWORD *)(v11 + 4);
  *(_QWORD *)(v12 + 4) = *(_QWORD *)(v11 + 4);
  *(_DWORD *)(v12 + 12) = *(_DWORD *)(v11 + 12);
  if (v11 == a1)
  {
LABEL_19:
    v11 = a1;
  }
  else
  {
    v20 = v13;
    while (1)
    {
      v21 = a1 + v20;
      v22 = *(_DWORD *)(a1 + v20 + 16);
      if (v15 >= v22)
      {
        if (v15 > v22)
          goto LABEL_20;
        v23 = a1 + v20;
        if (v17 >= *(_DWORD *)(a1 + v20 + 20))
          break;
      }
      v19 = (_DWORD *)(v11 - 12);
      v11 -= 16;
      *(_DWORD *)(v21 + 32) = v22;
      *(_QWORD *)(v21 + 36) = *(_QWORD *)(v21 + 20);
      *(_DWORD *)(v21 + 44) = *(_DWORD *)(v21 + 28);
      v20 -= 16;
      if (v20 == -32)
      {
        v19 = (_DWORD *)(a1 + 4);
        goto LABEL_19;
      }
    }
    v19 = (_DWORD *)(v23 + 36);
    v11 = v23 + 32;
  }
LABEL_20:
  *(_DWORD *)v11 = v15;
  *v19 = v17;
  *(_QWORD *)(v11 + 8) = v18;
  if (++v14 != 8)
    goto LABEL_21;
  return v12 + 16 == a2;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  int v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>((int *)a1, (int *)a2, (int *)a3);
  v9 = *(_DWORD *)a4;
  v10 = *(_DWORD *)a3;
  if (*(_DWORD *)a4 < *(_DWORD *)a3 || v9 <= v10 && *(_DWORD *)(a4 + 4) < *(_DWORD *)(a3 + 4))
  {
    *(_DWORD *)a3 = v9;
    *(_DWORD *)a4 = v10;
    v11 = (_QWORD *)(a3 + 4);
    v12 = *(_QWORD *)(a3 + 4);
    v13 = *(_DWORD *)(a3 + 12);
    v14 = *(_DWORD *)(a4 + 12);
    *(_QWORD *)(a3 + 4) = *(_QWORD *)(a4 + 4);
    *(_DWORD *)(a3 + 12) = v14;
    *(_QWORD *)(a4 + 4) = v12;
    *(_DWORD *)(a4 + 12) = v13;
    v15 = *(_DWORD *)a3;
    v16 = *(_DWORD *)a2;
    if (*(_DWORD *)a3 < *(_DWORD *)a2 || v15 <= v16 && *(_DWORD *)v11 < *(_DWORD *)(a2 + 4))
    {
      *(_DWORD *)a2 = v15;
      *(_DWORD *)a3 = v16;
      v17 = (_QWORD *)(a2 + 4);
      v18 = *(_QWORD *)(a2 + 4);
      v19 = *(_DWORD *)(a2 + 12);
      v20 = *(_DWORD *)(a3 + 12);
      *(_QWORD *)(a2 + 4) = *v11;
      *(_DWORD *)(a2 + 12) = v20;
      *v11 = v18;
      *(_DWORD *)(a3 + 12) = v19;
      v21 = *(_DWORD *)a2;
      v22 = *(_DWORD *)a1;
      if (*(_DWORD *)a2 < *(_DWORD *)a1 || v21 <= v22 && *(_DWORD *)v17 < *(_DWORD *)(a1 + 4))
      {
        *(_DWORD *)a1 = v21;
        *(_DWORD *)a2 = v22;
        v23 = *(_DWORD *)(a1 + 12);
        v24 = *(_QWORD *)(a1 + 4);
        v25 = *(_DWORD *)(a2 + 12);
        *(_QWORD *)(a1 + 4) = *v17;
        *(_DWORD *)(a1 + 12) = v25;
        *v17 = v24;
        *(_DWORD *)(a2 + 12) = v23;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t result;
  int v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *(_DWORD *)a4;
  if (*a5 < *(_DWORD *)a4 || v11 <= v12 && a5[1] < *(_DWORD *)(a4 + 4))
  {
    *(_DWORD *)a4 = v11;
    *a5 = v12;
    v13 = (_QWORD *)(a4 + 4);
    v14 = *(_QWORD *)(a4 + 4);
    v15 = *(_DWORD *)(a4 + 12);
    v16 = a5[3];
    *(_QWORD *)(a4 + 4) = *(_QWORD *)(a5 + 1);
    *(_DWORD *)(a4 + 12) = v16;
    *(_QWORD *)(a5 + 1) = v14;
    a5[3] = v15;
    v17 = *(_DWORD *)a4;
    v18 = *(_DWORD *)a3;
    if (*(_DWORD *)a4 < *(_DWORD *)a3 || v17 <= v18 && *(_DWORD *)v13 < *(_DWORD *)(a3 + 4))
    {
      *(_DWORD *)a3 = v17;
      *(_DWORD *)a4 = v18;
      v19 = (_QWORD *)(a3 + 4);
      v20 = *(_QWORD *)(a3 + 4);
      v21 = *(_DWORD *)(a3 + 12);
      v22 = *(_DWORD *)(a4 + 12);
      *(_QWORD *)(a3 + 4) = *v13;
      *(_DWORD *)(a3 + 12) = v22;
      *v13 = v20;
      *(_DWORD *)(a4 + 12) = v21;
      v23 = *(_DWORD *)a3;
      v24 = *(_DWORD *)a2;
      if (*(_DWORD *)a3 < *(_DWORD *)a2 || v23 <= v24 && *(_DWORD *)v19 < *(_DWORD *)(a2 + 4))
      {
        *(_DWORD *)a2 = v23;
        *(_DWORD *)a3 = v24;
        v25 = (_QWORD *)(a2 + 4);
        v26 = *(_QWORD *)(a2 + 4);
        v27 = *(_DWORD *)(a2 + 12);
        v28 = *(_DWORD *)(a3 + 12);
        *(_QWORD *)(a2 + 4) = *v19;
        *(_DWORD *)(a2 + 12) = v28;
        *v19 = v26;
        *(_DWORD *)(a3 + 12) = v27;
        v29 = *(_DWORD *)a2;
        v30 = *(_DWORD *)a1;
        if (*(_DWORD *)a2 < *(_DWORD *)a1 || v29 <= v30 && *(_DWORD *)v25 < *(_DWORD *)(a1 + 4))
        {
          *(_DWORD *)a1 = v29;
          *(_DWORD *)a2 = v30;
          v31 = *(_DWORD *)(a1 + 12);
          v32 = *(_QWORD *)(a1 + 4);
          v33 = *(_DWORD *)(a2 + 12);
          *(_QWORD *)(a1 + 4) = *v25;
          *(_DWORD *)(a1 + 12) = v33;
          *v25 = v32;
          *(_DWORD *)(a2 + 12) = v31;
        }
      }
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v28;
  int v29;

  if (a1 != a2)
  {
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (int *)(a1 + 16 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(a1, a4, v9, v12);
        v12 -= 4;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = (_QWORD *)(a1 + 4);
      v15 = a2;
      do
      {
        v16 = *(_DWORD *)v15;
        v17 = *(_DWORD *)a1;
        if (*(_DWORD *)v15 < *(_DWORD *)a1 || v16 <= v17 && *(_DWORD *)(v15 + 4) < *(_DWORD *)v14)
        {
          *(_DWORD *)v15 = v17;
          *(_DWORD *)a1 = v16;
          v18 = *(_DWORD *)(v15 + 12);
          v19 = *(_QWORD *)(v15 + 4);
          v20 = *(_DWORD *)(a1 + 12);
          *(_QWORD *)(v15 + 4) = *v14;
          *(_DWORD *)(v15 + 12) = v20;
          *v14 = v19;
          *(_DWORD *)(a1 + 12) = v18;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(a1, a4, v9, (int *)a1);
        }
        v15 += 16;
      }
      while (v15 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v21 = (unint64_t)v8 >> 4;
      v22 = a2 - 16;
      do
      {
        v23 = *(_DWORD *)a1;
        v28 = *(_QWORD *)(a1 + 4);
        v29 = *(_DWORD *)(a1 + 12);
        v24 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(a1, a4, v21);
        if (v22 == v24)
        {
          *(_DWORD *)v24 = v23;
          *(_QWORD *)(v24 + 4) = v28;
          *(_DWORD *)(v24 + 12) = v29;
        }
        else
        {
          *(_DWORD *)v24 = *(_DWORD *)v22;
          v25 = *(_QWORD *)(v22 + 4);
          *(_DWORD *)(v24 + 12) = *(_DWORD *)(v22 + 12);
          *(_QWORD *)(v24 + 4) = v25;
          *(_DWORD *)v22 = v23;
          *(_QWORD *)(v22 + 4) = v28;
          *(_DWORD *)(v22 + 12) = v29;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(a1, v24 + 16, a4, (v24 + 16 - a1) >> 4);
        }
        v22 -= 16;
      }
      while (v21-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = (_DWORD *)(result + 16 * v7);
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = v8[4];
        if (*v8 < v10 || *v8 <= v10 && *(_DWORD *)(result + 16 * v7 + 4) < v8[5])
        {
          v8 += 4;
          v7 = v9;
        }
      }
      v11 = *v8;
      v12 = *a4;
      if (*v8 >= *a4)
      {
        if (v11 <= v12)
        {
          v13 = a4[1];
          if (v8[1] < v13)
            return result;
        }
        else
        {
          v13 = a4[1];
        }
        v14 = *((_QWORD *)a4 + 1);
        *a4 = v11;
        v15 = *(_QWORD *)(v8 + 1);
        a4[3] = v8[3];
        *(_QWORD *)(a4 + 1) = v15;
        if (v5 >= v7)
        {
          while (1)
          {
            v17 = 2 * v7;
            v7 = (2 * v7) | 1;
            v16 = (_DWORD *)(result + 16 * v7);
            v18 = v17 + 2;
            if (v18 < a3)
            {
              v19 = v16[4];
              if (*v16 < v19 || *v16 <= v19 && *(_DWORD *)(result + 16 * v7 + 4) < v16[5])
              {
                v16 += 4;
                v7 = v18;
              }
            }
            v20 = *v16;
            if (*v16 < v12 || v20 <= v12 && v16[1] < v13)
              break;
            *v8 = v20;
            v21 = *(_QWORD *)(v16 + 1);
            v8[3] = v16[3];
            *(_QWORD *)(v8 + 1) = v21;
            v8 = v16;
            if (v5 < v7)
              goto LABEL_23;
          }
        }
        v16 = v8;
LABEL_23:
        *v16 = v12;
        v16[1] = v13;
        *((_QWORD *)v16 + 1) = v14;
      }
    }
  }
  return result;
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = result;
    v7 = v3 + 1;
    result += 16 * (v3 + 1);
    v8 = 2 * v3;
    v3 = (2 * v3) | 1;
    v9 = v8 + 2;
    if (v9 < a3)
    {
      v10 = *(_DWORD *)(result + 16);
      if (*(_DWORD *)result < v10
        || *(_DWORD *)result <= v10 && *(_DWORD *)(v6 + 16 * v7 + 4) < *(_DWORD *)(result + 20))
      {
        result += 16;
        v3 = v9;
      }
    }
    *(_DWORD *)v6 = *(_DWORD *)result;
    v11 = *(_QWORD *)(result + 4);
    *(_DWORD *)(v6 + 12) = *(_DWORD *)(result + 12);
    *(_QWORD *)(v6 + 4) = v11;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  int *v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (int *)(result + 16 * (v4 >> 1));
    v7 = *v6;
    v8 = *(_DWORD *)(a2 - 16);
    if (*v6 >= v8)
    {
      if (v7 > v8)
        return result;
      v9 = *(_DWORD *)(a2 - 12);
      if (*(_DWORD *)(result + 16 * v5 + 4) >= v9)
        return result;
    }
    else
    {
      v9 = *(_DWORD *)(a2 - 12);
    }
    v10 = *(_QWORD *)(a2 - 8);
    *(_DWORD *)(a2 - 16) = v7;
    v11 = result + 16 * v5;
    v13 = *(_QWORD *)(v11 + 4);
    v12 = (_DWORD *)(v11 + 4);
    *(_DWORD *)(a2 - 4) = v12[2];
    *(_QWORD *)(a2 - 12) = v13;
    if (v4 >= 2)
    {
      while (1)
      {
        v15 = v5 - 1;
        v5 = (v5 - 1) >> 1;
        v14 = (int *)(result + 16 * v5);
        v16 = *v14;
        if (*v14 >= v8 && (v16 > v8 || *(_DWORD *)(result + 16 * v5 + 4) >= v9))
          break;
        v12 = v14 + 1;
        v17 = *(_QWORD *)(v14 + 1);
        *v6 = v16;
        v18 = v14[3];
        *(_QWORD *)(v6 + 1) = v17;
        v6[3] = v18;
        v6 = (int *)(result + 16 * v5);
        if (v15 <= 1)
          goto LABEL_12;
      }
    }
    v14 = v6;
LABEL_12:
    *v14 = v8;
    *v12 = v9;
    *((_QWORD *)v14 + 1) = v10;
  }
  return result;
}

void std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>>::__append((char **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 12 * a2;
  }
}

unint64_t fst::StringRepository<int,int>::RemovePrefix(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  int64_t v6;
  uint64_t v7;
  std::vector<int>::pointer begin;
  unsigned int *v9;
  int v10;
  std::vector<int> __p;
  std::vector<unsigned int> v13;

  v3 = a2;
  if (a3)
  {
    memset(&v13, 0, sizeof(v13));
    fst::StringRepository<int,int>::SeqOfId(a1, a2, &v13);
    v6 = v13.__end_ - v13.__begin_;
    v7 = v6 - a3;
    std::vector<int>::vector(&__p, v6 - a3);
    if (v6 != a3)
    {
      begin = __p.__begin_;
      v9 = &v13.__begin_[a3];
      do
      {
        v10 = *v9++;
        *begin++ = v10;
        --v7;
      }
      while (v7);
    }
    v3 = fst::StringRepository<int,int>::IdOfSeq(a1, (uint64_t)&__p);
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
    if (v13.__begin_)
    {
      v13.__end_ = v13.__begin_;
      operator delete(v13.__begin_);
    }
  }
  return v3;
}

void sub_1ADA07B84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int v21;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 2) >= a2)
  {
    if (a2)
    {
      v13 = 12 * ((12 * a2 - 12) / 0xC) + 12;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 2);
    v9 = v8 + a2;
    if (v8 + a2 > 0x1555555555555555)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 2);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0xAAAAAAAAAAAAAAALL)
      v11 = 0x1555555555555555;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,int>>>(v4, v11);
    else
      v12 = 0;
    v14 = &v12[12 * v8];
    v15 = &v12[12 * v11];
    v16 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v14, v16);
    v17 = &v14[v16];
    v19 = *a1;
    v18 = a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_QWORD *)(v18 - 12);
        v18 -= 12;
        v21 = *((_DWORD *)v18 + 2);
        *(_QWORD *)(v14 - 12) = v20;
        v14 -= 12;
        *((_DWORD *)v14 + 2) = v21;
      }
      while (v18 != v19);
      v18 = *a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
      operator delete(v18);
  }
}

void std::__hash_table<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,std::__unordered_map_hasher<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>>>::swap(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  v5 = *(void **)a2;
  *(_QWORD *)a2 = 0;
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = *(void **)a2;
  *(_QWORD *)a2 = v4;
  if (v7)
    operator delete(v7);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v9;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = v12;
  *(_QWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = v11;
  v13 = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = v13;
  v14 = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = v14;
  if (*(_QWORD *)(a1 + 24))
  {
    v15 = *(_QWORD *)(a1 + 8);
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v16 >= v15)
        v16 %= v15;
    }
    else
    {
      v16 &= v15 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v16) = a1 + 16;
  }
  if (v11)
  {
    v17 = *(_QWORD *)(a2 + 8);
    v18 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8);
    if ((v17 & (v17 - 1)) != 0)
    {
      if (v18 >= v17)
        v18 %= v17;
    }
    else
    {
      v18 &= v17 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v18) = a2 + 16;
  }
}

uint64_t fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::FreeMostMemory(uint64_t a1)
{
  uint64_t v2;
  _QWORD *i;
  uint64_t v4;
  void *v5;
  _OWORD v7[2];
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    *(_QWORD *)(a1 + 72) = 0;
  }
  for (i = *(_QWORD **)(a1 + 112); i; i = (_QWORD *)*i)
  {
    v4 = i[2];
    if (v4)
    {
      v5 = *(void **)v4;
      if (*(_QWORD *)v4)
      {
        *(_QWORD *)(v4 + 8) = v5;
        operator delete(v5);
      }
      MEMORY[0x1AF44D190](v4, 0x20C40960023A9);
    }
  }
  memset(v7, 0, sizeof(v7));
  v8 = 0x3A8000003F800000;
  std::__hash_table<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,std::__unordered_map_hasher<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>>>::swap((uint64_t)v7, a1 + 96);
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v7);
}

void fst::StringRepository<int,int>::Destroy(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  _OWORD v6[2];
  int v7;

  v3 = *(uint64_t **)a1;
  v2 = *(uint64_t **)(a1 + 8);
  if (*(uint64_t **)a1 != v2)
  {
    do
    {
      v4 = *v3;
      if (*v3)
      {
        v5 = *(void **)v4;
        if (*(_QWORD *)v4)
        {
          *(_QWORD *)(v4 + 8) = v5;
          operator delete(v5);
        }
        MEMORY[0x1AF44D190](v4, 0x10C402FEFCB83);
        v2 = *(uint64_t **)(a1 + 8);
      }
      ++v3;
    }
    while (v3 != v2);
    v3 = *(uint64_t **)a1;
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  memset(v6, 0, sizeof(v6));
  v7 = 1065353216;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::swap((uint64_t)v6, a1 + 24);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v6);
  if (v3)
    operator delete(v3);
}

uint64_t fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::~DeterminizerStar(uint64_t a1)
{
  void **v3;

  fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::FreeMostMemory(a1);
  fst::StringRepository<int,int>::~StringRepository((void **)(a1 + 136));
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 96);
  v3 = (void **)(a1 + 48);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return std::deque<std::pair<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> *,int>>::~deque[abi:ne180100]((_QWORD *)a1);
}

void **fst::StringRepository<int,int>::~StringRepository(void **a1)
{
  void *v2;

  fst::StringRepository<int,int>::Destroy((uint64_t)a1);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(a1 + 3));
  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    operator delete(v2);
  }
  return a1;
}

_QWORD *fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::ContextFst(_QWORD *a1, int a2, _QWORD *a3, uint64_t a4, int a5, int a6)
{
  uint64_t v12;

  *a1 = &unk_1E5D193D0;
  v12 = operator new();
  fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::ContextFstImpl(v12, a2, a3, a4, a5, a6);
  a1[1] = v12;
  return a1;
}

void sub_1ADA080D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C4065B34434);
  _Unwind_Resume(a1);
}

_QWORD *fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::~ContextFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D193D0;
  v2 = (_DWORD *)a1[1];
  v3 = v2[14] - 1;
  v2[14] = v3;
  if (!v3)
    (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::~ContextFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D193D0;
  v1 = (_DWORD *)a1[1];
  v2 = v1[14] - 1;
  v1[14] = v2;
  if (!v2)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Start(uint64_t a1)
{
  return fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Start(*(_QWORD *)(a1 + 8));
}

float fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Final(uint64_t a1, int a2)
{
  return fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Final(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::NumArcs(uint64_t a1, unsigned int a2)
{
  return fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::NumArcs(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::NumInputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::NumOutputEpsilons()
{
  return 0;
}

uint64_t fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

_QWORD *fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Copy(uint64_t a1, int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::ContextFst(v4, a1, a2);
  return v4;
}

void sub_1ADA082C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::InitStateIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &unk_1E5D1FFA8;
  *(_QWORD *)(v4 + 8) = a1;
  v5 = *a1;
  *(_QWORD *)(v4 + 16) = a1[1];
  *(_DWORD *)(v4 + 24) = 0;
  result = (*(uint64_t (**)(uint64_t *))(v5 + 24))(a1);
  *(_QWORD *)v4 = &unk_1E5D1C028;
  *a2 = v4;
  return result;
}

void sub_1ADA08380(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  return fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::ContextFstImpl(uint64_t a1, int a2, _QWORD *a3, uint64_t a4, int a5, int a6)
{
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  void *__p;
  void *v17;
  _DWORD *v18;
  std::string __str;

  v12 = fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheBaseImpl(a1);
  *(_QWORD *)v12 = &unk_1E5D1DA00;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_DWORD *)(v12 + 168) = 1065353216;
  *(_OWORD *)(v12 + 176) = 0u;
  *(_OWORD *)(v12 + 192) = 0u;
  *(_OWORD *)(v12 + 208) = 0u;
  *(_QWORD *)(v12 + 224) = 0;
  *(_DWORD *)(v12 + 232) = 1065353216;
  *(_QWORD *)(v12 + 240) = 0;
  *(_QWORD *)(v12 + 248) = 0;
  *(_QWORD *)(v12 + 256) = 0;
  kaldi::ConstIntegerSet<int>::ConstIntegerSet(v12 + 264, (uint64_t)a3);
  kaldi::ConstIntegerSet<int>::ConstIntegerSet(a1 + 328, a4);
  *(_DWORD *)(a1 + 392) = a2;
  *(_DWORD *)(a1 + 396) = a5;
  *(_DWORD *)(a1 + 400) = a6;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  if (*a3 == a3[1] && kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"Context FST created but there are no phone symbols: probably input FST was empty.", 81);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__str);
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "context");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  memset(&__str, 0, sizeof(__str));
  fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::FindLabel((_QWORD *)a1, (int **)&__str);
  if (a6 + 1 >= a5 || *(_QWORD *)(a1 + 368) == *(_QWORD *)(a1 + 376))
  {
    *(_DWORD *)(a1 + 404) = 0;
  }
  else
  {
    v18 = 0;
    v13 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v18, 1uLL);
    *v13 = 0;
    __p = v13;
    v17 = v13 + 1;
    v18 = &v13[v14];
    v17 = v13 + 1;
    *(_DWORD *)(a1 + 404) = fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::FindLabel((_QWORD *)a1, (int **)&__p);
    if (__p)
    {
      v17 = __p;
      operator delete(__p);
    }
  }
  if (__str.__r_.__value_.__r.__words[0])
  {
    __str.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1ADA085B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  if (__p)
    operator delete(__p);
  if (a14)
  {
    a15 = (uint64_t)a14;
    operator delete(a14);
  }
  if (*(char *)(v19 + 431) < 0)
    operator delete(*(void **)(v19 + 408));
  kaldi::ConstIntegerSet<int>::~ConstIntegerSet(v21);
  kaldi::ConstIntegerSet<int>::~ConstIntegerSet(a10);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::~__hash_table(v19 + 200);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::~__hash_table(v20);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl((_QWORD *)v19);
  _Unwind_Resume(a1);
}

void sub_1ADA08674()
{
  JUMPOUT(0x1ADA08630);
}

void sub_1ADA0867C()
{
  JUMPOUT(0x1ADA08638);
}

uint64_t fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::FindLabel(_QWORD *a1, int **a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  int **v11;

  v4 = (uint64_t)(a1 + 25);
  v5 = std::__hash_table<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>>>::find<std::vector<int>>(a1 + 25, a2);
  if (v5)
    return *((unsigned int *)v5 + 10);
  v8 = a1[31];
  v7 = a1 + 30;
  v6 = -1431655765 * ((v8 - a1[30]) >> 3);
  if (v8 >= a1[32])
  {
    v9 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(v7, (uint64_t)a2);
  }
  else
  {
    std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>((uint64_t)v7, (uint64_t)a2);
    v9 = v8 + 24;
  }
  a1[31] = v9;
  v11 = a2;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>(v4, a2, (uint64_t)&std::piecewise_construct, (uint64_t *)&v11)+ 10) = v6;
  return v6;
}

void fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::~ContextFstImpl(uint64_t a1)
{
  fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::~ContextFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheBaseImpl(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  char v5[8];
  uint64_t v6;

  *(_QWORD *)a1 = &unk_1E5D227F0;
  *(_QWORD *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1B720;
  *(_BYTE *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(_BYTE *)(a1 + 104) = FLAGS_fst_default_cache_gc;
  *(_QWORD *)(a1 + 112) = FLAGS_fst_default_cache_gc_limit;
  v2 = operator new();
  v5[0] = FLAGS_fst_default_cache_gc;
  v6 = FLAGS_fst_default_cache_gc_limit;
  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorCacheStore((_QWORD *)v2, v5);
  v3 = v6;
  *(_BYTE *)(v2 + 72) = v6 == 0;
  *(_DWORD *)(v2 + 76) = -1;
  *(_QWORD *)(v2 + 80) = 0;
  *(_BYTE *)(v2 + 88) = v5[0];
  if (v3 <= 0x1FA0)
    v3 = 8096;
  *(_QWORD *)(v2 + 96) = v3;
  *(_BYTE *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(a1 + 120) = v2;
  *(_BYTE *)(a1 + 128) = 1;
  return a1;
}

void sub_1ADA08884(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  MEMORY[0x1AF44D190](v2, 0x10A0C407A9BBF1FLL);
  v4 = *(void **)(v1 + 72);
  if (v4)
    operator delete(v4);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::~ContextFstImpl(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v7;

  *(_QWORD *)a1 = &unk_1E5D1DA00;
  if (*(char *)(a1 + 431) < 0)
    operator delete(*(void **)(a1 + 408));
  v2 = *(void **)(a1 + 368);
  if (v2)
  {
    *(_QWORD *)(a1 + 376) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 344);
  if (v3)
    operator delete(v3);
  v4 = *(void **)(a1 + 304);
  if (v4)
  {
    *(_QWORD *)(a1 + 312) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 280);
  if (v5)
    operator delete(v5);
  v7 = (void **)(a1 + 240);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v7);
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::~__hash_table(a1 + 200);
  v7 = (void **)(a1 + 176);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v7);
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::~__hash_table(a1 + 136);
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl((_QWORD *)a1);
}

uint64_t fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Start(uint64_t a1)
{
  std::vector<int>::size_type v2;
  int State;
  std::vector<int>::value_type __x;
  std::vector<int> v6;

  if (!*(_BYTE *)(a1 + 60))
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 4))
    {
      *(_BYTE *)(a1 + 60) = 1;
    }
    else if (!*(_BYTE *)(a1 + 60))
    {
      v2 = *(int *)(a1 + 396) - 1;
      __x = 0;
      std::vector<int>::vector(&v6, v2, &__x);
      State = fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::FindState((_QWORD *)a1, &v6.__begin_);
      *(_DWORD *)(a1 + 64) = State;
      *(_BYTE *)(a1 + 60) = 1;
      if (*(_DWORD *)(a1 + 68) <= State)
        *(_DWORD *)(a1 + 68) = State + 1;
      if (v6.__begin_)
      {
        v6.__end_ = v6.__begin_;
        operator delete(v6.__begin_);
      }
    }
  }
  return *(unsigned int *)(a1 + 64);
}

void sub_1ADA08A28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::FindState(_QWORD *a1, int **a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  int **v11;

  v4 = (uint64_t)(a1 + 17);
  v5 = std::__hash_table<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>>>::find<std::vector<int>>(a1 + 17, a2);
  if (v5)
    return *((unsigned int *)v5 + 10);
  v8 = a1[23];
  v7 = a1 + 22;
  v6 = -1431655765 * ((v8 - a1[22]) >> 3);
  if (v8 >= a1[24])
  {
    v9 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(v7, (uint64_t)a2);
  }
  else
  {
    std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>((uint64_t)v7, (uint64_t)a2);
    v9 = v8 + 24;
  }
  a1[23] = v9;
  v11 = a2;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>(v4, a2, (uint64_t)&std::piecewise_construct, (uint64_t *)&v11)+ 10) = v6;
  return v6;
}

float fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Final(uint64_t a1, int a2)
{
  uint64_t v4;
  _DWORD **v5;
  uint64_t v6;
  float v7;
  char *MutableState;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal(a1, a2) & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 120);
    if (*(_DWORD *)(v4 + 76) == a2)
      v5 = (_DWORD **)(v4 + 80);
    else
      v5 = (_DWORD **)(*(_QWORD *)(v4 + 8) + 8 * a2 + 8);
    return *(float *)*v5;
  }
  else
  {
    v6 = *(int *)(a1 + 400);
    v7 = 0.0;
    if ((int)v6 < *(_DWORD *)(a1 + 396) - 1)
    {
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 24 * a2) + 4 * v6) == *(_DWORD *)(a1 + 392))
        v7 = 0.0;
      else
        v7 = INFINITY;
    }
    MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
    *(float *)MutableState = v7;
    *((_DWORD *)MutableState + 12) |= 9u;
  }
  return v7;
}

uint64_t fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::NumArcs(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v11;

  if (fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2))
  {
    v4 = *(_QWORD *)(a1 + 120);
    if (*(_DWORD *)(v4 + 76) == a2)
      v5 = v4 + 80;
    else
      v5 = *(_QWORD *)(v4 + 8) + 8 * (int)(a2 + 1);
    return (uint64_t)(*(_QWORD *)(*(_QWORD *)v5 + 32) - *(_QWORD *)(*(_QWORD *)v5 + 24)) >> 4;
  }
  else
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 24 * a2);
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 24 * a2 + 8);
    if (v6 == v7 || (v8 = *(_DWORD *)(v7 - 4), v8 != *(_DWORD *)(a1 + 392)))
    {
      v11 = ((uint64_t)(*(_QWORD *)(a1 + 312) - *(_QWORD *)(a1 + 304)) >> 2)
          + ((uint64_t)(*(_QWORD *)(a1 + 376) - *(_QWORD *)(a1 + 368)) >> 2);
    }
    else
    {
      v9 = *(int *)(a1 + 400);
      if ((_DWORD)v9 == *(_DWORD *)(a1 + 396) - 1 || *(_DWORD *)(v6 + 4 * v9) == v8)
        return (uint64_t)(*(_QWORD *)(a1 + 376) - *(_QWORD *)(a1 + 368)) >> 2;
      v11 = (uint64_t)(*(_QWORD *)(a1 + 376) - *(_QWORD *)(a1 + 368)) >> 2;
    }
    return v11 + 1;
  }
}

uint64_t fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::NumInputEpsilons(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 8);
}

void fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Expand(uint64_t a1, int a2)
{
  char *MutableState;
  int *i;
  char *v6;
  int *j;
  char *v8;
  __int128 v9;

  if (fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::CreateArc(a1, a2, *(_DWORD *)(a1 + 392), &v9))
  {
    MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
    fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(MutableState, &v9);
  }
  for (i = *(int **)(a1 + 304); i != *(int **)(a1 + 312); ++i)
  {
    if (fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::CreateArc(a1, a2, *i, &v9))
    {
      v6 = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
      fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(v6, &v9);
    }
  }
  for (j = *(int **)(a1 + 368); j != *(int **)(a1 + 376); ++j)
  {
    if (fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::CreateArc(a1, a2, *j, &v9))
    {
      v8 = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
      fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(v8, &v9);
    }
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

uint64_t fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::CreateArc(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  uint64_t v8;
  int *v9;
  int v11;
  const void **v12;
  _BOOL4 v13;
  int v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  std::vector<int>::pointer begin;
  uint64_t v21;
  uint64_t v22;
  int State;
  int *v24;
  int *v25;
  int *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  int *v32;
  char *v33;
  int v34;
  int v35;
  int *v36;
  uint64_t i;
  int Label;
  std::vector<int> __p[11];
  int *v40;
  int *v41;
  unint64_t v42;

  if (!a3)
    return 0;
  v8 = *(_QWORD *)(a1 + 176);
  if (kaldi::ConstIntegerSet<int>::count(a1 + 328, a3))
  {
    v9 = (int *)operator new(4uLL);
    *v9 = -a3;
    __p[0].__end_ = v9 + 1;
    __p[0].__end_cap_.__value_ = v9 + 1;
    __p[0].__begin_ = v9;
    *a4 = fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::FindLabel((_QWORD *)a1, &__p[0].__begin_);
    a4[1] = a3;
    a4[2] = 0;
    a4[3] = a2;
    goto LABEL_4;
  }
  v11 = a2;
  v12 = (const void **)(v8 + 24 * a2);
  v13 = kaldi::ConstIntegerSet<int>::count(a1 + 264, a3);
  v14 = *(_DWORD *)(a1 + 392);
  if (!v13)
  {
    if (v14 != a3)
    {
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"ContextFst: CreateArc, invalid olabel supplied [confusion about phone list or disambig symbols?]: ", 98);
        std::ostream::operator<<();
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      }
      exit(1);
    }
LABEL_13:
    v16 = *(int *)(a1 + 400);
    if ((_DWORD)v16 != *(_DWORD *)(a1 + 396) - 1 && *((_DWORD *)*v12 + v16) != a3)
      goto LABEL_16;
    return 0;
  }
  if (v14 == a3)
    goto LABEL_13;
  v15 = *(_DWORD **)(v8 + 24 * v11 + 8);
  if (*v12 != v15 && *(v15 - 1) == v14)
    return 0;
LABEL_16:
  std::vector<int>::vector(__p, *(int *)(a1 + 396) - 1);
  LODWORD(v17) = *(_DWORD *)(a1 + 396);
  v18 = v17 - 2;
  if ((int)v17 > 2)
  {
    v19 = 0;
    begin = __p[0].__begin_;
    v21 = (uint64_t)*v12 + 4;
    do
    {
      begin[v19] = *(_DWORD *)(v21 + 4 * v19);
      v17 = *(int *)(a1 + 396);
      v18 = v17 - 2;
      ++v19;
    }
    while (v19 < v17 - 2);
  }
  if ((int)v17 >= 2)
    __p[0].__begin_[v18] = a3;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v22 = *(_QWORD *)(v8 + 24 * v11 + 8);
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v40, *v12, v22, (v22 - (uint64_t)*v12) >> 2);
  State = fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::FindState((_QWORD *)a1, &__p[0].__begin_);
  v24 = v41;
  if ((unint64_t)v41 >= v42)
  {
    v26 = v40;
    v27 = v41 - v40;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v29 = v42 - (_QWORD)v40;
    if ((uint64_t)(v42 - (_QWORD)v40) >> 1 > v28)
      v28 = v29 >> 1;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
      v30 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    if (v30)
    {
      v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v42, v30);
      v26 = v40;
      v24 = v41;
    }
    else
    {
      v31 = 0;
    }
    v32 = (int *)&v31[4 * v27];
    v33 = &v31[4 * v30];
    *v32 = a3;
    v25 = v32 + 1;
    while (v24 != v26)
    {
      v34 = *--v24;
      *--v32 = v34;
    }
    v40 = v32;
    v41 = v25;
    v42 = (unint64_t)v33;
    if (v26)
      operator delete(v26);
  }
  else
  {
    *v41 = a3;
    v25 = v24 + 1;
  }
  v41 = v25;
  v35 = *(_DWORD *)(a1 + 396);
  v36 = v40;
  if (v35 >= 2)
  {
    for (i = 1; i < v35; ++i)
    {
      if (v36[i] == *(_DWORD *)(a1 + 392))
      {
        v36[i] = 0;
        v35 = *(_DWORD *)(a1 + 396);
      }
    }
    v36 = v40;
  }
  if (v36[*(int *)(a1 + 400)])
  {
    Label = fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::FindLabel((_QWORD *)a1, &v40);
    v36 = v40;
    *a4 = Label;
    a4[1] = a3;
    a4[2] = 0;
    a4[3] = State;
    if (!v36)
      goto LABEL_4;
  }
  else
  {
    *a4 = *(_DWORD *)(a1 + 404);
    a4[1] = a3;
    a4[2] = 0;
    a4[3] = State;
  }
  v41 = v36;
  operator delete(v36);
LABEL_4:
  if (__p[0].__begin_)
  {
    __p[0].__end_ = __p[0].__begin_;
    operator delete(__p[0].__begin_);
  }
  return 1;
}

void sub_1ADA0912C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
  _Unwind_Resume(a1);
}

_QWORD *fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::ContextFst(_QWORD *result, uint64_t a2, int a3)
{
  _QWORD *v4;
  uint64_t v5;

  *result = &unk_1E5D193D0;
  if (a3)
  {
    v4 = (_QWORD *)operator new();
    fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::ContextFstImpl(v4, *(_QWORD *)(a2 + 8));
  }
  v5 = *(_QWORD *)(a2 + 8);
  result[1] = v5;
  ++*(_DWORD *)(v5 + 56);
  return result;
}

void sub_1ADA09200(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C4065B34434);
  _Unwind_Resume(a1);
}

void fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::ContextFstImpl(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v5[34];

  v4 = fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheBaseImpl((uint64_t)a1);
  *(_OWORD *)(v4 + 136) = 0u;
  *(_QWORD *)v4 = &unk_1E5D1DA00;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_DWORD *)(v4 + 168) = 1065353216;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_QWORD *)(v4 + 224) = 0;
  *(_DWORD *)(v4 + 232) = 1065353216;
  *(_QWORD *)(v4 + 240) = 0;
  *(_QWORD *)(v4 + 248) = 0;
  *(_QWORD *)(v4 + 256) = 0;
  kaldi::ConstIntegerSet<int>::ConstIntegerSet(v4 + 264, a2 + 264);
  kaldi::ConstIntegerSet<int>::ConstIntegerSet((uint64_t)(a1 + 41), a2 + 328);
  a1[51] = 0;
  a1[52] = 0;
  a1[53] = 0;
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"ContextFst copying not yet supported [not hard, but would have to test.]", 72);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
  }
  exit(1);
}

void sub_1ADA092F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  if (*(char *)(v9 + 431) < 0)
    operator delete(*(void **)(v9 + 408));
  v12 = *(void **)(v9 + 368);
  if (v12)
  {
    *(_QWORD *)(v9 + 376) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(v9 + 344);
  if (v13)
    operator delete(v13);
  v14 = *(void **)(v9 + 304);
  if (v14)
  {
    *(_QWORD *)(v9 + 312) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(v9 + 280);
  if (v15)
    operator delete(v15);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::~__hash_table(v9 + 200);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::~__hash_table(v10);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl((_QWORD *)v9);
  _Unwind_Resume(a1);
}

void fst::StateIterator<fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>::~StateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>::Next_(uint64_t result)
{
  ++*(_DWORD *)(result + 24);
  return result;
}

uint64_t fst::CacheStateIterator<fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>::~CacheStateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>::Done(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _BOOL8 v4;
  int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int *v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  char *v20;
  unint64_t v21;

  v2 = *(_DWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68))
    return 0;
  v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if (v5 >= *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68))
    return 1;
  v6 = v5;
  do
  {
    fst::ArcIterator<fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>::ArcIterator(&v20, *(_QWORD *)(a1 + 8), v6);
    v7 = v21;
    v8 = *((_QWORD *)v20 + 3);
    v9 = *((_QWORD *)v20 + 4) - v8;
    v10 = *(_QWORD *)(a1 + 16);
    if (v21 < v9 >> 4)
    {
      v11 = v9 >> 4;
      v12 = *(_DWORD *)(v10 + 68);
      v13 = (int *)(v8 + 16 * v21 + 12);
      do
      {
        v15 = *v13;
        v13 += 4;
        v14 = v15;
        if (v12 <= v15)
        {
          v12 = v14 + 1;
          *(_DWORD *)(v10 + 68) = v14 + 1;
        }
        ++v7;
      }
      while (v11 != v7);
      v21 = v11;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(v10, v6);
    v16 = *(_DWORD *)(a1 + 24);
    v17 = *(_QWORD *)(a1 + 16);
    v18 = *(_DWORD *)(v17 + 68);
    --*((_DWORD *)v20 + 13);
    v4 = v16 >= v18;
    if (v16 < v18)
      break;
    v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v17);
  }
  while (v6 < *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68));
  return v4;
}

void sub_1ADA09510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  --*(_DWORD *)(a9 + 52);
  _Unwind_Resume(a1);
}

char **fst::ArcIterator<fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>::ArcIterator(char **a1, uint64_t a2, int a3)
{
  uint64_t v6;
  char *MutableState;

  v6 = *(_QWORD *)(a2 + 8);
  a1[1] = 0;
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 13);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(*(_QWORD *)(a2 + 8), a3) & 1) == 0)fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Expand(*(_QWORD *)(a2 + 8), a3);
  return a1;
}

void sub_1ADA09594(_Unwind_Exception *a1)
{
  uint64_t v1;

  --*(_DWORD *)(*(_QWORD *)v1 + 52);
  _Unwind_Resume(a1);
}

uint64_t fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Expand(a1, a2);
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(a1, a2, a3);
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;

  v6 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>(v6, a1, a2, a3);
  return v6;
}

void sub_1ADA09650(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  __n128 *v8;
  __n128 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  *(_QWORD *)fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, (uint64_t)a4) = &unk_1E5D1D7C0;
  v8 = (__n128 *)a4[5];
  if (!v8)
  {
    v8 = (__n128 *)operator new();
    fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>::SequenceComposeFilter((uint64_t)v8, a2, a3, a4[3], a4[4]);
  }
  *(_QWORD *)(a1 + 136) = v8;
  v9 = *v8;
  *(__n128 *)(a1 + 144) = *v8;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v9.n128_u64[0] + 32))(v9.n128_u64[0], v9);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 152) + 32))(*(_QWORD *)(a1 + 152));
  v10 = (_QWORD *)a4[6];
  if (!v10)
  {
    v10 = (_QWORD *)operator new();
    v10[1] = v10;
    v10[2] = v10;
    std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::unordered_set((uint64_t)(v10 + 3), 0, v10 + 1, v10 + 2);
    v10[10] = 0;
    v10[11] = 0;
    v10[12] = 0;
  }
  *(_QWORD *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3)
    *(_QWORD *)(a1 + 8) |= 4uLL;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  v13 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 144) + 40))(*(_QWORD *)(a1 + 144), v11);
  v14 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 152) + 40))(*(_QWORD *)(a1 + 152), v12);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::ComposeProperties(v13, v14) & 0x3FFFFFFF0004;
  return a1;
}

void sub_1ADA09824(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  int v4;
  int v5;
  BOOL v6;
  int v7;
  BOOL v8;
  int v9;
  fst *v11;
  _QWORD *v12;
  fst *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *__p[2];
  char v17;
  char v18;

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 144) + 48))(*(_QWORD *)(a1 + 144)) & 1) != 0
    && (*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 144) + 24))(*(_QWORD *)(a1 + 144), 1) != 1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v13 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)__p);
    v14 = (_QWORD *)fst::cerr(v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"ComposeFst: 1st argument requires matching but cannot.", 54);
  }
  else if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 152) + 48))(*(_QWORD *)(a1 + 152)) & 1) != 0
         && (*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 152) + 24))(*(_QWORD *)(a1 + 152), 1))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v2 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)__p);
    v3 = (_QWORD *)fst::cerr(v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ComposeFst: 2nd argument requires matching but cannot.", 54);
  }
  else
  {
    v4 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 144) + 24))(*(_QWORD *)(a1 + 144), 0);
    v5 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 152) + 24))(*(_QWORD *)(a1 + 152), 0);
    if (v5)
      v6 = 0;
    else
      v6 = v4 == 1;
    if (v6)
      v7 = 2;
    else
      v7 = 1;
    v8 = v4 == 1;
    if (v4 == 1)
      v9 = v7;
    else
      v9 = 0;
    if (v8 || v5 == 0)
      goto LABEL_36;
    v9 = 1;
    if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 144) + 24))(*(_QWORD *)(a1 + 144), 1) == 1)
      goto LABEL_36;
    if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 152) + 24))(*(_QWORD *)(a1 + 152), 1))
    {
      v9 = 0;
      goto LABEL_36;
    }
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v11 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)__p);
    v12 = (_QWORD *)fst::cerr(v11);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: 1st argument cannot match on output labels ", 55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"and 2nd argument cannot match on input labels (sort?).", 54);
  }
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v18);
  if (v17 < 0)
    operator delete(__p[0]);
  v9 = 3;
LABEL_36:
  *(_DWORD *)(a1 + 184) = v9;
}

void sub_1ADA09AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 160) + 64))(*(_QWORD *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 168) + 64))(*(_QWORD *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 144) + 40))(*(_QWORD *)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 152) + 40))(*(_QWORD *)(a1 + 152), 0) & 4) != 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(v2, a1);
  return v2;
}

void sub_1ADA09C78(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(_QWORD *a1, int a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  char v16;

  v4 = (unsigned int *)(*(_QWORD *)(a1[22] + 80) + 12 * a2);
  v5 = *v4;
  v6 = v4[1];
  v7 = a1[17];
  v16 = *((_BYTE *)v4 + 8);
  fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(v7, v5, v6, &v16);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    v9 = a1[20];
    v8 = a1[21];
    v10 = a1[19];
    v11 = (uint64_t)a1;
    v12 = a2;
    v13 = v6;
    v14 = v5;
    v15 = 1;
  }
  else
  {
    v8 = a1[20];
    v9 = a1[21];
    v10 = a1[18];
    v11 = (uint64_t)a1;
    v12 = a2;
    v13 = v5;
    v14 = v6;
    v15 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>(v11, v12, v8, v13, v9, v14, v10, v15);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 144) + 24))(*(_QWORD *)(a1 + 144), 0) != a3
    || (*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 152) + 24))(*(_QWORD *)(a1 + 152), 0) != a3)
  {
    return 0;
  }
  v6 = operator new();
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(v6, a2, a1, a3);
  return v6;
}

void sub_1ADA09DEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(_QWORD **a1)
{
  uint64_t result;
  unsigned int v3;
  unint64_t v4;
  char v5;

  result = (*(uint64_t (**)(_QWORD *))(*a1[20] + 24))(a1[20]);
  if ((_DWORD)result != -1)
  {
    v3 = result;
    result = (*(uint64_t (**)(_QWORD *))(*a1[21] + 24))(a1[21]);
    if ((_DWORD)result != -1)
    {
      v4 = __PAIR64__(result, v3);
      v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 80);
  v5 = (unsigned int *)(v4 + 12 * a2);
  v6 = *v5;
  v10 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 144) + 96))(*(_QWORD *)(a1 + 144), v6);
  if (v10 != INFINITY)
  {
    v7 = v5[1];
    v8 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 152) + 96))(*(_QWORD *)(a1 + 152), v7);
    v10 = v8;
    if (v8 != INFINITY)
    {
      v9 = *(_QWORD *)(a1 + 136);
      LOBYTE(v10) = *(_BYTE *)(v4 + 12 * a2 + 8);
      fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(v9, v6, v7, &v10);
    }
  }
}

uint64_t fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>::SequenceComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;

  v6 = a4;
  if (!a4)
  {
    v6 = operator new();
    fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::ContextMatcher(v6, a2, 1);
  }
  *(_QWORD *)a1 = v6;
  if (!a5)
  {
    a5 = operator new();
    *(_QWORD *)a5 = &unk_1E5D1DA38;
    *(_QWORD *)(a5 + 8) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 88))(a3, 0);
    *(_DWORD *)(a5 + 24) = -1;
    *(_BYTE *)(a5 + 44) = 0;
    *(_QWORD *)(a5 + 16) = 0xFFFFFFFF00000003;
    v6 = *(_QWORD *)a1;
  }
  *(_QWORD *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  *(_QWORD *)(a1 + 24) = -1;
  *(_BYTE *)(a1 + 32) = -1;
  return a1;
}

void sub_1ADA0A0B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C407AB34C30);
  _Unwind_Resume(a1);
}

uint64_t fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::ContextMatcher(uint64_t a1, uint64_t a2, int a3)
{
  unsigned __int8 *v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  int v10;
  void **v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  BOOL v18;
  BOOL v19;
  int v20;
  void *__p[2];
  unsigned __int8 v23;

  *(_QWORD *)a1 = &unk_1E5D1DA38;
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  *(_QWORD *)(a1 + 20) = -1;
  *(_BYTE *)(a1 + 44) = 0;
  if (a3 != 1)
    goto LABEL_28;
  v6 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "context");
  v7 = v6[23];
  if ((v7 & 0x80u) == 0)
    v8 = (void *)v6[23];
  else
    v8 = (void *)*((_QWORD *)v6 + 1);
  v9 = v23;
  v10 = (char)v23;
  if ((v23 & 0x80u) != 0)
    v9 = (unint64_t)__p[1];
  if (v8 != (void *)v9)
  {
    v19 = 0;
    if (((char)v23 & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_27;
  }
  if ((v23 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v7 & 0x80) != 0)
  {
    v19 = memcmp(*(const void **)v6, v11, *((_QWORD *)v6 + 1)) == 0;
    goto LABEL_23;
  }
  if (v6[23])
  {
    v12 = v7 - 1;
    do
    {
      v14 = *v6++;
      v13 = v14;
      v16 = *(unsigned __int8 *)v11;
      v11 = (void **)((char *)v11 + 1);
      v15 = v16;
      v18 = v12-- != 0;
      v19 = v13 == v15;
    }
    while (v13 == v15 && v18);
LABEL_23:
    if ((v10 & 0x80000000) == 0)
      goto LABEL_24;
LABEL_27:
    operator delete(__p[0]);
    if (v19)
      goto LABEL_25;
LABEL_28:
    v20 = 3;
    goto LABEL_29;
  }
  v19 = 1;
  if ((char)v23 < 0)
    goto LABEL_27;
LABEL_24:
  if (!v19)
    goto LABEL_28;
LABEL_25:
  v20 = 1;
LABEL_29:
  *(_DWORD *)(a1 + 16) = v20;
  return a1;
}

_QWORD *fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::~ContextMatcher(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E5D1DA38;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::~ContextMatcher(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_1E5D1DA38;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  *(_QWORD *)v4 = &unk_1E5D1DA38;
  *(_QWORD *)(v4 + 8) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 88))(*(_QWORD *)(a1 + 8), a2);
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 20) = -1;
  *(_BYTE *)(v4 + 44) = 0;
  return v4;
}

void sub_1ADA0A350(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C407AB34C30);
  _Unwind_Resume(a1);
}

uint64_t fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Type(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Properties(uint64_t a1, uint64_t a2)
{
  return a2;
}

BOOL fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Done_(uint64_t a1)
{
  return *(_BYTE *)(a1 + 44) == 0;
}

uint64_t fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Value_(uint64_t a1)
{
  return a1 + 28;
}

uint64_t fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Next_(uint64_t result)
{
  *(_BYTE *)(result + 44) = 0;
  return result;
}

uint64_t fst::MatcherBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Priority_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, a2);
}

void fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::SetState(uint64_t a1, int a2)
{
  fst *v4;
  _QWORD *v5;
  void *__p[2];
  char v7;
  char v8;

  if (*(_DWORD *)(a1 + 16) == 3)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    v4 = fst::LogMessage::LogMessage((fst *)&v8, (uint64_t)__p);
    v5 = (_QWORD *)fst::cerr(v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"ContextMatcher: bad match type", 30);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v8);
    if (v7 < 0)
      operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 24) = a2;
}

void sub_1ADA0A468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Find(uint64_t a1, int a2)
{
  uint64_t result;
  int v4;

  if (a2)
  {
    if (a2 == -1)
    {
      result = 0;
      *(_BYTE *)(a1 + 44) = 0;
      return result;
    }
    result = fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::CreateArc(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_DWORD *)(a1 + 24), a2, (_DWORD *)(a1 + 28));
  }
  else
  {
    *(_QWORD *)(a1 + 28) = 0xFFFFFFFF00000000;
    v4 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 36) = 0;
    *(_DWORD *)(a1 + 40) = v4;
    result = 1;
  }
  *(_BYTE *)(a1 + 44) = result;
  return result;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *a1 = &unk_1E5D1D7C0;
  v2 = (_QWORD *)a1[17];
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    v3 = v2[1];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    MEMORY[0x1AF44D190](v2, 0x1060C40AD892F49);
  }
  v4 = a1[22];
  if (v4)
  {
    v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(_QWORD *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1AF44D190](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  __n128 v6;
  uint64_t v7;

  *fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFstImplBase((_QWORD *)a1, a2) = &unk_1E5D1D7C0;
  v4 = (_QWORD *)operator new();
  v5 = *(_QWORD **)(a2 + 136);
  *v4 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 16))(*v5, 1);
  v4[1] = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v5[1] + 16))(v5[1], 1);
  v4[2] = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 32))(*v4);
  v4[3] = -1;
  *((_BYTE *)v4 + 32) = -1;
  *(_QWORD *)(a1 + 136) = v4;
  v6 = *(__n128 *)v4;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)v4;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v6.n128_u64[0] + 32))(v6.n128_u64[0], v6);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 152) + 32))(*(_QWORD *)(a1 + 152));
  v7 = operator new();
  fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::CompactHashBiTable(v7, *(_QWORD *)(a2 + 176));
  *(_QWORD *)(a1 + 176) = v7;
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  return a1;
}

void sub_1ADA0A6BC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v7;
  uint64_t v8;
  fst *v11;
  _QWORD *v12;
  void *__p[2];
  char v14;
  char v15;

  v3 = *(_DWORD *)(a1 + 184);
  if (!v3)
    return 1;
  if (v3 == 1)
    return 0;
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 144) + 104))(*(_QWORD *)(a1 + 144));
  v8 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 152) + 104))(*(_QWORD *)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    v12 = (_QWORD *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0)
      operator delete(__p[0]);
    *(_QWORD *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1)
    return 0;
  return v8 == -1 || v7 <= v8;
}

void sub_1ADA0A82C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int *v14;
  _QWORD v15[3];
  _DWORD *v16;
  unint64_t v17;
  int v18[4];

  fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::SetState(a7, a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  v18[2] = 0;
  v18[3] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>(a1, a2, a7, v18, a8);
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a5 + 136))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2])
        goto LABEL_13;
LABEL_7:
      v14 = (int *)(v15[1] + 16 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v15[0] + 24))(v15[0]))
      break;
    if (!v15[0])
      goto LABEL_7;
    v14 = (int *)(*(uint64_t (**)(void))(*(_QWORD *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>(a1, a2, a7, v14, a8);
    if (v15[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v15[0] + 40))(v15[0]);
    else
      ++v17;
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(_QWORD *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16)
    --*v16;
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1ADA0A9C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  else
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>(uint64_t a1, int a2, uint64_t a3, int *a4, int a5)
{
  int *v10;
  __int128 v11;
  unsigned __int8 *v12;
  char v13;
  unsigned __int8 *v14;
  char v15;
  int v16;
  char v17;
  unsigned int *v18;
  __int128 *v19;
  int v20;
  char v21;
  char v22;
  __int128 v23;
  __int128 v24;

  v10 = a4 + 1;
  if (!a5)
    v10 = a4;
  if (fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Find(a3, *v10)
    && *(_BYTE *)(a3 + 44))
  {
    v11 = *(_OWORD *)(a3 + 28);
    v23 = *(_OWORD *)a4;
    v24 = v11;
    if (a5)
    {
      v12 = *(unsigned __int8 **)(a1 + 136);
      if (DWORD1(v23) != -1)
      {
        if ((_DWORD)v24 == -1)
        {
          v16 = v12[32];
          if (v16)
            v17 = -1;
          else
            v17 = 0;
          v22 = v17;
          if (v16)
            goto LABEL_35;
        }
        else
        {
          if (DWORD1(v23))
            v13 = 0;
          else
            v13 = -1;
          v22 = v13;
          if (!DWORD1(v23))
            goto LABEL_35;
        }
        goto LABEL_28;
      }
      if (!v12[33])
      {
        v22 = v12[34] ^ 1;
LABEL_28:
        v18 = (unsigned int *)&v23;
        v19 = &v24;
LABEL_34:
        fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v18, (uint64_t)v19, &v22);
      }
LABEL_35:
      *(_BYTE *)(a3 + 44) = 0;
      return;
    }
    v14 = *(unsigned __int8 **)(a1 + 136);
    if (DWORD1(v24) == -1)
    {
      if (v14[33])
        goto LABEL_35;
      v22 = v14[34] ^ 1;
    }
    else if ((_DWORD)v23 == -1)
    {
      v20 = v14[32];
      if (v20)
        v21 = -1;
      else
        v21 = 0;
      v22 = v21;
      if (v20)
        goto LABEL_35;
    }
    else
    {
      if (DWORD1(v24))
        v15 = 0;
      else
        v15 = -1;
      v22 = v15;
      if (!DWORD1(v24))
        goto LABEL_35;
    }
    v18 = (unsigned int *)&v24;
    v19 = &v23;
    goto LABEL_34;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(_QWORD *)a1 = &unk_1E5D1F780;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = a4;
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a3 + 144) + 16))(*(_QWORD *)(a3 + 144), 0);
  *(_QWORD *)(a1 + 40) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a3 + 152) + 16))(*(_QWORD *)(a3 + 152), 0);
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 52) = xmmword_1AE142840;
  *(_BYTE *)(a1 + 84) = 0;
  if (a4 == 1)
    *(_QWORD *)(a1 + 52) = 0xFFFFFFFF00000000;
  return a1;
}

_QWORD *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_1E5D1F780;
  v2 = a1[4];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[5];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_1E5D1F780;
  v2 = a1[4];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[5];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(v4, a1, a2);
  return v4;
}

void sub_1ADA0ACF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
  if ((_DWORD)result != 3)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2);
    if ((_DWORD)result != 3)
    {
      if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), a2) != 4
        || (result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2), (_DWORD)result != 4))
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), a2) == 4
          && (*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2), (_DWORD)result != 4))
        {
          if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3;
          result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2);
          if ((_DWORD)result != *(_DWORD *)(a1 + 28))
            return 3;
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 84))
    return a2 | 4;
  else
    return a2;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t a1, int a2)
{
  int *v3;
  int v4;

  if (*(_DWORD *)(a1 + 24) != a2)
  {
    *(_DWORD *)(a1 + 24) = a2;
    v3 = (int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 176) + 80) + 12 * a2);
    v4 = v3[1];
    fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::SetState(*(_QWORD *)(a1 + 32), *v3);
    fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::SetState(*(_QWORD *)(a1 + 40), v4);
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a1 + 24);
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;

  *(_BYTE *)(a1 + 48) = a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if (a2)
    {
      v2 = (uint64_t *)(a1 + 40);
      v3 = (uint64_t *)(a1 + 32);
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>(a1, a2, *v2, *v3);
    }
  }
  else if (a2)
  {
    v2 = (uint64_t *)(a1 + 32);
    v3 = (uint64_t *)(a1 + 40);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>(a1, a2, *v2, *v3);
  }
  return 1;
}

BOOL fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 48)
      && !*(_BYTE *)(*(_QWORD *)(a1 + 32) + 44)
      && *(_BYTE *)(*(_QWORD *)(a1 + 40) + 44) == 0;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
    return a1 + 52;
  else
    return a1 + 68;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_BYTE *)(result + 48))
  {
    *(_BYTE *)(result + 48) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 28))
    {
      v2 = *(_QWORD *)(result + 32);
      v1 = *(_QWORD *)(result + 40);
    }
    else
    {
      v1 = *(_QWORD *)(result + 32);
      v2 = *(_QWORD *)(result + 40);
    }
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  fst *v6;
  _QWORD *v7;
  void *__p[2];
  char v10;
  char v11;

  *(_QWORD *)a1 = &unk_1E5D1F780;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 32) + 16))(*(_QWORD *)(a2 + 32), a3);
  *(_QWORD *)(a1 + 40) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 40) + 16))(*(_QWORD *)(a2 + 40), a3);
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 52) = xmmword_1AE142840;
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  if ((_DWORD)a3)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v6 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
    v7 = (_QWORD *)fst::cerr(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ComposeFstMatcher: safe copy not supported", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
    if (v10 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 84) = 1;
  }
  if (*(_DWORD *)(a1 + 28) == 1)
    *(int32x2_t *)(a1 + 52) = vrev64_s32(*(int32x2_t *)(a1 + 52));
  return a1;
}

void sub_1ADA0B0FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Find(a3, a2);
  if ((_DWORD)result)
  {
    v8 = 28;
    if (!*(_DWORD *)(a1 + 28))
      v8 = 32;
    fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Find(a4, *(_DWORD *)(a3 + v8));
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;

  v6 = (uint64_t *)(a2 + 28);
  v7 = (uint64_t *)(a3 + 28);
  v8 = *(_BYTE *)(a3 + 44) == 0;
  while (*(_BYTE *)(a2 + 44))
  {
    if (v8)
      *(_BYTE *)(a2 + 44) = 0;
LABEL_6:
    while (*(_BYTE *)(a3 + 44))
    {
      *(_BYTE *)(a3 + 44) = 0;
      v9 = *(_DWORD *)(a1 + 28);
      v10 = v9 == 0;
      if (v9)
        v11 = v7;
      else
        v11 = v6;
      v12 = *v11;
      v13 = v11[1];
      if (v10)
        v14 = v7;
      else
        v14 = v6;
      if (fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(a1, *(unsigned int *)(a1 + 24), v12, v13, *v14, v14[1]))return 1;
    }
    v8 = 1;
  }
  if (!v8)
    goto LABEL_6;
  return 0;
}

uint64_t fst::StateMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, void **a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  _BYTE *v9;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result != -1)
  {
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    v6 = (*(uint64_t (**)(void *))(*(_QWORD *)*a2 + 24))(*a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 176))(a1, v6);
    if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1) >= 1)
    {
      v7 = 0;
      do
      {
        fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetState(a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(a1, v7);
        for (i = (unint64_t)a2[5]; ; a2[5] = (void *)i)
        {
          v9 = a2[2];
          if (i >= ((_BYTE *)a2[3] - v9) >> 4)
            break;
          (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 208))(a1, v7, &v9[16 * i]);
          i = (unint64_t)a2[5] + 1;
        }
        (*(void (**)(void *, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 184))(a1, v7);
        v7 = (v7 + 1);
      }
      while ((int)v7 < (*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1));
    }
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v5 & 0x3FFF0FFF0007 | (((v5 >> 16) & 1) << 28) | 0x40000000, 0x3FFFFFFF0007);
  }
  return result;
}

void fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetState(void **a1, uint64_t a2)
{
  void **v4;
  unint64_t v5;
  void *v6;
  _OWORD *v7;
  unint64_t v8;
  char *v9;
  _OWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  _DWORD *v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[3];
  _DWORD *v25;
  unint64_t v26;

  a1[5] = 0;
  v4 = a1 + 2;
  a1[3] = a1[2];
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)*a1 + 40))(*a1);
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::reserve(v4, v5);
  v6 = *a1;
  v26 = 0;
  (*(void (**)(void *, uint64_t, _QWORD *))(*(_QWORD *)v6 + 136))(v6, a2, v24);
  while (1)
  {
    if (!v24[0])
    {
      if (v26 >= v24[2])
        goto LABEL_29;
      goto LABEL_7;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v24[0] + 24))(v24[0]))
      break;
    if (v24[0])
    {
      v7 = (_OWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v24[0] + 32))();
      goto LABEL_8;
    }
LABEL_7:
    v7 = (_OWORD *)(v24[1] + 16 * v26);
LABEL_8:
    v9 = (char *)a1[3];
    v8 = (unint64_t)a1[4];
    if ((unint64_t)v9 >= v8)
    {
      v11 = (v9 - (_BYTE *)*v4) >> 4;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 60)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v13 = v8 - (_QWORD)*v4;
      if (v13 >> 3 > v12)
        v12 = v13 >> 3;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
        v14 = 0xFFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a1 + 4), v14);
      else
        v15 = 0;
      v16 = &v15[16 * v11];
      *(_OWORD *)v16 = *v7;
      v18 = (char *)a1[2];
      v17 = (char *)a1[3];
      v19 = v16;
      if (v17 != v18)
      {
        do
        {
          *((_OWORD *)v19 - 1) = *((_OWORD *)v17 - 1);
          v19 -= 16;
          v17 -= 16;
        }
        while (v17 != v18);
        v17 = (char *)*v4;
      }
      v10 = v16 + 16;
      a1[2] = v19;
      a1[3] = v16 + 16;
      a1[4] = &v15[16 * v14];
      if (v17)
        operator delete(v17);
    }
    else
    {
      *(_OWORD *)v9 = *v7;
      v10 = v9 + 16;
    }
    a1[3] = v10;
    if (v24[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v24[0] + 40))(v24[0]);
    else
      ++v26;
  }
  if (v24[0])
  {
    (*(void (**)(void))(*(_QWORD *)v24[0] + 8))();
    goto LABEL_31;
  }
LABEL_29:
  if (v25)
    --*v25;
LABEL_31:
  v20 = (unint64_t)a1[2];
  v21 = a1[3];
  v22 = 126 - 2 * __clz((uint64_t)((uint64_t)v21 - v20) >> 4);
  if (v21 == (_DWORD *)v20)
    v23 = 0;
  else
    v23 = v22;
  std::__introsort<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,false>(v20, v21, (uint64_t)v24, v23, 1);
}

void sub_1ADA0B600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  }
  else if (a13)
  {
    --*a13;
  }
  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,false>(unint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  __int128 v19;
  __int128 v20;

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(uint64_t result, _DWORD *a2)
{
  _DWORD *v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  if ((_DWORD *)result != a2)
  {
    v2 = (_DWORD *)(result + 16);
    if ((_DWORD *)(result + 16) != a2)
    {
      v3 = 0;
      v4 = (_DWORD *)result;
      do
      {
        v5 = v2;
        v6 = v4[5];
        if (v6 < v4[1])
        {
          v7 = *v5;
          v8 = *((_QWORD *)v4 + 3);
          v9 = v3;
          while (1)
          {
            *(_OWORD *)(result + v9 + 16) = *(_OWORD *)(result + v9);
            if (!v9)
              break;
            v10 = *(_DWORD *)(result + v9 - 12);
            v9 -= 16;
            if (v6 >= v10)
            {
              v11 = result + v9 + 16;
              goto LABEL_10;
            }
          }
          v11 = result;
LABEL_10:
          *(_DWORD *)v11 = v7;
          *(_DWORD *)(v11 + 4) = v6;
          *(_QWORD *)(v11 + 8) = v8;
        }
        v2 = v5 + 4;
        v3 += 16;
        v4 = v5;
      }
      while (v5 + 4 != a2);
    }
  }
  return result;
}

_DWORD *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(_DWORD *result, _DWORD *a2)
{
  _DWORD *v2;
  _DWORD *v3;
  int v4;
  int v5;
  uint64_t v6;
  _DWORD *v7;
  int v8;

  if (result != a2)
  {
    v2 = result + 4;
    while (v2 != a2)
    {
      v3 = v2;
      v4 = result[5];
      if (v4 < result[1])
      {
        v5 = *v3;
        v6 = *((_QWORD *)result + 3);
        v7 = v3;
        do
        {
          *(_OWORD *)v7 = *((_OWORD *)v7 - 1);
          v8 = *(v7 - 7);
          v7 -= 4;
        }
        while (v4 < v8);
        *v7 = v5;
        v7[1] = v4;
        *((_QWORD *)v7 + 1) = v6;
      }
      v2 = v3 + 4;
      result = v3;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(__int128 *a1, __int128 *a2, __int128 *a3)
{
  int v3;
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3 = *((_DWORD *)a2 + 1);
  v4 = *((_DWORD *)a3 + 1);
  if (v3 < *((_DWORD *)a1 + 1))
  {
    if (v4 < v3)
    {
      v5 = *a1;
      *a1 = *a3;
      *a3 = v5;
      return 1;
    }
    v8 = *a1;
    *a1 = *a2;
    *a2 = v8;
    if (*((_DWORD *)a3 + 1) >= *((_DWORD *)a2 + 1))
      return 1;
    v9 = *a2;
    *a2 = *a3;
    *a3 = v9;
    return 2;
  }
  if (v4 < v3)
  {
    v6 = *a2;
    *a2 = *a3;
    *a3 = v6;
    if (*((_DWORD *)a2 + 1) >= *((_DWORD *)a1 + 1))
      return 1;
    v7 = *a1;
    *a1 = *a2;
    *a2 = v7;
    return 2;
  }
  return 0;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &>(int *a1, _OWORD *a2)
{
  int v2;
  int *v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  int v7;
  _OWORD *v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  __int128 v15;

  v2 = a1[1];
  if (v2 >= *((_DWORD *)a2 - 3))
  {
    v6 = (unint64_t)(a1 + 4);
    do
    {
      v4 = v6;
      if (v6 >= (unint64_t)a2)
        break;
      v7 = *(_DWORD *)(v6 + 4);
      v6 += 16;
    }
    while (v2 >= v7);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = (unint64_t)(v3 + 4);
      v5 = v3[5];
      v3 += 4;
    }
    while (v2 >= v5);
  }
  if (v4 >= (unint64_t)a2)
  {
    v8 = a2;
  }
  else
  {
    do
    {
      v8 = a2 - 1;
      v9 = *((_DWORD *)a2-- - 3);
    }
    while (v2 < v9);
  }
  v10 = *a1;
  v11 = *((_QWORD *)a1 + 1);
  while (v4 < (unint64_t)v8)
  {
    v15 = *(_OWORD *)v4;
    *(_OWORD *)v4 = *v8;
    *v8 = v15;
    do
    {
      v12 = *(_DWORD *)(v4 + 20);
      v4 += 16;
    }
    while (v2 >= v12);
    do
      v13 = *((_DWORD *)v8-- - 3);
    while (v2 < v13);
  }
  if ((int *)(v4 - 16) != a1)
    *(_OWORD *)a1 = *(_OWORD *)(v4 - 16);
  *(_DWORD *)(v4 - 16) = v10;
  *(_DWORD *)(v4 - 12) = v2;
  *(_QWORD *)(v4 - 8) = v11;
  return v4;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &>(int *a1, _OWORD *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  _OWORD *v8;
  int v9;
  int v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 v13;
  int v14;
  int v15;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  v5 = *((_QWORD *)a1 + 1);
  do
  {
    v6 = a1[v2 + 5];
    v2 += 4;
  }
  while (v6 < v4);
  v7 = (unint64_t)&a1[v2];
  if (v2 == 4)
  {
    while (v7 < (unint64_t)a2)
    {
      v8 = a2 - 1;
      v10 = *((_DWORD *)a2-- - 3);
      if (v10 < v4)
        goto LABEL_9;
    }
    v8 = a2;
  }
  else
  {
    do
    {
      v8 = a2 - 1;
      v9 = *((_DWORD *)a2-- - 3);
    }
    while (v9 >= v4);
  }
LABEL_9:
  v11 = v7;
  if (v7 < (unint64_t)v8)
  {
    v12 = v8;
    do
    {
      v13 = *(_OWORD *)v11;
      *(_OWORD *)v11 = *v12;
      *v12 = v13;
      do
      {
        v14 = *(_DWORD *)(v11 + 20);
        v11 += 16;
      }
      while (v14 < v4);
      do
        v15 = *((_DWORD *)v12-- - 3);
      while (v15 >= v4);
    }
    while (v11 < (unint64_t)v12);
  }
  if ((int *)(v11 - 16) != a1)
    *(_OWORD *)a1 = *(_OWORD *)(v11 - 16);
  *(_DWORD *)(v11 - 16) = v3;
  *(_DWORD *)(v11 - 12) = v4;
  *(_QWORD *)(v11 - 8) = v5;
  return v11 - 16;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(_DWORD *)(a2 - 12) < *(_DWORD *)(a1 + 4))
      {
        v6 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)(a2 - 16) = v6;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)a1, (__int128 *)(a1 + 16), (__int128 *)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__n128 *)a1, (__n128 *)(a1 + 16), (__n128 *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)(a2 - 16));
      return 1;
    default:
      v7 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)a1, (__int128 *)(a1 + 16), (__int128 *)(a1 + 32));
      v8 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    v11 = *(_DWORD *)(v8 + 4);
    if (v11 < *(_DWORD *)(v7 + 4))
    {
      v12 = *(_DWORD *)v8;
      v13 = *(_QWORD *)(v8 + 8);
      v14 = v9;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = *(_DWORD *)(a1 + v14 + 20);
        v14 -= 16;
        if (v11 >= v15)
        {
          v16 = a1 + v14 + 48;
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *(_DWORD *)v16 = v12;
      *(_DWORD *)(v16 + 4) = v11;
      *(_QWORD *)(v16 + 8) = v13;
      if (++v10 == 8)
        return v8 + 16 == a2;
    }
    v7 = v8;
    v9 += 16;
    v8 += 16;
    if (v8 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  if (*(_DWORD *)(a4 + 4) < *(_DWORD *)(a3 + 4))
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    if (*(_DWORD *)(a3 + 4) < *(_DWORD *)(a2 + 4))
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*(_DWORD *)(a2 + 4) < *(_DWORD *)(a1 + 4))
      {
        result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5)
{
  __n128 result;

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4).n128_u64[0];
  if ((signed __int32)a5->n128_u32[1] < (signed __int32)a4->n128_u32[1])
  {
    result = *a4;
    *a4 = *a5;
    *a5 = result;
    if ((signed __int32)a4->n128_u32[1] < (signed __int32)a3->n128_u32[1])
    {
      result = *a3;
      *a3 = *a4;
      *a4 = result;
      if ((signed __int32)a3->n128_u32[1] < (signed __int32)a2->n128_u32[1])
      {
        result = *a2;
        *a2 = *a3;
        *a3 = result;
        if ((signed __int32)a2->n128_u32[1] < (signed __int32)a1->n128_u32[1])
        {
          result = *a1;
          *a1 = *a2;
          *a2 = result;
        }
      }
    }
  }
  return result;
}

int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(int *a1, int *a2, int *a3, uint64_t a4)
{
  int *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  int *v13;
  int *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  __int128 v26;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[4 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((uint64_t)a1, a4, v9, v12);
        v12 -= 4;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if (v14[1] < a1[1])
        {
          v15 = *(_OWORD *)v14;
          *(_OWORD *)v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 4;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v16 = (unint64_t)v8 >> 4;
      do
      {
        v17 = 0;
        v26 = *(_OWORD *)a1;
        v18 = a1;
        do
        {
          v19 = &v18[4 * v17 + 4];
          v20 = (2 * v17) | 1;
          v21 = 2 * v17 + 2;
          if (v21 < v16)
          {
            v22 = v19[1];
            v23 = v19[5];
            v19 += 4 * (v22 < v23);
            if (v22 < v23)
              v20 = v21;
          }
          *(_OWORD *)v18 = *(_OWORD *)v19;
          v18 = v19;
          v17 = v20;
        }
        while (v20 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 4;
        if (v19 == v6)
        {
          *(_OWORD *)v19 = v26;
        }
        else
        {
          *(_OWORD *)v19 = *(_OWORD *)v6;
          *(_OWORD *)v6 = v26;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((uint64_t)a1, (uint64_t)(v19 + 4), a4, ((char *)(v19 + 4) - (char *)a1) >> 4);
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = (int *)(result + 16 * v7);
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = v8[1];
        v11 = v8[5];
        v8 += 4 * (v10 < v11);
        if (v10 < v11)
          v7 = v9;
      }
      v12 = a4[1];
      if (v8[1] >= v12)
      {
        v13 = *a4;
        v14 = *((_QWORD *)a4 + 1);
        do
        {
          v15 = a4;
          a4 = v8;
          *v15 = *(_OWORD *)v8;
          if (v5 < v7)
            break;
          v16 = (2 * v7) | 1;
          v8 = (int *)(result + 16 * v16);
          v17 = 2 * v7 + 2;
          if (v17 < a3)
          {
            v18 = v8[1];
            v19 = v8[5];
            v8 += 4 * (v18 < v19);
            if (v18 < v19)
              v16 = v17;
          }
          v7 = v16;
        }
        while (v8[1] >= v12);
        *a4 = v13;
        a4[1] = v12;
        *((_QWORD *)a4 + 1) = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  _OWORD *v12;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = *(_DWORD *)(result + 16 * (v4 >> 1) + 4);
    v7 = *(_DWORD *)(a2 - 12);
    if (v6 < v7)
    {
      v10 = *(_DWORD *)(a2 - 16);
      v8 = a2 - 16;
      v9 = v10;
      v11 = *(_QWORD *)(v8 + 8);
      do
      {
        v12 = (_OWORD *)v8;
        v8 = result + 16 * v5;
        *v12 = *(_OWORD *)v8;
        if (!v5)
          break;
        v5 = (v5 - 1) >> 1;
      }
      while (*(_DWORD *)(result + 16 * v5 + 4) < v7);
      *(_DWORD *)v8 = v9;
      *(_DWORD *)(v8 + 4) = v7;
      *(_QWORD *)(v8 + 8) = v11;
    }
  }
  return result;
}

_QWORD *fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TableMatcher(_QWORD *a1, uint64_t a2, __int32 a3, int32x2_t *a4)
{
  int32x2_t *v8;

  *a1 = &unk_1E5D1B128;
  v8 = (int32x2_t *)operator new();
  fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TableMatcherImpl(v8, a2, a3, a4);
  a1[1] = v8;
  return a1;
}

void sub_1ADA0C350(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40D5DCF2CELL);
  _Unwind_Resume(a1);
}

_QWORD *fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~TableMatcher(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D1B128;
  v2 = (_DWORD *)a1[1];
  v3 = v2[2] - 1;
  v2[2] = v3;
  if (!v3)
    (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~TableMatcher(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D1B128;
  v1 = (_DWORD *)a1[1];
  v2 = v1[2] - 1;
  v1[2] = v2;
  if (!v2)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Copy(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E5D1B128;
  result[1] = v3;
  ++*(_DWORD *)(v3 + 8);
  return result;
}

uint64_t fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Type(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetFst(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

void *fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState_(uint64_t a1, uint64_t a2)
{
  return fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find_(uint64_t a1, int a2)
{
  return fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find(*(_QWORD *)(a1 + 8), a2);
}

BOOL fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Done_(uint64_t a1)
{
  return fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Done(*(_QWORD *)(a1 + 8));
}

uint64_t fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value_(uint64_t a1)
{
  return fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(*(_QWORD *)(a1 + 8));
}

uint64_t fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Next_(uint64_t a1)
{
  return fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Next(*(_QWORD *)(a1 + 8));
}

int32x2_t *fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TableMatcherImpl(int32x2_t *a1, uint64_t a2, __int32 a3, int32x2_t *a4)
{
  uint64_t v8;
  int v9;
  int v10;

  *a1 = (int32x2_t)&unk_1E5D1EF00;
  a1[1].i32[0] = 1;
  a1[1].i32[1] = a3;
  v8 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  a1[8] = 0;
  a1[2] = (int32x2_t)v8;
  if (a3)
    v9 = 0;
  else
    v9 = -1;
  if (a3)
    v10 = -1;
  else
    v10 = 0;
  a1[4].i32[0] = v9;
  a1[4].i32[1] = v10;
  a1[5] = (int32x2_t)0xFFFFFFFF00000000;
  a1[6] = 0;
  a1[7].i32[0] = -1;
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = *a4;
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SortedMatcher(a1 + 12, a2, a3, 1);
  return a1;
}

void sub_1ADA0C588(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 72) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~TableMatcherImpl(_QWORD *a1)
{
  fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~TableMatcherImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Copy()
{
  return 0;
}

uint64_t fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Type(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Properties(uint64_t a1, uint64_t a2)
{
  return a2;
}

_QWORD *fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~TableMatcherImpl(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  void *v7;
  _QWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  void *v11;

  *a1 = &unk_1E5D1EF00;
  v3 = a1[8];
  v2 = a1[9];
  if (v2 != v3)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v3 + 8 * v4);
      if (v5)
        v6 = v5 == 24;
      else
        v6 = 1;
      if (!v6)
      {
        v7 = *(void **)v5;
        if (*(_QWORD *)v5)
        {
          *(_QWORD *)(v5 + 8) = v7;
          operator delete(v7);
        }
        MEMORY[0x1AF44D190](v5, 0x10C402FEFCB83);
        v3 = a1[8];
        v2 = a1[9];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  v8 = (_QWORD *)a1[6];
  if (v8)
  {
    if (*v8)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v8 + 8))(*v8);
    }
    else
    {
      v9 = (_DWORD *)v8[3];
      if (v9)
        --*v9;
    }
    MEMORY[0x1AF44D190](v8, 0x1070C401ACC3EEFLL);
  }
  v10 = a1[2];
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~SortedMatcher(a1 + 12);
  v11 = (void *)a1[8];
  if (v11)
  {
    a1[9] = v11;
    operator delete(v11);
  }
  return a1;
}

void *fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _DWORD *v5;
  fst *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *result;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  std::vector<int>::size_type v20;
  float v21;
  float v22;
  std::vector<int> *v23;
  int i;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  void *__p;
  uint64_t v30;
  unint64_t v31;
  _DWORD *v32;
  unint64_t v33;
  char v34;

  v4 = *(_QWORD **)(a1 + 48);
  if (v4)
  {
    if (*v4)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
    }
    else
    {
      v5 = (_DWORD *)v4[3];
      if (v5)
        --*v5;
    }
    MEMORY[0x1AF44D190](v4, 0x1070C401ACC3EEFLL);
    *(_QWORD *)(a1 + 48) = 0;
  }
  if (*(_DWORD *)(a1 + 12) == 3)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    v6 = fst::LogMessage::LogMessage((fst *)&v34, (uint64_t)&__p);
    v7 = (_QWORD *)fst::cerr(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"TableMatcher: bad match type", 28);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v34);
    if (SHIBYTE(v31) < 0)
      operator delete(__p);
  }
  v8 = *(_QWORD *)(a1 + 64);
  *(_DWORD *)(a1 + 56) = a2;
  if ((int)a2 >= (unint64_t)((*(_QWORD *)(a1 + 72) - v8) >> 3))
  {
    __p = 0;
    std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize(a1 + 64, (int)a2 + 1, &__p);
    v8 = *(_QWORD *)(a1 + 64);
  }
  v9 = *(_QWORD *)(v8 + 8 * (int)a2);
  if (v9)
  {
    if (v9 != 24)
    {
LABEL_14:
      v10 = operator new();
      v11 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(v10 + 32) = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 136))(v11, a2, v10);
      *(_QWORD *)(a1 + 48) = v10;
      result = *(void **)v10;
      if (*(_QWORD *)v10)
        result = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(_QWORD *)result + 80))(result, 16, 16);
      *(_DWORD *)(a1 + 44) = a2;
      return result;
    }
    return (void *)fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetState(a1 + 96, a2);
  }
  v13 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), a2);
  v14 = v13;
  if (!v13 || *(_DWORD *)(a1 + 92) > v13)
  {
    *(_QWORD *)(v8 + 8 * (int)a2) = 24;
    return (void *)fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetState(a1 + 96, a2);
  }
  v15 = *(_QWORD *)(a1 + 16);
  v33 = 0;
  (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v15 + 136))(v15, a2, &__p);
  if (__p)
  {
    (*(void (**)(void))(*(_QWORD *)__p + 80))();
    v16 = v14 - 1;
    if (__p)
    {
      (*(void (**)(void *, unint64_t))(*(_QWORD *)__p + 64))(__p, v16);
      goto LABEL_26;
    }
  }
  else
  {
    v16 = v14 - 1;
  }
  v33 = v16;
LABEL_26:
  if (*(_DWORD *)(a1 + 12) == 1)
  {
    if (__p)
      v17 = (*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
    else
      v17 = v30 + 16 * v33;
    v18 = (int *)(v17 + 4);
  }
  else if (__p)
  {
    v18 = (int *)(*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
  }
  else
  {
    v18 = (int *)(v30 + 16 * v33);
  }
  v19 = *v18;
  v20 = v19 + 1;
  v21 = *(float *)(a1 + 88) * (float)(v19 + 1);
  v22 = (float)v14;
  if (v21 <= (float)v14)
  {
    v23 = (std::vector<int> *)operator new();
    std::vector<int>::vector(v23, v20, &fst::kNoStateId);
    *(_QWORD *)(v8 + 8 * (int)a2) = v23;
    if (__p)
      (*(void (**)(void *, _QWORD))(*(_QWORD *)__p + 64))(__p, 0);
    else
      v33 = 0;
    for (i = 0; ; ++i)
    {
      if (__p)
      {
        if (((*(uint64_t (**)(void *))(*(_QWORD *)__p + 24))(__p) & 1) != 0)
          goto LABEL_38;
      }
      else if (v33 >= v31)
      {
        goto LABEL_38;
      }
      if (*(_DWORD *)(a1 + 12) == 1)
      {
        if (__p)
          v25 = (*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
        else
          v25 = v30 + 16 * v33;
        v26 = (int *)(v25 + 4);
      }
      else if (__p)
      {
        v26 = (int *)(*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
      }
      else
      {
        v26 = (int *)(v30 + 16 * v33);
      }
      v27 = *v26;
      v28 = **(_QWORD **)(v8 + 8 * (int)a2);
      if (*(_DWORD *)(v28 + 4 * v27) == -1)
        *(_DWORD *)(v28 + 4 * v27) = i;
      if (__p)
        (*(void (**)(void *))(*(_QWORD *)__p + 40))(__p);
      else
        ++v33;
    }
  }
  *(_QWORD *)(v8 + 8 * (int)a2) = 24;
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetState(a1 + 96, a2);
LABEL_38:
  result = __p;
  if (__p)
  {
    result = (void *)(*(uint64_t (**)(void *))(*(_QWORD *)__p + 8))(__p);
  }
  else if (v32)
  {
    --*v32;
  }
  if (v21 <= v22)
    goto LABEL_14;
  return result;
}

void sub_1ADA0CB2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, _DWORD *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (__p)
  {
    (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
  }
  else if (a15)
  {
    --*a15;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find(uint64_t a1, int a2)
{
  _QWORD *v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  v3 = *(_QWORD **)(a1 + 48);
  if (!v3)
    return fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find(a1 + 96, a2);
  result = a2 == 0;
  *(_BYTE *)(a1 + 24) = result;
  if (a2 == -1)
    v5 = 0;
  else
    v5 = a2;
  *(_DWORD *)(a1 + 28) = v5;
  v7 = *(uint64_t **)(*(_QWORD *)(a1 + 64) + 8 * *(int *)(a1 + 56));
  v6 = *v7;
  if (v5 < (unint64_t)((v7[1] - *v7) >> 2))
  {
    v8 = *(int *)(v6 + 4 * v5);
    if ((_DWORD)v8 != -1)
    {
      if (*v3)
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 64))(*v3);
      else
        v3[4] = v8;
      return 1;
    }
  }
  return result;
}

BOOL fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Done(uint64_t a1)
{
  _QWORD *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;

  v2 = *(_QWORD **)(a1 + 48);
  if (!v2)
    return fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(a1 + 96);
  if (*(_BYTE *)(a1 + 24))
    return 0;
  if (*v2)
  {
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 24))(*v2) & 1) != 0)
      return 1;
  }
  else if (v2[4] >= v2[2])
  {
    return 1;
  }
  v4 = *(uint64_t **)(a1 + 48);
  v5 = *v4;
  if (*(_DWORD *)(a1 + 12) == 1)
  {
    if (v5)
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
    else
      v6 = v4[1] + 16 * v4[4];
    v7 = (_DWORD *)(v6 + 4);
  }
  else if (v5)
  {
    v7 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  }
  else
  {
    v7 = (_DWORD *)(v4[1] + 16 * v4[4]);
  }
  return *v7 != *(_DWORD *)(a1 + 28);
}

uint64_t fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(a1 + 48);
  if (!v1)
    return fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value(a1 + 96);
  if (*(_BYTE *)(a1 + 24))
    return a1 + 32;
  if (*v1)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v1 + 32))(*v1);
  return v1[1] + 16 * v1[4];
}

uint64_t fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Next(uint64_t result)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(result + 48);
  if (v1)
  {
    if (*(_BYTE *)(result + 24))
    {
      *(_BYTE *)(result + 24) = 0;
      return result;
    }
  }
  else
  {
    if (*(_BYTE *)(result + 168))
    {
      *(_BYTE *)(result + 168) = 0;
      return result;
    }
    v1 = *(uint64_t **)(result + 120);
  }
  result = *v1;
  if (*v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  ++v1[4];
  return result;
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v6, a1, a2, a3);
  return v6;
}

void sub_1ADA0CE38(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 *v8;
  __n128 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  *(_QWORD *)fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1E5D1D700;
  v8 = *(__n128 **)(a4 + 40);
  if (!v8)
  {
    v8 = (__n128 *)operator new();
    fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SequenceComposeFilter((uint64_t)v8, a2, a3, *(_QWORD **)(a4 + 24), *(int32x2_t **)(a4 + 32));
  }
  *(_QWORD *)(a1 + 136) = v8;
  v9 = *v8;
  *(__n128 *)(a1 + 144) = *v8;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v9.n128_u64[0] + 32))(v9.n128_u64[0], v9);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 152) + 32))(*(_QWORD *)(a1 + 152));
  v10 = *(_QWORD **)(a4 + 48);
  if (!v10)
  {
    v10 = (_QWORD *)operator new();
    v10[1] = v10;
    v10[2] = v10;
    std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::unordered_set((uint64_t)(v10 + 3), 0, v10 + 1, v10 + 2);
    v10[10] = 0;
    v10[11] = 0;
    v10[12] = 0;
  }
  *(_QWORD *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3)
    *(_QWORD *)(a1 + 8) |= 4uLL;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  v13 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 144) + 40))(*(_QWORD *)(a1 + 144), v11);
  v14 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 152) + 40))(*(_QWORD *)(a1 + 152), v12);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::ComposeProperties(v13, v14) & 0x3FFFFFFF0004;
  return a1;
}

void sub_1ADA0D00C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 160) + 64))(*(_QWORD *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 168) + 64))(*(_QWORD *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 144) + 40))(*(_QWORD *)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 152) + 40))(*(_QWORD *)(a1 + 152), 0) & 4) != 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(v2, a1);
  return v2;
}

void sub_1ADA0D190(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(_QWORD *a1, int a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = (unsigned int *)(*(_QWORD *)(a1[22] + 80) + 12 * a2);
  v5 = *v4;
  v6 = v4[1];
  v7 = a1[17];
  v8 = *((_BYTE *)v4 + 8);
  fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(v7, v5, v6, &v8);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)a1, a2, a1[21], v6, a1[20], v5, a1[19], 1);
  }
  else
  {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>((uint64_t)a1, a2, a1[20], v5, a1[21], v6, a1[18], 0);
  }
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 144) + 24))(*(_QWORD *)(a1 + 144), 0) != a3
    || (*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 152) + 24))(*(_QWORD *)(a1 + 152), 0) != a3)
  {
    return 0;
  }
  v6 = operator new();
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(v6, a2, a1, a3);
  return v6;
}

void sub_1ADA0D308(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(_QWORD **a1)
{
  uint64_t result;
  unsigned int v3;
  unint64_t v4;
  char v5;

  result = (*(uint64_t (**)(_QWORD *))(*a1[20] + 24))(a1[20]);
  if ((_DWORD)result != -1)
  {
    v3 = result;
    result = (*(uint64_t (**)(_QWORD *))(*a1[21] + 24))(a1[21]);
    if ((_DWORD)result != -1)
    {
      v4 = __PAIR64__(result, v3);
      v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 80);
  v5 = (unsigned int *)(v4 + 12 * a2);
  v6 = *v5;
  v10 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 144) + 96))(*(_QWORD *)(a1 + 144), v6);
  if (v10 != INFINITY)
  {
    v7 = v5[1];
    v8 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 152) + 8) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 152) + 8), v7);
    v10 = v8;
    if (v8 != INFINITY)
    {
      v9 = *(_QWORD *)(a1 + 136);
      LOBYTE(v10) = *(_BYTE *)(v4 + 12 * a2 + 8);
      fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(v9, v6, v7, &v10);
    }
  }
}

uint64_t fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SequenceComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, int32x2_t *a5)
{
  _QWORD *v6;
  uint64_t v11;

  v6 = a4;
  if (!a4)
  {
    v6 = (_QWORD *)operator new();
    v11 = 0x43E800000;
    fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TableMatcher(v6, a2, 1, (int32x2_t *)&v11);
  }
  *(_QWORD *)a1 = v6;
  if (!a5)
  {
    a5 = (int32x2_t *)operator new();
    fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SortedMatcher(a5, a3, 0, 1);
    v6 = *(_QWORD **)a1;
  }
  *(_QWORD *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = (*(uint64_t (**)(_QWORD *))(*v6 + 32))(v6);
  *(_QWORD *)(a1 + 24) = -1;
  *(_BYTE *)(a1 + 32) = -1;
  return a1;
}

void sub_1ADA0D5BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C4003B7394BLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *a1 = &unk_1E5D1D700;
  v2 = (_QWORD *)a1[17];
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    v3 = v2[1];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    MEMORY[0x1AF44D190](v2, 0x1060C40AD892F49);
  }
  v4 = a1[22];
  if (v4)
  {
    v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(_QWORD *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1AF44D190](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  __n128 v6;
  uint64_t v7;

  *fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFstImplBase((_QWORD *)a1, a2) = &unk_1E5D1D700;
  v4 = (_QWORD *)operator new();
  v5 = *(_QWORD **)(a2 + 136);
  *v4 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 16))(*v5, 1);
  v4[1] = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v5[1] + 16))(v5[1], 1);
  v4[2] = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 32))(*v4);
  v4[3] = -1;
  *((_BYTE *)v4 + 32) = -1;
  *(_QWORD *)(a1 + 136) = v4;
  v6 = *(__n128 *)v4;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)v4;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v6.n128_u64[0] + 32))(v6.n128_u64[0], v6);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 152) + 32))(*(_QWORD *)(a1 + 152));
  v7 = operator new();
  fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::CompactHashBiTable(v7, *(_QWORD *)(a2 + 176));
  *(_QWORD *)(a1 + 176) = v7;
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  return a1;
}

void sub_1ADA0D7BC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v7;
  uint64_t v8;
  fst *v11;
  _QWORD *v12;
  void *__p[2];
  char v14;
  char v15;

  v3 = *(_DWORD *)(a1 + 184);
  if (!v3)
    return 1;
  if (v3 == 1)
    return 0;
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 144) + 104))(*(_QWORD *)(a1 + 144));
  v8 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 152) + 8) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 152) + 8), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    v12 = (_QWORD *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0)
      operator delete(__p[0]);
    *(_QWORD *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1)
    return 0;
  return v8 == -1 || v7 <= v8;
}

void sub_1ADA0D930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int *v14;
  _QWORD v15[3];
  _DWORD *v16;
  unint64_t v17;
  int v18[4];

  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetState(a7, a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  v18[2] = 0;
  v18[3] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, a7, v18, a8);
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a5 + 136))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2])
        goto LABEL_13;
LABEL_7:
      v14 = (int *)(v15[1] + 16 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v15[0] + 24))(v15[0]))
      break;
    if (!v15[0])
      goto LABEL_7;
    v14 = (int *)(*(uint64_t (**)(void))(*(_QWORD *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, a7, v14, a8);
    if (v15[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v15[0] + 40))(v15[0]);
    else
      ++v17;
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(_QWORD *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16)
    --*v16;
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1ADA0DAC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  else
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int *v14;
  _QWORD v15[3];
  _DWORD *v16;
  unint64_t v17;
  int v18[4];

  fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(*(_QWORD *)(a7 + 8), a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  v18[2] = 0;
  v18[3] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(a1, a2, a7, v18, a8);
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a5 + 136))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2])
        goto LABEL_13;
LABEL_7:
      v14 = (int *)(v15[1] + 16 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v15[0] + 24))(v15[0]))
      break;
    if (!v15[0])
      goto LABEL_7;
    v14 = (int *)(*(uint64_t (**)(void))(*(_QWORD *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(a1, a2, a7, v14, a8);
    if (v15[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v15[0] + 40))(v15[0]);
    else
      ++v17;
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(_QWORD *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16)
    --*v16;
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1ADA0DC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  else
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  _Unwind_Resume(a1);
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, int a2, uint64_t a3, int *a4, int a5)
{
  int *v10;
  _BOOL8 result;
  __int128 v12;
  unsigned __int8 *v13;
  char v14;
  unsigned __int8 *v15;
  char v16;
  int v17;
  char v18;
  unsigned int *v19;
  __int128 *v20;
  int v21;
  char v22;
  _QWORD *v23;
  char v24;
  __int128 v25;
  __int128 v26;

  v10 = a4 + 1;
  if (!a5)
    v10 = a4;
  result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find(a3, *v10);
  if (result)
  {
    for (result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(a3);
          !result;
          result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(a3))
    {
      v12 = *(_OWORD *)fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value(a3);
      v25 = *(_OWORD *)a4;
      v26 = v12;
      if (a5)
      {
        v13 = *(unsigned __int8 **)(a1 + 136);
        if (DWORD1(v25) != -1)
        {
          if ((_DWORD)v26 == -1)
          {
            v17 = v13[32];
            if (v17)
              v18 = -1;
            else
              v18 = 0;
            v24 = v18;
            if (v17)
              goto LABEL_35;
          }
          else
          {
            if (DWORD1(v25))
              v14 = 0;
            else
              v14 = -1;
            v24 = v14;
            if (!DWORD1(v25))
              goto LABEL_35;
          }
LABEL_28:
          v19 = (unsigned int *)&v25;
          v20 = &v26;
LABEL_34:
          fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v19, (uint64_t)v20, &v24);
          goto LABEL_35;
        }
        if (!v13[33])
        {
          v24 = v13[34] ^ 1;
          goto LABEL_28;
        }
      }
      else
      {
        v15 = *(unsigned __int8 **)(a1 + 136);
        if (DWORD1(v26) != -1)
        {
          if ((_DWORD)v25 == -1)
          {
            v21 = v15[32];
            if (v21)
              v22 = -1;
            else
              v22 = 0;
            v24 = v22;
            if (v21)
              goto LABEL_35;
          }
          else
          {
            if (DWORD1(v26))
              v16 = 0;
            else
              v16 = -1;
            v24 = v16;
            if (!DWORD1(v26))
              goto LABEL_35;
          }
LABEL_33:
          v19 = (unsigned int *)&v26;
          v20 = &v25;
          goto LABEL_34;
        }
        if (!v15[33])
        {
          v24 = v15[34] ^ 1;
          goto LABEL_33;
        }
      }
LABEL_35:
      if (*(_BYTE *)(a3 + 72))
      {
        *(_BYTE *)(a3 + 72) = 0;
      }
      else
      {
        v23 = *(_QWORD **)(a3 + 24);
        if (*v23)
          (*(void (**)(_QWORD))(*(_QWORD *)*v23 + 40))(*v23);
        else
          ++v23[4];
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(uint64_t a1, int a2, uint64_t a3, int *a4, int a5)
{
  int *v10;
  uint64_t result;
  __int128 v12;
  unsigned __int8 *v13;
  char v14;
  unsigned __int8 *v15;
  char v16;
  int v17;
  char v18;
  unsigned int *v19;
  __int128 *v20;
  int v21;
  char v22;
  char v23;
  __int128 v24;
  __int128 v25;

  v10 = a4 + 1;
  if (!a5)
    v10 = a4;
  result = fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find(*(_QWORD *)(a3 + 8), *v10);
  if ((_DWORD)result)
  {
    result = fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Done(*(_QWORD *)(a3 + 8));
    if ((result & 1) == 0)
    {
      do
      {
        v12 = *(_OWORD *)fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(*(_QWORD *)(a3 + 8));
        v24 = *(_OWORD *)a4;
        v25 = v12;
        if (a5)
        {
          v13 = *(unsigned __int8 **)(a1 + 136);
          if (DWORD1(v24) != -1)
          {
            if ((_DWORD)v25 == -1)
            {
              v17 = v13[32];
              if (v17)
                v18 = -1;
              else
                v18 = 0;
              v23 = v18;
              if (v17)
                goto LABEL_35;
            }
            else
            {
              if (DWORD1(v24))
                v14 = 0;
              else
                v14 = -1;
              v23 = v14;
              if (!DWORD1(v24))
                goto LABEL_35;
            }
LABEL_28:
            v19 = (unsigned int *)&v24;
            v20 = &v25;
LABEL_34:
            fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v19, (uint64_t)v20, &v23);
            goto LABEL_35;
          }
          if (!v13[33])
          {
            v23 = v13[34] ^ 1;
            goto LABEL_28;
          }
        }
        else
        {
          v15 = *(unsigned __int8 **)(a1 + 136);
          if (DWORD1(v25) != -1)
          {
            if ((_DWORD)v24 == -1)
            {
              v21 = v15[32];
              if (v21)
                v22 = -1;
              else
                v22 = 0;
              v23 = v22;
              if (v21)
                goto LABEL_35;
            }
            else
            {
              if (DWORD1(v25))
                v16 = 0;
              else
                v16 = -1;
              v23 = v16;
              if (!DWORD1(v25))
                goto LABEL_35;
            }
LABEL_33:
            v19 = (unsigned int *)&v25;
            v20 = &v24;
            goto LABEL_34;
          }
          if (!v15[33])
          {
            v23 = v15[34] ^ 1;
            goto LABEL_33;
          }
        }
LABEL_35:
        fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Next(*(_QWORD *)(a3 + 8));
        result = fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Done(*(_QWORD *)(a3 + 8));
      }
      while (!(_DWORD)result);
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(_QWORD *)a1 = &unk_1E5D1F680;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = a4;
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a3 + 144) + 16))(*(_QWORD *)(a3 + 144), 0);
  *(_QWORD *)(a1 + 40) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a3 + 152) + 16))(*(_QWORD *)(a3 + 152), 0);
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 52) = xmmword_1AE142840;
  *(_BYTE *)(a1 + 84) = 0;
  if (a4 == 1)
    *(_QWORD *)(a1 + 52) = 0xFFFFFFFF00000000;
  return a1;
}

_QWORD *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_1E5D1F680;
  v2 = a1[4];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[5];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_1E5D1F680;
  v2 = a1[4];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[5];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(v4, a1, a2);
  return v4;
}

void sub_1ADA0E144(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
  if ((_DWORD)result != 3)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2);
    if ((_DWORD)result != 3)
    {
      if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), a2) != 4
        || (result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2), (_DWORD)result != 4))
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), a2) == 4
          && (*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2), (_DWORD)result != 4))
        {
          if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3;
          result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2);
          if ((_DWORD)result != *(_DWORD *)(a1 + 28))
            return 3;
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 84))
    return a2 | 4;
  else
    return a2;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;

  if (*(_DWORD *)(result + 24) != a2)
  {
    v2 = result;
    *(_DWORD *)(result + 24) = a2;
    v3 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 176) + 80) + 12 * a2);
    v4 = v3[1];
    fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(*(_QWORD *)(*(_QWORD *)(result + 32) + 8), *v3);
    result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetState(*(_QWORD *)(v2 + 40), v4);
    *(_DWORD *)(v2 + 64) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(uint64_t a1, int a2)
{
  *(_BYTE *)(a1 + 48) = a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if (a2)
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(a1, a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
  }
  else if (a2)
  {
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  return 1;
}

BOOL fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 48)
      && fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Done(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8))
      && fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(*(_QWORD *)(a1 + 40));
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
    return a1 + 52;
  else
    return a1 + 68;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(uint64_t result)
{
  if (*(_BYTE *)(result + 48))
  {
    *(_BYTE *)(result + 48) = 0;
  }
  else if (*(_DWORD *)(result + 28))
  {
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(result, *(_QWORD *)(result + 40), *(_QWORD *)(result + 32));
  }
  else
  {
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(result, *(_QWORD *)(result + 32), *(_QWORD *)(result + 40));
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  fst *v6;
  _QWORD *v7;
  void *__p[2];
  char v10;
  char v11;

  *(_QWORD *)a1 = &unk_1E5D1F680;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 32) + 16))(*(_QWORD *)(a2 + 32), a3);
  *(_QWORD *)(a1 + 40) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 40) + 16))(*(_QWORD *)(a2 + 40), a3);
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 52) = xmmword_1AE142840;
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  if ((_DWORD)a3)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v6 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
    v7 = (_QWORD *)fst::cerr(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ComposeFstMatcher: safe copy not supported", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
    if (v10 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 84) = 1;
  }
  if (*(_DWORD *)(a1 + 28) == 1)
    *(int32x2_t *)(a1 + 52) = vrev64_s32(*(int32x2_t *)(a1 + 52));
  return a1;
}

void sub_1ADA0E554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  int v8;
  uint64_t v9;
  int *v10;

  result = fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find(*(_QWORD *)(a3 + 8), a2);
  if ((_DWORD)result)
  {
    v8 = *(_DWORD *)(a1 + 28);
    v9 = fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(*(_QWORD *)(a3 + 8));
    v10 = (int *)(v9 + 4);
    if (v8)
      v10 = (int *)v9;
    fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find(a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  int v8;
  uint64_t v9;
  int *v10;

  result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find(a3, a2);
  if ((_DWORD)result)
  {
    v8 = *(_DWORD *)(a1 + 28);
    v9 = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value(a3);
    v10 = (int *)(v9 + 4);
    if (v8)
      v10 = (int *)v9;
    fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find(*(_QWORD *)(a4 + 8), *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  while (!fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Done(*(_QWORD *)(a2 + 8))
       || !fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(a3))
  {
    if (fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(a3))
    {
      fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Next(*(_QWORD *)(a2 + 8));
      while (!fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Done(*(_QWORD *)(a2 + 8)))
      {
        v6 = *(_DWORD *)(a1 + 28);
        v7 = fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(*(_QWORD *)(a2 + 8));
        v8 = (int *)(v7 + 4);
        if (v6)
          v8 = (int *)v7;
        if (fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find(a3, *v8))
          break;
        fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Next(*(_QWORD *)(a2 + 8));
      }
    }
    while (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(a3))
    {
      v9 = fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(*(_QWORD *)(a2 + 8));
      v10 = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value(a3);
      if (*(_BYTE *)(a3 + 72))
      {
        *(_BYTE *)(a3 + 72) = 0;
      }
      else
      {
        v11 = *(_QWORD **)(a3 + 24);
        if (*v11)
          (*(void (**)(_QWORD))(*(_QWORD *)*v11 + 40))(*v11);
        else
          ++v11[4];
      }
      v12 = *(_DWORD *)(a1 + 28);
      v13 = v12 == 0;
      if (v12)
        v14 = (uint64_t *)v10;
      else
        v14 = (uint64_t *)v9;
      v15 = *v14;
      v16 = v14[1];
      if (v13)
        v17 = (uint64_t *)v10;
      else
        v17 = (uint64_t *)v9;
      if (fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(a1, *(unsigned int *)(a1 + 24), v15, v16, *v17, v17[1]))return 1;
    }
  }
  return 0;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  int *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;

  while (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(a2)
       || !fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Done(*(_QWORD *)(a3 + 8)))
  {
    if (fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Done(*(_QWORD *)(a3 + 8)))
    {
      if (*(_BYTE *)(a2 + 72))
      {
        *(_BYTE *)(a2 + 72) = 0;
      }
      else
      {
        v6 = *(_QWORD **)(a2 + 24);
        if (*v6)
          (*(void (**)(_QWORD))(*(_QWORD *)*v6 + 40))(*v6);
        else
          ++v6[4];
      }
      while (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(a2))
      {
        v7 = *(_DWORD *)(a1 + 28);
        v8 = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value(a2);
        v9 = (int *)(v8 + 4);
        if (v7)
          v9 = (int *)v8;
        if ((fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find(*(_QWORD *)(a3 + 8), *v9) & 1) != 0)break;
        if (*(_BYTE *)(a2 + 72))
        {
          *(_BYTE *)(a2 + 72) = 0;
        }
        else
        {
          v10 = *(_QWORD **)(a2 + 24);
          if (*v10)
            (*(void (**)(_QWORD))(*(_QWORD *)*v10 + 40))(*v10);
          else
            ++v10[4];
        }
      }
    }
    while (!fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Done(*(_QWORD *)(a3 + 8)))
    {
      v11 = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value(a2);
      v12 = fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(*(_QWORD *)(a3 + 8));
      fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Next(*(_QWORD *)(a3 + 8));
      v13 = *(_DWORD *)(a1 + 28);
      v14 = v13 == 0;
      if (v13)
        v15 = (uint64_t *)v12;
      else
        v15 = (uint64_t *)v11;
      v16 = *v15;
      v17 = v15[1];
      if (v14)
        v18 = (uint64_t *)v12;
      else
        v18 = (uint64_t *)v11;
      if (fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(a1, *(unsigned int *)(a1 + 24), v16, v17, *v18, v18[1]))return 1;
    }
  }
  return 0;
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(v6, a1, a2, a3);
  return v6;
}

void sub_1ADA0E978(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 *v8;
  __n128 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  *(_QWORD *)fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1E5D1D760;
  v8 = *(__n128 **)(a4 + 40);
  if (!v8)
  {
    v8 = (__n128 *)operator new();
    fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::SequenceComposeFilter((uint64_t)v8, a2, a3, *(int32x2_t **)(a4 + 24), *(_QWORD **)(a4 + 32));
  }
  *(_QWORD *)(a1 + 136) = v8;
  v9 = *v8;
  *(__n128 *)(a1 + 144) = *v8;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v9.n128_u64[0] + 32))(v9.n128_u64[0], v9);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 152) + 32))(*(_QWORD *)(a1 + 152));
  v10 = *(_QWORD **)(a4 + 48);
  if (!v10)
  {
    v10 = (_QWORD *)operator new();
    v10[1] = v10;
    v10[2] = v10;
    std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::unordered_set((uint64_t)(v10 + 3), 0, v10 + 1, v10 + 2);
    v10[10] = 0;
    v10[11] = 0;
    v10[12] = 0;
  }
  *(_QWORD *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3)
    *(_QWORD *)(a1 + 8) |= 4uLL;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  v13 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 144) + 40))(*(_QWORD *)(a1 + 144), v11);
  v14 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 152) + 40))(*(_QWORD *)(a1 + 152), v12);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::ComposeProperties(v13, v14) & 0x3FFFFFFF0004;
  return a1;
}

void sub_1ADA0EB4C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 160) + 64))(*(_QWORD *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 168) + 64))(*(_QWORD *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 144) + 40))(*(_QWORD *)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 152) + 40))(*(_QWORD *)(a1 + 152), 0) & 4) != 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(v2, a1);
  return v2;
}

void sub_1ADA0ECD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(_QWORD *a1, int a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = (unsigned int *)(*(_QWORD *)(a1[22] + 80) + 12 * a2);
  v5 = *v4;
  v6 = v4[1];
  v7 = a1[17];
  v8 = *((_BYTE *)v4 + 8);
  fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(v7, v5, v6, &v8);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>((uint64_t)a1, a2, a1[21], v6, a1[20], v5, a1[19], 1);
  }
  else
  {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)a1, a2, a1[20], v5, a1[21], v6, a1[18], 0);
  }
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 144) + 24))(*(_QWORD *)(a1 + 144), 0) != a3
    || (*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 152) + 24))(*(_QWORD *)(a1 + 152), 0) != a3)
  {
    return 0;
  }
  v6 = operator new();
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(v6, a2, a1, a3);
  return v6;
}

void sub_1ADA0EE48(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(_QWORD **a1)
{
  uint64_t result;
  unsigned int v3;
  unint64_t v4;
  char v5;

  result = (*(uint64_t (**)(_QWORD *))(*a1[20] + 24))(a1[20]);
  if ((_DWORD)result != -1)
  {
    v3 = result;
    result = (*(uint64_t (**)(_QWORD *))(*a1[21] + 24))(a1[21]);
    if ((_DWORD)result != -1)
    {
      v4 = __PAIR64__(result, v3);
      v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 80);
  v5 = (unsigned int *)(v4 + 12 * a2);
  v6 = *v5;
  v10 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 8) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8), v6);
  if (v10 != INFINITY)
  {
    v7 = v5[1];
    v8 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 152) + 96))(*(_QWORD *)(a1 + 152), v7);
    v10 = v8;
    if (v8 != INFINITY)
    {
      v9 = *(_QWORD *)(a1 + 136);
      LOBYTE(v10) = *(_BYTE *)(v4 + 12 * a2 + 8);
      fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(v9, v6, v7, &v10);
    }
  }
}

uint64_t fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::SequenceComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, int32x2_t *a4, _QWORD *a5)
{
  int32x2_t *v6;
  uint64_t v11;

  v6 = a4;
  if (!a4)
  {
    v6 = (int32x2_t *)operator new();
    fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SortedMatcher(v6, a2, 1, 1);
  }
  *(_QWORD *)a1 = v6;
  if (!a5)
  {
    a5 = (_QWORD *)operator new();
    v11 = 0x43E800000;
    fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TableMatcher(a5, a3, 0, (int32x2_t *)&v11);
    v6 = *(int32x2_t **)a1;
  }
  *(_QWORD *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)v6 + 32))(v6);
  *(_QWORD *)(a1 + 24) = -1;
  *(_BYTE *)(a1 + 32) = -1;
  return a1;
}

void sub_1ADA0F0FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *a1 = &unk_1E5D1D760;
  v2 = (_QWORD *)a1[17];
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    v3 = v2[1];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    MEMORY[0x1AF44D190](v2, 0x1060C40AD892F49);
  }
  v4 = a1[22];
  if (v4)
  {
    v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(_QWORD *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1AF44D190](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  __n128 v6;
  uint64_t v7;

  *fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFstImplBase((_QWORD *)a1, a2) = &unk_1E5D1D760;
  v4 = (_QWORD *)operator new();
  v5 = *(_QWORD **)(a2 + 136);
  *v4 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 16))(*v5, 1);
  v4[1] = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v5[1] + 16))(v5[1], 1);
  v4[2] = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 32))(*v4);
  v4[3] = -1;
  *((_BYTE *)v4 + 32) = -1;
  *(_QWORD *)(a1 + 136) = v4;
  v6 = *(__n128 *)v4;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)v4;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v6.n128_u64[0] + 32))(v6.n128_u64[0], v6);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 152) + 32))(*(_QWORD *)(a1 + 152));
  v7 = operator new();
  fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::CompactHashBiTable(v7, *(_QWORD *)(a2 + 176));
  *(_QWORD *)(a1 + 176) = v7;
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  return a1;
}

void sub_1ADA0F2FC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v7;
  uint64_t v8;
  fst *v11;
  _QWORD *v12;
  void *__p[2];
  char v14;
  char v15;

  v3 = *(_DWORD *)(a1 + 184);
  if (!v3)
    return 1;
  if (v3 == 1)
    return 0;
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 8) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8));
  v8 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 152) + 104))(*(_QWORD *)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    v12 = (_QWORD *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0)
      operator delete(__p[0]);
    *(_QWORD *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1)
    return 0;
  return v8 == -1 || v7 <= v8;
}

void sub_1ADA0F470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int *v14;
  _QWORD v15[3];
  _DWORD *v16;
  unint64_t v17;
  int v18[4];

  fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(*(_QWORD *)(a7 + 8), a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  v18[2] = 0;
  v18[3] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(a1, a2, a7, v18, a8);
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a5 + 136))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2])
        goto LABEL_13;
LABEL_7:
      v14 = (int *)(v15[1] + 16 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v15[0] + 24))(v15[0]))
      break;
    if (!v15[0])
      goto LABEL_7;
    v14 = (int *)(*(uint64_t (**)(void))(*(_QWORD *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(a1, a2, a7, v14, a8);
    if (v15[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v15[0] + 40))(v15[0]);
    else
      ++v17;
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(_QWORD *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16)
    --*v16;
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1ADA0F604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  else
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int *v14;
  _QWORD v15[3];
  _DWORD *v16;
  unint64_t v17;
  int v18[4];

  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetState(a7, a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  v18[2] = 0;
  v18[3] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, a7, v18, a8);
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a5 + 136))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2])
        goto LABEL_13;
LABEL_7:
      v14 = (int *)(v15[1] + 16 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v15[0] + 24))(v15[0]))
      break;
    if (!v15[0])
      goto LABEL_7;
    v14 = (int *)(*(uint64_t (**)(void))(*(_QWORD *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, a7, v14, a8);
    if (v15[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v15[0] + 40))(v15[0]);
    else
      ++v17;
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(_QWORD *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16)
    --*v16;
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1ADA0F78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  else
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(_QWORD *)a1 = &unk_1E5D1F700;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = a4;
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a3 + 144) + 16))(*(_QWORD *)(a3 + 144), 0);
  *(_QWORD *)(a1 + 40) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a3 + 152) + 16))(*(_QWORD *)(a3 + 152), 0);
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 52) = xmmword_1AE142840;
  *(_BYTE *)(a1 + 84) = 0;
  if (a4 == 1)
    *(_QWORD *)(a1 + 52) = 0xFFFFFFFF00000000;
  return a1;
}

_QWORD *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_1E5D1F700;
  v2 = a1[4];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[5];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_1E5D1F700;
  v2 = a1[4];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[5];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(v4, a1, a2);
  return v4;
}

void sub_1ADA0F96C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
  if ((_DWORD)result != 3)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2);
    if ((_DWORD)result != 3)
    {
      if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), a2) != 4
        || (result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2), (_DWORD)result != 4))
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), a2) == 4
          && (*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2), (_DWORD)result != 4))
        {
          if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3;
          result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2);
          if ((_DWORD)result != *(_DWORD *)(a1 + 28))
            return 3;
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 84))
    return a2 | 4;
  else
    return a2;
}

uint64_t *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t *result, int a2)
{
  uint64_t *v2;
  unsigned int *v3;
  uint64_t v4;

  if (*((_DWORD *)result + 6) != a2)
  {
    v2 = result;
    *((_DWORD *)result + 6) = a2;
    v3 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(result[2] + 176) + 80) + 12 * a2);
    v4 = v3[1];
    fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetState(result[4], *v3);
    result = (uint64_t *)fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(*(_QWORD *)(v2[5] + 8), v4);
    *((_DWORD *)v2 + 16) = *((_DWORD *)v2 + 6);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(uint64_t a1, int a2)
{
  *(_BYTE *)(a1 + 48) = a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if (a2)
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
  }
  else if (a2)
  {
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(a1, a2, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  return 1;
}

BOOL fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 48)
      && fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(*(_QWORD *)(a1 + 32))
      && fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Done(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8));
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
    return a1 + 52;
  else
    return a1 + 68;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(uint64_t result)
{
  if (*(_BYTE *)(result + 48))
  {
    *(_BYTE *)(result + 48) = 0;
  }
  else if (*(_DWORD *)(result + 28))
  {
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(result, *(_QWORD *)(result + 40), *(_QWORD *)(result + 32));
  }
  else
  {
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(result, *(_QWORD *)(result + 32), *(_QWORD *)(result + 40));
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  fst *v6;
  _QWORD *v7;
  void *__p[2];
  char v10;
  char v11;

  *(_QWORD *)a1 = &unk_1E5D1F700;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 32) + 16))(*(_QWORD *)(a2 + 32), a3);
  *(_QWORD *)(a1 + 40) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 40) + 16))(*(_QWORD *)(a2 + 40), a3);
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 52) = xmmword_1AE142840;
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  if ((_DWORD)a3)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v6 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
    v7 = (_QWORD *)fst::cerr(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ComposeFstMatcher: safe copy not supported", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
    if (v10 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 84) = 1;
  }
  if (*(_DWORD *)(a1 + 28) == 1)
    *(int32x2_t *)(a1 + 52) = vrev64_s32(*(int32x2_t *)(a1 + 52));
  return a1;
}

void sub_1ADA0FD7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::Map<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::RemoveSomeInputSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>(uint64_t a1, uint64_t a2)
{
  _BYTE v3[16];
  void *v4;
  void *__p;
  void *v6;

  kaldi::ConstIntegerSet<int>::ConstIntegerSet((uint64_t)v3, a2);
  fst::ArcMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::RemoveSomeInputSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>(a1, (uint64_t)v3);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
  if (v4)
    operator delete(v4);
}

void sub_1ADA0FE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::ConstIntegerSet<int>::~ConstIntegerSet(&a9);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::RemoveSomeInputSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  float v12;
  _QWORD v13[2];
  uint64_t v14;

  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 280))(a1, 0);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result != -1)
  {
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1) >= 1)
    {
      v6 = 0;
      do
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 296))(a1, v6, &v14);
        while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
        {
          v7 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
          v8 = *v7;
          v9 = v7[1];
          v10 = kaldi::ConstIntegerSet<int>::count(a2, *v7);
          v11 = v8;
          if (v10)
            v11 = 0;
          v13[0] = v11 | v8 & 0xFFFFFFFF00000000;
          v13[1] = v9;
          (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v14 + 88))(v14, v13);
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
        }
        if (v14)
          (*(void (**)(void))(*(_QWORD *)v14 + 8))();
        v12 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v6);
        kaldi::ConstIntegerSet<int>::count(a2, 0);
        (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)a1 + 184))(a1, v6, v12);
        v6 = (v6 + 1);
      }
      while ((int)v6 < (*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1));
    }
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v5 & 0xFFFFFFFFCD70FFFFLL, 0x3FFFFFFF0007);
  }
  return result;
}

void sub_1ADA0FFE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::FstLmHandle::FstLmHandle(uint64_t a1, uint64_t a2, int a3, float a4, float a5)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v13;

  *(_BYTE *)(a1 + 664) = 0;
  *(float *)(a1 + 668) = a4;
  *(float *)(a1 + 672) = a5;
  *(_QWORD *)a1 = &off_1E5D34510;
  *(_QWORD *)(a1 + 656) = &unk_1E5D34548;
  v8 = quasar::ModelLoader::ModelLoader((quasar::ModelLoader *)(a1 + 8));
  *(_OWORD *)(a1 + 632) = 0u;
  *(_DWORD *)(a1 + 648) = a3;
  quasar::ModelLoader::readFstNetwork(v8, a2, (uint64_t *)&v13);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 632, &v13);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return a1;
}

void sub_1ADA100D4(_Unwind_Exception *a1)
{
  quasar::ModelLoader *v1;
  uint64_t v2;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v2);
  quasar::ModelLoader::~ModelLoader(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::FstLmHandle::FstLmHandle(uint64_t a1, uint64_t *a2, _QWORD *a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v7 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + *(_QWORD *)(v7 - 24)) = a2[1];
  quasar::ModelLoader::ModelLoader((quasar::ModelLoader *)(a1 + 8));
  v8 = a3[1];
  *(_QWORD *)(a1 + 632) = *a3;
  *(_QWORD *)(a1 + 640) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_DWORD *)(a1 + 648) = a4;
  return a1;
}

uint64_t quasar::FstLmHandle::FstLmHandle(uint64_t a1, _QWORD *a2, int a3, float a4, float a5)
{
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  *(_BYTE *)(a1 + 664) = 0;
  *(float *)(a1 + 668) = a4;
  *(float *)(a1 + 672) = a5;
  *(_QWORD *)a1 = &off_1E5D34510;
  *(_QWORD *)(a1 + 656) = &unk_1E5D34548;
  quasar::ModelLoader::ModelLoader((quasar::ModelLoader *)(a1 + 8));
  v8 = a2[1];
  *(_QWORD *)(a1 + 632) = *a2;
  *(_QWORD *)(a1 + 640) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_DWORD *)(a1 + 648) = a3;
  return a1;
}

uint64_t quasar::FstLmHandle::FstLmHandle(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + *(_QWORD *)(v5 - 24)) = a2[1];
  quasar::ModelLoader::ModelLoader((quasar::ModelLoader *)(a1 + 8));
  v6 = *a3;
  *(_QWORD *)(a1 + 632) = *(_QWORD *)(*a3 + 632);
  v7 = *(_QWORD *)(v6 + 640);
  *(_QWORD *)(a1 + 640) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    v6 = *a3;
  }
  *(_DWORD *)(a1 + 648) = *(_DWORD *)(v6 + 648);
  return a1;
}

void quasar::FstLmHandle::AddTo(uint64_t a1, _QWORD *a2, uint64_t *a3, unsigned int a4, int a5, char a6, int a7, uint64_t a8)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unsigned int v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  int v22;

  v8 = *(_QWORD *)(a1 + 632);
  v9 = *(std::__shared_weak_count **)(a1 + 640);
  v18 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v19 = a4;
    v20 = v8;
    v21 = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  else
  {
    v19 = a4;
    v20 = v8;
    v21 = 0;
  }
  v22 = -1;
  kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddBackoffFst(a2, &v19, a3, a5, a6, a7, 0x20000uLL, a8);
  v13 = v21;
  if (v21)
  {
    v14 = (unint64_t *)&v21->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v18)
  {
    v16 = (unint64_t *)&v18->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1ADA1036C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `virtual thunk to'quasar::FstLmHandle::AddTo(_QWORD *a1, _QWORD *a2, uint64_t *a3, unsigned int a4, int a5, char a6, int a7, uint64_t a8)
{
  quasar::FstLmHandle::AddTo((uint64_t)a1 + *(_QWORD *)(*a1 - 32), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t quasar::FstLmHandle::GetOrder(quasar::FstLmHandle *this)
{
  return *((unsigned int *)this + 162);
}

uint64_t quasar::FstLmHandle::GetSize(quasar::FstLmHandle *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  unsigned int v11;

  v2 = *((_QWORD *)this + 79);
  if (!v2)
    return 0;
  v11 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 128))(v2, &v9);
  v3 = 0;
  for (i = 0; ; ++i)
  {
    if (!v9)
    {
      if ((int)v11 >= v10)
        return i;
      v5 = *((_QWORD *)this + 79);
      goto LABEL_9;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9))
      break;
    v5 = *((_QWORD *)this + 79);
    if (v9)
    {
      v6 = (*(uint64_t (**)(void))(*(_QWORD *)v9 + 24))();
      goto LABEL_10;
    }
LABEL_9:
    v6 = v11;
LABEL_10:
    v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, v6);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
    else
      ++v11;
    v3 += v7;
  }
  if (v9)
    (*(void (**)(void))(*(_QWORD *)v9 + 8))();
  return i;
}

void sub_1ADA104AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

std::string *quasar::GeoMemories::rememberLastRegionId(std::string *this, const std::string *__str, _BYTE *a3)
{
  if (*a3)
  {
    if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((_BYTE *)&this->__r_.__value_.__s + 23))
        return this;
      return std::string::operator=(this, __str);
    }
    if (!this->__r_.__value_.__l.__size_)
      return std::string::operator=(this, __str);
  }
  return this;
}

void quasar::GeoMemories::recallLastRegionId(uint64_t a1@<X0>, _BYTE *a2@<X1>, std::string *a3@<X8>)
{
  if (*a2)
  {
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
    }
  }
  else
  {
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
  }
}

uint64_t Base64decode(_BYTE *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  _BYTE *v5;
  int v6;
  int v7;
  int v8;

  v2 = 0;
  do
    v3 = pr2six[a2[v2++]];
  while (v3 < 0x40);
  if ((int)v2 <= 5)
  {
    v6 = v2 - 1;
  }
  else
  {
    v4 = v2 + 3;
    do
    {
      *a1 = (pr2six[a2[1]] >> 4) | (4 * pr2six[*a2]);
      a1[1] = (pr2six[a2[2]] >> 2) | (16 * pr2six[a2[1]]);
      v5 = a1 + 3;
      a1[2] = pr2six[a2[3]] | (pr2six[a2[2]] << 6);
      a2 += 4;
      v4 -= 4;
      a1 += 3;
    }
    while (v4 > 8);
    v6 = v4 - 4;
    a1 = v5;
  }
  if (v6 >= 2)
  {
    *a1 = (pr2six[a2[1]] >> 4) | (4 * pr2six[*a2]);
    if (v6 == 2)
    {
      ++a1;
    }
    else
    {
      a1[1] = (pr2six[a2[2]] >> 2) | (16 * pr2six[a2[1]]);
      if (v6 < 4)
      {
        a1 += 2;
      }
      else
      {
        a1[2] = pr2six[a2[3]] | (pr2six[a2[2]] << 6);
        a1 += 3;
      }
    }
  }
  v7 = v2 + 2;
  v8 = v2 + 5;
  if (v7 >= 0)
    v8 = v7;
  *a1 = 0;
  return 3 * (v8 >> 2) - (-v6 & 3u);
}

uint64_t Base64encode_len(int a1)
{
  return (4 * ((a1 + 2) / 3)) | 1u;
}

uint64_t Base64encode(_BYTE *a1, uint64_t a2, int a3)
{
  unint64_t v3;
  _BYTE *v4;
  unsigned int v5;
  char v6;
  uint64_t v7;

  if (a3 < 3)
  {
    LODWORD(v3) = 0;
    v4 = a1;
  }
  else
  {
    v3 = 0;
    v4 = a1;
    do
    {
      *v4 = basis_64[(unint64_t)*(unsigned __int8 *)(a2 + v3) >> 2];
      v4[1] = basis_64[((unint64_t)*(unsigned __int8 *)(a2 + v3 + 1) >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (*(_BYTE *)(a2 + v3) & 3))];
      v4[2] = basis_64[((unint64_t)*(unsigned __int8 *)(a2 + v3 + 2) >> 6) & 0xFFFFFFFFFFFFFFC3 | (4 * (*(_BYTE *)(a2 + v3 + 1) & 0xF))];
      v4[3] = basis_64[*(_BYTE *)(a2 + v3 + 2) & 0x3F];
      v4 += 4;
      v3 += 3;
    }
    while (v3 < (a3 - 2));
  }
  if ((int)v3 < a3)
  {
    *v4 = basis_64[(unint64_t)*(unsigned __int8 *)(a2 + v3) >> 2];
    v5 = 16 * (*(_BYTE *)(a2 + v3) & 3);
    if ((_DWORD)v3 == a3 - 1)
    {
      v4[1] = basis_64[16 * (*(_BYTE *)(a2 + v3) & 3)];
      v6 = 61;
    }
    else
    {
      v7 = a2 + v3;
      v4[1] = basis_64[v5 | ((unint64_t)*(unsigned __int8 *)(v7 + 1) >> 4)];
      v6 = basis_64[4 * (*(_BYTE *)(v7 + 1) & 0xF)];
    }
    v4[2] = v6;
    v4[3] = 61;
    v4 += 4;
  }
  *v4 = 0;
  return ((_DWORD)v4 - (_DWORD)a1 + 1);
}

BOOL kaldi::WordHypLattice::Node::IsSucceededBy(kaldi::WordHypLattice::Node *this, kaldi::WordHypLattice::Node *const *a2)
{
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _BOOL8 v9;
  _QWORD *v10;
  _QWORD *i;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD **v15;
  _QWORD *v16;
  _QWORD **v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t *v21;
  _QWORD *v22[2];
  _OWORD v23[2];
  __int128 v24;

  v24 = 0u;
  memset(v23, 0, sizeof(v23));
  v22[0] = 0;
  v22[1] = 0;
  v21 = (uint64_t *)v22;
  v2 = (char *)this + 64;
  v3 = (char *)*((_QWORD *)this + 9);
  if (v3 == (char *)this + 64)
    goto LABEL_26;
  do
  {
    v5 = *((_QWORD *)v3 + 2);
    if (*(float *)(*(_QWORD *)(v5 + 8) + 132) <= *((float *)*a2 + 33))
    {
      std::deque<kaldi::WordHypLattice::Node *>::push_back(v23, (_QWORD *)(v5 + 8));
      v5 = *((_QWORD *)v3 + 2);
    }
    std::__tree<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>::__emplace_unique_key_args<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node * const&>(&v21, (unint64_t *)(v5 + 8), (uint64_t *)(v5 + 8));
    v3 = (char *)*((_QWORD *)v3 + 1);
  }
  while (v3 != v2);
  v6 = *((_QWORD *)&v24 + 1);
  if (!*((_QWORD *)&v24 + 1))
  {
LABEL_26:
    v9 = 0;
  }
  else
  {
    do
    {
      v7 = v24;
      v8 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v23[0] + 1) + (((unint64_t)v24 >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * (v24 & 0x1FF));
      v9 = v8 == *(_QWORD **)a2;
      if (v8 == *(_QWORD **)a2)
        break;
      *(_QWORD *)&v24 = v24 + 1;
      *((_QWORD *)&v24 + 1) = v6 - 1;
      if ((unint64_t)(v7 + 1) >= 0x400)
      {
        operator delete(**((void ***)&v23[0] + 1));
        *((_QWORD *)&v23[0] + 1) += 8;
        *(_QWORD *)&v24 = v24 - 512;
      }
      v10 = v8 + 8;
      for (i = (_QWORD *)v8[9]; i != v10; i = (_QWORD *)i[1])
      {
        v12 = i[2];
        v13 = *(_QWORD *)(v12 + 8);
        v14 = v22[0];
        if (!v22[0])
          goto LABEL_20;
        v15 = v22;
        do
        {
          v16 = v14;
          v17 = v15;
          v18 = v14[4];
          v19 = v14 + 1;
          if (v18 >= v13)
          {
            v19 = v16;
            v15 = (_QWORD **)v16;
          }
          v14 = (_QWORD *)*v19;
        }
        while (v14);
        if (v15 == v22)
          goto LABEL_20;
        if (v18 < v13)
          v16 = v17;
        if (v13 < v16[4])
        {
LABEL_20:
          if (*(float *)(v13 + 132) <= *((float *)*a2 + 33))
          {
            std::deque<kaldi::WordHypLattice::Node *>::push_back(v23, (_QWORD *)(v12 + 8));
            v12 = i[2];
          }
          std::__tree<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>::__emplace_unique_key_args<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node * const&>(&v21, (unint64_t *)(v12 + 8), (uint64_t *)(v12 + 8));
        }
      }
      v6 = *((_QWORD *)&v24 + 1);
    }
    while (*((_QWORD *)&v24 + 1));
  }
  std::__tree<int>::destroy((uint64_t)&v21, v22[0]);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v23);
  return v9;
}

void sub_1ADA10990(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  _QWORD *v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD *);
  v6 = va_arg(va1, _QWORD);
  std::__tree<int>::destroy((uint64_t)va, v5);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t *kaldi::operator<<(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  const std::locale::facet *v28;
  uint64_t *v31;
  _QWORD *v32[2];
  std::locale v33;

  v32[0] = 0;
  v32[1] = 0;
  v31 = (uint64_t *)v32;
  v3 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a2 + 24) != v3)
  {
    v4 = 0;
    v5 = 0;
    do
    {
      v33.__locale_ = (std::locale::__imp *)(v3 + v4);
      std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(&v31, (unint64_t *)(v3 + v4), (uint64_t)&std::piecewise_construct, (uint64_t **)&v33)[5] = v5++;
      v3 = *(_QWORD *)(a2 + 16);
      v6 = *(_QWORD *)(a2 + 24);
      v4 += 8;
    }
    while (v5 < (v6 - v3) >> 3);
    if (v6 != v3)
    {
      v7 = 0;
      v8 = a1 + 1;
      v9 = a1 + 3;
      do
      {
        v10 = *(_QWORD *)(v3 + 8 * v7);
        v11 = v10 + 64;
        v12 = *(_QWORD *)(v10 + 72);
        if (v12 != v10 + 64)
        {
          do
          {
            v13 = *a1;
            *(_DWORD *)((char *)v8 + *(_QWORD *)(*a1 - 24)) = *(_DWORD *)((_BYTE *)v8 + *(_QWORD *)(*a1 - 24)) & 0xFFFFFF4F | 0x20;
            *(_QWORD *)((char *)v9 + *(_QWORD *)(v13 - 24)) = 5;
            v14 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" ", 1);
            v15 = *a1;
            *(_DWORD *)((char *)v8 + *(_QWORD *)(*a1 - 24)) = *(_DWORD *)((_BYTE *)v8 + *(_QWORD *)(*a1 - 24)) & 0xFFFFFF4F | 0x20;
            *(_QWORD *)((char *)v9 + *(_QWORD *)(v15 - 24)) = 5;
            v33.__locale_ = (std::locale::__imp *)(*(_QWORD *)(v12 + 16) + 8);
            std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(&v31, (unint64_t *)v33.__locale_, (uint64_t)&std::piecewise_construct, (uint64_t **)&v33);
            v16 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" ", 1);
            v17 = *(_QWORD *)(v12 + 16);
            v18 = v17 + 264;
            v19 = *(unsigned __int8 *)(v17 + 287);
            v21 = *(_QWORD *)(v17 + 264);
            v20 = *(_QWORD *)(v17 + 272);
            if ((v19 & 0x80u) == 0)
              v22 = v18;
            else
              v22 = v21;
            if ((v19 & 0x80u) == 0)
              v23 = v19;
            else
              v23 = v20;
            v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v22, v23);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(", 1);
            v25 = (_QWORD *)std::ostream::operator<<();
            v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)")", 1);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" ", 1);
            v27 = *a1;
            *(_DWORD *)((char *)v8 + *(_QWORD *)(*a1 - 24)) = *(_DWORD *)((_BYTE *)v8 + *(_QWORD *)(*a1 - 24)) & 0xFFFFFF4F | 0x20;
            *(_QWORD *)((char *)v9 + *(_QWORD *)(v27 - 24)) = 4;
            std::ostream::operator<<();
            std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
            v28 = std::locale::use_facet(&v33, MEMORY[0x1E0DE4A90]);
            ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
            std::locale::~locale(&v33);
            std::ostream::put();
            std::ostream::flush();
            v12 = *(_QWORD *)(v12 + 8);
          }
          while (v12 != v11);
          v3 = *(_QWORD *)(a2 + 16);
          v6 = *(_QWORD *)(a2 + 24);
        }
        ++v7;
      }
      while (v7 < (v6 - v3) >> 3);
    }
  }
  std::__tree<int>::destroy((uint64_t)&v31, v32[0]);
  return a1;
}

void sub_1ADA10C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, uint64_t a13, std::locale a14)
{
  std::__tree<int>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t kaldi::JoinVectorToString<int>(_QWORD *a1, const char *a2)
{
  unint64_t v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  _QWORD v9[2];
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v9);
  if (a1[1] != *a1)
  {
    v4 = 0;
    do
    {
      std::ostream::operator<<();
      ++v4;
      v5 = a1[1] - *a1;
      if (v4 < v5 >> 2)
      {
        v6 = strlen(a2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)a2, v6);
        v5 = a1[1] - *a1;
      }
    }
    while (v4 < v5 >> 2);
  }
  std::stringbuf::str();
  v9[0] = *MEMORY[0x1E0DE4F50];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v10[0] = v7;
  v10[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v12);
}

void sub_1ADA10D9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::WordHypLattice::Arc::SetPhones(uint64_t a1, int **a2, kaldi::TransitionModel *this)
{
  int *v3;
  int *v4;
  BOOL v5;
  uint64_t v6;
  void **v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  char *v15;
  _DWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  int v24;

  v4 = *a2;
  v3 = a2[1];
  v5 = v3 == *a2;
  v6 = v3 - *a2;
  *(float *)(a1 + 72) = (float)(unint64_t)v6;
  *(_DWORD *)(a1 + 560) = v6;
  if (!v5)
  {
    v9 = (void **)(a1 + 104);
    v10 = a1 + 120;
    do
    {
      v11 = *v4;
      if (kaldi::TransitionModel::IsFinal(this, *v4))
      {
        v12 = kaldi::TransitionModel::TransitionIdToPhone(this, v11);
        v13 = v12;
        v15 = *(char **)(a1 + 112);
        v14 = *(_QWORD *)(a1 + 120);
        if ((unint64_t)v15 >= v14)
        {
          v17 = (char *)*v9;
          v18 = (v15 - (_BYTE *)*v9) >> 2;
          v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v20 = v14 - (_QWORD)v17;
          if (v20 >> 1 > v19)
            v19 = v20 >> 1;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
            v21 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v21 = v19;
          if (v21)
          {
            v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v10, v21);
            v17 = *(char **)(a1 + 104);
            v15 = *(char **)(a1 + 112);
          }
          else
          {
            v22 = 0;
          }
          v23 = &v22[4 * v18];
          *(_DWORD *)v23 = v13;
          v16 = v23 + 4;
          while (v15 != v17)
          {
            v24 = *((_DWORD *)v15 - 1);
            v15 -= 4;
            *((_DWORD *)v23 - 1) = v24;
            v23 -= 4;
          }
          *(_QWORD *)(a1 + 104) = v23;
          *(_QWORD *)(a1 + 112) = v16;
          *(_QWORD *)(a1 + 120) = &v22[4 * v21];
          if (v17)
            operator delete(v17);
        }
        else
        {
          *(_DWORD *)v15 = v12;
          v16 = v15 + 4;
        }
        *(_QWORD *)(a1 + 112) = v16;
      }
      ++v4;
    }
    while (v4 != v3);
  }
}

uint64_t kaldi::WordHypLattice::Node::setTimestamps(uint64_t this)
{
  unint64_t v1;
  uint64_t v2;
  float v3;
  char v4;
  float v5;
  float v6;

  v1 = *(_QWORD *)(this + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(this + 8);
    v3 = 0.0;
    if (v2 != this)
    {
      v4 = 1;
      do
      {
        v5 = *(float *)(*(_QWORD *)(v2 + 16) + 248);
        if ((v4 & 1) != 0)
        {
          *(float *)(this + 132) = v5;
        }
        else
        {
          if (v5 < *(float *)(this + 132))
            *(float *)(this + 132) = v5;
          if (v5 <= *(float *)(this + 136))
            goto LABEL_10;
        }
        *(float *)(this + 136) = v5;
LABEL_10:
        v4 = 0;
        v3 = v3 + v5;
        v2 = *(_QWORD *)(v2 + 8);
      }
      while (v2 != this);
    }
    v6 = v3 / (float)v1;
  }
  else
  {
    *(_DWORD *)(this + 132) = 0;
    *(_DWORD *)(this + 136) = 0;
    v6 = 0.0;
  }
  *(float *)(this + 140) = v6;
  return this;
}

uint64_t kaldi::WordHypLattice::Node::FindBestPathArc(kaldi::WordHypLattice::Node *this, int a2, int a3)
{
  char *v3;
  char *v4;
  int v5;
  uint64_t result;
  uint64_t v7;
  int v8;
  int v9;
  _QWORD v10[34];

  v3 = (char *)this + 64;
  v4 = (char *)*((_QWORD *)this + 9);
  if (v4 == (char *)this + 64)
  {
    result = 0;
    v5 = 0;
    if (!a3)
      goto LABEL_13;
  }
  else
  {
    v5 = 0;
    result = 0;
    do
    {
      v7 = *((_QWORD *)v4 + 2);
      v8 = *(unsigned __int8 *)(v7 + 49);
      if (*(_BYTE *)(v7 + 49))
      {
        result = *((_QWORD *)v4 + 2);
        v9 = a2;
      }
      else
      {
        v9 = 0;
      }
      v5 += v9;
      if (v8 && (a2 & 1) == 0)
        break;
      v4 = (char *)*((_QWORD *)v4 + 1);
    }
    while (v4 != v3);
    if (!a3)
      goto LABEL_13;
  }
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "No outgoing best-path arc found");
    goto LABEL_18;
  }
LABEL_13:
  if (a2 && v5 >= 2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "More than one outgoing best-path arc found");
LABEL_18:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  return result;
}

void kaldi::WordHypLattice::~WordHypLattice(kaldi::WordHypLattice *this)
{
  void ***v2;
  void ***v3;
  _QWORD **v4;
  _QWORD **i;
  _QWORD *v6;
  void *v7;
  void *v8;

  v2 = (void ***)*((_QWORD *)this + 5);
  v3 = (void ***)*((_QWORD *)this + 6);
  while (v2 != v3)
  {
    if (*v2)
    {
      kaldi::WordHypLattice::Arc::~Arc(*v2);
      MEMORY[0x1AF44D190]();
    }
    ++v2;
  }
  v4 = (_QWORD **)*((_QWORD *)this + 2);
  for (i = (_QWORD **)*((_QWORD *)this + 3); v4 != i; ++v4)
  {
    v6 = *v4;
    if (*v4)
    {
      v6[19] = &unk_1E5D341C8;
      kaldi::CuVector<float>::Destroy((uint64_t)(v6 + 19));
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(v6 + 11));
      std::__list_imp<char *>::clear(v6 + 8);
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(v6 + 3));
      std::__list_imp<char *>::clear(v6);
      MEMORY[0x1AF44D190](v6, 0x10A0C4094E47B5DLL);
    }
  }
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  v7 = (void *)*((_QWORD *)this + 5);
  if (v7)
  {
    *((_QWORD *)this + 6) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 2);
  if (v8)
  {
    *((_QWORD *)this + 3) = v8;
    operator delete(v8);
  }
}

uint64_t kaldi::WordHypLattice::StringToCriteria(uint64_t *a1)
{
  int v1;
  uint64_t v2;
  _QWORD v7[34];

  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    v1 = *((unsigned __int8 *)a1 + 23);
    if (v1 != 4)
    {
      if (v1 != 12)
      {
        if (v1 != 13)
          goto LABEL_31;
        goto LABEL_16;
      }
      if (*a1 != 0x666E6F436E61654DLL || *((_DWORD *)a1 + 2) != 1752457552)
      {
LABEL_31:
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "StringToCriteria unexpected string");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
      }
      return 1;
    }
    if (*(_DWORD *)a1 != 1701736270)
      goto LABEL_31;
    return 0;
  }
  v2 = a1[1];
  if (v2 == 4 && *(_DWORD *)*a1 == 1701736270)
    return 0;
  if (v2 == 12)
  {
    if (*(_QWORD *)*a1 == 0x666E6F436E61654DLL && *(_DWORD *)(*a1 + 8) == 1752457552)
      return 1;
    v2 = a1[1];
  }
  if (v2 != 13)
    goto LABEL_31;
  a1 = (uint64_t *)*a1;
LABEL_16:
  if (*a1 != 0x736F436C61746F54 || *(uint64_t *)((char *)a1 + 5) != 0x6874615074736F43)
    goto LABEL_31;
  return 2;
}

_QWORD *kaldi::WordHypLattice::CriteriaToString@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  _QWORD v3[34];

  if (a1 >= 3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "CriteriaToString unexpected string");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, off_1E5D47808[a1]);
}

void kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel *a1@<X0>, kaldi::LatticeScoreCache *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X4>, _QWORD *a6@<X8>)
{
  int v12;
  int v13;
  uint64_t v14;
  int32x2_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  BOOL v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  int **v29;
  float *v30;
  double *v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  _QWORD *v37;
  int *v38;
  int *v39;
  unint64_t v40;
  int v41;
  int v42;
  float Score;
  unint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  char **v47;
  __int128 v48;
  uint64_t v49;
  std::string **v50;
  __int128 *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  int *v55;
  int *v56;
  unint64_t v57;
  int v58;
  int v59;
  float v60;
  void *v61;
  void *v62;
  _QWORD *v63;
  char *v64;
  kaldi::WordHypLattice *v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  unint64_t v93;
  void *__p[2];
  char v95;
  uint64_t v96;
  void *v97;
  void *v98;
  void *v99[3];
  float v100;
  int v101;
  float v102;
  _QWORD v103[3];
  _QWORD *v104;
  _QWORD v105[3];
  _QWORD *v106;
  _QWORD v107[3];
  _QWORD *v108;
  _QWORD v109[3];
  _QWORD *v110;
  _QWORD v111[3];
  _QWORD *v112;
  _QWORD v113[3];
  _QWORD *v114;
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
  kaldi::TopSortCompactLatticeIfNeeded(a3);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 160))(a3);
  if (!v12)
  {
    v68 = operator new(0x70uLL);
    v68[2] = 0;
    *v68 = &unk_1E5D415D8;
    v68[1] = 0;
    *((_OWORD *)v68 + 2) = 0u;
    *((_OWORD *)v68 + 3) = 0u;
    *((_OWORD *)v68 + 4) = 0u;
    *((_OWORD *)v68 + 5) = 0u;
    *((_OWORD *)v68 + 6) = 0u;
    a6[1] = v68;
    *((_BYTE *)v68 + 24) = 1;
    *a6 = v68 + 3;
    return;
  }
  v13 = v12;
  v89 = a6;
  std::vector<kaldi::WordHypLattice::Node *>::vector(v99, v12);
  if (v13 >= 1)
  {
    v14 = 0;
    v90 = v13;
    v91 = a3;
    v15 = vdup_n_s32(0x7FC00000u);
    do
    {
      v16 = operator new();
      *(_OWORD *)(v16 + 32) = 0u;
      *(_OWORD *)(v16 + 48) = 0u;
      *(_OWORD *)(v16 + 112) = 0u;
      *(_OWORD *)(v16 + 128) = 0u;
      *(_OWORD *)(v16 + 64) = 0u;
      *(_QWORD *)v16 = v16;
      *(_QWORD *)(v16 + 8) = v16;
      *(_OWORD *)(v16 + 16) = 0u;
      *(_QWORD *)(v16 + 48) = 0;
      *(_DWORD *)(v16 + 56) = 1065353216;
      *(_QWORD *)(v16 + 64) = v16 + 64;
      *(_QWORD *)(v16 + 72) = v16 + 64;
      *(_OWORD *)(v16 + 80) = 0u;
      *(_OWORD *)(v16 + 96) = 0u;
      *(_QWORD *)(v16 + 112) = 0;
      *(_DWORD *)(v16 + 120) = 1065353216;
      *(int32x2_t *)(v16 + 132) = v15;
      *(_DWORD *)(v16 + 140) = 2143289344;
      *(_QWORD *)(v16 + 160) = 0;
      *(_QWORD *)(v16 + 168) = 0;
      *(_QWORD *)(v16 + 176) = 0;
      *(_QWORD *)(v16 + 144) = 0x7FF8000000000000;
      *(_QWORD *)(v16 + 152) = &unk_1E5D341C8;
      *(_QWORD *)(v16 + 184) = 0xFFFFFFFFLL;
      *(_QWORD *)((char *)v99[0] + v14) = v16;
      v14 += 8;
    }
    while (8 * v13 != v14);
    v17 = 0;
    v18 = (float)a4;
    if (a2)
      v19 = a5 == 0;
    else
      v19 = 0;
    v20 = !v19;
    v92 = v20;
    v21 = a3;
    while (1)
    {
      v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 8) + 64) + 8 * v17);
      v24 = *(_QWORD *)(v22 + 48);
      v23 = *(_QWORD *)(v22 + 56);
      if (v23 == v24)
        v25 = 0;
      else
        v25 = *(_QWORD *)(v22 + 48);
      if (v23 != v24)
      {
        v26 = 0;
        v27 = (v23 - v24) / 48;
        if (v27 <= 1)
          v27 = 1;
        v93 = v27;
        while (1)
        {
          __p[0] = 0;
          v28 = (void *)operator new();
          bzero(v28, 0x238uLL);
          kaldi::WordHypLattice::Arc::Arc((kaldi::WordHypLattice::Arc *)v28);
          __p[0] = v28;
          v29 = (int **)(v25 + 48 * v26 + 16);
          kaldi::WordHypLattice::Arc::SetPhones((uint64_t)v28, v29, a1);
          v30 = (float *)(v25 + 48 * v26);
          v31 = (double *)__p[0];
          *((float *)__p[0] + 13) = *((float *)__p[0] + 18) * v18;
          v31[5] = v30[2];
          v31[2] = v30[3];
          *((_QWORD *)v31 + 32) = *(int *)v30;
          v32 = v99[0];
          *v31 = *((double *)v99[0] + v17);
          *((_QWORD *)__p[0] + 1) = v32[*((int *)v30 + 10)];
          kaldi::InsertionOrderedSet<kaldi::WordHypLattice::Arc *>::insert((uint64_t *)(v32[v17] + 64), __p);
          kaldi::InsertionOrderedSet<kaldi::WordHypLattice::Arc *>::insert(*((uint64_t **)v99[0] + *((int *)v30 + 10)), __p);
          v33 = (char *)__p[0];
          v34 = *((_QWORD *)__p[0] + 1);
          v35 = *((_DWORD *)__p[0] + 140) + *(_DWORD *)(*(_QWORD *)__p[0] + 188);
          *((float *)__p[0] + 63) = (float)v35;
          *(_DWORD *)(v34 + 188) = v35;
          *((float *)v33 + 62) = v18 * (float)v35;
          if ((v92 & 1) != 0)
            break;
          *((_QWORD *)v33 + 3) = 0;
          v36 = v25 + 48 * v26;
          v38 = *(int **)(v36 + 24);
          v37 = (_QWORD *)(v36 + 24);
          v39 = *v29;
          if (v38 != *v29)
          {
            v40 = 0;
            do
            {
              v41 = kaldi::TransitionModel::TransitionIdToTransitionState(a1, v39[v40]);
              v42 = kaldi::TransitionModel::TransitionStateToForwardPdf(a1, v41);
              Score = kaldi::LatticeScoreCache::GetScore(a2, v40 + *(_DWORD *)(*(_QWORD *)__p[0] + 188), v42);
              v33 = (char *)__p[0];
              *((double *)__p[0] + 3) = *((double *)__p[0] + 3) + Score;
              ++v40;
              v39 = *v29;
            }
            while (v40 < (uint64_t)(*v37 - (_QWORD)*v29) >> 2);
LABEL_24:
            if (a5)
            {
              v44 = *(int *)(v25 + 48 * v26 + 4);
              v45 = *a5;
              if (0x8E38E38E38E38E39 * ((a5[1] - *a5) >> 3) <= v44)
                std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
              v46 = (_OWORD *)(v45 + 72 * (int)v44);
              v48 = *v46;
              v47 = (char **)(v46 + 1);
              *((_OWORD *)v33 + 8) = v48;
              if (v33 + 144 != (char *)v47)
              {
                v49 = *(_QWORD *)(v45 + 72 * (int)v44 + 24);
                std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v33 + 144, *v47, v49, (v49 - (uint64_t)*v47) >> 2);
                v33 = (char *)__p[0];
              }
              v50 = (std::string **)(v45 + 72 * (int)v44 + 40);
              if (v33 + 168 != (char *)v50)
              {
                v51 = *(__int128 **)(v45 + 72 * (int)v44 + 48);
                std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)v33 + 7, *v50, v51, 0xAAAAAAAAAAAAAAABLL * (((char *)v51 - (char *)*v50) >> 3));
                v33 = (char *)__p[0];
              }
              v52 = *(_QWORD *)(v45 + 72 * (int)v44 + 64);
              *((_QWORD *)v33 + 24) = v52;
              if (a2)
              {
                *((_QWORD *)v33 + 25) = 0;
                v53 = v25 + 48 * v26;
                v55 = *(int **)(v53 + 24);
                v54 = (_QWORD *)(v53 + 24);
                v56 = *v29;
                if (v55 != *v29)
                {
                  v57 = 0;
                  do
                  {
                    v58 = kaldi::TransitionModel::TransitionIdToTransitionState(a1, v56[v57]);
                    v59 = kaldi::TransitionModel::TransitionStateToForwardPdf(a1, v58);
                    v60 = kaldi::LatticeScoreCache::GetScore(a2, v57 + *(_DWORD *)(*(_QWORD *)__p[0] + 188), v59);
                    *((double *)__p[0] + 25) = *((double *)__p[0] + 25) + v60;
                    ++v57;
                    v56 = *v29;
                  }
                  while (v57 < (uint64_t)(*v54 - (_QWORD)*v29) >> 2);
                }
              }
              else
              {
                *((_QWORD *)v33 + 25) = v52;
              }
            }
          }
          if (++v26 == v93)
            goto LABEL_37;
        }
        *((_QWORD *)v33 + 3) = *((_QWORD *)v33 + 2);
        goto LABEL_24;
      }
LABEL_37:
      v21 = v91;
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v91 + 32))(&v96, v91, v17);
      v102 = *((float *)&v96 + 1);
      LODWORD(__p[0]) = v96;
      v101 = 2139095040;
      v100 = INFINITY;
      if (*(float *)&v96 != INFINITY)
        break;
      v61 = v97;
      v62 = v98;
      if (v102 != v100 || v98 != v97)
        goto LABEL_39;
LABEL_42:
      if (v61)
      {
        v98 = v61;
        operator delete(v61);
      }
      if (++v17 == v90)
        goto LABEL_49;
    }
    v61 = v97;
    v62 = v98;
LABEL_39:
    if (v61 != v62)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"final_weight.String().empty()", 29);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
    }
    if (*(float *)&v96 != 0.0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"final_weight.Weight().Value1() == 0.0", 37);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
    }
    v61 = v62;
    if (*((float *)&v96 + 1) != 0.0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"final_weight.Weight().Value2() == 0.0", 37);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
    }
    goto LABEL_42;
  }
LABEL_49:
  v63 = v99[0];
  v64 = (char *)operator new(0x70uLL);
  *((_QWORD *)v64 + 1) = 0;
  *((_QWORD *)v64 + 2) = 0;
  *(_QWORD *)v64 = &unk_1E5D415D8;
  v64[24] = 1;
  v65 = (kaldi::WordHypLattice *)(v64 + 24);
  *((_QWORD *)v64 + 4) = *v63;
  *((_QWORD *)v64 + 13) = 0;
  *(_OWORD *)(v64 + 88) = 0u;
  *(_OWORD *)(v64 + 72) = 0u;
  *(_OWORD *)(v64 + 56) = 0u;
  *(_OWORD *)(v64 + 40) = 0u;
  *v89 = v64 + 24;
  v89[1] = v64;
  kaldi::WordHypLattice::RecomputeTopSortedNodes((kaldi::WordHypLattice *)(v64 + 24));
  v114 = v113;
  v111[0] = &off_1E5D3D460;
  v112 = v111;
  v113[0] = &off_1E5D3D408;
  std::string::basic_string[abi:ne180100]<0>(__p, "log_posterior");
  kaldi::WordHypLattice::RecomputeArcPosteriors((_QWORD *)v64 + 3, (uint64_t)v113, (uint64_t)v111, (uint64_t)__p);
  if (v95 < 0)
    operator delete(__p[0]);
  v66 = v112;
  if (v112 == v111)
  {
    v67 = 4;
    v66 = v111;
  }
  else
  {
    if (!v112)
      goto LABEL_57;
    v67 = 5;
  }
  (*(void (**)(void))(*v66 + 8 * v67))();
LABEL_57:
  v69 = v114;
  if (v114 == v113)
  {
    v70 = 4;
    v69 = v113;
  }
  else
  {
    if (!v114)
      goto LABEL_62;
    v70 = 5;
  }
  (*(void (**)(void))(*v69 + 8 * v70))();
LABEL_62:
  v110 = v109;
  v107[0] = &off_1E5D3D510;
  v108 = v107;
  v109[0] = &off_1E5D3D4B8;
  std::string::basic_string[abi:ne180100]<0>(__p, "log_acoustic_posterior");
  kaldi::WordHypLattice::RecomputeArcPosteriors(v65, (uint64_t)v109, (uint64_t)v107, (uint64_t)__p);
  if (v95 < 0)
    operator delete(__p[0]);
  v71 = v108;
  if (v108 == v107)
  {
    v72 = 4;
    v71 = v107;
  }
  else
  {
    if (!v108)
      goto LABEL_69;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_69:
  v73 = v110;
  if (v110 == v109)
  {
    v74 = 4;
    v73 = v109;
  }
  else
  {
    if (!v110)
      goto LABEL_74;
    v74 = 5;
  }
  (*(void (**)(void))(*v73 + 8 * v74))();
LABEL_74:
  v106 = v105;
  v103[0] = &off_1E5D3D5C0;
  v104 = v103;
  v105[0] = &off_1E5D3D568;
  std::string::basic_string[abi:ne180100]<0>(__p, "log_acoustic_posterior_2");
  kaldi::WordHypLattice::RecomputeArcPosteriors(v65, (uint64_t)v105, (uint64_t)v103, (uint64_t)__p);
  if (v95 < 0)
    operator delete(__p[0]);
  v75 = v104;
  if (v104 == v103)
  {
    v76 = 4;
    v75 = v103;
  }
  else
  {
    if (!v104)
      goto LABEL_81;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_81:
  v77 = v106;
  if (v106 == v105)
  {
    v78 = 4;
    v77 = v105;
    goto LABEL_85;
  }
  if (v106)
  {
    v78 = 5;
LABEL_85:
    (*(void (**)(void))(*v77 + 8 * v78))();
  }
  kaldi::WordHypLattice::RecomputeNodeGraphLogProbs(v65);
  kaldi::WordHypLattice::RecomputeBestPath(v65);
  kaldi::WordHypLattice::InitNodeAndArcTimestamps((uint64_t)v65);
  v79 = *((_QWORD *)v64 + 5);
  v80 = *((_QWORD *)v64 + 6);
  v81 = v80 - v79;
  if (v80 != v79)
  {
    v82 = 0;
    v83 = v81 >> 3;
    if (v83 <= 1)
      v83 = 1;
    do
    {
      *(_DWORD *)(*(_QWORD *)(v79 + 8 * v82) + 184) = v82;
      ++v82;
    }
    while (v83 != v82);
  }
  v84 = *((_QWORD *)v64 + 8);
  v85 = *((_QWORD *)v64 + 9);
  v86 = v85 - v84;
  if (v85 != v84)
  {
    v87 = 0;
    v88 = v86 >> 3;
    if (v88 <= 1)
      v88 = 1;
    do
    {
      *(_DWORD *)(*(_QWORD *)(v84 + 8 * v87) + 456) = v87;
      ++v87;
    }
    while (v88 != v87);
  }
  if (v99[0])
  {
    v99[1] = v99[0];
    operator delete(v99[0]);
  }
}

void sub_1ADA11E18(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50)
{
  if (__p)
    operator delete(__p);
  JUMPOUT(0x1ADA11E50);
}

void sub_1ADA11E48(_Unwind_Exception *a1)
{
  void *v2;

  if (v2)
    operator delete(v2);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::InsertionOrderedSet<kaldi::WordHypLattice::Arc *>::insert(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = (uint64_t)(a1 + 3);
  result = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::find<kaldi::LatticeFasterOnlineDecoder::Token *>(a1 + 3, a2);
  if (!result)
  {
    v6 = operator new(0x18uLL);
    v6[2] = *a2;
    v7 = *a1;
    *(_QWORD *)(v7 + 8) = v6;
    *a1 = (uint64_t)v6;
    *v6 = v7;
    v6[1] = a1;
    ++a1[2];
    v8 = v6;
    return std::__hash_table<std::__hash_value_type<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>,std::__unordered_map_hasher<kaldi::WordHypLattice::Arc *,std::__hash_value_type<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>,std::hash<kaldi::WordHypLattice::Arc *>,std::equal_to<kaldi::WordHypLattice::Arc *>,true>,std::__unordered_map_equal<kaldi::WordHypLattice::Arc *,std::__hash_value_type<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>,std::equal_to<kaldi::WordHypLattice::Arc *>,std::hash<kaldi::WordHypLattice::Arc *>,true>,std::allocator<std::__hash_value_type<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>>>::__emplace_unique_key_args<kaldi::WordHypLattice::Arc *,kaldi::WordHypLattice::Arc * const&,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>(v4, a2, a2, (uint64_t *)&v8);
  }
  return result;
}

void kaldi::WordHypLattice::RecomputeTopSortedNodes(kaldi::WordHypLattice *this)
{
  char **v1;
  uint64_t i;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD **v34;
  _QWORD *v35;
  _QWORD **v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t **v40;
  int v41;
  char **v42;
  _OWORD v43[2];
  __int128 v44;
  uint64_t *v45;
  _QWORD *v46[2];
  _QWORD *v47;

  v42 = (char **)((char *)this + 16);
  *((_QWORD *)this + 3) = *((_QWORD *)this + 2);
  v1 = (char **)((char *)this + 40);
  *((_QWORD *)this + 6) = *((_QWORD *)this + 5);
  *(_BYTE *)this = 1;
  if (*((_QWORD *)this + 1))
  {
    v46[0] = 0;
    v46[1] = 0;
    v45 = (uint64_t *)v46;
    v44 = 0u;
    memset(v43, 0, sizeof(v43));
    std::deque<kaldi::WordHypLattice::Node *>::push_back(v43, (_QWORD *)this + 1);
    for (i = *((_QWORD *)&v44 + 1); *((_QWORD *)&v44 + 1); i = *((_QWORD *)&v44 + 1))
    {
      v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v43[0] + 1) + (((unint64_t)v44 >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (v44 & 0x1FF));
      *(_QWORD *)&v44 = v44 + 1;
      *((_QWORD *)&v44 + 1) = i - 1;
      if ((unint64_t)v44 >= 0x400)
      {
        operator delete(**((void ***)&v43[0] + 1));
        *((_QWORD *)&v43[0] + 1) += 8;
        *(_QWORD *)&v44 = v44 - 512;
      }
      v6 = (_QWORD *)*((_QWORD *)this + 3);
      v5 = *((_QWORD *)this + 4);
      if ((unint64_t)v6 >= v5)
      {
        v8 = ((char *)v6 - *v42) >> 3;
        if ((unint64_t)(v8 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v9 = v5 - (_QWORD)*v42;
        v10 = v9 >> 2;
        if (v9 >> 2 <= (unint64_t)(v8 + 1))
          v10 = v8 + 1;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
          v11 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v11 = v10;
        if (v11)
          v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)this + 32, v11);
        else
          v12 = 0;
        v13 = &v12[8 * v8];
        *(_QWORD *)v13 = v4;
        v7 = v13 + 8;
        v15 = (char *)*((_QWORD *)this + 2);
        v14 = (char *)*((_QWORD *)this + 3);
        if (v14 != v15)
        {
          do
          {
            v16 = *((_QWORD *)v14 - 1);
            v14 -= 8;
            *((_QWORD *)v13 - 1) = v16;
            v13 -= 8;
          }
          while (v14 != v15);
          v14 = *v42;
        }
        *((_QWORD *)this + 2) = v13;
        *((_QWORD *)this + 3) = v7;
        *((_QWORD *)this + 4) = &v12[8 * v11];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *v6 = v4;
        v7 = v6 + 1;
      }
      *((_QWORD *)this + 3) = v7;
      v17 = v4 + 64;
      for (j = *(_QWORD *)(v4 + 72); j != v17; j = *(_QWORD *)(j + 8))
      {
        v20 = (_QWORD *)*((_QWORD *)this + 6);
        v19 = *((_QWORD *)this + 7);
        if ((unint64_t)v20 >= v19)
        {
          v22 = ((char *)v20 - *v1) >> 3;
          if ((unint64_t)(v22 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v23 = v19 - (_QWORD)*v1;
          v24 = v23 >> 2;
          if (v23 >> 2 <= (unint64_t)(v22 + 1))
            v24 = v22 + 1;
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
            v25 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v25 = v24;
          if (v25)
            v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)this + 56, v25);
          else
            v26 = 0;
          v27 = &v26[8 * v22];
          *(_QWORD *)v27 = *(_QWORD *)(j + 16);
          v21 = v27 + 8;
          v29 = (char *)*((_QWORD *)this + 5);
          v28 = (char *)*((_QWORD *)this + 6);
          if (v28 != v29)
          {
            do
            {
              v30 = *((_QWORD *)v28 - 1);
              v28 -= 8;
              *((_QWORD *)v27 - 1) = v30;
              v27 -= 8;
            }
            while (v28 != v29);
            v28 = *v1;
          }
          *((_QWORD *)this + 5) = v27;
          *((_QWORD *)this + 6) = v21;
          *((_QWORD *)this + 7) = &v26[8 * v25];
          if (v28)
            operator delete(v28);
        }
        else
        {
          *v20 = *(_QWORD *)(j + 16);
          v21 = v20 + 1;
        }
        *((_QWORD *)this + 6) = v21;
        v31 = *(_QWORD *)(j + 16);
        v32 = *(_QWORD *)(v31 + 8);
        v33 = v46[0];
        if (!v46[0])
          goto LABEL_48;
        v34 = v46;
        do
        {
          v35 = v33;
          v36 = v34;
          v37 = v33[4];
          v38 = v33 + 1;
          if (v37 >= v32)
          {
            v38 = v35;
            v34 = (_QWORD **)v35;
          }
          v33 = (_QWORD *)*v38;
        }
        while (v33);
        if (v34 == v46)
          goto LABEL_48;
        if (v37 < v32)
          v35 = v36;
        if (v32 < v35[4])
        {
LABEL_48:
          v39 = *(_QWORD *)(v32 + 16);
          v47 = (_QWORD *)(v31 + 8);
          *((_DWORD *)std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,int>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,int>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,int>>>::__emplace_unique_key_args<kaldi::WordHypLattice::Node *,std::piecewise_construct_t const&,std::tuple<kaldi::WordHypLattice::Node * const&>,std::tuple<>>(&v45, (unint64_t *)(v31 + 8), (uint64_t)&std::piecewise_construct, &v47)+ 10) = v39;
          v31 = *(_QWORD *)(j + 16);
        }
        v47 = (_QWORD *)(v31 + 8);
        v40 = std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,int>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,int>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,int>>>::__emplace_unique_key_args<kaldi::WordHypLattice::Node *,std::piecewise_construct_t const&,std::tuple<kaldi::WordHypLattice::Node * const&>,std::tuple<>>(&v45, (unint64_t *)(v31 + 8), (uint64_t)&std::piecewise_construct, &v47);
        v41 = *((_DWORD *)v40 + 10) - 1;
        *((_DWORD *)v40 + 10) = v41;
        if (!v41)
          std::deque<kaldi::WordHypLattice::Node *>::push_back(v43, (_QWORD *)(*(_QWORD *)(j + 16) + 8));
      }
    }
    std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v43);
    std::__tree<int>::destroy((uint64_t)&v45, v46[0]);
  }
}

void sub_1ADA12250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, _QWORD *a19)
{
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](&a11);
  std::__tree<int>::destroy((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

void kaldi::WordHypLattice::RecomputeArcPosteriors(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  unint64_t *v6;
  unint64_t *v7;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t *v18;
  double v19;
  double v20;
  double v21;
  BOOL v22;
  double v23;
  long double v24;
  long double v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  uint64_t *v35;
  double v36;
  double v37;
  double v38;
  double v39;
  long double v40;
  uint64_t *v41;
  uint64_t v42;
  double v43;
  double v44;
  uint64_t *v45;
  double v46;
  float v47;
  float v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t *v59[34];
  uint64_t *v60;
  _QWORD *v61[2];
  uint64_t *v62;
  _QWORD *v63[2];

  v4 = a1 + 1;
  if (a1[1])
  {
    v6 = (unint64_t *)a1[2];
    v7 = (unint64_t *)a1[3];
    if (v6 != v7)
    {
      v63[0] = 0;
      v63[1] = 0;
      v61[1] = 0;
      v62 = (uint64_t *)v63;
      v60 = (uint64_t *)v61;
      v61[0] = 0;
      do
      {
        std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,double>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,double>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,double>>>::__emplace_unique_key_args<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::Node *&,double const&>(&v62, v6, (uint64_t *)v6, &kaldi::kLogZeroDouble);
        std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,double>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,double>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,double>>>::__emplace_unique_key_args<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::Node *&,double const&>(&v60, v6, (uint64_t *)v6, &kaldi::kLogZeroDouble);
        ++v6;
      }
      while (v6 != v7);
      v59[0] = v4;
      std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(&v62, (unint64_t *)v4, (uint64_t)&std::piecewise_construct, v59)[5] = 0;
      v11 = (uint64_t *)a1[2];
      v12 = (uint64_t *)a1[3];
      if (v11 != v12)
      {
        do
        {
          v13 = *v11 + 64;
          for (i = *(_QWORD *)(*v11 + 72); i != v13; i = *(_QWORD *)(i + 8))
          {
            v15 = *(_QWORD *)(a2 + 24);
            if (!v15)
              std::__throw_bad_function_call[abi:ne180100]();
            v16 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 48))(v15, *(_QWORD *)(i + 16));
            v59[0] = v11;
            v17 = *((double *)std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(&v62, (unint64_t *)v11, (uint64_t)&std::piecewise_construct, v59)+ 5);
            v59[0] = (uint64_t *)(*(_QWORD *)(i + 16) + 8);
            v18 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(&v62, (unint64_t *)v59[0], (uint64_t)&std::piecewise_construct, v59);
            v19 = *((double *)v18 + 5);
            v20 = v19 - (v17 - v16);
            v21 = v17 - v16 - v19;
            v22 = v19 < v17 - v16;
            if (v19 >= v17 - v16)
              v23 = *((double *)v18 + 5);
            else
              v23 = v17 - v16;
            if (v22)
              v24 = v20;
            else
              v24 = v21;
            if (v24 >= -36.0436534)
            {
              v25 = exp(v24);
              v23 = v23 + log1p(v25);
            }
            v59[0] = (uint64_t *)(*(_QWORD *)(i + 16) + 8);
            *((double *)std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(&v62, (unint64_t *)v59[0], (uint64_t)&std::piecewise_construct, v59)+ 5) = v23;
          }
          ++v11;
        }
        while (v11 != v12);
        v11 = (uint64_t *)a1[3];
      }
      v59[0] = v11 - 1;
      v26 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(&v62, (unint64_t *)v11 - 1, (uint64_t)&std::piecewise_construct, v59);
      v59[0] = (uint64_t *)(a1[3] - 8);
      std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(&v60, (unint64_t *)v59[0], (uint64_t)&std::piecewise_construct, v59)[5] = 0;
      v27 = (uint64_t *)a1[2];
      v28 = (uint64_t *)a1[3];
      while (v28 != v27)
      {
        v30 = *--v28;
        v29 = v30;
        v31 = *(_QWORD *)(v30 + 8);
        if (v31 != v30)
        {
          do
          {
            v32 = *(_QWORD *)(a2 + 24);
            if (!v32)
              std::__throw_bad_function_call[abi:ne180100]();
            v33 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 48))(v32, *(_QWORD *)(v31 + 16));
            v59[0] = v28;
            v34 = *((double *)std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(&v60, (unint64_t *)v28, (uint64_t)&std::piecewise_construct, v59)+ 5);
            v59[0] = *(uint64_t **)(v31 + 16);
            v35 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(&v60, (unint64_t *)v59[0], (uint64_t)&std::piecewise_construct, v59);
            v36 = v34 - v33;
            v37 = *((double *)v35 + 5);
            if (v37 >= v36)
              v38 = *((double *)v35 + 5);
            else
              v38 = v36;
            if (v37 >= v36)
              v39 = v36 - v37;
            else
              v39 = v37 - v36;
            if (v39 >= -36.0436534)
            {
              v40 = exp(v39);
              v38 = v38 + log1p(v40);
            }
            v59[0] = *(uint64_t **)(v31 + 16);
            *((double *)std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(&v60, (unint64_t *)v59[0], (uint64_t)&std::piecewise_construct, v59)+ 5) = v38;
            v59[0] = *(uint64_t **)(v31 + 16);
            v41 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(&v62, (unint64_t *)v59[0], (uint64_t)&std::piecewise_construct, v59);
            v42 = *(_QWORD *)(a3 + 24);
            if (!v42)
              std::__throw_bad_function_call[abi:ne180100]();
            v43 = *((double *)v41 + 5);
            v44 = *((double *)v26 + 5);
            *(double *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v42 + 48))(v42, *(_QWORD *)(v31 + 16)) = v36 + v43 - v44;
            v31 = *(_QWORD *)(v31 + 8);
          }
          while (v31 != v29);
          v27 = (uint64_t *)a1[2];
        }
      }
      v59[0] = v28;
      v45 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(&v60, (unint64_t *)v28, (uint64_t)&std::piecewise_construct, v59);
      v46 = *((double *)v26 + 5);
      v47 = v46;
      v48 = *((double *)v45 + 5);
      if (v47 != v48
        && (COERCE_INT(fabs(v47 - v48)) > 2139095039
         || fabsf(v47 - v48) > (float)((float)(fabsf(v47) + fabsf(v48)) * 0.00000001))
        && kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v59);
        v49 = *(char *)(a4 + 23);
        if (v49 >= 0)
          v50 = a4;
        else
          v50 = *(_QWORD *)a4;
        if (v49 >= 0)
          v51 = *(unsigned __int8 *)(a4 + 23);
        else
          v51 = *(_QWORD *)(a4 + 8);
        v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, v50, v51);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" Total forward probability over lattice = ", 42);
        v53 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)", while total backward probability = ", 37);
        std::ostream::operator<<();
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v59);
        v46 = *((double *)v26 + 5);
      }
      if ((*(_QWORD *)&v46 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v59);
        v54 = *(char *)(a4 + 23);
        if (v54 >= 0)
          v55 = a4;
        else
          v55 = *(_QWORD *)a4;
        if (v54 >= 0)
          v56 = *(unsigned __int8 *)(a4 + 23);
        else
          v56 = *(_QWORD *)(a4 + 8);
        v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, v55, v56);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)" Non-finite total probability in lattice (", 42);
        v58 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"). Numeric problems with model?", 31);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v59);
      }
      std::__tree<int>::destroy((uint64_t)&v60, v61[0]);
      std::__tree<int>::destroy((uint64_t)&v62, v63[0]);
    }
  }
}

void sub_1ADA127A4(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  JUMPOUT(0x1ADA127E4);
}

void sub_1ADA127E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<int>::destroy(v1 - 168, *(_QWORD **)(v1 - 160));
  std::__tree<int>::destroy(v1 - 144, *(_QWORD **)(v1 - 136));
  _Unwind_Resume(a1);
}

void kaldi::WordHypLattice::RecomputeNodeGraphLogProbs(kaldi::WordHypLattice *this)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  long double v16;
  _QWORD **v17;
  _QWORD **v18;
  _QWORD *v19;

  v1 = *((_QWORD *)this + 1);
  if (v1)
  {
    v3 = (uint64_t *)*((_QWORD *)this + 2);
    v4 = (uint64_t *)*((_QWORD *)this + 3);
    if (v3 != v4)
    {
      v5 = (uint64_t *)*((_QWORD *)this + 2);
      do
      {
        v6 = *v5++;
        *(_QWORD *)(v6 + 144) = 0xFFF0000000000000;
      }
      while (v5 != v4);
      *(_QWORD *)(v1 + 144) = 0;
      do
      {
        v7 = *v3;
        v8 = *v3 + 64;
        for (i = *(_QWORD *)(*v3 + 72); i != v8; i = *(_QWORD *)(i + 8))
        {
          v10 = *(_QWORD *)(i + 16);
          v11 = *(_QWORD *)(v10 + 8);
          v12 = *(double *)(v11 + 144);
          v13 = *(double *)(v7 + 144) - *(double *)(v10 + 40);
          if (v12 >= v13)
            v14 = *(double *)(v11 + 144);
          else
            v14 = *(double *)(v7 + 144) - *(double *)(v10 + 40);
          if (v12 >= v13)
            v15 = v13 - v12;
          else
            v15 = v12 - v13;
          if (v15 >= -36.0436534)
          {
            v16 = exp(v15);
            v14 = v14 + log1p(v16);
          }
          *(double *)(v11 + 144) = v14;
        }
        ++v3;
      }
      while (v3 != v4);
      v17 = (_QWORD **)*((_QWORD *)this + 5);
      v18 = (_QWORD **)*((_QWORD *)this + 6);
      while (v17 != v18)
      {
        v19 = *v17++;
        v19[30] = *(_QWORD *)(*v19 + 144);
      }
    }
  }
}

void kaldi::WordHypLattice::RecomputeBestPath(kaldi::WordHypLattice *this)
{
  uint64_t **v1;
  uint64_t **v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t i;
  double v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20[34];
  uint64_t *v21;
  _QWORD *v22[2];

  v1 = (uint64_t **)((char *)this + 8);
  if (*((_QWORD *)this + 1))
  {
    v3 = (uint64_t **)*((_QWORD *)this + 2);
    v4 = (uint64_t **)*((_QWORD *)this + 3);
    if (v3 != v4)
    {
      v22[0] = 0;
      v22[1] = 0;
      v21 = (uint64_t *)v22;
      do
      {
        v5 = std::map<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken,std::less<kaldi::WordHypLattice::Node *>,std::allocator<std::pair<kaldi::WordHypLattice::Node * const,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>>>::operator[](&v21, v3);
        *v5 = (uint64_t *)0x7FF0000000000000;
        v5[1] = 0;
        ++v3;
      }
      while (v3 != v4);
      *std::map<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken,std::less<kaldi::WordHypLattice::Node *>,std::allocator<std::pair<kaldi::WordHypLattice::Node * const,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>>>::operator[](&v21, v1) = 0;
      v6 = (uint64_t **)*((_QWORD *)this + 2);
      v7 = (uint64_t **)*((_QWORD *)this + 3);
      while (v6 != v7)
      {
        v8 = (uint64_t)(*v6 + 8);
        for (i = (*v6)[9]; i != v8; i = *(_QWORD *)(i + 8))
        {
          v10 = *(double *)std::map<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken,std::less<kaldi::WordHypLattice::Node *>,std::allocator<std::pair<kaldi::WordHypLattice::Node * const,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>>>::operator[](&v21, v6);
          v11 = *(_QWORD *)(i + 16);
          v12 = *(double *)(v11 + 24);
          v13 = *(double *)(v11 + 40);
          v20[0] = *(uint64_t **)(v11 + 8);
          v14 = v10 + v12 + v13;
          if (v14 < *(double *)std::map<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken,std::less<kaldi::WordHypLattice::Node *>,std::allocator<std::pair<kaldi::WordHypLattice::Node * const,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>>>::operator[](&v21, v20))
          {
            *(double *)std::map<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken,std::less<kaldi::WordHypLattice::Node *>,std::allocator<std::pair<kaldi::WordHypLattice::Node * const,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>>>::operator[](&v21, v20) = v14;
            v15 = *(uint64_t **)(i + 16);
            std::map<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken,std::less<kaldi::WordHypLattice::Node *>,std::allocator<std::pair<kaldi::WordHypLattice::Node * const,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>>>::operator[](&v21, v20)[1] = v15;
          }
        }
        ++v6;
      }
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"best cost = ", 12);
        std::map<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken,std::less<kaldi::WordHypLattice::Node *>,std::allocator<std::pair<kaldi::WordHypLattice::Node * const,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>>>::operator[](&v21, (uint64_t **)(*((_QWORD *)this + 3) - 8));
        std::ostream::operator<<();
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v20);
      }
      v16 = (uint64_t *)*((_QWORD *)this + 5);
      v17 = (uint64_t *)*((_QWORD *)this + 6);
      while (v16 != v17)
      {
        v18 = *v16++;
        *(_BYTE *)(v18 + 49) = 0;
      }
      v20[0] = *(uint64_t **)(*((_QWORD *)this + 3) - 8);
      if (v20[0] != *((uint64_t **)this + 1))
      {
        do
        {
          v19 = std::map<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken,std::less<kaldi::WordHypLattice::Node *>,std::allocator<std::pair<kaldi::WordHypLattice::Node * const,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>>>::operator[](&v21, v20)[1];
          *((_BYTE *)v19 + 49) = 1;
          v20[0] = (uint64_t *)*v19;
        }
        while (v20[0] != *v1);
      }
      std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>>>::destroy(v22[0]);
    }
  }
}

void sub_1ADA12AF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>>>::destroy(*(_QWORD **)(v1 - 112));
  _Unwind_Resume(a1);
}

uint64_t kaldi::WordHypLattice::InitNodeAndArcTimestamps(uint64_t this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  float v5;

  v1 = *(uint64_t **)(this + 16);
  v2 = *(uint64_t **)(this + 24);
  while (v1 != v2)
  {
    this = kaldi::WordHypLattice::Node::setTimestamps(*v1);
    v3 = *v1 + 64;
    v4 = *(_QWORD *)(*v1 + 72);
    if (v4 != v3)
    {
      v5 = *(float *)(*v1 + 140);
      do
      {
        *(float *)(*(_QWORD *)(v4 + 16) + 248) = *(float *)(*(_QWORD *)(v4 + 16) + 52) + v5;
        v4 = *(_QWORD *)(v4 + 8);
      }
      while (v4 != v3);
    }
    ++v1;
  }
  return this;
}

uint64_t kaldi::WordHypLattice::ReassignNodeIds(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(this + 16);
  v2 = *(_QWORD *)(this + 24);
  v3 = v2 - v1;
  if (v2 != v1)
  {
    v4 = 0;
    v5 = v3 >> 3;
    if (v5 <= 1)
      v5 = 1;
    do
    {
      *(_DWORD *)(*(_QWORD *)(v1 + 8 * v4) + 184) = v4;
      ++v4;
    }
    while (v5 != v4);
  }
  return this;
}

uint64_t kaldi::WordHypLattice::ReassignArcIds(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(this + 40);
  v2 = *(_QWORD *)(this + 48);
  v3 = v2 - v1;
  if (v2 != v1)
  {
    v4 = 0;
    v5 = v3 >> 3;
    if (v5 <= 1)
      v5 = 1;
    do
    {
      *(_DWORD *)(*(_QWORD *)(v1 + 8 * v4) + 456) = v4;
      ++v4;
    }
    while (v5 != v4);
  }
  return this;
}

void kaldi::WordHypLattice::RetrieveConfidenceByTokens(kaldi::WordHypLattice *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  _QWORD *v6;
  float v7;
  float v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;
  unint64_t v12;
  float *v13;
  void **v14;
  float *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  float *v21;
  float *v22;
  std::string __p;
  std::string *p_p;

  if (*((_QWORD *)this + 1) && *(_BYTE *)this)
  {
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)a2 = a2 + 8;
    v3 = *((_QWORD *)this + 5);
    for (i = *((_QWORD *)this + 6); v3 != i; v3 += 8)
    {
      std::optional<std::string>::value_or[abi:ne180100]<std::string&>(*(_QWORD *)v3 + 464, *(_QWORD *)v3 + 264, &__p);
      p_p = &__p;
      v5 = std::__tree<std::__value_type<std::string,std::vector<kaldi::TimestampsAndConfidence>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<kaldi::TimestampsAndConfidence>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<kaldi::TimestampsAndConfidence>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
      v6 = v5;
      v7 = *(float *)(*(_QWORD *)v3 + 52);
      v8 = *(float *)(*(_QWORD *)v3 + 248) - v7;
      v9 = *(_QWORD *)(*(_QWORD *)v3 + 32);
      v10 = (float *)v5[8];
      v11 = (uint64_t)(v5 + 9);
      v12 = v5[9];
      if ((unint64_t)v10 >= v12)
      {
        v14 = (void **)(v5 + 7);
        v15 = (float *)v5[7];
        v16 = ((char *)v10 - (char *)v15) >> 4;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v18 = v12 - (_QWORD)v15;
        if (v18 >> 3 > v17)
          v17 = v18 >> 3;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
          v19 = 0xFFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v11, v19);
          v15 = (float *)v6[7];
          v10 = (float *)v6[8];
        }
        else
        {
          v20 = 0;
        }
        v21 = (float *)&v20[16 * v16];
        *v21 = v8;
        v21[1] = v7;
        *((_QWORD *)v21 + 1) = v9;
        v22 = v21;
        if (v10 != v15)
        {
          do
          {
            *((_OWORD *)v22 - 1) = *((_OWORD *)v10 - 1);
            v22 -= 4;
            v10 -= 4;
          }
          while (v10 != v15);
          v15 = (float *)*v14;
        }
        v13 = v21 + 4;
        v6[7] = v22;
        v6[8] = v21 + 4;
        v6[9] = &v20[16 * v19];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *v10 = v8;
        v10[1] = v7;
        v13 = v10 + 4;
        *((_QWORD *)v10 + 1) = v9;
      }
      v6[8] = v13;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)a2 = a2 + 8;
  }
}

void sub_1ADA12DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(v15, *(_QWORD **)(v15 + 8));
  _Unwind_Resume(a1);
}

uint64_t **std::map<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken,std::less<kaldi::WordHypLattice::Node *>,std::allocator<std::pair<kaldi::WordHypLattice::Node * const,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>>>::operator[](uint64_t **a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;

  v4 = a1 + 1;
  v3 = a1[1];
  v5 = *a2;
  if (v3)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v3;
        v7 = v3[4];
        if ((unint64_t)v5 >= v7)
          break;
        v3 = *v6;
        v4 = v6;
        if (!*v6)
          goto LABEL_9;
      }
      if (v7 >= (unint64_t)v5)
        break;
      v3 = v6[1];
      if (!v3)
      {
        v4 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v6 = a1 + 1;
LABEL_9:
    v8 = (uint64_t *)v6;
    v6 = (uint64_t **)operator new(0x38uLL);
    v6[4] = v5;
    v6[5] = (uint64_t *)0x7FF0000000000000;
    v6[6] = 0;
    *v6 = 0;
    v6[1] = 0;
    v6[2] = v8;
    *v4 = (uint64_t *)v6;
    v9 = (uint64_t *)**a1;
    v10 = (uint64_t *)v6;
    if (v9)
    {
      *a1 = v9;
      v10 = *v4;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6 + 5;
}

kaldi::WordHypLattice::Node *kaldi::WordHypLattice::GetBestPath(_QWORD *a1, char **a2, uint64_t *a3)
{
  kaldi::WordHypLattice::Node *result;
  uint64_t v7;
  uint64_t BestPathArc;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  __int128 *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD v29[34];

  a2[1] = *a2;
  std::vector<std::string>::__clear[abi:ne180100](a3);
  result = (kaldi::WordHypLattice::Node *)a1[1];
  if (result)
  {
    v7 = a1[3];
    if (a1[2] != v7)
    {
      if (result != *(kaldi::WordHypLattice::Node **)(v7 - 8))
      {
        while (1)
        {
          BestPathArc = kaldi::WordHypLattice::Node::FindBestPathArc(result, 1, 1);
          if (!BestPathArc)
            break;
          v9 = BestPathArc;
          v11 = a2[1];
          v10 = (unint64_t)a2[2];
          if ((unint64_t)v11 >= v10)
          {
            v13 = *a2;
            v14 = (v11 - *a2) >> 2;
            v15 = v14 + 1;
            if ((unint64_t)(v14 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v16 = v10 - (_QWORD)v13;
            if (v16 >> 1 > v15)
              v15 = v16 >> 1;
            if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
              v17 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v17 = v15;
            if (v17)
            {
              v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a2 + 2), v17);
              v13 = *a2;
              v11 = a2[1];
            }
            else
            {
              v18 = 0;
            }
            v19 = &v18[4 * v14];
            *(_DWORD *)v19 = *(_DWORD *)(v9 + 456);
            v12 = v19 + 4;
            while (v11 != v13)
            {
              v20 = *((_DWORD *)v11 - 1);
              v11 -= 4;
              *((_DWORD *)v19 - 1) = v20;
              v19 -= 4;
            }
            *a2 = v19;
            a2[1] = v12;
            a2[2] = &v18[4 * v17];
            if (v13)
              operator delete(v13);
          }
          else
          {
            *(_DWORD *)v11 = *(_DWORD *)(BestPathArc + 456);
            v12 = v11 + 4;
          }
          a2[1] = v12;
          v21 = (__int128 *)(v9 + 264);
          v22 = a3[1];
          if (v22 >= a3[2])
          {
            v23 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, v21);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a3, v21);
            v23 = v22 + 24;
          }
          a3[1] = v23;
          result = *(kaldi::WordHypLattice::Node **)(v9 + 8);
          if (result == *(kaldi::WordHypLattice::Node **)(a1[3] - 8))
            goto LABEL_25;
        }
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v29, "arc != nullptr");
LABEL_33:
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29);
      }
LABEL_25:
      v24 = (uint64_t *)a1[5];
      v25 = (uint64_t *)a1[6];
      if (v24 == v25)
      {
        v26 = 0;
      }
      else
      {
        v26 = 0;
        do
        {
          v27 = *v24++;
          v26 += *(unsigned __int8 *)(v27 + 49);
        }
        while (v24 != v25);
      }
      if (v26 != (a2[1] - *a2) >> 2)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Num arcs in best path =", 23);
        v28 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" but num arcs marked =", 22);
        std::ostream::operator<<();
        goto LABEL_33;
      }
    }
  }
  return result;
}

void sub_1ADA13114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

void kaldi::WordHypLattice::GetBestMeanConfPath(_QWORD *a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t **v13;
  double v14;
  uint64_t v15;
  double v16;
  int v17;
  uint64_t **v18;
  int v19;
  uint64_t **v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  uint64_t *v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t **v33;
  int v34;
  _DWORD *v35;
  uint64_t *v36;
  uint64_t *v37;
  BOOL v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t **v42;
  uint64_t *v43;
  uint64_t **v44;
  int v45;
  int v46;
  double v47;
  int v48;
  double v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t **v53;
  uint64_t **v54;
  uint64_t *v55;
  unint64_t v56;
  _DWORD *v57;
  _DWORD *v58;
  _DWORD *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  int v66;
  __int128 *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  _DWORD *v71;
  uint64_t v72;
  _DWORD *v73;
  unint64_t v75;
  int v76;
  BOOL v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t **v88;
  uint64_t **v89;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t *v94[35];
  uint64_t *v95;
  _QWORD *v96[8];

  v89 = (uint64_t **)(a1 + 1);
  if (a1[1] && a1[2] != a1[3] && a1[5] != a1[6])
  {
    v96[0] = 0;
    v96[1] = 0;
    v95 = (uint64_t *)v96;
    v6 = std::map<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>::operator[](&v95, v89);
    v91 = a2;
    LODWORD(v94[0]) = 0;
    *std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>::operator[](v6, (int *)v94) = 0;
    v7 = (uint64_t **)a1[2];
    v8 = (uint64_t **)a1[3];
    v86 = a1;
    v88 = v8;
    while (v7 != v8)
    {
      v9 = (*v7)[9];
      v92 = (uint64_t)(*v7 + 8);
      if (v9 != v92)
      {
        while (1)
        {
          v10 = v7;
          v11 = std::map<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>::operator[](&v95, v7);
          v13 = v11 + 1;
          v12 = *v11;
          if (*v11 != (uint64_t *)(v11 + 1))
            break;
LABEL_41:
          v9 = *(_QWORD *)(v9 + 8);
          v7 = v10;
          if (v9 == v92)
            goto LABEL_42;
        }
        while (2)
        {
          v14 = *((double *)v12 + 5);
          v15 = *(_QWORD *)(v9 + 16);
          v16 = *(double *)(v15 + 32);
          v94[0] = *(uint64_t **)(v15 + 8);
          v17 = *((_DWORD *)v12 + 8);
          v18 = std::map<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>::operator[](&v95, v94);
          v19 = v17 + 1;
          v22 = v18[1];
          v20 = v18 + 1;
          v21 = (uint64_t)v22;
          if (!v22)
            goto LABEL_18;
          v23 = (uint64_t)v20;
          do
          {
            v24 = *(_DWORD *)(v21 + 32);
            v25 = v24 <= v17;
            if (v24 <= v17)
              v26 = (uint64_t *)(v21 + 8);
            else
              v26 = (uint64_t *)v21;
            if (!v25)
              v23 = v21;
            v21 = *v26;
          }
          while (*v26);
          if ((uint64_t **)v23 == v20 || v19 < *(_DWORD *)(v23 + 32))
LABEL_18:
            v23 = (uint64_t)v20;
          v27 = v14 + v16;
          if ((uint64_t **)v23 == std::map<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>::operator[](&v95, v94)+ 1)
          {
            v29 = *(_QWORD *)(v9 + 16);
            v30 = std::map<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>::operator[](&v95, v94);
            v31 = v30;
            v33 = v30 + 1;
            v32 = v30[1];
            if (v32)
            {
              while (1)
              {
                while (1)
                {
                  v23 = (uint64_t)v32;
                  v34 = *((_DWORD *)v32 + 8);
                  if (v19 >= v34)
                    break;
                  v32 = *(uint64_t **)v23;
                  v33 = (uint64_t **)v23;
                  if (!*(_QWORD *)v23)
                    goto LABEL_33;
                }
                if (v34 > v17)
                  break;
                v32 = *(uint64_t **)(v23 + 8);
                if (!v32)
                {
                  v33 = (uint64_t **)(v23 + 8);
                  goto LABEL_33;
                }
              }
            }
            else
            {
              v23 = (uint64_t)(v30 + 1);
LABEL_33:
              v35 = operator new(0x38uLL);
              v35[8] = v19;
              *((_QWORD *)v35 + 5) = 0xFFF0000000000000;
              *((_QWORD *)v35 + 6) = 0;
              std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(v31, v23, v33, (uint64_t *)v35);
              v23 = (uint64_t)v35;
            }
          }
          else
          {
            v28 = *(double *)(v23 + 40);
            if (v27 > v28)
            {
              v29 = *(_QWORD *)(v9 + 16);
              break;
            }
            if (v27 != v28 || (v29 = *(_QWORD *)(v9 + 16), !*(_BYTE *)(v29 + 49)))
            {
LABEL_35:
              v36 = (uint64_t *)v12[1];
              if (v36)
              {
                do
                {
                  v37 = v36;
                  v36 = (uint64_t *)*v36;
                }
                while (v36);
              }
              else
              {
                do
                {
                  v37 = (uint64_t *)v12[2];
                  v38 = *v37 == (_QWORD)v12;
                  v12 = v37;
                }
                while (!v38);
              }
              v12 = v37;
              if (v37 == (uint64_t *)v13)
                goto LABEL_41;
              continue;
            }
          }
          break;
        }
        *(double *)(v23 + 40) = v27;
        *(_QWORD *)(v23 + 48) = v29;
        goto LABEL_35;
      }
LABEL_42:
      ++v7;
      v8 = v88;
    }
    v39 = (uint64_t *)v86[5];
    v40 = (uint64_t *)v86[6];
    while (v39 != v40)
    {
      v41 = *v39++;
      *(_BYTE *)(v41 + 48) = 0;
    }
    v42 = std::map<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>::operator[](&v95, (uint64_t **)(v86[3] - 8));
    v44 = v42 + 1;
    v43 = *v42;
    if (*v42 == (uint64_t *)(v42 + 1))
    {
      v45 = 0;
    }
    else
    {
      v45 = 0;
      v46 = kaldi::g_kaldi_verbose_level;
      v47 = -INFINITY;
      do
      {
        v48 = *((_DWORD *)v43 + 8);
        v49 = *((double *)v43 + 5) / (double)v48;
        if (v46 >= 1)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v94, 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"path len=", 9);
          v50 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" mean conf=", 11);
          std::ostream::operator<<();
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v94);
          v46 = kaldi::g_kaldi_verbose_level;
          v48 = *((_DWORD *)v43 + 8);
        }
        if (v49 > v47)
        {
          v47 = v49;
          v45 = v48;
        }
        v51 = (uint64_t *)v43[1];
        if (v51)
        {
          do
          {
            v52 = v51;
            v51 = (uint64_t *)*v51;
          }
          while (v51);
        }
        else
        {
          do
          {
            v52 = (uint64_t *)v43[2];
            v38 = *v52 == (_QWORD)v43;
            v43 = v52;
          }
          while (!v38);
        }
        v43 = v52;
      }
      while (v52 != (uint64_t *)v44);
    }
    *a4 = 0;
    v94[0] = *(uint64_t **)(v86[3] - 8);
    if (v94[0] != (uint64_t *)v86[1])
    {
      do
      {
        v53 = std::map<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>::operator[](&v95, v94);
        v93 = v45;
        v54 = std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>::operator[](v53, &v93);
        v55 = v54[1];
        *((_BYTE *)v55 + 48) = 1;
        v57 = *(_DWORD **)(v91 + 8);
        v56 = *(_QWORD *)(v91 + 16);
        if ((unint64_t)v57 >= v56)
        {
          v59 = *(_DWORD **)v91;
          v60 = ((uint64_t)v57 - *(_QWORD *)v91) >> 2;
          v61 = v60 + 1;
          if ((unint64_t)(v60 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v62 = v56 - (_QWORD)v59;
          if (v62 >> 1 > v61)
            v61 = v62 >> 1;
          if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL)
            v63 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v63 = v61;
          if (v63)
          {
            v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v91 + 16, v63);
            v59 = *(_DWORD **)v91;
            v57 = *(_DWORD **)(v91 + 8);
          }
          else
          {
            v64 = 0;
          }
          v65 = &v64[4 * v60];
          *(_DWORD *)v65 = *((_DWORD *)v55 + 114);
          v58 = v65 + 4;
          while (v57 != v59)
          {
            v66 = *--v57;
            *((_DWORD *)v65 - 1) = v66;
            v65 -= 4;
          }
          *(_QWORD *)v91 = v65;
          *(_QWORD *)(v91 + 8) = v58;
          *(_QWORD *)(v91 + 16) = &v64[4 * v63];
          if (v59)
            operator delete(v59);
        }
        else
        {
          *v57 = *((_DWORD *)v55 + 114);
          v58 = v57 + 1;
        }
        *(_QWORD *)(v91 + 8) = v58;
        v67 = (__int128 *)(v54[1] + 33);
        v68 = a3[1];
        if (v68 >= a3[2])
        {
          v69 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, v67);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a3, v67);
          v69 = v68 + 24;
        }
        a3[1] = v69;
        v70 = v54[1];
        if (*((_DWORD *)v70 + 115) == 1)
          ++*a4;
        --v45;
        v94[0] = (uint64_t *)*v70;
      }
      while (v94[0] != *v89);
    }
    v71 = *(_DWORD **)v91;
    v72 = *(_QWORD *)(v91 + 8);
    v73 = (_DWORD *)(v72 - 4);
    if (*(_QWORD *)v91 != v72 && v73 > v71)
    {
      v75 = (unint64_t)(v71 + 1);
      do
      {
        v76 = *(_DWORD *)(v75 - 4);
        *(_DWORD *)(v75 - 4) = *v73;
        *v73-- = v76;
        v77 = v75 >= (unint64_t)v73;
        v75 += 4;
      }
      while (!v77);
    }
    v78 = *a3;
    v79 = a3[1];
    v80 = v79 - 24;
    if (*a3 != v79 && v80 > v78)
    {
      v82 = v78 + 24;
      do
      {
        v83 = *(_QWORD *)(v82 - 8);
        v84 = *(_OWORD *)(v82 - 24);
        v85 = *(_QWORD *)(v80 + 16);
        *(_OWORD *)(v82 - 24) = *(_OWORD *)v80;
        *(_QWORD *)(v82 - 8) = v85;
        *(_OWORD *)v80 = v84;
        *(_QWORD *)(v80 + 16) = v83;
        v80 -= 24;
        v77 = v82 >= v80;
        v82 += 24;
      }
      while (!v77);
    }
    std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>>>::destroy(v96[0]);
  }
}

void sub_1ADA136E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>>>::destroy(*(_QWORD **)(v1 - 160));
  _Unwind_Resume(a1);
}

uint64_t **std::map<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>::operator[](uint64_t **a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;

  v4 = a1 + 1;
  v3 = a1[1];
  v5 = *a2;
  if (v3)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v3;
        v7 = v3[4];
        if ((unint64_t)v5 >= v7)
          break;
        v3 = *v6;
        v4 = v6;
        if (!*v6)
          goto LABEL_9;
      }
      if (v7 >= (unint64_t)v5)
        break;
      v3 = v6[1];
      if (!v3)
      {
        v4 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v6 = a1 + 1;
LABEL_9:
    v8 = (uint64_t *)v6;
    v6 = (uint64_t **)operator new(0x40uLL);
    v6[7] = 0;
    v6[6] = 0;
    v6[4] = v5;
    v6[5] = (uint64_t *)(v6 + 6);
    *v6 = 0;
    v6[1] = 0;
    v6[2] = v8;
    *v4 = (uint64_t *)v6;
    v9 = (uint64_t *)**a1;
    v10 = (uint64_t *)v6;
    if (v9)
    {
      *a1 = v9;
      v10 = *v4;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6 + 5;
}

uint64_t **std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>::operator[](uint64_t **a1, int *a2)
{
  uint64_t *v3;
  uint64_t **v4;
  int v5;
  uint64_t **v6;
  int v7;
  _DWORD *v8;

  v4 = a1 + 1;
  v3 = a1[1];
  v5 = *a2;
  if (v3)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v3;
        v7 = *((_DWORD *)v3 + 8);
        if (v5 >= v7)
          break;
        v3 = *v6;
        v4 = v6;
        if (!*v6)
          goto LABEL_9;
      }
      if (v7 >= v5)
        break;
      v3 = v6[1];
      if (!v3)
      {
        v4 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v6 = a1 + 1;
LABEL_9:
    v8 = operator new(0x38uLL);
    v8[8] = v5;
    *((_QWORD *)v8 + 5) = 0xFFF0000000000000;
    *((_QWORD *)v8 + 6) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v6, v4, (uint64_t *)v8);
    v6 = (uint64_t **)v8;
  }
  return v6 + 5;
}

_QWORD *kaldi::WordHypLattice::GetNBestPath(_QWORD *a1, uint64_t *a2, int a3, unsigned int a4)
{
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *i;
  uint64_t v20;
  void *__p[2];
  unsigned __int8 v22;
  _QWORD v23[34];
  _QWORD v24[3];
  _QWORD *v25;
  _QWORD v26[3];
  _QWORD *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"GetNBestPath: criteria ", 23);
    kaldi::WordHypLattice::CriteriaToString(a4, __p);
    if ((v22 & 0x80u) == 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    if ((v22 & 0x80u) == 0)
      v10 = v22;
    else
      v10 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    if ((char)v22 < 0)
      operator delete(__p[0]);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v23);
  }
  if (a4 == 2)
  {
    v24[0] = &off_1E5D3D3B0;
    v25 = v24;
    kaldi::WordHypLattice::GetNbestPath(a1, a2, a3, (uint64_t)v24, 0);
    result = v25;
    if (v25 == v24)
    {
      v15 = 4;
      result = v24;
    }
    else
    {
      if (!v25)
        return result;
      v15 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v15))();
  }
  if (a4 != 1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "GetNBestPath unexpected criteria");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
  }
  v11 = (uint64_t *)a1[5];
  v12 = (uint64_t *)a1[6];
  while (v11 != v12)
  {
    v13 = *v11++;
    *(_BYTE *)(v13 + 48) = 0;
  }
  v26[0] = &off_1E5D3D358;
  v27 = v26;
  kaldi::WordHypLattice::GetNbestPath(a1, a2, a3, (uint64_t)v26, 1);
  result = v27;
  if (v27 == v26)
  {
    v16 = 4;
    result = v26;
    goto LABEL_25;
  }
  if (v27)
  {
    v16 = 5;
LABEL_25:
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v16))();
  }
  v17 = *a2;
  if (*a2 != a2[1])
  {
    v18 = *(uint64_t **)v17;
    for (i = *(uint64_t **)(v17 + 8); v18 != i; *(_BYTE *)(v20 + 48) = 1)
      v20 = *v18++;
  }
  return result;
}

void sub_1ADA13AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void kaldi::WordHypLattice::GetNbestPath(_QWORD *a1, uint64_t *a2, int a3, uint64_t a4, int a5)
{
  uint64_t **v5;
  _QWORD *v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  __int128 v13;
  int64x2_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t *v20;
  int v21;
  _DWORD *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t **v29;
  uint64_t v30;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t **v33;
  int v34;
  uint64_t **v35;
  uint64_t **v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t **v39;
  int v40;
  BOOL v41;
  uint64_t **v42;
  uint64_t **v43;
  uint64_t **v44;
  uint64_t **v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t **v49;
  uint64_t **v50;
  uint64_t *v51;
  int v52;
  double *v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  uint64_t v57;
  double v58;
  double v59;
  _QWORD *v60;
  _QWORD *v61;
  double v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  _QWORD *v78;
  _QWORD *v79;
  char *v80;
  __int128 v81;
  int64x2_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t **v85;
  uint64_t *v86;
  int v87;
  _DWORD *v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  char v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  BOOL v102;
  uint64_t **v103;
  uint64_t *v104;
  uint64_t **v105;
  void **v106;
  void **v107;
  double *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  void **v121;
  void **j;
  _QWORD *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count_vtbl *v127;
  std::__shared_weak_count *v128;
  uint64_t *v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  char *v133;
  char *v134;
  char *v135;
  char *v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  _QWORD *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  char *p_shared_weak_owners;
  char *v147;
  uint64_t v148;
  BOOL v149;
  unint64_t v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  uint64_t **v155;
  _QWORD *v157;
  uint64_t v158;
  uint64_t **i;
  uint64_t **v161;
  uint64_t **v162;
  uint64_t v164;
  uint64_t *v166;
  void *__p;
  std::__shared_weak_count *v168;
  std::__shared_weak_count *v169;
  _QWORD *v170;
  std::__shared_weak_count *v171;
  __int128 v172;
  void **v173;
  void **v174;
  __int128 v175;
  __int128 v176;
  uint64_t *v177;
  _QWORD *v178[2];
  uint64_t *v179;
  _QWORD *v180[2];
  int64x2_t v181;
  _QWORD v182[2];
  _BYTE v183[24];
  uint64_t v184;
  _QWORD *v185;

  v5 = (uint64_t **)(a1 + 1);
  if (a1[1])
  {
    v6 = a1;
    if (a1[2] != a1[3] && a1[5] != a1[6])
    {
      v181 = 0uLL;
      v182[0] = 0;
      v180[0] = 0;
      v180[1] = 0;
      v179 = (uint64_t *)v180;
      v178[0] = 0;
      v178[1] = 0;
      v177 = (uint64_t *)v178;
      v7 = (char *)operator new(0x38uLL);
      *((_QWORD *)v7 + 1) = 0;
      *((_QWORD *)v7 + 2) = 0;
      *(_QWORD *)v7 = &off_1E5D45970;
      *(_OWORD *)(v7 + 24) = 0u;
      *(_OWORD *)(v7 + 40) = 0u;
      v173 = (void **)(v7 + 24);
      v174 = (void **)v7;
      v185 = v182;
      v8 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken>>>(1uLL);
      *v8 = v7 + 24;
      v8[1] = v7;
      v10 = (_QWORD *)v181.i64[1];
      v11 = (_QWORD *)v181.i64[0];
      if (v181.i64[1] == v181.i64[0])
      {
        v14 = vdupq_n_s64(v181.u64[1]);
        v12 = v8;
      }
      else
      {
        v12 = v8;
        do
        {
          v13 = *((_OWORD *)v10 - 1);
          v10 -= 2;
          *((_OWORD *)v12 - 1) = v13;
          v12 -= 2;
          *v10 = 0;
          v10[1] = 0;
        }
        while (v10 != v11);
        v14 = v181;
      }
      v15 = v8 + 2;
      v181.i64[0] = (uint64_t)v12;
      v181.i64[1] = (uint64_t)(v8 + 2);
      *(int64x2_t *)&v183[8] = v14;
      v16 = v182[0];
      v182[0] = &v8[2 * v9];
      v184 = v16;
      *(_QWORD *)v183 = v14.i64[0];
      std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)v183);
      v181.i64[1] = (uint64_t)v15;
      v17 = std::map<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>::operator[](&v179, v5);
      v18 = v17[1];
      v19 = v17 + 1;
      v20 = (uint64_t *)(v17 + 1);
      if (v18)
      {
        while (1)
        {
          while (1)
          {
            v20 = v18;
            v21 = *((_DWORD *)v18 + 8);
            if (v21 < 1)
              break;
            v18 = (uint64_t *)*v20;
            v19 = (uint64_t **)v20;
            if (!*v20)
              goto LABEL_16;
          }
          if ((v21 & 0x80000000) == 0)
            break;
          v18 = (uint64_t *)v20[1];
          if (!v18)
          {
            v19 = (uint64_t **)(v20 + 1);
            goto LABEL_16;
          }
        }
      }
      else
      {
LABEL_16:
        v22 = operator new(0x40uLL);
        *(_QWORD *)&v183[8] = v17 + 1;
        v22[8] = 0;
        *((_QWORD *)v22 + 6) = 0;
        *((_QWORD *)v22 + 7) = 0;
        *((_QWORD *)v22 + 5) = 0;
        v183[16] = 1;
        std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(v17, (uint64_t)v20, v19, (uint64_t *)v22);
        *(_QWORD *)v183 = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)v183);
        v20 = (uint64_t *)v22;
      }
      *(_QWORD *)&v176 = *(_QWORD *)(v181.i64[1] - 16);
      v23 = *(_QWORD *)(v181.i64[1] - 8);
      *((_QWORD *)&v176 + 1) = v23;
      if (v23)
      {
        v24 = (unint64_t *)(v23 + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap::push(v20 + 5, &v176, a3);
      v26 = (std::__shared_weak_count *)*((_QWORD *)&v176 + 1);
      if (*((_QWORD *)&v176 + 1))
      {
        v27 = (unint64_t *)(*((_QWORD *)&v176 + 1) + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v29 = (uint64_t **)v6[2];
      v155 = (uint64_t **)v6[3];
      if (v29 != v155)
      {
        v157 = v6;
        do
        {
          v30 = (*v29)[9];
          v158 = (uint64_t)(*v29 + 8);
          for (i = v29; v30 != v158; v6 = v157)
          {
            v162 = std::map<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>::operator[](&v179, (uint64_t **)(*(_QWORD *)(v30 + 16) + 8));
            v31 = std::map<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>::operator[](&v179, v29);
            v32 = *v31;
            if (*v31 != (uint64_t *)(v31 + 1))
            {
              v33 = v162 + 1;
              v164 = v30;
              v161 = v31 + 1;
              do
              {
                v34 = *((_DWORD *)v32 + 8);
                LODWORD(__p) = v34;
                v35 = std::map<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>::operator[](&v177, v29);
                v38 = v35[1];
                v36 = v35 + 1;
                v37 = v38;
                if (!v38)
                  goto LABEL_40;
                v39 = v36;
                do
                {
                  v40 = *((_DWORD *)v37 + 8);
                  v41 = v40 < v34;
                  if (v40 >= v34)
                    v42 = (uint64_t **)v37;
                  else
                    v42 = (uint64_t **)(v37 + 1);
                  if (!v41)
                    v39 = (uint64_t **)v37;
                  v37 = *v42;
                }
                while (*v42);
                if (v39 == v36 || v34 < *((_DWORD *)v39 + 8))
LABEL_40:
                  v39 = v36;
                if (v39 == std::map<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>::operator[](&v177, v29)+ 1)
                {
                  kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap::get_sorted((uint64_t)(v32 + 5), (uint64_t *)v183);
                  v43 = std::map<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>::operator[](&v177, v29);
                  v44 = std::map<int,std::vector<std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken>>>::operator[](v43, (int *)&__p);
                  v45 = v44;
                  v46 = *v44;
                  if (*v44)
                  {
                    v47 = (uint64_t)v44[1];
                    v48 = v46;
                    if ((uint64_t *)v47 != v46)
                    {
                      do
                        v47 = std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v47 - 16);
                      while ((uint64_t *)v47 != v46);
                      v48 = *v45;
                    }
                    v45[1] = v46;
                    operator delete(v48);
                    *v45 = 0;
                    v45[1] = 0;
                    v45[2] = 0;
                  }
                  *(_OWORD *)v45 = *(_OWORD *)v183;
                  v45[2] = *(uint64_t **)&v183[16];
                  memset(v183, 0, sizeof(v183));
                  v173 = (void **)v183;
                  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v173);
                }
                v49 = std::map<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>::operator[](&v177, v29);
                v50 = std::map<int,std::vector<std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken>>>::operator[](v49, (int *)&__p);
                v51 = *v50;
                v166 = v50[1];
                if (*v50 != v166)
                {
                  v52 = v34 + 1;
                  while (1)
                  {
                    v53 = (double *)*v51;
                    v54 = (std::__shared_weak_count *)v51[1];
                    if (v54)
                    {
                      p_shared_owners = (unint64_t *)&v54->__shared_owners_;
                      do
                        v56 = __ldxr(p_shared_owners);
                      while (__stxr(v56 + 1, p_shared_owners));
                    }
                    v57 = *(_QWORD *)(a4 + 24);
                    if (!v57)
                      std::__throw_bad_function_call[abi:ne180100]();
                    v58 = *v53;
                    v59 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v57 + 48))(v57, *(_QWORD *)(v30 + 16));
                    v60 = operator new(0x38uLL);
                    v61 = v60;
                    v62 = v58 + v59;
                    v60[1] = 0;
                    v60[2] = 0;
                    *v60 = &off_1E5D45970;
                    v63 = *(_QWORD *)(v30 + 16);
                    if (v54)
                    {
                      v64 = (unint64_t *)&v54->__shared_owners_;
                      do
                        v65 = __ldxr(v64);
                      while (__stxr(v65 + 1, v64));
                      *((double *)v60 + 3) = v62;
                      v60[4] = v63;
                      v60[5] = v53;
                      v60[6] = v54;
                      do
                        v66 = __ldxr(v64);
                      while (__stxr(v66 + 1, v64));
                      do
                        v67 = __ldaxr(v64);
                      while (__stlxr(v67 - 1, v64));
                      if (!v67)
                      {
                        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                        std::__shared_weak_count::__release_weak(v54);
                      }
                    }
                    else
                    {
                      *((double *)v60 + 3) = v62;
                      v60[4] = v63;
                      v60[5] = v53;
                      v60[6] = 0;
                    }
                    v68 = v61 + 3;
                    v173 = (void **)(v61 + 3);
                    v174 = (void **)v61;
                    v69 = v181.i64[1];
                    if (v181.i64[1] >= v182[0])
                    {
                      v71 = (v181.i64[1] - v181.i64[0]) >> 4;
                      v72 = v71 + 1;
                      if ((unint64_t)(v71 + 1) >> 60)
                        std::vector<int>::__throw_length_error[abi:ne180100]();
                      v73 = v182[0] - v181.i64[0];
                      if ((v182[0] - v181.i64[0]) >> 3 > v72)
                        v72 = v73 >> 3;
                      v74 = (unint64_t)v73 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v72;
                      v185 = v182;
                      v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken>>>(v74);
                      v77 = &v75[16 * v71];
                      *(_QWORD *)v77 = v68;
                      *((_QWORD *)v77 + 1) = v61;
                      v78 = (_QWORD *)v181.i64[1];
                      v79 = (_QWORD *)v181.i64[0];
                      if (v181.i64[1] == v181.i64[0])
                      {
                        v82 = vdupq_n_s64(v181.u64[1]);
                        v80 = &v75[16 * v71];
                      }
                      else
                      {
                        v80 = &v75[16 * v71];
                        do
                        {
                          v81 = *((_OWORD *)v78 - 1);
                          v78 -= 2;
                          *((_OWORD *)v80 - 1) = v81;
                          v80 -= 16;
                          *v78 = 0;
                          v78[1] = 0;
                        }
                        while (v78 != v79);
                        v82 = v181;
                      }
                      v70 = v77 + 16;
                      v181.i64[0] = (uint64_t)v80;
                      v181.i64[1] = (uint64_t)(v77 + 16);
                      *(int64x2_t *)&v183[8] = v82;
                      v83 = v182[0];
                      v182[0] = &v75[16 * v76];
                      v184 = v83;
                      *(_QWORD *)v183 = v82.i64[0];
                      std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)v183);
                    }
                    else
                    {
                      *(_QWORD *)v181.i64[1] = v68;
                      *(_QWORD *)(v69 + 8) = v61;
                      v70 = (_QWORD *)(v69 + 16);
                    }
                    v181.i64[1] = (uint64_t)v70;
                    v84 = *v33;
                    v85 = v162 + 1;
                    v86 = (uint64_t *)(v162 + 1);
                    if (*v33)
                    {
                      while (1)
                      {
                        while (1)
                        {
                          v86 = v84;
                          v87 = *((_DWORD *)v84 + 8);
                          if (v52 >= v87)
                            break;
                          v84 = (uint64_t *)*v86;
                          v85 = (uint64_t **)v86;
                          if (!*v86)
                            goto LABEL_84;
                        }
                        if (v87 > v34)
                          break;
                        v84 = (uint64_t *)v86[1];
                        if (!v84)
                        {
                          v85 = (uint64_t **)(v86 + 1);
                          goto LABEL_84;
                        }
                      }
                    }
                    else
                    {
LABEL_84:
                      v88 = operator new(0x40uLL);
                      *(_QWORD *)&v183[8] = v162 + 1;
                      v88[8] = v52;
                      *((_QWORD *)v88 + 6) = 0;
                      *((_QWORD *)v88 + 7) = 0;
                      *((_QWORD *)v88 + 5) = 0;
                      v183[16] = 1;
                      std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(v162, (uint64_t)v86, v85, (uint64_t *)v88);
                      *(_QWORD *)v183 = 0;
                      std::unique_ptr<std::__tree_node<std::__value_type<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)v183);
                      v70 = (_QWORD *)v181.i64[1];
                      v86 = (uint64_t *)v88;
                    }
                    *(_QWORD *)&v175 = *(v70 - 2);
                    v89 = *(v70 - 1);
                    *((_QWORD *)&v175 + 1) = v89;
                    if (v89)
                    {
                      v90 = (unint64_t *)(v89 + 8);
                      do
                        v91 = __ldxr(v90);
                      while (__stxr(v91 + 1, v90));
                    }
                    v92 = kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap::push(v86 + 5, &v175, a3);
                    v93 = (std::__shared_weak_count *)*((_QWORD *)&v175 + 1);
                    if (*((_QWORD *)&v175 + 1))
                    {
                      v94 = (unint64_t *)(*((_QWORD *)&v175 + 1) + 8);
                      do
                        v95 = __ldaxr(v94);
                      while (__stlxr(v95 - 1, v94));
                      if (!v95)
                      {
                        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                        std::__shared_weak_count::__release_weak(v93);
                      }
                    }
                    if ((v92 & 1) == 0)
                      break;
                    v30 = v164;
                    if (v54)
                    {
                      v96 = (unint64_t *)&v54->__shared_owners_;
                      do
                        v97 = __ldaxr(v96);
                      while (__stlxr(v97 - 1, v96));
                      if (!v97)
                      {
                        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                        std::__shared_weak_count::__release_weak(v54);
                      }
                    }
                    v51 += 2;
                    if (v51 == v166)
                      goto LABEL_106;
                  }
                  v181.i64[1] = std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v181.i64[1] - 16);
                  v30 = v164;
                  if (v54)
                  {
                    v98 = (unint64_t *)&v54->__shared_owners_;
                    do
                      v99 = __ldaxr(v98);
                    while (__stlxr(v99 - 1, v98));
                    if (!v99)
                    {
                      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                      std::__shared_weak_count::__release_weak(v54);
                    }
                  }
                }
LABEL_106:
                v100 = (uint64_t *)v32[1];
                if (v100)
                {
                  do
                  {
                    v101 = v100;
                    v100 = (uint64_t *)*v100;
                  }
                  while (v100);
                }
                else
                {
                  do
                  {
                    v101 = (uint64_t *)v32[2];
                    v102 = *v101 == (_QWORD)v32;
                    v32 = v101;
                  }
                  while (!v102);
                }
                v32 = v101;
                v29 = i;
              }
              while (v101 != (uint64_t *)v161);
            }
            v30 = *(_QWORD *)(v30 + 8);
          }
          ++v29;
        }
        while (v29 != v155);
        v29 = (uint64_t **)v6[3];
      }
      memset(v183, 0, sizeof(v183));
      v103 = std::map<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>::operator[](&v179, v29 - 1);
      v105 = v103 + 1;
      v104 = *v103;
      if (*v103 != (uint64_t *)(v103 + 1))
      {
        do
        {
          kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap::get_sorted((uint64_t)(v104 + 5), (uint64_t *)&v173);
          v106 = v173;
          v107 = v174;
          while (v106 != v107)
          {
            v108 = (double *)*v106;
            v109 = (std::__shared_weak_count *)v106[1];
            __p = *v106;
            v168 = v109;
            if (v109)
            {
              v110 = (unint64_t *)&v109->__shared_owners_;
              do
                v111 = __ldxr(v110);
              while (__stxr(v111 + 1, v110));
            }
            if (a5)
              *v108 = *v108 / (double)*((int *)v104 + 8);
            *(_QWORD *)&v172 = v108;
            *((_QWORD *)&v172 + 1) = v109;
            if (v109)
            {
              v112 = (unint64_t *)&v109->__shared_owners_;
              do
                v113 = __ldxr(v112);
              while (__stxr(v113 + 1, v112));
            }
            kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap::push((uint64_t *)v183, &v172, a3);
            if (v109)
            {
              v114 = (unint64_t *)&v109->__shared_owners_;
              do
                v115 = __ldaxr(v114);
              while (__stlxr(v115 - 1, v114));
              if (!v115)
              {
                ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                std::__shared_weak_count::__release_weak(v109);
              }
            }
            v116 = v168;
            if (v168)
            {
              v117 = (unint64_t *)&v168->__shared_owners_;
              do
                v118 = __ldaxr(v117);
              while (__stlxr(v118 - 1, v117));
              if (!v118)
              {
                ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                std::__shared_weak_count::__release_weak(v116);
              }
            }
            v106 += 2;
          }
          __p = &v173;
          std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          v119 = (uint64_t *)v104[1];
          if (v119)
          {
            do
            {
              v120 = v119;
              v119 = (uint64_t *)*v119;
            }
            while (v119);
          }
          else
          {
            do
            {
              v120 = (uint64_t *)v104[2];
              v102 = *v120 == (_QWORD)v104;
              v104 = v120;
            }
            while (!v102);
          }
          v104 = v120;
        }
        while (v120 != (uint64_t *)v105);
      }
      kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap::get_sorted((uint64_t)v183, (uint64_t *)&v173);
      v121 = v173;
      for (j = v174; v121 != j; v121 += 2)
      {
        v123 = *v121;
        v124 = (std::__shared_weak_count *)v121[1];
        v170 = *v121;
        v171 = v124;
        if (v124)
        {
          v125 = (unint64_t *)&v124->__shared_owners_;
          do
            v126 = __ldxr(v125);
          while (__stxr(v126 + 1, v125));
        }
        v168 = 0;
        v169 = 0;
        __p = 0;
        if (v123[2])
        {
          do
          {
            v127 = (std::__shared_weak_count_vtbl *)v123[1];
            v128 = v168;
            if (v168 >= v169)
            {
              v130 = ((char *)v168 - (_BYTE *)__p) >> 3;
              if ((unint64_t)(v130 + 1) >> 61)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v131 = ((char *)v169 - (_BYTE *)__p) >> 2;
              if (v131 <= v130 + 1)
                v131 = v130 + 1;
              if ((unint64_t)((char *)v169 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
                v132 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v132 = v131;
              if (v132)
                v133 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v169, v132);
              else
                v133 = 0;
              v134 = &v133[8 * v130];
              *(_QWORD *)v134 = v127;
              v129 = (uint64_t *)(v134 + 8);
              v136 = (char *)__p;
              v135 = (char *)v168;
              if (v168 != __p)
              {
                do
                {
                  v137 = *((_QWORD *)v135 - 1);
                  v135 -= 8;
                  *((_QWORD *)v134 - 1) = v137;
                  v134 -= 8;
                }
                while (v135 != v136);
                v135 = (char *)__p;
              }
              __p = v134;
              v168 = (std::__shared_weak_count *)v129;
              v169 = (std::__shared_weak_count *)&v133[8 * v132];
              if (v135)
                operator delete(v135);
            }
            else
            {
              v168->__vftable = v127;
              v129 = &v128->__shared_owners_;
            }
            v168 = (std::__shared_weak_count *)v129;
            v139 = (_QWORD *)v170[2];
            v138 = (std::__shared_weak_count *)v170[3];
            if (v138)
            {
              v140 = (unint64_t *)&v138->__shared_owners_;
              do
                v141 = __ldxr(v140);
              while (__stxr(v141 + 1, v140));
            }
            v142 = v171;
            v170 = v139;
            v171 = v138;
            if (v142)
            {
              v143 = (unint64_t *)&v142->__shared_owners_;
              do
                v144 = __ldaxr(v143);
              while (__stlxr(v144 - 1, v143));
              if (!v144)
              {
                ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                std::__shared_weak_count::__release_weak(v142);
              }
            }
            v123 = v170;
          }
          while (v170[2]);
          p_shared_weak_owners = (char *)&v168[-1].__shared_weak_owners_;
          if (__p != v168 && p_shared_weak_owners > __p)
          {
            v147 = (char *)__p + 8;
            do
            {
              v148 = *((_QWORD *)v147 - 1);
              *((_QWORD *)v147 - 1) = *(_QWORD *)p_shared_weak_owners;
              *(_QWORD *)p_shared_weak_owners = v148;
              p_shared_weak_owners -= 8;
              v149 = v147 >= p_shared_weak_owners;
              v147 += 8;
            }
            while (!v149);
          }
        }
        v150 = a2[1];
        if (v150 >= a2[2])
        {
          v151 = std::vector<std::vector<kaldi::WordHypLattice::Arc *>>::__push_back_slow_path<std::vector<kaldi::WordHypLattice::Arc *> const&>(a2, (uint64_t)&__p);
        }
        else
        {
          std::vector<std::vector<kaldi::WordHypLattice::Arc *>>::__construct_one_at_end[abi:ne180100]<std::vector<kaldi::WordHypLattice::Arc *> const&>((uint64_t)a2, (uint64_t)&__p);
          v151 = v150 + 24;
        }
        a2[1] = v151;
        if (__p)
        {
          v168 = (std::__shared_weak_count *)__p;
          operator delete(__p);
        }
        v152 = v171;
        if (v171)
        {
          v153 = (unint64_t *)&v171->__shared_owners_;
          do
            v154 = __ldaxr(v153);
          while (__stlxr(v154 - 1, v153));
          if (!v154)
          {
            ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
            std::__shared_weak_count::__release_weak(v152);
          }
        }
      }
      __p = &v173;
      std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      v173 = (void **)v183;
      std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v173);
      std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>>>>::destroy(v178[0]);
      std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>>>>::destroy(v180[0]);
      *(_QWORD *)v183 = &v181;
      std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)v183);
    }
  }
}

void sub_1ADA146E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,_QWORD *a38)
{
  uint64_t v38;

  __p = (void *)(v38 - 160);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>>>>::destroy(a38);
  std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>>>>::destroy(*(_QWORD **)(v38 - 208));
  *(_QWORD *)(v38 - 216) = v38 - 192;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v38 - 216));
  _Unwind_Resume(a1);
}

uint64_t kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap::push(uint64_t *a1, __int128 *a2, int a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  char *v39;
  __int128 v40;
  int64x2_t v41;
  uint64_t v42;
  double *v43;
  int64x2_t v44;
  uint64_t v45;
  uint64_t *v46;

  v6 = *a1;
  v5 = (_QWORD *)a1[1];
  v7 = (uint64_t)v5 - *a1;
  v8 = v7 >> 4;
  if (v7 >> 4 >= (unint64_t)a3)
  {
    v9 = **(double **)v6;
    v10 = **(double **)a2;
    if (v9 >= v10 && (v9 != v10 || !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 49)))
      return 0;
    if (v7 >= 17)
    {
      v11 = 0;
      v12 = *(_QWORD *)(v6 + 8);
      v43 = *(double **)v6;
      v44.i64[0] = v12;
      *(_QWORD *)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
      v13 = v6;
      do
      {
        v14 = v13;
        v13 += 16 * v11 + 16;
        v15 = 2 * v11;
        v11 = (2 * v11) | 1;
        v16 = v15 + 2;
        if (v16 < v8 && **(double **)v13 > **(double **)(v13 + 16))
        {
          v13 += 16;
          v11 = v16;
        }
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](v14, (__int128 *)v13);
      }
      while (v11 <= (uint64_t)((unint64_t)(v8 - 2) >> 1));
      v17 = (__int128 *)(v5 - 2);
      if ((__int128 *)v13 == v17)
      {
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](v13, (__int128 *)&v43);
      }
      else
      {
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](v13, v17);
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)v17, (__int128 *)&v43);
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::__wrap_iter<std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *>>(v6, v13 + 16, (v13 + 16 - v6) >> 4);
      }
      v19 = (std::__shared_weak_count *)v44.i64[0];
      if (v44.i64[0])
      {
        v20 = (unint64_t *)(v44.i64[0] + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v5 = (_QWORD *)a1[1];
    }
    v5 -= 2;
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v5);
    a1[1] = (uint64_t)v5;
  }
  v22 = a1[2];
  if ((unint64_t)v5 >= v22)
  {
    v27 = ((uint64_t)v5 - *a1) >> 4;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v28 = v22 - *a1;
    v29 = v28 >> 3;
    if (v28 >> 3 <= (unint64_t)(v27 + 1))
      v29 = v27 + 1;
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v29;
    v46 = a1 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken>>>(v30);
    v33 = &v31[16 * v27];
    v34 = *a2;
    *(_OWORD *)v33 = *a2;
    if (*((_QWORD *)&v34 + 1))
    {
      v35 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    v38 = (_QWORD *)*a1;
    v37 = (_QWORD *)a1[1];
    if (v37 == (_QWORD *)*a1)
    {
      v41 = vdupq_n_s64((unint64_t)v37);
      v39 = &v31[16 * v27];
    }
    else
    {
      v39 = &v31[16 * v27];
      do
      {
        v40 = *((_OWORD *)v37 - 1);
        v37 -= 2;
        *((_OWORD *)v39 - 1) = v40;
        v39 -= 16;
        *v37 = 0;
        v37[1] = 0;
      }
      while (v37 != v38);
      v41 = *(int64x2_t *)a1;
    }
    v26 = (uint64_t)(v33 + 16);
    *a1 = (uint64_t)v39;
    a1[1] = (uint64_t)(v33 + 16);
    v44 = v41;
    v42 = a1[2];
    a1[2] = (uint64_t)&v31[16 * v32];
    v45 = v42;
    v43 = (double *)v41.i64[0];
    std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)&v43);
  }
  else
  {
    *v5 = *(_QWORD *)a2;
    v23 = *((_QWORD *)a2 + 1);
    v5[1] = v23;
    if (v23)
    {
      v24 = (unint64_t *)(v23 + 8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    v26 = (uint64_t)(v5 + 2);
  }
  a1[1] = v26;
  std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::__wrap_iter<std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *>>(*a1, v26, (v26 - *a1) >> 4);
  return 1;
}

void sub_1ADA14AEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11)
    kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap::push(a11);
  _Unwind_Resume(exception_object);
}

void kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap::get_sorted(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = (uint64_t)v4 - *(_QWORD *)a1;
  if (v4 == *(_QWORD **)a1)
  {
    v10 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken>>>(v5 >> 4);
    *a2 = v5;
    a2[1] = v5;
    a2[2] = v5 + 16 * v6;
    do
    {
      *(_QWORD *)v5 = *v3;
      v7 = v3[1];
      *(_QWORD *)(v5 + 8) = v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v3 += 2;
      v5 += 16;
    }
    while (v3 != v4);
    a2[1] = v5;
    v10 = *a2;
  }
  v11 = 126 - 2 * __clz((v5 - v10) >> 4);
  if (v5 == v10)
    v12 = 0;
  else
    v12 = v11;
  std::__introsort<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *,false>(v10, (__int128 *)v5, v12, 1);
}

void sub_1ADA14BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t **std::map<int,std::vector<std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken>>>::operator[](uint64_t **a1, int *a2)
{
  uint64_t *v3;
  uint64_t **v4;
  int v5;
  uint64_t **v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;

  v4 = a1 + 1;
  v3 = a1[1];
  v5 = *a2;
  if (v3)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v3;
        v7 = *((_DWORD *)v3 + 8);
        if (v5 >= v7)
          break;
        v3 = *v6;
        v4 = v6;
        if (!*v6)
          goto LABEL_9;
      }
      if (v7 >= v5)
        break;
      v3 = v6[1];
      if (!v3)
      {
        v4 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v6 = a1 + 1;
LABEL_9:
    v8 = (uint64_t *)v6;
    v6 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v6 + 8) = v5;
    v6[6] = 0;
    v6[7] = 0;
    v6[5] = 0;
    *v6 = 0;
    v6[1] = 0;
    v6[2] = v8;
    *v4 = (uint64_t *)v6;
    v9 = (uint64_t *)**a1;
    v10 = (uint64_t *)v6;
    if (v9)
    {
      *a1 = v9;
      v10 = *v4;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6 + 5;
}

uint64_t kaldi::WordHypLattice::RecomputeNodeTimestamps(uint64_t this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(uint64_t **)(this + 16);
  v2 = *(uint64_t **)(this + 24);
  while (v1 != v2)
  {
    v3 = *v1++;
    this = kaldi::WordHypLattice::Node::setTimestamps(v3);
  }
  return this;
}

void kaldi::WordHypLattice::GetTimeSortedNodes(kaldi::WordHypLattice *this@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<kaldi::WordHypLattice::Node *>::__init_with_size[abi:ne180100]<kaldi::WordHypLattice::Node **,kaldi::WordHypLattice::Node **>(a2, *((const void **)this + 2), *((_QWORD *)this + 3), (uint64_t)(*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 3);
  v3 = (char *)*a2;
  v4 = (char *)a2[1];
  v5 = (uint64_t)&v4[-*a2];
  v6 = v5 >> 3;
  if (v5 < 1025)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    v7 = (uint64_t *)std::get_temporary_buffer[abi:ne180100]<kaldi::WordHypLattice::Node *>(v5 >> 3);
    v9 = v8;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetTimeSortedNodes(void)::$_0 &,std::__wrap_iter<kaldi::WordHypLattice::Node **>>(v3, v4, v6, v7, v9);
  if (v7)
    operator delete(v7);
}

void sub_1ADA14DA8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;
  void *v4;

  if (v2)
    operator delete(v2);
  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *kaldi::WordHypLattice::MergeNodes(_QWORD *result, uint64_t *a2, uint64_t **a3)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  v3 = result;
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      v7 = *a3;
      v8 = *(_QWORD **)v4;
      v9 = *(_QWORD **)(*(_QWORD *)v4 + 8);
      if (v9 != *(_QWORD **)v4)
      {
        do
        {
          result = kaldi::InsertionOrderedSet<kaldi::WordHypLattice::Arc *>::insert(v7, v9 + 2);
          v9 = (_QWORD *)v9[1];
        }
        while (v9 != v8);
        v7 = *a3;
        v8 = *(_QWORD **)v4;
      }
      v10 = (_QWORD *)v8[9];
      if (v10 != v8 + 8)
      {
        do
        {
          result = kaldi::InsertionOrderedSet<kaldi::WordHypLattice::Arc *>::insert(v7 + 8, v10 + 2);
          v10 = (_QWORD *)v10[1];
        }
        while (v10 != v8 + 8);
        v8 = *(_QWORD **)v4;
      }
      v11 = (_QWORD *)v8[1];
      if (v11 != v8)
      {
        do
        {
          *(_QWORD *)(v11[2] + 8) = *a3;
          v11 = (_QWORD *)v11[1];
        }
        while (v11 != v8);
        v8 = *(_QWORD **)v4;
      }
      v12 = v8[9];
      if ((_QWORD *)v12 == v8 + 8)
        goto LABEL_14;
      do
      {
        **(_QWORD **)(v12 + 16) = *a3;
        v12 = *(_QWORD *)(v12 + 8);
      }
      while ((_QWORD *)v12 != v8 + 8);
      v8 = *(_QWORD **)v4;
      if (*(_QWORD *)v4)
      {
LABEL_14:
        v8[19] = &unk_1E5D341C8;
        kaldi::CuVector<float>::Destroy((uint64_t)(v8 + 19));
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(v8 + 11));
        std::__list_imp<char *>::clear(v8 + 8);
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(v8 + 3));
        std::__list_imp<char *>::clear(v8);
        result = (_QWORD *)MEMORY[0x1AF44D190](v8, 0x10A0C4094E47B5DLL);
      }
      v4 += 8;
    }
    while (v4 != v5);
  }
  *v3 = 0;
  return result;
}

uint64_t kaldi::WordHypLattice::DeleteArc(kaldi::WordHypLattice *this, kaldi::WordHypLattice::Arc **a2)
{
  uint64_t result;
  void *__p[3];

  kaldi::InsertionOrderedSet<kaldi::WordHypLattice::Arc *>::erase(*(_QWORD *)*a2 + 64, (uint64_t)*a2);
  kaldi::InsertionOrderedSet<kaldi::WordHypLattice::Arc *>::erase(*((_QWORD *)*a2 + 1), (uint64_t)*a2);
  result = (uint64_t)*a2;
  if (*(_QWORD *)(*(_QWORD *)*a2 + 80) && *(_QWORD *)(*(_QWORD *)(result + 8) + 16))
  {
    *(_BYTE *)this = 0;
LABEL_7:
    kaldi::WordHypLattice::Arc::~Arc((void **)result);
    return MEMORY[0x1AF44D190]();
  }
  std::vector<kaldi::WordHypLattice::Node *>::vector(__p, 1uLL, (_QWORD *)(result + 8));
  kaldi::WordHypLattice::MergeNodes(this, (uint64_t *)__p, (uint64_t **)*a2);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  result = (uint64_t)*a2;
  *(_BYTE *)this = 0;
  if (result)
    goto LABEL_7;
  return result;
}

void sub_1ADA14FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *kaldi::InsertionOrderedSet<kaldi::WordHypLattice::Arc *>::erase(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t *result;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = a2;
  v3 = (_QWORD *)(a1 + 24);
  result = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::find<kaldi::LatticeFasterOnlineDecoder::Token *>((_QWORD *)(a1 + 24), &v8);
  if (result)
  {
    v5 = result;
    v6 = (uint64_t *)result[3];
    v7 = *v6;
    *(_QWORD *)(v7 + 8) = v6[1];
    *(_QWORD *)v6[1] = v7;
    --*(_QWORD *)(a1 + 16);
    operator delete(v6);
    return (uint64_t *)std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::erase(v3, v5);
  }
  return result;
}

kaldi::WordHypLattice *kaldi::WordHypLattice::WordHypLattice(kaldi::WordHypLattice *this, const kaldi::WordHypLattice *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  *(_BYTE *)this = 1;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), *((const std::string::value_type **)a2 + 8), *((_QWORD *)a2 + 9));
  }
  else
  {
    v4 = *((_OWORD *)a2 + 4);
    *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
    *((_OWORD *)this + 4) = v4;
  }
  if (*((_QWORD *)a2 + 1))
  {
    kaldi::WordHypLattice::doUnion(this, a2);
    kaldi::WordHypLattice::RecomputeTopSortedNodes(this);
    kaldi::WordHypLattice::InitNodeAndArcTimestamps((uint64_t)this);
    v5 = *((_QWORD *)this + 2);
    v6 = *((_QWORD *)this + 3);
    v7 = v6 - v5;
    if (v6 != v5)
    {
      v8 = 0;
      v9 = v7 >> 3;
      if (v9 <= 1)
        v9 = 1;
      do
      {
        *(_DWORD *)(*(_QWORD *)(v5 + 8 * v8) + 184) = v8;
        ++v8;
      }
      while (v9 != v8);
    }
    v10 = *((_QWORD *)this + 5);
    v11 = *((_QWORD *)this + 6);
    v12 = v11 - v10;
    if (v11 != v10)
    {
      v13 = 0;
      v14 = v12 >> 3;
      if (v14 <= 1)
        v14 = 1;
      do
      {
        *(_DWORD *)(*(_QWORD *)(v10 + 8 * v13) + 456) = v13;
        ++v13;
      }
      while (v14 != v13);
    }
  }
  return this;
}

void sub_1ADA1518C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;
  void *v4;

  v3 = (void *)v1[5];
  if (v3)
  {
    v1[6] = v3;
    operator delete(v3);
  }
  v4 = (void *)v1[2];
  if (v4)
  {
    v1[3] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::WordHypLattice::doUnion(kaldi::WordHypLattice *this, const kaldi::WordHypLattice *a2)
{
  uint64_t *v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char **v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  const kaldi::WordHypLattice::Node **v40;
  const kaldi::WordHypLattice::Node **i;
  _QWORD *v42;
  const kaldi::WordHypLattice::Node *v43;
  _QWORD **v44;
  _QWORD *v45;
  _QWORD **v46;
  unint64_t v47;
  uint64_t *v48;
  char *v49;
  uint64_t v50;
  kaldi::WordHypLattice::Arc *v51;
  _QWORD *v52;
  unint64_t v53;
  _QWORD **v54;
  _QWORD *v55;
  _QWORD **v56;
  unint64_t v57;
  kaldi::WordHypLattice::Node *v58;
  kaldi::WordHypLattice *v59;
  kaldi::WordHypLattice::Arc *v60;
  uint64_t *v61;
  _QWORD *v62[2];
  unint64_t *v63;

  v2 = (uint64_t *)((char *)a2 + 8);
  if (!*((_QWORD *)a2 + 1))
    return;
  if (!*((_QWORD *)this + 1))
  {
    v5 = operator new();
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 112) = 0u;
    *(_OWORD *)(v5 + 128) = 0u;
    *(_QWORD *)v5 = v5;
    *(_QWORD *)(v5 + 8) = v5;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_QWORD *)(v5 + 48) = 0;
    *(_DWORD *)(v5 + 56) = 1065353216;
    *(_QWORD *)(v5 + 64) = v5 + 64;
    *(_QWORD *)(v5 + 72) = v5 + 64;
    *(_OWORD *)(v5 + 80) = 0u;
    *(_OWORD *)(v5 + 96) = 0u;
    *(_QWORD *)(v5 + 112) = 0;
    *(_DWORD *)(v5 + 120) = 1065353216;
    *(int32x2_t *)(v5 + 132) = vdup_n_s32(0x7FC00000u);
    *(_DWORD *)(v5 + 140) = 2143289344;
    *(_QWORD *)(v5 + 160) = 0;
    *(_QWORD *)(v5 + 168) = 0;
    *(_QWORD *)(v5 + 176) = 0;
    *(_QWORD *)(v5 + 144) = 0x7FF8000000000000;
    *(_QWORD *)(v5 + 152) = &unk_1E5D341C8;
    *(_QWORD *)(v5 + 184) = 0xFFFFFFFFLL;
    *((_QWORD *)this + 1) = v5;
    v6 = *((_QWORD *)this + 4);
    v7 = (uint64_t *)*((_QWORD *)this + 3);
    if ((unint64_t)v7 >= v6)
    {
      v9 = *((_QWORD *)this + 2);
      v10 = ((uint64_t)v7 - v9) >> 3;
      if ((unint64_t)(v10 + 1) >> 61)
        goto LABEL_77;
      v11 = v6 - v9;
      v12 = v11 >> 2;
      if (v11 >> 2 <= (unint64_t)(v10 + 1))
        v12 = v10 + 1;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
      {
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)this + 32, v13);
        v5 = *((_QWORD *)this + 1);
      }
      else
      {
        v14 = 0;
      }
      v15 = (uint64_t *)&v14[8 * v10];
      v16 = &v14[8 * v13];
      *v15 = v5;
      v8 = v15 + 1;
      v18 = (char *)*((_QWORD *)this + 2);
      v17 = (char *)*((_QWORD *)this + 3);
      if (v17 != v18)
      {
        do
        {
          v19 = *((_QWORD *)v17 - 1);
          v17 -= 8;
          *--v15 = v19;
        }
        while (v17 != v18);
        v17 = (char *)*((_QWORD *)this + 2);
      }
      *((_QWORD *)this + 2) = v15;
      *((_QWORD *)this + 3) = v8;
      *((_QWORD *)this + 4) = v16;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *v7 = v5;
      v8 = v7 + 1;
    }
    *((_QWORD *)this + 3) = v8;
  }
  if (*((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2) == 8)
    return;
  v20 = (char **)((char *)this + 16);
  if (*((_QWORD *)this + 3) - *((_QWORD *)this + 2) != 8)
    goto LABEL_39;
  v21 = operator new();
  *(_OWORD *)(v21 + 32) = 0u;
  *(_OWORD *)(v21 + 48) = 0u;
  *(_OWORD *)(v21 + 112) = 0u;
  *(_OWORD *)(v21 + 128) = 0u;
  *(_OWORD *)(v21 + 64) = 0u;
  *(_QWORD *)v21 = v21;
  *(_QWORD *)(v21 + 8) = v21;
  *(_OWORD *)(v21 + 16) = 0u;
  *(_QWORD *)(v21 + 48) = 0;
  *(_DWORD *)(v21 + 56) = 1065353216;
  *(_QWORD *)(v21 + 64) = v21 + 64;
  *(_QWORD *)(v21 + 72) = v21 + 64;
  *(_OWORD *)(v21 + 80) = 0u;
  *(_OWORD *)(v21 + 96) = 0u;
  *(_QWORD *)(v21 + 112) = 0;
  *(_DWORD *)(v21 + 120) = 1065353216;
  *(int32x2_t *)(v21 + 132) = vdup_n_s32(0x7FC00000u);
  *(_DWORD *)(v21 + 140) = 2143289344;
  *(_QWORD *)(v21 + 160) = 0;
  *(_QWORD *)(v21 + 168) = 0;
  *(_QWORD *)(v21 + 176) = 0;
  *(_QWORD *)(v21 + 144) = 0x7FF8000000000000;
  *(_QWORD *)(v21 + 152) = &unk_1E5D341C8;
  *(_QWORD *)(v21 + 184) = 0xFFFFFFFFLL;
  v22 = *((_QWORD *)this + 4);
  v23 = (uint64_t *)*((_QWORD *)this + 3);
  if ((unint64_t)v23 >= v22)
  {
    v25 = ((char *)v23 - *v20) >> 3;
    if (!((unint64_t)(v25 + 1) >> 61))
    {
      v26 = v22 - (_QWORD)*v20;
      v27 = v26 >> 2;
      if (v26 >> 2 <= (unint64_t)(v25 + 1))
        v27 = v25 + 1;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
        v28 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v28 = v27;
      if (v28)
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)this + 32, v28);
      else
        v29 = 0;
      v30 = (uint64_t *)&v29[8 * v25];
      v31 = &v29[8 * v28];
      *v30 = v21;
      v24 = v30 + 1;
      v33 = (char *)*((_QWORD *)this + 2);
      v32 = (char *)*((_QWORD *)this + 3);
      if (v32 != v33)
      {
        do
        {
          v34 = *((_QWORD *)v32 - 1);
          v32 -= 8;
          *--v30 = v34;
        }
        while (v32 != v33);
        v32 = *v20;
      }
      *((_QWORD *)this + 2) = v30;
      *((_QWORD *)this + 3) = v24;
      *((_QWORD *)this + 4) = v31;
      if (v32)
        operator delete(v32);
      goto LABEL_38;
    }
LABEL_77:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  *v23 = v21;
  v24 = v23 + 1;
LABEL_38:
  *((_QWORD *)this + 3) = v24;
LABEL_39:
  v62[0] = 0;
  v62[1] = 0;
  v61 = (uint64_t *)v62;
  v35 = *((_QWORD *)this + 1);
  v63 = (unint64_t *)v2;
  std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(&v61, (unint64_t *)v2, (uint64_t)&std::piecewise_construct, (uint64_t **)&v63)[5] = v35;
  v36 = *((_QWORD *)this + 3);
  if (*((_QWORD *)this + 2) == v36)
    v37 = 0;
  else
    v37 = *(_QWORD *)(v36 - 8);
  v38 = *((_QWORD *)a2 + 3);
  if (*((_QWORD *)a2 + 2) == v38)
    v39 = 0;
  else
    v39 = *(_QWORD *)(v38 - 8);
  v59 = this;
  v60 = (kaldi::WordHypLattice::Arc *)v39;
  v63 = (unint64_t *)&v60;
  std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(&v61, (unint64_t *)&v60, (uint64_t)&std::piecewise_construct, (uint64_t **)&v63)[5] = v37;
  v40 = (const kaldi::WordHypLattice::Node **)*((_QWORD *)a2 + 2);
  for (i = (const kaldi::WordHypLattice::Node **)*((_QWORD *)a2 + 3); v40 != i; ++v40)
  {
    v42 = v62[0];
    if (!v62[0])
      goto LABEL_56;
    v43 = *v40;
    v44 = v62;
    do
    {
      v45 = v42;
      v46 = v44;
      v47 = v42[4];
      if (v47 >= (unint64_t)v43)
        v44 = (_QWORD **)v42;
      else
        ++v42;
      v42 = (_QWORD *)*v42;
    }
    while (v42);
    if (v44 == v62)
      goto LABEL_56;
    if (v47 < (unint64_t)v43)
      v45 = v46;
    if ((unint64_t)v43 >= v45[4])
    {
      v48 = v44[5];
    }
    else
    {
LABEL_56:
      v48 = (uint64_t *)operator new();
      kaldi::WordHypLattice::Node::Node((kaldi::WordHypLattice::Node *)v48, *v40);
      std::__list_imp<char *>::clear(v48);
      std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(v48 + 3);
      std::__list_imp<char *>::clear(v48 + 8);
      std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(v48 + 11);
      v63 = (unint64_t *)v40;
      std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(&v61, (unint64_t *)v40, (uint64_t)&std::piecewise_construct, (uint64_t **)&v63)[5] = (uint64_t)v48;
      v43 = *v40;
    }
    v49 = (char *)v43 + 64;
    v50 = *((_QWORD *)v43 + 9);
    if ((const kaldi::WordHypLattice::Node *)v50 != (const kaldi::WordHypLattice::Node *)((char *)v43 + 64))
    {
      do
      {
        v60 = 0;
        v51 = (kaldi::WordHypLattice::Arc *)operator new();
        kaldi::WordHypLattice::Arc::Arc(v51, *(const kaldi::WordHypLattice::Arc **)(v50 + 16));
        v60 = v51;
        v52 = v62[0];
        if (!v62[0])
          goto LABEL_68;
        v53 = *(_QWORD *)(*(_QWORD *)(v50 + 16) + 8);
        v54 = v62;
        do
        {
          v55 = v52;
          v56 = v54;
          v57 = v52[4];
          if (v57 >= v53)
            v54 = (_QWORD **)v52;
          else
            ++v52;
          v52 = (_QWORD *)*v52;
        }
        while (v52);
        if (v54 == v62)
          goto LABEL_68;
        if (v57 < v53)
          v55 = v56;
        if (v53 >= v55[4])
        {
          v58 = (kaldi::WordHypLattice::Node *)v54[5];
        }
        else
        {
LABEL_68:
          v58 = (kaldi::WordHypLattice::Node *)operator new();
          kaldi::WordHypLattice::Node::Node(v58, *(const kaldi::WordHypLattice::Node **)(*(_QWORD *)(v50 + 16) + 8));
          std::__list_imp<char *>::clear(v58);
          std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear((_QWORD *)v58 + 3);
          std::__list_imp<char *>::clear((_QWORD *)v58 + 8);
          std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear((_QWORD *)v58 + 11);
          v63 = (unint64_t *)(*(_QWORD *)(v50 + 16) + 8);
          std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(&v61, v63, (uint64_t)&std::piecewise_construct, (uint64_t **)&v63)[5] = (uint64_t)v58;
          v51 = v60;
        }
        *(_QWORD *)v51 = v48;
        *((_QWORD *)v60 + 1) = v58;
        kaldi::InsertionOrderedSet<kaldi::WordHypLattice::Arc *>::insert(v48 + 8, &v60);
        kaldi::InsertionOrderedSet<kaldi::WordHypLattice::Arc *>::insert((uint64_t *)v58, &v60);
        v50 = *(_QWORD *)(v50 + 8);
      }
      while ((char *)v50 != v49);
    }
  }
  *(_BYTE *)v59 = 0;
  std::__tree<int>::destroy((uint64_t)&v61, v62[0]);
}

void sub_1ADA1579C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  std::__tree<int>::destroy((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void kaldi::WordHypLattice::Arc::~Arc(void **this)
{
  void *v2;
  void *v3;
  void **v4;

  if (*((_BYTE *)this + 552) && *((char *)this + 551) < 0)
    operator delete(this[66]);
  if (*((_BYTE *)this + 520) && *((char *)this + 519) < 0)
    operator delete(this[62]);
  if (*((_BYTE *)this + 488) && *((char *)this + 487) < 0)
    operator delete(this[58]);
  this[53] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)(this + 53));
  this[49] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)(this + 49));
  this[45] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)(this + 45));
  this[41] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)(this + 41));
  this[37] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)(this + 37));
  if (*((char *)this + 287) < 0)
    operator delete(this[33]);
  if (*((char *)this + 239) < 0)
    operator delete(this[27]);
  v4 = this + 21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = this[18];
  if (v2)
  {
    this[19] = v2;
    operator delete(v2);
  }
  v3 = this[13];
  if (v3)
  {
    this[14] = v3;
    operator delete(v3);
  }
  v4 = this + 10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
}

kaldi::WordHypLattice::Arc *kaldi::WordHypLattice::Arc::Arc(kaldi::WordHypLattice::Arc *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((int64x2_t *)this + 1) = vdupq_n_s64(0x7FF8000000000000uLL);
  *((_OWORD *)this + 2) = xmmword_1AE14E870;
  *((_WORD *)this + 24) = 0;
  *((_DWORD *)this + 13) = 2143289344;
  *(_OWORD *)((char *)this + 56) = xmmword_1AE14E880;
  *((_DWORD *)this + 18) = 2143289344;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0x3FF0000000000000;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_QWORD *)this + 30) = 0x7FF8000000000000;
  *((int32x2_t *)this + 31) = vdup_n_s32(0x7FC00000u);
  *((_QWORD *)this + 32) = -1;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 33, "");
  *((_DWORD *)this + 72) = -1;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 37) = &unk_1E5D341C8;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 41) = &unk_1E5D341C8;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 45) = &unk_1E5D341C8;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 49) = &unk_1E5D341C8;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 56) = 0;
  *((_QWORD *)this + 53) = &unk_1E5D341C8;
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 57) = -1;
  *((_BYTE *)this + 464) = 0;
  *((_BYTE *)this + 488) = 0;
  *((_BYTE *)this + 496) = 0;
  *((_BYTE *)this + 520) = 0;
  *((_BYTE *)this + 528) = 0;
  *((_BYTE *)this + 552) = 0;
  *((_DWORD *)this + 140) = 0;
  return this;
}

void sub_1ADA15A70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 239) < 0)
    operator delete(*(void **)(v2 + 216));
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 152) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(v2 + 104);
  if (v6)
  {
    *(_QWORD *)(v2 + 112) = v6;
    operator delete(v6);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::__wrap_iter<std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  __int128 *v8;
  _QWORD *v9;
  double *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v5 = a3 - 2;
  if (a3 >= 2)
  {
    v17 = v3;
    v18 = v4;
    v7 = v5 >> 1;
    v8 = (__int128 *)(a1 + 16 * (v5 >> 1));
    v9 = (_QWORD *)(a2 - 16);
    v10 = *(double **)(a2 - 16);
    if (**(double **)v8 > *v10)
    {
      v11 = *(_QWORD *)(a2 - 8);
      *(_QWORD *)&v16 = *(_QWORD *)(a2 - 16);
      *((_QWORD *)&v16 + 1) = v11;
      *v9 = 0;
      *(_QWORD *)(a2 - 8) = 0;
      do
      {
        v12 = (uint64_t)v8;
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)v9, v8);
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (__int128 *)(a1 + 16 * v7);
        v9 = (_QWORD *)v12;
      }
      while (**(double **)v8 > *v10);
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](v12, &v16);
      v13 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
      if (*((_QWORD *)&v16 + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken>>>(unint64_t a1)
{
  if (a1 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a1);
}

void std::__introsort<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *,false>(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double **v12;
  __int128 v13;
  double *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double *v18;
  unint64_t v19;
  __int128 *v20;
  double *v21;
  double *v22;
  double *v23;
  double **v24;
  double **v25;
  double *v26;
  double v27;
  double *v28;
  double *v29;
  __int128 *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  double v36;
  double *v37;
  unint64_t v38;
  double **v39;
  double *v40;
  double *v41;
  double *v42;
  double *v43;
  double v44;
  double *v45;
  double *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  double *v50;
  double *v51;
  uint64_t v52;
  double *v53;
  double *v54;
  uint64_t v55;
  double *v56;
  double v57;
  double *v58;
  uint64_t v59;
  uint64_t v60;
  double *v61;
  uint64_t v62;
  double *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  double **v67;
  _QWORD *v68;
  double *v69;
  double *v70;
  uint64_t v71;
  double *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  int64_t v77;
  int64_t v78;
  int64_t v79;
  uint64_t v80;
  uint64_t v81;
  double **v82;
  double *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  __int128 *v98;
  double *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  __int128 *v108;
  __int128 *v109;
  double *v110;
  uint64_t v111;
  double *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  __int128 v116;
  __int128 v117;

double **std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *>(double **result, double **a2, double **a3)
{
  double *v3;
  double v4;
  double *v5;
  double *v6;
  double v7;
  double **v8;
  double **v9;
  double *v10;
  double *v11;
  double *v12;
  double *v13;
  double *v14;

  v3 = *a2;
  v4 = **a2;
  v5 = *result;
  v6 = *a3;
  v7 = **a3;
  if (v4 > **result)
  {
    if (v7 <= v4)
    {
      *result = v3;
      *a2 = v5;
      v12 = result[1];
      result[1] = a2[1];
      a2[1] = v12;
      v13 = *a2;
      if (**a3 <= **a2)
        return result;
      *a2 = *a3;
      *a3 = v13;
      v8 = a3 + 1;
      result = a2 + 1;
    }
    else
    {
      *result++ = v6;
      *a3 = v5;
      v8 = a3 + 1;
    }
    v9 = v8;
    goto LABEL_10;
  }
  if (v7 > v4)
  {
    *a2 = v6;
    *a3 = v3;
    v9 = a2 + 1;
    v10 = a2[1];
    a2[1] = a3[1];
    a3[1] = v10;
    v11 = *result;
    if (**a2 > **result)
    {
      *result++ = *a2;
      *a2 = v11;
LABEL_10:
      v14 = *result;
      *result = *v9;
      *v9 = v14;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  double *v6;
  double *v7;
  uint64_t v8;
  double **v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double *v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  double *v21;
  double *v22;
  uint64_t v23;
  double *v24;
  double v25;
  double *v26;
  uint64_t v27;
  uint64_t v28;
  double *v29;
  uint64_t v30;
  double *v31;
  uint64_t v32;
  __int128 v33;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(double **)(a2 - 16);
      v7 = *(double **)a1;
      if (*v6 > **(double **)a1)
      {
        *(_QWORD *)a1 = v6;
        *(_QWORD *)(a2 - 16) = v7;
        v8 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *>((double **)a1, (double **)(a1 + 16), (double **)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *>((double **)a1, (double **)(a1 + 16), (double **)(a1 + 32), (double **)(a2 - 16));
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *>((double **)a1, (double **)(a1 + 16), (double **)(a1 + 32), (double **)(a1 + 48));
      v21 = *(double **)(a2 - 16);
      v22 = *(double **)(a1 + 48);
      if (*v21 > *v22)
      {
        *(_QWORD *)(a1 + 48) = v21;
        *(_QWORD *)(a2 - 16) = v22;
        v23 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v23;
        v24 = *(double **)(a1 + 48);
        v25 = *v24;
        v26 = *(double **)(a1 + 32);
        if (*v24 > *v26)
        {
          v27 = *(_QWORD *)(a1 + 40);
          v28 = *(_QWORD *)(a1 + 56);
          *(_QWORD *)(a1 + 32) = v24;
          *(_QWORD *)(a1 + 40) = v28;
          *(_QWORD *)(a1 + 48) = v26;
          *(_QWORD *)(a1 + 56) = v27;
          v29 = *(double **)(a1 + 16);
          if (v25 > *v29)
          {
            v30 = *(_QWORD *)(a1 + 24);
            *(_QWORD *)(a1 + 16) = v24;
            *(_QWORD *)(a1 + 24) = v28;
            *(_QWORD *)(a1 + 32) = v29;
            *(_QWORD *)(a1 + 40) = v30;
            v31 = *(double **)a1;
            if (v25 > **(double **)a1)
            {
              v32 = *(_QWORD *)(a1 + 8);
              *(_QWORD *)a1 = v24;
              *(_QWORD *)(a1 + 8) = v28;
              *(_QWORD *)(a1 + 16) = v31;
              *(_QWORD *)(a1 + 24) = v32;
            }
          }
        }
      }
      return 1;
    default:
      v9 = (double **)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *>((double **)a1, (double **)(a1 + 16), (double **)(a1 + 32));
      v10 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(double **)v10;
    if (**(double **)v10 > **v9)
    {
      v14 = *(_QWORD *)(v10 + 8);
      *(_QWORD *)&v33 = *(_QWORD *)v10;
      *((_QWORD *)&v33 + 1) = v14;
      *(_QWORD *)v10 = 0;
      *(_QWORD *)(v10 + 8) = 0;
      v15 = v11;
      while (1)
      {
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + v15 + 48, (__int128 *)(a1 + v15 + 32));
        if (v15 == -32)
          break;
        v16 = *(double **)(a1 + v15 + 16);
        v15 -= 16;
        if (*v13 <= *v16)
        {
          v17 = a1 + v15 + 48;
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](v17, &v33);
      v18 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
      if (*((_QWORD *)&v33 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (++v12 == 8)
        return v10 + 16 == a2;
    }
    v9 = (double **)v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2)
      return 1;
  }
}

double **std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *>(double **a1, double **a2, double **a3, double **a4)
{
  double **result;
  double *v9;
  double *v10;
  double *v11;
  double *v12;
  double *v13;
  double *v14;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *>(a1, a2, a3);
  v9 = *a3;
  if (**a4 > **a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    v11 = *a2;
    if (**a3 > **a2)
    {
      *a2 = *a3;
      *a3 = v11;
      v12 = a2[1];
      a2[1] = a3[1];
      a3[1] = v12;
      v13 = *a1;
      if (**a2 > **a1)
      {
        *a1 = *a2;
        *a2 = v13;
        v14 = a1[1];
        a1[1] = a2[1];
        a2[1] = v14;
      }
    }
  }
  return result;
}

kaldi::WordHypLattice::Node *kaldi::WordHypLattice::Node::Node(kaldi::WordHypLattice::Node *this, const kaldi::WordHypLattice::Node *a2)
{
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;

  v4 = std::list<kaldi::WordHypLattice::Arc *>::list(this, (uint64_t)a2);
  std::unordered_map<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>::unordered_map((uint64_t)(v4 + 3), (uint64_t)a2 + 24);
  std::list<kaldi::WordHypLattice::Arc *>::list((_QWORD *)this + 8, (uint64_t)a2 + 64);
  std::unordered_map<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>::unordered_map((uint64_t)this + 88, (uint64_t)a2 + 88);
  v5 = *((_OWORD *)a2 + 8);
  v6 = *((_QWORD *)a2 + 18);
  *((_QWORD *)this + 19) = &unk_1E5D341C8;
  *((_QWORD *)this + 18) = v6;
  *((_OWORD *)this + 8) = v5;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 22) = *((_QWORD *)a2 + 22);
  kaldi::CuVector<float>::Resize((uint64_t)this + 152, *((unsigned int *)a2 + 42), 1);
  kaldi::CuVectorBase<float>::CopyFromVec((_QWORD *)this + 19, (uint64_t)a2 + 152);
  *((_QWORD *)this + 23) = *((_QWORD *)a2 + 23);
  return this;
}

void sub_1ADA16A70(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;

  std::__list_imp<char *>::clear(v3);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::list<kaldi::WordHypLattice::Arc *>::list(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 != a2)
  {
    v5 = 1;
    v6 = a1;
    do
    {
      v7 = operator new(0x18uLL);
      v8 = *(_QWORD *)(v3 + 16);
      v7[1] = a1;
      v7[2] = v8;
      *v7 = v6;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = v5;
      v3 = *(_QWORD *)(v3 + 8);
      ++v5;
      v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1ADA16B38(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>::unordered_map(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::__hash_value_type<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>,std::__unordered_map_hasher<kaldi::WordHypLattice::Arc *,std::__hash_value_type<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>,std::hash<kaldi::WordHypLattice::Arc *>,std::equal_to<kaldi::WordHypLattice::Arc *>,true>,std::__unordered_map_equal<kaldi::WordHypLattice::Arc *,std::__hash_value_type<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>,std::equal_to<kaldi::WordHypLattice::Arc *>,std::hash<kaldi::WordHypLattice::Arc *>,true>,std::allocator<std::__hash_value_type<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>>>::__emplace_unique_key_args<kaldi::WordHypLattice::Arc *,std::pair<kaldi::WordHypLattice::Arc * const,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>> const&>(a1, i + 2, (_OWORD *)i + 1);
  return a1;
}

void sub_1ADA16BA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>,std::__unordered_map_hasher<kaldi::WordHypLattice::Arc *,std::__hash_value_type<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>,std::hash<kaldi::WordHypLattice::Arc *>,std::equal_to<kaldi::WordHypLattice::Arc *>,true>,std::__unordered_map_equal<kaldi::WordHypLattice::Arc *,std::__hash_value_type<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>,std::equal_to<kaldi::WordHypLattice::Arc *>,std::hash<kaldi::WordHypLattice::Arc *>,true>,std::allocator<std::__hash_value_type<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>>>::__emplace_unique_key_args<kaldi::WordHypLattice::Arc *,std::pair<kaldi::WordHypLattice::Arc * const,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>> const&>(uint64_t a1, _QWORD *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v8;
  *((_OWORD *)i + 1) = *a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1ADA16DFC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

kaldi::WordHypLattice::Arc *kaldi::WordHypLattice::Arc::Arc(kaldi::WordHypLattice::Arc *this, const kaldi::WordHypLattice::Arc *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *(_OWORD *)this = *(_OWORD *)a2;
  v4 = *((_OWORD *)a2 + 1);
  v5 = *((_OWORD *)a2 + 2);
  v6 = *((_OWORD *)a2 + 3);
  *(_OWORD *)((char *)this + 60) = *(_OWORD *)((char *)a2 + 60);
  *((_OWORD *)this + 2) = v5;
  *((_OWORD *)this + 3) = v6;
  *((_OWORD *)this + 1) = v4;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 80), *((__int128 **)a2 + 10), *((__int128 **)a2 + 11), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 3));
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 13, *((const void **)a2 + 13), *((_QWORD *)a2 + 14), (uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 2);
  v7 = *((_OWORD *)a2 + 8);
  *((_QWORD *)this + 18) = 0;
  *((_OWORD *)this + 8) = v7;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 18, *((const void **)a2 + 18), *((_QWORD *)a2 + 19), (uint64_t)(*((_QWORD *)a2 + 19) - *((_QWORD *)a2 + 18)) >> 2);
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 7, *((__int128 **)a2 + 21), *((__int128 **)a2 + 22), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 22) - *((_QWORD *)a2 + 21)) >> 3));
  v8 = *((_OWORD *)a2 + 12);
  *((_QWORD *)this + 26) = *((_QWORD *)a2 + 26);
  *((_OWORD *)this + 12) = v8;
  if (*((char *)a2 + 239) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 9, *((const std::string::value_type **)a2 + 27), *((_QWORD *)a2 + 28));
  }
  else
  {
    v9 = *(_OWORD *)((char *)a2 + 216);
    *((_QWORD *)this + 29) = *((_QWORD *)a2 + 29);
    *(_OWORD *)((char *)this + 216) = v9;
  }
  v10 = *((_OWORD *)a2 + 15);
  *((_QWORD *)this + 32) = *((_QWORD *)a2 + 32);
  *((_OWORD *)this + 15) = v10;
  if (*((char *)a2 + 287) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 11, *((const std::string::value_type **)a2 + 33), *((_QWORD *)a2 + 34));
  }
  else
  {
    v11 = *(_OWORD *)((char *)a2 + 264);
    *((_QWORD *)this + 35) = *((_QWORD *)a2 + 35);
    *(_OWORD *)((char *)this + 264) = v11;
  }
  *((_DWORD *)this + 72) = *((_DWORD *)a2 + 72);
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 37) = &unk_1E5D341C8;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 40) = *((_QWORD *)a2 + 40);
  kaldi::CuVector<float>::Resize((uint64_t)this + 296, *((unsigned int *)a2 + 78), 1);
  kaldi::CuVectorBase<float>::CopyFromVec((_QWORD *)this + 37, (uint64_t)a2 + 296);
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 41) = &unk_1E5D341C8;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 44) = *((_QWORD *)a2 + 44);
  kaldi::CuVector<float>::Resize((uint64_t)this + 328, *((unsigned int *)a2 + 86), 1);
  kaldi::CuVectorBase<float>::CopyFromVec((_QWORD *)this + 41, (uint64_t)a2 + 328);
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 45) = &unk_1E5D341C8;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 48) = *((_QWORD *)a2 + 48);
  kaldi::CuVector<float>::Resize((uint64_t)this + 360, *((unsigned int *)a2 + 94), 1);
  kaldi::CuVectorBase<float>::CopyFromVec((_QWORD *)this + 45, (uint64_t)a2 + 360);
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 49) = &unk_1E5D341C8;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 52) = *((_QWORD *)a2 + 52);
  kaldi::CuVector<float>::Resize((uint64_t)this + 392, *((unsigned int *)a2 + 102), 1);
  kaldi::CuVectorBase<float>::CopyFromVec((_QWORD *)this + 49, (uint64_t)a2 + 392);
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 56) = 0;
  *((_QWORD *)this + 53) = &unk_1E5D341C8;
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 56) = *((_QWORD *)a2 + 56);
  kaldi::CuVector<float>::Resize((uint64_t)this + 424, *((unsigned int *)a2 + 110), 1);
  kaldi::CuVectorBase<float>::CopyFromVec((_QWORD *)this + 53, (uint64_t)a2 + 424);
  *((_QWORD *)this + 57) = *((_QWORD *)a2 + 57);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 464), (__int128 *)a2 + 29);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 496), (__int128 *)a2 + 31);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)this + 22, (__int128 *)a2 + 33);
  *((_DWORD *)this + 140) = *((_DWORD *)a2 + 140);
  return this;
}

void sub_1ADA17104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, void **a13, void **a14)
{
  uint64_t v14;
  void **v15;
  void **v16;
  void *v18;
  void *v19;

  if (*(char *)(v14 + 239) < 0)
    operator delete(*a11);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  v18 = *v16;
  if (*v16)
  {
    *(_QWORD *)(v14 + 152) = v18;
    operator delete(v18);
  }
  v19 = *v15;
  if (*v15)
  {
    *(_QWORD *)(v14 + 112) = v19;
    operator delete(v19);
  }
  a14 = a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void sub_1ADA1721C()
{
  JUMPOUT(0x1ADA171A8);
}

void sub_1ADA17224()
{
  JUMPOUT(0x1ADA171B0);
}

void std::deque<kaldi::WordHypLattice::Node *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<kaldi::WordHypLattice::Node *>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<kaldi::WordHypLattice::Node *>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1ADA17578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<kaldi::WordHypLattice::Node *>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1ADA1761C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>,std::__unordered_map_hasher<kaldi::WordHypLattice::Arc *,std::__hash_value_type<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>,std::hash<kaldi::WordHypLattice::Arc *>,std::equal_to<kaldi::WordHypLattice::Arc *>,true>,std::__unordered_map_equal<kaldi::WordHypLattice::Arc *,std::__hash_value_type<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>,std::equal_to<kaldi::WordHypLattice::Arc *>,std::hash<kaldi::WordHypLattice::Arc *>,true>,std::allocator<std::__hash_value_type<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>>>::__emplace_unique_key_args<kaldi::WordHypLattice::Arc *,kaldi::WordHypLattice::Arc * const&,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD **v13;
  _QWORD *i;
  unint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v9 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v8 >> 47) ^ v8);
  v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      for (i = *v13; i; i = (_QWORD *)*i)
      {
        v15 = i[1];
        if (v15 == v10)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v12.u32[0] > 1uLL)
          {
            if (v15 >= v11)
              v15 %= v11;
          }
          else
          {
            v15 &= v11 - 1;
          }
          if (v15 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v10;
  v16 = *a4;
  i[2] = *a3;
  i[3] = v16;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *i = *v24;
LABEL_38:
    *v24 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v23 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v25 = *(_QWORD *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11)
        v25 %= v11;
    }
    else
    {
      v25 &= v11 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1ADA17884(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_0,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_0>,double ()(kaldi::WordHypLattice::Arc const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_0,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_0>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E5D3D408;
  return result;
}

void std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_0,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_0>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E5D3D408;
}

double std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_0,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_0>,double ()(kaldi::WordHypLattice::Arc const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 24) + *(double *)(a2 + 40);
}

uint64_t std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_0,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_0>,double ()(kaldi::WordHypLattice::Arc const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_0,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_0>,double ()(kaldi::WordHypLattice::Arc const&)>::target_type()
{
}

void std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_1,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_1>,double & ()(kaldi::WordHypLattice::Arc &)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_1,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_1>,double & ()(kaldi::WordHypLattice::Arc &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E5D3D460;
  return result;
}

void std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_1,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_1>,double & ()(kaldi::WordHypLattice::Arc &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E5D3D460;
}

uint64_t std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_1,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_1>,double & ()(kaldi::WordHypLattice::Arc &)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 56;
}

uint64_t std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_1,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_1>,double & ()(kaldi::WordHypLattice::Arc &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_1,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_1>,double & ()(kaldi::WordHypLattice::Arc &)>::target_type()
{
}

void std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_2,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_2>,double ()(kaldi::WordHypLattice::Arc const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_2,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_2>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E5D3D4B8;
  return result;
}

void std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_2,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_2>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E5D3D4B8;
}

double std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_2,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_2>,double ()(kaldi::WordHypLattice::Arc const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 24);
}

uint64_t std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_2,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_2>,double ()(kaldi::WordHypLattice::Arc const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_2,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_2>,double ()(kaldi::WordHypLattice::Arc const&)>::target_type()
{
}

void std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_3,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_3>,double & ()(kaldi::WordHypLattice::Arc &)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_3,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_3>,double & ()(kaldi::WordHypLattice::Arc &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E5D3D510;
  return result;
}

void std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_3,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_3>,double & ()(kaldi::WordHypLattice::Arc &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E5D3D510;
}

uint64_t std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_3,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_3>,double & ()(kaldi::WordHypLattice::Arc &)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 64;
}

uint64_t std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_3,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_3>,double & ()(kaldi::WordHypLattice::Arc &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_3,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_3>,double & ()(kaldi::WordHypLattice::Arc &)>::target_type()
{
}

void std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_4,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_4>,double ()(kaldi::WordHypLattice::Arc const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_4,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_4>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E5D3D568;
  return result;
}

void std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_4,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_4>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E5D3D568;
}

double std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_4,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_4>,double ()(kaldi::WordHypLattice::Arc const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 200);
}

uint64_t std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_4,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_4>,double ()(kaldi::WordHypLattice::Arc const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_4,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_4>,double ()(kaldi::WordHypLattice::Arc const&)>::target_type()
{
}

void std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_5,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_5>,double & ()(kaldi::WordHypLattice::Arc &)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_5,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_5>,double & ()(kaldi::WordHypLattice::Arc &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E5D3D5C0;
  return result;
}

void std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_5,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_5>,double & ()(kaldi::WordHypLattice::Arc &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E5D3D5C0;
}

uint64_t std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_5,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_5>,double & ()(kaldi::WordHypLattice::Arc &)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 208;
}

uint64_t std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_5,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_5>,double & ()(kaldi::WordHypLattice::Arc &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_5,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_5>,double & ()(kaldi::WordHypLattice::Arc &)>::target_type()
{
}

uint64_t **std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,int>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,int>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,int>>>::__emplace_unique_key_args<kaldi::WordHypLattice::Node *,std::piecewise_construct_t const&,std::tuple<kaldi::WordHypLattice::Node * const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  _QWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[4] = **a4;
    *((_DWORD *)v11 + 10) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t *std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,double>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,double>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,double>>>::__emplace_unique_key_args<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::Node *&,double const&>(uint64_t **a1, unint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;

  v8 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v7;
        v11 = v7[4];
        if (v9 >= v11)
          break;
        v7 = *v10;
        v8 = v10;
        if (!*v10)
          goto LABEL_10;
      }
      if (v11 >= v9)
        break;
      v7 = v10[1];
      if (!v7)
      {
        v8 = v10 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v10 = a1 + 1;
LABEL_10:
    v12 = (uint64_t *)operator new(0x30uLL);
    v12[4] = *a3;
    v12[5] = *a4;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v10, v8, v12);
    return v12;
  }
  return (uint64_t *)v10;
}

void std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>>>::destroy(*a1);
    std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>>>::destroy(*a1);
    std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>>>::destroy(a1[1]);
    std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>>>::destroy((_QWORD *)a1[6]);
    operator delete(a1);
  }
}

void std::__function::__func<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_0,std::allocator<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_0>,double ()(kaldi::WordHypLattice::Arc const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_0,std::allocator<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_0>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E5D3D358;
  return result;
}

void std::__function::__func<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_0,std::allocator<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_0>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E5D3D358;
}

double std::__function::__func<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_0,std::allocator<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_0>,double ()(kaldi::WordHypLattice::Arc const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 32);
}

uint64_t std::__function::__func<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_0,std::allocator<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_0>,double ()(kaldi::WordHypLattice::Arc const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_0,std::allocator<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_0>,double ()(kaldi::WordHypLattice::Arc const&)>::target_type()
{
}

void std::__function::__func<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_1,std::allocator<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_1>,double ()(kaldi::WordHypLattice::Arc const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_1,std::allocator<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_1>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E5D3D3B0;
  return result;
}

void std::__function::__func<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_1,std::allocator<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_1>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E5D3D3B0;
}

double std::__function::__func<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_1,std::allocator<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_1>,double ()(kaldi::WordHypLattice::Arc const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return -(*(double *)(a2 + 24) + *(double *)(a2 + 40));
}

uint64_t std::__function::__func<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_1,std::allocator<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_1>,double ()(kaldi::WordHypLattice::Arc const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_1,std::allocator<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_1>,double ()(kaldi::WordHypLattice::Arc const&)>::target_type()
{
}

void std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>>>>::destroy(*a1);
    std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>>>>::destroy(a1[1]);
    std::__tree<std::__value_type<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>,std::__map_value_compare<int,std::__value_type<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>,std::less<int>,true>,std::allocator<std::__value_type<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>::destroy((char *)a1[6]);
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>,std::__map_value_compare<int,std::__value_type<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>,std::less<int>,true>,std::allocator<std::__value_type<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>::destroy(char *a1)
{
  void **v2;

  if (a1)
  {
    std::__tree<std::__value_type<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>,std::__map_value_compare<int,std::__value_type<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>,std::less<int>,true>,std::allocator<std::__value_type<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>,std::__map_value_compare<int,std::__value_type<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>,std::less<int>,true>,std::allocator<std::__value_type<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>::destroy(*((_QWORD *)a1 + 1));
    v2 = (void **)(a1 + 40);
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v2);
    operator delete(a1);
  }
}

void std::__shared_ptr_emplace<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken,std::allocator<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5D45970;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken,std::allocator<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5D45970;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken,std::allocator<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken>>::__on_zero_shared(uint64_t a1)
{
  return std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 40);
}

uint64_t std::unique_ptr<std::__tree_node<std::__value_type<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v4;

  v2 = *(void ***)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v4 = v2 + 5;
      std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v4);
    }
    operator delete(v2);
  }
  return a1;
}

_QWORD *std::vector<std::vector<kaldi::WordHypLattice::Arc *>>::__construct_one_at_end[abi:ne180100]<std::vector<kaldi::WordHypLattice::Arc *> const&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<kaldi::WordHypLattice::Arc *>::__init_with_size[abi:ne180100]<kaldi::WordHypLattice::Arc **,kaldi::WordHypLattice::Arc **>(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1ADA18140(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<kaldi::WordHypLattice::Arc *>>::__push_back_slow_path<std::vector<kaldi::WordHypLattice::Arc *> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<kaldi::WordHypLattice::Arc *>::__init_with_size[abi:ne180100]<kaldi::WordHypLattice::Arc **,kaldi::WordHypLattice::Arc **>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v15 += 24;
  std::vector<std::vector<kaldi::WordHypLattice::Arc *>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1ADA18248(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<kaldi::WordHypLattice::Arc *>::__init_with_size[abi:ne180100]<kaldi::WordHypLattice::Arc **,kaldi::WordHypLattice::Arc **>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1ADA182B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<kaldi::WordHypLattice::Node *>::__init_with_size[abi:ne180100]<kaldi::WordHypLattice::Node **,kaldi::WordHypLattice::Node **>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1ADA18330(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::get_temporary_buffer[abi:ne180100]<kaldi::WordHypLattice::Node *>(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0xFFFFFFFFFFFFFFFLL)
    v1 = 0xFFFFFFFFFFFFFFFLL;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  while (1)
  {
    result = operator new(8 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

char *std::__stable_sort<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetTimeSortedNodes(void)::$_0 &,std::__wrap_iter<kaldi::WordHypLattice::Node **>>(char *result, char *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  char *v17;
  char *v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t *v23;
  char *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  char v32;
  uint64_t *v33;
  uint64_t v34;

  if (a3 >= 2)
  {
    v6 = result;
    if (a3 == 2)
    {
      v7 = *((_QWORD *)a2 - 1);
      v8 = *(_QWORD *)result;
      if (*(float *)(v7 + 132) < *(float *)(*(_QWORD *)result + 132))
      {
        *(_QWORD *)result = v7;
        *((_QWORD *)a2 - 1) = v8;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v19 = (char *)a4;
      v20 = a3 >> 1;
      v21 = &result[8 * (a3 >> 1)];
      v22 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetTimeSortedNodes(void)::$_0 &,std::__wrap_iter<kaldi::WordHypLattice::Node **>>((uint64_t)result, v21, v22, a4);
        v23 = (uint64_t *)&v19[8 * v20];
        result = (char *)std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetTimeSortedNodes(void)::$_0 &,std::__wrap_iter<kaldi::WordHypLattice::Node **>>((uint64_t)&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v23);
        v24 = &v19[8 * a3];
        v25 = v23;
        while (v25 != (uint64_t *)v24)
        {
          v26 = v25;
          v27 = *v25;
          v28 = *(float *)(v27 + 132);
          v29 = *(_QWORD *)v19;
          v30 = *(float *)(*(_QWORD *)v19 + 132);
          if (v28 < v30)
            v29 = v27;
          v19 += 8 * (v28 >= v30);
          v25 = &v26[v28 < v30];
          *(_QWORD *)v6 = v29;
          v6 += 8;
          if (v19 == (char *)v23)
          {
            if (v25 != (uint64_t *)v24)
            {
              v31 = 0;
              if (v28 < v30)
                v32 = 1;
              else
                v32 = 2;
              v33 = &v26[v32 & 1];
              do
              {
                *(_QWORD *)&v6[v31 * 8] = v33[v31];
                ++v31;
              }
              while (&v33[v31] != (uint64_t *)v24);
            }
            return result;
          }
        }
        if (v19 != (char *)v23)
        {
          v34 = 0;
          do
          {
            *(_QWORD *)&v6[v34] = *(_QWORD *)&v19[v34];
            v34 += 8;
          }
          while (&v19[v34] != (char *)v23);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetTimeSortedNodes(void)::$_0 &,std::__wrap_iter<kaldi::WordHypLattice::Node **>>(result, v21, v22, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetTimeSortedNodes(void)::$_0 &,std::__wrap_iter<kaldi::WordHypLattice::Node **>>(&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v19, a5);
        return std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetTimeSortedNodes(void)::$_0 &,std::__wrap_iter<kaldi::WordHypLattice::Node **>>(v6, &v6[8 * (a3 >> 1)], a2, a3 >> 1, a3 - (a3 >> 1), v19, a5);
      }
    }
    else if (result != a2)
    {
      v10 = result + 8;
      if (result + 8 != a2)
      {
        v11 = 0;
        v12 = result;
        do
        {
          v13 = *(_QWORD *)v12;
          v12 = v10;
          v14 = *(_QWORD *)v10;
          v15 = *(float *)(v14 + 132);
          if (v15 < *(float *)(v13 + 132))
          {
            v16 = v11;
            while (1)
            {
              *(_QWORD *)&result[v16 + 8] = v13;
              if (!v16)
                break;
              v13 = *(_QWORD *)&result[v16 - 8];
              v16 -= 8;
              if (v15 >= *(float *)(v13 + 132))
              {
                v17 = &result[v16 + 8];
                goto LABEL_15;
              }
            }
            v17 = result;
LABEL_15:
            *(_QWORD *)v17 = v14;
          }
          v10 = v12 + 8;
          v11 += 8;
        }
        while (v12 + 8 != a2);
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetTimeSortedNodes(void)::$_0 &,std::__wrap_iter<kaldi::WordHypLattice::Node **>>(uint64_t result, _QWORD *a2, unint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v8;
  float v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;

  if (a3)
  {
    v4 = a4;
    v6 = result;
    if (a3 == 1)
    {
LABEL_8:
      *v4 = *(_QWORD *)v6;
      return result;
    }
    if (a3 == 2)
    {
      v8 = *(a2 - 1);
      v9 = *(float *)(v8 + 132);
      v10 = *(float *)(*(_QWORD *)result + 132);
      if (v9 >= v10)
        v8 = *(_QWORD *)result;
      *a4 = v8;
      v4 = a4 + 1;
      if (v9 >= v10)
        v6 = (uint64_t)(a2 - 1);
      goto LABEL_8;
    }
    if ((uint64_t)a3 > 8)
    {
      v20 = result + 8 * (a3 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetTimeSortedNodes(void)::$_0 &,std::__wrap_iter<kaldi::WordHypLattice::Node **>>(result, v20, a3 >> 1, a4, a3 >> 1);
      result = std::__stable_sort<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetTimeSortedNodes(void)::$_0 &,std::__wrap_iter<kaldi::WordHypLattice::Node **>>(v6 + 8 * (a3 >> 1), a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      v21 = (_QWORD *)(v6 + 8 * (a3 >> 1));
      while (v21 != a2)
      {
        v22 = v21;
        v23 = *v21;
        v24 = *(float *)(v23 + 132);
        v25 = *(_QWORD *)v6;
        v26 = *(float *)(*(_QWORD *)v6 + 132);
        if (v24 < v26)
          v25 = v23;
        v21 = &v22[v24 < v26];
        v6 += 8 * (v24 >= v26);
        *v4++ = v25;
        if (v6 == v20)
        {
          if (v21 != a2)
          {
            v27 = 0;
            v28 = &v22[v24 < v26];
            do
            {
              v4[v27] = v28[v27];
              ++v27;
            }
            while (&v28[v27] != a2);
          }
          return result;
        }
      }
      if (v6 != v20)
      {
        v29 = 0;
        do
        {
          v4[v29] = *(_QWORD *)(v6 + v29 * 8);
          ++v29;
        }
        while (v6 + v29 * 8 != v20);
      }
    }
    else if ((_QWORD *)result != a2)
    {
      v11 = result + 8;
      *a4 = *(_QWORD *)result;
      if ((_QWORD *)(result + 8) != a2)
      {
        v12 = 0;
        v13 = a4;
        v14 = a4;
        do
        {
          v16 = *v14++;
          v15 = v16;
          if (*(float *)(*(_QWORD *)v11 + 132) >= *(float *)(v16 + 132))
          {
            *v14 = *(_QWORD *)v11;
          }
          else
          {
            v13[1] = v15;
            v17 = a4;
            if (v13 != a4)
            {
              v18 = v12;
              while (1)
              {
                v17 = (uint64_t *)((char *)a4 + v18);
                v19 = *(uint64_t *)((char *)a4 + v18 - 8);
                if (*(float *)(*(_QWORD *)v11 + 132) >= *(float *)(v19 + 132))
                  break;
                *v17 = v19;
                v18 -= 8;
                if (!v18)
                {
                  v17 = a4;
                  break;
                }
              }
            }
            *v17 = *(_QWORD *)v11;
          }
          v11 += 8;
          v12 += 8;
          v13 = v14;
        }
        while ((_QWORD *)v11 != a2);
      }
    }
  }
  return result;
}

char *std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetTimeSortedNodes(void)::$_0 &,std::__wrap_iter<kaldi::WordHypLattice::Node **>>(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v9;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  float v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *__src;

  if (a5)
  {
    v9 = a5;
    v11 = result;
    while (v9 > a7 && a4 > a7)
    {
      if (!a4)
        return result;
      v12 = 0;
      v13 = -a4;
      while (1)
      {
        v14 = *(_QWORD *)&v11[v12];
        if (*(float *)(*(_QWORD *)a2 + 132) < *(float *)(v14 + 132))
          break;
        v12 += 8;
        if (__CFADD__(v13++, 1))
          return result;
      }
      v51 = a3;
      __src = a6;
      v50 = a7;
      if (-v13 >= v9)
      {
        if (v13 == -1)
        {
          *(_QWORD *)&v11[v12] = *(_QWORD *)a2;
          *(_QWORD *)a2 = v14;
          return result;
        }
        if (v13 <= 0)
          v26 = -v13;
        else
          v26 = 1 - v13;
        v25 = v26 >> 1;
        v19 = &v11[8 * (v26 >> 1) + v12];
        v18 = a2;
        if (a2 != a3)
        {
          v27 = (a3 - a2) >> 3;
          v18 = a2;
          do
          {
            v28 = v27 >> 1;
            v29 = &v18[8 * (v27 >> 1)];
            v31 = *(_QWORD *)v29;
            v30 = v29 + 8;
            v27 += ~(v27 >> 1);
            if (*(float *)(v31 + 132) < *(float *)(*(_QWORD *)v19 + 132))
              v18 = v30;
            else
              v27 = v28;
          }
          while (v27);
        }
        v17 = (v18 - a2) >> 3;
      }
      else
      {
        if (v9 >= 0)
          v16 = v9;
        else
          v16 = v9 + 1;
        v17 = v16 >> 1;
        v18 = &a2[8 * (v16 >> 1)];
        v19 = a2;
        if (a2 - v11 != v12)
        {
          v20 = (a2 - v11 - v12) >> 3;
          v19 = &v11[v12];
          do
          {
            v21 = v20 >> 1;
            v22 = &v19[8 * (v20 >> 1)];
            v24 = *(_QWORD *)v22;
            v23 = v22 + 8;
            v20 += ~(v20 >> 1);
            if (*(float *)(*(_QWORD *)v18 + 132) < *(float *)(v24 + 132))
              v20 = v21;
            else
              v19 = v23;
          }
          while (v20);
        }
        v25 = (v19 - v11 - v12) >> 3;
      }
      a4 = -(v25 + v13);
      v32 = v9 - v17;
      v33 = v25;
      v34 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<kaldi::WordHypLattice::Node **>,std::__wrap_iter<kaldi::WordHypLattice::Node **>>(v19, a2, v18);
      v35 = v33;
      v36 = v34;
      if (v35 + v17 >= v9 - (v35 + v17) - v13)
      {
        v39 = v35;
        result = (char *)std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetTimeSortedNodes(void)::$_0 &,std::__wrap_iter<kaldi::WordHypLattice::Node **>>(v34, v18, v51, a4, v32, __src, v50);
        a2 = v19;
        a7 = v50;
        v32 = v17;
        a6 = __src;
        a4 = v39;
        a3 = v36;
        v11 += v12;
      }
      else
      {
        v37 = v19;
        v38 = v17;
        a6 = __src;
        a7 = v50;
        result = (char *)std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetTimeSortedNodes(void)::$_0 &,std::__wrap_iter<kaldi::WordHypLattice::Node **>>(&v11[v12], v37, v34, v35, v38, __src, v50);
        v11 = v36;
        a2 = v18;
        a3 = v51;
      }
      v9 = v32;
      if (!v32)
        return result;
    }
    if (a4 <= v9)
    {
      if (v11 != a2)
      {
        v44 = 0;
        do
        {
          *(_QWORD *)&a6[v44] = *(_QWORD *)&v11[v44];
          v44 += 8;
        }
        while (&v11[v44] != a2);
        if (v44)
        {
          v45 = a6;
          while (a2 != a3)
          {
            v46 = *(_QWORD *)a2;
            v47 = *(float *)(*(_QWORD *)a2 + 132);
            v48 = *(float *)(*(_QWORD *)v45 + 132);
            if (v47 >= v48)
              v46 = *(_QWORD *)v45;
            a2 += 8 * (v47 < v48);
            v45 += 8 * (v47 >= v48);
            *(_QWORD *)v11 = v46;
            v11 += 8;
            if (&a6[v44] == v45)
              return result;
          }
          return (char *)memmove(v11, v45, a6 - v45 + v44);
        }
      }
    }
    else if (a3 != a2)
    {
      v40 = 0;
      do
      {
        *(_QWORD *)&a6[v40] = *(_QWORD *)&a2[v40];
        v40 += 8;
      }
      while (&a2[v40] != a3);
      if (v40)
      {
        v41 = &a6[v40];
        v42 = a3 - 8;
        while (a2 != v11)
        {
          v43 = *((_QWORD *)v41 - 1);
          if (*(float *)(v43 + 132) >= *(float *)(*((_QWORD *)a2 - 1) + 132))
          {
            v41 -= 8;
          }
          else
          {
            v43 = *((_QWORD *)a2 - 1);
            a2 -= 8;
          }
          *(_QWORD *)v42 = v43;
          v42 -= 8;
          if (v41 == a6)
            return result;
        }
        v49 = 0;
        do
        {
          *(_QWORD *)&v42[v49] = *(_QWORD *)&v41[v49 - 8];
          v49 -= 8;
        }
        while (&v41[v49] != a6);
      }
    }
  }
  return result;
}

char *std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<kaldi::WordHypLattice::Node **>,std::__wrap_iter<kaldi::WordHypLattice::Node **>>(char *__src, char *a2, char *a3)
{
  char *v4;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  size_t v9;

  v4 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 8 == a2)
    {
      v6 = *(_QWORD *)__src;
      v7 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      v4 = &__src[v7];
      *(_QWORD *)v4 = v6;
    }
    else if (a2 + 8 == a3)
    {
      v8 = *((_QWORD *)a3 - 1);
      v4 = __src + 8;
      v9 = a3 - 8 - __src;
      if (a3 - 8 != __src)
        memmove(__src + 8, __src, v9);
      *(_QWORD *)__src = v8;
    }
    else
    {
      return (char *)std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<kaldi::WordHypLattice::Node **>>(__src, a2, a3);
    }
  }
  return v4;
}

_QWORD *std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<kaldi::WordHypLattice::Node **>>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  char v19;
  uint64_t v20;

  v3 = a2 - a1;
  if (v3 == a3 - a2)
  {
    if (a1 != a2 && a2 != a3)
    {
      v4 = a1 + 1;
      v5 = a2 + 1;
      do
      {
        v6 = *(v4 - 1);
        *(v4 - 1) = *(v5 - 1);
        *(v5 - 1) = v6;
        if (v4 == a2)
          break;
        ++v4;
      }
      while (v5++ != a3);
    }
  }
  else
  {
    v8 = a3 - a2;
    v9 = a2 - a1;
    do
    {
      v10 = v9;
      v9 = v8;
      v8 = v10 % v8;
    }
    while (v8);
    if (v9)
    {
      v11 = &a1[v9];
      do
      {
        v13 = *--v11;
        v12 = v13;
        v14 = &v11[v3];
        v15 = v11;
        do
        {
          v16 = v14;
          *v15 = *v14;
          v17 = &v14[v3];
          v18 = __OFSUB__(v3, a3 - v14);
          v20 = v3 - (a3 - v14);
          v19 = (v20 < 0) ^ v18;
          v14 = &a1[v20];
          if (v19)
            v14 = v17;
          v15 = v16;
        }
        while (v14 != v11);
        *v16 = v12;
      }
      while (v11 != a1);
    }
    return &a1[a3 - a2];
  }
  return a2;
}

_QWORD *std::vector<kaldi::WordHypLattice::Node *>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1ADA18D64(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void TTokenizerParamManager::TTokenizerParamManager(TTokenizerParamManager *this, TLocaleInfo *a2)
{
  _QWORD *v3;
  uint64_t v4;
  const __int32 *v5;
  uint64_t v6;
  const __int32 *v7;
  __int128 v8;
  TParam *v9;
  std::vector<std::wstring> v10;
  std::vector<std::wstring> v11;
  void **v12[2];

  TParamManager::TParamManager(this, 0, a2);
  *v3 = &off_1E5D16F40;
  v9 = (TParam *)(v3 + 17);
  TBoolParam::TBoolParam((uint64_t)(v3 + 17), (uint64_t)"S", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)&dword_1AE14FEB0);
  TBoolParam::TBoolParam((uint64_t)this + 384, (uint64_t)"P", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)&dword_1AE14FEB0);
  TBoolParam::TBoolParam((uint64_t)this + 632, (uint64_t)"T", (uint64_t)"T", 0, 0, (uint64_t)"9", (uint64_t)&dword_1AE14FEB0);
  TBoolParam::TBoolParam((uint64_t)this + 880, (uint64_t)"A", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)&dword_1AE14FEB0);
  TBoolParam::TBoolParam((uint64_t)this + 1128, (uint64_t)"M", (uint64_t)"I", 0, 1, (uint64_t)"9", (uint64_t)&dword_1AE14FEB0);
  TBoolParam::TBoolParam((uint64_t)this + 1376, (uint64_t)"T", (uint64_t)"I", 0, 1, (uint64_t)"9", (uint64_t)&dword_1AE14FEB0);
  TBoolParam::TBoolParam((uint64_t)this + 1624, (uint64_t)"T", (uint64_t)"A", 0, 1, (uint64_t)"1", (uint64_t)&dword_1AE14FEB0);
  TBoolParam::TBoolParam((uint64_t)this + 1872, (uint64_t)"S", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)&dword_1AE14FEB0);
  TBoolParam::TBoolParam((uint64_t)this + 2120, (uint64_t)"M", (uint64_t)"I", 0, 1, (uint64_t)"1", (uint64_t)"1");
  ((void (*)(void))TStringParam::TStringParam)();
  ((void (*)(void))TStringParam::TStringParam)();
  TBoolParam::TBoolParam((uint64_t)this + 5120, (uint64_t)"D", (uint64_t)"I", 0, 1, (uint64_t)"9", (uint64_t)&dword_1AE14FEB0);
  TBoolParam::TBoolParam((uint64_t)this + 5368, (uint64_t)"D", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)&dword_1AE14FEB0);
  TBoolParam::TBoolParam((uint64_t)this + 5616, (uint64_t)"D", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)&dword_1AE14FEB0);
  TBoolParam::TBoolParam((uint64_t)this + 5864, (uint64_t)"D", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)&dword_1AE14FEB0);
  TBoolParam::TBoolParam((uint64_t)this + 6112, (uint64_t)"D", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)&dword_1AE14FEB0);
  ((void (*)(void))TStringParam::TStringParam)();
  TBoolParam::TBoolParam((uint64_t)this + 7736, (uint64_t)"C", (uint64_t)"R", 0, 0, (uint64_t)"9", (uint64_t)&dword_1AE14FEB0);
  ((void (*)(void))TStringParam::TStringParam)();
  ((void (*)(void))TStringParam::TStringParam)();
  ((void (*)(void))TStringParam::TStringParam)();
  TBoolParam::TBoolParam((uint64_t)this + 12112, (uint64_t)"U", (uint64_t)"I", 0, 1, (uint64_t)"9", (uint64_t)&dword_1AE14FEB0);
  TBoolParam::TBoolParam((uint64_t)this + 12360, (uint64_t)"R", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)&dword_1AE14FEB0);
  TBoolParam::TBoolParam((uint64_t)this + 12608, (uint64_t)"C", (uint64_t)"N", 0, 1, (uint64_t)"1", (uint64_t)&dword_1AE14FEB0);
  TBoolParam::TBoolParam((uint64_t)this + 12856, (uint64_t)"C", (uint64_t)"T", 0, 0, (uint64_t)"1", (uint64_t)&dword_1AE14FEB0);
  TBoolParam::TBoolParam((uint64_t)this + 13104, (uint64_t)"D", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)&dword_1AE14FEB0);
  TBoolParam::TBoolParam((uint64_t)this + 13352, (uint64_t)"H", (uint64_t)"S", 0, 0, (uint64_t)"1", (uint64_t)&dword_1AE14FEB0);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 13600), (uint64_t)"N", (uint64_t)"I", 0, 0, 1000, 30, (uint64_t)"9", (uint64_t)&dword_1AE14FEB0);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 13952), (uint64_t)"M", (uint64_t)"I", 0, 0, 1000, 5, (uint64_t)"9", (uint64_t)&dword_1AE14FEB0);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 14304), (uint64_t)"N", (uint64_t)"W", 0, 0, 4, 0, (uint64_t)"1", (uint64_t)&dword_1AE14FEB0);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 14656), (uint64_t)"P", (uint64_t)"T", 0, 0, 300, 0, (uint64_t)"1", (uint64_t)&dword_1AE14FEB0);
  TBoolParam::TBoolParam((uint64_t)this + 15008, (uint64_t)"P", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)"1");
  TBoolParam::TBoolParam((uint64_t)this + 15256, (uint64_t)"A", (uint64_t)"I", 0, 1, (uint64_t)"1", (uint64_t)&dword_1AE14FEB0);
  TBoolParam::TBoolParam((uint64_t)this + 15504, (uint64_t)"M", (uint64_t)"I", 0, 1, (uint64_t)"1", (uint64_t)"1");
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 15752), (uint64_t)"P", (uint64_t)"T", 0, -1, 100, 10, (uint64_t)"1", (uint64_t)&dword_1AE14FEB0);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 16104), (uint64_t)"C", (uint64_t)"P", 0, 1, 256, 4, (uint64_t)"1", (uint64_t)&dword_1AE14FEB0);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 16456), (uint64_t)"A", (uint64_t)"P", 0, 1, 256, 4, (uint64_t)"1", (uint64_t)&dword_1AE14FEB0);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 16808), (uint64_t)"P", (uint64_t)"S", 0, -1, 100, 20, (uint64_t)"1", (uint64_t)&dword_1AE14FEB0);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 17160), (uint64_t)"P", (uint64_t)"S", 0, -1, 100, 30, (uint64_t)"1", (uint64_t)&dword_1AE14FEB0);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 17512), (uint64_t)"P", (uint64_t)"S", 0, -1, 100, 40, (uint64_t)"1", (uint64_t)&dword_1AE14FEB0);
  TBoolParam::TBoolParam((uint64_t)this + 17864, (uint64_t)"O", (uint64_t)"O", 0, 0, (uint64_t)"1", (uint64_t)&dword_1AE14FEB0);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 18112), (uint64_t)"P", (uint64_t)"S", 0, -1, 100, -1, (uint64_t)"1", (uint64_t)&dword_1AE14FEB0);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 18464), (uint64_t)"P", (uint64_t)"S", 0, -1, 100, 50, (uint64_t)"1", (uint64_t)&dword_1AE14FEB0);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 18816), (uint64_t)"P", (uint64_t)"S", 0, -1, 100, 60, (uint64_t)"1", (uint64_t)&dword_1AE14FEB0);
  TBoolParam::TBoolParam((uint64_t)this + 19168, (uint64_t)"U", (uint64_t)"I", 0, 1, (uint64_t)"1", (uint64_t)"1");
  TBoolParam::TBoolParam((uint64_t)this + 19416, (uint64_t)"U", (uint64_t)"I", 0, 1, (uint64_t)"1", (uint64_t)"1");
  TBoolParam::TBoolParam((uint64_t)this + 19664, (uint64_t)"U", (uint64_t)"I", 0, 1, (uint64_t)"1", (uint64_t)"1");
  TBoolParam::TBoolParam((uint64_t)this + 19912, (uint64_t)"U", (uint64_t)"I", 0, 1, (uint64_t)"1", (uint64_t)"1");
  TBoolParam::TBoolParam((uint64_t)this + 20160, (uint64_t)"U", (uint64_t)"I", 0, 0, (uint64_t)"1", (uint64_t)"1");
  TBoolParam::TBoolParam((uint64_t)this + 20408, (uint64_t)"U", (uint64_t)"I", 0, 1, (uint64_t)"1", (uint64_t)"1");
  TBoolParam::TBoolParam((uint64_t)this + 20656, (uint64_t)"L", (uint64_t)"I", 0, 0, (uint64_t)"1", (uint64_t)&dword_1AE14FEB0);
  TBoolParam::TBoolParam((uint64_t)this + 20904, (uint64_t)"L", (uint64_t)"I", 0, 0, (uint64_t)"1", (uint64_t)&dword_1AE14FEB0);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 21152), (uint64_t)"M", (uint64_t)"M", 0, 1, 100, 10, (uint64_t)"1", (uint64_t)&dword_1AE14FEB0);
  TBoolParam::TBoolParam((uint64_t)this + 21504, (uint64_t)"L", (uint64_t)"L", 0, 0, (uint64_t)"9", (uint64_t)&dword_1AE14FEB0);
  TBoolParam::TBoolParam((uint64_t)this + 21752, (uint64_t)"L", (uint64_t)"L", 0, 0, (uint64_t)"9", (uint64_t)&dword_1AE14FEB0);
  TBoolParam::TBoolParam((uint64_t)this + 22000, (uint64_t)"D", (uint64_t)"D", 32, 1, (uint64_t)"9", (uint64_t)&dword_1AE14FEB0);
  TBoolParam::TBoolParam((uint64_t)this + 22248, (uint64_t)"D", (uint64_t)"D", 288, 1, (uint64_t)"1", (uint64_t)&dword_1AE14FEB0);
  ((void (*)(void))TStringParam::TStringParam)();
  TStringParam::TStringParam((char *)this + 23872, "D", "D", 288, &dword_1AE14FEB0, "1", &dword_1AE14FEB0);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 25248), (uint64_t)"D", (uint64_t)"D", 32, -1, 10, 5, (uint64_t)"9", (uint64_t)&dword_1AE14FEB0);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 25600), (uint64_t)"D", (uint64_t)"D", 288, -1, 10, 5, (uint64_t)"1", (uint64_t)&dword_1AE14FEB0);
  TStringParam::TStringParam((char *)this + 25952, "D");
  TStringParam::TStringParam((char *)this + 27328, "D");
  TFloatParam::TFloatParam((uint64_t)this + 28704, (uint64_t)"D", (uint64_t)"D", 32, (uint64_t)"9", (uint64_t)&dword_1AE14FEB0, 0.0);
  TFloatParam::TFloatParam((uint64_t)this + 29240, (uint64_t)"D", (uint64_t)"D", 288, (uint64_t)"1", (uint64_t)&dword_1AE14FEB0, 0.0);
  TParamManager::add(this, v9);
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 384));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 632));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 880));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 1128));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 1376));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 1624));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 1872));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 2120));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 2368));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 3744));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 5120));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 5368));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 5616));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 5864));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 6112));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 6360));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 7736));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 7984));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 9360));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 10736));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 12112));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 12360));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 12608));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 12856));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 13104));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 13352));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 13600));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 13952));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 14304));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 14656));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 15008));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 15256));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 15504));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 15752));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 16104));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 16456));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 16808));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 17160));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 17512));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 17864));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 18112));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 18464));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 18816));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 19168));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 19416));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 19664));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 19912));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 20160));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 20408));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 20656));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 20904));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 21152));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 21504));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 21752));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 22000));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 22248));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 22496));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 23872));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 25248));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 25600));
  MEMORY[0x1AF44C9E0]((char *)this + 25992, "D");
  MEMORY[0x1AF44C9E0]((char *)this + 26016, "9");
  MEMORY[0x1AF44C9E0]((char *)this + 26040, &dword_1AE14FEB0);
  *((_QWORD *)this + 3258) |= 0x20uLL;
  std::vector<std::wstring>::vector(&v11, 4uLL);
  std::vector<std::wstring>::vector(&v10, 4uLL);
  v4 = 0;
  v5 = (const __int32 *)"a";
  do
  {
    MEMORY[0x1AF44C9E0](&v11.__begin_[v4], v5);
    v5 += wcslen(v5) + 1;
    ++v4;
  }
  while (v4 != 4);
  TStringParam::setAllowables((uint64_t)this + 25952, (uint64_t)&v11, 0, 0);
  TStringParam::setOriginal((_QWORD *)this + 3244, 0, &dword_1AE14FEB0);
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 25952));
  v12[0] = (void **)&v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v12);
  v10.__begin_ = (std::vector<std::wstring>::pointer)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  MEMORY[0x1AF44C9E0]((char *)this + 27368, "D");
  MEMORY[0x1AF44C9E0]((char *)this + 27392, "1");
  MEMORY[0x1AF44C9E0]((char *)this + 27416, &dword_1AE14FEB0);
  *((_QWORD *)this + 3430) |= 0x120uLL;
  std::vector<std::wstring>::vector(&v11, 4uLL);
  std::vector<std::wstring>::vector(&v10, 4uLL);
  v6 = 0;
  v7 = (const __int32 *)"a";
  do
  {
    MEMORY[0x1AF44C9E0](&v11.__begin_[v6], v7);
    v7 += wcslen(v7) + 1;
    ++v6;
  }
  while (v6 != 4);
  TStringParam::setAllowables((uint64_t)this + 27328, (uint64_t)&v11, 0, 0);
  TStringParam::setOriginal((_QWORD *)this + 3416, 0, &dword_1AE14FEB0);
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 27328));
  v12[0] = (void **)&v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v12);
  v10.__begin_ = (std::vector<std::wstring>::pointer)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 28704));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 29240));
  *(_QWORD *)&v8 = -1;
  *((_QWORD *)&v8 + 1) = -1;
  *((_OWORD *)this + 1862) = v8;
  *((_OWORD *)this + 1861) = v8;
}

void sub_1ADA1A0C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, void **a20,void **a21,void **a22,void **a23,void **a24,void **a25,void **a26,void **a27,void **a28,void **a29,void **a30,void **a31,void **a32,void **a33,void **a34,void **a35,void **a36,void **a37,void **a38,void **a39,void **a40,void **a41,void **a42,void **a43,void **a44,void **a45,void **a46,void **a47,void **a48,void **a49,void **a50,void **a51,void **a52,void **a53,void **a54)
{
  TParamManager *v54;
  void **v55;
  void **v56;
  void **v57;
  void **v58;
  void **v59;
  void **v60;
  void **v61;
  uint64_t v62;

  *(_QWORD *)(v62 - 144) = v62 - 120;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v62 - 144));
  TParam::~TParam(v60);
  TParam::~TParam(v55);
  TStringParam::~TStringParam(v59);
  TStringParam::~TStringParam(v58);
  TParam::~TParam(v57);
  TParam::~TParam(v56);
  TStringParam::~TStringParam(v61);
  TStringParam::~TStringParam(a11);
  TBoolParam::~TBoolParam(a12);
  TBoolParam::~TBoolParam(a13);
  TBoolParam::~TBoolParam(a14);
  TBoolParam::~TBoolParam(a15);
  TParam::~TParam(a16);
  TBoolParam::~TBoolParam(a17);
  TBoolParam::~TBoolParam(a18);
  TBoolParam::~TBoolParam(a19);
  TBoolParam::~TBoolParam(a20);
  TBoolParam::~TBoolParam(a21);
  TBoolParam::~TBoolParam(a22);
  TBoolParam::~TBoolParam(a23);
  TBoolParam::~TBoolParam(a24);
  TParam::~TParam(a25);
  TParam::~TParam(a26);
  TParam::~TParam(a27);
  TBoolParam::~TBoolParam(a28);
  TParam::~TParam(a29);
  TParam::~TParam(a30);
  TParam::~TParam(a31);
  TParam::~TParam(a32);
  TParam::~TParam(a33);
  TParam::~TParam(a34);
  TBoolParam::~TBoolParam(a35);
  TBoolParam::~TBoolParam(a36);
  TBoolParam::~TBoolParam(a37);
  TParam::~TParam(a38);
  TParam::~TParam(a39);
  TParam::~TParam(a40);
  TParam::~TParam(a41);
  TBoolParam::~TBoolParam(a42);
  TBoolParam::~TBoolParam(a43);
  TBoolParam::~TBoolParam(a44);
  TBoolParam::~TBoolParam(a45);
  TBoolParam::~TBoolParam(a46);
  TBoolParam::~TBoolParam(a47);
  TStringParam::~TStringParam(a48);
  TStringParam::~TStringParam(a49);
  TStringParam::~TStringParam(a50);
  TBoolParam::~TBoolParam(a51);
  TStringParam::~TStringParam(a52);
  TBoolParam::~TBoolParam(a53);
  TBoolParam::~TBoolParam(a54);
  TBoolParam::~TBoolParam(*(void ***)(v62 - 256));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 248));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 240));
  TStringParam::~TStringParam(*(void ***)(v62 - 232));
  TStringParam::~TStringParam(*(void ***)(v62 - 224));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 216));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 208));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 200));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 192));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 184));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 176));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 168));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 160));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 152));
  TParamManager::~TParamManager(v54);
  _Unwind_Resume(a1);
}

void TParamManager::TParamManager(TParamManager *this, char a2, const TLocaleInfo *a3)
{
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E5D164F8;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 5) = (char *)this + 48;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 11) = (char *)this + 96;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 15) = a3;
  *((_BYTE *)this + 8) = a2;
  TParamManager::newConfig((uint64_t)this, (__int32 *)"H", (std::exception_vtbl *)0xFFFFFFFFFFFFFFFFLL);
  TParamManager::newConfig((uint64_t)this, (__int32 *)"R", 0);
  *((_QWORD *)this + 16) = -1;
}

void sub_1ADA1A5F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  _QWORD **v6;
  char **v7;
  void **v8;
  void *v10;
  va_list va;

  va_start(va, a2);
  v8 = v5;
  std::__tree<std::string>::destroy(v4, *v7);
  std::vector<std::pair<unsigned long,std::wstring>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<int>::destroy(v3, *v6);
  v10 = *v8;
  if (*v8)
  {
    *(_QWORD *)(v2 + 24) = v10;
    operator delete(v10);
  }
  _Unwind_Resume(a1);
}

void TStringParam::~TStringParam(void **this)
{
  uint64_t v2;
  void **v3;

  *this = &unk_1E5D16288;
  v3 = this + 169;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = this + 166;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = this + 163;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = 144;
  do
  {
    if (SHIBYTE(this[v2 + 18]) < 0)
      operator delete(this[v2 + 16]);
    v2 -= 3;
  }
  while (v2 * 8);
  TParam::~TParam(this);
}

{
  uint64_t v2;
  void **v3;

  *this = &unk_1E5D16288;
  v3 = this + 169;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = this + 166;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = this + 163;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = 144;
  do
  {
    if (SHIBYTE(this[v2 + 18]) < 0)
      operator delete(this[v2 + 16]);
    v2 -= 3;
  }
  while (v2 * 8);
  TParam::~TParam(this);
  MEMORY[0x1AF44D190]();
}

void TBoolParam::~TBoolParam(void **this)
{
  uint64_t v2;

  v2 = 0;
  *this = off_1E5D15920;
  do
  {
    if (SHIBYTE(this[v2 + 30]) < 0)
      operator delete(this[v2 + 28]);
    v2 -= 3;
  }
  while (v2 != -6);
  TParam::~TParam(this);
}

{
  uint64_t v2;

  v2 = 0;
  *this = off_1E5D15920;
  while (1)
  {
    if (SHIBYTE(this[v2 + 30]) < 0)
      operator delete(this[v2 + 28]);
    v2 -= 3;
    if (v2 == -6)
    {
      TParam::~TParam(this);
      JUMPOUT(0x1AF44D190);
    }
  }
}

void TTokenizerParamManager::notifyChange(TTokenizerParamManager *this, const TParam *a2)
{
  char *v3;
  unsigned int *v4;
  uint64_t v5;
  void **v6;
  void *__p[2];
  char v8;

  if ((TTokenizerParamManager *)((char *)this + 3744) == a2)
  {
    v3 = TStringParam::get(a2);
    if ((wcslen((const __int32 *)v3) & 1) != 0)
    {
      v4 = (unsigned int *)TStringParam::get(a2);
      loggableUnicode(v4, __p);
      if (v8 >= 0)
        v6 = __p;
      else
        v6 = (void **)__p[0];
      tknPrintf("Warning: CharacterMapping contains an odd number of characters: <%s>\n", v5, v6);
      if (v8 < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_1ADA1A7A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *TTokenizerParamManager::upgradeParam(_QWORD *this, const TParam *a2)
{
  _QWORD *v3;
  uint64_t ActiveConfigHandle;
  uint64_t ValidConfig;
  TParam *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  TParam *v14;
  uint64_t v15;
  TIntParam *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = this;
  if (this + 2396 == (_QWORD *)a2)
  {
    ActiveConfigHandle = TParam::getActiveConfigHandle(a2);
    ValidConfig = TParam::getValidConfig(a2, ActiveConfigHandle);
    v6 = (TParam *)(v3 + 2101);
    if (!*((_BYTE *)v3 + ValidConfig + 19320))
      goto LABEL_21;
    v7 = v3[16];
    v3[2115] &= ~(1 << (v7 + 33));
    return (_QWORD *)TParam::notifyChange((uint64_t)v6, v7);
  }
  if (this + 2427 == (_QWORD *)a2)
  {
    v8 = TParam::getActiveConfigHandle(a2);
    v9 = TParam::getValidConfig(a2, v8);
    v6 = (TParam *)(v3 + 2145);
    if (!*((_BYTE *)v3 + v9 + 19568))
      goto LABEL_21;
    v7 = v3[16];
    v3[2159] &= ~(1 << (v7 + 33));
    return (_QWORD *)TParam::notifyChange((uint64_t)v6, v7);
  }
  if (this + 2458 == (_QWORD *)a2)
  {
    v10 = TParam::getActiveConfigHandle(a2);
    v11 = TParam::getValidConfig(a2, v10);
    v6 = (TParam *)(v3 + 2189);
    if (!*((_BYTE *)v3 + v11 + 19816))
      goto LABEL_21;
    v7 = v3[16];
    v3[2203] &= ~(1 << (v7 + 33));
    return (_QWORD *)TParam::notifyChange((uint64_t)v6, v7);
  }
  if (this + 2520 == (_QWORD *)a2)
  {
    v12 = TParam::getActiveConfigHandle(a2);
    v13 = *((unsigned __int8 *)v3 + TParam::getValidConfig(a2, v12) + 20312);
    v14 = (TParam *)(v3 + 2264);
    v15 = TParam::getActiveConfigHandle(v14);
    v16 = v14;
    if (v13)
    {
      v17 = 45;
      return (_QWORD *)TIntParam::set(v16, v15, v17);
    }
LABEL_22:
    v17 = -1;
    return (_QWORD *)TIntParam::set(v16, v15, v17);
  }
  if (this + 2551 == (_QWORD *)a2)
  {
    v18 = TParam::getActiveConfigHandle(a2);
    v19 = TParam::getValidConfig(a2, v18);
    v6 = (TParam *)(v3 + 2308);
    if (*((_BYTE *)v3 + v19 + 20560))
    {
      v7 = v3[16];
      v3[2322] &= ~(1 << (v7 + 33));
      return (_QWORD *)TParam::notifyChange((uint64_t)v6, v7);
    }
LABEL_21:
    v15 = TParam::getActiveConfigHandle(v6);
    v16 = v6;
    goto LABEL_22;
  }
  if (this + 2489 == (_QWORD *)a2)
  {
    v20 = TParam::getActiveConfigHandle(a2);
    v21 = TParam::getValidConfig(a2, v20);
    v6 = (TParam *)(v3 + 2352);
    if (*((_BYTE *)v3 + v21 + 20064))
    {
      v7 = v3[16];
      v3[2366] &= ~(1 << (v7 + 33));
      return (_QWORD *)TParam::notifyChange((uint64_t)v6, v7);
    }
    goto LABEL_21;
  }
  return this;
}

uint64_t TTokenizerParamManager::initializeParamConfigs(TTokenizerParamManager *this)
{
  uint64_t Config;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;

  Config = TParamManager::getConfig((uint64_t)this, dword_1AE15B6BC);
  *((_QWORD *)this + 3723) = Config;
  if (Config == -1)
    *((_QWORD *)this + 3723) = TParamManager::newConfig((uint64_t)this, dword_1AE15B6BC, (std::exception_vtbl *)1);
  v3 = TParamManager::getConfig((uint64_t)this, dword_1AE15B700);
  *((_QWORD *)this + 3724) = v3;
  if (v3 == -1)
  {
    v4 = TParamManager::newConfig((uint64_t)this, dword_1AE15B700, (std::exception_vtbl *)1);
    *((_QWORD *)this + 3724) = v4;
    *((_BYTE *)this + v4 + 18016) = 1;
    *((_QWORD *)this + 2247) |= 1 << (v4 + 9);
    TParam::notifyChange((uint64_t)this + 17864, v4);
  }
  v5 = TParamManager::getConfig((uint64_t)this, dword_1AE15B724);
  *((_QWORD *)this + 3725) = v5;
  if (v5 == -1)
  {
    v6 = TParamManager::newConfig((uint64_t)this, dword_1AE15B724, (std::exception_vtbl *)1);
    *((_QWORD *)this + 3725) = v6;
    TIntParam::setOriginal((TTokenizerParamManager *)((char *)this + 14304), v6, 0);
    TIntParam::setOriginal((TTokenizerParamManager *)((char *)this + 17512), *((_QWORD *)this + 3725), -1);
    TIntParam::setOriginal((TTokenizerParamManager *)((char *)this + 18112), *((_QWORD *)this + 3725), -1);
    TIntParam::setOriginal((TTokenizerParamManager *)((char *)this + 18464), *((_QWORD *)this + 3725), -1);
    TIntParam::setOriginal((TTokenizerParamManager *)((char *)this + 18816), *((_QWORD *)this + 3725), -1);
  }
  result = TParamManager::getConfig((uint64_t)this, dword_1AE15B748);
  *((_QWORD *)this + 3722) = result;
  if (result == -1)
  {
    v8 = TParamManager::newConfig((uint64_t)this, dword_1AE15B748, *((std::exception_vtbl **)this + 3723));
    *((_QWORD *)this + 3722) = v8;
    *((_BYTE *)this + v8 + 784) = 1;
    *((_QWORD *)this + 93) |= 1 << (v8 + 9);
    return TParam::notifyChange((uint64_t)this + 632, v8);
  }
  return result;
}

uint64_t TParamManager::getConfig(uint64_t a1, __int32 *a2)
{
  uint64_t v3;
  _QWORD *v4;
  void *__p[2];
  char v7;

  v3 = a1 + 88;
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, a2);
  v4 = std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::find<std::wstring>(v3, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  if ((_QWORD *)(a1 + 96) == v4)
    return -1;
  else
    return v4[7];
}

void sub_1ADA1AC40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void TTokenizerParamManager::~TTokenizerParamManager(void **this)
{
  TTokenizerParamManager::~TTokenizerParamManager(this);
  JUMPOUT(0x1AF44D190);
}

{
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  uint64_t v31;
  uint64_t kk;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t mm;
  uint64_t nn;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void **v49;

  *this = &off_1E5D16F40;
  TParam::~TParam(this + 3655);
  TParam::~TParam(this + 3588);
  this[3416] = &unk_1E5D16288;
  v49 = this + 3585;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  v49 = this + 3582;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  v49 = this + 3579;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  for (i = 0; i != -144; i -= 3)
  {
    if (SHIBYTE(this[i + 3578]) < 0)
      operator delete(this[i + 3576]);
  }
  TParam::~TParam(this + 3416);
  this[3244] = &unk_1E5D16288;
  v49 = this + 3413;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  v49 = this + 3410;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  v49 = this + 3407;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  for (j = 0; j != -144; j -= 3)
  {
    if (SHIBYTE(this[j + 3406]) < 0)
      operator delete(this[j + 3404]);
  }
  TParam::~TParam(this + 3244);
  TParam::~TParam(this + 3200);
  TParam::~TParam(this + 3156);
  this[2984] = &unk_1E5D16288;
  v49 = this + 3153;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  v49 = this + 3150;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  v49 = this + 3147;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  for (k = 0; k != -144; k -= 3)
  {
    if (SHIBYTE(this[k + 3146]) < 0)
      operator delete(this[k + 3144]);
  }
  TParam::~TParam(this + 2984);
  this[2812] = &unk_1E5D16288;
  v49 = this + 2981;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  v49 = this + 2978;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  v49 = this + 2975;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  for (m = 0; m != -144; m -= 3)
  {
    if (SHIBYTE(this[m + 2974]) < 0)
      operator delete(this[m + 2972]);
  }
  TParam::~TParam(this + 2812);
  v6 = 0;
  this[2781] = off_1E5D15920;
  do
  {
    if (SHIBYTE(this[v6 + 2811]) < 0)
      operator delete(this[v6 + 2809]);
    v6 -= 3;
  }
  while (v6 != -6);
  TParam::~TParam(this + 2781);
  v7 = 0;
  this[2750] = off_1E5D15920;
  do
  {
    if (SHIBYTE(this[v7 + 2780]) < 0)
      operator delete(this[v7 + 2778]);
    v7 -= 3;
  }
  while (v7 != -6);
  TParam::~TParam(this + 2750);
  v8 = 0;
  this[2719] = off_1E5D15920;
  do
  {
    if (SHIBYTE(this[v8 + 2749]) < 0)
      operator delete(this[v8 + 2747]);
    v8 -= 3;
  }
  while (v8 != -6);
  TParam::~TParam(this + 2719);
  v9 = 0;
  this[2688] = off_1E5D15920;
  do
  {
    if (SHIBYTE(this[v9 + 2718]) < 0)
      operator delete(this[v9 + 2716]);
    v9 -= 3;
  }
  while (v9 != -6);
  TParam::~TParam(this + 2688);
  TParam::~TParam(this + 2644);
  v10 = 0;
  this[2613] = off_1E5D15920;
  do
  {
    if (SHIBYTE(this[v10 + 2643]) < 0)
      operator delete(this[v10 + 2641]);
    v10 -= 3;
  }
  while (v10 != -6);
  TParam::~TParam(this + 2613);
  v11 = 0;
  this[2582] = off_1E5D15920;
  do
  {
    if (SHIBYTE(this[v11 + 2612]) < 0)
      operator delete(this[v11 + 2610]);
    v11 -= 3;
  }
  while (v11 != -6);
  TParam::~TParam(this + 2582);
  v12 = 0;
  this[2551] = off_1E5D15920;
  do
  {
    if (SHIBYTE(this[v12 + 2581]) < 0)
      operator delete(this[v12 + 2579]);
    v12 -= 3;
  }
  while (v12 != -6);
  TParam::~TParam(this + 2551);
  v13 = 0;
  this[2520] = off_1E5D15920;
  do
  {
    if (SHIBYTE(this[v13 + 2550]) < 0)
      operator delete(this[v13 + 2548]);
    v13 -= 3;
  }
  while (v13 != -6);
  TParam::~TParam(this + 2520);
  v14 = 0;
  this[2489] = off_1E5D15920;
  do
  {
    if (SHIBYTE(this[v14 + 2519]) < 0)
      operator delete(this[v14 + 2517]);
    v14 -= 3;
  }
  while (v14 != -6);
  TParam::~TParam(this + 2489);
  v15 = 0;
  this[2458] = off_1E5D15920;
  do
  {
    if (SHIBYTE(this[v15 + 2488]) < 0)
      operator delete(this[v15 + 2486]);
    v15 -= 3;
  }
  while (v15 != -6);
  TParam::~TParam(this + 2458);
  v16 = 0;
  this[2427] = off_1E5D15920;
  do
  {
    if (SHIBYTE(this[v16 + 2457]) < 0)
      operator delete(this[v16 + 2455]);
    v16 -= 3;
  }
  while (v16 != -6);
  TParam::~TParam(this + 2427);
  v17 = 0;
  this[2396] = off_1E5D15920;
  do
  {
    if (SHIBYTE(this[v17 + 2426]) < 0)
      operator delete(this[v17 + 2424]);
    v17 -= 3;
  }
  while (v17 != -6);
  TParam::~TParam(this + 2396);
  TParam::~TParam(this + 2352);
  TParam::~TParam(this + 2308);
  TParam::~TParam(this + 2264);
  v18 = 0;
  this[2233] = off_1E5D15920;
  do
  {
    if (SHIBYTE(this[v18 + 2263]) < 0)
      operator delete(this[v18 + 2261]);
    v18 -= 3;
  }
  while (v18 != -6);
  TParam::~TParam(this + 2233);
  TParam::~TParam(this + 2189);
  TParam::~TParam(this + 2145);
  TParam::~TParam(this + 2101);
  TParam::~TParam(this + 2057);
  TParam::~TParam(this + 2013);
  TParam::~TParam(this + 1969);
  v19 = 0;
  this[1938] = off_1E5D15920;
  do
  {
    if (SHIBYTE(this[v19 + 1968]) < 0)
      operator delete(this[v19 + 1966]);
    v19 -= 3;
  }
  while (v19 != -6);
  TParam::~TParam(this + 1938);
  v20 = 0;
  this[1907] = off_1E5D15920;
  do
  {
    if (SHIBYTE(this[v20 + 1937]) < 0)
      operator delete(this[v20 + 1935]);
    v20 -= 3;
  }
  while (v20 != -6);
  TParam::~TParam(this + 1907);
  v21 = 0;
  this[1876] = off_1E5D15920;
  do
  {
    if (SHIBYTE(this[v21 + 1906]) < 0)
      operator delete(this[v21 + 1904]);
    v21 -= 3;
  }
  while (v21 != -6);
  TParam::~TParam(this + 1876);
  TParam::~TParam(this + 1832);
  TParam::~TParam(this + 1788);
  TParam::~TParam(this + 1744);
  TParam::~TParam(this + 1700);
  v22 = 0;
  this[1669] = off_1E5D15920;
  do
  {
    if (SHIBYTE(this[v22 + 1699]) < 0)
      operator delete(this[v22 + 1697]);
    v22 -= 3;
  }
  while (v22 != -6);
  TParam::~TParam(this + 1669);
  v23 = 0;
  this[1638] = off_1E5D15920;
  do
  {
    if (SHIBYTE(this[v23 + 1668]) < 0)
      operator delete(this[v23 + 1666]);
    v23 -= 3;
  }
  while (v23 != -6);
  TParam::~TParam(this + 1638);
  v24 = 0;
  this[1607] = off_1E5D15920;
  do
  {
    if (SHIBYTE(this[v24 + 1637]) < 0)
      operator delete(this[v24 + 1635]);
    v24 -= 3;
  }
  while (v24 != -6);
  TParam::~TParam(this + 1607);
  v25 = 0;
  this[1576] = off_1E5D15920;
  do
  {
    if (SHIBYTE(this[v25 + 1606]) < 0)
      operator delete(this[v25 + 1604]);
    v25 -= 3;
  }
  while (v25 != -6);
  TParam::~TParam(this + 1576);
  v26 = 0;
  this[1545] = off_1E5D15920;
  do
  {
    if (SHIBYTE(this[v26 + 1575]) < 0)
      operator delete(this[v26 + 1573]);
    v26 -= 3;
  }
  while (v26 != -6);
  TParam::~TParam(this + 1545);
  v27 = 0;
  this[1514] = off_1E5D15920;
  do
  {
    if (SHIBYTE(this[v27 + 1544]) < 0)
      operator delete(this[v27 + 1542]);
    v27 -= 3;
  }
  while (v27 != -6);
  TParam::~TParam(this + 1514);
  this[1342] = &unk_1E5D16288;
  v49 = this + 1511;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  v49 = this + 1508;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  v49 = this + 1505;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  for (n = 0; n != -144; n -= 3)
  {
    if (SHIBYTE(this[n + 1504]) < 0)
      operator delete(this[n + 1502]);
  }
  TParam::~TParam(this + 1342);
  this[1170] = &unk_1E5D16288;
  v49 = this + 1339;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  v49 = this + 1336;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  v49 = this + 1333;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  for (ii = 0; ii != -144; ii -= 3)
  {
    if (SHIBYTE(this[ii + 1332]) < 0)
      operator delete(this[ii + 1330]);
  }
  TParam::~TParam(this + 1170);
  this[998] = &unk_1E5D16288;
  v49 = this + 1167;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  v49 = this + 1164;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  v49 = this + 1161;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  for (jj = 0; jj != -144; jj -= 3)
  {
    if (SHIBYTE(this[jj + 1160]) < 0)
      operator delete(this[jj + 1158]);
  }
  TParam::~TParam(this + 998);
  v31 = 0;
  this[967] = off_1E5D15920;
  do
  {
    if (SHIBYTE(this[v31 + 997]) < 0)
      operator delete(this[v31 + 995]);
    v31 -= 3;
  }
  while (v31 != -6);
  TParam::~TParam(this + 967);
  this[795] = &unk_1E5D16288;
  v49 = this + 964;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  v49 = this + 961;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  v49 = this + 958;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  for (kk = 0; kk != -144; kk -= 3)
  {
    if (SHIBYTE(this[kk + 957]) < 0)
      operator delete(this[kk + 955]);
  }
  TParam::~TParam(this + 795);
  v33 = 0;
  this[764] = off_1E5D15920;
  do
  {
    if (SHIBYTE(this[v33 + 794]) < 0)
      operator delete(this[v33 + 792]);
    v33 -= 3;
  }
  while (v33 != -6);
  TParam::~TParam(this + 764);
  v34 = 0;
  this[733] = off_1E5D15920;
  do
  {
    if (SHIBYTE(this[v34 + 763]) < 0)
      operator delete(this[v34 + 761]);
    v34 -= 3;
  }
  while (v34 != -6);
  TParam::~TParam(this + 733);
  v35 = 0;
  this[702] = off_1E5D15920;
  do
  {
    if (SHIBYTE(this[v35 + 732]) < 0)
      operator delete(this[v35 + 730]);
    v35 -= 3;
  }
  while (v35 != -6);
  TParam::~TParam(this + 702);
  v36 = 0;
  this[671] = off_1E5D15920;
  do
  {
    if (SHIBYTE(this[v36 + 701]) < 0)
      operator delete(this[v36 + 699]);
    v36 -= 3;
  }
  while (v36 != -6);
  TParam::~TParam(this + 671);
  v37 = 0;
  this[640] = off_1E5D15920;
  do
  {
    if (SHIBYTE(this[v37 + 670]) < 0)
      operator delete(this[v37 + 668]);
    v37 -= 3;
  }
  while (v37 != -6);
  TParam::~TParam(this + 640);
  this[468] = &unk_1E5D16288;
  v49 = this + 637;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  v49 = this + 634;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  v49 = this + 631;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  for (mm = 0; mm != -144; mm -= 3)
  {
    if (SHIBYTE(this[mm + 630]) < 0)
      operator delete(this[mm + 628]);
  }
  TParam::~TParam(this + 468);
  this[296] = &unk_1E5D16288;
  v49 = this + 465;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  v49 = this + 462;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  v49 = this + 459;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  for (nn = 0; nn != -144; nn -= 3)
  {
    if (SHIBYTE(this[nn + 458]) < 0)
      operator delete(this[nn + 456]);
  }
  TParam::~TParam(this + 296);
  v40 = 0;
  this[265] = off_1E5D15920;
  do
  {
    if (SHIBYTE(this[v40 + 295]) < 0)
      operator delete(this[v40 + 293]);
    v40 -= 3;
  }
  while (v40 != -6);
  TParam::~TParam(this + 265);
  v41 = 0;
  this[234] = off_1E5D15920;
  do
  {
    if (SHIBYTE(this[v41 + 264]) < 0)
      operator delete(this[v41 + 262]);
    v41 -= 3;
  }
  while (v41 != -6);
  TParam::~TParam(this + 234);
  v42 = 0;
  this[203] = off_1E5D15920;
  do
  {
    if (SHIBYTE(this[v42 + 233]) < 0)
      operator delete(this[v42 + 231]);
    v42 -= 3;
  }
  while (v42 != -6);
  TParam::~TParam(this + 203);
  v43 = 0;
  this[172] = off_1E5D15920;
  do
  {
    if (SHIBYTE(this[v43 + 202]) < 0)
      operator delete(this[v43 + 200]);
    v43 -= 3;
  }
  while (v43 != -6);
  TParam::~TParam(this + 172);
  v44 = 0;
  this[141] = off_1E5D15920;
  do
  {
    if (SHIBYTE(this[v44 + 171]) < 0)
      operator delete(this[v44 + 169]);
    v44 -= 3;
  }
  while (v44 != -6);
  TParam::~TParam(this + 141);
  v45 = 0;
  this[110] = off_1E5D15920;
  do
  {
    if (SHIBYTE(this[v45 + 140]) < 0)
      operator delete(this[v45 + 138]);
    v45 -= 3;
  }
  while (v45 != -6);
  TParam::~TParam(this + 110);
  v46 = 0;
  this[79] = off_1E5D15920;
  do
  {
    if (SHIBYTE(this[v46 + 109]) < 0)
      operator delete(this[v46 + 107]);
    v46 -= 3;
  }
  while (v46 != -6);
  TParam::~TParam(this + 79);
  v47 = 0;
  this[48] = off_1E5D15920;
  do
  {
    if (SHIBYTE(this[v47 + 78]) < 0)
      operator delete(this[v47 + 76]);
    v47 -= 3;
  }
  while (v47 != -6);
  TParam::~TParam(this + 48);
  v48 = 0;
  this[17] = off_1E5D15920;
  do
  {
    if (SHIBYTE(this[v48 + 47]) < 0)
      operator delete(this[v48 + 45]);
    v48 -= 3;
  }
  while (v48 != -6);
  TParam::~TParam(this + 17);
  TParamManager::~TParamManager((TParamManager *)this);
}

void std::vector<std::pair<unsigned long,std::wstring>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<unsigned long,std::wstring>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::pair<unsigned long,std::wstring>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

uint64_t TBoolParam::TBoolParam(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;

  v9 = TParam::TParam(a1, 0, a2, a3, a4, a6, a7);
  *(_QWORD *)v9 = off_1E5D15920;
  *(_OWORD *)(v9 + 200) = 0u;
  *(_OWORD *)(v9 + 216) = 0u;
  *(_OWORD *)(v9 + 232) = 0u;
  *(_BYTE *)(v9 + 152) = a5;
  *(_QWORD *)(v9 + 112) |= 0x200uLL;
  TParam::notifyChange(v9, 0);
  return a1;
}

void sub_1ADA1AD88(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v3;

  v3 = 0;
  while (1)
  {
    if (SHIBYTE(v1[v3 + 30]) < 0)
      operator delete(v1[v3 + 28]);
    v3 -= 3;
    if (v3 == -6)
    {
      TParam::~TParam(v1);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t TFloatParam::TFloatParam(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v9;

  v9 = TParam::TParam(a1, 3, a2, a3, a4, a5, a6);
  *(_QWORD *)v9 = &off_1E5D15B98;
  *(double *)(v9 + 152) = a7;
  *(_QWORD *)(v9 + 112) |= 0x200uLL;
  TParam::notifyChange(v9, 0);
  return a1;
}

void sub_1ADA1AE30(_Unwind_Exception *a1)
{
  void **v1;

  TParam::~TParam(v1);
  _Unwind_Resume(a1);
}

uint64_t TStringParam::getValue(TParam *a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  int *v5;

  v4 = (char *)a1 + 24 * TParam::getValidConfig(a1, a2);
  v5 = (int *)(v4 + 152);
  if (v4[175] < 0)
    v5 = *(int **)v5;
  return TBuffer<wchar_t>::assign(a3, v5);
}

uint64_t TStringParam::getValueOriginal(TParam *a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  int *v5;

  v4 = (char *)a1 + 24 * TParam::getValidOriginalConfig(a1, a2);
  v5 = (int *)(v4 + 152);
  if (v4[175] < 0)
    v5 = *(int **)v5;
  return TBuffer<wchar_t>::assign(a3, v5);
}

_QWORD *std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::find<std::wstring>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = (_QWORD *)(a1 + 8);
  do
  {
    v7 = std::less<std::wstring>::operator()[abi:ne180100](v5, (uint64_t)(v3 + 4), a2);
    v8 = v3 + 1;
    if (!v7)
    {
      v8 = v3;
      v6 = v3;
    }
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::wstring>::operator()[abi:ne180100](v5, a2, (uint64_t)(v6 + 4)))
    return v2;
  return v6;
}

uint64_t std::less<std::wstring>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  size_t v4;
  int v5;
  size_t v6;
  size_t v7;
  const __int32 *v8;
  const __int32 *v9;
  unsigned int v10;

  v3 = *(char *)(a3 + 23);
  if (v3 >= 0)
    v4 = *(unsigned __int8 *)(a3 + 23);
  else
    v4 = *(_QWORD *)(a3 + 8);
  v5 = *(char *)(a2 + 23);
  if (v5 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  if (v4 >= v6)
    v7 = v6;
  else
    v7 = v4;
  if (!v7
    || (v5 >= 0 ? (v8 = (const __int32 *)a2) : (v8 = *(const __int32 **)a2),
        v3 >= 0 ? (v9 = (const __int32 *)a3) : (v9 = *(const __int32 **)a3),
        (v10 = wmemcmp(v8, v9, v7)) == 0))
  {
    if (v6 < v4)
      v10 = -1;
    else
      v10 = v4 < v6;
  }
  return v10 >> 31;
}

std::vector<std::wstring> *__cdecl std::vector<std::wstring>::vector(std::vector<std::wstring> *this, std::vector<std::wstring>::size_type __n)
{
  std::vector<std::wstring>::pointer end;
  size_t v5;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v5 = 24 * ((24 * __n - 24) / 0x18) + 24;
    bzero(end, v5);
    this->__end_ = (std::vector<std::wstring>::pointer)((char *)end + v5);
  }
  return this;
}

void sub_1ADA1C084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::StandardErrorLogger(uint64_t a1)
{
  const char *v1;

  if (*(char *)(a1 + 23) >= 0)
    v1 = (const char *)a1;
  else
    v1 = *(const char **)a1;
  return fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s\n", v1);
}

uint64_t kaldi::StandardErrorVLogger(uint64_t a1)
{
  const char *v1;

  if (*(char *)(a1 + 23) >= 0)
    v1 = (const char *)a1;
  else
    v1 = *(const char **)a1;
  return fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s\n", v1);
}

void kaldi::KaldiGetStackTrace(std::string *a1@<X8>)
{
  signed int v3;
  char **v4;
  char **v5;
  uint64_t v6;
  char **v7;
  uint64_t i;
  unint64_t v9;
  _OWORD v10[25];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  memset(v10, 0, sizeof(v10));
  v3 = backtrace((void **)v10, 50);
  v4 = backtrace_symbols((void *const *)v10, v3);
  v5 = v4;
  v6 = v3;
  if (v3 >= 0x33)
  {
    for (i = 0; i != 25; ++i)
    {
      kaldi::KALDI_APPEND_POSSIBLY_DEMANGLED_STRING(a1, v5[i]);
      std::string::append(a1, "\n");
    }
    std::string::append(a1, ".\n.\n.\n");
    v9 = v3 - 25;
    do
    {
      kaldi::KALDI_APPEND_POSSIBLY_DEMANGLED_STRING(a1, v5[v9]);
      std::string::append(a1, "\n");
      ++v9;
    }
    while (v9 < v3);
  }
  else if (v3)
  {
    v7 = v4;
    do
    {
      kaldi::KALDI_APPEND_POSSIBLY_DEMANGLED_STRING(a1, *v7);
      std::string::append(a1, "\n");
      ++v7;
      --v6;
    }
    while (v6);
  }
  free(v5);
}

void sub_1ADA1C2C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void kaldi::KALDI_APPEND_POSSIBLY_DEMANGLED_STRING(std::string *a1, char *__s)
{
  char *v4;
  char *v5;
  char *v6;
  void **v7;
  char *v8;
  void *__p[2];
  char v10;
  int status;

  v4 = strchr(__s, 40);
  if (v4 && (v5 = v4, (v6 = strchr(v4, 43)) != 0))
  {
    status = 0;
    std::string::basic_string[abi:ne180100](__p, v5 + 1, v6 - (v5 + 1));
    if (v10 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    v8 = __cxa_demangle((const char *)v7, 0, 0, &status);
    if (v8)
    {
      std::string::append(a1, v8);
      free(v8);
    }
    else
    {
      std::string::append(a1, __s);
    }
    if (v10 < 0)
      operator delete(__p[0]);
  }
  else
  {
    std::string::append(a1, __s);
  }
}

void sub_1ADA1C3D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::KaldiWarnMessage::KaldiWarnMessage(kaldi::KaldiWarnMessage *this)
{
  uint64_t v1;
  uint64_t result;

  result = std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)this);
  *(_QWORD *)(result + 264) = v1;
  return result;
}

void kaldi::KaldiWarnMessage::~KaldiWarnMessage(kaldi::KaldiWarnMessage *this)
{
  uint64_t (*v2)();
  uint64_t v3;
  uint64_t v4;
  std::runtime_error *exception;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  std::string::size_type size;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string v14;
  std::string v15;
  std::string v16;
  std::string v17;
  std::string v18;

  v2 = kaldi::KaldiWarnMessage::g_logger;
  std::stringbuf::str();
  ((void (*)(std::string *, _QWORD))v2)(&v18, *((_QWORD *)this + 33));
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (getenv("QSR_CRASH_ON_WARN"))
  {
    if (std::uncaught_exception())
      abort();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    v6 = std::string::append(&v15, "\n\n[stack trace: ]\n");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v16.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    kaldi::KaldiGetStackTrace(&v14);
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &v14;
    else
      v8 = (std::string *)v14.__r_.__value_.__r.__words[0];
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    else
      size = v14.__r_.__value_.__l.__size_;
    v10 = std::string::append(&v16, (const std::string::value_type *)v8, size);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v17, "\n");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v18);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v3 = MEMORY[0x1E0DE4F60];
  v4 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)this = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = *(_QWORD *)(v3 + 24);
  *((_QWORD *)this + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF44D094]((char *)this + 112);
}

void sub_1ADA1C5C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  void *v34;
  int v35;
  uint64_t v36;

  if (*(char *)(v36 - 41) < 0)
    operator delete(*(void **)(v36 - 64));
  if (a33 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v35 & 1) == 0)
    {
LABEL_14:
      std::ostringstream::~ostringstream(v33);
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v34);
  goto LABEL_14;
}

uint64_t kaldi::KaldiVlogMessage::KaldiVlogMessage(kaldi::KaldiVlogMessage *this, int a2)
{
  uint64_t v2;
  uint64_t result;

  result = std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)this);
  *(_DWORD *)(result + 264) = a2;
  *(_QWORD *)(result + 272) = v2;
  return result;
}

void kaldi::KaldiErrorMessage::~KaldiErrorMessage(kaldi::KaldiErrorMessage *this)
{
  uint64_t (*v2)();
  std::runtime_error *exception;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  std::string::size_type size;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string v12;
  std::string v13;
  std::string v14;
  std::string v15;
  std::string v16;

  v2 = kaldi::KaldiErrorMessage::g_logger;
  std::stringbuf::str();
  ((void (*)(std::string *, _QWORD))v2)(&v16, *((_QWORD *)this + 33));
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (std::uncaught_exception())
    abort();
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::stringbuf::str();
  v4 = std::string::append(&v13, "\n\n[stack trace: ]\n");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  kaldi::KaldiGetStackTrace(&v12);
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v12;
  else
    v6 = (std::string *)v12.__r_.__value_.__r.__words[0];
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
  else
    size = v12.__r_.__value_.__l.__size_;
  v8 = std::string::append(&v14, (const std::string::value_type *)v6, size);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v15, "\n");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::runtime_error::runtime_error(exception, &v16);
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage(this);
}

void sub_1ADA1C814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  void *v34;
  int v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;

  if (*(char *)(v36 - 57) < 0)
    operator delete(*(void **)(v36 - 80));
  if (a33 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v35 & 1) == 0)
    {
LABEL_14:
      v38 = MEMORY[0x1E0DE4F60];
      v39 = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)v33 = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)(v33 + *(_QWORD *)(v39 - 24)) = *(_QWORD *)(v38 + 24);
      *(_QWORD *)(v33 + 8) = MEMORY[0x1E0DE4FB8] + 16;
      if (*(char *)(v33 + 95) < 0)
        operator delete(*(void **)(v33 + 72));
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1AF44D094](v33 + 112);
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v34);
  goto LABEL_14;
}

uint64_t quasar::NNLmConfig::NNLmConfig(uint64_t a1, std::string *a2, uint64_t a3)
{
  void **v6;
  uint64_t v7;
  size_t v8;
  void **v9;
  const void *v10;
  kaldi::quasar::Vocab *v11;
  std::string *v12;
  __int128 v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type v17;
  char v18;
  std::string::size_type v19;
  void **v20;
  int64_t size;
  std::string *v22;
  char *v23;
  std::string *v24;
  char *v25;
  unint64_t v26;
  std::string *v27;
  __int128 v28;
  int v29;
  const std::string::value_type *v30;
  std::string::size_type v31;
  std::string *v32;
  std::string::size_type v33;
  char v34;
  std::string::size_type v35;
  void *v36;
  std::string *v37;
  __int128 v38;
  int v39;
  const std::string::value_type *v40;
  std::string::size_type v41;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  __int128 v51;
  int v52;
  const std::string::value_type *v53;
  std::string::size_type v54;
  std::string *v55;
  std::string::size_type v56;
  char v57;
  uint64_t v58;
  _QWORD *v60;
  std::string *v61;
  std::string::size_type v62;
  std::string v63;
  std::string v64;
  std::string v65;
  std::string v66;
  void *__p[2];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  std::string v84;
  std::string v85;
  std::string::value_type *v86;
  std::string::size_type v87;
  uint64_t v88;
  std::string v89;
  _QWORD v90[2];
  std::string v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = 0x3F80000000000000;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)a1 = off_1E5D34320;
  *(_OWORD *)(a1 + 120) = 0u;
  v6 = (void **)(a1 + 120);
  *(_QWORD *)(a1 + 216) = 0;
  v7 = a1 + 216;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 184) = 0;
  v86 = 0;
  v87 = 0;
  v88 = 0;
  memset(&v85, 0, sizeof(v85));
  quasar::LmBuildConfig::readSysConfig(a1, a2, a3);
  if (*(char *)(a3 + 23) >= 0)
    v8 = *(unsigned __int8 *)(a3 + 23);
  else
    v8 = *(_QWORD *)(a3 + 8);
  v9 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v8 + 1);
  if (SBYTE7(v68) < 0)
    v9 = (void **)__p[0];
  if (v8)
  {
    if (*(char *)(a3 + 23) >= 0)
      v10 = (const void *)a3;
    else
      v10 = *(const void **)a3;
    memmove(v9, v10, v8);
  }
  *(_WORD *)((char *)v9 + v8) = 46;
  quasar::SystemConfig::setPrefix(a2, (const std::string *)__p);
  if (SBYTE7(v68) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "nnlm-trainer-config");
  std::string::basic_string[abi:ne180100]<0>(&v84, "nnlm trainer config path no default value");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)&v86, (uint64_t)&v84, 1, 189, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
  if (SBYTE7(v68) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "nnlm-loading-files");
  std::string::basic_string[abi:ne180100]<0>(&v84, "nnlm espresso inference network used for evaluation");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)&v85, (uint64_t)&v84, 1, 189, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
  if (SBYTE7(v68) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "wordmap-file-extension");
  std::string::basic_string[abi:ne180100]<0>(&v84, "The file extension that is used for workmap file.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, a1 + 168, (uint64_t)&v84, 1, 189, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
  if (SBYTE7(v68) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "enable-wordmap");
  std::string::basic_string[abi:ne180100]<0>(&v84, "The indicator on whether enable wordmap at inference time.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, a1 + 192, (uint64_t)&v84, 1, 189, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
  if (SBYTE7(v68) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "norm-factor");
  std::string::basic_string[abi:ne180100]<0>(&v84, "norm factor used at inference time");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, a1 + 196, (uint64_t)&v84, 1, 189, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
  if (SBYTE7(v68) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "max-context-size");
  std::string::basic_string[abi:ne180100]<0>(&v84, "maximum context size used by nnlm at inference time");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, a1 + 200, (uint64_t)&v84, 1, 189, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
  if (SBYTE7(v68) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "num-epochs");
  std::string::basic_string[abi:ne180100]<0>(&v84, "number of epochs that training pipeline goes over the given data");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, a1 + 204, (uint64_t)&v84, 1, 189, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
  if (SBYTE7(v68) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "evaluate-after-each-epoch");
  std::string::basic_string[abi:ne180100]<0>(&v84, "the flag that indicates whether enable evaluation after each epochs");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, a1 + 208, (uint64_t)&v84, 1, 189, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
  if (SBYTE7(v68) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "nnlm-trainer-overwrite-config");
  std::string::basic_string[abi:ne180100]<0>(&v84, "optional field that can overwrite existing default trainer config");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, v7, (uint64_t)&v84, 0, 189, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
  if (SBYTE7(v68) < 0)
    operator delete(__p[0]);
  quasar::SystemConfig::readPtree((uint64_t)a2, a3, 0, 0);
  v11 = (kaldi::quasar::Vocab *)&a2[1].__r_.__value_.__r.__words[2];
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)&a2[1].__r_.__value_.__r.__words[2], &v84);
  v12 = std::string::append(&v84, "/");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  *(_QWORD *)&v68 = *((_QWORD *)&v12->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (v88 >= 0)
    v14 = (const std::string::value_type *)&v86;
  else
    v14 = v86;
  if (v88 >= 0)
    v15 = HIBYTE(v88);
  else
    v15 = v87;
  v16 = std::string::append((std::string *)__p, v14, v15);
  v17 = v16->__r_.__value_.__r.__words[0];
  v91.__r_.__value_.__r.__words[0] = v16->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v91.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
  v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 143) < 0)
    operator delete(*v6);
  v19 = v91.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a1 + 120) = v17;
  *(_QWORD *)(a1 + 128) = v19;
  *(_QWORD *)(a1 + 135) = *(std::string::size_type *)((char *)v91.__r_.__value_.__r.__words + 7);
  *(_BYTE *)(a1 + 143) = v18;
  if (SBYTE7(v68) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
  v20 = (void **)(a1 + 144);
  MEMORY[0x1AF44C914](a1 + 144, "");
  size = HIBYTE(v85.__r_.__value_.__r.__words[2]);
  if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v22 = &v85;
  }
  else
  {
    size = v85.__r_.__value_.__l.__size_;
    v22 = (std::string *)v85.__r_.__value_.__r.__words[0];
  }
  if (size >= 2)
  {
    v23 = (char *)v22 + size;
    v24 = v22;
    do
    {
      v25 = (char *)memchr(v24, 46, size - 1);
      if (!v25)
        break;
      if (*(_WORD *)v25 == 11822)
      {
        if (v25 != v23 && v25 - (char *)v22 != -1)
        {
          v82 = 0u;
          v83 = 0u;
          v80 = 0u;
          v81 = 0u;
          v78 = 0u;
          v79 = 0u;
          v76 = 0u;
          v77 = 0u;
          v74 = 0u;
          v75 = 0u;
          v72 = 0u;
          v73 = 0u;
          v70 = 0u;
          v71 = 0u;
          v68 = 0u;
          v69 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"The nnet loading path contains dangerous components.", 52);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
        }
        break;
      }
      v24 = (std::string *)(v25 + 1);
      size = v23 - (char *)v24;
    }
    while (v23 - (char *)v24 >= 2);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, ":");
  quasar::splitAndTrimNoEmpty(&v85, (char *)__p, &v84);
  if (SBYTE7(v68) < 0)
    operator delete(__p[0]);
  v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v84.__r_.__value_.__l.__size_ - v84.__r_.__value_.__r.__words[0]) >> 3);
  if (v26 == 2)
  {
    kaldi::quasar::Vocab::OOvWord(v11, &v64);
    v37 = std::string::append(&v64, "/");
    v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    v39 = *(char *)(v84.__r_.__value_.__r.__words[0] + 23);
    if (v39 >= 0)
      v40 = (const std::string::value_type *)v84.__r_.__value_.__r.__words[0];
    else
      v40 = *(const std::string::value_type **)v84.__r_.__value_.__l.__data_;
    if (v39 >= 0)
      v41 = *(unsigned __int8 *)(v84.__r_.__value_.__r.__words[0] + 23);
    else
      v41 = *(_QWORD *)(v84.__r_.__value_.__r.__words[0] + 8);
    v42 = std::string::append(&v65, v40, v41);
    v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v66.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    v44 = std::string::append(&v66, ":");
    v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v89.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    kaldi::quasar::Vocab::OOvWord(v11, &v63);
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v46 = &v63;
    else
      v46 = (std::string *)v63.__r_.__value_.__r.__words[0];
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v47 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
    else
      v47 = v63.__r_.__value_.__l.__size_;
    v48 = std::string::append(&v89, (const std::string::value_type *)v46, v47);
    v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    v91.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    v50 = std::string::append(&v91, "/");
    v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    *(_QWORD *)&v68 = *((_QWORD *)&v50->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    v52 = *(char *)(v84.__r_.__value_.__r.__words[0] + 47);
    if (v52 >= 0)
      v53 = (const std::string::value_type *)(v84.__r_.__value_.__r.__words[0] + 24);
    else
      v53 = *(const std::string::value_type **)(v84.__r_.__value_.__r.__words[0] + 24);
    if (v52 >= 0)
      v54 = *(unsigned __int8 *)(v84.__r_.__value_.__r.__words[0] + 47);
    else
      v54 = *(_QWORD *)(v84.__r_.__value_.__r.__words[0] + 32);
    v55 = std::string::append((std::string *)__p, v53, v54);
    v56 = v55->__r_.__value_.__r.__words[0];
    v90[0] = v55->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v90 + 7) = *(std::string::size_type *)((char *)&v55->__r_.__value_.__r.__words[1] + 7);
    v57 = HIBYTE(v55->__r_.__value_.__r.__words[2]);
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a1 + 167) < 0)
      operator delete(*v20);
    v58 = v90[0];
    *(_QWORD *)(a1 + 144) = v56;
    *(_QWORD *)(a1 + 152) = v58;
    *(_QWORD *)(a1 + 159) = *(_QWORD *)((char *)v90 + 7);
    *(_BYTE *)(a1 + 167) = v57;
    if (SBYTE7(v68) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v91.__r_.__value_.__l.__data_);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v63.__r_.__value_.__l.__data_);
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v89.__r_.__value_.__l.__data_);
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v66.__r_.__value_.__l.__data_);
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    {
      v36 = (void *)v64.__r_.__value_.__r.__words[0];
      goto LABEL_122;
    }
  }
  else
  {
    if (v26 != 1)
    {
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Malformed LM neural network file name, fileBasename=", 52);
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v61 = &v85;
      else
        v61 = (std::string *)v85.__r_.__value_.__r.__words[0];
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v62 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
      else
        v62 = v85.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)v61, v62);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    kaldi::quasar::Vocab::OOvWord(v11, &v91);
    v27 = std::string::append(&v91, "/");
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    *(_QWORD *)&v68 = *((_QWORD *)&v27->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    v29 = *(char *)(v84.__r_.__value_.__r.__words[0] + 23);
    if (v29 >= 0)
      v30 = (const std::string::value_type *)v84.__r_.__value_.__r.__words[0];
    else
      v30 = *(const std::string::value_type **)v84.__r_.__value_.__l.__data_;
    if (v29 >= 0)
      v31 = *(unsigned __int8 *)(v84.__r_.__value_.__r.__words[0] + 23);
    else
      v31 = *(_QWORD *)(v84.__r_.__value_.__r.__words[0] + 8);
    v32 = std::string::append((std::string *)__p, v30, v31);
    v33 = v32->__r_.__value_.__r.__words[0];
    v89.__r_.__value_.__r.__words[0] = v32->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v89.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v32->__r_.__value_.__r.__words[1] + 7);
    v34 = HIBYTE(v32->__r_.__value_.__r.__words[2]);
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a1 + 167) < 0)
      operator delete(*v20);
    v35 = v89.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a1 + 144) = v33;
    *(_QWORD *)(a1 + 152) = v35;
    *(_QWORD *)(a1 + 159) = *(std::string::size_type *)((char *)v89.__r_.__value_.__r.__words + 7);
    *(_BYTE *)(a1 + 167) = v34;
    if (SBYTE7(v68) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    {
      v36 = (void *)v91.__r_.__value_.__r.__words[0];
LABEL_122:
      operator delete(v36);
    }
  }
  __p[0] = &v84;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
  if (SHIBYTE(v88) < 0)
    operator delete(v86);
  return a1;
}

void sub_1ADA1D3D4(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADA1D5E4);
}

void sub_1ADA1D3E4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  __p = (void *)(v42 - 232);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  JUMPOUT(0x1ADA1D5B4);
}

void sub_1ADA1D4D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    operator delete(__p);
  JUMPOUT(0x1ADA1D5B4);
}

void sub_1ADA1D5B0(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;
  uint64_t v3;

  if (*(char *)(v3 - 185) < 0)
    operator delete(*(void **)(v3 - 208));
  if (*(char *)(v3 - 161) < 0)
    operator delete(*(void **)(v3 - 184));
  quasar::NNLmConfig::NNLmConfigParameters::~NNLmConfigParameters(v2);
  quasar::LmBuildConfig::~LmBuildConfig(v1);
  _Unwind_Resume(a1);
}

void quasar::NNLmConfig::NNLmConfigParameters::~NNLmConfigParameters(void **this)
{
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t quasar::NNLmConfig::getType(quasar::NNLmConfig *this)
{
  return 5;
}

uint64_t quasar::NNLmModel::NNLmModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  quasar::LmModel2 *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24[3];
  void *__p[2];
  char v26;
  __int128 v27;
  void **v28;
  _QWORD v29[3];
  _QWORD *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 904) = &unk_1E5D34118;
  *(_BYTE *)(a1 + 912) = 0;
  *(_QWORD *)(a1 + 916) = 0x3F8000003F800000;
  v10 = quasar::LmModel2::LmModel2((quasar::LmModel2 *)a1, 1.0, 1.0, (uint64_t *)&off_1E5D15518);
  *(_QWORD *)v10 = &off_1E5D3BEE0;
  *((_QWORD *)v10 + 113) = &off_1E5D3BF30;
  quasar::ModelLoader::ModelLoader((quasar::LmModel2 *)((char *)v10 + 240));
  v11 = (uint64_t *)(a1 + 864);
  *(_QWORD *)(a1 + 896) = 0;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  quasar::LmModel2::setModelSysConfigParams((quasar::LmModel2 *)a1, (const quasar::LmBuildConfig::ModelSysConfigParameters *)(*(_QWORD *)a5 + 8));
  *(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8) = 1;
  std::allocate_shared[abi:ne180100]<quasar::NNLmConfig::NNLmConfigParameters,std::allocator<quasar::NNLmConfig::NNLmConfigParameters>,quasar::NNLmConfig::NNLmConfigParameters const&,void>((const quasar::NNLmConfig::NNLmConfigParameters *)(*(_QWORD *)a5 + 120), __p);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 872, (__int128 *)__p);
  v12 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v13 = (unint64_t *)((char *)__p[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = *(_QWORD *)(a1 + 872);
  v16 = operator new();
  quasar::GlobalNNLMWrapper::GlobalNNLMWrapper(v16, a2, a3, v15 + 96);
  v17 = *v11;
  *v11 = v16;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  memset(v24, 0, sizeof(v24));
  v29[0] = &off_1E5D3EE80;
  v29[1] = a1;
  v30 = v29;
  quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::loadMasterLmOrCreatePlaceholder(a4, (uint64_t)__p, v24, (uint64_t)v29, &v27);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 888, &v27);
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v30;
  if (v30 == v29)
  {
    v22 = 4;
    v21 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_18;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_18:
  v28 = (void **)v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v28);
  if (v26 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1ADA1D8E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t *a20,char a21,uint64_t a22,uint64_t a23,char *a24)
{
  quasar::LmModel2 *v24;
  quasar::ModelLoader *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t *v29;
  char *v31;
  uint64_t v32;
  uint64_t v33;

  v31 = a24;
  if (a24 == v28)
  {
    v32 = 4;
    v31 = &a21;
  }
  else
  {
    if (!a24)
      goto LABEL_6;
    v32 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v31 + 8 * v32))();
LABEL_6:
  a20 = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  if (a17 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v27);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v26);
  v33 = *v29;
  *v29 = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  quasar::ModelLoader::~ModelLoader(v25);
  quasar::LmModel2::~LmModel2(v24, (uint64_t *)&off_1E5D15518);
  _Unwind_Resume(a1);
}

void sub_1ADA1D9B0()
{
  JUMPOUT(0x1ADA1D998);
}

uint64_t std::function<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::function<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0,void>(uint64_t a1, uint64_t *a2)
{
  char *v4;
  uint64_t v5;
  std::string *v6;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = (char *)operator new(0x38uLL);
  v5 = *a2;
  *(_QWORD *)v4 = off_1E5D3EED8;
  *((_QWORD *)v4 + 1) = v5;
  v6 = (std::string *)(v4 + 16);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, (const std::string::value_type *)a2[1], a2[2]);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 1);
    *((_QWORD *)v4 + 4) = a2[3];
  }
  *((_QWORD *)v4 + 5) = a2[4];
  *((_DWORD *)v4 + 12) = *((_DWORD *)a2 + 10);
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

void sub_1ADA1DA40(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::NNLmModel::NNLmModel(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5, float a6, float a7, float a8)
{
  quasar::LmModel2 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  std::string __p;
  char v26;
  float v27;
  int v28;
  uint64_t v29[3];
  void *v30[2];
  char v31;
  __int128 v32;
  void **v33;
  _BYTE v34[24];
  _BYTE *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 904) = &unk_1E5D34118;
  *(_BYTE *)(a1 + 912) = 0;
  *(float *)(a1 + 916) = a6;
  *(float *)(a1 + 920) = a7;
  v14 = quasar::LmModel2::LmModel2((quasar::LmModel2 *)a1, a6, a7, (uint64_t *)&off_1E5D15518);
  *(_QWORD *)v14 = &off_1E5D3BEE0;
  *((_QWORD *)v14 + 113) = &off_1E5D3BF30;
  quasar::ModelLoader::ModelLoader((quasar::LmModel2 *)((char *)v14 + 240));
  *(_BYTE *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_QWORD *)(a1 + 896) = 0;
  *(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(v30, "");
  memset(v29, 0, sizeof(v29));
  v24 = a1;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  v26 = a4;
  v27 = a8;
  v28 = a5;
  std::function<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::function<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0,void>((uint64_t)v34, &v24);
  quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::loadMasterLmOrCreatePlaceholder(a2, (uint64_t)v30, v29, (uint64_t)v34, &v32);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 888, &v32);
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
  if (*((_QWORD *)&v32 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v35;
  if (v35 == v34)
  {
    v22 = 4;
    v21 = v34;
  }
  else
  {
    if (!v35)
      goto LABEL_14;
    v22 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v21 + 8 * v22))(v21, v15, v16, v17);
LABEL_14:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v33 = (void **)v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v33);
  if (v31 < 0)
    operator delete(v30[0]);
  return a1;
}

void sub_1ADA1DC6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,char *a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  quasar::LmModel2 *v33;
  quasar::ModelLoader *v34;
  uint64_t v35;
  uint64_t v37;

  a29 = &a18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  if (a26 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v35);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v33 + 872);
  v37 = *((_QWORD *)v33 + 108);
  *((_QWORD *)v33 + 108) = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  quasar::ModelLoader::~ModelLoader(v34);
  quasar::LmModel2::~LmModel2(v33, (uint64_t *)&off_1E5D15518);
  _Unwind_Resume(a1);
}

void quasar::NNLmModel::trainOnData(uint64_t a1, uint64_t a2, const kaldi::Timer *a3, uint64_t **a4)
{
  uint64_t *Sentences;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _OWORD v13[17];

  if (*(_DWORD *)(a2 + 104))
  {
    memset(v13, 0, sizeof(v13));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "Other data type is not supported for NNLM trainer.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v13);
  }
  Sentences = (uint64_t *)quasar::LmData::getSentences(a2, 0);
  v9 = (uint64_t *)quasar::LmData::getSentences(a2, 1u);
  quasar::GlobalNNLMWrapper::loadData(*(_QWORD *)(a1 + 864), Sentences, v9, a3, a4);
  quasar::GlobalNNLMWrapper::setup(*(_QWORD *)(a1 + 864), a3, a4);
  quasar::GlobalNNLMWrapper::loadWeight(*(_QWORD *)(a1 + 864), a3, a4);
  v10 = *(_QWORD *)(a1 + 872);
  if (*(_BYTE *)(v10 + 88))
  {
    quasar::GlobalNNLMWrapper::evaluate(*(_QWORD *)(a1 + 864), a3, a4);
    v10 = *(_QWORD *)(a1 + 872);
  }
  if (*(int *)(v10 + 84) >= 1)
  {
    v11 = 0;
    do
    {
      quasar::GlobalNNLMWrapper::train(*(_QWORD *)(a1 + 864), a3, a4);
      v12 = *(_QWORD *)(a1 + 872);
      if (*(_BYTE *)(v12 + 88))
      {
        quasar::GlobalNNLMWrapper::evaluate(*(_QWORD *)(a1 + 864), a3, a4);
        v12 = *(_QWORD *)(a1 + 872);
      }
      ++v11;
    }
    while (v11 < *(_DWORD *)(v12 + 84));
  }
}

void quasar::NNLmModel::AddTo(uint64_t a1, _QWORD *a2, unsigned int **a3, uint64_t a4, unsigned int a5, char a6, uint64_t a7, uint64_t a8, _QWORD *a9, unint64_t a10)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _OWORD v18[2];
  int v19;
  _QWORD **v20;
  _QWORD *v21[2];
  void *__p;
  void *v23;
  uint64_t v24;
  void *v25[2];
  char v26;
  const void *v27;
  std::__shared_weak_count *v28;

  v14 = *(_QWORD *)(a1 + 888);
  std::string::basic_string[abi:ne180100]<0>(v25, "");
  quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::getCachedModel(v14, (uint64_t)v25, &v27);
  __p = 0;
  v23 = 0;
  v24 = 0;
  v21[0] = 0;
  v21[1] = 0;
  v20 = v21;
  memset(v18, 0, sizeof(v18));
  v19 = 1065353216;
  kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddNnlm(a2, v27, a3, a9, (__int32 **)&__p, (uint64_t)&v20, 0, a5, -1.0, a6, a10, (uint64_t)v18);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v18);
  std::__tree<int>::destroy((uint64_t)&v20, v21[0]);
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  v15 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v26 < 0)
    operator delete(v25[0]);
}

void sub_1ADA1DFCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, _QWORD *a19, uint64_t a20,void *__p,uint64_t a22)
{
  uint64_t v22;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a13);
  std::__tree<int>::destroy((uint64_t)&a18, a19);
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v22 - 64);
  if (*(char *)(v22 - 65) < 0)
    operator delete(*(void **)(v22 - 88));
  _Unwind_Resume(a1);
}

void `virtual thunk to'quasar::NNLmModel::AddTo(_QWORD *a1, _QWORD *a2, unsigned int **a3, uint64_t a4, unsigned int a5, char a6, uint64_t a7, uint64_t a8, _QWORD *a9, unint64_t a10)
{
  quasar::NNLmModel::AddTo((uint64_t)a1 + *(_QWORD *)(*a1 - 32), a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void quasar::trainOrAdaptNNLMModel(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t **v9;
  void *__p[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  void *v28[2];
  __int128 v29;
  int v30;
  std::string v31;
  _QWORD v32[3];
  char v33;
  _QWORD v34[3];
  char v35;
  char **v36;
  char *v37[2];
  _BYTE v38[32];
  uint64_t v39;

  v38[24] = 1;
  kaldi::Timer::Reset((kaldi::Timer *)v38, (clockid_t)a2);
  v39 = 0;
  v37[0] = 0;
  v37[1] = 0;
  v36 = v37;
  quasar::filesystem::Path::Path(v34, (__int128 *)(*a1 + 120));
  quasar::filesystem::Path::Path(v32, (__int128 *)(*a1 + 144));
  quasar::filesystem::Path::normalize((quasar::filesystem::Path *)v34, v28);
  quasar::filesystem::Path::parent_path((quasar::filesystem::Path *)v28, __p);
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)__p, &v31);
  __p[0] = &unk_1E5D343A0;
  if (SHIBYTE(v11) < 0)
    operator delete(__p[1]);
  v28[0] = &unk_1E5D343A0;
  if (SHIBYTE(v29) < 0)
    operator delete(v28[1]);
  *a3 = 0;
  a3[1] = 0;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 1065353216;
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1) != 5)
  {
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unsupported NNLM training Config", 32);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)v34, (std::string *)__p);
  std::allocate_shared[abi:ne180100]<quasar::NNLmModel,std::allocator<quasar::NNLmModel>,std::string,std::string&,quasar::filesystem::Path &,std::shared_ptr<quasar::NNLmConfig const> const&,void>((uint64_t)__p, (uint64_t)&v31, (kaldi::quasar::Vocab *)v32, (uint64_t)a1, &v27);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a3, &v27);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (SBYTE7(v11) < 0)
    operator delete(__p[0]);
  quasar::NNLmModel::trainOnData(*a3, a2, (const kaldi::Timer *)v38, (uint64_t **)&v36);
  v9 = (uint64_t **)(*a3 + 32);
  if (v9 != (uint64_t **)&v36)
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,double>,std::__tree_node<std::__value_type<std::string,double>,void *> *,long>>(v9, v36, v37);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v28);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  v32[0] = &unk_1E5D343A0;
  if (v33 < 0)
    operator delete((void *)v32[1]);
  v34[0] = &unk_1E5D343A0;
  if (v35 < 0)
    operator delete((void *)v34[1]);
  std::__tree<std::string>::destroy((uint64_t)&v36, v37[0]);
}

void sub_1ADA1E2A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, void *a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  uint64_t v57;
  uint64_t v58;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a51);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v57);
  if (*(char *)(v58 - 201) < 0)
    operator delete(*(void **)(v58 - 224));
  *(_QWORD *)(v58 - 200) = &unk_1E5D343A0;
  if (*(char *)(v58 - 169) < 0)
    operator delete(*(void **)(v58 - 192));
  *(_QWORD *)(v58 - 168) = &unk_1E5D343A0;
  if (*(char *)(v58 - 137) < 0)
    operator delete(*(void **)(v58 - 160));
  std::__tree<std::string>::destroy(v58 - 136, *(char **)(v58 - 128));
  _Unwind_Resume(a1);
}

uint64_t quasar::NNLmModel::writeImpl(uint64_t a1, uint64_t a2)
{
  const std::string *v3;
  unint64_t v4;
  std::string *v5;
  std::string *v6;
  std::string::size_type v7;
  std::string::size_type v8;
  std::string *v9;
  std::string *v10;
  uint64_t v11;
  uint64_t v12;
  const std::string::value_type *v13;
  const std::string::value_type *v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  char *v19;
  char v20;
  std::vector<std::string>::pointer v21;
  std::string *v22;
  std::string *v23;
  std::string *v24;
  std::string::size_type v25;
  std::string::size_type size;
  std::string *v27;
  std::string *v28;
  uint64_t v29;
  uint64_t v30;
  const std::string::value_type *v31;
  const std::string::value_type *v32;
  int v33;
  const std::string::value_type *v34;
  std::string::size_type v35;
  std::string *v36;
  char *v37;
  char v38;
  std::vector<std::string>::pointer end;
  std::string *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  std::wstring *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  std::wstring *v48;
  std::wstring *v49;
  std::string *v50;
  std::string::size_type v51;
  std::string *v52;
  std::string *v53;
  std::vector<std::string>::pointer v54;
  __int128 v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  std::wstring *v59;
  std::wstring *v60;
  std::string *v61;
  std::string::size_type v62;
  std::string *v63;
  std::string *v64;
  std::vector<std::string>::pointer v65;
  __int128 v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  std::wstring *v70;
  std::wstring *v71;
  __int128 v72;
  std::string *v73;
  std::string::size_type v74;
  std::string *data;
  char *v76;
  int v77;
  std::string *v78;
  char *v79;
  char v80;
  std::vector<std::string>::pointer v81;
  std::vector<std::string>::pointer v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  std::wstring *v86;
  std::wstring *v87;
  __int128 v88;
  std::string *v89;
  std::wstring *v90;
  __int128 *v91;
  __int128 v92;
  std::string *v93;
  std::string *v94;
  std::string::size_type v95;
  std::string *v96;
  std::string *v97;
  std::vector<std::string>::pointer v98;
  __int128 v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  std::wstring *v103;
  std::wstring *v104;
  __int128 v105;
  std::string *v106;
  std::string::size_type v107;
  std::string *v108;
  char *v109;
  int v110;
  std::string *v111;
  char *v112;
  char v113;
  std::vector<std::string>::pointer v114;
  std::string *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  std::wstring *v119;
  std::wstring *v120;
  __int128 *begin;
  std::vector<std::string>::pointer v122;
  std::string::size_type v123;
  std::wstring *v124;
  std::wstring *v125;
  std::string *v126;
  __int128 v127;
  std::string *v128;
  std::string::size_type v129;
  std::string *v130;
  __int128 v131;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  std::string::size_type v141;
  std::string v143;
  std::string v144;
  void *v145[2];
  std::string::size_type v146;
  std::vector<std::string> v147;
  std::string *__str[3];
  _BYTE v149[32];
  uint64_t v150;
  std::string v151;
  uint64_t v152;
  std::__split_buffer<std::wstring> __p[10];
  uint64_t v154;
  __int128 v155;
  char v156;
  uint64_t v157;

  v157 = *MEMORY[0x1E0C80C00];
  v149[24] = 1;
  kaldi::Timer::Reset((kaldi::Timer *)v149, (clockid_t)a2);
  v150 = 0;
  quasar::GlobalNNLMWrapper::saveWeight(*(_QWORD *)(a1 + 864), (uint64_t *)a2, (const kaldi::Timer *)v149, (uint64_t **)(a1 + 32));
  v3 = *(const std::string **)(a1 + 872);
  std::string::basic_string[abi:ne180100]<0>(__p, ":");
  quasar::splitAndTrimNoEmpty(v3 + 1, (char *)__p, __str);
  if (SHIBYTE(__p[0].__end_) < 0)
    operator delete(__p[0].__first_);
  memset(&v147, 0, sizeof(v147));
  v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)__str[1] - (char *)__str[0]) >> 3);
  if (v4 == 2)
  {
    v23 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v147, (__int128 *)__str[0]);
    v24 = __str[0];
    v25 = HIBYTE(__str[0]->__r_.__value_.__r.__words[2]);
    v147.__end_ = v23;
    if ((v25 & 0x80u) == 0)
      size = v25;
    else
      size = __str[0]->__r_.__value_.__l.__size_;
    v27 = &v151;
    std::string::basic_string[abi:ne180100]((uint64_t)&v151, size + 1);
    if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v27 = (std::string *)v151.__r_.__value_.__r.__words[0];
    if (size)
    {
      if ((v24->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = v24;
      else
        v28 = (std::string *)v24->__r_.__value_.__r.__words[0];
      memmove(v27, v28, size);
    }
    *(_WORD *)((char *)&v27->__r_.__value_.__l.__data_ + size) = 46;
    v29 = *(_QWORD *)(a1 + 872);
    v32 = *(const std::string::value_type **)(v29 + 48);
    v30 = v29 + 48;
    v31 = v32;
    v33 = *(char *)(v30 + 23);
    if (v33 >= 0)
      v34 = (const std::string::value_type *)v30;
    else
      v34 = v31;
    if (v33 >= 0)
      v35 = *(unsigned __int8 *)(v30 + 23);
    else
      v35 = *(_QWORD *)(v30 + 8);
    v36 = std::string::append(&v151, v34, v35);
    v37 = (char *)v36->__r_.__value_.__r.__words[0];
    *(_QWORD *)&v155 = v36->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)&v155 + 7) = *(std::string::size_type *)((char *)&v36->__r_.__value_.__r.__words[1] + 7);
    v38 = HIBYTE(v36->__r_.__value_.__r.__words[2]);
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    end = v147.__end_;
    if (v147.__end_ >= v147.__end_cap_.__value_)
    {
      v41 = 0xAAAAAAAAAAAAAAABLL * (((char *)v147.__end_ - (char *)v147.__begin_) >> 3);
      v42 = v41 + 1;
      if (v41 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3) > v42)
        v42 = 0x5555555555555556 * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3) >= 0x555555555555555)
        v43 = 0xAAAAAAAAAAAAAAALL;
      else
        v43 = v42;
      __p[0].__end_cap_.__value_ = (std::allocator<std::wstring> *)&v147.__end_cap_;
      if (v43)
        v44 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v147.__end_cap_, v43);
      else
        v44 = 0;
      v49 = v44 + v41;
      __p[0].__first_ = v44;
      __p[0].__begin_ = v49;
      __p[0].__end_cap_.__value_ = &v44[v43];
      v49->__r_.__value_.__r.__words[0] = (std::wstring::size_type)v37;
      v49->__r_.__value_.__l.__size_ = v155;
      *(std::wstring::size_type *)((char *)&v49->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v155 + 7);
      *((_BYTE *)&v49->__r_.__value_.__s + 23) = v38;
      __p[0].__end_ = v49 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v147, (std::__split_buffer<std::string> *)__p);
      v40 = v147.__end_;
      std::__split_buffer<std::string>::~__split_buffer(__p);
    }
    else
    {
      v147.__end_->__r_.__value_.__l.__data_ = v37;
      end->__r_.__value_.__l.__size_ = v155;
      *(std::string::size_type *)((char *)&end->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v155 + 7);
      *((_BYTE *)&end->__r_.__value_.__s + 23) = v38;
      v40 = end + 1;
    }
    v147.__end_ = v40;
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v151.__r_.__value_.__l.__data_);
    v50 = __str[0];
    if ((__str[0]->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v51 = HIBYTE(__str[0]->__r_.__value_.__r.__words[2]);
    else
      v51 = __str[0]->__r_.__value_.__l.__size_;
    v52 = &v151;
    std::string::basic_string[abi:ne180100]((uint64_t)&v151, v51 + 7);
    if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v52 = (std::string *)v151.__r_.__value_.__r.__words[0];
    if (v51)
    {
      if ((v50->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v53 = v50;
      else
        v53 = (std::string *)v50->__r_.__value_.__r.__words[0];
      memmove(v52, v53, v51);
    }
    strcpy((char *)v52 + v51, ".config");
    v54 = v147.__end_;
    if (v147.__end_ >= v147.__end_cap_.__value_)
    {
      v56 = 0xAAAAAAAAAAAAAAABLL * (((char *)v147.__end_ - (char *)v147.__begin_) >> 3);
      v57 = v56 + 1;
      if (v56 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3) > v57)
        v57 = 0x5555555555555556 * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3) >= 0x555555555555555)
        v58 = 0xAAAAAAAAAAAAAAALL;
      else
        v58 = v57;
      __p[0].__end_cap_.__value_ = (std::allocator<std::wstring> *)&v147.__end_cap_;
      if (v58)
        v59 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v147.__end_cap_, v58);
      else
        v59 = 0;
      v71 = v59 + v56;
      __p[0].__first_ = v59;
      __p[0].__begin_ = v71;
      __p[0].__end_cap_.__value_ = &v59[v58];
      v72 = *(_OWORD *)&v151.__r_.__value_.__l.__data_;
      v71->__r_.__value_.__r.__words[2] = v151.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v71->__r_.__value_.__l.__data_ = v72;
      memset(&v151, 0, sizeof(v151));
      __p[0].__end_ = v71 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v147, (std::__split_buffer<std::string> *)__p);
      v73 = v147.__end_;
      std::__split_buffer<std::string>::~__split_buffer(__p);
      v147.__end_ = v73;
      if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v151.__r_.__value_.__l.__data_);
    }
    else
    {
      v55 = *(_OWORD *)&v151.__r_.__value_.__l.__data_;
      v147.__end_->__r_.__value_.__r.__words[2] = v151.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v54->__r_.__value_.__l.__data_ = v55;
      v147.__end_ = v54 + 1;
    }
    if (SHIBYTE(__str[0]->__r_.__value_.__r.__words[2]) < 0)
    {
      data = (std::string *)__str[0]->__r_.__value_.__l.__data_;
      v74 = __str[0]->__r_.__value_.__l.__size_;
    }
    else
    {
      v74 = HIBYTE(__str[0]->__r_.__value_.__r.__words[2]);
      data = __str[0];
    }
    v76 = (char *)&data[-1].__r_.__value_.__r.__words[2] + 7;
    while (v74)
    {
      v77 = v76[v74--];
      if (v77 == 46)
        goto LABEL_116;
    }
    v74 = -1;
LABEL_116:
    std::string::basic_string(&v151, __str[0], 0, v74, (std::allocator<char> *)__p);
    v78 = std::string::append(&v151, ".shape");
    v79 = (char *)v78->__r_.__value_.__r.__words[0];
    *(_QWORD *)&v155 = v78->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)&v155 + 7) = *(std::string::size_type *)((char *)&v78->__r_.__value_.__r.__words[1] + 7);
    v80 = HIBYTE(v78->__r_.__value_.__r.__words[2]);
    v78->__r_.__value_.__l.__size_ = 0;
    v78->__r_.__value_.__r.__words[2] = 0;
    v78->__r_.__value_.__r.__words[0] = 0;
    v81 = v147.__end_;
    if (v147.__end_ >= v147.__end_cap_.__value_)
    {
      v83 = 0xAAAAAAAAAAAAAAABLL * (((char *)v147.__end_ - (char *)v147.__begin_) >> 3);
      v84 = v83 + 1;
      if (v83 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3) > v84)
        v84 = 0x5555555555555556 * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3) >= 0x555555555555555)
        v85 = 0xAAAAAAAAAAAAAAALL;
      else
        v85 = v84;
      __p[0].__end_cap_.__value_ = (std::allocator<std::wstring> *)&v147.__end_cap_;
      if (v85)
        v86 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v147.__end_cap_, v85);
      else
        v86 = 0;
      v90 = v86 + v83;
      __p[0].__first_ = v86;
      __p[0].__begin_ = v90;
      __p[0].__end_cap_.__value_ = &v86[v85];
      v90->__r_.__value_.__r.__words[0] = (std::wstring::size_type)v79;
      v90->__r_.__value_.__l.__size_ = v155;
      *(std::wstring::size_type *)((char *)&v90->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v155 + 7);
      *((_BYTE *)&v90->__r_.__value_.__s + 23) = v80;
      __p[0].__end_ = v90 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v147, (std::__split_buffer<std::string> *)__p);
      v82 = v147.__end_;
      std::__split_buffer<std::string>::~__split_buffer(__p);
    }
    else
    {
      v147.__end_->__r_.__value_.__l.__data_ = v79;
      v81->__r_.__value_.__l.__size_ = v155;
      *(std::string::size_type *)((char *)&v81->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v155 + 7);
      *((_BYTE *)&v81->__r_.__value_.__s + 23) = v80;
      v82 = v81 + 1;
    }
    v147.__end_ = v82;
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v151.__r_.__value_.__l.__data_);
      v82 = v147.__end_;
    }
    v91 = (__int128 *)&__str[0][1];
    if (v82 >= v147.__end_cap_.__value_)
    {
      v93 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v147, v91);
    }
    else
    {
      if (SHIBYTE(__str[0][1].__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v82, __str[0][1].__r_.__value_.__l.__data_, __str[0][1].__r_.__value_.__l.__size_);
      }
      else
      {
        v92 = *v91;
        v82->__r_.__value_.__r.__words[2] = __str[0][1].__r_.__value_.__r.__words[2];
        *(_OWORD *)&v82->__r_.__value_.__l.__data_ = v92;
      }
      v93 = v82 + 1;
    }
    v147.__end_ = v93;
    v94 = __str[0];
    if ((__str[0][1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v95 = HIBYTE(__str[0][1].__r_.__value_.__r.__words[2]);
    else
      v95 = __str[0][1].__r_.__value_.__l.__size_;
    v96 = &v151;
    std::string::basic_string[abi:ne180100]((uint64_t)&v151, v95 + 7);
    if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v96 = (std::string *)v151.__r_.__value_.__r.__words[0];
    if (v95)
    {
      if ((v94[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v97 = v94 + 1;
      else
        v97 = (std::string *)v94[1].__r_.__value_.__l.__data_;
      memmove(v96, v97, v95);
    }
    strcpy((char *)v96 + v95, ".config");
    v98 = v147.__end_;
    if (v147.__end_ >= v147.__end_cap_.__value_)
    {
      v100 = 0xAAAAAAAAAAAAAAABLL * (((char *)v147.__end_ - (char *)v147.__begin_) >> 3);
      v101 = v100 + 1;
      if (v100 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3) > v101)
        v101 = 0x5555555555555556 * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3) >= 0x555555555555555)
        v102 = 0xAAAAAAAAAAAAAAALL;
      else
        v102 = v101;
      __p[0].__end_cap_.__value_ = (std::allocator<std::wstring> *)&v147.__end_cap_;
      if (v102)
        v103 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v147.__end_cap_, v102);
      else
        v103 = 0;
      v104 = v103 + v100;
      __p[0].__first_ = v103;
      __p[0].__begin_ = v104;
      __p[0].__end_cap_.__value_ = &v103[v102];
      v105 = *(_OWORD *)&v151.__r_.__value_.__l.__data_;
      v104->__r_.__value_.__r.__words[2] = v151.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v104->__r_.__value_.__l.__data_ = v105;
      memset(&v151, 0, sizeof(v151));
      __p[0].__end_ = v104 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v147, (std::__split_buffer<std::string> *)__p);
      v106 = v147.__end_;
      std::__split_buffer<std::string>::~__split_buffer(__p);
      v147.__end_ = v106;
      if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v151.__r_.__value_.__l.__data_);
    }
    else
    {
      v99 = *(_OWORD *)&v151.__r_.__value_.__l.__data_;
      v147.__end_->__r_.__value_.__r.__words[2] = v151.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v98->__r_.__value_.__l.__data_ = v99;
      v147.__end_ = v98 + 1;
    }
    if (SHIBYTE(__str[0][1].__r_.__value_.__r.__words[2]) < 0)
    {
      v108 = (std::string *)__str[0][1].__r_.__value_.__l.__data_;
      v107 = __str[0][1].__r_.__value_.__l.__size_;
    }
    else
    {
      v107 = HIBYTE(__str[0][1].__r_.__value_.__r.__words[2]);
      v108 = __str[0] + 1;
    }
    v109 = (char *)&v108[-1].__r_.__value_.__r.__words[2] + 7;
    while (v107)
    {
      v110 = v109[v107--];
      if (v110 == 46)
        goto LABEL_170;
    }
    v107 = -1;
LABEL_170:
    std::string::basic_string(&v151, __str[0] + 1, 0, v107, (std::allocator<char> *)__p);
    v111 = std::string::append(&v151, ".shape");
    v112 = (char *)v111->__r_.__value_.__r.__words[0];
    *(_QWORD *)&v155 = v111->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)&v155 + 7) = *(std::string::size_type *)((char *)&v111->__r_.__value_.__r.__words[1] + 7);
    v113 = HIBYTE(v111->__r_.__value_.__r.__words[2]);
    v111->__r_.__value_.__l.__size_ = 0;
    v111->__r_.__value_.__r.__words[2] = 0;
    v111->__r_.__value_.__r.__words[0] = 0;
    v114 = v147.__end_;
    if (v147.__end_ >= v147.__end_cap_.__value_)
    {
      v116 = 0xAAAAAAAAAAAAAAABLL * (((char *)v147.__end_ - (char *)v147.__begin_) >> 3);
      v117 = v116 + 1;
      if (v116 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3) > v117)
        v117 = 0x5555555555555556 * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3) >= 0x555555555555555)
        v118 = 0xAAAAAAAAAAAAAAALL;
      else
        v118 = v117;
      __p[0].__end_cap_.__value_ = (std::allocator<std::wstring> *)&v147.__end_cap_;
      if (v118)
        v119 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v147.__end_cap_, v118);
      else
        v119 = 0;
      v120 = v119 + v116;
      __p[0].__first_ = v119;
      __p[0].__begin_ = v120;
      __p[0].__end_cap_.__value_ = &v119[v118];
      v120->__r_.__value_.__r.__words[0] = (std::wstring::size_type)v112;
      v120->__r_.__value_.__l.__size_ = v155;
      *(std::wstring::size_type *)((char *)&v120->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v155 + 7);
      *((_BYTE *)&v120->__r_.__value_.__s + 23) = v113;
      __p[0].__end_ = v120 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v147, (std::__split_buffer<std::string> *)__p);
      v115 = v147.__end_;
      std::__split_buffer<std::string>::~__split_buffer(__p);
    }
    else
    {
      v147.__end_->__r_.__value_.__l.__data_ = v112;
      v114->__r_.__value_.__l.__size_ = v155;
      *(std::string::size_type *)((char *)&v114->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v155 + 7);
      *((_BYTE *)&v114->__r_.__value_.__s + 23) = v113;
      v115 = v114 + 1;
    }
    v147.__end_ = v115;
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
LABEL_183:
      operator delete(v151.__r_.__value_.__l.__data_);
  }
  else
  {
    if (v4 != 1)
    {
      memset(__p, 0, 272);
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v133 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Malformed LM neural network file name, fileBasename=", 52);
      v134 = *(_QWORD *)(a1 + 872);
      v137 = *(_QWORD *)(v134 + 24);
      v135 = v134 + 24;
      v136 = v137;
      v138 = *(char *)(v135 + 23);
      if (v138 >= 0)
        v139 = v135;
      else
        v139 = v136;
      if (v138 >= 0)
        v140 = *(unsigned __int8 *)(v135 + 23);
      else
        v140 = *(_QWORD *)(v135 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, v139, v140);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    v5 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v147, (__int128 *)__str[0]);
    v6 = __str[0];
    v7 = HIBYTE(__str[0]->__r_.__value_.__r.__words[2]);
    v147.__end_ = v5;
    if ((v7 & 0x80u) == 0)
      v8 = v7;
    else
      v8 = __str[0]->__r_.__value_.__l.__size_;
    v9 = &v151;
    std::string::basic_string[abi:ne180100]((uint64_t)&v151, v8 + 1);
    if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)v151.__r_.__value_.__r.__words[0];
    if (v8)
    {
      if ((v6->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = v6;
      else
        v10 = (std::string *)v6->__r_.__value_.__r.__words[0];
      memmove(v9, v10, v8);
    }
    *(_WORD *)((char *)&v9->__r_.__value_.__l.__data_ + v8) = 46;
    v11 = *(_QWORD *)(a1 + 872);
    v14 = *(const std::string::value_type **)(v11 + 48);
    v12 = v11 + 48;
    v13 = v14;
    v15 = *(char *)(v12 + 23);
    if (v15 >= 0)
      v16 = (const std::string::value_type *)v12;
    else
      v16 = v13;
    if (v15 >= 0)
      v17 = *(unsigned __int8 *)(v12 + 23);
    else
      v17 = *(_QWORD *)(v12 + 8);
    v18 = std::string::append(&v151, v16, v17);
    v19 = (char *)v18->__r_.__value_.__r.__words[0];
    *(_QWORD *)&v155 = v18->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)&v155 + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
    v20 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v21 = v147.__end_;
    if (v147.__end_ >= v147.__end_cap_.__value_)
    {
      v45 = 0xAAAAAAAAAAAAAAABLL * (((char *)v147.__end_ - (char *)v147.__begin_) >> 3);
      v46 = v45 + 1;
      if (v45 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3) > v46)
        v46 = 0x5555555555555556 * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3) >= 0x555555555555555)
        v47 = 0xAAAAAAAAAAAAAAALL;
      else
        v47 = v46;
      __p[0].__end_cap_.__value_ = (std::allocator<std::wstring> *)&v147.__end_cap_;
      if (v47)
        v48 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v147.__end_cap_, v47);
      else
        v48 = 0;
      v60 = v48 + v45;
      __p[0].__first_ = v48;
      __p[0].__begin_ = v60;
      __p[0].__end_cap_.__value_ = &v48[v47];
      v60->__r_.__value_.__r.__words[0] = (std::wstring::size_type)v19;
      v60->__r_.__value_.__l.__size_ = v155;
      *(std::wstring::size_type *)((char *)&v60->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v155 + 7);
      *((_BYTE *)&v60->__r_.__value_.__s + 23) = v20;
      __p[0].__end_ = v60 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v147, (std::__split_buffer<std::string> *)__p);
      v22 = v147.__end_;
      std::__split_buffer<std::string>::~__split_buffer(__p);
    }
    else
    {
      v147.__end_->__r_.__value_.__l.__data_ = v19;
      v21->__r_.__value_.__l.__size_ = v155;
      *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v155 + 7);
      *((_BYTE *)&v21->__r_.__value_.__s + 23) = v20;
      v22 = v21 + 1;
    }
    v147.__end_ = v22;
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v151.__r_.__value_.__l.__data_);
    v61 = __str[0];
    if ((__str[0]->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v62 = HIBYTE(__str[0]->__r_.__value_.__r.__words[2]);
    else
      v62 = __str[0]->__r_.__value_.__l.__size_;
    v63 = &v151;
    std::string::basic_string[abi:ne180100]((uint64_t)&v151, v62 + 7);
    if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v63 = (std::string *)v151.__r_.__value_.__r.__words[0];
    if (v62)
    {
      if ((v61->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v64 = v61;
      else
        v64 = (std::string *)v61->__r_.__value_.__r.__words[0];
      memmove(v63, v64, v62);
    }
    strcpy((char *)v63 + v62, ".config");
    v65 = v147.__end_;
    if (v147.__end_ < v147.__end_cap_.__value_)
    {
      v66 = *(_OWORD *)&v151.__r_.__value_.__l.__data_;
      v147.__end_->__r_.__value_.__r.__words[2] = v151.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65->__r_.__value_.__l.__data_ = v66;
      v147.__end_ = v65 + 1;
      goto LABEL_184;
    }
    v67 = 0xAAAAAAAAAAAAAAABLL * (((char *)v147.__end_ - (char *)v147.__begin_) >> 3);
    v68 = v67 + 1;
    if (v67 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    if (0x5555555555555556 * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3) > v68)
      v68 = 0x5555555555555556 * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3) >= 0x555555555555555)
      v69 = 0xAAAAAAAAAAAAAAALL;
    else
      v69 = v68;
    __p[0].__end_cap_.__value_ = (std::allocator<std::wstring> *)&v147.__end_cap_;
    if (v69)
      v70 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v147.__end_cap_, v69);
    else
      v70 = 0;
    v87 = v70 + v67;
    __p[0].__first_ = v70;
    __p[0].__begin_ = v87;
    __p[0].__end_cap_.__value_ = &v70[v69];
    v88 = *(_OWORD *)&v151.__r_.__value_.__l.__data_;
    v87->__r_.__value_.__r.__words[2] = v151.__r_.__value_.__r.__words[2];
    *(_OWORD *)&v87->__r_.__value_.__l.__data_ = v88;
    memset(&v151, 0, sizeof(v151));
    __p[0].__end_ = v87 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(&v147, (std::__split_buffer<std::string> *)__p);
    v89 = v147.__end_;
    std::__split_buffer<std::string>::~__split_buffer(__p);
    v147.__end_ = v89;
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_183;
  }
LABEL_184:
  begin = (__int128 *)v147.__begin_;
  v122 = v147.__end_;
  if (v147.__begin_ != v147.__end_)
  {
    v123 = *MEMORY[0x1E0DE4F48];
    v141 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
    v124 = (std::wstring *)*MEMORY[0x1E0DE4F40];
    v125 = *(std::wstring **)(MEMORY[0x1E0DE4F40] + 24);
    do
    {
      quasar::filesystem::Path::Path(&v155, begin);
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v144, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v144 = *(std::string *)a2;
      v126 = std::string::append(&v144, "/");
      v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
      v151.__r_.__value_.__r.__words[2] = v126->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v127;
      v126->__r_.__value_.__l.__size_ = 0;
      v126->__r_.__value_.__r.__words[2] = 0;
      v126->__r_.__value_.__r.__words[0] = 0;
      quasar::filesystem::Path::filename((quasar::filesystem::Path *)&v155, __p);
      kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)__p, &v143);
      if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v128 = &v143;
      else
        v128 = (std::string *)v143.__r_.__value_.__r.__words[0];
      if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v129 = HIBYTE(v143.__r_.__value_.__r.__words[2]);
      else
        v129 = v143.__r_.__value_.__l.__size_;
      v130 = std::string::append(&v151, (const std::string::value_type *)v128, v129);
      v131 = *(_OWORD *)&v130->__r_.__value_.__l.__data_;
      v146 = v130->__r_.__value_.__r.__words[2];
      *(_OWORD *)v145 = v131;
      v130->__r_.__value_.__l.__size_ = 0;
      v130->__r_.__value_.__r.__words[2] = 0;
      v130->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v143.__r_.__value_.__l.__data_);
      __p[0].__first_ = (std::__split_buffer<std::wstring>::pointer)&unk_1E5D343A0;
      if (SHIBYTE(__p[0].__end_cap_.__value_) < 0)
        operator delete(__p[0].__begin_);
      if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v151.__r_.__value_.__l.__data_);
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v144.__r_.__value_.__l.__data_);
      std::ifstream::basic_ifstream(__p);
      std::ofstream::basic_ofstream(&v151);
      std::ostream::operator<<();
      if (!std::filebuf::close())
        std::ios_base::clear((std::ios_base *)((char *)__p + __p[0].__first_[-1].__r_.__value_.__r.__words[0]), *(_DWORD *)((char *)&__p[0].__end_cap_.__value_ + __p[0].__first_[-1].__r_.__value_.__r.__words[0]) | 4);
      if (!std::filebuf::close())
        std::ios_base::clear((std::ios_base *)((char *)&v151 + *(_QWORD *)(v151.__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&v151 + *(_QWORD *)(v151.__r_.__value_.__r.__words[0] - 24) + 32) | 4);
      v151.__r_.__value_.__r.__words[0] = v123;
      *(std::string::size_type *)((char *)v151.__r_.__value_.__r.__words + *(_QWORD *)(v123 - 24)) = v141;
      MEMORY[0x1AF44CA70](&v151.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x1AF44D094](&v152);
      __p[0].__first_ = v124;
      *(std::__split_buffer<std::wstring>::pointer *)((char *)&__p[0].__first_ + v124[-1].__r_.__value_.__r.__words[0]) = v125;
      MEMORY[0x1AF44CA70](&__p[0].__end_);
      std::istream::~istream();
      MEMORY[0x1AF44D094](&v154);
      if (SHIBYTE(v146) < 0)
        operator delete(v145[0]);
      *(_QWORD *)&v155 = &unk_1E5D343A0;
      if (v156 < 0)
        operator delete(*((void **)&v155 + 1));
      begin = (__int128 *)((char *)begin + 24);
    }
    while (begin != (__int128 *)v122);
  }
  __p[0].__first_ = (std::__split_buffer<std::wstring>::pointer)&v147;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0].__first_ = (std::__split_buffer<std::wstring>::pointer)__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return 1;
}

void sub_1ADA1F2FC(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADA1F4B4);
}

void sub_1ADA1F30C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v39;
  uint64_t v40;
  void **v41[164];

  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&STACK[0x300]);
  if (a38 < 0)
    operator delete(__p);
  v41[0] = (void **)&v39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v41);
  v41[0] = (void **)&v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v41);
  _Unwind_Resume(a1);
}

void quasar::NNLmModel::getMetadata(const std::string **this@<X0>, quasar::PTree *a2@<X8>)
{
  const std::string *v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  int v9;
  quasar *v10;
  float v11;
  quasar *v12;
  void *__p;
  std::string v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  std::string v19;
  void *v20[2];
  int64_t v21;
  void *v22;
  void *v23;
  char v24;
  char v25;
  std::string v26;
  __int128 *v27[3];

  quasar::LmModel2::getMetadata((quasar::LmModel2 *)this, a2);
  v4 = this[109];
  std::string::basic_string[abi:ne180100]<0>(&__p, ":");
  quasar::splitAndTrimNoEmpty(v4 + 1, (char *)&__p, v27);
  if (v14.__r_.__value_.__s.__data_[15] < 0)
    operator delete(__p);
  quasar::filesystem::Path::Path(&v22, v27[0]);
  quasar::filesystem::Path::filename((quasar::filesystem::Path *)&v22, &__p);
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)&__p, &v26);
  __p = &unk_1E5D343A0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  v22 = &unk_1E5D343A0;
  if (v25 < 0)
    operator delete(v23);
  if ((__int128 *)((char *)v27[1] - (char *)v27[0]) == (__int128 *)48)
  {
    quasar::filesystem::Path::Path(&v22, (__int128 *)((char *)v27[0] + 24));
    quasar::filesystem::Path::filename((quasar::filesystem::Path *)&v22, &__p);
    kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)&__p, &v19);
    v5 = std::string::insert(&v19, 0, ":");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v21 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)v20 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (v21 >= 0)
      v7 = v20;
    else
      v7 = (void **)v20[0];
    if (v21 >= 0)
      v8 = HIBYTE(v21);
    else
      v8 = (std::string::size_type)v20[1];
    std::string::append(&v26, (const std::string::value_type *)v7, v8);
    if (SHIBYTE(v21) < 0)
      operator delete(v20[0]);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    __p = &unk_1E5D343A0;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
    v22 = &unk_1E5D343A0;
    if (v25 < 0)
      operator delete(v23);
  }
  std::string::basic_string[abi:ne180100]<0>(&v22, "nnlm-loading-files");
  quasar::PTree::PTree(&__p, &v26);
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)&v22, (uint64_t)&__p, 1);
  quasar::PTree::~PTree((quasar::PTree *)&__p);
  if (v24 < 0)
    operator delete(v22);
  std::string::basic_string[abi:ne180100]<0>(&v22, "wordmap-file-extension");
  quasar::PTree::PTree(&__p, &this[109][2]);
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)&v22, (uint64_t)&__p, 1);
  quasar::PTree::~PTree((quasar::PTree *)&__p);
  if (v24 < 0)
    operator delete(v22);
  std::string::basic_string[abi:ne180100]<0>(&v22, "enable-wordmap");
  v9 = this[109][3].__r_.__value_.__s.__data_[0];
  LODWORD(__p) = quasar::getType((quasar *)this[109][3].__r_.__value_.__s.__data_[0]);
  std::to_string(&v14, v9);
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)&v22, (uint64_t)&__p, 1);
  quasar::PTree::~PTree((quasar::PTree *)&__p);
  if (v24 < 0)
    operator delete(v22);
  v10 = (quasar *)std::string::basic_string[abi:ne180100]<0>(&v22, "norm-factor");
  v11 = *((float *)this[109][3].__r_.__value_.__r.__words + 1);
  LODWORD(__p) = quasar::getType(v10, v11);
  std::to_string(&v14, v11);
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)&v22, (uint64_t)&__p, 1);
  quasar::PTree::~PTree((quasar::PTree *)&__p);
  if (v24 < 0)
    operator delete(v22);
  std::string::basic_string[abi:ne180100]<0>(&v22, "max-context-size");
  v12 = (quasar *)LODWORD(this[109][3].__r_.__value_.__r.__words[1]);
  LODWORD(__p) = quasar::getType(v12);
  std::to_string(&v14, (int)v12);
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)&v22, (uint64_t)&__p, 1);
  quasar::PTree::~PTree((quasar::PTree *)&__p);
  if (v24 < 0)
    operator delete(v22);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  __p = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1ADA1F860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,void *a38,int a39,__int16 a40,char a41,char a42,int a43,__int16 a44,char a45,char a46)
{
  quasar::PTree *v46;
  uint64_t v47;
  uint64_t v48;

  if (a35 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  a10 = (void *)(v47 + 16);
  if (a19 < 0)
    operator delete(a11);
  a37 = v47 + 16;
  if (a46 < 0)
    operator delete(a38);
  if (*(char *)(v48 - 89) < 0)
    operator delete(*(void **)(v48 - 112));
  a10 = (void *)(v48 - 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  quasar::PTree::~PTree(v46);
  _Unwind_Resume(a1);
}

void quasar::loadNNLmModel(uint64_t a1@<X0>, float *a2@<X1>, const void **a3@<X2>, quasar::LmModel2 **a4@<X8>)
{
  uint64_t String;
  __int128 v9;
  size_t v10;
  std::string *v11;
  const void *v12;
  std::string *v13;
  std::string::size_type size;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  std::string::size_type v24;
  uint64_t v25;
  __int128 v26;
  char Bool;
  double Double;
  int v29;
  quasar::LmModel2 *v30;
  float v31;
  quasar::LmModel2 *v32;
  std::string v33;
  std::string v34;
  void *v35[2];
  char v36;
  char v37;
  std::string __p;
  char v39;
  std::string v40;
  std::string v41;
  std::string v42;
  __int128 *v43[3];
  std::string v44;

  std::string::basic_string[abi:ne180100]<0>(&__p, "nnlm-loading-files");
  String = quasar::PTree::getString(a1, (__int128 *)&__p);
  if (*(char *)(String + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)String, *(_QWORD *)(String + 8));
  }
  else
  {
    v9 = *(_OWORD *)String;
    v44.__r_.__value_.__r.__words[2] = *(_QWORD *)(String + 16);
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v9;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, ":");
  quasar::splitAndTrimNoEmpty(&v44, (char *)&__p, v43);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*((char *)a3 + 23) >= 0)
    v10 = *((unsigned __int8 *)a3 + 23);
  else
    v10 = (size_t)a3[1];
  v11 = &v41;
  std::string::basic_string[abi:ne180100]((uint64_t)&v41, v10 + 1);
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v11 = (std::string *)v41.__r_.__value_.__r.__words[0];
  if (v10)
  {
    if (*((char *)a3 + 23) >= 0)
      v12 = a3;
    else
      v12 = *a3;
    memmove(v11, v12, v10);
  }
  *(_WORD *)((char *)&v11->__r_.__value_.__l.__data_ + v10) = 47;
  quasar::filesystem::Path::Path(v35, v43[0]);
  quasar::filesystem::Path::filename((quasar::filesystem::Path *)v35, &__p);
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)&__p, &v40);
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v40;
  else
    v13 = (std::string *)v40.__r_.__value_.__r.__words[0];
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
  else
    size = v40.__r_.__value_.__l.__size_;
  v15 = std::string::append(&v41, (const std::string::value_type *)v13, size);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D343A0;
  if (v39 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  v35[0] = &unk_1E5D343A0;
  if (v37 < 0)
    operator delete(v35[1]);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if ((__int128 *)((char *)v43[1] - (char *)v43[0]) == (__int128 *)48)
  {
    std::operator+<char>();
    v17 = std::string::append(&v34, "/");
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    quasar::filesystem::Path::Path(v35, (__int128 *)((char *)v43[0] + 24));
    quasar::filesystem::Path::filename((quasar::filesystem::Path *)v35, &__p);
    kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)&__p, &v33);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v33;
    else
      v19 = (std::string *)v33.__r_.__value_.__r.__words[0];
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    else
      v20 = v33.__r_.__value_.__l.__size_;
    v21 = std::string::append(&v40, (const std::string::value_type *)v19, v20);
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = &v41;
    else
      v23 = (std::string *)v41.__r_.__value_.__r.__words[0];
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
    else
      v24 = v41.__r_.__value_.__l.__size_;
    std::string::append(&v42, (const std::string::value_type *)v23, v24);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D343A0;
    if (v39 < 0)
      operator delete((void *)__p.__r_.__value_.__l.__size_);
    v35[0] = &unk_1E5D343A0;
    if (v37 < 0)
      operator delete(v35[1]);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "wordmap-file-extension");
  v25 = quasar::PTree::getString(a1, (__int128 *)v35);
  if (*(char *)(v25 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v25, *(_QWORD *)(v25 + 8));
  }
  else
  {
    v26 = *(_OWORD *)v25;
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v25 + 16);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v26;
  }
  if (v36 < 0)
    operator delete(v35[0]);
  std::string::basic_string[abi:ne180100]<0>(v35, "enable-wordmap");
  Bool = quasar::PTree::getBool(a1, (__int128 *)v35);
  if (v36 < 0)
    operator delete(v35[0]);
  std::string::basic_string[abi:ne180100]<0>(v35, "norm-factor");
  Double = quasar::PTree::getDouble(a1, (__int128 *)v35);
  if (v36 < 0)
    operator delete(v35[0]);
  std::string::basic_string[abi:ne180100]<0>(v35, "max-context-size");
  v29 = quasar::PTree::getInt<int>(a1, (__int128 *)v35);
  if (v36 < 0)
    operator delete(v35[0]);
  v30 = (quasar::LmModel2 *)operator new();
  v31 = Double;
  quasar::NNLmModel::NNLmModel((uint64_t)v30, (uint64_t)&v42, (uint64_t)&__p, Bool, v29, *a2, a2[1], v31);
  quasar::LmModel2::setModelSysConfigParams(v30, (const quasar::LmBuildConfig::ModelSysConfigParameters *)a2);
  *a4 = v30;
  v32 = (quasar::LmModel2 *)operator new();
  *(_QWORD *)v32 = &unk_1E5D464D0;
  *((_QWORD *)v32 + 1) = 0;
  *((_QWORD *)v32 + 2) = 0;
  *((_QWORD *)v32 + 3) = v30;
  a4[1] = v32;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
}

void sub_1ADA1FE94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,void *a22,int a23,__int16 a24,char a25,char a26,int a27,__int16 a28,char a29,char a30,void *a31,void *a32,int a33,__int16 a34,char a35,char a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  uint64_t v53;
  uint64_t v54;

  if (a53 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  a31 = (void *)(v53 + 16);
  if (a40 < 0)
    operator delete(a32);
  if (a30 < 0)
    operator delete(a22);
  if (a46 < 0)
    operator delete(a41);
  if (a20 < 0)
    operator delete(a15);
  if (*(char *)(v54 - 137) < 0)
    operator delete(*(void **)(v54 - 160));
  a31 = (void *)(v54 - 136);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  if (*(char *)(v54 - 89) < 0)
    operator delete(*(void **)(v54 - 112));
  _Unwind_Resume(a1);
}

void quasar::NNLmConfig::~NNLmConfig(void **this)
{
  *this = off_1E5D34320;
  if (*((char *)this + 239) < 0)
    operator delete(this[27]);
  if (*((char *)this + 191) < 0)
    operator delete(this[21]);
  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  quasar::LmBuildConfig::~LmBuildConfig(this);
}

{
  *this = off_1E5D34320;
  if (*((char *)this + 239) < 0)
    operator delete(this[27]);
  if (*((char *)this + 191) < 0)
    operator delete(this[21]);
  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  quasar::LmBuildConfig::~LmBuildConfig(this);
  JUMPOUT(0x1AF44D190);
}

void quasar::NNLmModel::~NNLmModel(quasar::NNLmModel *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E5D3BEE0;
  *((_QWORD *)this + 113) = &off_1E5D3BF30;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 888);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 872);
  v2 = *((_QWORD *)this + 108);
  *((_QWORD *)this + 108) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  quasar::ModelLoader::~ModelLoader((quasar::NNLmModel *)((char *)this + 240));
  quasar::LmModel2::~LmModel2(this, (uint64_t *)&off_1E5D15518);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E5D3BEE0;
  *((_QWORD *)this + 113) = &off_1E5D3BF30;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 888);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 872);
  v2 = *((_QWORD *)this + 108);
  *((_QWORD *)this + 108) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  quasar::ModelLoader::~ModelLoader((quasar::NNLmModel *)((char *)this + 240));
  quasar::LmModel2::~LmModel2(this, (uint64_t *)&off_1E5D15518);
  JUMPOUT(0x1AF44D190);
}

void `virtual thunk to'quasar::NNLmModel::~NNLmModel(quasar::NNLmModel *this)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  *v1 = &off_1E5D3BEE0;
  v1[113] = &off_1E5D3BF30;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 111));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 109));
  v2 = v1[108];
  v1[108] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  quasar::ModelLoader::~ModelLoader((quasar::ModelLoader *)(v1 + 30));
  quasar::LmModel2::~LmModel2((quasar::LmModel2 *)v1, (uint64_t *)&off_1E5D15518);
}

{
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  *v1 = &off_1E5D3BEE0;
  v1[113] = &off_1E5D3BF30;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 111));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 109));
  v2 = v1[108];
  v1[108] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  quasar::ModelLoader::~ModelLoader((quasar::ModelLoader *)(v1 + 30));
  quasar::LmModel2::~LmModel2((quasar::LmModel2 *)v1, (uint64_t *)&off_1E5D15518);
  JUMPOUT(0x1AF44D190);
}

std::string *std::allocate_shared[abi:ne180100]<quasar::NNLmConfig::NNLmConfigParameters,std::allocator<quasar::NNLmConfig::NNLmConfigParameters>,quasar::NNLmConfig::NNLmConfigParameters const&,void>@<X0>(const quasar::NNLmConfig::NNLmConfigParameters *a1@<X1>, _QWORD *a2@<X8>)
{
  std::string *v4;
  std::string *result;

  v4 = (std::string *)operator new(0x90uLL);
  result = std::__shared_ptr_emplace<quasar::NNLmConfig::NNLmConfigParameters>::__shared_ptr_emplace[abi:ne180100]<quasar::NNLmConfig::NNLmConfigParameters const&,std::allocator<quasar::NNLmConfig::NNLmConfigParameters>,0>(v4, a1);
  *a2 = v4 + 1;
  a2[1] = v4;
  return result;
}

void sub_1ADA203D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<quasar::NNLmConfig::NNLmConfigParameters>::__shared_ptr_emplace[abi:ne180100]<quasar::NNLmConfig::NNLmConfigParameters const&,std::allocator<quasar::NNLmConfig::NNLmConfigParameters>,0>(std::string *a1, const quasar::NNLmConfig::NNLmConfigParameters *a2)
{
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D423D8;
  a1->__r_.__value_.__l.__size_ = 0;
  quasar::NNLmConfig::NNLmConfigParameters::NNLmConfigParameters(a1 + 1, a2);
  return a1;
}

void sub_1ADA2041C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::NNLmConfig::NNLmConfigParameters>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D423D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::NNLmConfig::NNLmConfigParameters>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D423D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::NNLmConfig::NNLmConfigParameters>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<quasar::NNLmConfig::NNLmConfigParameters>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

std::string *quasar::NNLmConfig::NNLmConfigParameters::NNLmConfigParameters(std::string *this, const quasar::NNLmConfig::NNLmConfigParameters *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  v7 = *(_OWORD *)((char *)a2 + 72);
  this[3].__r_.__value_.__s.__data_[16] = *((_BYTE *)a2 + 88);
  *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v7;
  v8 = this + 4;
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v9 = *((_OWORD *)a2 + 6);
    this[4].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 14);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  return this;
}

void sub_1ADA20590(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::allocator<quasar::NNLmConfig::NNLmConfigParameters>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 119) < 0)
    operator delete(*(void **)(a2 + 96));
  if (*(char *)(a2 + 71) < 0)
    operator delete(*(void **)(a2 + 48));
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void std::__function::__func<quasar::NNLmModel::NNLmModel(std::string const&,std::string const&,std::string const&,std::shared_ptr<quasar::NNLmConfig const> const&)::$_0,std::allocator<quasar::NNLmModel::NNLmModel(std::string const&,std::string const&,std::string const&,std::shared_ptr<quasar::NNLmConfig const> const&)::$_0>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::NNLmModel::NNLmModel(std::string const&,std::string const&,std::string const&,std::shared_ptr<quasar::NNLmConfig const> const&)::$_0,std::allocator<quasar::NNLmModel::NNLmModel(std::string const&,std::string const&,std::string const&,std::shared_ptr<quasar::NNLmConfig const> const&)::$_0>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5D3EE80;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::NNLmModel::NNLmModel(std::string const&,std::string const&,std::string const&,std::shared_ptr<quasar::NNLmConfig const> const&)::$_0,std::allocator<quasar::NNLmModel::NNLmModel(std::string const&,std::string const&,std::string const&,std::shared_ptr<quasar::NNLmConfig const> const&)::$_0>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5D3EE80;
  a2[1] = v2;
  return result;
}

void std::__function::__func<quasar::NNLmModel::NNLmModel(std::string const&,std::string const&,std::string const&,std::shared_ptr<quasar::NNLmConfig const> const&)::$_0,std::allocator<quasar::NNLmModel::NNLmModel(std::string const&,std::string const&,std::string const&,std::shared_ptr<quasar::NNLmConfig const> const&)::$_0>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  quasar::ModelLoader::readNeuralNetworkLm((_QWORD *)(v3 + 240), a2, *(_QWORD *)(v3 + 872) + 48, *(_BYTE *)(*(_QWORD *)(v3 + 872) + 72), *(_DWORD *)(*(_QWORD *)(v3 + 872) + 80), a3, *(float *)(*(_QWORD *)(v3 + 872) + 76));
}

uint64_t std::__function::__func<quasar::NNLmModel::NNLmModel(std::string const&,std::string const&,std::string const&,std::shared_ptr<quasar::NNLmConfig const> const&)::$_0,std::allocator<quasar::NNLmModel::NNLmModel(std::string const&,std::string const&,std::string const&,std::shared_ptr<quasar::NNLmConfig const> const&)::$_0>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::NNLmModel::NNLmModel(std::string const&,std::string const&,std::string const&,std::shared_ptr<quasar::NNLmConfig const> const&)::$_0,std::allocator<quasar::NNLmModel::NNLmModel(std::string const&,std::string const&,std::string const&,std::shared_ptr<quasar::NNLmConfig const> const&)::$_0>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::target_type()
{
}

uint64_t std::__function::__func<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0,std::allocator<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E5D3EED8;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void std::__function::__func<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0,std::allocator<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E5D3EED8;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0,std::allocator<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_1E5D3EED8;
  std::__compressed_pair_elem<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1ADA207D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0,std::allocator<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1E5D3EED8;
  return std::__compressed_pair_elem<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0,std::allocator<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
}

void std::__function::__func<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0,std::allocator<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 39) < 0)
    operator delete(__p[2]);
  operator delete(__p);
}

void std::__function::__func<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0,std::allocator<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  quasar::ModelLoader::readNeuralNetworkLm((_QWORD *)(*(_QWORD *)(a1 + 8) + 240), a2, a1 + 16, *(_BYTE *)(a1 + 40), *(_DWORD *)(a1 + 48), a3, *(float *)(a1 + 44));
}

uint64_t std::__function::__func<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0,std::allocator<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0,std::allocator<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  v6 = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  return a1;
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::NNLmModel,std::allocator<quasar::NNLmModel>,std::string,std::string&,quasar::filesystem::Path &,std::shared_ptr<quasar::NNLmConfig const> const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, kaldi::quasar::Vocab *a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0x3B8uLL);
  result = std::__shared_ptr_emplace<quasar::NNLmModel>::__shared_ptr_emplace[abi:ne180100]<std::string,std::string&,quasar::filesystem::Path &,std::shared_ptr<quasar::NNLmConfig const> const&,std::allocator<quasar::NNLmModel>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1ADA2097C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::NNLmModel>::__shared_ptr_emplace[abi:ne180100]<std::string,std::string&,quasar::filesystem::Path &,std::shared_ptr<quasar::NNLmConfig const> const&,std::allocator<quasar::NNLmModel>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, kaldi::quasar::Vocab *this, uint64_t a5)
{
  char v7;

  a1[2] = 0;
  *a1 = &unk_1E5D453C0;
  a1[1] = 0;
  std::allocator<quasar::NNLmModel>::construct[abi:ne180100]<quasar::NNLmModel,std::string,std::string&,quasar::filesystem::Path &,std::shared_ptr<quasar::NNLmConfig const> const&>((int)&v7, (uint64_t)(a1 + 3), a2, a3, this, a5);
  return a1;
}

void sub_1ADA209E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::NNLmModel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D453C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::NNLmModel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D453C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::NNLmModel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocator<quasar::NNLmModel>::construct[abi:ne180100]<quasar::NNLmModel,std::string,std::string&,quasar::filesystem::Path &,std::shared_ptr<quasar::NNLmConfig const> const&>(int a1, uint64_t a2, uint64_t a3, uint64_t a4, kaldi::quasar::Vocab *this, uint64_t a6)
{
  std::string __p;

  kaldi::quasar::Vocab::OOvWord(this, &__p);
  quasar::NNLmModel::NNLmModel(a2, a3, a4, (uint64_t)&__p, a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1ADA20AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<quasar::NNLmModel  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<quasar::NNLmModel  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::NNLmModel  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

char *quasar::ComputeAheadFeatInput::ComputeAheadFeatInput(char *a1, uint64_t *a2, int a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *inactive;
  NSObject *initially_inactive;
  NSObject *v17;

  *(_QWORD *)a1 = &off_1E5D38368;
  v10 = *a2;
  v11 = a2[1];
  *((_QWORD *)a1 + 1) = *a2;
  v12 = (uint64_t *)(a1 + 8);
  *((_QWORD *)a1 + 2) = v11;
  if (v11)
  {
    v13 = (unint64_t *)(v11 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v10 = *v12;
  }
  *((_DWORD *)a1 + 6) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  *((_DWORD *)a1 + 7) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 1) + 24))(*((_QWORD *)a1 + 1));
  *((_DWORD *)a1 + 8) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 1) + 32))(*((_QWORD *)a1 + 1));
  a1[36] = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 1) + 40))(*((_QWORD *)a1 + 1));
  a1[37] = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 1) + 48))(*((_QWORD *)a1 + 1));
  *((_DWORD *)a1 + 10) = a4;
  *((_DWORD *)a1 + 11) = a5;
  *((_QWORD *)a1 + 6) = 850045863;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *((_QWORD *)a1 + 13) = 0;
  *((_QWORD *)a1 + 14) = 1018212795;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *((_QWORD *)a1 + 25) = 0;
  *((_DWORD *)a1 + 52) = a4;
  *((_DWORD *)a1 + 53) = 0;
  a1[216] = 0;
  if (a3)
  {
    inactive = dispatch_workloop_create_inactive("ComputeAheadFeatInput");
    dispatch_workloop_set_scheduler_priority();
    dispatch_set_qos_class_fallback();
    dispatch_activate(inactive);
    initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
    v17 = dispatch_queue_create("ComputeAheadFeatInput", initially_inactive);
    dispatch_set_target_queue(v17, inactive);
    dispatch_set_qos_class_floor(v17, QOS_CLASS_USER_INTERACTIVE, 0);
    dispatch_activate(v17);
  }
  else
  {
    v17 = dispatch_queue_create("ComputeAheadFeatInput", 0);
  }
  *((_QWORD *)a1 + 28) = v17;
  dispatch_async_f(v17, a1, (dispatch_function_t)quasar::ComputeAheadFeatInput::CallComputeAheadAndNotify);
  return a1;
}

void sub_1ADA20D1C(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  uint64_t v2;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

BOOL quasar::ComputeAheadFeatInput::Compute(uint64_t a1, uint64_t *a2)
{
  int v4;
  BOOL v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  int v14;
  int v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v19;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 48);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 48));
  while (!*(_QWORD *)(a1 + 200))
    std::condition_variable::wait((std::condition_variable *)(a1 + 112), &__lk);
  v4 = *(_DWORD *)(a1 + 44);
  v5 = v4 < 1 || *(_DWORD *)(a1 + 212) < v4;
  v6 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 168) + ((*(_QWORD *)(a1 + 192) >> 5) & 0x7FFFFFFFFFFFFF8))
                 + 16 * *(_QWORD *)(a1 + 192));
  v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 168) + ((*(_QWORD *)(a1 + 192) >> 5) & 0x7FFFFFFFFFFFFF8))
                  + 16 * *(_QWORD *)(a1 + 192));
  v7 = *(std::__shared_weak_count **)(*(_QWORD *)(*(_QWORD *)(a1 + 168)
                                                + ((*(_QWORD *)(a1 + 192) >> 5) & 0x7FFFFFFFFFFFFF8))
                                    + 16 * *(_QWORD *)(a1 + 192)
                                    + 8);
  if (*((_QWORD *)&v6 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::deque<std::shared_ptr<quasar::ComputeAheadFeatInput::Batch>>::pop_front((int64x2_t *)(a1 + 160));
  *(_DWORD *)(a1 + 212) -= kaldi::MatrixBase<float>::NumRows(v19);
  if ((int)kaldi::MatrixBase<float>::NumRows(*a2) >= 1)
    *(_DWORD *)(a1 + 208) = kaldi::MatrixBase<float>::NumRows(*a2);
  kaldi::Matrix<float>::Swap((uint64_t *)*a2, (uint64_t *)v19);
  v10 = (uint64_t *)a2[1];
  if (v10)
    kaldi::Matrix<float>::Swap(v10, (uint64_t *)(v19 + 40));
  v11 = (uint64_t *)a2[3];
  if (v11)
    kaldi::Matrix<float>::Swap(v11, (uint64_t *)(v19 + 120));
  v12 = (uint64_t *)a2[4];
  if (v12)
    kaldi::Matrix<float>::Swap(v12, (uint64_t *)(v19 + 160));
  v13 = (uint64_t *)a2[5];
  if (v13)
    kaldi::Matrix<float>::Swap(v13, (uint64_t *)(v19 + 200));
  if (!v5)
  {
    v14 = *(_DWORD *)(a1 + 44);
    if (v14 < 1 || *(_DWORD *)(a1 + 212) < v14)
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 112));
  }
  v15 = *(unsigned __int8 *)(v19 + 240);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  return v15 != 0;
}

void sub_1ADA20F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, std::mutex *a13, char a14)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (a14)
    std::mutex::unlock(a13);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::shared_ptr<quasar::ComputeAheadFeatInput::Batch>>::pop_front(int64x2_t *a1)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](*(_QWORD *)(a1->i64[1] + (((unint64_t)a1[2].i64[0] >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * a1[2].i64[0]);
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1AE13F780);
  return std::deque<std::pair<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> *,int>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

uint64_t quasar::ComputeAheadFeatInput::Dim(quasar::ComputeAheadFeatInput *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t quasar::ComputeAheadFeatInput::ChunkSize(quasar::ComputeAheadFeatInput *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
}

uint64_t quasar::ComputeAheadFeatInput::FrameDurationMs(quasar::ComputeAheadFeatInput *this)
{
  return *((unsigned int *)this + 7);
}

uint64_t quasar::ComputeAheadFeatInput::FrameDurationMsForAlignment(quasar::ComputeAheadFeatInput *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t quasar::ComputeAheadFeatInput::HasSilencePosterior(quasar::ComputeAheadFeatInput *this)
{
  return *((unsigned __int8 *)this + 36);
}

uint64_t quasar::ComputeAheadFeatInput::HasEndpointerScore(quasar::ComputeAheadFeatInput *this)
{
  return *((unsigned __int8 *)this + 37);
}

void quasar::ComputeAheadFeatInput::~ComputeAheadFeatInput(quasar::ComputeAheadFeatInput *this)
{
  std::mutex *v2;

  *(_QWORD *)this = &off_1E5D38368;
  v2 = (std::mutex *)((char *)this + 48);
  std::mutex::lock((std::mutex *)((char *)this + 48));
  *((_BYTE *)this + 216) = 1;
  std::condition_variable::notify_one((std::condition_variable *)((char *)this + 112));
  std::mutex::unlock(v2);
  dispatch_sync_f(*((dispatch_queue_t *)this + 28), 0, (dispatch_function_t)quasar::ComputeAheadFeatInput::WaitForComputeAheadToFinish);
  dispatch_release(*((dispatch_object_t *)this + 28));
  std::deque<std::shared_ptr<quasar::ComputeAheadFeatInput::Batch>>::~deque[abi:ne180100]((_QWORD *)this + 20);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 112));
  std::mutex::~mutex(v2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  quasar::Bitmap::~Bitmap(this);
}

{
  quasar::ComputeAheadFeatInput::~ComputeAheadFeatInput(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::ComputeAheadFeatInput::ComputeUntilResults(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (***v6)(_QWORD, _OWORD *);
  __int128 v7;
  uint64_t v8;
  _OWORD v10[3];

  v4 = kaldi::MatrixBase<float>::NumRows(*(_QWORD *)a2);
  v5 = kaldi::MatrixBase<float>::NumCols(*(_QWORD *)a2);
  do
  {
    if (!kaldi::MatrixBase<float>::NumRows(*(_QWORD *)a2))
      kaldi::Matrix<float>::Resize(*(int32x2_t **)a2, v4, v5, 0, 0);
    v6 = *(uint64_t (****)(_QWORD, _OWORD *))(a1 + 8);
    v7 = *(_OWORD *)(a2 + 16);
    v10[0] = *(_OWORD *)a2;
    v10[1] = v7;
    v10[2] = *(_OWORD *)(a2 + 32);
    v8 = (**v6)(v6, v10);
  }
  while ((_DWORD)v8 && !kaldi::MatrixBase<float>::NumRows(*(_QWORD *)a2));
  return v8;
}

void quasar::ComputeAheadFeatInput::ComputeAheadAndNotify(quasar::ComputeAheadFeatInput *this)
{
  uint64_t v2;
  std::mutex *v3;
  _QWORD *v4;
  std::condition_variable *v5;
  int32x2_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  char v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::unique_lock<std::mutex> v14;
  _OWORD v15[3];
  _OWORD v16[3];
  __int128 v17;

  v2 = *((unsigned int *)this + 10);
  v3 = (std::mutex *)((char *)this + 48);
  v4 = (_QWORD *)((char *)this + 160);
  v5 = (std::condition_variable *)((char *)this + 112);
  do
  {
    while (1)
    {
      _ZNSt3__115allocate_sharedB8ne180100IN6quasar21ComputeAheadFeatInput5BatchENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v17);
      v6 = (int32x2_t *)v17;
      v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 8))(*((_QWORD *)this + 1));
      kaldi::Matrix<float>::Resize(v6, v2, v7, 1, 0);
      kaldi::OnlineFeatInputItfIO::OnlineFeatInputItfIO(v16, v17, v17 + 40, v17 + 80, v17 + 120, v17 + 160, v17 + 200);
      v15[0] = v16[0];
      v15[1] = v16[1];
      v15[2] = v16[2];
      v8 = quasar::ComputeAheadFeatInput::ComputeUntilResults((uint64_t)this, (uint64_t)v15);
      *(_BYTE *)(v17 + 240) = v8;
      v14.__m_ = v3;
      v14.__owns_ = 1;
      std::mutex::lock(v3);
      std::deque<std::shared_ptr<quasar::ComputeAheadFeatInput::Batch>>::push_back(v4, &v17);
      *((_DWORD *)this + 53) += kaldi::MatrixBase<float>::NumRows(v17);
      if (*((_QWORD *)this + 25) == 1)
        std::condition_variable::notify_one(v5);
      if (!v8)
        goto LABEL_10;
      v9 = *((_DWORD *)this + 11);
      if (v9 >= 1)
      {
        do
        {
          if (*((_DWORD *)this + 53) < v9)
            break;
          if (*((_BYTE *)this + 216))
            goto LABEL_10;
          std::condition_variable::wait(v5, &v14);
          v9 = *((_DWORD *)this + 11);
        }
        while (v9 > 0);
      }
      if (!*((_BYTE *)this + 216))
      {
        v2 = *((unsigned int *)this + 52);
        v10 = 1;
      }
      else
      {
LABEL_10:
        v10 = 0;
      }
      if (v14.__owns_)
        std::mutex::unlock(v14.__m_);
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
      if (*((_QWORD *)&v17 + 1))
      {
        v12 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
          break;
      }
      if ((v10 & 1) == 0)
        return;
    }
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  while ((v10 & 1) != 0);
}

void sub_1ADA212EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  uint64_t v10;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v10 - 80);
  _Unwind_Resume(a1);
}

void std::deque<std::shared_ptr<quasar::ComputeAheadFeatInput::Batch>>::push_back(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = 32 * (v4 - v5) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<std::shared_ptr<quasar::ComputeAheadFeatInput::Batch>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = v7 + a1[4];
  }
  v9 = *a2;
  *(_OWORD *)(*(_QWORD *)(v5 + ((v8 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v8) = *a2;
  if (*((_QWORD *)&v9 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v7 = a1[5];
  }
  a1[5] = v7 + 1;
}

void kaldi::OnlineFeatInputItf::getSnrTracker(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t std::deque<std::shared_ptr<quasar::ComputeAheadFeatInput::Batch>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 >> 8];
    v7 = (uint64_t)*v6 + 16 * v5;
    v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*((_BYTE *)a1 + 40) + v5);
    if (v7 != v8)
    {
      do
      {
        v7 = std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v7) + 16;
        if (v7 - (_QWORD)*v6 == 4096)
        {
          v9 = (uint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 128;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 256;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    v13 = *v2++;
    operator delete(v13);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

uint64_t _ZNSt3__115allocate_sharedB8ne180100IN6quasar21ComputeAheadFeatInput5BatchENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  uint64_t result;

  v2 = (char *)operator new(0x110uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN6quasar21ComputeAheadFeatInput5BatchENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_((uint64_t)v2);
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_1ADA21518(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__120__shared_ptr_emplaceIN6quasar21ComputeAheadFeatInput5BatchENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E5D439B8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  quasar::ComputeAheadFeatInput::Batch::Batch((quasar::ComputeAheadFeatInput::Batch *)(a1 + 24));
  return a1;
}

void sub_1ADA215A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::ComputeAheadFeatInput::Batch>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D439B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::ComputeAheadFeatInput::Batch>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D439B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::ComputeAheadFeatInput::Batch>::__on_zero_shared(uint64_t a1)
{
  char v2;

  return std::allocator<quasar::ComputeAheadFeatInput::Batch>::destroy[abi:ne180100]((uint64_t)&v2, a1 + 24);
}

quasar::ComputeAheadFeatInput::Batch *quasar::ComputeAheadFeatInput::Batch::Batch(quasar::ComputeAheadFeatInput::Batch *this)
{
  uint64_t v2;

  kaldi::Matrix<float>::Matrix((uint64_t)this);
  kaldi::Matrix<float>::Matrix(v2 + 40);
  kaldi::Matrix<float>::Matrix((uint64_t)this + 80);
  kaldi::Matrix<float>::Matrix((uint64_t)this + 120);
  kaldi::Matrix<float>::Matrix((uint64_t)this + 160);
  kaldi::Matrix<float>::Matrix((uint64_t)this + 200);
  return this;
}

void sub_1ADA21698(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = v4;
  kaldi::Matrix<float>::~Matrix(v6);
  kaldi::Matrix<float>::~Matrix(v5);
  kaldi::Matrix<float>::~Matrix(v3);
  kaldi::Matrix<float>::~Matrix(v2);
  kaldi::Matrix<float>::~Matrix(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<quasar::ComputeAheadFeatInput::Batch>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  kaldi::Matrix<float>::~Matrix(a2 + 200);
  kaldi::Matrix<float>::~Matrix(a2 + 160);
  kaldi::Matrix<float>::~Matrix(a2 + 120);
  kaldi::Matrix<float>::~Matrix(a2 + 80);
  kaldi::Matrix<float>::~Matrix(a2 + 40);
  return kaldi::Matrix<float>::~Matrix(a2);
}

void std::deque<std::shared_ptr<quasar::ComputeAheadFeatInput::Batch>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1ADA21A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t quasar::readIVectors@<X0>(std::string *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;
  int v9;
  std::string *v10;
  std::string::size_type size;
  _QWORD *v12;
  _OWORD v13[17];
  uint64_t v14;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v14 = 0;
  kaldi::SequentialTableReader<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::Open(&v14, this);
  if (!v14)
  {
    memset(v13, 0, sizeof(v13));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"ivector file ", 13);
    v9 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if (v9 >= 0)
      v10 = this;
    else
      v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    if (v9 >= 0)
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    else
      size = this->__r_.__value_.__l.__size_;
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v10, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" cannot be opened", 17);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v13);
  }
  while (1)
  {
    kaldi::SequentialTableReader<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::CheckImpl(&v14);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14) & 1) != 0)
      break;
    kaldi::SequentialTableReader<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::CheckImpl(&v14);
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
    v5 = a2[1];
    if (v5 >= a2[2])
    {
      v6 = std::vector<kaldi::Vector<float>>::__push_back_slow_path<kaldi::Vector<float> const&>(a2, v4);
    }
    else
    {
      std::vector<kaldi::Vector<float>>::__construct_one_at_end[abi:ne180100]<kaldi::Vector<float> const&>((uint64_t)a2, v4);
      v6 = v5 + 24;
    }
    a2[1] = v6;
    kaldi::SequentialTableReader<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::CheckImpl(&v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14);
  }
  result = v14;
  if (v14)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 72))(v14);
  return result;
}

void sub_1ADA21BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v11;

  v11 = *(_QWORD *)(v9 - 40);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11);
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::SequentialTableReader<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::Open(uint64_t *a1, std::string *this)
{
  int v4;
  uint64_t v5;
  uint64_t (**v6)(int, std::string *);
  uint64_t result;
  _QWORD *v8;
  int v9;
  std::string *v10;
  std::string::size_type size;
  _QWORD v12[34];

  if (*a1 && (kaldi::SequentialTableReader<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::Close(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, "SequentialTableReader<Holder>::Open(), could not close previously open object.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
  v4 = kaldi::ClassifyRspecifier(this, 0, 0);
  if (v4 == 2)
  {
    v5 = operator new();
    v6 = &off_1E5D2AE48;
    *(_QWORD *)v5 = &off_1E5D2AE48;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 24) = 0;
    *(_OWORD *)(v5 + 40) = 0u;
    *(_OWORD *)(v5 + 56) = 0u;
    *(_OWORD *)(v5 + 72) = 0u;
    *(_DWORD *)(v5 + 88) = 0;
    *(_QWORD *)(v5 + 104) = 0;
    *(_QWORD *)(v5 + 112) = 0;
    *(_QWORD *)(v5 + 96) = 0;
    *(_DWORD *)(v5 + 120) = 0;
LABEL_7:
    *a1 = v5;
    if (((*v6)(v5, this) & 1) != 0)
      return 1;
    if (*a1)
      (*(void (**)(uint64_t))(*(_QWORD *)*a1 + 72))(*a1);
    result = 0;
    *a1 = 0;
    return result;
  }
  if (v4 == 1)
  {
    v5 = operator new();
    v6 = &off_1E5D2AEA8;
    *(_QWORD *)v5 = &off_1E5D2AEA8;
    *(_OWORD *)(v5 + 8) = 0u;
    *(_OWORD *)(v5 + 24) = 0u;
    *(_OWORD *)(v5 + 40) = 0u;
    *(_OWORD *)(v5 + 56) = 0u;
    *(_QWORD *)(v5 + 72) = 0;
    goto LABEL_7;
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Invalid rspecifier ", 19);
    v9 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if (v9 >= 0)
      v10 = this;
    else
      v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    if (v9 >= 0)
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    else
      size = this->__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v10, size);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
  }
  return 0;
}

void sub_1ADA21DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::readLandmarkHashVectors@<X0>(std::string *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;
  int v9;
  std::string *v10;
  std::string::size_type size;
  _QWORD *v12;
  _OWORD v13[17];
  uint64_t v14;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v14 = 0;
  kaldi::SequentialTableReader<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::Open(&v14, this);
  if (!v14)
  {
    memset(v13, 0, sizeof(v13));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Landmark hash ark file ", 23);
    v9 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if (v9 >= 0)
      v10 = this;
    else
      v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    if (v9 >= 0)
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    else
      size = this->__r_.__value_.__l.__size_;
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v10, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" cannot be opened", 17);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v13);
  }
  while (1)
  {
    kaldi::SequentialTableReader<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::CheckImpl(&v14);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14) & 1) != 0)
      break;
    kaldi::SequentialTableReader<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::CheckImpl(&v14);
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
    v5 = a2[1];
    if (v5 >= a2[2])
    {
      v6 = std::vector<kaldi::Vector<float>>::__push_back_slow_path<kaldi::Vector<float> const&>(a2, v4);
    }
    else
    {
      std::vector<kaldi::Vector<float>>::__construct_one_at_end[abi:ne180100]<kaldi::Vector<float> const&>((uint64_t)a2, v4);
      v6 = v5 + 24;
    }
    a2[1] = v6;
    kaldi::SequentialTableReader<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::CheckImpl(&v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14);
  }
  result = v14;
  if (v14)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 72))(v14);
  return result;
}

void sub_1ADA21F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v11;

  v11 = *(_QWORD *)(v9 - 40);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11);
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void quasar::computeDotProducts(uint64_t a1@<X0>, const float ***a2@<X1>, uint64_t a3@<X8>)
{
  const float **v6;
  const float **v7;
  float v8;
  float v9;
  unint64_t v10;
  float *v11;
  float *v12;
  float *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  float *v19;
  int v20;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  std::vector<float>::reserve((void **)a3, 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      v8 = kaldi::VecVec<float>(a1, v6);
      v9 = v8;
      v11 = *(float **)(a3 + 8);
      v10 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v11 >= v10)
      {
        v13 = *(float **)a3;
        v14 = ((uint64_t)v11 - *(_QWORD *)a3) >> 2;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v16 = v10 - (_QWORD)v13;
        if (v16 >> 1 > v15)
          v15 = v16 >> 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a3 + 16, v17);
          v13 = *(float **)a3;
          v11 = *(float **)(a3 + 8);
        }
        else
        {
          v18 = 0;
        }
        v19 = (float *)&v18[4 * v14];
        *v19 = v9;
        v12 = v19 + 1;
        while (v11 != v13)
        {
          v20 = *((_DWORD *)v11-- - 1);
          *((_DWORD *)v19-- - 1) = v20;
        }
        *(_QWORD *)a3 = v19;
        *(_QWORD *)(a3 + 8) = v12;
        *(_QWORD *)(a3 + 16) = &v18[4 * v17];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *v11 = v8;
        v12 = v11 + 1;
      }
      *(_QWORD *)(a3 + 8) = v12;
      v6 += 3;
    }
    while (v6 != v7);
  }
}

void sub_1ADA220A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<float>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = &v6[4 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void quasar::tNormalize(float **a1@<X0>, float **a2@<X1>, uint64_t a3@<X8>)
{
  float *v6;
  float *v7;
  double v8;
  float *v9;
  float v10;
  double v11;
  double v12;
  float *v13;
  float v14;
  double v15;
  float *v16;
  float *v17;
  unint64_t v18;
  float *v19;
  float *v20;
  double v21;
  unint64_t v22;
  float *v23;
  float v24;
  float *v25;
  float *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  float *v35;
  int v36;
  float v37;
  int v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;

  v6 = *a2;
  v7 = a2[1];
  v8 = 0.0;
  if (*a2 != v7)
  {
    v9 = *a2;
    do
    {
      v10 = *v9++;
      v8 = v8 + v10;
    }
    while (v9 != v7);
  }
  v11 = v8 / (double)(unint64_t)(v7 - v6);
  if (quasar::gLogLevel >= 6)
  {
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v39 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"imposterMean=", 13);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v39);
    v6 = *a2;
    v7 = a2[1];
  }
  v12 = 0.0;
  if (v6 != v7)
  {
    v13 = v6;
    do
    {
      v14 = *v13++;
      v12 = v12 + (v14 - v11) * (v14 - v11);
    }
    while (v13 != v7);
  }
  v15 = sqrt(v12 / (double)(unint64_t)(v7 - v6));
  if (quasar::gLogLevel >= 6)
  {
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v39 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"imposterStd=", 12);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v39);
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  std::vector<float>::reserve((void **)a3, a1[1] - *a1);
  v16 = *a1;
  v17 = a1[1];
  if (*a1 != v17)
  {
    do
    {
      if (v15 == 0.0)
      {
        v19 = *(float **)(a3 + 8);
        v18 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v19 >= v18)
        {
          v26 = *(float **)a3;
          v27 = ((uint64_t)v19 - *(_QWORD *)a3) >> 2;
          v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v29 = v18 - (_QWORD)v26;
          if (v29 >> 1 > v28)
            v28 = v29 >> 1;
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
            v30 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v30 = v28;
          if (v30)
          {
            v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a3 + 16, v30);
            v26 = *(float **)a3;
            v19 = *(float **)(a3 + 8);
          }
          else
          {
            v31 = 0;
          }
          v35 = (float *)&v31[4 * v27];
          *v35 = 3.4028e38;
          v25 = v35 + 1;
          while (v19 != v26)
          {
            v36 = *((_DWORD *)v19-- - 1);
            *((_DWORD *)v35-- - 1) = v36;
          }
LABEL_42:
          *(_QWORD *)a3 = v35;
          *(_QWORD *)(a3 + 8) = v25;
          *(_QWORD *)(a3 + 16) = &v31[4 * v30];
          if (v26)
            operator delete(v26);
          goto LABEL_44;
        }
        *v19 = 3.4028e38;
        v20 = v19 + 1;
      }
      else
      {
        v21 = (*v16 - v11) / v15;
        v23 = *(float **)(a3 + 8);
        v22 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v23 >= v22)
        {
          v26 = *(float **)a3;
          v32 = ((uint64_t)v23 - *(_QWORD *)a3) >> 2;
          v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v34 = v22 - (_QWORD)v26;
          if (v34 >> 1 > v33)
            v33 = v34 >> 1;
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
            v30 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v30 = v33;
          if (v30)
          {
            v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a3 + 16, v30);
            v26 = *(float **)a3;
            v23 = *(float **)(a3 + 8);
          }
          else
          {
            v31 = 0;
          }
          v35 = (float *)&v31[4 * v32];
          v37 = v21;
          *v35 = v37;
          v25 = v35 + 1;
          while (v23 != v26)
          {
            v38 = *((_DWORD *)v23-- - 1);
            *((_DWORD *)v35-- - 1) = v38;
          }
          goto LABEL_42;
        }
        v24 = v21;
        *v23 = v24;
        v20 = v23 + 1;
      }
      v25 = v20;
LABEL_44:
      *(_QWORD *)(a3 + 8) = v25;
      ++v16;
    }
    while (v16 != v17);
  }
}

void sub_1ADA2248C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void quasar::FingerprintDetector::registerParams(quasar::FingerprintDetector *this, quasar::SystemConfig *a2)
{
  void *v4[2];
  char v5;
  void *__p[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(__p, "fingerprint-detector");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 80, 0, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  kaldi::MfccOptions::Register((uint64_t)this + 456, (uint64_t)a2);
  kaldi::SlidingWindowCmnOptions::Register((uint64_t)this + 560, (uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "nnet-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "Name of nnet file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 704, (uint64_t)v4, 0, 80, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "threshold");
  std::string::basic_string[abi:ne180100]<0>(v4, "Threshold to apply to ivector score");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 1216, (uint64_t)v4, 1, 80, 0, 84, 0);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ivector-fingerprint-ark-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "ark file with ivectors for fingerprints");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 728, (uint64_t)v4, 0, 80, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ivector-imposter-ark-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "ark file with ivectors with imposters");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 752, (uint64_t)v4, 0, 80, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "trigger-preceding-max-ms");
  std::string::basic_string[abi:ne180100]<0>(v4, "Maximum amount of audio used before trigger phrase");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 776, (uint64_t)v4, 0, 83, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "trigger-trailing-min-ms");
  std::string::basic_string[abi:ne180100]<0>(v4, "Minimum amount of audio used after trigger phrase");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 780, (uint64_t)v4, 0, 83, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "trigger-trailing-max-ms");
  std::string::basic_string[abi:ne180100]<0>(v4, "Maximum amount of audio used after trigger phrase");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 784, (uint64_t)v4, 0, 83, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "trigger-num-tokens");
  std::string::basic_string[abi:ne180100]<0>(v4, "The number of tokens in the trigger phrase (two for hey siri)");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 788, (uint64_t)v4, 0, 83, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ivector-threshold");
  std::string::basic_string[abi:ne180100]<0>(v4, "Threshold to apply to ivector score");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 1216, (uint64_t)v4, 0, 85, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ivector-score-bias");
  std::string::basic_string[abi:ne180100]<0>(v4, "Bias to apply to ivector score when combining with lmark");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 1220, (uint64_t)v4, 0, 85, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "supported-input-origins-list");
  std::string::basic_string[abi:ne180100]<0>(v4, "The input origins that are supported (should be comma separated)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 640, (uint64_t)v4, 0, 84, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "lmark-hash-strategy");
  std::string::basic_string[abi:ne180100]<0>(v4, "Hashing strategy (e.g. 3x3)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 1224, (uint64_t)v4, 0, 85, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "lmark-hash-start-idx");
  std::string::basic_string[abi:ne180100]<0>(v4, "Feature start idx for hashing");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 1296, (uint64_t)v4, 0, 85, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "lmark-hash-end-idx");
  std::string::basic_string[abi:ne180100]<0>(v4, "Feature end idx for hashing");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 1300, (uint64_t)v4, 0, 85, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "lmark-hash-fingerprint-ark-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "ark file with landmark hash vectors for fingerprints");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 1248, (uint64_t)v4, 0, 85, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "lmark-hash-imposter-ark-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "ark file with landmark hash vectors for imposters");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 1272, (uint64_t)v4, 0, 85, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "lmark-min-len");
  std::string::basic_string[abi:ne180100]<0>(v4, "Min num frames for computing similarity between landmark hash vectors");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 1304, (uint64_t)v4, 0, 85, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "lmark-max-len");
  std::string::basic_string[abi:ne180100]<0>(v4, "Max num frames for computing similarity between landmark hash vectors");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 1308, (uint64_t)v4, 0, 85, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "lmark-threshold");
  std::string::basic_string[abi:ne180100]<0>(v4, "Threshold to apply to landmark similarity");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 1368, (uint64_t)v4, 0, 85, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1ADA22D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void kaldi::MfccOptions::Register(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  kaldi::FrameExtractionOptions::Register(a1, a2);
  kaldi::MelBanksOptions::Register(a1 + 56, a2);
  std::string::basic_string[abi:ne180100]<0>(v6, "num-ceps");
  std::string::basic_string[abi:ne180100]<0>(__p, "Number of cepstra in MFCC computation (including C0)");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 80, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "use-energy");
  std::string::basic_string[abi:ne180100]<0>(__p, "Use energy (not C0) in MFCC computation");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 84, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "energy-floor");
  std::string::basic_string[abi:ne180100]<0>(__p, "Floor on energy (absolute, not relative) in MFCC computation");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 88, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "raw-energy");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, compute energy before preemphasis and windowing");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 92, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "cepstral-lifter");
  std::string::basic_string[abi:ne180100]<0>(__p, "Constant that controls scaling of MFCCs");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 96, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "htk-compat");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, put energy or C0 last and use a factor of sqrt(2) on C0.  Warning: not sufficient to get HTK compatible features (need to change other parameters).");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 100, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1ADA23074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void kaldi::SlidingWindowCmnOptions::Register(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "cmn-window");
  std::string::basic_string[abi:ne180100]<0>(__p, "Window in frames for running average CMN computation");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "min-cmn-window");
  std::string::basic_string[abi:ne180100]<0>(__p, "Minimum CMN window used at start of decoding (adds latency only at start). Only applicable if center == false, ignored otherwise.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 4, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "norm-vars");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, normalize variance to one.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 12, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "center");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, use a window centered on the current frame (to the extent possible, modulo end effects). If false, window is set based on \"cmn-window\" and \"lookahead\".");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 13, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "lookahead");
  std::string::basic_string[abi:ne180100]<0>(__p, "Number of frames to look ahead for online CMN. Ignored if center==true.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 8, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1ADA232C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void quasar::FingerprintDetector::finishInit(quasar::FingerprintDetector *this)
{
  const std::string *v2;
  unsigned __int8 *i;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  void **v31[2];
  char v32;
  int v33;
  void **v34;

  v2 = (const std::string *)((char *)this + 640);
  std::string::basic_string[abi:ne180100]<0>(v31, ",");
  quasar::splitAndTrimNoEmpty(v2, (char *)v31, &v14);
  if (v32 < 0)
    operator delete(v31[0]);
  v4 = (unsigned __int8 *)*((_QWORD *)&v14 + 1);
  for (i = (unsigned __int8 *)v14; i != v4; i += 24)
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)this + 664, i, (uint64_t)i);
  v31[0] = (void **)&v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v31);
  if (*((char *)this + 727) < 0)
    v5 = *((_QWORD *)this + 89);
  else
    v5 = *((unsigned __int8 *)this + 727);
  if (v5)
  {
    *((_BYTE *)this + 448) = 1;
    v6 = *((unsigned int *)this + 128);
    kaldi::Matrix<float>::Resize((int32x2_t *)this + 72, v6, v6, 0, 0);
    kaldi::ComputeDctMatrix<float>((uint64_t)this + 576);
    kaldi::Matrix<float>::Resize((int32x2_t *)this + 72, *((unsigned int *)this + 134), v6, 2, 0);
    if (*((float *)this + 138) != 0.0)
    {
      kaldi::Vector<float>::Resize((void **)this + 77, *((unsigned int *)this + 134), 0);
      v7.n128_u32[0] = *((_DWORD *)this + 138);
      kaldi::ComputeLifterCoeffs((uint64_t *)this + 77, v7);
    }
    fst::FstReadOptions::FstReadOptions(v31, (char *)this + 704, 0, 0, 0);
    v33 = 2;
    kaldi::nnet1::Nnet::ReadMapped((uint64_t)this + 792, (uint64_t)v31);
    quasar::readIVectors((std::string *)((char *)this + 728), (uint64_t *)&v14);
    std::vector<kaldi::Vector<float>>::__vdeallocate((uint64_t *)this + 146);
    *((_OWORD *)this + 73) = v14;
    *((_QWORD *)this + 148) = v15;
    *(_QWORD *)&v15 = 0;
    v14 = 0uLL;
    v34 = (void **)&v14;
    std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&v34);
    quasar::readIVectors((std::string *)((char *)this + 752), (uint64_t *)&v14);
    std::vector<kaldi::Vector<float>>::__vdeallocate((uint64_t *)this + 149);
    *(_OWORD *)((char *)this + 1192) = v14;
    *((_QWORD *)this + 151) = v15;
    *(_QWORD *)&v15 = 0;
    v14 = 0uLL;
    v34 = (void **)&v14;
    std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&v34);
    if (*((_QWORD *)this + 146) != *((_QWORD *)this + 147) && *((_QWORD *)this + 149) == *((_QWORD *)this + 150))
    {
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      v14 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v14);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"imposter ivector file ", 22);
      v10 = *((char *)this + 775);
      if (v10 >= 0)
        v11 = (char *)this + 752;
      else
        v11 = (char *)*((_QWORD *)this + 94);
      if (v10 >= 0)
        v12 = *((unsigned __int8 *)this + 775);
      else
        v12 = *((_QWORD *)this + 95);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v11, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" is empty", 9);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v14);
    }
    if (quasar::gLogLevel >= 4)
    {
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      v14 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"fp-ivectors=enabled", 19);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v14);
    }
    if (v32 < 0)
      operator delete(v31[0]);
  }
  if (*((char *)this + 1247) < 0)
  {
    if (!*((_QWORD *)this + 154))
      return;
  }
  else if (!*((_BYTE *)this + 1247))
  {
    return;
  }
  *((_BYTE *)this + 449) = 1;
  if ((kaldi::hashstring2enum((uint64_t *)this + 153, (int *)this + 328) & 1) == 0)
  {
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v14 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v14);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Unrecognized hash strategy string ", 34);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, (uint64_t)this + 1224);
LABEL_35:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v14);
  }
  if ((*((_DWORD *)this + 324) & 0x80000000) != 0
    || (*((_DWORD *)this + 325) & 0x80000000) != 0
    || (*((_DWORD *)this + 326) & 0x80000000) != 0
    || (*((_DWORD *)this + 327) & 0x80000000) != 0)
  {
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v14 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v14);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v14, "Landmark params not properly set");
    goto LABEL_35;
  }
  quasar::readLandmarkHashVectors((std::string *)this + 52, (uint64_t *)&v14);
  std::vector<kaldi::Vector<float>>::__vdeallocate((uint64_t *)this + 165);
  *(_OWORD *)((char *)this + 1320) = v14;
  *((_QWORD *)this + 167) = v15;
  *(_QWORD *)&v15 = 0;
  v14 = 0uLL;
  v31[0] = (void **)&v14;
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](v31);
  if ((*((char *)this + 1295) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)this + 1295))
      goto LABEL_29;
    goto LABEL_28;
  }
  if (*((_QWORD *)this + 160))
  {
LABEL_28:
    quasar::readLandmarkHashVectors((std::string *)this + 53, (uint64_t *)&v14);
    std::vector<kaldi::Vector<float>>::__vdeallocate((uint64_t *)this + 168);
    *((_OWORD *)this + 84) = v14;
    *((_QWORD *)this + 170) = v15;
    *(_QWORD *)&v15 = 0;
    v14 = 0uLL;
    v31[0] = (void **)&v14;
    std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](v31);
  }
LABEL_29:
  if (quasar::gLogLevel >= 4)
  {
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v14 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"fp-landmark=enabled", 19);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v14);
  }
}

void sub_1ADA23850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  *(_QWORD *)(v9 - 136) = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v9 - 136));
  JUMPOUT(0x1ADA23864);
}

uint64_t quasar::FingerprintDetector::FingerprintDetector(uint64_t a1, __int128 *a2)
{
  uint64_t v3;

  v3 = quasar::Decoder::Decoder(a1, a2);
  *(_QWORD *)v3 = &off_1E5D37098;
  *(_WORD *)(v3 + 448) = 0;
  kaldi::MfccOptions::MfccOptions((kaldi::MfccOptions *)(v3 + 456));
  *(_QWORD *)(a1 + 560) = 0x6400000258;
  *(_DWORD *)(a1 + 568) = 0;
  *(_WORD *)(a1 + 572) = 0;
  kaldi::Matrix<float>::Matrix(a1 + 576);
  *(_QWORD *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 640), "VoiceTrigger");
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_DWORD *)(a1 + 696) = 1065353216;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_QWORD *)(a1 + 784) = 0x2FFFFFFFFLL;
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)(a1 + 792));
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_QWORD *)(a1 + 1216) = 0x3F00000000000000;
  *(_QWORD *)(a1 + 1288) = 0;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_QWORD *)(a1 + 1296) = -1;
  *(_QWORD *)(a1 + 1304) = -1;
  *(_DWORD *)(a1 + 1312) = 2;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_DWORD *)(a1 + 1368) = 1101004800;
  return a1;
}

void sub_1ADA23988(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  void **v6;

  if (*(char *)(v1 + 775) < 0)
    operator delete(*(void **)(v1 + 752));
  if (*(char *)(v1 + 751) < 0)
    operator delete(*(void **)(v1 + 728));
  if (*(char *)(v1 + 727) < 0)
    operator delete(*v6);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v5);
  if (*(char *)(v1 + 663) < 0)
    operator delete(*v4);
  kaldi::Vector<float>::Destroy(v3);
  kaldi::Matrix<float>::~Matrix(v2);
  if (*(char *)(v1 + 503) < 0)
    operator delete(*(void **)(v1 + 480));
  quasar::Decoder::~Decoder((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::FingerprintDetector::fbank2Mfcc(uint64_t a1, int32x2_t *a2, int32x2_t *a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  void *v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  float *v15;
  float v16;
  int v17;
  int v18;
  float v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  void *__dst[2];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  if (kaldi::MatrixBase<float>::NumCols((uint64_t)a2) != *(_DWORD *)(a1 + 512))
  {
    if (kaldi::MatrixBase<float>::NumCols((uint64_t)a2) != *(_DWORD *)(a1 + 512) + 1)
    {
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      *(_OWORD *)__dst = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__dst);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__dst, (uint64_t)"Invalid fbank dims. ", 20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Expected: ", 10);
      v21 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" Got: ", 6);
      kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
      std::ostream::operator<<();
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__dst);
    }
    v6 = kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
    v7 = kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
    kaldi::Matrix<float>::Resize(a2, v6, (v7 - 1), 2, 0);
  }
  v8 = kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
  kaldi::Matrix<float>::Resize(a3, v8, *(unsigned int *)(a1 + 536), 0, 0);
  result = kaldi::MatrixBase<float>::NumRows((uint64_t)a3);
  if ((int)result >= 1)
  {
    v10 = 0;
    do
    {
      v11 = (void *)(*(_QWORD *)a3 + 4 * a3[2].i32[0] * v10);
      v12 = kaldi::MatrixBase<float>::NumCols((uint64_t)a3);
      *(_QWORD *)&v27 = 0;
      __dst[0] = v11;
      __dst[1] = (void *)v12;
      v13 = *(_QWORD *)a2 + 4 * a2[2].i32[0] * v10;
      v14 = kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
      v24 = 0;
      v25 = 0;
      v22 = v13;
      v23 = v14;
      kaldi::VectorBase<float>::AddMatVec((uint64_t)__dst, (const float **)(a1 + 576), CblasNoTrans, (uint64_t)&v22, 1.0, 0.0);
      if (*(float *)(a1 + 552) != 0.0)
        kaldi::VectorBase<float>::MulElements((uint64_t)__dst, (float **)(a1 + 616));
      if (*(_BYTE *)(a1 + 556))
      {
        v15 = (float *)__dst[0];
        v16 = *(float *)__dst[0];
        v17 = *(_DWORD *)(a1 + 536);
        v18 = v17 - 1;
        if (v17 >= 2)
          memmove(__dst[0], (char *)__dst[0] + 4, 4 * (v17 - 1));
        v19 = v16 * 1.41421356;
        if (*(_BYTE *)(a1 + 540))
          v19 = v16;
        v15[v18] = v19;
      }
      ++v10;
      result = kaldi::MatrixBase<float>::NumRows((uint64_t)a3);
    }
    while (v10 < (int)result);
  }
  return result;
}

uint64_t quasar::FingerprintDetector::applySlidingCmvn(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = kaldi::MatrixBase<float>::NumRows(a2);
  v7 = kaldi::MatrixBase<float>::NumCols(a2);
  kaldi::Matrix<float>::Resize(a3, v6, v7, 1, 0);
  return kaldi::SlidingWindowCmn(a1 + 560, a2, (uint64_t)a3);
}

uint64_t quasar::FingerprintDetector::getNormalizedIVectorSimilarity@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  float v7;
  float v8;
  _QWORD *v9;
  void *__p[3];
  void *v11[2];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  int32x2_t v31;
  __int128 v32;
  __int128 v33;
  char v34;

  if (*(_QWORD *)(result + 1168) == *(_QWORD *)(result + 1176))
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  v5 = result;
  v33 = 0u;
  v32 = 0u;
  v31 = (int32x2_t)&unk_1E5D34170;
  v34 = 0;
  v6 = (uint64_t *)(result + 792);
  kaldi::nnet1::Nnet::ResetHistoryStateIfExists(result + 792);
  kaldi::CuMatrix<float>::CuMatrix<float>(v11, a2, 111, 0);
  kaldi::nnet1::Nnet::Feedforward(v6, (uint64_t)v11, &v31, -1, 0);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v11);
  v11[0] = &unk_1E5D29D70;
  v11[1] = (void *)(v32 + 4 * (int)v33 * (HIDWORD(v32) - 1));
  *((_QWORD *)&v12 + 1) = *((_QWORD *)&v33 + 1);
  *(_QWORD *)&v12 = DWORD2(v32);
  v29 = 0;
  v30 = 0;
  v28 = 0;
  kaldi::Vector<float>::Init(&v28, SDWORD2(v32));
  kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)v11, (uint64_t)&v28);
  v7 = kaldi::VectorBase<float>::Norm((uint64_t)&v28, 2.0);
  v8 = v7 / sqrt((double)(int)v29);
  if (v8 != 0.0)
  {
    kaldi::VectorBase<float>::Scale((uint64_t)&v28, 1.0 / v8);
LABEL_7:
    if (quasar::gLogLevel >= 5)
    {
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      v12 = 0u;
      v13 = 0u;
      *(_OWORD *)v11 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Speaker embedding=", 18);
      kaldi::VectorBase<float>::Write((uint64_t)&v28, v9, 0);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v11);
    }
    goto LABEL_9;
  }
  if (quasar::gLogLevel >= 5)
  {
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    *(_OWORD *)v11 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Encountered zero iVector", 24);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v11);
    goto LABEL_7;
  }
LABEL_9:
  quasar::computeDotProducts((uint64_t)&v28, (const float ***)(v5 + 1168), (uint64_t)v11);
  quasar::computeDotProducts((uint64_t)&v28, (const float ***)(v5 + 1192), (uint64_t)__p);
  quasar::tNormalize((float **)v11, (float **)__p, (uint64_t)a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v11[0])
  {
    v11[1] = v11[0];
    operator delete(v11[0]);
  }
  kaldi::Vector<float>::Destroy((uint64_t)&v28);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v31);
}

void sub_1ADA23F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  uint64_t v14;

  kaldi::Vector<float>::Destroy(v14 - 120);
  kaldi::CuMatrix<float>::~CuMatrix(v14 - 96);
  _Unwind_Resume(a1);
}

uint64_t quasar::FingerprintDetector::checkFingerprint(float a1, uint64_t a2, uint64_t *a3, _DWORD *a4, float *a5)
{
  uint64_t v5;
  unint64_t v10;
  char v11;
  _QWORD *v12;
  float v13;
  _QWORD *v14;
  _QWORD *v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  *a5 = -INFINITY;
  v5 = *a3;
  if (a3[1] == *a3)
  {
    v11 = 0;
LABEL_15:
    if (quasar::gLogLevel >= 4)
    {
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v17 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"Did not match any known fingerprints", 36);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v17);
    }
    return v11 & 1;
  }
  v10 = 0;
  v11 = 0;
  do
  {
    if (quasar::gLogLevel >= 4)
    {
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v17 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"Index=", 6);
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" similarity=", 12);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v17);
      v5 = *a3;
    }
    v13 = *(float *)(v5 + 4 * v10);
    if (v13 > *a5)
    {
      *a4 = v10;
      *a5 = v13;
      v13 = *(float *)(v5 + 4 * v10);
    }
    if (v13 > a1)
    {
      if (quasar::gLogLevel >= 4)
      {
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        v26 = 0u;
        v27 = 0u;
        v24 = 0u;
        v25 = 0u;
        v22 = 0u;
        v23 = 0u;
        v20 = 0u;
        v21 = 0u;
        v18 = 0u;
        v19 = 0u;
        v17 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v17);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"Index=", 6);
        v14 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" similarity=", 12);
        v15 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" exceeded threshold=", 20);
        std::ostream::operator<<();
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v17);
        v5 = *a3;
      }
      v11 = 1;
    }
    ++v10;
  }
  while (v10 < (a3[1] - v5) >> 2);
  if ((v11 & 1) == 0)
    goto LABEL_15;
  return v11 & 1;
}

void sub_1ADA24254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a9);
  _Unwind_Resume(a1);
}

unint64_t quasar::FingerprintDetector::getAudioProcessingWindow(_DWORD *a1, uint64_t a2, quasar::DecoderChainOutput **a3)
{
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  signed int v15;
  signed int v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  if (!quasar::DecoderChainOutput::nonEmptyTopChoice(*a3))
    goto LABEL_4;
  v6 = (uint64_t **)*((_QWORD *)*a3 + 44);
  if (v6[1] == *v6)
    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
  v7 = **v6;
  v8 = (*v6)[1];
  v9 = (int)a1[197];
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - v7) >> 5) < v9)
  {
LABEL_4:
    if (quasar::gLogLevel < 4)
      return -1;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"Trigger phrase not detected", 27);
LABEL_6:
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v18);
    return -1;
  }
  v11 = *(_DWORD *)(v7 + 224 * (int)v9 - 188);
  v12 = *(_DWORD *)(v8 - 192);
  if (v12 < a1[195] + v11)
  {
    if (quasar::gLogLevel < 4)
      return -1;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"Not enough audio to make a decision.", 36);
    goto LABEL_6;
  }
  v13 = (*(_DWORD *)(v7 + 28) - a1[194]) & ~((*(_DWORD *)(v7 + 28) - a1[194]) >> 31);
  v14 = a1[196];
  v15 = v14 + v11;
  if ((int)v12 < v15)
    v15 = v12;
  if (v14 <= 0)
    v16 = v12;
  else
    v16 = v15;
  v17 = (v13
                     / (*(int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a2 + 16) + 24))(*(_QWORD *)(*(_QWORD *)a2 + 16)));
  return v17 | ((unint64_t)(v16
                                               / (*(int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a2 + 16)
                                                                               + 24))(*(_QWORD *)(*(_QWORD *)a2 + 16))) << 32);
}

void sub_1ADA24434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a9);
  _Unwind_Resume(a1);
}

void quasar::FingerprintDetector::computeLandmarkHashSimilarity(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  unint64_t v12;
  float *v13;
  float *v14;
  float *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  float *v21;
  int v22;

  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  if (a4 == -1)
    v8 = a3[1];
  else
    v8 = *a3 + 24 * a4 + 24;
  if (a4 == -1)
    v9 = *a3;
  else
    v9 = *a3 + 24 * a4;
  std::vector<float>::reserve((void **)a5, 0xAAAAAAAAAAAAAAABLL * ((v8 - v9) >> 3));
  for (; v9 != v8; v9 += 24)
  {
    v10 = kaldi::computeHashSimilarity(a2, v9, *(_DWORD *)(a1 + 1304), *(_DWORD *)(a1 + 1308));
    v11 = v10;
    v13 = *(float **)(a5 + 8);
    v12 = *(_QWORD *)(a5 + 16);
    if ((unint64_t)v13 >= v12)
    {
      v15 = *(float **)a5;
      v16 = ((uint64_t)v13 - *(_QWORD *)a5) >> 2;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 1 > v17)
        v17 = v18 >> 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
        v19 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a5 + 16, v19);
        v15 = *(float **)a5;
        v13 = *(float **)(a5 + 8);
      }
      else
      {
        v20 = 0;
      }
      v21 = (float *)&v20[4 * v16];
      *v21 = v11;
      v14 = v21 + 1;
      while (v13 != v15)
      {
        v22 = *((_DWORD *)v13-- - 1);
        *((_DWORD *)v21-- - 1) = v22;
      }
      *(_QWORD *)a5 = v21;
      *(_QWORD *)(a5 + 8) = v14;
      *(_QWORD *)(a5 + 16) = &v20[4 * v19];
      if (v15)
        operator delete(v15);
    }
    else
    {
      *v13 = v10;
      v14 = v13 + 1;
    }
    *(_QWORD *)(a5 + 8) = v14;
  }
}

void sub_1ADA245B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::FingerprintDetector::getLandmarkSimilarity@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v8;
  _QWORD *v9;
  int v10;
  _BYTE *v11;
  _BYTE *v12;
  unint64_t v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *__p[3];
  void *v27[2];
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  void *v46[3];
  int32x2_t v47[5];

  kaldi::Matrix<float>::Matrix((uint64_t)v47);
  quasar::FingerprintDetector::applySlidingCmvn(a1, a2, v47);
  v8 = kaldi::MatrixBase<float>::NumRows((uint64_t)v47);
  memset(v46, 0, sizeof(v46));
  kaldi::Vector<float>::Resize(v46, (v8 - 1), 0);
  if ((kaldi::computeHash((uint64_t)v47, v46, *(_DWORD *)(a1 + 1296), *(_DWORD *)(a1 + 1300), *(_DWORD *)(a1 + 1312)) & 1) == 0)
  {
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v29 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v29);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)"Hash strategy ", 14);
    v22 = *(char *)(a1 + 1247);
    if (v22 >= 0)
      v23 = a1 + 1224;
    else
      v23 = *(_QWORD *)(a1 + 1224);
    if (v22 >= 0)
      v24 = *(unsigned __int8 *)(a1 + 1247);
    else
      v24 = *(_QWORD *)(a1 + 1232);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" is not implemented", 19);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v29);
  }
  if (quasar::gLogLevel >= 5)
  {
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v29 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v29);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)"Landmark hash=", 14);
    kaldi::VectorBase<float>::Write((uint64_t)v46, v9, 0);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v29);
  }
  quasar::FingerprintDetector::computeLandmarkHashSimilarity(a1, (uint64_t)v46, (uint64_t *)(a1 + 1320), a3, (uint64_t)v27);
  v10 = quasar::gLogLevel;
  if (quasar::gLogLevel >= 6)
  {
    v12 = v27[0];
    v11 = v27[1];
    if (v27[1] != v27[0])
    {
      v13 = 0;
      do
      {
        if (v10 >= 6)
        {
          v44 = 0u;
          v45 = 0u;
          v42 = 0u;
          v43 = 0u;
          v40 = 0u;
          v41 = 0u;
          v38 = 0u;
          v39 = 0u;
          v36 = 0u;
          v37 = 0u;
          v34 = 0u;
          v35 = 0u;
          v32 = 0u;
          v33 = 0u;
          v30 = 0u;
          v31 = 0u;
          v29 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v29);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)"[", 1);
          v14 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"] Unnormalized landmark hash score: ", 36);
          std::ostream::operator<<();
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v29);
          v10 = quasar::gLogLevel;
          v12 = v27[0];
          v11 = v27[1];
        }
        ++v13;
      }
      while (v13 < (v11 - v12) >> 2);
    }
  }
  if (*(_QWORD *)(a1 + 1344) == *(_QWORD *)(a1 + 1352))
  {
    *(_OWORD *)a4 = *(_OWORD *)v27;
    *(_QWORD *)(a4 + 16) = v28;
  }
  else
  {
    quasar::FingerprintDetector::computeLandmarkHashSimilarity(a1, (uint64_t)v46, (uint64_t *)(a1 + 1344), -1, (uint64_t)__p);
    quasar::tNormalize((float **)v27, (float **)__p, a4);
    v15 = quasar::gLogLevel;
    if (quasar::gLogLevel >= 6)
    {
      v17 = *(_QWORD *)a4;
      v16 = *(_QWORD *)(a4 + 8);
      if (v16 != *(_QWORD *)a4)
      {
        v18 = 0;
        do
        {
          if (v15 >= 6)
          {
            v44 = 0u;
            v45 = 0u;
            v42 = 0u;
            v43 = 0u;
            v40 = 0u;
            v41 = 0u;
            v38 = 0u;
            v39 = 0u;
            v36 = 0u;
            v37 = 0u;
            v34 = 0u;
            v35 = 0u;
            v32 = 0u;
            v33 = 0u;
            v30 = 0u;
            v31 = 0u;
            v29 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v29);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)"[", 1);
            v19 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"] T-normalized landmark hash score: ", 36);
            std::ostream::operator<<();
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v29);
            v15 = quasar::gLogLevel;
            v17 = *(_QWORD *)a4;
            v16 = *(_QWORD *)(a4 + 8);
          }
          ++v18;
        }
        while (v18 < (v16 - v17) >> 2);
      }
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v27[0])
    {
      v27[1] = v27[0];
      operator delete(v27[0]);
    }
  }
  kaldi::Vector<float>::Destroy((uint64_t)v46);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v47);
}

void sub_1ADA2497C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  kaldi::Vector<float>::Destroy(v17 - 128);
  kaldi::Matrix<float>::~Matrix(v17 - 104);
  _Unwind_Resume(a1);
}

uint64_t quasar::FingerprintDetector::runImpl(uint64_t a1, uint64_t a2, uint64_t *a3, quasar::SpeechRequestData **a4)
{
  _QWORD *v8;
  unsigned __int8 *InputOrigin;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t AudioProcessingWindow;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v27;
  int32x2_t *v28;
  int v29;
  double v30;
  uint64_t NormalizedIVectorSimilarity;
  float *v32;
  int v33;
  int v34;
  float *v35;
  float *v36;
  float *v37;
  float v38;
  float *v39;
  float v40;
  float v41;
  void *v42;
  uint64_t LandmarkSimilarity;
  float v44;
  unint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  float v48;
  float v49;
  float v50;
  float v51;
  _QWORD *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  void **v58;
  std::string::size_type v59;
  std::string *v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  _QWORD *v66;
  const char *v67;
  size_t v68;
  _QWORD *v69;
  _QWORD *v70;
  std::string::size_type size;
  void *v72[2];
  unsigned __int8 v73;
  std::string v74;
  std::string __p;
  __int128 v76;
  uint64_t v77;
  std::string v78;
  float v79;
  int v80;
  int32x2_t v81[5];
  int32x2_t *v82;
  std::__shared_weak_count *v83;
  void *v84[2];
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;

  v8 = (_QWORD *)(a1 + 664);
  InputOrigin = (unsigned __int8 *)quasar::SpeechRequestData::getInputOrigin(*a4);
  if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v8, InputOrigin))
  {
    _ZNSt3__115allocate_sharedB8ne180100IN5kaldi6MatrixIfEENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v82);
    v10 = *(void **)(a2 + 536);
    if (!v10 && quasar::gLogLevel >= 1)
    {
      v99 = 0u;
      v100 = 0u;
      v97 = 0u;
      v98 = 0u;
      v95 = 0u;
      v96 = 0u;
      v93 = 0u;
      v94 = 0u;
      v91 = 0u;
      v92 = 0u;
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      *(_OWORD *)v84 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v84);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"Error: Utterance features were improperly cached.", 49);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v84);
      v10 = *(void **)(a2 + 536);
    }
    v11 = *(std::__shared_weak_count **)(a2 + 544);
    v84[0] = v10;
    v84[1] = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    kaldi::OnlineCacheInput::GetCachedData((uint64_t)v10, v82, 0);
    if (v11)
    {
      v14 = (unint64_t *)&v11->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (kaldi::MatrixBase<float>::NumRows((uint64_t)v82)
      && kaldi::MatrixBase<float>::NumCols((uint64_t)v82))
    {
      quasar::Decoder::calculateNBest(a2, a3, *((_DWORD *)*a4 + 4));
      AudioProcessingWindow = quasar::FingerprintDetector::getAudioProcessingWindow((_DWORD *)a1, a2, (quasar::DecoderChainOutput **)a3);
      if ((AudioProcessingWindow & 0x80000000) != 0)
      {
        v17 = 0;
        *(_DWORD *)(*a3 + 680) = 0;
        goto LABEL_24;
      }
      if ((int)kaldi::MatrixBase<float>::NumRows((uint64_t)v82) > (int)AudioProcessingWindow
        && SHIDWORD(AudioProcessingWindow) >= (int)AudioProcessingWindow
        && (int)kaldi::MatrixBase<float>::NumRows((uint64_t)v82) >= SHIDWORD(AudioProcessingWindow))
      {
        if (quasar::gLogLevel >= 4)
        {
          v99 = 0u;
          v100 = 0u;
          v97 = 0u;
          v98 = 0u;
          v95 = 0u;
          v96 = 0u;
          v93 = 0u;
          v94 = 0u;
          v91 = 0u;
          v92 = 0u;
          v89 = 0u;
          v90 = 0u;
          v87 = 0u;
          v88 = 0u;
          v85 = 0u;
          v86 = 0u;
          *(_OWORD *)v84 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v84);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"Processed Frames: ", 18);
          v27 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" to ", 4);
          std::ostream::operator<<();
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v84);
        }
        v28 = v82;
        v29 = kaldi::MatrixBase<float>::NumCols((uint64_t)v82);
        v30 = kaldi::SubMatrix<float>::SubMatrix((uint64_t)v84, (uint64_t)v28, AudioProcessingWindow, HIDWORD(AudioProcessingWindow) - (int)AudioProcessingWindow, 0, v29);
        kaldi::Matrix<float>::Matrix(v81, v84, 111, v30);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v84);
        v79 = -1.0;
        v80 = -1;
        memset(&v78, 0, sizeof(v78));
        if (*(_BYTE *)(a1 + 448))
        {
          kaldi::Matrix<float>::Matrix((uint64_t)v84);
          quasar::FingerprintDetector::fbank2Mfcc(a1, v81, (int32x2_t *)v84);
          kaldi::Matrix<float>::Matrix((uint64_t)&v76);
          quasar::FingerprintDetector::applySlidingCmvn(a1, (uint64_t)v84, (int32x2_t *)&v76);
          NormalizedIVectorSimilarity = quasar::FingerprintDetector::getNormalizedIVectorSimilarity(a1, (uint64_t)&v76, &__p);
          v32 = (float *)__p.__r_.__value_.__r.__words[0];
          v33 = *(unsigned __int8 *)(a1 + 449);
          size = __p.__r_.__value_.__l.__size_;
          v78 = __p;
          if (v33)
            v34 = 0;
          else
            v34 = quasar::FingerprintDetector::checkFingerprint(*(float *)(a1 + 1216), NormalizedIVectorSimilarity, (uint64_t *)&v78, &v80, &v79);
          kaldi::Matrix<float>::~Matrix((uint64_t)&v76);
          kaldi::Matrix<float>::~Matrix((uint64_t)v84);
          v35 = (float *)size;
        }
        else
        {
          v35 = 0;
          v32 = 0;
          v34 = 0;
        }
        v76 = 0uLL;
        v77 = 0;
        if (*(_BYTE *)(a1 + 449))
        {
          if (*(_BYTE *)(a1 + 448))
          {
            if (v32 == v35)
            {
              v37 = v32;
            }
            else
            {
              v36 = v32 + 1;
              v37 = v32;
              if (v32 + 1 != v35)
              {
                v38 = *v32;
                v37 = v32;
                v39 = v32 + 1;
                do
                {
                  v40 = *v39++;
                  v41 = v40;
                  if (v38 < v40)
                  {
                    v38 = v41;
                    v37 = v36;
                  }
                  v36 = v39;
                }
                while (v39 != v35);
              }
            }
            v45 = (char *)v37 - (char *)v32;
            if (quasar::gLogLevel >= 6)
            {
              v99 = 0u;
              v100 = 0u;
              v97 = 0u;
              v98 = 0u;
              v95 = 0u;
              v96 = 0u;
              v93 = 0u;
              v94 = 0u;
              v91 = 0u;
              v92 = 0u;
              v89 = 0u;
              v90 = 0u;
              v87 = 0u;
              v88 = 0u;
              v85 = 0u;
              v86 = 0u;
              *(_OWORD *)v84 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v84);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"Best i-vector match score=", 26);
              v46 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)" index=", 7);
              std::ostream::operator<<();
              quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v84);
            }
            v47 = v45 >> 2;
            quasar::FingerprintDetector::getLandmarkSimilarity(a1, (uint64_t)v81, v45 >> 2, (uint64_t)v84);
            v48 = *(float *)(a1 + 1216);
            v49 = *(float *)(a1 + 1368);
            v76 = *(_OWORD *)v84;
            v77 = v85;
            v42 = v84[0];
            if (*(float *)v84[0] <= v49)
              v50 = -*(float *)(a1 + 1220);
            else
              v50 = *(float *)(a1 + 1220);
            v51 = *v37 + v50;
            *v37 = v51;
            if (quasar::gLogLevel > 5)
            {
              v99 = 0u;
              v100 = 0u;
              v97 = 0u;
              v98 = 0u;
              v95 = 0u;
              v96 = 0u;
              v93 = 0u;
              v94 = 0u;
              v91 = 0u;
              v92 = 0u;
              v89 = 0u;
              v90 = 0u;
              v87 = 0u;
              v88 = 0u;
              v85 = 0u;
              v86 = 0u;
              *(_OWORD *)v84 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v84);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"Adjusted i-vector score=", 24);
              v52 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" thres=", 7);
              std::ostream::operator<<();
              quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v84);
              v51 = *v37;
            }
            v80 = v47;
            v79 = v51;
            if (v51 > v48)
              v34 = 1;
          }
          else
          {
            LandmarkSimilarity = quasar::FingerprintDetector::getLandmarkSimilarity(a1, (uint64_t)v81, -1, (uint64_t)v84);
            v44 = *(float *)(a1 + 1368);
            v76 = *(_OWORD *)v84;
            v77 = v85;
            v42 = v84[0];
            v34 = quasar::FingerprintDetector::checkFingerprint(v44, LandmarkSimilarity, (uint64_t *)&v76, &v80, &v79);
          }
        }
        else
        {
          v42 = 0;
        }
        if (v34)
          v53 = 2;
        else
          v53 = 1;
        v54 = *a3;
        *(_DWORD *)(v54 + 680) = v53;
        v55 = *(_QWORD *)(v54 + 424);
        std::string::basic_string[abi:ne180100]<0>(v84, "FingerprintAlgo");
        if (*(_BYTE *)(a1 + 448))
          v56 = "i";
        else
          v56 = "";
        std::string::basic_string[abi:ne180100]<0>(&v74, v56);
        if (*(_BYTE *)(a1 + 449))
          v57 = "l";
        else
          v57 = "";
        std::string::basic_string[abi:ne180100]<0>(v72, v57);
        if ((v73 & 0x80u) == 0)
          v58 = v72;
        else
          v58 = (void **)v72[0];
        if ((v73 & 0x80u) == 0)
          v59 = v73;
        else
          v59 = (std::string::size_type)v72[1];
        v60 = std::string::append(&v74, (const std::string::value_type *)v58, v59);
        v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v61;
        v60->__r_.__value_.__l.__size_ = 0;
        v60->__r_.__value_.__r.__words[2] = 0;
        v60->__r_.__value_.__r.__words[0] = 0;
        quasar::SpeechRequestResultData::addAA(v55, (__int128 *)v84, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if ((char)v73 < 0)
          operator delete(v72[0]);
        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v74.__r_.__value_.__l.__data_);
        if (SBYTE7(v85) < 0)
          operator delete(v84[0]);
        v62 = *(_QWORD *)(*a3 + 424);
        std::string::basic_string[abi:ne180100]<0>(v84, "FingerprintIndex");
        *(double *)&__p.__r_.__value_.__l.__data_ = (double)v80;
        quasar::SpeechRequestResultData::addAA(v62, (__int128 *)v84, (double *)&__p, 1);
        if (SBYTE7(v85) < 0)
          operator delete(v84[0]);
        v63 = *(_QWORD *)(*a3 + 424);
        std::string::basic_string[abi:ne180100]<0>(v84, "FingerprintScore");
        *(double *)&__p.__r_.__value_.__l.__data_ = v79;
        quasar::SpeechRequestResultData::addAA(v63, (__int128 *)v84, (double *)&__p, 1);
        if (SBYTE7(v85) < 0)
          operator delete(v84[0]);
        v64 = *(_QWORD *)(*a3 + 424);
        std::string::basic_string[abi:ne180100]<0>(v84, "FingerprintDetected");
        v65 = (char *)quasar::fingerprintDetectionResultString(*(_DWORD *)(*a3 + 680));
        std::string::basic_string[abi:ne180100]<0>(&__p, v65);
        quasar::SpeechRequestResultData::addAA(v64, (__int128 *)v84, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SBYTE7(v85) < 0)
          operator delete(v84[0]);
        if (quasar::gLogLevel >= 4)
        {
          v99 = 0u;
          v100 = 0u;
          v97 = 0u;
          v98 = 0u;
          v95 = 0u;
          v96 = 0u;
          v93 = 0u;
          v94 = 0u;
          v91 = 0u;
          v92 = 0u;
          v89 = 0u;
          v90 = 0u;
          v87 = 0u;
          v88 = 0u;
          v85 = 0u;
          v86 = 0u;
          *(_OWORD *)v84 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v84);
          v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"FingerprintDetected=", 20);
          v67 = quasar::fingerprintDetectionResultString(*(_DWORD *)(*a3 + 680));
          v68 = strlen(v67);
          v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)v67, v68);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)" MatchingIndex=", 15);
          v70 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)" matchingScore=", 15);
          std::ostream::operator<<();
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v84);
        }
        if (v42)
        {
          operator delete(v42);
          v32 = (float *)v78.__r_.__value_.__r.__words[0];
        }
        if (v32)
        {
          v78.__r_.__value_.__l.__size_ = (std::string::size_type)v32;
          operator delete(v32);
        }
        kaldi::Matrix<float>::~Matrix((uint64_t)v81);
        v17 = 0;
        goto LABEL_24;
      }
      if (quasar::gLogLevel >= 1)
      {
        v99 = 0u;
        v100 = 0u;
        v97 = 0u;
        v98 = 0u;
        v95 = 0u;
        v96 = 0u;
        v93 = 0u;
        v94 = 0u;
        v91 = 0u;
        v92 = 0u;
        v89 = 0u;
        v90 = 0u;
        v87 = 0u;
        v88 = 0u;
        v85 = 0u;
        v86 = 0u;
        *(_OWORD *)v84 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v84);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"Error: getAudioProcessingWindow failed", 38);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v84);
      }
    }
    else if (quasar::gLogLevel >= 4)
    {
      v99 = 0u;
      v100 = 0u;
      v97 = 0u;
      v98 = 0u;
      v95 = 0u;
      v96 = 0u;
      v93 = 0u;
      v94 = 0u;
      v91 = 0u;
      v92 = 0u;
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      *(_OWORD *)v84 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v84);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"Zero-length utterance. Rejecting utterance.", 43);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v84);
    }
    v17 = 2;
LABEL_24:
    v18 = v83;
    if (v83)
    {
      v19 = (unint64_t *)&v83->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    return v17;
  }
  if (quasar::gLogLevel >= 4)
  {
    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    *(_OWORD *)v84 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v84);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"FingerprintDetector not run on input origin ", 44);
    v22 = quasar::SpeechRequestData::getInputOrigin(*a4);
    v23 = *(char *)(v22 + 23);
    if (v23 >= 0)
      v24 = v22;
    else
      v24 = *(_QWORD *)v22;
    if (v23 >= 0)
      v25 = *(unsigned __int8 *)(v22 + 23);
    else
      v25 = *(_QWORD *)(v22 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v24, v25);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v84);
  }
  v17 = 0;
  *(_DWORD *)(*a3 + 680) = 0;
  return v17;
}

void sub_1ADA253D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  void *v51;

  operator delete(v51);
  if (__p)
    operator delete(__p);
  kaldi::Matrix<float>::~Matrix((uint64_t)&a39);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a44);
  _Unwind_Resume(a1);
}

uint64_t quasar::FingerprintDetector::affectsRecognitionResults(quasar::FingerprintDetector *this)
{
  return 1;
}

uint64_t quasar::FingerprintDetector::requiresCacheFeatInputItf(quasar::FingerprintDetector *this)
{
  return 1;
}

uint64_t quasar::FingerprintDetector::supportsEager(quasar::FingerprintDetector *this)
{
  return 1;
}

void quasar::FingerprintDetector::~FingerprintDetector(void **this)
{
  quasar::FingerprintDetector::~FingerprintDetector(this);
  JUMPOUT(0x1AF44D190);
}

{
  void **v2;

  *this = &off_1E5D37098;
  v2 = this + 168;
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 165;
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 1295) < 0)
    operator delete(this[159]);
  if (*((char *)this + 1271) < 0)
    operator delete(this[156]);
  if (*((char *)this + 1247) < 0)
    operator delete(this[153]);
  v2 = this + 149;
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 146;
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&v2);
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)(this + 99));
  if (*((char *)this + 775) < 0)
    operator delete(this[94]);
  if (*((char *)this + 751) < 0)
    operator delete(this[91]);
  if (*((char *)this + 727) < 0)
    operator delete(this[88]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 83));
  if (*((char *)this + 663) < 0)
    operator delete(this[80]);
  kaldi::Vector<float>::Destroy((uint64_t)(this + 77));
  kaldi::Matrix<float>::~Matrix((uint64_t)(this + 72));
  if (*((char *)this + 503) < 0)
    operator delete(this[60]);
  quasar::Decoder::~Decoder(this);
}

void kaldi::FrameExtractionOptions::Register(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "sample-frequency");
  std::string::basic_string[abi:ne180100]<0>(__p, "Waveform data sample frequency (must match the waveform file, if specified there)");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "frame-length");
  std::string::basic_string[abi:ne180100]<0>(__p, "Frame length in milliseconds");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 8, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "frame-shift");
  std::string::basic_string[abi:ne180100]<0>(__p, "Frame shift in milliseconds");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 4, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "preemphasis-coefficient");
  std::string::basic_string[abi:ne180100]<0>(__p, "Coefficient for use in signal preemphasis");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 16, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "remove-dc-offset");
  std::string::basic_string[abi:ne180100]<0>(__p, "Subtract mean from waveform on each frame");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 20, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "dither");
  std::string::basic_string[abi:ne180100]<0>(__p, "Dithering constant (0.0 means no dither)");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 12, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "window-type");
  std::string::basic_string[abi:ne180100]<0>(__p, "Type of window (\"hamming\"|\"hanning\"|\"povey\"|\"rectangular\")");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 40))(a2, v6, a1 + 24, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "round-to-power-of-two");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, round window size to power of two.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 48, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "snip-edges");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, end effects will be handled by outputting only frames that completely fit in the file, and the number of frames depends on the frame-length.  If false, the number of frames depends only on the frame-shift, and we reflect the data at the ends.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 49, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1ADA2597C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void kaldi::MelBanksOptions::Register(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "num-mel-bins");
  std::string::basic_string[abi:ne180100]<0>(__p, "Number of triangular mel-frequency bins");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "low-freq");
  std::string::basic_string[abi:ne180100]<0>(__p, "Low cutoff frequency for mel bins");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 4, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "high-freq");
  std::string::basic_string[abi:ne180100]<0>(__p, "High cutoff frequency for mel bins (if < 0, offset from Nyquist)");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 8, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "vtln-low");
  std::string::basic_string[abi:ne180100]<0>(__p, "Low inflection point in piecewise linear VTLN warping function");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 12, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "vtln-high");
  std::string::basic_string[abi:ne180100]<0>(__p, "High inflection point in piecewise linear VTLN warping function (if negative, offset from high-mel-freq");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 16, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "debug-mel");
  std::string::basic_string[abi:ne180100]<0>(__p, "Print out debugging information for mel bin computation");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 20, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1ADA25C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

kaldi::MfccOptions *kaldi::MfccOptions::MfccOptions(kaldi::MfccOptions *this)
{
  *(_OWORD *)this = xmmword_1AE140DB0;
  *((_DWORD *)this + 4) = 1064849900;
  *((_BYTE *)this + 20) = 1;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 3, "povey");
  *((_WORD *)this + 24) = 257;
  *(_QWORD *)((char *)this + 52) = 0x17BF800000;
  *(_OWORD *)((char *)this + 60) = xmmword_1AE15BDD0;
  *((_WORD *)this + 38) = 0;
  *((_DWORD *)this + 20) = 13;
  *((_BYTE *)this + 84) = 1;
  *((_DWORD *)this + 22) = 0;
  *((_BYTE *)this + 92) = 1;
  *((_DWORD *)this + 24) = 1102053376;
  *((_BYTE *)this + 100) = 0;
  return this;
}

uint64_t kaldi::SequentialTableReader<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::Close(_QWORD *a1)
{
  uint64_t v2;

  kaldi::SequentialTableReader<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::CheckImpl(a1);
  v2 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 56))(*a1);
  if (*a1)
    (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 72))(*a1);
  *a1 = 0;
  return v2;
}

_QWORD *kaldi::SequentialTableReader<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::CheckImpl(_QWORD *result)
{
  _QWORD *v1;
  _QWORD v2[34];

  if (!*result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Trying to use empty SequentialTableReader (perhaps you ", 55);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "passed the empty string as an argument to a program?)");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::SequentialTableReaderArchiveImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::Open(uint64_t a1, std::string *this)
{
  _OWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::string *p_p;
  std::string::size_type size;
  std::string *v10;
  std::string::size_type v11;
  std::string v13;
  std::string v14;
  std::string __p;
  _QWORD v16[34];

  if (*(_DWORD *)(a1 + 76) && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1) & 1) == 0)
  {
    if (!*(_BYTE *)(a1 + 75))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, "TableReader::Open, error closing previous input.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
    }
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"TableReader::Open, error closing previous input (only warning, since permissive mode).", 86);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    }
  }
  v4 = (_OWORD *)(a1 + 48);
  kaldi::ClassifyRspecifier(this, a1 + 48, a1 + 72);
  v5 = 1;
  if ((kaldi::Input::OpenInternal((_QWORD *)(a1 + 8), a1 + 48, 1, 0) & 1) == 0)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"TableReader: failed to open stream ", 35);
      if (*(char *)(a1 + 71) < 0)
      {
        std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
      }
      else
      {
        *(_OWORD *)&v14.__r_.__value_.__l.__data_ = *v4;
        v14.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 64);
      }
      kaldi::PrintableRxfilename((uint64_t)&v14, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v14.__r_.__value_.__l.__data_);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    }
    goto LABEL_39;
  }
  *(_DWORD *)(a1 + 76) = 1;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  if (*(_DWORD *)(a1 + 76) == 3)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"TableReader: error beginning to read table (wrong filename?): ", 62);
      if (*(char *)(a1 + 71) < 0)
      {
        std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
      }
      else
      {
        *(_OWORD *)&v13.__r_.__value_.__l.__data_ = *v4;
        v13.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 64);
      }
      kaldi::PrintableRxfilename((uint64_t)&v13, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = &__p;
      else
        v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v11 = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v10, v11);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v13.__r_.__value_.__l.__data_);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    }
    kaldi::Input::Close((kaldi::Input *)(a1 + 8));
LABEL_39:
    v5 = 0;
    *(_DWORD *)(a1 + 76) = 0;
  }
  return v5;
}

uint64_t kaldi::SequentialTableReaderArchiveImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::Done(uint64_t a1)
{
  unsigned int v1;
  _QWORD v3[34];

  v1 = *(_DWORD *)(a1 + 76) - 2;
  if (v1 >= 3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "Done() called on TableReader object at the wrong time.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  return (3u >> (v1 & 7)) & 1;
}

uint64_t kaldi::SequentialTableReaderArchiveImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::IsOpen(uint64_t a1)
{
  unsigned int v1;
  _QWORD v3[34];

  v1 = *(_DWORD *)(a1 + 76);
  if (v1 >= 6 || ((0x3Du >> v1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "IsOpen() called on invalid object.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  return (0x3Eu >> v1) & 1;
}

uint64_t kaldi::SequentialTableReaderArchiveImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::Key(uint64_t a1)
{
  _QWORD v2[34];

  if (*(_DWORD *)(a1 + 76) != 4)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Key() called on TableReader object at the wrong time.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return a1 + 24;
}

uint64_t kaldi::SequentialTableReaderArchiveImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::Value(uint64_t a1)
{
  _QWORD v2[34];

  if (*(_DWORD *)(a1 + 76) != 4)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Value() called on TableReader object at the wrong time.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return kaldi::KaldiObjectHolder<kaldi::Vector<float>>::Value((uint64_t *)(a1 + 16));
}

void kaldi::SequentialTableReaderArchiveImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::FreeCurrent(uint64_t a1)
{
  _QWORD v2[34];

  if (*(_DWORD *)(a1 + 76) == 4)
  {
    kaldi::KaldiObjectHolder<kaldi::Vector<float>>::Clear((uint64_t *)(a1 + 16));
    *(_DWORD *)(a1 + 76) = 5;
  }
  else if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"TableReader: FreeCurrent called at the wrong time.", 50);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
  }
}

void sub_1ADA26458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

void kaldi::SequentialTableReaderArchiveImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::Next(uint64_t a1)
{
  int v2;
  uint64_t *v4;
  int v5;
  _QWORD *v6;
  int v7;
  int v8;
  _QWORD *v9;
  std::string *p_p;
  std::string::size_type size;
  void *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  std::string *v19;
  std::string::size_type v20;
  _QWORD *v21;
  _QWORD *v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  std::string v27;
  std::string v28;
  std::string v29;
  char v30;
  std::string v31;
  std::string __p;
  _QWORD v33[34];

  v2 = *(_DWORD *)(a1 + 76);
  if (v2 != 1 && v2 != 5)
  {
    if (v2 != 4)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v33);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v33, "TableReader: Next() called wrongly.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v33);
    }
    kaldi::KaldiObjectHolder<kaldi::Vector<float>>::Clear((uint64_t *)(a1 + 16));
  }
  v4 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)(a1 + 8));
  std::ios_base::clear((std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)), 0);
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4, a1 + 24);
  v5 = *(_DWORD *)((char *)v4 + *(_QWORD *)(*v4 - 24) + 32);
  if ((v5 & 2) != 0)
  {
    v7 = 2;
    goto LABEL_74;
  }
  if ((v5 & 5) != 0)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v33);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Error reading archive ", 22);
      if (*(char *)(a1 + 71) < 0)
        std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
      else
        v31 = *(std::string *)(a1 + 48);
      kaldi::PrintableRxfilename((uint64_t)&v31, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_72;
      v12 = (void *)v31.__r_.__value_.__r.__words[0];
LABEL_33:
      operator delete(v12);
LABEL_72:
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v33);
      goto LABEL_73;
    }
    goto LABEL_73;
  }
  v8 = std::istream::peek();
  if (v8 == 9)
    goto LABEL_16;
  if (v8 != 10)
  {
    if (v8 != 32)
    {
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v33);
        v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Invalid archive file format: expected space after key ", 54);
        v14 = *(char *)(a1 + 47);
        if (v14 >= 0)
          v15 = a1 + 24;
        else
          v15 = *(_QWORD *)(a1 + 24);
        if (v14 >= 0)
          v16 = *(unsigned __int8 *)(a1 + 47);
        else
          v16 = *(_QWORD *)(a1 + 32);
        v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
        v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)", got character ", 16);
        v30 = std::istream::peek();
        kaldi::CharToString((kaldi *)&v30, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v19 = &__p;
        else
          v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v20 = __p.__r_.__value_.__l.__size_;
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, v20);
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", reading ", 10);
        if (*(char *)(a1 + 71) < 0)
          std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
        else
          v28 = *(std::string *)(a1 + 48);
        kaldi::PrintableRxfilename((uint64_t)&v28, &v29);
        if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v25 = &v29;
        else
          v25 = (std::string *)v29.__r_.__value_.__r.__words[0];
        if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v26 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
        else
          v26 = v29.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v25, v26);
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v29.__r_.__value_.__l.__data_);
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v28.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_72;
        v12 = (void *)__p.__r_.__value_.__r.__words[0];
        goto LABEL_33;
      }
LABEL_73:
      v7 = 3;
      goto LABEL_74;
    }
LABEL_16:
    std::istream::get();
  }
  if ((kaldi::KaldiObjectHolder<kaldi::Vector<float>>::Read((uint64_t *)(a1 + 16), v4) & 1) == 0)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v33);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Object read failed, reading archive ", 36);
      if (*(char *)(a1 + 71) < 0)
        std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
      else
        v27 = *(std::string *)(a1 + 48);
      kaldi::PrintableRxfilename((uint64_t)&v27, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = &__p;
      else
        v23 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v24 = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v23, v24);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_72;
      v12 = (void *)v27.__r_.__value_.__r.__words[0];
      goto LABEL_33;
    }
    goto LABEL_73;
  }
  v7 = 4;
LABEL_74:
  *(_DWORD *)(a1 + 76) = v7;
}

void sub_1ADA26910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a27);
}

BOOL kaldi::SequentialTableReaderArchiveImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::Close(uint64_t a1)
{
  int v2;
  _BOOL8 result;
  _QWORD *v4;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v7;
  _QWORD *v8;
  std::string v9;
  std::string __p;
  _QWORD v11[34];

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, "Close() called on TableReader twice or otherwise wrongly.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
  }
  if (*(_QWORD *)(a1 + 8))
    kaldi::Input::Close((kaldi::Input *)(a1 + 8));
  if (*(_DWORD *)(a1 + 76) == 4)
    kaldi::KaldiObjectHolder<kaldi::Vector<float>>::Clear((uint64_t *)(a1 + 16));
  v2 = *(_DWORD *)(a1 + 76);
  if (*(_BYTE *)(a1 + 75))
  {
    result = 1;
    if (v2 == 3 && kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
      v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Error detected closing TableReader for archive ", 47);
      if (*(char *)(a1 + 71) < 0)
        std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
      else
        v9 = *(std::string *)(a1 + 48);
      kaldi::PrintableRxfilename((uint64_t)&v9, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, size);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" but ignoring ", 14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"it as permissive mode specified.", 32);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v9.__r_.__value_.__l.__data_);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
      result = 1;
    }
  }
  else
  {
    result = v2 != 3;
  }
  *(_DWORD *)(a1 + 76) = 0;
  return result;
}

void kaldi::SequentialTableReaderArchiveImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::~SequentialTableReaderArchiveImpl(uint64_t a1)
{
  kaldi::SequentialTableReaderArchiveImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::~SequentialTableReaderArchiveImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t *kaldi::KaldiObjectHolder<kaldi::Vector<float>>::~KaldiObjectHolder(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
  {
    kaldi::Vector<float>::Destroy(*a1);
    MEMORY[0x1AF44D190](v2, 0x1080C40EEF68E16);
  }
  return a1;
}

uint64_t kaldi::KaldiObjectHolder<kaldi::Vector<float>>::Value(uint64_t *a1)
{
  uint64_t result;
  _QWORD v2[34];

  result = *a1;
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "KaldiObjectHolder::Value() called wrongly.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t *kaldi::KaldiObjectHolder<kaldi::Vector<float>>::Clear(uint64_t *result)
{
  uint64_t v1;
  uint64_t *v2;

  v1 = *result;
  if (*result)
  {
    v2 = result;
    kaldi::Vector<float>::Destroy(*result);
    result = (uint64_t *)MEMORY[0x1AF44D190](v1, 0x1080C40EEF68E16);
    *v2 = 0;
  }
  return result;
}

uint64_t kaldi::KaldiObjectHolder<kaldi::Vector<float>>::Read(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD v7[34];
  unsigned __int8 v8;

  v4 = *a1;
  if (*a1)
  {
    kaldi::Vector<float>::Destroy(*a1);
    MEMORY[0x1AF44D190](v4, 0x1080C40EEF68E16);
  }
  v5 = (_QWORD *)operator new();
  v5[1] = 0;
  v5[2] = 0;
  *v5 = 0;
  *a1 = (uint64_t)v5;
  v8 = 0;
  if ((kaldi::InitKaldiInputStream((uint64_t)a2, &v8) & 1) != 0)
  {
    kaldi::Vector<float>::Read(*a1, a2, v8, 0);
    return 1;
  }
  else
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Reading Table object, failed reading binary header\n", 51);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    }
    return 0;
  }
}

void sub_1ADA26D0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::SequentialTableReaderArchiveImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::~SequentialTableReaderArchiveImpl(uint64_t a1)
{
  int v2;
  _QWORD *v3;
  std::string *v4;
  std::string::size_type v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v9;
  std::string *p_p;
  std::string::size_type size;
  std::string v12;
  std::string v13;
  std::string __p;
  _QWORD v15[34];

  *(_QWORD *)a1 = &off_1E5D2AEA8;
  v2 = *(_DWORD *)(a1 + 76);
  if (v2 != 3)
  {
LABEL_18:
    if (v2 == 4)
      kaldi::KaldiObjectHolder<kaldi::Vector<float>>::Clear((uint64_t *)(a1 + 16));
    goto LABEL_20;
  }
  if (!*(_BYTE *)(a1 + 75))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"TableReader: reading archive failed: ", 37);
    if (*(char *)(a1 + 71) < 0)
      std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
    else
      v12 = *(std::string *)(a1 + 48);
    kaldi::PrintableRxfilename((uint64_t)&v12, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Error detected closing TableReader for archive ", 47);
    if (*(char *)(a1 + 71) < 0)
      std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
    else
      v13 = *(std::string *)(a1 + 48);
    kaldi::PrintableRxfilename((uint64_t)&v13, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v4 = &__p;
    else
      v4 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v5 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v5 = __p.__r_.__value_.__l.__size_;
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" but ignoring ", 14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"it as permissive mode specified.", 32);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    v2 = *(_DWORD *)(a1 + 76);
    goto LABEL_18;
  }
LABEL_20:
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  kaldi::KaldiObjectHolder<kaldi::Vector<float>>::~KaldiObjectHolder((uint64_t *)(a1 + 16));
  kaldi::Input::~Input((kaldi::Input *)(a1 + 8));
  return a1;
}

uint64_t kaldi::SequentialTableReaderScriptImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::Open(uint64_t a1, std::string *this)
{
  _QWORD *v4;
  uint64_t result;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v8;
  std::string v9;
  char v10;
  std::string v11;
  std::string __p;
  _QWORD v13[34];

  if (*(_DWORD *)(a1 + 120) && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"TableReader::Open, error closing previous input ", 48);
    if (*(char *)(a1 + 87) < 0)
      std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)(a1 + 64), *(_QWORD *)(a1 + 72));
    else
      v11 = *(std::string *)(a1 + 64);
    kaldi::PrintableRxfilename((uint64_t)&v11, &__p);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, (uint64_t)&__p);
    std::string::~string(&__p);
    std::string::~string(&v11);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  v10 = 0;
  kaldi::ClassifyRspecifier(this, a1 + 64, a1 + 88);
  if ((kaldi::Input::OpenInternal((_QWORD *)(a1 + 8), a1 + 64, 1, &v10) & 1) != 0)
  {
    if (v10)
    {
      *(_DWORD *)(a1 + 120) = 2;
LABEL_10:
      kaldi::Input::Close((kaldi::Input *)(a1 + 8));
      return 0;
    }
    *(_DWORD *)(a1 + 120) = 6;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    if (*(_DWORD *)(a1 + 120) == 2)
      goto LABEL_10;
    return 1;
  }
  else
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
      v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Failed to open script file ", 27);
      if (*(char *)(a1 + 87) < 0)
        std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)(a1 + 64), *(_QWORD *)(a1 + 72));
      else
        v9 = *(std::string *)(a1 + 64);
      kaldi::PrintableRxfilename((uint64_t)&v9, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v9.__r_.__value_.__l.__data_);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    }
    result = 0;
    *(_DWORD *)(a1 + 120) = 0;
  }
  return result;
}

uint64_t kaldi::SequentialTableReaderScriptImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::Done(uint64_t a1)
{
  unsigned int v1;
  _QWORD v3[34];

  v1 = *(_DWORD *)(a1 + 120) - 1;
  if (v1 >= 5)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "Done() called on TableReader object at the wrong time.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  return (3u >> v1) & 1;
}

uint64_t kaldi::SequentialTableReaderScriptImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::IsOpen(uint64_t a1)
{
  unsigned int v1;
  _QWORD v3[34];

  v1 = *(_DWORD *)(a1 + 120);
  if (v1 >= 6)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "IsOpen() called on invalid object.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  return (0x3Eu >> v1) & 1;
}

uint64_t kaldi::SequentialTableReaderScriptImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::Key(uint64_t a1)
{
  _QWORD v2[34];

  if ((*(_DWORD *)(a1 + 120) - 3) >= 3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Key() called on TableReader object at the wrong time.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return a1 + 40;
}

uint64_t kaldi::SequentialTableReaderScriptImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::Value(uint64_t a1)
{
  int v2;
  int v3;
  _QWORD *v5;
  std::string *v6;
  std::string::size_type size;
  _QWORD *v8;
  _QWORD *v9;
  std::string v10;
  std::string v11;
  _QWORD v12[34];

  v2 = *(_DWORD *)(a1 + 120);
  v3 = v2;
  if (v2 == 3)
  {
    kaldi::SequentialTableReaderScriptImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::LoadCurrent(a1);
    v3 = *(_DWORD *)(a1 + 120);
  }
  if (v3 != 4)
  {
    if (v3 == 5)
    {
      if (v2 == 3)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
        v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"TableReader: failed to load object from ", 40);
        if (*(char *)(a1 + 119) < 0)
          std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)(a1 + 96), *(_QWORD *)(a1 + 104));
        else
          v10 = *(std::string *)(a1 + 96);
        kaldi::PrintableRxfilename((uint64_t)&v10, &v11);
        if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v6 = &v11;
        else
          v6 = (std::string *)v11.__r_.__value_.__r.__words[0];
        if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
        else
          size = v11.__r_.__value_.__l.__size_;
        v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, size);
        v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" (to suppress this error, add the permissive ", 45);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "(p,) option to the rspecifier.");
        std::string::~string(&v11);
        std::string::~string(&v10);
      }
      else
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, "TableReader: you called Value() after FreeCurrent().");
      }
    }
    else
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, "TableReader: Value() called at the wrong time.");
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
  return kaldi::KaldiObjectHolder<kaldi::Vector<float>>::Value((uint64_t *)(a1 + 24));
}

void sub_1ADA275B0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a21);
}

void kaldi::SequentialTableReaderScriptImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::FreeCurrent(uint64_t a1)
{
  _QWORD v2[34];

  if (*(_DWORD *)(a1 + 120) == 4)
  {
    kaldi::KaldiObjectHolder<kaldi::Vector<float>>::Clear((uint64_t *)(a1 + 24));
    *(_DWORD *)(a1 + 120) = 5;
  }
  else if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"TableReader: FreeCurrent called at the wrong time.", 50);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
  }
}

void sub_1ADA27670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::SequentialTableReaderScriptImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::Next(_BYTE *a1)
{
  uint64_t result;

  do
  {
    kaldi::SequentialTableReaderScriptImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::NextScpLine((uint64_t)a1);
    result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 8))(a1);
    if ((result & 1) != 0)
      break;
    if (!a1[91])
      break;
    result = kaldi::SequentialTableReaderScriptImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::LoadCurrent((uint64_t)a1);
  }
  while (!(_DWORD)result);
  return result;
}

uint64_t kaldi::SequentialTableReaderScriptImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::Close(uint64_t a1)
{
  kaldi::Input *v2;
  uint64_t v3;
  int v4;
  _QWORD v6[34];

  v3 = *(_QWORD *)(a1 + 8);
  v2 = (kaldi::Input *)(a1 + 8);
  if (v3)
    kaldi::Input::Close(v2);
  if (*(_QWORD *)(a1 + 16))
    kaldi::Input::Close((kaldi::Input *)(a1 + 16));
  if (*(_DWORD *)(a1 + 120) == 4)
    kaldi::KaldiObjectHolder<kaldi::Vector<float>>::Clear((uint64_t *)(a1 + 24));
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, "Close() called on input that was not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  v4 = *(_DWORD *)(a1 + 120);
  *(_DWORD *)(a1 + 120) = 0;
  if (v4 == 2)
  {
    if (!*(_BYTE *)(a1 + 91))
      return 0;
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Close() called on scp file with read error, ignoring the error because permissive mode specified.", 97);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    }
  }
  return 1;
}

void sub_1ADA277CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

void kaldi::SequentialTableReaderScriptImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::~SequentialTableReaderScriptImpl(uint64_t a1)
{
  kaldi::SequentialTableReaderScriptImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::~SequentialTableReaderScriptImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::SequentialTableReaderScriptImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::LoadCurrent(uint64_t a1)
{
  kaldi::Input *v2;
  std::string *v3;
  uint64_t *v4;
  uint64_t result;
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  std::string *p_p;
  std::string::size_type size;
  void *v11;
  std::string *v12;
  std::string::size_type v13;
  std::string v14;
  std::string v15;
  std::string __p;
  _QWORD v17[34];

  if (*(_DWORD *)(a1 + 120) != 3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "TableReader: LoadCurrent() called at the wrong time.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  v2 = (kaldi::Input *)(a1 + 16);
  v3 = (std::string *)(a1 + 96);
  if ((kaldi::Input::OpenInternal((_QWORD *)(a1 + 16), a1 + 96, 1, 0) & 1) == 0)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"TableReader: failed to open file ", 33);
      if (*(char *)(a1 + 119) < 0)
        std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)(a1 + 96), *(_QWORD *)(a1 + 104));
      else
        v15 = *v3;
      kaldi::PrintableRxfilename((uint64_t)&v15, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_34;
      v11 = (void *)v15.__r_.__value_.__r.__words[0];
      goto LABEL_33;
    }
LABEL_35:
    result = 0;
    v6 = 5;
    goto LABEL_36;
  }
  v4 = (uint64_t *)kaldi::Input::Stream(v2);
  if ((kaldi::KaldiObjectHolder<kaldi::Vector<float>>::Read((uint64_t *)(a1 + 24), v4) & 1) == 0)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"TableReader: failed to load object from ", 40);
      if (*(char *)(a1 + 119) < 0)
        std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)(a1 + 96), *(_QWORD *)(a1 + 104));
      else
        v14 = *v3;
      kaldi::PrintableRxfilename((uint64_t)&v14, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &__p;
      else
        v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v13 = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v12, v13);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_34;
      v11 = (void *)v14.__r_.__value_.__r.__words[0];
LABEL_33:
      operator delete(v11);
LABEL_34:
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
      goto LABEL_35;
    }
    goto LABEL_35;
  }
  result = 1;
  v6 = 4;
LABEL_36:
  *(_DWORD *)(a1 + 120) = v6;
  return result;
}

void sub_1ADA27AA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void kaldi::SequentialTableReaderScriptImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::NextScpLine(uint64_t a1)
{
  int v2;
  _QWORD *v4;
  const std::locale::facet *v5;
  unsigned __int8 v6;
  _QWORD *v7;
  kaldi::Input *v8;
  uint64_t v9;
  int v10;
  void *__p[2];
  uint64_t v12;
  std::locale v13;

  v2 = *(_DWORD *)(a1 + 120);
  if ((v2 - 5) >= 2 && v2 != 3)
  {
    if (v2 != 4)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "SequentialTableReader, reading script file: Next called wrongly.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
    }
    kaldi::KaldiObjectHolder<kaldi::Vector<float>>::Clear((uint64_t *)(a1 + 24));
  }
  __p[0] = 0;
  __p[1] = 0;
  v12 = 0;
  v4 = (_QWORD *)kaldi::Input::Stream((kaldi::Input *)(a1 + 8));
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v5 = std::locale::use_facet(&v13, MEMORY[0x1E0DE4A90]);
  v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v13);
  v7 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4, (uint64_t)__p, v6);
  if ((*((_BYTE *)v7 + *(_QWORD *)(*v7 - 24) + 32) & 5) == 0)
  {
    kaldi::SplitStringOnFirstSpace((uint64_t)__p, a1 + 40, a1 + 96);
    if (*(char *)(a1 + 63) < 0)
    {
      if (!*(_QWORD *)(a1 + 48))
        goto LABEL_18;
    }
    else if (!*(_BYTE *)(a1 + 63))
    {
      goto LABEL_18;
    }
    if (*(char *)(a1 + 119) < 0)
    {
      if (*(_QWORD *)(a1 + 104))
        goto LABEL_16;
    }
    else if (*(_BYTE *)(a1 + 119))
    {
LABEL_16:
      v10 = 3;
LABEL_19:
      *(_DWORD *)(a1 + 120) = v10;
      goto LABEL_20;
    }
LABEL_18:
    v10 = 2;
    goto LABEL_19;
  }
  *(_DWORD *)(a1 + 120) = 1;
  kaldi::Input::Close((kaldi::Input *)(a1 + 8));
  v9 = *(_QWORD *)(a1 + 16);
  v8 = (kaldi::Input *)(a1 + 16);
  if (v9)
    kaldi::Input::Close(v8);
LABEL_20:
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
}

void sub_1ADA27C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  std::locale::~locale((std::locale *)(v15 - 56));
  _Unwind_Resume(a1);
}

uint64_t kaldi::SequentialTableReaderScriptImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::~SequentialTableReaderScriptImpl(uint64_t a1)
{
  int v2;
  _QWORD *v3;
  std::string *p_p;
  std::string::size_type size;
  std::string v7;
  std::string __p;
  _QWORD v9[34];

  *(_QWORD *)a1 = &off_1E5D2AE48;
  v2 = *(_DWORD *)(a1 + 120);
  if (v2 == 4)
  {
    kaldi::KaldiObjectHolder<kaldi::Vector<float>>::Clear((uint64_t *)(a1 + 24));
  }
  else if (v2 == 2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TableReader: reading script file failed: from scp ", 50);
    if (*(char *)(a1 + 87) < 0)
      std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)(a1 + 64), *(_QWORD *)(a1 + 72));
    else
      v7 = *(std::string *)(a1 + 64);
    kaldi::PrintableRxfilename((uint64_t)&v7, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v7.__r_.__value_.__l.__data_);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  kaldi::KaldiObjectHolder<kaldi::Vector<float>>::~KaldiObjectHolder((uint64_t *)(a1 + 24));
  kaldi::Input::~Input((kaldi::Input *)(a1 + 16));
  kaldi::Input::~Input((kaldi::Input *)(a1 + 8));
  return a1;
}

void *std::vector<kaldi::Vector<float>>::__construct_one_at_end[abi:ne180100]<kaldi::Vector<float> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *result;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  kaldi::Vector<float>::Resize((void **)v4, *(unsigned int *)(a2 + 8), 1);
  result = kaldi::VectorBase<float>::CopyFromVec(v4, (const void **)a2);
  *(_QWORD *)(a1 + 8) = v4 + 24;
  return result;
}

void sub_1ADA27E1C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::Vector<float>>::__push_back_slow_path<kaldi::Vector<float> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];
  uint64_t v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  v11 = (uint64_t)&v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  kaldi::Vector<float>::Resize((void **)v11, *(unsigned int *)(a2 + 8), 1);
  kaldi::VectorBase<float>::CopyFromVec(v11, (const void **)a2);
  v15 += 24;
  std::vector<kaldi::Vector<float>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<kaldi::Vector<float>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1ADA27F2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::Vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *quasar::result_handler::operator<<(_QWORD *a1, uint64_t a2)
{
  std::string::size_type v4;
  std::string *v5;
  std::string::size_type size;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  void **v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  void **v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v41[2];
  void *__p[2];
  unsigned __int8 v43;
  uint64_t v44[2];
  void *v45[2];
  unsigned __int8 v46;
  uint64_t v47[2];
  void *v48[2];
  unsigned __int8 v49;
  std::string v50;

  if (*(char *)(a2 + 23) < 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (v4)
    {
      std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)a2, v4);
      goto LABEL_7;
    }
  }
  else if (*(_BYTE *)(a2 + 23))
  {
    v50 = *(std::string *)a2;
    goto LABEL_7;
  }
  std::string::basic_string[abi:ne180100]<0>(&v50, "null");
LABEL_7:
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v50;
  else
    v5 = (std::string *)v50.__r_.__value_.__r.__words[0];
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
  else
    size = v50.__r_.__value_.__l.__size_;
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v5, size);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"(", 1);
  v9 = *(char *)(a2 + 47);
  if (v9 >= 0)
    v10 = a2 + 24;
  else
    v10 = *(_QWORD *)(a2 + 24);
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a2 + 47);
  else
    v11 = *(_QWORD *)(a2 + 32);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", ", 2);
  v14 = *(char *)(a2 + 71);
  if (v14 >= 0)
    v15 = a2 + 48;
  else
    v15 = *(_QWORD *)(a2 + 48);
  if (v14 >= 0)
    v16 = *(unsigned __int8 *)(a2 + 71);
  else
    v16 = *(_QWORD *)(a2 + 56);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)", progress=", 11);
  v18 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)", maybeCompleteCommand=", 23);
  v19 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)", hasLeadingFillerWord=", 23);
  v20 = (_QWORD *)std::ostream::operator<<();
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", verbTokens=<", 14);
  v47[0] = (uint64_t)" ";
  v47[1] = 1;
  quasar::join<std::vector<std::string>>((uint64_t *)(a2 + 88), v47);
  if ((v49 & 0x80u) == 0)
    v22 = v48;
  else
    v22 = (void **)v48[0];
  if ((v49 & 0x80u) == 0)
    v23 = v49;
  else
    v23 = (uint64_t)v48[1];
  v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
  v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)">", 1);
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)", targetTokens=<", 16);
  v44[0] = (uint64_t)" ";
  v44[1] = 1;
  quasar::join<std::vector<std::string>>((uint64_t *)(a2 + 112), v44);
  if ((v46 & 0x80u) == 0)
    v27 = v45;
  else
    v27 = (void **)v45[0];
  if ((v46 & 0x80u) == 0)
    v28 = v46;
  else
    v28 = (uint64_t)v45[1];
  v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, v28);
  v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)">", 1);
  v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)", payloadTokens=<", 17);
  v41[0] = (uint64_t)" ";
  v41[1] = 1;
  quasar::join<std::vector<std::string>>((uint64_t *)(a2 + 136), v41);
  if ((v43 & 0x80u) == 0)
    v32 = __p;
  else
    v32 = (void **)__p[0];
  if ((v43 & 0x80u) == 0)
    v33 = v43;
  else
    v33 = (uint64_t)__p[1];
  v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
  v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)">", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", targetTokensSize=", 19);
  v36 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)", payloadTokensSize=", 20);
  v37 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)", finishedTarget=", 17);
  v38 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)", fillerTokensCount=", 20);
  v39 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)")", 1);
  if ((char)v43 < 0)
    operator delete(__p[0]);
  if ((char)v46 < 0)
    operator delete(v45[0]);
  if ((char)v49 < 0)
    operator delete(v48[0]);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  return a1;
}

{
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  void **v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v21[2];
  void *__p[2];
  unsigned __int8 v23;
  void *v24[2];
  unsigned __int8 v25;

  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(preceding=<", 12);
  quasar::getTopChoice(a2, 1, v24);
  if ((v25 & 0x80u) == 0)
    v5 = v24;
  else
    v5 = (void **)v24[0];
  if ((v25 & 0x80u) == 0)
    v6 = v25;
  else
    v6 = (uint64_t)v24[1];
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)">", 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", command=<", 11);
  v10 = *(char *)(a2 + 151);
  if (v10 >= 0)
    v11 = a2 + 128;
  else
    v11 = *(_QWORD *)(a2 + 128);
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a2 + 151);
  else
    v12 = *(_QWORD *)(a2 + 136);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)">", 1);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", interpretations=<", 19);
  v21[0] = (uint64_t)", ";
  v21[1] = 2;
  quasar::join<std::vector<quasar::result_handler::CommandInterpretation>>((uint64_t *)(a2 + 152), v21);
  if ((v23 & 0x80u) == 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  if ((v23 & 0x80u) == 0)
    v17 = v23;
  else
    v17 = (uint64_t)__p[1];
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)">", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)")", 1);
  if ((char)v23 < 0)
    operator delete(__p[0]);
  if ((char)v25 < 0)
    operator delete(v24[0]);
  return a1;
}

void sub_1ADA28298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a25 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (*(char *)(v33 - 57) < 0)
    operator delete(*(void **)(v33 - 80));
  _Unwind_Resume(exception_object);
}

void sub_1ADA28470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::join<std::vector<quasar::result_handler::CommandInterpretation>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[11];
  char v8;
  uint64_t v9;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  quasar::joinToStream<std::vector<quasar::result_handler::CommandInterpretation>>(v7, a1, a2);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v7[0] = v4;
  v7[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v8 < 0)
    operator delete((void *)v7[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v9);
}

void sub_1ADA2856C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *quasar::result_handler::operator<<(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(hasVoiceCommandInExhaustiveParses=", 35);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", hasVoiceCommandParses=", 24);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", hasVoiceCommandEditIntent=", 28);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)", hasVoiceCommandAfterReranking=", 32);
  v5 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", hasNoVoiceCommandAfterRespeakCheck=", 37);
  v6 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)")", 1);
  return a1;
}

uint64_t quasar::join<std::vector<quasar::result_handler::CommandData>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[11];
  char v8;
  uint64_t v9;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  quasar::joinToStream<std::vector<quasar::result_handler::CommandData>>(v7, a1, a2);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v7[0] = v4;
  v7[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v8 < 0)
    operator delete((void *)v7[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v9);
}

void sub_1ADA286F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *quasar::joinToStream<std::vector<quasar::result_handler::CommandInterpretation>>(_QWORD *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  char v7;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    v6 = result;
    v7 = 1;
    do
    {
      if ((v7 & 1) == 0)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *a3, a3[1]);
      result = quasar::result_handler::operator<<(v6, v3);
      v7 = 0;
      v3 += 168;
    }
    while (v3 != v4);
  }
  return result;
}

_QWORD *quasar::joinToStream<std::vector<quasar::result_handler::CommandData>>(_QWORD *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  char v7;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    v6 = result;
    v7 = 1;
    do
    {
      if ((v7 & 1) == 0)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *a3, a3[1]);
      result = quasar::result_handler::operator<<(v6, v3);
      v7 = 0;
      v3 += 184;
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t quasar::AMKeywordDetection::AMKeywordDetection(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  __int128 v7;
  _OWORD v9[17];

  *(_QWORD *)a1 = &off_1E5D368D8;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v7;
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 40), *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_BYTE *)(a1 + 208) = a4;
  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3)
  {
    memset(v9, 0, sizeof(v9));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"empty CTC keyword", 17);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v9);
  }
  return a1;
}

void sub_1ADA288F4(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v6 = *(void **)(v2 + 184);
  if (v6)
  {
    *(_QWORD *)(v2 + 192) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(v2 + 160);
  if (v7)
  {
    *(_QWORD *)(v2 + 168) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(v2 + 136);
  if (v8)
  {
    *(_QWORD *)(v2 + 144) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(v2 + 112);
  if (v9)
  {
    *(_QWORD *)(v2 + 120) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(v2 + 88);
  if (v10)
  {
    *(_QWORD *)(v2 + 96) = v10;
    operator delete(v10);
  }
  v11 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v2 + 72) = v11;
    operator delete(v11);
  }
  v12 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 48) = v12;
    operator delete(v12);
  }
  if (*(char *)(v2 + 31) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void quasar::AMKeywordDetection::~AMKeywordDetection(quasar::AMKeywordDetection *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  *(_QWORD *)this = &off_1E5D368D8;
  v2 = (void *)*((_QWORD *)this + 23);
  if (v2)
  {
    *((_QWORD *)this + 24) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 20);
  if (v3)
  {
    *((_QWORD *)this + 21) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 17);
  if (v4)
  {
    *((_QWORD *)this + 18) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 14);
  if (v5)
  {
    *((_QWORD *)this + 15) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 11);
  if (v6)
  {
    *((_QWORD *)this + 12) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 8);
  if (v7)
  {
    *((_QWORD *)this + 9) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 5);
  if (v8)
  {
    *((_QWORD *)this + 6) = v8;
    operator delete(v8);
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  quasar::AMKeywordDetection::~AMKeywordDetection(this);
  JUMPOUT(0x1AF44D190);
}

void quasar::AMKeywordDetection::init(quasar::AMKeywordDetection *this)
{
  uint64_t v1;
  char *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v2 = (char *)this + 64;
  v1 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 4) = -1;
  *((_QWORD *)this + 9) = v1;
  v3 = (char *)this + 88;
  v5 = (char *)this + 112;
  v4 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 12) = *((_QWORD *)this + 11);
  *((_QWORD *)this + 15) = v4;
  v6 = (char *)this + 136;
  *((_QWORD *)this + 18) = *((_QWORD *)this + 17);
  v7 = (char *)this + 184;
  v9 = (char *)this + 160;
  v8 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 24) = *((_QWORD *)this + 23);
  *((_QWORD *)this + 21) = v8;
  std::vector<float>::resize((uint64_t)this + 64, (uint64_t)(*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 3, &quasar::negInf);
  std::vector<float>::resize((uint64_t)v3, (uint64_t)(*((_QWORD *)v2 - 2) - *((_QWORD *)v2 - 3)) >> 3, &quasar::negInf);
  std::vector<float>::resize((uint64_t)v5, (uint64_t)(*((_QWORD *)v2 - 2) - *((_QWORD *)v2 - 3)) >> 3, &quasar::negInf);
  v10 = (uint64_t)(*((_QWORD *)v2 - 2) - *((_QWORD *)v2 - 3)) >> 3;
  v13 = -1;
  std::vector<unsigned long>::resize((uint64_t)v6, v10, &v13);
  v11 = (uint64_t)(*((_QWORD *)v2 - 2) - *((_QWORD *)v2 - 3)) >> 3;
  v13 = -1;
  std::vector<unsigned long>::resize((uint64_t)v7, v11, &v13);
  v12 = (uint64_t)(*((_QWORD *)v2 - 2) - *((_QWORD *)v2 - 3)) >> 3;
  v13 = -1;
  std::vector<unsigned long>::resize((uint64_t)v9, v12, &v13);
}

void quasar::AMKeywordDetection::propagate(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  float *v9;
  _QWORD **v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float *v17;
  uint64_t v18;
  float *v19;
  unint64_t v20;
  unint64_t v21;
  float v22;
  float *v23;
  BOOL v24;
  _QWORD *v25;
  float *v26;
  unint64_t v27;
  float v28;
  float *v29;
  float v30;
  _QWORD *v31;
  _QWORD *v32;
  float v33;
  float v34;
  _QWORD *v35;
  float v36;
  _QWORD *v37;
  float v38;
  float v39;
  float v40;
  float *v41;
  BOOL v42;
  uint64_t v43;
  float *v44;
  float v45;
  float v46;
  BOOL v47;
  _QWORD *v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float *v53;
  _QWORD *v54;
  _QWORD *v55;
  int v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  float *v60;
  _QWORD *v61;
  uint64_t v62;

  v3 = a1;
  v4 = (_QWORD *)a1[5];
  ++a1[4];
  v5 = a1[6] - (_QWORD)v4;
  if ((uint64_t)v5 > 8)
  {
    v6 = a1 + 23;
    v7 = (_QWORD *)a1[23];
    v8 = v5 >> 3;
    v9 = (float *)a1[14];
    v10 = (_QWORD **)(a1 + 20);
    v11 = *a2;
    v12 = (_QWORD *)a1[17];
    v13 = *((unsigned __int8 *)v3 + 208);
    v14 = (v5 >> 3) + 1;
    v15 = 8 * (v5 >> 3) - 8;
    v16 = v5 >> 3;
    v53 = (float *)v3[11];
    v54 = v3;
    v17 = v53 - 1;
    v18 = v3[8] - 8;
    v19 = v9 - 2;
    v20 = v5 >> 3;
    v61 = v4;
    v62 = a3;
    v59 = v7;
    v60 = v9;
    v57 = v11;
    v58 = v12;
    v56 = v13;
    v55 = v3 + 23;
    while (1)
    {
      v21 = v20 - 1;
      v22 = v19[v16 + 1];
      v23 = &v17[v8];
      v24 = v22 < *v23;
      if (v22 <= *v23)
        v25 = v10;
      else
        v25 = v6;
      *(_QWORD *)((char *)v7 + v15) = *(_QWORD *)(*v25 + v15);
      if (v24)
        v26 = &v17[v8];
      else
        v26 = &v19[v16 + 1];
      v19[v16 + 1] = *v26 + *(float *)(v11 + 4 * a3);
      v27 = v20 - 2;
      v28 = *v23;
      if (*(_QWORD *)((char *)v4 + v15) == *(_QWORD *)((char *)v4 + v15 - 8))
      {
        v29 = &v9[v27];
        v30 = v19[v8];
        if (v28 <= v30)
        {
          v32 = &v7[v27];
LABEL_16:
          v31 = *v10;
          goto LABEL_17;
        }
        v31 = *v10;
        v32 = &(*v10)[v21];
      }
      else
      {
        v29 = (float *)(v18 + v16 * 4);
        v30 = *(float *)(v18 + 4 * v8);
        if (v28 <= v30)
        {
          v32 = &v12[v27];
          goto LABEL_16;
        }
        v31 = *v10;
        v32 = (_QWORD *)((char *)*v10 + v15);
      }
LABEL_17:
      *(_QWORD *)((char *)v31 + v15) = *v32;
      if (v28 >= v30)
        v29 = &v17[v16];
      v33 = *v29 + *(float *)(v11 + 4 * *(_QWORD *)((char *)v4 + v15));
      v17[v16] = v33;
      v34 = v19[v16 + 1];
      if (v34 <= v33)
        v35 = (_QWORD *)((char *)v31 + v15);
      else
        v35 = (_QWORD *)((char *)v7 + v15);
      *(_QWORD *)((char *)v12 + v15) = *v35;
      if (v34 >= v33)
        v36 = v34;
      else
        v36 = v33;
      if (!v13)
      {
        v37 = v31;
        v38 = expf(v34 - v36);
        v39 = expf(v33 - v36);
        v40 = logf(v38 + v39);
        v31 = v37;
        v6 = v55;
        v13 = v56;
        v11 = v57;
        v12 = v58;
        v7 = v59;
        v9 = v60;
        v4 = v61;
        a3 = v62;
        if (v36 <= -3.4028e38)
          v40 = -0.0;
        v36 = v36 + v40;
      }
      *(float *)(v18 + v16 * 4 + 4) = v36;
      --v14;
      v15 -= 8;
      --v17;
      v18 -= 4;
      --v19;
      v20 = v21;
      if (v14 <= 2)
      {
        v41 = v53;
        v3 = v54;
        goto LABEL_32;
      }
    }
  }
  v9 = (float *)a1[14];
  v41 = (float *)a1[11];
  v7 = (_QWORD *)a1[23];
  v11 = *a2;
  v31 = (_QWORD *)a1[20];
  v12 = (_QWORD *)a1[17];
  v13 = *((unsigned __int8 *)v3 + 208);
LABEL_32:
  v42 = *v9 < *v41;
  v43 = 20;
  if (*v9 > *v41)
    v43 = 23;
  *v7 = *(_QWORD *)v3[v43];
  if (v42)
    v44 = v41;
  else
    v44 = v9;
  *v9 = *v44 + *(float *)(v11 + 4 * a3);
  *v31 = v3[4];
  v45 = *(float *)(v11 + 4 * *v4);
  *v41 = v45;
  v46 = *v9;
  v47 = *v9 < v45;
  if (*v9 <= v45)
    v48 = v31;
  else
    v48 = v7;
  *v12 = *v48;
  if (v47)
    v49 = v45;
  else
    v49 = v46;
  if (!v13)
  {
    v50 = expf(v46 - v49);
    v51 = expf(v45 - v49);
    v52 = logf(v50 + v51);
    if (v49 <= -3.4028e38)
      v52 = -0.0;
    v49 = v49 + v52;
  }
  *(float *)v3[8] = v49;
}

float quasar::AMKeywordDetection::getScore(quasar::AMKeywordDetection *this)
{
  return *(float *)(*((_QWORD *)this + 8) + ((uint64_t)(*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 1) - 4);
}

float quasar::AMKeywordDetection::getBestStartFrame(quasar::AMKeywordDetection *this)
{
  return (float)*(uint64_t *)(*((_QWORD *)this + 6) - *((_QWORD *)this + 5) + *((_QWORD *)this + 17) - 8);
}

void kaldi::quasar::CEEncoderDecoderNetConfig::Read(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::Input *v5;
  uint64_t *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  __int128 *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v22;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  BOOL v30;
  BOOL v31;
  BOOL v34;
  uint64_t v35;
  BOOL v36;
  BOOL v37;
  BOOL v38;
  BOOL v39;
  BOOL v40;
  _BOOL4 v41;
  BOOL v42;
  uint64_t v43;
  int v44;
  BOOL v46;
  _QWORD *v47;
  __int128 *v48;
  uint64_t v49;
  _QWORD *v50;
  void *__p[2];
  uint64_t v52;
  uint64_t v53;
  int v54;
  __int128 v55;
  uint64_t v56;
  _BYTE v57[15];
  char v58[9];

  v58[0] = 0;
  v5 = (kaldi::Input *)kaldi::Input::Input(v57, a3, v58);
  v6 = (uint64_t *)kaldi::Input::Stream(v5);
  kaldi::quasar::CreateComputeEngineConfig(a2, (uint64_t *)__p);
  v7 = __p[0];
  __p[0] = 0;
  v8 = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 256) = v7;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = __p[0];
    __p[0] = 0;
    if (v9)
      (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
  }
  if ((*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 2) == 0)
  {
    while (1)
    {
      v55 = 0uLL;
      v56 = 0;
      kaldi::ReadToken(v6, v58[0], (uint64_t)&v55);
      if ((SHIBYTE(v56) & 0x80000000) == 0)
      {
        v10 = &v55;
        switch(HIBYTE(v56))
        {
          case 7:
            goto LABEL_7;
          case 8:
            goto LABEL_100;
          case 0xA:
            goto LABEL_123;
          case 0xE:
            if ((_QWORD)v55 == 0x7265646F636E453CLL && *(_QWORD *)((char *)&v55 + 6) == 0x3E7475706E497265)
              goto LABEL_104;
LABEL_95:
            v30 = (_QWORD)v55 == 0x7265646F6365443CLL && *(_QWORD *)((char *)&v55 + 6) == 0x3E7475706E497265;
            v12 = a1 + 48;
            if (!v30)
            {
              v10 = &v55;
              switch(HIBYTE(v56))
              {
                case 7:
                  goto LABEL_7;
                case 8:
                  goto LABEL_100;
                case 0xA:
                  goto LABEL_123;
                case 0xE:
                  v42 = (_QWORD)v55 == 0x7265646F6365443CLL && *(_QWORD *)((char *)&v55 + 6) == 0x3E6B636568437265;
                  v12 = a1 + 72;
                  if (!v42)
                    goto LABEL_127;
                  goto LABEL_156;
                default:
                  goto LABEL_127;
              }
            }
            break;
          case 0xF:
LABEL_75:
            v26 = (_QWORD)v55 == 0x7265646F6365443CLL && *(_QWORD *)((char *)&v55 + 7) == 0x3E74757074754F72;
            v12 = a1 + 120;
            if (!v26)
              goto LABEL_79;
            break;
          case 0x10:
LABEL_70:
            v25 = (_QWORD)v55 == 0x7265646F6365443CLL && *((_QWORD *)&v55 + 1) == 0x3E73736563637553;
            v12 = a1 + 96;
            if (!v25)
            {
              v10 = &v55;
              switch(HIBYTE(v56))
              {
                case 7:
                  goto LABEL_7;
                case 8:
                  goto LABEL_100;
                case 0xA:
                  goto LABEL_123;
                case 0xF:
                  goto LABEL_75;
                default:
                  goto LABEL_127;
              }
            }
            break;
          case 0x12:
            v24 = (_QWORD)v55 == 0x7265646F6365443CLL
               && *((_QWORD *)&v55 + 1) == 0x6449746E65726150
               && (unsigned __int16)v56 == 15987;
            v12 = a1 + 24;
            if (!v24)
            {
              v10 = &v55;
              switch(HIBYTE(v56))
              {
                case 7:
                  goto LABEL_7;
                case 8:
                  goto LABEL_100;
                case 0xA:
                  goto LABEL_123;
                case 0xE:
                  goto LABEL_95;
                case 0xF:
                  goto LABEL_75;
                case 0x10:
                  goto LABEL_70;
                case 0x12:
                  v46 = (_QWORD)v55 == 0x7265646F6365443CLL
                     && *((_QWORD *)&v55 + 1) == 0x6F69746E65747441
                     && (unsigned __int16)v56 == 15982;
                  v12 = a1 + 144;
                  if (v46)
                    goto LABEL_156;
                  if (HIBYTE(v56) == 7)
                    goto LABEL_7;
                  if (HIBYTE(v56) == 10)
                    goto LABEL_90;
                  if (HIBYTE(v56) != 8)
                    goto LABEL_127;
                  goto LABEL_100;
                default:
                  goto LABEL_127;
              }
            }
            break;
          case 0x14:
            if ((_QWORD)v55 != 0x68537475706E493CLL
              || *((_QWORD *)&v55 + 1) != 0x6C706D6554657061
              || v56 != 1046836321)
            {
              goto LABEL_89;
            }
            goto LABEL_134;
          default:
            goto LABEL_127;
        }
LABEL_156:
        kaldi::ReadToken(v6, v58[0], v12);
        goto LABEL_157;
      }
      v13 = *((_QWORD *)&v55 + 1);
      if (*((_QWORD *)&v55 + 1) == 14
        && *(_QWORD *)v55 == 0x7265646F636E453CLL
        && *(_QWORD *)(v55 + 6) == 0x3E7475706E497265)
      {
LABEL_104:
        kaldi::ReadToken(v6, v58[0], a1);
        goto LABEL_157;
      }
      if (*((_QWORD *)&v55 + 1) == 18)
      {
        v16 = *(_QWORD *)v55 == 0x7265646F6365443CLL
           && *(_QWORD *)(v55 + 8) == 0x6449746E65726150
           && *(_WORD *)(v55 + 16) == 15987;
        v12 = a1 + 24;
        if (v16)
          goto LABEL_156;
        v13 = *((_QWORD *)&v55 + 1);
      }
      if (v13 == 14)
      {
        v17 = *(_QWORD *)v55 == 0x7265646F6365443CLL && *(_QWORD *)(v55 + 6) == 0x3E7475706E497265;
        v12 = a1 + 48;
        if (v17)
          goto LABEL_156;
        v13 = *((_QWORD *)&v55 + 1);
        if (*((_QWORD *)&v55 + 1) == 14)
        {
          v18 = *(_QWORD *)v55 == 0x7265646F6365443CLL && *(_QWORD *)(v55 + 6) == 0x3E6B636568437265;
          v12 = a1 + 72;
          if (v18)
            goto LABEL_156;
          if ((v56 & 0x8000000000000000) == 0)
            break;
        }
      }
      if (v13 == 16)
      {
        v19 = *(_QWORD *)v55 == 0x7265646F6365443CLL && *(_QWORD *)(v55 + 8) == 0x3E73736563637553;
        v12 = a1 + 96;
        if (v19)
          goto LABEL_156;
        v13 = *((_QWORD *)&v55 + 1);
      }
      if (v13 == 15)
      {
        v20 = *(_QWORD *)v55 == 0x7265646F6365443CLL && *(_QWORD *)(v55 + 7) == 0x3E74757074754F72;
        v12 = a1 + 120;
        if (v20)
          goto LABEL_156;
        v13 = *((_QWORD *)&v55 + 1);
      }
      if (v13 == 18)
      {
        v22 = *(_QWORD *)v55 == 0x7265646F6365443CLL
           && *(_QWORD *)(v55 + 8) == 0x6F69746E65747441
           && *(_WORD *)(v55 + 16) == 15982;
        v12 = a1 + 144;
        if (v22)
          goto LABEL_156;
        v13 = *((_QWORD *)&v55 + 1);
      }
      if (v13 == 8)
      {
        v12 = a1 + 168;
        if (*(_QWORD *)v55 == 0x3E65646F636E453CLL)
          goto LABEL_156;
LABEL_105:
        v13 = *((_QWORD *)&v55 + 1);
      }
      if (v13 == 7)
      {
        v31 = *(_DWORD *)v55 == 1936020028 && *(_DWORD *)(v55 + 3) == 1047815539;
        v12 = a1 + 192;
        if (v31)
          goto LABEL_156;
        goto LABEL_111;
      }
LABEL_112:
      if (v13 != 20)
        goto LABEL_121;
      if (*(_QWORD *)v55 != 0x68537475706E493CLL
        || *(_QWORD *)(v55 + 8) != 0x6C706D6554657061
        || *(_DWORD *)(v55 + 16) != 1046836321)
      {
        v13 = *((_QWORD *)&v55 + 1);
LABEL_121:
        if (v13 != 10)
          goto LABEL_127;
        v10 = (__int128 *)v55;
LABEL_123:
        v34 = *(_QWORD *)v10 == 0x69447475706E493CLL && *((_WORD *)v10 + 4) == 15981;
        v35 = a1 + 228;
        if (!v34)
          goto LABEL_127;
        goto LABEL_133;
      }
LABEL_134:
      __p[0] = 0;
      __p[1] = 0;
      v52 = 0;
      kaldi::ReadToken(v6, v58[0], (uint64_t)__p);
      kaldi::quasar::InputShapeTemplate::InputShapeTemplate(&v53, __p);
      *(_QWORD *)(a1 + 216) = v53;
      *(_DWORD *)(a1 + 224) = v54;
      if (SHIBYTE(v52) < 0)
        goto LABEL_135;
LABEL_157:
      std::ws[abi:ne180100]<char,std::char_traits<char>>(v6);
      if (SHIBYTE(v56) < 0)
        operator delete((void *)v55);
      if ((*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 2) != 0)
        goto LABEL_160;
    }
LABEL_79:
    if (HIBYTE(v56) == 7)
      goto LABEL_7;
    if (HIBYTE(v56) != 8)
    {
LABEL_89:
      if (HIBYTE(v56) == 10)
      {
LABEL_90:
        v10 = &v55;
        goto LABEL_123;
      }
LABEL_127:
      v36 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v55, "<OutputDim>");
      v35 = a1 + 232;
      if (!v36)
      {
        v37 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v55, "<FrameSubsamplingFactor>");
        v35 = a1 + 236;
        if (!v37)
        {
          v38 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v55, "<BOSIndex>");
          v35 = a1 + 240;
          if (!v38)
          {
            v39 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v55, "<EOSIndex>");
            v35 = a1 + 244;
            if (!v39)
            {
              v40 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v55, "<SilIndex>");
              v35 = a1 + 248;
              if (!v40)
              {
                v41 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v55, "<Beam>");
                v35 = a1 + 252;
                if (!v41)
                {
                  if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v55, "<Engine>"))
                  {
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                    v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unknown token ", 14);
                    if (v56 >= 0)
                      v48 = &v55;
                    else
                      v48 = (__int128 *)v55;
                    if (v56 >= 0)
                      v49 = HIBYTE(v56);
                    else
                      v49 = *((_QWORD *)&v55 + 1);
                    v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)v48, v49);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)", a typo in config file?", 24);
                    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
                  }
                  v43 = *(_QWORD *)(a1 + 256);
                  v44 = v58[0];
                  std::string::basic_string[abi:ne180100]<0>(__p, "</Engine>");
                  (*(void (**)(uint64_t, uint64_t *, BOOL, void **))(*(_QWORD *)v43 + 16))(v43, v6, v44 != 0, __p);
                  if ((SHIBYTE(v52) & 0x80000000) == 0)
                    goto LABEL_157;
LABEL_135:
                  operator delete(__p[0]);
                  goto LABEL_157;
                }
              }
            }
          }
        }
      }
LABEL_133:
      kaldi::ReadBasicType<int>(v6, v58[0], v35);
      goto LABEL_157;
    }
LABEL_100:
    v12 = a1 + 168;
    if ((_QWORD)v55 == 0x3E65646F636E453CLL)
      goto LABEL_156;
    if ((v56 & 0x8000000000000000) == 0)
    {
      if (HIBYTE(v56) != 7)
        goto LABEL_127;
LABEL_7:
      v11 = (_DWORD)v55 == 1936020028 && *(_DWORD *)((char *)&v55 + 3) == 1047815539;
      v12 = a1 + 192;
      if (v11)
        goto LABEL_156;
      if ((v56 & 0x8000000000000000) == 0)
        goto LABEL_127;
LABEL_111:
      v13 = *((_QWORD *)&v55 + 1);
      goto LABEL_112;
    }
    goto LABEL_105;
  }
LABEL_160:
  kaldi::Input::~Input((kaldi::Input *)v57);
}

void sub_1ADA2974C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 105) < 0)
    operator delete(*(void **)(v28 - 128));
  kaldi::Input::~Input((kaldi::Input *)(v28 - 104));
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::CEEncoderDecoderNet::CEEncoderDecoderNet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)a1 = &off_1E5D33738;
  v6 = a1 + 8;
  kaldi::quasar::CEEncoderDecoderNetConfig::CEEncoderDecoderNetConfig((kaldi::quasar::CEEncoderDecoderNetConfig *)(a1 + 8));
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  kaldi::quasar::CEEncoderDecoderNetConfig::Read(v6, a2, a3);
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 264) + 24))(&__p);
  v7 = __p;
  __p = 0;
  v8 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 272) = v7;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = __p;
    __p = 0;
    if (v9)
      (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
  }
  v10 = *(_QWORD *)(a1 + 272);
  __p = 0;
  v16 = 0;
  v17 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)v10 + 48))(&v18, v10, &__p);
  v11 = v18;
  v18 = 0;
  v12 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 280) = v11;
  if (v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = v18;
    v18 = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  return a1;
}

void sub_1ADA298D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  quasar::Bitmap *v10;
  kaldi::quasar::CEEncoderDecoderNetConfig *v11;
  uint64_t *v12;
  uint64_t v14;
  uint64_t v15;

  if (__p)
    operator delete(__p);
  v14 = *((_QWORD *)v10 + 35);
  *((_QWORD *)v10 + 35) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *v12;
  *v12 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  kaldi::quasar::CEEncoderDecoderNetConfig::~CEEncoderDecoderNetConfig(v11);
  quasar::Bitmap::~Bitmap(v10);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::CEEncoderDecoderNet::CEEncoderDecoderNet(uint64_t a1, uint64_t a2)
{
  size_t v4;
  void **v5;
  const void *v6;
  void *__p[2];
  char v9;

  if (*(char *)(a2 + 23) >= 0)
    v4 = *(unsigned __int8 *)(a2 + 23);
  else
    v4 = *(_QWORD *)(a2 + 8);
  v5 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v4 + 7);
  if (v9 < 0)
    v5 = (void **)__p[0];
  if (v4)
  {
    if (*(char *)(a2 + 23) >= 0)
      v6 = (const void *)a2;
    else
      v6 = *(const void **)a2;
    memmove(v5, v6, v4);
  }
  strcpy((char *)v5 + v4, ".config");
  kaldi::quasar::CEEncoderDecoderNet::CEEncoderDecoderNet(a1, a2, (uint64_t)__p);
  if (v9 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1ADA29A14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::CEEncoderDecoderNet::~CEEncoderDecoderNet(kaldi::quasar::CEEncoderDecoderNet *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E5D33738;
  v2 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  kaldi::quasar::CEEncoderDecoderNetConfig::~CEEncoderDecoderNetConfig((kaldi::quasar::CEEncoderDecoderNet *)((char *)this + 8));
  quasar::Bitmap::~Bitmap(this);
}

{
  kaldi::quasar::CEEncoderDecoderNet::~CEEncoderDecoderNet(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::quasar::CEEncoderDecoderNet::Encode(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  std::string *v6;
  std::string *v7;
  void **p_data;
  void **v9[3];
  void **v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void ***v14;
  char v15;
  std::string v16;
  __int128 v17;

  *(_QWORD *)&v17 = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a2 + 152))(*a2) != *(_DWORD *)(a1 + 232))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v11);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v11, "in->GetNumDims() == cfg_.input_shape_template.ndim");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v11);
  }
  v4 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)*a2 + 160))(*a2, *(unsigned int *)(a1 + 228));
  if (v4 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v11);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v11, "in->GetDimSize(cfg_.input_shape_template.col_index) == InputDim()");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v11);
  }
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v12 = std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v11, (__int128 *)(a1 + 8), *a2);
  memset(v10, 0, sizeof(v10));
  v5 = *(_QWORD *)(a1 + 272);
  memset(v9, 0, sizeof(v9));
  if (*(char *)(a1 + 199) < 0)
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)(a1 + 176), *(_QWORD *)(a1 + 184));
  else
    v16 = *(std::string *)(a1 + 176);
  v6 = 0;
  v7 = 0;
  p_data = 0;
  v14 = (void ***)&v6;
  v15 = 0;
  v6 = (std::string *)operator new(0x18uLL);
  v7 = v6;
  p_data = (void **)&v6[1].__r_.__value_.__l.__data_;
  v7 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (__int128 *)&v16, &v17, v6);
  (*(void (**)(uint64_t, uint64_t *, void ***, std::string **, void ***))(*(_QWORD *)v5 + 128))(v5, &v11, v9, &v6, v10);
  v14 = (void ***)&v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  v6 = (std::string *)v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
  v9[0] = (void **)v10;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](v9);
  v10[0] = (void **)&v11;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v10);
}

void sub_1ADA29D4C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEEncoderDecoderNet::Encode(uint64_t a1, uint64_t a2)
{
  kaldi::quasar::ComputeEngineBufferItf *v4;
  kaldi::quasar::ComputeEngineBufferItf *v5;
  kaldi::quasar::ComputeEngineBufferItf *v6;
  kaldi::quasar::ComputeEngineBufferItf *v7;
  void *__p[3];

  kaldi::quasar::InputShapeTemplate::Get((kaldi::quasar::InputShapeTemplate *)(a1 + 224), *(int *)(a2 + 20), *(int *)(a2 + 16), __p);
  v6 = 0;
  kaldi::quasar::CreateBufferFromMatrix((_QWORD *)(a1 + 272), a2, (uint64_t)__p, &v6, &v7);
  v4 = v6;
  v6 = 0;
  if (v4)
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v4 + 8))(v4);
  kaldi::quasar::CEEncoderDecoderNet::Encode(a1, (uint64_t *)&v7);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v5 + 8))(v5);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1ADA29DFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::CEEncoderDecoderNet::Encode(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  void *__p[3];
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 272);
  kaldi::quasar::InputShapeTemplate::Get((kaldi::quasar::InputShapeTemplate *)(a1 + 224), 1, *(int *)(a2 + 16), __p);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)v4 + 56))(&v7, v4, __p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v7 + 88))(v7, *(_QWORD *)(a2 + 8), *(unsigned int *)(a2 + 16), 0);
  kaldi::quasar::CEEncoderDecoderNet::Encode(a1, &v7);
  result = v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1ADA29EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::CEEncoderDecoderNet::FinishEncoding(kaldi::quasar::CEEncoderDecoderNet *this)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 35) + 96))(*((_QWORD *)this + 35), 0, 0);
}

uint64_t kaldi::quasar::CEEncoderDecoderNet::Decode(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  std::string *v9;
  std::string *v10;
  __int128 *v11;
  uint64_t v12;
  __int128 v13;
  std::string *v14;
  __int128 *v15;
  std::string::size_type v16;
  __int128 v17;
  uint64_t p_size;
  uint64_t v19;
  __int128 *v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::string *v32;
  std::string *v33;
  std::string *v34;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  std::string *v39;
  char v40;
  std::string v41;
  std::string v42;
  __int128 v43;

  *((_QWORD *)&v43 + 1) = *MEMORY[0x1E0C80C00];
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v9 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v36, (__int128 *)(a1 + 32), *a2);
  v10 = v9;
  v37 = (uint64_t)v9;
  v11 = (__int128 *)(a1 + 56);
  v12 = *a3;
  if ((unint64_t)v9 >= v38)
  {
    v14 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v36, v11, v12);
  }
  else
  {
    if (*(char *)(a1 + 79) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a1 + 56), *(_QWORD *)(a1 + 64));
    }
    else
    {
      v13 = *v11;
      v9->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 72);
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v13;
    }
    v10[1].__r_.__value_.__r.__words[0] = v12;
    v14 = (std::string *)((char *)v10 + 32);
  }
  v37 = (uint64_t)v14;
  if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 103))
      goto LABEL_18;
LABEL_11:
    v15 = (__int128 *)(a1 + 80);
    v16 = *(_QWORD *)(a1 + 280);
    if ((unint64_t)v14 >= v38)
    {
      p_size = std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v36, v15, *(_QWORD *)(a1 + 280));
    }
    else
    {
      if ((*(_BYTE *)(a1 + 103) & 0x80) != 0)
      {
        std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)(a1 + 80), *(_QWORD *)(a1 + 88));
      }
      else
      {
        v17 = *v15;
        v14->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 96);
        *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v17;
      }
      v14[1].__r_.__value_.__r.__words[0] = v16;
      p_size = (uint64_t)&v14[1].__r_.__value_.__l.__size_;
    }
    v37 = p_size;
    goto LABEL_18;
  }
  if (*(_QWORD *)(a1 + 88))
    goto LABEL_11;
LABEL_18:
  memset(v35, 0, sizeof(v35));
  if (*(char *)(a1 + 151) < 0)
    std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)(a1 + 128), *(_QWORD *)(a1 + 136));
  else
    v41 = *(std::string *)(a1 + 128);
  if (*(char *)(a1 + 175) < 0)
    std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)(a1 + 152), *(_QWORD *)(a1 + 160));
  else
    v42 = *(std::string *)(a1 + 152);
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v39 = (std::string *)&v32;
  v40 = 0;
  v32 = (std::string *)operator new(0x30uLL);
  v33 = v32;
  v34 = v32 + 2;
  v19 = 0;
  v33 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v34, (__int128 *)&v41, &v43, v32);
  do
  {
    if (SHIBYTE(v42.__r_.__value_.__r.__words[v19 + 2]) < 0)
      operator delete(*(void **)((char *)&v41 + v19 * 8 + 24));
    v19 -= 3;
  }
  while (v19 != -6);
  if (*(char *)(a1 + 127) < 0)
  {
    if (!*(_QWORD *)(a1 + 112))
      goto LABEL_39;
  }
  else if (!*(_BYTE *)(a1 + 127))
  {
    goto LABEL_39;
  }
  v20 = (__int128 *)(a1 + 104);
  v21 = v33;
  if (v33 >= v34)
  {
    v23 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v32, v20);
  }
  else
  {
    if ((*(_BYTE *)(a1 + 127) & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(v33, *(const std::string::value_type **)(a1 + 104), *(_QWORD *)(a1 + 112));
    }
    else
    {
      v22 = *v20;
      v33->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 120);
      *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
    }
    v23 = v21 + 1;
  }
  v33 = v23;
LABEL_39:
  v24 = *(_QWORD *)(a1 + 272);
  memset(&v41, 0, sizeof(v41));
  (*(void (**)(uint64_t, uint64_t *, std::string **, std::string *, _QWORD *))(*(_QWORD *)v24 + 128))(v24, &v36, &v32, &v41, v35);
  v39 = &v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
  if (*(char *)(a1 + 127) < 0)
  {
    if (!*(_QWORD *)(a1 + 112))
      goto LABEL_44;
  }
  else if (!*(_BYTE *)(a1 + 127))
  {
    goto LABEL_44;
  }
  memset(&v41, 0, sizeof(v41));
  (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v35[0] + 16) + 48))(*(_QWORD *)(v35[0] + 16), &v41);
  v25 = *(_DWORD *)v41.__r_.__value_.__l.__data_;
  v41.__r_.__value_.__l.__size_ = v41.__r_.__value_.__r.__words[0];
  operator delete(v41.__r_.__value_.__l.__data_);
  if (!v25)
  {
    v30 = 0;
    goto LABEL_50;
  }
LABEL_44:
  v26 = *(_QWORD *)v35[0];
  *(_QWORD *)v35[0] = 0;
  v27 = *a4;
  *a4 = v26;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = *(_QWORD *)(v35[0] + 8);
  *(_QWORD *)(v35[0] + 8) = 0;
  v29 = *a5;
  *a5 = v28;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v30 = 1;
LABEL_50:
  v41.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
  v41.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
  v41.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
  return v30;
}

void sub_1ADA2A2EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  __p = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &a13;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &a16;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::CEEncoderDecoderNet::Decode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 272) + 16))(&v17);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 272) + 16))(&v16, *(_QWORD *)(a1 + 272), a3, 0);
  v14 = 0;
  v15 = 0;
  v9 = kaldi::quasar::CEEncoderDecoderNet::Decode(a1, &v17, &v16, &v15, &v14);
  if ((v9 & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 56))(v15, a4);
    v10 = v14;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 56))(v14, a5);
  }
  else
  {
    v10 = v14;
    if (!v14)
      goto LABEL_5;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
LABEL_5:
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v11 = v16;
  v16 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = v17;
  v17 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  return v9;
}

void sub_1ADA2A4FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::CEEncoderDecoderNet::Decode(_QWORD **a1, uint64_t a2, uint64_t *a3, int32x2_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  (*(void (**)(uint64_t *__return_ptr))(*a1[34] + 16))(&v19);
  (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t *, _QWORD))(*a1[34] + 16))(&v18, a1[34], a3, 0);
  v16 = 0;
  v17 = 0;
  v7 = kaldi::quasar::CEEncoderDecoderNet::Decode((uint64_t)a1, &v19, &v18, &v17, &v16);
  if ((v7 & 1) != 0)
  {
    v8 = v17;
    v10 = *a3;
    v9 = a3[1];
    v11 = ((uint64_t (*)(_QWORD **))(*a1)[11])(a1);
    kaldi::quasar::CopyBufferToMatrix(v8, (unint64_t)(v9 - v10) >> 2, v11, a4);
    v12 = v16;
    kaldi::quasar::CopyBufferToMatrix(v16, (unint64_t)(a3[1] - *a3) >> 2, 0xFFFFFFFFLL, a4);
    if (!v12)
      goto LABEL_4;
    goto LABEL_3;
  }
  v12 = v16;
  if (v16)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
LABEL_4:
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v13 = v18;
  v18 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = v19;
  v19 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  return v7;
}

void sub_1ADA2A6BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::CEEncoderDecoderNet::Decode(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *__p;
  void *v12;
  _DWORD *v13;
  uint64_t v14;

  (*(void (**)(uint64_t))(*(_QWORD *)*a2 + 152))(*a2);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)*a2 + 160))(*a2, 0);
  v6 = *(_QWORD *)(a1 + 272);
  v7 = operator new(4uLL);
  __p = v7;
  *v7 = 0;
  v12 = v7 + 1;
  v13 = v7 + 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **, _QWORD))(*(_QWORD *)v6 + 16))(&v14, v6, &__p, 0);
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
  __p = 0;
  v8 = kaldi::quasar::CEEncoderDecoderNet::Decode(a1, &v14, a2, a3, (uint64_t *)&__p);
  if (__p)
    (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
  v9 = v14;
  v14 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return v8;
}

void sub_1ADA2A814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__p)
    (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::CEEncoderDecoderNet::Decode(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *__p;
  void *v13;
  _DWORD *v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a1 + 272);
  v7 = operator new(4uLL);
  __p = v7;
  *v7 = a2;
  v13 = v7 + 1;
  v14 = v7 + 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **, _QWORD))(*(_QWORD *)v6 + 16))(&v15, v6, &__p, 0);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  __p = 0;
  v8 = kaldi::quasar::CEEncoderDecoderNet::Decode(a1, &v15, (uint64_t *)&__p);
  v9 = __p;
  if ((v8 & 1) != 0)
  {
    (*(void (**)(void *, uint64_t))(*(_QWORD *)__p + 56))(__p, a3);
  }
  else if (!__p)
  {
    goto LABEL_7;
  }
  (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
LABEL_7:
  v10 = v15;
  v15 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return v8;
}

{
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *__p;
  void *v13;
  _DWORD *v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a1 + 272);
  v7 = operator new(4uLL);
  __p = v7;
  *v7 = a2;
  v13 = v7 + 1;
  v14 = v7 + 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **, _QWORD))(*(_QWORD *)v6 + 16))(&v15, v6, &__p, 0);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  __p = 0;
  v8 = kaldi::quasar::CEEncoderDecoderNet::Decode(a1, &v15, (uint64_t *)&__p);
  v9 = __p;
  if ((v8 & 1) != 0)
  {
    (*(void (**)(void *, uint64_t))(*(_QWORD *)__p + 40))(__p, a3);
  }
  else if (!__p)
  {
    goto LABEL_7;
  }
  (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
LABEL_7:
  v10 = v15;
  v15 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return v8;
}

void sub_1ADA2A944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1ADA2AA74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::CEEncoderDecoderNet::Reset(kaldi::quasar::CEEncoderDecoderNet *this)
{
  uint64_t v2;
  std::string *v3;
  std::string *v4;
  void **p_data;
  void **v6[3];
  _QWORD v7[3];
  void ***v8;
  char v9;
  std::string v10;
  __int128 v11;

  *(_QWORD *)&v11 = *MEMORY[0x1E0C80C00];
  memset(v7, 0, sizeof(v7));
  v2 = *((_QWORD *)this + 34);
  memset(v6, 0, sizeof(v6));
  if (*((char *)this + 223) < 0)
    std::string::__init_copy_ctor_external(&v10, *((const std::string::value_type **)this + 25), *((_QWORD *)this + 26));
  else
    v10 = *(std::string *)((char *)this + 200);
  v3 = 0;
  v4 = 0;
  p_data = 0;
  v8 = (void ***)&v3;
  v9 = 0;
  v3 = (std::string *)operator new(0x18uLL);
  v4 = v3;
  p_data = (void **)&v3[1].__r_.__value_.__l.__data_;
  v4 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (__int128 *)&v10, &v11, v3);
  (*(void (**)(uint64_t, _QWORD *, void ***, std::string **, _QWORD))(*(_QWORD *)v2 + 120))(v2, v7, v6, &v3, 0);
  v8 = (void ***)&v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  v3 = (std::string *)v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v3);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 35) + 96))(*((_QWORD *)this + 35), 1, 0);
  v6[0] = (void **)v7;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](v6);
}

void sub_1ADA2AC1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void ***a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, char a16)
{
  a10 = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  a13 = (void **)&a16;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::CEEncoderDecoderNet::InputDim(kaldi::quasar::CEEncoderDecoderNet *this)
{
  return *((unsigned int *)this + 59);
}

uint64_t kaldi::quasar::CEEncoderDecoderNet::OutputDim(kaldi::quasar::CEEncoderDecoderNet *this)
{
  return *((unsigned int *)this + 60);
}

uint64_t kaldi::quasar::CEEncoderDecoderNet::FrameSubsamplingFactor(kaldi::quasar::CEEncoderDecoderNet *this)
{
  return *((unsigned int *)this + 61);
}

uint64_t kaldi::quasar::CEEncoderDecoderNet::BOSIndex(kaldi::quasar::CEEncoderDecoderNet *this)
{
  return *((unsigned int *)this + 62);
}

uint64_t kaldi::quasar::CEEncoderDecoderNet::EOSIndex(kaldi::quasar::CEEncoderDecoderNet *this)
{
  return *((unsigned int *)this + 63);
}

uint64_t kaldi::quasar::CEEncoderDecoderNet::SilIndex(kaldi::quasar::CEEncoderDecoderNet *this)
{
  return *((unsigned int *)this + 64);
}

uint64_t kaldi::quasar::CEEncoderDecoderNet::Beam(kaldi::quasar::CEEncoderDecoderNet *this)
{
  return *((unsigned int *)this + 65);
}

void kaldi::quasar::CEEncoderNetConfig::Read(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::Input *v5;
  uint64_t *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  BOOL v17;
  uint64_t v18;
  BOOL v19;
  BOOL v21;
  __int128 *v22;
  BOOL v24;
  BOOL v31;
  BOOL v32;
  uint64_t v33;
  int v34;
  _QWORD *v35;
  __int128 *v36;
  uint64_t v37;
  _QWORD *v38;
  void *__p;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  int v43;
  char v44;
  __int128 v45;
  uint64_t v46;
  _BYTE v47[15];
  char v48[9];

  v48[0] = 0;
  v5 = (kaldi::Input *)kaldi::Input::Input(v47, a3, v48);
  v6 = (uint64_t *)kaldi::Input::Stream(v5);
  kaldi::quasar::CreateComputeEngineConfig(a2, (uint64_t *)&__p);
  v7 = __p;
  __p = 0;
  v8 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v7;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = __p;
    __p = 0;
    if (v9)
      (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
  }
  while ((*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 2) == 0)
  {
    v45 = 0uLL;
    v46 = 0;
    kaldi::ReadToken(v6, v48[0], (uint64_t)&v45);
    if ((SHIBYTE(v46) & 0x80000000) == 0)
    {
      switch(HIBYTE(v46))
      {
        case 8:
          if ((_QWORD)v45 != 0x3E737475706E493CLL)
            goto LABEL_124;
          goto LABEL_67;
        case 9:
          if ((_QWORD)v45 != 0x7374757074754F3CLL || BYTE8(v45) != 62)
            goto LABEL_123;
          goto LABEL_105;
        case 0xA:
          goto LABEL_119;
        case 0xB:
          goto LABEL_113;
        case 0xD:
          if ((_QWORD)v45 != 0x74537475706E493CLL || *(_QWORD *)((char *)&v45 + 5) != 0x3E73657461745374)
            goto LABEL_110;
          goto LABEL_82;
        case 0xE:
          if ((_QWORD)v45 != 0x5374757074754F3CLL || *(_QWORD *)((char *)&v45 + 6) != 0x3E73657461745374)
            goto LABEL_110;
          goto LABEL_88;
        case 0xF:
          if ((_QWORD)v45 == 0x6C616974696E493CLL && *(_QWORD *)((char *)&v45 + 7) == 0x3E7365746174536CLL)
            goto LABEL_127;
LABEL_110:
          if (HIBYTE(v46) == 8)
            goto LABEL_124;
          if (HIBYTE(v46) == 10)
            goto LABEL_119;
          if (HIBYTE(v46) != 11)
            goto LABEL_137;
LABEL_113:
          v31 = (_QWORD)v45 == 0x4474757074754F3CLL && *(_QWORD *)((char *)&v45 + 3) == 0x3E6D694474757074;
          v18 = a1 + 136;
          if (!v31)
            goto LABEL_123;
          goto LABEL_118;
        case 0x14:
          if ((_QWORD)v45 == 0x68537475706E493CLL
            && *((_QWORD *)&v45 + 1) == 0x6C706D6554657061
            && v46 == 1046836321)
          {
            goto LABEL_130;
          }
          if (HIBYTE(v46) == 8)
            goto LABEL_124;
          if (HIBYTE(v46) == 11)
            goto LABEL_113;
          if (HIBYTE(v46) != 10)
            goto LABEL_137;
LABEL_119:
          v32 = (_QWORD)v45 == 0x69447475706E493CLL && WORD4(v45) == 15981;
          v18 = a1 + 132;
          if (v32)
            goto LABEL_118;
LABEL_123:
          if (HIBYTE(v46) != 8)
            goto LABEL_137;
LABEL_124:
          v22 = &v45;
          break;
        case 0x18:
          v24 = (_QWORD)v45 == 0x7553656D6172463CLL
             && *((_QWORD *)&v45 + 1) == 0x6E696C706D617362
             && v46 == 0x3E726F7463614667;
          v18 = a1 + 140;
          if (!v24)
            goto LABEL_123;
          goto LABEL_118;
        default:
          goto LABEL_137;
      }
      goto LABEL_125;
    }
    v10 = *((_QWORD *)&v45 + 1);
    if (*((_QWORD *)&v45 + 1) == 8 && *(_QWORD *)v45 == 0x3E737475706E493CLL)
    {
LABEL_67:
      kaldi::ReadToken(v6, v48[0], a1);
    }
    else
    {
      if (*((_QWORD *)&v45 + 1) != 9)
        goto LABEL_17;
      if (*(_QWORD *)v45 != 0x7374757074754F3CLL || *(_BYTE *)(v45 + 8) != 62)
      {
        v10 = *((_QWORD *)&v45 + 1);
LABEL_17:
        if (v10 == 13)
        {
          if (*(_QWORD *)v45 == 0x74537475706E493CLL && *(_QWORD *)(v45 + 5) == 0x3E73657461745374)
          {
LABEL_82:
            __p = 0;
            v40 = 0;
            v41 = 0;
            kaldi::ReadToken(v6, v48[0], (uint64_t)&__p);
            std::string::basic_string[abi:ne180100]<0>(&v42, ",");
            kaldi::SplitStringOnString((uint64_t)&__p, (char *)&v42, (uint64_t *)(a1 + 48));
            goto LABEL_128;
          }
          v10 = *((_QWORD *)&v45 + 1);
        }
        if (v10 == 14)
        {
          if (*(_QWORD *)v45 == 0x5374757074754F3CLL && *(_QWORD *)(v45 + 6) == 0x3E73657461745374)
          {
LABEL_88:
            __p = 0;
            v40 = 0;
            v41 = 0;
            kaldi::ReadToken(v6, v48[0], (uint64_t)&__p);
            std::string::basic_string[abi:ne180100]<0>(&v42, ",");
            kaldi::SplitStringOnString((uint64_t)&__p, (char *)&v42, (uint64_t *)(a1 + 72));
            goto LABEL_128;
          }
          v10 = *((_QWORD *)&v45 + 1);
        }
        if (v10 == 15)
        {
          if (*(_QWORD *)v45 == 0x6C616974696E493CLL && *(_QWORD *)(v45 + 7) == 0x3E7365746174536CLL)
          {
LABEL_127:
            __p = 0;
            v40 = 0;
            v41 = 0;
            kaldi::ReadToken(v6, v48[0], (uint64_t)&__p);
            std::string::basic_string[abi:ne180100]<0>(&v42, ",");
            kaldi::SplitStringOnString((uint64_t)&__p, (char *)&v42, (uint64_t *)(a1 + 96));
LABEL_128:
            if (v44 < 0)
              operator delete(v42);
            goto LABEL_131;
          }
          v10 = *((_QWORD *)&v45 + 1);
        }
        if (v10 == 20)
        {
          if (*(_QWORD *)v45 == 0x68537475706E493CLL
            && *(_QWORD *)(v45 + 8) == 0x6C706D6554657061
            && *(_DWORD *)(v45 + 16) == 1046836321)
          {
LABEL_130:
            __p = 0;
            v40 = 0;
            v41 = 0;
            kaldi::ReadToken(v6, v48[0], (uint64_t)&__p);
            kaldi::quasar::InputShapeTemplate::InputShapeTemplate(&v42, &__p);
            *(_QWORD *)(a1 + 120) = v42;
            *(_DWORD *)(a1 + 128) = v43;
            goto LABEL_131;
          }
          v10 = *((_QWORD *)&v45 + 1);
        }
        if (v10 == 10)
        {
          v17 = *(_QWORD *)v45 == 0x69447475706E493CLL && *(_WORD *)(v45 + 8) == 15981;
          v18 = a1 + 132;
          if (!v17)
          {
            v10 = *((_QWORD *)&v45 + 1);
            goto LABEL_50;
          }
LABEL_118:
          kaldi::ReadBasicType<int>(v6, v48[0], v18);
          goto LABEL_133;
        }
LABEL_50:
        if (v10 == 11)
        {
          v19 = *(_QWORD *)v45 == 0x4474757074754F3CLL && *(_QWORD *)(v45 + 3) == 0x3E6D694474757074;
          v18 = a1 + 136;
          if (v19)
            goto LABEL_118;
          v10 = *((_QWORD *)&v45 + 1);
        }
        if (v10 != 24)
          goto LABEL_65;
        v21 = *(_QWORD *)v45 == 0x7553656D6172463CLL
           && *(_QWORD *)(v45 + 8) == 0x6E696C706D617362
           && *(_QWORD *)(v45 + 16) == 0x3E726F7463614667;
        v18 = a1 + 140;
        if (!v21)
        {
          v10 = *((_QWORD *)&v45 + 1);
LABEL_65:
          if (v10 != 8)
            goto LABEL_137;
          v22 = (__int128 *)v45;
LABEL_125:
          if (*(_QWORD *)v22 != 0x3E656E69676E453CLL)
          {
LABEL_137:
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown token ", 14);
            if (v46 >= 0)
              v36 = &v45;
            else
              v36 = (__int128 *)v45;
            if (v46 >= 0)
              v37 = HIBYTE(v46);
            else
              v37 = *((_QWORD *)&v45 + 1);
            v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v36, v37);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)", a typo in config file?", 24);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
          }
          v33 = *(_QWORD *)(a1 + 144);
          v34 = v48[0];
          std::string::basic_string[abi:ne180100]<0>(&__p, "</Engine>");
          (*(void (**)(uint64_t, uint64_t *, BOOL, void **))(*(_QWORD *)v33 + 16))(v33, v6, v34 != 0, &__p);
LABEL_131:
          if (SHIBYTE(v41) < 0)
            operator delete(__p);
          goto LABEL_133;
        }
        goto LABEL_118;
      }
LABEL_105:
      kaldi::ReadToken(v6, v48[0], a1 + 24);
    }
LABEL_133:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(v6);
    if (SHIBYTE(v46) < 0)
      operator delete((void *)v45);
  }
  kaldi::Input::~Input((kaldi::Input *)v47);
}

void sub_1ADA2B4E4()
{
  JUMPOUT(0x1ADA2B4F0);
}

kaldi::quasar::CEEncoderNetConfig *kaldi::quasar::CEEncoderNet::CEEncoderNet(kaldi::quasar::CEEncoderNetConfig *a1, uint64_t a2)
{
  kaldi::quasar::CEEncoderNetConfig *v4;
  uint64_t *v5;
  size_t v6;
  void **v7;
  const void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *__p[2];
  char v14;

  v4 = kaldi::quasar::CEEncoderNetConfig::CEEncoderNetConfig(a1);
  *(_OWORD *)((char *)v4 + 152) = 0u;
  v5 = (uint64_t *)((char *)v4 + 152);
  *(_OWORD *)((char *)v4 + 168) = 0u;
  if (*(char *)(a2 + 23) >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  v7 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v6 + 7);
  if (v14 < 0)
    v7 = (void **)__p[0];
  if (v6)
  {
    if (*(char *)(a2 + 23) >= 0)
      v8 = (const void *)a2;
    else
      v8 = *(const void **)a2;
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, ".config");
  kaldi::quasar::CEEncoderNetConfig::Read((uint64_t)a1, a2, (uint64_t)__p);
  if (v14 < 0)
    operator delete(__p[0]);
  (*(void (**)(void **__return_ptr))(**((_QWORD **)a1 + 18) + 24))(__p);
  v9 = __p[0];
  __p[0] = 0;
  v10 = *v5;
  *v5 = (uint64_t)v9;
  if (v10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = __p[0];
    __p[0] = 0;
    if (v11)
      (*(void (**)(void *))(*(_QWORD *)v11 + 8))(v11);
  }
  kaldi::quasar::CEEncoderNet::Reset(a1);
  return a1;
}

void sub_1ADA2B64C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  kaldi::quasar::CEEncoderNetConfig *v14;
  uint64_t *v15;
  uint64_t v17;

  __p = v15 + 1;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v17 = *v15;
  *v15 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  kaldi::quasar::CEEncoderNetConfig::~CEEncoderNetConfig(v14);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEEncoderNet::Reset(kaldi::quasar::CEEncoderNet *this)
{
  uint64_t v1;
  void **v2[3];
  _QWORD v3[3];
  void ***v4;

  memset(v3, 0, sizeof(v3));
  v1 = *((_QWORD *)this + 19);
  memset(v2, 0, sizeof(v2));
  (*(void (**)(uint64_t, _QWORD *, char *, void ***, char *))(*(_QWORD *)v1 + 120))(v1, v3, (char *)this + 96, v2, (char *)this + 160);
  v4 = v2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v4);
  v2[0] = (void **)v3;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](v2);
}

void sub_1ADA2B724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v14 - 40) = v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 40));
  a10 = (void **)&a13;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEEncoderNetConfig::~CEEncoderNetConfig(kaldi::quasar::CEEncoderNetConfig *this)
{
  uint64_t v2;
  void **v3;

  v2 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void **)((char *)this + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void kaldi::quasar::CEEncoderNet::~CEEncoderNet(kaldi::quasar::CEEncoderNet *this)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;

  v4 = (void **)((char *)this + 160);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (void **)((char *)this + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void kaldi::quasar::CEEncoderNet::Encode(__int128 *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  unint64_t v9;
  uint64_t v10;
  std::string::size_type v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t p_size;
  __int128 *v16;
  _OWORD *size;
  __int128 v18;
  std::string::size_type v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void **v25[3];
  __int128 v26;
  uint64_t v27;
  std::string v28;
  uint64_t v29;
  std::string::value_type *v30;
  unint64_t v31;
  void ***v32;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a2 + 152))(*a2) != *((_DWORD *)a1 + 32))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v29);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v29, "in->GetNumDims() == cfg_.input_shape_template.ndim");
    goto LABEL_32;
  }
  if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)*a2 + 160))(*a2, *((unsigned int *)a1 + 31)) != *((_DWORD *)a1 + 33))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v29);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v29, "in->GetDimSize(cfg_.input_shape_template.col_index) == InputDim()");
LABEL_32:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v29);
  }
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v6 = *((_QWORD *)a1 + 6);
  if (*((_QWORD *)a1 + 7) == v6)
  {
    v13 = *a2;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = v6 + v7;
      v11 = *(_QWORD *)(*((_QWORD *)a1 + 20) + 8 * v9);
      if ((unint64_t)v8 >= v31)
      {
        v8 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v29, (__int128 *)v10, *(_QWORD *)(*((_QWORD *)a1 + 20) + 8 * v9));
      }
      else
      {
        if (*(char *)(v10 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(v6 + v7), *(_QWORD *)(v6 + v7 + 8));
        }
        else
        {
          v12 = *(_OWORD *)v10;
          v8->__r_.__value_.__r.__words[2] = *(_QWORD *)(v10 + 16);
          *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v12;
        }
        v8[1].__r_.__value_.__r.__words[0] = v11;
        v8 = (std::string *)((char *)v8 + 32);
      }
      v30 = (std::string::value_type *)v8;
      ++v9;
      v6 = *((_QWORD *)a1 + 6);
      v7 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)a1 + 7) - v6) >> 3) > v9);
    v13 = *a2;
    if ((unint64_t)v8 < v31)
    {
      if (*((char *)a1 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a1, *((_QWORD *)a1 + 1));
      }
      else
      {
        v14 = *a1;
        v8->__r_.__value_.__r.__words[2] = *((_QWORD *)a1 + 2);
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v14;
      }
      v8[1].__r_.__value_.__r.__words[0] = v13;
      p_size = (uint64_t)&v8[1].__r_.__value_.__l.__size_;
      v30 = &v8[1].__r_.__value_.__s.__data_[8];
      goto LABEL_19;
    }
  }
  p_size = std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v29, a1, v13);
LABEL_19:
  v30 = (std::string::value_type *)p_size;
  memset(&v28, 0, sizeof(v28));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v28, *((__int128 **)a1 + 9), *((__int128 **)a1 + 10), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a1 + 10) - *((_QWORD *)a1 + 9)) >> 3));
  v16 = (__int128 *)((char *)a1 + 24);
  size = (_OWORD *)v28.__r_.__value_.__l.__size_;
  if (v28.__r_.__value_.__l.__size_ >= v28.__r_.__value_.__r.__words[2])
  {
    v19 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v28, v16);
  }
  else
  {
    if (*((char *)a1 + 47) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v28.__r_.__value_.__l.__size_, *((const std::string::value_type **)a1 + 3), *((_QWORD *)a1 + 4));
    }
    else
    {
      v18 = *v16;
      *(_QWORD *)(v28.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)a1 + 5);
      *size = v18;
    }
    v19 = (std::string::size_type)size + 24;
  }
  v28.__r_.__value_.__l.__size_ = v19;
  v26 = 0uLL;
  v27 = 0;
  v20 = *((_QWORD *)a1 + 19);
  memset(v25, 0, sizeof(v25));
  (*(void (**)(uint64_t, uint64_t *, std::string *, void ***, __int128 *))(*(_QWORD *)v20 + 128))(v20, &v29, &v28, v25, &v26);
  v32 = v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  v21 = *(_QWORD *)(*((_QWORD *)&v26 + 1) - 8);
  *(_QWORD *)(*((_QWORD *)&v26 + 1) - 8) = 0;
  v22 = *a3;
  *a3 = v21;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v24 = *((_QWORD *)&v26 + 1) - 8;
  v23 = *(_QWORD *)(*((_QWORD *)&v26 + 1) - 8);
  *(_QWORD *)(*((_QWORD *)&v26 + 1) - 8) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  *((_QWORD *)&v26 + 1) = v24;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate((_QWORD *)a1 + 20);
  a1[10] = v26;
  *((_QWORD *)a1 + 22) = v27;
  v27 = 0;
  v26 = 0uLL;
  v25[0] = (void **)&v26;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](v25);
  *(_QWORD *)&v26 = &v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
}

void sub_1ADA2BC28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void kaldi::quasar::CEDecoderNetConfig::Read(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::Input *v5;
  uint64_t *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  __int128 *v10;
  uint64_t v12;
  BOOL v14;
  uint64_t v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  uint64_t v36;
  BOOL v37;
  BOOL v38;
  BOOL v39;
  _BOOL4 v40;
  uint64_t v41;
  int v42;
  BOOL v43;
  _QWORD *v44;
  __int128 *v45;
  uint64_t v46;
  _QWORD *v47;
  void *__p;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  int v52;
  char v53;
  __int128 v54;
  uint64_t v55;
  _BYTE v56[15];
  char v57[9];

  v57[0] = 0;
  v5 = (kaldi::Input *)kaldi::Input::Input(v56, a3, v57);
  v6 = (uint64_t *)kaldi::Input::Stream(v5);
  kaldi::quasar::CreateComputeEngineConfig(a2, (uint64_t *)&__p);
  v7 = __p;
  __p = 0;
  v8 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 272) = v7;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = __p;
    __p = 0;
    if (v9)
      (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
  }
  while ((*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 2) == 0)
  {
    v54 = 0uLL;
    v55 = 0;
    kaldi::ReadToken(v6, v57[0], (uint64_t)&v54);
    if ((SHIBYTE(v55) & 0x80000000) == 0)
    {
      v10 = &v54;
      switch(HIBYTE(v55))
      {
        case 7:
          if ((_DWORD)v54 == 1634027068 && *(_DWORD *)((char *)&v54 + 3) == 1047753825)
            goto LABEL_80;
          goto LABEL_112;
        case 8:
          goto LABEL_110;
        case 9:
          v31 = (_QWORD)v54 == 0x73746E657261503CLL && BYTE8(v54) == 62;
          v15 = a1 + 24;
          if (v31)
            goto LABEL_141;
          switch(HIBYTE(v55))
          {
            case 7u:
              goto LABEL_112;
            case 9u:
              v43 = (_QWORD)v54 == 0x7374757074754F3CLL && BYTE8(v54) == 62;
              v15 = a1 + 96;
              if (v43)
                goto LABEL_141;
LABEL_122:
              if (HIBYTE(v55) == 9)
              {
                v34 = (_QWORD)v54 == 0x737365636375533CLL && BYTE8(v54) == 62;
                v15 = a1 + 144;
                if (v34)
                  goto LABEL_141;
              }
              break;
            case 8u:
LABEL_110:
              v15 = a1 + 48;
              if ((_QWORD)v54 == 0x3E737475706E493CLL)
                goto LABEL_141;
              if (HIBYTE(v55) != 7)
                goto LABEL_127;
LABEL_112:
              v32 = (_DWORD)v54 == 1701331772 && *(_DWORD *)((char *)&v54 + 3) == 1047225189;
              v15 = a1 + 72;
              if (v32)
                goto LABEL_141;
              break;
            default:
              goto LABEL_127;
          }
          break;
        case 0xC:
          v33 = (_QWORD)v54 == 0x69746E657474413CLL && DWORD2(v54) == 1047752303;
          v15 = a1 + 120;
          if (v33)
            goto LABEL_141;
          goto LABEL_122;
        case 0xD:
          if ((_QWORD)v54 != 0x74537475706E493CLL || *(_QWORD *)((char *)&v54 + 5) != 0x3E73657461745374)
            break;
          goto LABEL_86;
        case 0xE:
          if ((_QWORD)v54 != 0x5374757074754F3CLL || *(_QWORD *)((char *)&v54 + 6) != 0x3E73657461745374)
            break;
          goto LABEL_92;
        case 0xF:
          if ((_QWORD)v54 != 0x6C616974696E493CLL || *(_QWORD *)((char *)&v54 + 7) != 0x3E7365746174536CLL)
            break;
          goto LABEL_98;
        case 0x14:
          goto LABEL_71;
        default:
          break;
      }
LABEL_127:
      v35 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v54, "<InputDim>");
      v36 = a1 + 252;
      if (v35)
        goto LABEL_132;
      v37 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v54, "<OutputDim>");
      v36 = a1 + 256;
      if (v37
        || (v38 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v54, "<BOSIndex>"),
            v36 = a1 + 260,
            v38)
        || (v39 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v54, "<EOSIndex>"),
            v36 = a1 + 264,
            v39)
        || (v40 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v54, "<SilIndex>"),
            v36 = a1 + 268,
            v40))
      {
LABEL_132:
        kaldi::ReadBasicType<int>(v6, v57[0], v36);
        goto LABEL_142;
      }
      if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v54, "<Engine>"))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown token ", 14);
        if (v55 >= 0)
          v45 = &v54;
        else
          v45 = (__int128 *)v54;
        if (v55 >= 0)
          v46 = HIBYTE(v55);
        else
          v46 = *((_QWORD *)&v54 + 1);
        v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v45, v46);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)", a typo in config file?", 24);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
      v41 = *(_QWORD *)(a1 + 272);
      v42 = v57[0];
      std::string::basic_string[abi:ne180100]<0>(&__p, "</Engine>");
      (*(void (**)(uint64_t, uint64_t *, BOOL, void **))(*(_QWORD *)v41 + 16))(v41, v6, v42 != 0, &__p);
      if ((SHIBYTE(v50) & 0x80000000) == 0)
        goto LABEL_142;
LABEL_102:
      operator delete(__p);
      goto LABEL_142;
    }
    v12 = *((_QWORD *)&v54 + 1);
    if (*((_QWORD *)&v54 + 1) == 7 && *(_DWORD *)v54 == 1634027068 && *(_DWORD *)(v54 + 3) == 1047753825)
    {
LABEL_80:
      kaldi::ReadToken(v6, v57[0], a1);
      goto LABEL_142;
    }
    if (*((_QWORD *)&v54 + 1) == 9)
    {
      v14 = *(_QWORD *)v54 == 0x73746E657261503CLL && *(_BYTE *)(v54 + 8) == 62;
      v15 = a1 + 24;
      if (v14)
      {
LABEL_141:
        kaldi::ReadToken(v6, v57[0], v15);
        goto LABEL_142;
      }
      v12 = *((_QWORD *)&v54 + 1);
    }
    if (v12 == 8)
    {
      v15 = a1 + 48;
      if (*(_QWORD *)v54 == 0x3E737475706E493CLL)
        goto LABEL_141;
      v12 = *((_QWORD *)&v54 + 1);
    }
    if (v12 == 7)
    {
      v16 = *(_DWORD *)v54 == 1701331772 && *(_DWORD *)(v54 + 3) == 1047225189;
      v15 = a1 + 72;
      if (v16)
        goto LABEL_141;
      v12 = *((_QWORD *)&v54 + 1);
    }
    if (v12 == 9)
    {
      v17 = *(_QWORD *)v54 == 0x7374757074754F3CLL && *(_BYTE *)(v54 + 8) == 62;
      v15 = a1 + 96;
      if (v17)
        goto LABEL_141;
      v12 = *((_QWORD *)&v54 + 1);
    }
    if (v12 == 12)
    {
      v18 = *(_QWORD *)v54 == 0x69746E657474413CLL && *(_DWORD *)(v54 + 8) == 1047752303;
      v15 = a1 + 120;
      if (v18)
        goto LABEL_141;
      v12 = *((_QWORD *)&v54 + 1);
    }
    if (v12 == 9)
    {
      v19 = *(_QWORD *)v54 == 0x737365636375533CLL && *(_BYTE *)(v54 + 8) == 62;
      v15 = a1 + 144;
      if (v19)
        goto LABEL_141;
      v12 = *((_QWORD *)&v54 + 1);
    }
    if (v12 == 13)
    {
      if (*(_QWORD *)v54 == 0x74537475706E493CLL && *(_QWORD *)(v54 + 5) == 0x3E73657461745374)
      {
LABEL_86:
        __p = 0;
        v49 = 0;
        v50 = 0;
        kaldi::ReadToken(v6, v57[0], (uint64_t)&__p);
        std::string::basic_string[abi:ne180100]<0>(&v51, ",");
        kaldi::SplitStringOnString((uint64_t)&__p, (char *)&v51, (uint64_t *)(a1 + 168));
        goto LABEL_99;
      }
      v12 = *((_QWORD *)&v54 + 1);
    }
    if (v12 == 14)
    {
      if (*(_QWORD *)v54 == 0x5374757074754F3CLL && *(_QWORD *)(v54 + 6) == 0x3E73657461745374)
      {
LABEL_92:
        __p = 0;
        v49 = 0;
        v50 = 0;
        kaldi::ReadToken(v6, v57[0], (uint64_t)&__p);
        std::string::basic_string[abi:ne180100]<0>(&v51, ",");
        kaldi::SplitStringOnString((uint64_t)&__p, (char *)&v51, (uint64_t *)(a1 + 192));
        goto LABEL_99;
      }
      v12 = *((_QWORD *)&v54 + 1);
    }
    if (v12 != 15)
      goto LABEL_69;
    if (*(_QWORD *)v54 != 0x6C616974696E493CLL || *(_QWORD *)(v54 + 7) != 0x3E7365746174536CLL)
    {
      v12 = *((_QWORD *)&v54 + 1);
LABEL_69:
      if (v12 != 20)
        goto LABEL_127;
      v10 = (__int128 *)v54;
LABEL_71:
      v23 = *(_QWORD *)v10;
      v24 = *((_QWORD *)v10 + 1);
      v25 = *((_DWORD *)v10 + 4);
      v26 = v23 == 0x68537475706E493CLL && v24 == 0x6C706D6554657061;
      if (!v26 || v25 != 1046836321)
        goto LABEL_127;
      __p = 0;
      v49 = 0;
      v50 = 0;
      kaldi::ReadToken(v6, v57[0], (uint64_t)&__p);
      kaldi::quasar::InputShapeTemplate::InputShapeTemplate(&v51, &__p);
      *(_QWORD *)(a1 + 240) = v51;
      *(_DWORD *)(a1 + 248) = v52;
      goto LABEL_101;
    }
LABEL_98:
    __p = 0;
    v49 = 0;
    v50 = 0;
    kaldi::ReadToken(v6, v57[0], (uint64_t)&__p);
    std::string::basic_string[abi:ne180100]<0>(&v51, ",");
    kaldi::SplitStringOnString((uint64_t)&__p, (char *)&v51, (uint64_t *)(a1 + 216));
LABEL_99:
    if (v53 < 0)
      operator delete(v51);
LABEL_101:
    if (SHIBYTE(v50) < 0)
      goto LABEL_102;
LABEL_142:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(v6);
    if (SHIBYTE(v55) < 0)
      operator delete((void *)v54);
  }
  kaldi::Input::~Input((kaldi::Input *)v56);
}

void sub_1ADA2C4E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (*(char *)(v25 - 105) < 0)
    operator delete(*(void **)(v25 - 128));
  kaldi::Input::~Input((kaldi::Input *)(v25 - 104));
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::CEDecoderNet::CEDecoderNet(uint64_t a1, uint64_t a2)
{
  kaldi::quasar::CEDecoderNetConfig *v4;
  uint64_t *v5;
  size_t v6;
  void *p_p;
  const void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  void *__p;
  void *v19;
  uint64_t v20;

  v4 = kaldi::quasar::CEDecoderNetConfig::CEDecoderNetConfig((kaldi::quasar::CEDecoderNetConfig *)a1);
  v5 = (uint64_t *)((char *)v4 + 280);
  *((_QWORD *)v4 + 39) = 0;
  *(_OWORD *)((char *)v4 + 280) = 0u;
  *(_OWORD *)((char *)v4 + 296) = 0u;
  if (*(char *)(a2 + 23) >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v6 + 7);
  if (v20 < 0)
    p_p = __p;
  if (v6)
  {
    if (*(char *)(a2 + 23) >= 0)
      v8 = (const void *)a2;
    else
      v8 = *(const void **)a2;
    memmove(p_p, v8, v6);
  }
  strcpy((char *)p_p + v6, ".config");
  kaldi::quasar::CEDecoderNetConfig::Read(a1, a2, (uint64_t)&__p);
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 272) + 24))(&__p);
  v9 = __p;
  __p = 0;
  v10 = *v5;
  *v5 = (uint64_t)v9;
  if (v10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = __p;
    __p = 0;
    if (v11)
      (*(void (**)(void *))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = *v5;
  __p = 0;
  v19 = 0;
  v20 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)v12 + 48))(&v17, v12, &__p);
  v13 = v17;
  v17 = 0;
  v14 = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 288) = v13;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = v17;
    v17 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  kaldi::quasar::CEDecoderNet::Reset((kaldi::quasar::CEDecoderNet *)a1);
  return a1;
}

void sub_1ADA2C71C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v18;
  uint64_t v19;

  __p = v15 + 37;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v18 = v15[36];
  v15[36] = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *v16;
  *v16 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  kaldi::quasar::CEDecoderNetConfig::~CEDecoderNetConfig((kaldi::quasar::CEDecoderNetConfig *)v15);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEDecoderNet::Reset(kaldi::quasar::CEDecoderNet *this)
{
  uint64_t v2;
  std::string *v3;
  __int128 v4;
  std::string *v5;
  void **v6;
  uint64_t v7;
  _DWORD *v8;
  __int128 *v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  void **v13;
  uint64_t v14;
  void *__p;
  void *v16;
  _DWORD *v17;
  uint64_t v18;
  std::string *v19;
  unint64_t v20;
  void **p_p;

  v18 = 0;
  v19 = 0;
  v20 = 0;
  v2 = *((_QWORD *)this + 35);
  kaldi::quasar::InputShapeTemplate::Get((kaldi::quasar::CEDecoderNet *)((char *)this + 240), 1, *((int *)this + 63), &__p);
  (*(void (**)(void ***__return_ptr, uint64_t, void **))(*(_QWORD *)v2 + 56))(&p_p, v2, &__p);
  v3 = v19;
  if ((unint64_t)v19 >= v20)
  {
    v5 = (std::string *)std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__emplace_back_slow_path<std::string&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>(&v18, (__int128 *)this, (uint64_t *)&p_p);
    v6 = p_p;
    v19 = v5;
    p_p = 0;
    if (v6)
      (*((void (**)(void **))*v6 + 1))(v6);
  }
  else
  {
    if (*((char *)this + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
    }
    else
    {
      v4 = *(_OWORD *)this;
      v19->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
      *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
    }
    v3[1].__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    v19 = (std::string *)((char *)v3 + 32);
    p_p = 0;
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  v7 = *((_QWORD *)this + 35);
  v8 = operator new(4uLL);
  __p = v8;
  *v8 = 0;
  v16 = v8 + 1;
  v17 = v8 + 1;
  (*(void (**)(void ***__return_ptr, uint64_t, void **, _QWORD))(*(_QWORD *)v7 + 16))(&p_p, v7, &__p, 0);
  v9 = (__int128 *)((char *)this + 48);
  v10 = v19;
  if ((unint64_t)v19 >= v20)
  {
    v12 = (std::string *)std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__emplace_back_slow_path<std::string&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>(&v18, v9, (uint64_t *)&p_p);
    v13 = p_p;
    v19 = v12;
    p_p = 0;
    if (v13)
      (*((void (**)(void **))*v13 + 1))(v13);
  }
  else
  {
    if (*((char *)this + 71) < 0)
    {
      std::string::__init_copy_ctor_external(v19, *((const std::string::value_type **)this + 6), *((_QWORD *)this + 7));
    }
    else
    {
      v11 = *v9;
      v19->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 8);
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
    }
    v10[1].__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    v19 = (std::string *)((char *)v10 + 32);
    p_p = 0;
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  v14 = *((_QWORD *)this + 35);
  __p = 0;
  v16 = 0;
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t *, char *, void **, char *))(*(_QWORD *)v14 + 120))(v14, &v18, (char *)this + 216, &__p, (char *)this + 296);
  p_p = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 36) + 96))(*((_QWORD *)this + 36), 1, 0);
  __p = &v18;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1ADA2C9AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, char *a11, uint64_t a12, char a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v16;

  v16 = *(_QWORD *)(v14 - 24);
  *(_QWORD *)(v14 - 24) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (__p)
  {
    a11 = __p;
    operator delete(__p);
  }
  __p = &a13;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEDecoderNet::~CEDecoderNet(kaldi::quasar::CEDecoderNet *this)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;

  v4 = (void **)((char *)this + 296);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  kaldi::quasar::CEDecoderNetConfig::~CEDecoderNetConfig(this);
}

uint64_t kaldi::quasar::CEDecoderNet::Decode(__int128 *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v12;
  uint64_t v15;
  std::string *v16;
  unint64_t v17;
  uint64_t v18;
  std::string::size_type v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  std::string *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  std::string *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  std::string *v31;
  __int128 *v32;
  std::string::size_type v33;
  __int128 v34;
  uint64_t p_size;
  __int128 *v36;
  _OWORD *size;
  __int128 v38;
  std::string *v39;
  __int128 *v40;
  __int128 v41;
  std::string *v42;
  __int128 *v43;
  __int128 v44;
  std::string::size_type v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *__p;
  void *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  std::string v67;
  uint64_t v68;
  std::string::value_type *v69;
  unint64_t v70;
  void **p_p;

  v6 = a6;
  v7 = a5;
  v8 = a4;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v12 = *((_QWORD *)a1 + 21);
  if (*((_QWORD *)a1 + 22) == v12)
  {
    v21 = *a2;
  }
  else
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = v12 + v15;
      v19 = *(_QWORD *)(*((_QWORD *)a1 + 37) + 8 * v17);
      if ((unint64_t)v16 >= v70)
      {
        v16 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v68, (__int128 *)v18, *(_QWORD *)(*((_QWORD *)a1 + 37) + 8 * v17));
      }
      else
      {
        if (*(char *)(v18 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)(v12 + v15), *(_QWORD *)(v12 + v15 + 8));
        }
        else
        {
          v20 = *(_OWORD *)v18;
          v16->__r_.__value_.__r.__words[2] = *(_QWORD *)(v18 + 16);
          *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v20;
        }
        v16[1].__r_.__value_.__r.__words[0] = v19;
        v16 = (std::string *)((char *)v16 + 32);
      }
      v69 = (std::string::value_type *)v16;
      ++v17;
      v12 = *((_QWORD *)a1 + 21);
      v15 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)a1 + 22) - v12) >> 3) > v17);
    v21 = *a2;
    if ((unint64_t)v16 < v70)
    {
      v7 = a5;
      if (*((char *)a1 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)a1, *((_QWORD *)a1 + 1));
      }
      else
      {
        v22 = *a1;
        v16->__r_.__value_.__r.__words[2] = *((_QWORD *)a1 + 2);
        *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v22;
      }
      v6 = a6;
      v16[1].__r_.__value_.__r.__words[0] = v21;
      v23 = (std::string *)((char *)v16 + 32);
      v69 = (std::string::value_type *)v23;
      v8 = a4;
      goto LABEL_18;
    }
    v7 = a5;
    v6 = a6;
    v8 = a4;
  }
  v23 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v68, a1, v21);
LABEL_18:
  v69 = (std::string::value_type *)v23;
  v24 = (__int128 *)((char *)a1 + 24);
  v25 = *a3;
  if ((unint64_t)v23 >= v70)
  {
    v27 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v68, v24, v25);
  }
  else
  {
    if (*((char *)a1 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(v23, *((const std::string::value_type **)a1 + 3), *((_QWORD *)a1 + 4));
    }
    else
    {
      v26 = *v24;
      v23->__r_.__value_.__r.__words[2] = *((_QWORD *)a1 + 5);
      *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v26;
    }
    v23[1].__r_.__value_.__r.__words[0] = v25;
    v27 = (std::string *)((char *)v23 + 32);
    v69 = &v23[1].__r_.__value_.__s.__data_[8];
  }
  v69 = (std::string::value_type *)v27;
  v28 = a1 + 3;
  v29 = *v8;
  if ((unint64_t)v27 >= v70)
  {
    v31 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v68, v28, *v8);
  }
  else
  {
    if (*((char *)a1 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(v27, *((const std::string::value_type **)a1 + 6), *((_QWORD *)a1 + 7));
    }
    else
    {
      v30 = *v28;
      v27->__r_.__value_.__r.__words[2] = *((_QWORD *)a1 + 8);
      *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v30;
    }
    v27[1].__r_.__value_.__r.__words[0] = v29;
    v31 = (std::string *)((char *)v27 + 32);
    v69 = &v27[1].__r_.__value_.__s.__data_[8];
  }
  v69 = (std::string::value_type *)v31;
  if (*((char *)a1 + 95) < 0)
  {
    if (!*((_QWORD *)a1 + 10))
      goto LABEL_41;
  }
  else if (!*((_BYTE *)a1 + 95))
  {
    goto LABEL_41;
  }
  v32 = (__int128 *)((char *)a1 + 72);
  v33 = *((_QWORD *)a1 + 36);
  if ((unint64_t)v31 >= v70)
  {
    p_size = std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v68, v32, *((_QWORD *)a1 + 36));
  }
  else
  {
    if ((*((_BYTE *)a1 + 95) & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(v31, *((const std::string::value_type **)a1 + 9), *((_QWORD *)a1 + 10));
    }
    else
    {
      v34 = *v32;
      v31->__r_.__value_.__r.__words[2] = *((_QWORD *)a1 + 11);
      *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v34;
    }
    v31[1].__r_.__value_.__r.__words[0] = v33;
    p_size = (uint64_t)&v31[1].__r_.__value_.__l.__size_;
    v69 = &v31[1].__r_.__value_.__s.__data_[8];
  }
  v69 = (std::string::value_type *)p_size;
LABEL_41:
  memset(&v67, 0, sizeof(v67));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v67, *((__int128 **)a1 + 24), *((__int128 **)a1 + 25), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a1 + 25) - *((_QWORD *)a1 + 24)) >> 3));
  v36 = a1 + 6;
  size = (_OWORD *)v67.__r_.__value_.__l.__size_;
  if (v67.__r_.__value_.__l.__size_ >= v67.__r_.__value_.__r.__words[2])
  {
    v39 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v67, v36);
  }
  else
  {
    if (*((char *)a1 + 119) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v67.__r_.__value_.__l.__size_, *((const std::string::value_type **)a1 + 12), *((_QWORD *)a1 + 13));
    }
    else
    {
      v38 = *v36;
      *(_QWORD *)(v67.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)a1 + 14);
      *size = v38;
    }
    v39 = (std::string *)((char *)size + 24);
  }
  v67.__r_.__value_.__l.__size_ = (std::string::size_type)v39;
  v40 = (__int128 *)((char *)a1 + 120);
  if ((unint64_t)v39 >= v67.__r_.__value_.__r.__words[2])
  {
    v42 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v67, v40);
  }
  else
  {
    if (*((char *)a1 + 143) < 0)
    {
      std::string::__init_copy_ctor_external(v39, *((const std::string::value_type **)a1 + 15), *((_QWORD *)a1 + 16));
    }
    else
    {
      v41 = *v40;
      v39->__r_.__value_.__r.__words[2] = *((_QWORD *)a1 + 17);
      *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v41;
    }
    v42 = v39 + 1;
  }
  v67.__r_.__value_.__l.__size_ = (std::string::size_type)v42;
  if (*((char *)a1 + 167) < 0)
  {
    if (!*((_QWORD *)a1 + 19))
      goto LABEL_64;
  }
  else if (!*((_BYTE *)a1 + 167))
  {
    goto LABEL_64;
  }
  v43 = a1 + 9;
  if ((unint64_t)v42 >= v67.__r_.__value_.__r.__words[2])
  {
    v45 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v67, v43);
  }
  else
  {
    if ((*((_BYTE *)a1 + 167) & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(v42, *((const std::string::value_type **)a1 + 18), *((_QWORD *)a1 + 19));
    }
    else
    {
      v44 = *v43;
      v42->__r_.__value_.__r.__words[2] = *((_QWORD *)a1 + 20);
      *(_OWORD *)&v42->__r_.__value_.__l.__data_ = v44;
    }
    v45 = (std::string::size_type)&v42[1];
  }
  v67.__r_.__value_.__l.__size_ = v45;
LABEL_64:
  v65 = 0uLL;
  v66 = 0;
  v46 = *((_QWORD *)a1 + 35);
  __p = 0;
  v63 = 0;
  v64 = 0;
  (*(void (**)(uint64_t, uint64_t *, std::string *, void **, __int128 *))(*(_QWORD *)v46 + 128))(v46, &v68, &v67, &__p, &v65);
  p_p = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
  if (*((char *)a1 + 167) < 0)
  {
    if (!*((_QWORD *)a1 + 19))
      goto LABEL_71;
  }
  else if (!*((_BYTE *)a1 + 167))
  {
    goto LABEL_71;
  }
  __p = 0;
  v63 = 0;
  v64 = 0;
  (*(void (**)(_QWORD, void **))(**(_QWORD **)(*((_QWORD *)&v65 + 1) - 8) + 48))(*(_QWORD *)(*((_QWORD *)&v65 + 1) - 8), &__p);
  v48 = *((_QWORD *)&v65 + 1) - 8;
  v47 = *(_QWORD *)(*((_QWORD *)&v65 + 1) - 8);
  *(_QWORD *)(*((_QWORD *)&v65 + 1) - 8) = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  *((_QWORD *)&v65 + 1) = v48;
  v49 = *(_DWORD *)__p;
  v63 = __p;
  operator delete(__p);
  if (!v49)
  {
    v59 = 0;
    goto LABEL_81;
  }
LABEL_71:
  v50 = *(_QWORD *)(*((_QWORD *)&v65 + 1) - 8);
  *(_QWORD *)(*((_QWORD *)&v65 + 1) - 8) = 0;
  v51 = *v6;
  *v6 = v50;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  v52 = *((_QWORD *)&v65 + 1);
  v54 = *((_QWORD *)&v65 + 1) - 8;
  v53 = *(_QWORD *)(*((_QWORD *)&v65 + 1) - 8);
  *(_QWORD *)(*((_QWORD *)&v65 + 1) - 8) = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  *((_QWORD *)&v65 + 1) = v54;
  v55 = *(_QWORD *)(v52 - 16);
  *(_QWORD *)(v52 - 16) = 0;
  v56 = *v7;
  *v7 = v55;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  v58 = *((_QWORD *)&v65 + 1) - 8;
  v57 = *(_QWORD *)(*((_QWORD *)&v65 + 1) - 8);
  *(_QWORD *)(*((_QWORD *)&v65 + 1) - 8) = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  *((_QWORD *)&v65 + 1) = v58;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate((_QWORD *)a1 + 37);
  *(__int128 *)((char *)a1 + 296) = v65;
  *((_QWORD *)a1 + 39) = v66;
  v66 = 0;
  v65 = 0uLL;
  v59 = 1;
LABEL_81:
  __p = &v65;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  *(_QWORD *)&v65 = &v67;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
  v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&v68;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
  return v59;
}

void sub_1ADA2D038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char **a13, uint64_t a14, uint64_t a15, char *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20)
{
  a13 = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  a16 = &a19;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::quasar::CESplitEncoderDecoderNet::CESplitEncoderDecoderNet(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = &off_1E5D33CA0;
  kaldi::quasar::CEEncoderNet::CEEncoderNet((kaldi::quasar::CEEncoderNetConfig *)(a1 + 1), a2);
  kaldi::quasar::CEDecoderNet::CEDecoderNet((uint64_t)(a1 + 24), a3);
  a1[64] = 0;
  return a1;
}

void sub_1ADA2D144(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  kaldi::quasar::CEEncoderNet *v2;

  kaldi::quasar::CEEncoderNet::~CEEncoderNet(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CESplitEncoderDecoderNet::~CESplitEncoderDecoderNet(kaldi::quasar::CESplitEncoderDecoderNet *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E5D33CA0;
  v2 = *((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  kaldi::quasar::CEDecoderNet::~CEDecoderNet((kaldi::quasar::CESplitEncoderDecoderNet *)((char *)this + 192));
  kaldi::quasar::CEEncoderNet::~CEEncoderNet((kaldi::quasar::CESplitEncoderDecoderNet *)((char *)this + 8));
  quasar::Bitmap::~Bitmap(this);
}

{
  kaldi::quasar::CESplitEncoderDecoderNet::~CESplitEncoderDecoderNet(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::quasar::CESplitEncoderDecoderNet::Encode(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *__p;
  char *v29;
  char *v30;
  uint64_t v31;

  v31 = 0;
  kaldi::quasar::CEEncoderNet::Encode((__int128 *)(a1 + 8), a2, &v31);
  v3 = *(_QWORD *)(a1 + 512);
  if (v3)
  {
    __p = 0;
    v29 = 0;
    v30 = 0;
    v5 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v30, 1uLL);
    v6 = &v5[8 * v4];
    *(_QWORD *)v5 = v3;
    v7 = v5 + 8;
    v9 = (char *)__p;
    v8 = v29;
    v10 = v5;
    if (v29 != __p)
    {
      do
      {
        v11 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *((_QWORD *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      v8 = (char *)__p;
    }
    __p = v10;
    v29 = v5 + 8;
    v30 = &v5[8 * v4];
    if (v8)
    {
      operator delete(v8);
      v6 = v30;
    }
    v29 = v5 + 8;
    v12 = v31;
    if (v7 >= v6)
    {
      v14 = (v7 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v14 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v15 = v6 - (_BYTE *)__p;
      v16 = v15 >> 2;
      if (v15 >> 2 <= (unint64_t)(v14 + 1))
        v16 = v14 + 1;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      if (v17)
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v30, v17);
      else
        v18 = 0;
      v19 = (uint64_t *)&v18[8 * v14];
      v20 = &v18[8 * v17];
      *v19 = v12;
      v13 = (char *)(v19 + 1);
      v22 = (char *)__p;
      v21 = v29;
      if (v29 != __p)
      {
        do
        {
          v23 = *((_QWORD *)v21 - 1);
          v21 -= 8;
          *--v19 = v23;
        }
        while (v21 != v22);
        v21 = (char *)__p;
      }
      __p = v19;
      v29 = v13;
      v30 = v20;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *((_QWORD *)v5 + 1) = v31;
      v13 = v5 + 16;
    }
    v29 = v13;
    (*(void (**)(uint64_t *__return_ptr, _QWORD, void **, _QWORD))(**(_QWORD **)(a1 + 160) + 96))(&v27, *(_QWORD *)(a1 + 160), &__p, 0);
    v24 = v27;
    v27 = 0;
    v25 = *(_QWORD *)(a1 + 512);
    *(_QWORD *)(a1 + 512) = v24;
    if (v25)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
      v26 = v27;
      v27 = 0;
      if (v26)
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    }
    if (__p)
    {
      v29 = (char *)__p;
      operator delete(__p);
    }
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  else
  {
    *(_QWORD *)(a1 + 512) = v31;
  }
}

void sub_1ADA2D3D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::CESplitEncoderDecoderNet::Encode(uint64_t a1, uint64_t a2)
{
  kaldi::quasar::ComputeEngineBufferItf *v4;
  kaldi::quasar::ComputeEngineBufferItf *v5;
  kaldi::quasar::ComputeEngineBufferItf *v6;
  kaldi::quasar::ComputeEngineBufferItf *v7;
  void *__p[3];

  kaldi::quasar::InputShapeTemplate::Get((kaldi::quasar::InputShapeTemplate *)(a1 + 128), *(int *)(a2 + 20), *(int *)(a2 + 16), __p);
  v6 = 0;
  kaldi::quasar::CreateBufferFromMatrix((_QWORD *)(a1 + 160), a2, (uint64_t)__p, &v6, &v7);
  v4 = v6;
  v6 = 0;
  if (v4)
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v4 + 8))(v4);
  kaldi::quasar::CESplitEncoderDecoderNet::Encode(a1, (uint64_t *)&v7);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v5 + 8))(v5);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1ADA2D4B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::CESplitEncoderDecoderNet::Encode(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  void *__p[3];
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 160);
  kaldi::quasar::InputShapeTemplate::Get((kaldi::quasar::InputShapeTemplate *)(a1 + 128), 1, *(int *)(a2 + 16), __p);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)v4 + 56))(&v7, v4, __p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v7 + 88))(v7, *(_QWORD *)(a2 + 8), *(unsigned int *)(a2 + 16), 0);
  kaldi::quasar::CESplitEncoderDecoderNet::Encode(a1, &v7);
  result = v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1ADA2D5B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::CESplitEncoderDecoderNet::FinishEncoding(kaldi::quasar::CESplitEncoderDecoderNet *this)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 60) + 96))(*((_QWORD *)this + 60), 0, 0);
}

uint64_t kaldi::quasar::CESplitEncoderDecoderNet::Decode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 472) + 16))(&v17);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 472) + 16))(&v16, *(_QWORD *)(a1 + 472), a3, 0);
  v14 = 0;
  v15 = 0;
  if (*(_QWORD *)(a1 + 512))
  {
    v9 = kaldi::quasar::CEDecoderNet::Decode((__int128 *)(a1 + 192), (uint64_t *)(a1 + 512), &v17, &v16, &v15, &v14);
    if ((v9 & 1) != 0)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 56))(v15, a4);
      v10 = v14;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 56))(v14, a5);
LABEL_5:
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      goto LABEL_7;
    }
    v10 = v14;
    if (v14)
      goto LABEL_5;
  }
  v9 = 0;
LABEL_7:
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v11 = v16;
  v16 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = v17;
  v17 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  return v9;
}

void sub_1ADA2D738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::CESplitEncoderDecoderNet::Decode(uint64_t a1, uint64_t a2, uint64_t *a3, int32x2_t *a4, int32x2_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 472) + 16))(&v21);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t *, _QWORD))(**(_QWORD **)(a1 + 472) + 16))(&v20, *(_QWORD *)(a1 + 472), a3, 0);
  v18 = 0;
  v19 = 0;
  if (!*(_QWORD *)(a1 + 512))
  {
    v9 = 0;
    goto LABEL_8;
  }
  v9 = kaldi::quasar::CEDecoderNet::Decode((__int128 *)(a1 + 192), (uint64_t *)(a1 + 512), &v21, &v20, &v19, &v18);
  if ((v9 & 1) == 0)
  {
    v14 = v18;
    if (!v18)
      goto LABEL_8;
    goto LABEL_7;
  }
  v10 = v19;
  v12 = *a3;
  v11 = a3[1];
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  kaldi::quasar::CopyBufferToMatrix(v10, (unint64_t)(v11 - v12) >> 2, v13, a4);
  v14 = v18;
  kaldi::quasar::CopyBufferToMatrix(v18, (unint64_t)(a3[1] - *a3) >> 2, 0xFFFFFFFFLL, a5);
  if (v14)
LABEL_7:
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
LABEL_8:
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v15 = v20;
  v20 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = v21;
  v21 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  return v9;
}

void sub_1ADA2D910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::CESplitEncoderDecoderNet::Decode(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *__p;
  void *v12;
  _DWORD *v13;
  uint64_t v14;

  (*(void (**)(uint64_t))(*(_QWORD *)*a2 + 152))(*a2);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)*a2 + 160))(*a2, 0);
  v6 = *(_QWORD *)(a1 + 472);
  v7 = operator new(4uLL);
  __p = v7;
  *v7 = 0;
  v12 = v7 + 1;
  v13 = v7 + 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **, _QWORD))(*(_QWORD *)v6 + 16))(&v14, v6, &__p, 0);
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
  __p = 0;
  if (*(_QWORD *)(a1 + 512))
  {
    v8 = kaldi::quasar::CEDecoderNet::Decode((__int128 *)(a1 + 192), (uint64_t *)(a1 + 512), &v14, a2, a3, (uint64_t *)&__p);
    if (__p)
      (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
  }
  else
  {
    v8 = 0;
  }
  v9 = v14;
  v14 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return v8;
}

void sub_1ADA2DA7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__p)
    (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::CESplitEncoderDecoderNet::Decode(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *__p;
  void *v13;
  _DWORD *v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a1 + 472);
  v7 = operator new(4uLL);
  __p = v7;
  *v7 = a2;
  v13 = v7 + 1;
  v14 = v7 + 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **, _QWORD))(*(_QWORD *)v6 + 16))(&v15, v6, &__p, 0);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  __p = 0;
  v8 = kaldi::quasar::CESplitEncoderDecoderNet::Decode(a1, &v15, (uint64_t *)&__p);
  v9 = __p;
  if ((v8 & 1) != 0)
  {
    (*(void (**)(void *, uint64_t))(*(_QWORD *)__p + 56))(__p, a3);
  }
  else if (!__p)
  {
    goto LABEL_7;
  }
  (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
LABEL_7:
  v10 = v15;
  v15 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return v8;
}

{
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *__p;
  void *v13;
  _DWORD *v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a1 + 472);
  v7 = operator new(4uLL);
  __p = v7;
  *v7 = a2;
  v13 = v7 + 1;
  v14 = v7 + 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **, _QWORD))(*(_QWORD *)v6 + 16))(&v15, v6, &__p, 0);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  __p = 0;
  v8 = kaldi::quasar::CESplitEncoderDecoderNet::Decode(a1, &v15, (uint64_t *)&__p);
  v9 = __p;
  if ((v8 & 1) != 0)
  {
    (*(void (**)(void *, uint64_t))(*(_QWORD *)__p + 40))(__p, a3);
  }
  else if (!__p)
  {
    goto LABEL_7;
  }
  (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
LABEL_7:
  v10 = v15;
  v15 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return v8;
}

void sub_1ADA2DBAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1ADA2DCDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::CESplitEncoderDecoderNet::Reset(kaldi::quasar::CESplitEncoderDecoderNet *this)
{
  uint64_t result;

  kaldi::quasar::CEEncoderNet::Reset((kaldi::quasar::CESplitEncoderDecoderNet *)((char *)this + 8));
  kaldi::quasar::CEDecoderNet::Reset((kaldi::quasar::CESplitEncoderDecoderNet *)((char *)this + 192));
  result = *((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t kaldi::quasar::CESplitEncoderDecoderNet::InputDim(kaldi::quasar::CESplitEncoderDecoderNet *this)
{
  return *((unsigned int *)this + 35);
}

uint64_t kaldi::quasar::CESplitEncoderDecoderNet::OutputDim(kaldi::quasar::CESplitEncoderDecoderNet *this)
{
  return *((unsigned int *)this + 112);
}

uint64_t kaldi::quasar::CESplitEncoderDecoderNet::FrameSubsamplingFactor(kaldi::quasar::CESplitEncoderDecoderNet *this)
{
  return *((unsigned int *)this + 37);
}

uint64_t kaldi::quasar::CESplitEncoderDecoderNet::BOSIndex(kaldi::quasar::CESplitEncoderDecoderNet *this)
{
  return *((unsigned int *)this + 113);
}

uint64_t kaldi::quasar::CESplitEncoderDecoderNet::EOSIndex(kaldi::quasar::CESplitEncoderDecoderNet *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t kaldi::quasar::CESplitEncoderDecoderNet::SilIndex(kaldi::quasar::CESplitEncoderDecoderNet *this)
{
  return *((unsigned int *)this + 115);
}

void kaldi::quasar::CEStatelessEncoderNetConfig::Read(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::Input *v5;
  uint64_t *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  __int128 *v10;
  uint64_t v12;
  BOOL v14;
  uint64_t v15;
  BOOL v16;
  BOOL v22;
  uint64_t v23;
  BOOL v25;
  BOOL v28;
  BOOL v29;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  BOOL v37;
  uint64_t v38;
  int v39;
  _QWORD *v40;
  __int128 *v41;
  uint64_t v42;
  _QWORD *v43;
  void *__p;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  int v48;
  char v49;
  __int128 v50;
  uint64_t v51;
  _BYTE v52[15];
  char v53[9];

  v53[0] = 0;
  v5 = (kaldi::Input *)kaldi::Input::Input(v52, a3, v53);
  v6 = (uint64_t *)kaldi::Input::Stream(v5);
  kaldi::quasar::CreateComputeEngineConfig(a2, (uint64_t *)&__p);
  v7 = __p;
  __p = 0;
  v8 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v7;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = __p;
    __p = 0;
    if (v9)
      (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
  }
  if ((*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 2) == 0)
  {
    while (1)
    {
      v50 = 0uLL;
      v51 = 0;
      kaldi::ReadToken(v6, v53[0], (uint64_t)&v50);
      if ((SHIBYTE(v51) & 0x80000000) == 0)
      {
        v10 = &v50;
        switch(HIBYTE(v51))
        {
          case 8:
            goto LABEL_144;
          case 0xA:
            goto LABEL_119;
          case 0xB:
            goto LABEL_113;
          case 0xC:
            if ((_QWORD)v50 != 0x65467475706E493CLL || DWORD2(v50) != 1047753825)
              goto LABEL_158;
            goto LABEL_62;
          case 0xD:
LABEL_88:
            v29 = (_QWORD)v50 == 0x4674757074754F3CLL && *(_QWORD *)((char *)&v50 + 5) == 0x3E73746165467475;
            v15 = a1 + 48;
            if (!v29)
            {
              v10 = &v50;
              switch(HIBYTE(v51))
              {
                case 8:
                  goto LABEL_144;
                case 0xA:
                  goto LABEL_119;
                case 0xB:
                  goto LABEL_113;
                case 0xD:
                  if ((_QWORD)v50 != 0x74537475706E493CLL || *(_QWORD *)((char *)&v50 + 5) != 0x3E73657461745374)
                    goto LABEL_158;
                  goto LABEL_98;
                default:
                  goto LABEL_158;
              }
            }
            goto LABEL_99;
          case 0xE:
LABEL_100:
            if ((_QWORD)v50 != 0x5374757074754F3CLL || *(_QWORD *)((char *)&v50 + 6) != 0x3E73657461745374)
              goto LABEL_110;
            goto LABEL_105;
          case 0xF:
LABEL_106:
            if ((_QWORD)v50 != 0x6C616974696E493CLL || *(_QWORD *)((char *)&v50 + 7) != 0x3E7365746174536CLL)
              goto LABEL_110;
            goto LABEL_153;
          case 0x10:
            v28 = (_QWORD)v50 == 0x456873696E69463CLL && *((_QWORD *)&v50 + 1) == 0x3E676E69646F636ELL;
            v15 = a1 + 24;
            if (!v28)
            {
              v10 = &v50;
              switch(HIBYTE(v51))
              {
                case 8:
                  goto LABEL_144;
                case 0xA:
                  goto LABEL_119;
                case 0xB:
                  goto LABEL_113;
                case 0xD:
                  goto LABEL_88;
                case 0xE:
                  goto LABEL_100;
                case 0xF:
                  goto LABEL_106;
                default:
                  goto LABEL_158;
              }
            }
            goto LABEL_99;
          case 0x14:
            if ((_QWORD)v50 == 0x68537475706E493CLL
              && *((_QWORD *)&v50 + 1) == 0x6C706D6554657061
              && v51 == 1046836321)
            {
              goto LABEL_156;
            }
            if (HIBYTE(v51) == 8)
              goto LABEL_125;
            if (HIBYTE(v51) == 11)
              goto LABEL_113;
            if (HIBYTE(v51) != 10)
              goto LABEL_158;
            goto LABEL_119;
          case 0x18:
            v25 = (_QWORD)v50 == 0x7553656D6172463CLL
               && *((_QWORD *)&v50 + 1) == 0x6E696C706D617362
               && v51 == 0x3E726F7463614667;
            v23 = a1 + 164;
            if (!v25)
              goto LABEL_124;
            goto LABEL_148;
          default:
            goto LABEL_158;
        }
      }
      v12 = *((_QWORD *)&v50 + 1);
      if (*((_QWORD *)&v50 + 1) != 12)
        break;
      if (*(_QWORD *)v50 != 0x65467475706E493CLL || *(_DWORD *)(v50 + 8) != 1047753825)
        break;
LABEL_62:
      kaldi::ReadToken(v6, v53[0], a1);
LABEL_149:
      std::ws[abi:ne180100]<char,std::char_traits<char>>(v6);
      if (SHIBYTE(v51) < 0)
        operator delete((void *)v50);
      if ((*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 2) != 0)
        goto LABEL_157;
    }
    if (*((_QWORD *)&v50 + 1) == 16)
    {
      v14 = *(_QWORD *)v50 == 0x456873696E69463CLL && *(_QWORD *)(v50 + 8) == 0x3E676E69646F636ELL;
      v15 = a1 + 24;
      if (v14)
      {
LABEL_99:
        kaldi::ReadToken(v6, v53[0], v15);
        goto LABEL_149;
      }
      v12 = *((_QWORD *)&v50 + 1);
    }
    if (v12 != 13)
      goto LABEL_34;
    v16 = *(_QWORD *)v50 == 0x4674757074754F3CLL && *(_QWORD *)(v50 + 5) == 0x3E73746165467475;
    v15 = a1 + 48;
    if (!v16)
    {
      v12 = *((_QWORD *)&v50 + 1);
      if (*((_QWORD *)&v50 + 1) != 13)
        goto LABEL_34;
      if (*(_QWORD *)v50 == 0x74537475706E493CLL && *(_QWORD *)(v50 + 5) == 0x3E73657461745374)
      {
LABEL_98:
        __p = 0;
        v45 = 0;
        v46 = 0;
        kaldi::ReadToken(v6, v53[0], (uint64_t)&__p);
        std::string::basic_string[abi:ne180100]<0>(&v47, ",");
        kaldi::SplitStringOnString((uint64_t)&__p, (char *)&v47, (uint64_t *)(a1 + 72));
        goto LABEL_154;
      }
      if ((v51 & 0x8000000000000000) == 0)
      {
LABEL_110:
        if (HIBYTE(v51) == 8)
          goto LABEL_125;
        if (HIBYTE(v51) == 10)
        {
LABEL_119:
          v34 = (_QWORD)v50 == 0x69447475706E493CLL && WORD4(v50) == 15981;
          v23 = a1 + 156;
          if (v34)
            goto LABEL_148;
          if ((v51 & 0x8000000000000000) == 0)
          {
LABEL_124:
            if (HIBYTE(v51) != 8)
              goto LABEL_158;
LABEL_125:
            v10 = &v50;
            goto LABEL_144;
          }
LABEL_126:
          v12 = *((_QWORD *)&v50 + 1);
          goto LABEL_127;
        }
        if (HIBYTE(v51) != 11)
          goto LABEL_158;
LABEL_113:
        v33 = (_QWORD)v50 == 0x4474757074754F3CLL && *(_QWORD *)((char *)&v50 + 3) == 0x3E6D694474757074;
        v23 = a1 + 160;
        if (v33)
          goto LABEL_148;
        if ((v51 & 0x8000000000000000) == 0)
          goto LABEL_124;
LABEL_132:
        v12 = *((_QWORD *)&v50 + 1);
      }
      else
      {
LABEL_34:
        if (v12 == 14)
        {
          if (*(_QWORD *)v50 == 0x5374757074754F3CLL && *(_QWORD *)(v50 + 6) == 0x3E73657461745374)
          {
LABEL_105:
            __p = 0;
            v45 = 0;
            v46 = 0;
            kaldi::ReadToken(v6, v53[0], (uint64_t)&__p);
            std::string::basic_string[abi:ne180100]<0>(&v47, ",");
            kaldi::SplitStringOnString((uint64_t)&__p, (char *)&v47, (uint64_t *)(a1 + 96));
            goto LABEL_154;
          }
          v12 = *((_QWORD *)&v50 + 1);
        }
        if (v12 == 15)
        {
          if (*(_QWORD *)v50 == 0x6C616974696E493CLL && *(_QWORD *)(v50 + 7) == 0x3E7365746174536CLL)
          {
LABEL_153:
            __p = 0;
            v45 = 0;
            v46 = 0;
            kaldi::ReadToken(v6, v53[0], (uint64_t)&__p);
            std::string::basic_string[abi:ne180100]<0>(&v47, ",");
            kaldi::SplitStringOnString((uint64_t)&__p, (char *)&v47, (uint64_t *)(a1 + 120));
LABEL_154:
            if (v49 < 0)
              operator delete(v47);
            goto LABEL_146;
          }
          v12 = *((_QWORD *)&v50 + 1);
        }
        if (v12 == 20)
        {
          if (*(_QWORD *)v50 == 0x68537475706E493CLL
            && *(_QWORD *)(v50 + 8) == 0x6C706D6554657061
            && *(_DWORD *)(v50 + 16) == 1046836321)
          {
LABEL_156:
            __p = 0;
            v45 = 0;
            v46 = 0;
            kaldi::ReadToken(v6, v53[0], (uint64_t)&__p);
            kaldi::quasar::InputShapeTemplate::InputShapeTemplate(&v47, &__p);
            *(_QWORD *)(a1 + 144) = v47;
            *(_DWORD *)(a1 + 152) = v48;
            goto LABEL_146;
          }
          v12 = *((_QWORD *)&v50 + 1);
        }
        if (v12 == 10)
        {
          v22 = *(_QWORD *)v50 == 0x69447475706E493CLL && *(_WORD *)(v50 + 8) == 15981;
          v23 = a1 + 156;
          if (!v22)
            goto LABEL_126;
LABEL_148:
          kaldi::ReadBasicType<int>(v6, v53[0], v23);
          goto LABEL_149;
        }
LABEL_127:
        if (v12 == 11)
        {
          v35 = *(_QWORD *)v50 == 0x4474757074754F3CLL && *(_QWORD *)(v50 + 3) == 0x3E6D694474757074;
          v23 = a1 + 160;
          if (v35)
            goto LABEL_148;
          goto LABEL_132;
        }
      }
      if (v12 != 24)
        goto LABEL_142;
      v37 = *(_QWORD *)v50 == 0x7553656D6172463CLL
         && *(_QWORD *)(v50 + 8) == 0x6E696C706D617362
         && *(_QWORD *)(v50 + 16) == 0x3E726F7463614667;
      v23 = a1 + 164;
      if (!v37)
      {
        v12 = *((_QWORD *)&v50 + 1);
LABEL_142:
        if (v12 != 8)
          goto LABEL_158;
        v10 = (__int128 *)v50;
LABEL_144:
        if (*(_QWORD *)v10 != 0x3E656E69676E453CLL)
        {
LABEL_158:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown token ", 14);
          if (v51 >= 0)
            v41 = &v50;
          else
            v41 = (__int128 *)v50;
          if (v51 >= 0)
            v42 = HIBYTE(v51);
          else
            v42 = *((_QWORD *)&v50 + 1);
          v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v41, v42);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)", a typo in config file?", 24);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
        }
        v38 = *(_QWORD *)(a1 + 168);
        v39 = v53[0];
        std::string::basic_string[abi:ne180100]<0>(&__p, "</Engine>");
        (*(void (**)(uint64_t, uint64_t *, BOOL, void **))(*(_QWORD *)v38 + 16))(v38, v6, v39 != 0, &__p);
LABEL_146:
        if (SHIBYTE(v46) < 0)
          operator delete(__p);
        goto LABEL_149;
      }
      goto LABEL_148;
    }
    goto LABEL_99;
  }
LABEL_157:
  kaldi::Input::~Input((kaldi::Input *)v52);
}

uint64_t kaldi::quasar::CEStatelessEncoderNet::CEStatelessEncoderNet(uint64_t a1, uint64_t a2)
{
  size_t v4;
  void **v5;
  const void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *__p[2];
  char v12;

  *((_QWORD *)kaldi::quasar::CEStatelessEncoderNetConfig::CEStatelessEncoderNetConfig((kaldi::quasar::CEStatelessEncoderNetConfig *)a1)
  + 22) = 0;
  if (*(char *)(a2 + 23) >= 0)
    v4 = *(unsigned __int8 *)(a2 + 23);
  else
    v4 = *(_QWORD *)(a2 + 8);
  v5 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v4 + 7);
  if (v12 < 0)
    v5 = (void **)__p[0];
  if (v4)
  {
    if (*(char *)(a2 + 23) >= 0)
      v6 = (const void *)a2;
    else
      v6 = *(const void **)a2;
    memmove(v5, v6, v4);
  }
  strcpy((char *)v5 + v4, ".config");
  kaldi::quasar::CEStatelessEncoderNetConfig::Read(a1, a2, (uint64_t)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 168) + 24))(__p);
  v7 = __p[0];
  __p[0] = 0;
  v8 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v7;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = __p[0];
    __p[0] = 0;
    if (v9)
      (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
  }
  return a1;
}

void sub_1ADA2E880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  kaldi::quasar::CEStatelessEncoderNetConfig *v14;
  uint64_t v16;

  v16 = *((_QWORD *)v14 + 22);
  *((_QWORD *)v14 + 22) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  kaldi::quasar::CEStatelessEncoderNetConfig::~CEStatelessEncoderNetConfig(v14);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEStatelessEncoderNetConfig::~CEStatelessEncoderNetConfig(kaldi::quasar::CEStatelessEncoderNetConfig *this)
{
  uint64_t v2;
  void **v3;

  v2 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void **)((char *)this + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void kaldi::quasar::CEStatelessEncoderNet::~CEStatelessEncoderNet(kaldi::quasar::CEStatelessEncoderNet *this)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;

  v2 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (void **)((char *)this + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void kaldi::quasar::CEStatelessEncoderNet::Encode(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  unint64_t v15;
  uint64_t v16;
  std::string::size_type v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  std::string *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t p_size;
  __int128 *v26;
  _OWORD *size;
  __int128 v28;
  std::string::size_type v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void **v35[3];
  __int128 v36;
  uint64_t v37;
  std::string v38;
  uint64_t v39;
  std::string::value_type *v40;
  unint64_t v41;
  void ***v42;

  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 3) != (uint64_t)(a2[1] - *a2) >> 3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v39, "input_states.size() == cfg_.input_states.size()");
    goto LABEL_45;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a3 + 152))(*a3) != *(_DWORD *)(a1 + 152))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v39, "input_feats->GetNumDims() == cfg_.input_shape_template.ndim");
    goto LABEL_45;
  }
  if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)*a3 + 160))(*a3, *(unsigned int *)(a1 + 148)) != *(_DWORD *)(a1 + 156))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v39, "input_feats->GetDimSize(cfg_.input_shape_template.col_index) == InputDim()");
LABEL_45:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v39);
  }
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v12 = *(_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 80) == v12)
  {
    v19 = *a3;
LABEL_17:
    v21 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string const&,kaldi::quasar::ComputeEngineBufferItf&>(&v39, (__int128 *)a1, v19);
    goto LABEL_20;
  }
  v13 = 0;
  v14 = 0;
  v15 = 0;
  do
  {
    v16 = v12 + v13;
    v17 = *(_QWORD *)(*a2 + 8 * v15);
    if ((unint64_t)v14 >= v41)
    {
      v14 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string const&,kaldi::quasar::ComputeEngineBufferItf&>(&v39, (__int128 *)v16, *(_QWORD *)(*a2 + 8 * v15));
    }
    else
    {
      if (*(char *)(v16 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)(v12 + v13), *(_QWORD *)(v12 + v13 + 8));
      }
      else
      {
        v18 = *(_OWORD *)v16;
        v14->__r_.__value_.__r.__words[2] = *(_QWORD *)(v16 + 16);
        *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v18;
      }
      v14[1].__r_.__value_.__r.__words[0] = v17;
      v14 = (std::string *)((char *)v14 + 32);
    }
    v40 = (std::string::value_type *)v14;
    ++v15;
    v12 = *(_QWORD *)(a1 + 72);
    v13 += 24;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 80) - v12) >> 3) > v15);
  v19 = *a3;
  if ((unint64_t)v14 >= v41)
    goto LABEL_17;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    v20 = *(_OWORD *)a1;
    v14->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v20;
  }
  v14[1].__r_.__value_.__r.__words[0] = v19;
  v21 = (std::string *)((char *)v14 + 32);
  v40 = &v14[1].__r_.__value_.__s.__data_[8];
LABEL_20:
  v40 = (std::string::value_type *)v21;
  if (*(char *)(a1 + 47) < 0)
  {
    if (!*(_QWORD *)(a1 + 32))
      goto LABEL_31;
  }
  else if (!*(_BYTE *)(a1 + 47))
  {
    goto LABEL_31;
  }
  v22 = (__int128 *)(a1 + 24);
  v23 = *a4;
  if ((unint64_t)v21 >= v41)
  {
    p_size = std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string const&,kaldi::quasar::ComputeEngineBufferItf&>(&v39, v22, v23);
  }
  else
  {
    if ((*(_BYTE *)(a1 + 47) & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
    }
    else
    {
      v24 = *v22;
      v21->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 40);
      *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v24;
    }
    v21[1].__r_.__value_.__r.__words[0] = v23;
    p_size = (uint64_t)&v21[1].__r_.__value_.__l.__size_;
    v40 = &v21[1].__r_.__value_.__s.__data_[8];
  }
  v40 = (std::string::value_type *)p_size;
LABEL_31:
  memset(&v38, 0, sizeof(v38));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v38, *(__int128 **)(a1 + 96), *(__int128 **)(a1 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3));
  v26 = (__int128 *)(a1 + 48);
  size = (_OWORD *)v38.__r_.__value_.__l.__size_;
  if (v38.__r_.__value_.__l.__size_ >= v38.__r_.__value_.__r.__words[2])
  {
    v29 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v38, v26);
  }
  else
  {
    if (*(char *)(a1 + 71) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v38.__r_.__value_.__l.__size_, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
    }
    else
    {
      v28 = *v26;
      *(_QWORD *)(v38.__r_.__value_.__l.__size_ + 16) = *(_QWORD *)(a1 + 64);
      *size = v28;
    }
    v29 = (std::string::size_type)size + 24;
  }
  v38.__r_.__value_.__l.__size_ = v29;
  v36 = 0uLL;
  v37 = 0;
  v30 = *(_QWORD *)(a1 + 176);
  memset(v35, 0, sizeof(v35));
  (*(void (**)(uint64_t, uint64_t *, std::string *, void ***, __int128 *))(*(_QWORD *)v30 + 128))(v30, &v39, &v38, v35, &v36);
  v42 = v35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  v31 = *(_QWORD *)(*((_QWORD *)&v36 + 1) - 8);
  *(_QWORD *)(*((_QWORD *)&v36 + 1) - 8) = 0;
  v32 = *a6;
  *a6 = v31;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v34 = *((_QWORD *)&v36 + 1) - 8;
  v33 = *(_QWORD *)(*((_QWORD *)&v36 + 1) - 8);
  *(_QWORD *)(*((_QWORD *)&v36 + 1) - 8) = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  *((_QWORD *)&v36 + 1) = v34;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate(a5);
  *(_OWORD *)a5 = v36;
  a5[2] = v37;
  v37 = 0;
  v36 = 0uLL;
  v35[0] = (void **)&v36;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](v35);
  *(_QWORD *)&v36 = &v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
  v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
}

void sub_1ADA2EEB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void kaldi::quasar::CEStatelessEncoderNet::Encode(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t *a6)
{
  kaldi::quasar::ComputeEngineBufferItf *v12;
  uint64_t v13;
  uint64_t v14;
  kaldi::quasar::ComputeEngineBufferItf *v15;
  void *__p;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  kaldi::quasar::ComputeEngineBufferItf *v20;
  kaldi::quasar::ComputeEngineBufferItf *v21;
  void *v22[3];

  kaldi::quasar::InputShapeTemplate::Get((kaldi::quasar::InputShapeTemplate *)(a1 + 144), *(int *)(a3 + 20), *(int *)(a3 + 16), v22);
  v20 = 0;
  kaldi::quasar::CreateBufferFromMatrix((_QWORD *)(a1 + 176), a3, (uint64_t)v22, &v20, &v21);
  v12 = v20;
  v20 = 0;
  if (v12)
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v12 + 8))(v12);
  v13 = *(_QWORD *)(a1 + 176);
  __p = 0;
  v17 = 0;
  v18 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)v13 + 48))(&v19, v13, &__p);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v19 + 96))(v19, a4, 0);
  kaldi::quasar::CEStatelessEncoderNet::Encode(a1, a2, (uint64_t *)&v21, &v19, a5, a6);
  v14 = v19;
  v19 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = v21;
  v21 = 0;
  if (v15)
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v15 + 8))(v15);
  if (v22[0])
  {
    v22[1] = v22[0];
    operator delete(v22[0]);
  }
}

void sub_1ADA2F004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::CEStatelessEncoderNet::InitialStates(kaldi::quasar::CEStatelessEncoderNet *this@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10[3];
  void *__p[3];
  uint64_t v12;
  std::string *v13;
  unint64_t v14;
  void **v15;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = (char *)this + 120;
  if (*((_QWORD *)this + 16) != *((_QWORD *)this + 15))
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    kaldi::quasar::InputShapeTemplate::Get((kaldi::quasar::CEStatelessEncoderNet *)((char *)this + 144), *((int *)this + 41), *((int *)this + 39), __p);
    (*(void (**)(uint64_t *__return_ptr, _QWORD, void **))(**((_QWORD **)this + 22) + 56))(v10, *((_QWORD *)this + 22), __p);
    v5 = v13;
    if ((unint64_t)v13 >= v14)
    {
      v7 = (std::string *)std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__emplace_back_slow_path<std::string const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>(&v12, (__int128 *)this, v10);
      v8 = v10[0];
      v13 = v7;
      v10[0] = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
    else
    {
      if (*((char *)this + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
      }
      else
      {
        v6 = *(_OWORD *)this;
        v13->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
        *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      }
      v5[1].__r_.__value_.__r.__words[0] = v10[0];
      v13 = (std::string *)((char *)v5 + 32);
    }
    v9 = *((_QWORD *)this + 22);
    memset(v10, 0, sizeof(v10));
    (*(void (**)(uint64_t, uint64_t *, char *, uint64_t *, _QWORD *))(*(_QWORD *)v9 + 120))(v9, &v12, v3, v10, a2);
    v15 = (void **)v10;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    __p[0] = &v12;
    std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
}

void sub_1ADA2F1C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *__p, uint64_t *a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (__p)
  {
    a13 = __p;
    operator delete(__p);
  }
  __p = &a15;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::CEStatelessEncoderNet::FrameSubsamplingFactor(kaldi::quasar::CEStatelessEncoderNet *this)
{
  return *((unsigned int *)this + 41);
}

uint64_t kaldi::quasar::CEStatelessEncoderNet::Engine(kaldi::quasar::CEStatelessEncoderNet *this)
{
  return (uint64_t)this + 176;
}

void kaldi::quasar::CEStatelessDecoderNetConfig::Read(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::Input *v5;
  uint64_t *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v11;
  BOOL v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;
  BOOL v18;
  BOOL v25;
  void **v26;
  BOOL v28;
  BOOL v32;
  void *v33;
  void *v34;
  int v35;
  BOOL v36;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  BOOL v40;
  BOOL v41;
  BOOL v42;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  BOOL v48;
  uint64_t v49;
  BOOL v50;
  BOOL v51;
  BOOL v52;
  _BOOL4 v53;
  uint64_t v54;
  int v55;
  _QWORD *v56;
  void **v57;
  uint64_t v58;
  _QWORD *v59;
  void *__p;
  uint64_t v61;
  uint64_t v62;
  void **v63[2];
  char v64;
  void *v65;
  unsigned __int8 *v66;
  uint64_t v67;
  void *v68[3];
  _BYTE v69[15];
  char v70[9];

  v70[0] = 0;
  v5 = (kaldi::Input *)kaldi::Input::Input(v69, a3, v70);
  v6 = (uint64_t *)kaldi::Input::Stream(v5);
  kaldi::quasar::CreateComputeEngineConfig(a2, (uint64_t *)&__p);
  v7 = __p;
  __p = 0;
  v8 = *(_QWORD *)(a1 + 328);
  *(_QWORD *)(a1 + 328) = v7;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = __p;
    __p = 0;
    if (v9)
      (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
  }
  while ((*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 2) == 0)
  {
    memset(v68, 0, sizeof(v68));
    kaldi::ReadToken(v6, v70[0], (uint64_t)v68);
    if (SHIBYTE(v68[2]) < 0)
    {
      v11 = v68[1];
      if (v68[1] == (void *)12 && *(_QWORD *)v68[0] == 0x65467475706E493CLL && *((_DWORD *)v68[0] + 2) == 1047753825)
      {
LABEL_83:
        kaldi::ReadToken(v6, v70[0], a1);
        goto LABEL_180;
      }
      if (v68[1] == (void *)14)
      {
        v13 = *(_QWORD *)v68[0] == 0x61507475706E493CLL && *(_QWORD *)((char *)v68[0] + 6) == 0x3E73746E65726150;
        v14 = a1 + 24;
        if (v13)
        {
LABEL_148:
          kaldi::ReadToken(v6, v70[0], v14);
          goto LABEL_180;
        }
        v11 = v68[1];
      }
      if (v11 == (void *)13)
      {
        v15 = *(_QWORD *)v68[0] == 0x614C7475706E493CLL && *(_QWORD *)((char *)v68[0] + 5) == 0x3E736C6562614C74;
        v14 = a1 + 48;
        if (v15)
          goto LABEL_148;
        v11 = v68[1];
      }
      if (v11 == (void *)16)
      {
        v16 = *(_QWORD *)v68[0] == 0x4C74757074754F3CLL && *((_QWORD *)v68[0] + 1) == 0x3E73656B696C676FLL;
        v14 = a1 + 72;
        if (v16)
          goto LABEL_148;
        v11 = v68[1];
      }
      if (v11 == (void *)18)
      {
        v18 = *(_QWORD *)v68[0] == 0x4174757074754F3CLL
           && *((_QWORD *)v68[0] + 1) == 0x746E656D6E67696CLL
           && *((_WORD *)v68[0] + 8) == 15987;
        v14 = a1 + 96;
        if (v18)
          goto LABEL_148;
        v11 = v68[1];
      }
      if (v11 == (void *)13)
      {
        if (*(_QWORD *)v68[0] == 0x74537475706E493CLL && *(_QWORD *)((char *)v68[0] + 5) == 0x3E73657461745374)
        {
LABEL_154:
          __p = 0;
          v61 = 0;
          v62 = 0;
          kaldi::ReadToken(v6, v70[0], (uint64_t)&__p);
          std::string::basic_string[abi:ne180100]<0>(&v65, ",");
          kaldi::SplitStringOnString((uint64_t)&__p, (char *)&v65, (uint64_t *)(a1 + 120));
          goto LABEL_176;
        }
        v11 = v68[1];
      }
      if (v11 == (void *)14)
      {
        if (*(_QWORD *)v68[0] == 0x5374757074754F3CLL && *(_QWORD *)((char *)v68[0] + 6) == 0x3E73657461745374)
        {
LABEL_175:
          __p = 0;
          v61 = 0;
          v62 = 0;
          kaldi::ReadToken(v6, v70[0], (uint64_t)&__p);
          std::string::basic_string[abi:ne180100]<0>(&v65, ",");
          kaldi::SplitStringOnString((uint64_t)&__p, (char *)&v65, (uint64_t *)(a1 + 144));
LABEL_176:
          if (SHIBYTE(v67) < 0)
            operator delete(v65);
          goto LABEL_178;
        }
        v11 = v68[1];
      }
      if (v11 == (void *)15)
      {
        if (*(_QWORD *)v68[0] == 0x6C616974696E493CLL && *(_QWORD *)((char *)v68[0] + 7) == 0x3E7365746174536CLL)
        {
LABEL_147:
          __p = 0;
          v61 = 0;
          v62 = 0;
          kaldi::ReadToken(v6, v70[0], (uint64_t)&__p);
          std::string::basic_string[abi:ne180100]<0>(&v65, ",");
          kaldi::SplitStringOnString((uint64_t)&__p, (char *)&v65, (uint64_t *)(a1 + 168));
          goto LABEL_176;
        }
        v11 = v68[1];
      }
      if (v11 == (void *)22)
      {
        if (*(_QWORD *)v68[0] == 0x74417475706E493CLL
          && *((_QWORD *)v68[0] + 1) == 0x536E6F69746E6574
          && *(_QWORD *)((char *)v68[0] + 14) == 0x3E7365746174536ELL)
        {
LABEL_155:
          __p = 0;
          v61 = 0;
          v62 = 0;
          kaldi::ReadToken(v6, v70[0], (uint64_t)&__p);
          v65 = 0;
          v66 = 0;
          v67 = 0;
          std::string::basic_string[abi:ne180100]<0>(v63, ",");
          kaldi::SplitStringOnString((uint64_t)&__p, (char *)v63, (uint64_t *)&v65);
          if (v64 < 0)
            operator delete(v63[0]);
          v45 = (unsigned __int8 *)v65;
          v46 = v66;
          while (v45 != v46)
          {
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1 + 192, v45, (uint64_t)v45);
            v45 += 24;
          }
LABEL_160:
          v63[0] = &v65;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v63);
LABEL_161:
          if (SHIBYTE(v62) < 0)
            goto LABEL_179;
          goto LABEL_180;
        }
        v11 = v68[1];
      }
      if (v11 == (void *)20)
      {
        v25 = *(_QWORD *)v68[0] == 0x657475706D6F433CLL
           && *((_QWORD *)v68[0] + 1) == 0x7074754F6C6C6543
           && *((_DWORD *)v68[0] + 4) == 1047753845;
        v14 = a1 + 272;
        if (v25)
          goto LABEL_148;
        v11 = v68[1];
      }
      if (v11 == (void *)18)
      {
        v26 = (void **)v68[0];
LABEL_110:
        v33 = *v26;
        v34 = v26[1];
        v35 = *((unsigned __int16 *)v26 + 8);
        v36 = v33 == (void *)0x65437475706E493CLL && v34 == (void *)0x74757074754F6C6CLL;
        if (v36 && v35 == 15987)
        {
          __p = 0;
          v61 = 0;
          v62 = 0;
          kaldi::ReadToken(v6, v70[0], (uint64_t)&__p);
          v65 = 0;
          v66 = 0;
          v67 = 0;
          std::string::basic_string[abi:ne180100]<0>(v63, ",");
          kaldi::SplitStringOnString((uint64_t)&__p, (char *)v63, (uint64_t *)&v65);
          if (v64 < 0)
            operator delete(v63[0]);
          v38 = (unsigned __int8 *)v65;
          v39 = v66;
          while (v38 != v39)
          {
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1 + 232, v38, (uint64_t)v38);
            v38 += 24;
          }
          goto LABEL_160;
        }
      }
    }
    else
    {
      switch(HIBYTE(v68[2]))
      {
        case 0xC:
          if (v68[0] != (void *)0x65467475706E493CLL || LODWORD(v68[1]) != 1047753825)
            break;
          goto LABEL_83;
        case 0xD:
          goto LABEL_129;
        case 0xE:
          v40 = v68[0] == (void *)0x61507475706E493CLL && *(void **)((char *)v68 + 6) == (void *)0x3E73746E65726150;
          v14 = a1 + 24;
          if (v40)
            goto LABEL_148;
          if (HIBYTE(v68[2]) == 14)
            goto LABEL_163;
          if (HIBYTE(v68[2]) != 13)
            break;
LABEL_129:
          v41 = v68[0] == (void *)0x614C7475706E493CLL && *(void **)((char *)v68 + 5) == (void *)0x3E736C6562614C74;
          v14 = a1 + 48;
          if (v41)
            goto LABEL_148;
          if (HIBYTE(v68[2]) != 13)
            break;
LABEL_149:
          if (v68[0] != (void *)0x74537475706E493CLL || *(void **)((char *)v68 + 5) != (void *)0x3E73657461745374)
            break;
          goto LABEL_154;
        case 0xF:
          goto LABEL_142;
        case 0x10:
          v42 = v68[0] == (void *)0x4C74757074754F3CLL && v68[1] == (void *)0x3E73656B696C676FLL;
          v14 = a1 + 72;
          if (v42)
            goto LABEL_148;
          switch(HIBYTE(v68[2]))
          {
            case 0xDu:
              goto LABEL_149;
            case 0xEu:
LABEL_163:
              if (v68[0] == (void *)0x5374757074754F3CLL && *(void **)((char *)v68 + 6) == (void *)0x3E73657461745374)
                goto LABEL_175;
              break;
            case 0xFu:
LABEL_142:
              if (v68[0] == (void *)0x6C616974696E493CLL && *(void **)((char *)v68 + 7) == (void *)0x3E7365746174536CLL)
                goto LABEL_147;
              break;
            default:
              goto LABEL_167;
          }
          break;
        case 0x12:
          v28 = v68[0] == (void *)0x4174757074754F3CLL
             && v68[1] == (void *)0x746E656D6E67696CLL
             && LOWORD(v68[2]) == 15987;
          v14 = a1 + 96;
          if (!v28)
          {
            v26 = v68;
            switch(HIBYTE(v68[2]))
            {
              case 0xD:
                goto LABEL_149;
              case 0xE:
                goto LABEL_163;
              case 0xF:
                goto LABEL_142;
              case 0x12:
                goto LABEL_110;
              default:
                goto LABEL_167;
            }
          }
          goto LABEL_148;
        case 0x14:
          goto LABEL_101;
        case 0x16:
          if (v68[0] == (void *)0x74417475706E493CLL
            && v68[1] == (void *)0x536E6F69746E6574
            && *(void **)((char *)&v68[1] + 6) == (void *)0x3E7365746174536ELL)
          {
            goto LABEL_155;
          }
          if (HIBYTE(v68[2]) == 18)
            goto LABEL_109;
          if (HIBYTE(v68[2]) != 20)
            break;
LABEL_101:
          v32 = v68[0] == (void *)0x657475706D6F433CLL
             && v68[1] == (void *)0x7074754F6C6C6543
             && LODWORD(v68[2]) == 1047753845;
          v14 = a1 + 272;
          if (v32)
            goto LABEL_148;
          if (HIBYTE(v68[2]) != 18)
            break;
LABEL_109:
          v26 = v68;
          goto LABEL_110;
        default:
          break;
      }
    }
LABEL_167:
    if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v68, "<InputShapeTemplate>"))
    {
      v48 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v68, "<InputDim>");
      v49 = a1 + 308;
      if (v48)
        goto LABEL_174;
      v50 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v68, "<OutputDim>");
      v49 = a1 + 312;
      if (v50
        || (v51 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v68, "<BOSIndex>"),
            v49 = a1 + 316,
            v51)
        || (v52 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v68, "<EOSIndex>"),
            v49 = a1 + 320,
            v52)
        || (v53 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v68, "<SilIndex>"),
            v49 = a1 + 324,
            v53))
      {
LABEL_174:
        kaldi::ReadBasicType<int>(v6, v70[0], v49);
        goto LABEL_180;
      }
      if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v68, "<Engine>"))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown token ", 14);
        if (SHIBYTE(v68[2]) >= 0)
          v57 = v68;
        else
          v57 = (void **)v68[0];
        if (SHIBYTE(v68[2]) >= 0)
          v58 = HIBYTE(v68[2]);
        else
          v58 = (uint64_t)v68[1];
        v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)v57, v58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)", a typo in config file?", 24);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
      v54 = *(_QWORD *)(a1 + 328);
      v55 = v70[0];
      std::string::basic_string[abi:ne180100]<0>(&__p, "</Engine>");
      (*(void (**)(uint64_t, uint64_t *, BOOL, void **))(*(_QWORD *)v54 + 16))(v54, v6, v55 != 0, &__p);
      goto LABEL_161;
    }
    __p = 0;
    v61 = 0;
    v62 = 0;
    kaldi::ReadToken(v6, v70[0], (uint64_t)&__p);
    kaldi::quasar::InputShapeTemplate::InputShapeTemplate(&v65, &__p);
    *(_QWORD *)(a1 + 296) = v65;
    *(_DWORD *)(a1 + 304) = (_DWORD)v66;
LABEL_178:
    if (SHIBYTE(v62) < 0)
LABEL_179:
      operator delete(__p);
LABEL_180:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(v6);
    if (SHIBYTE(v68[2]) < 0)
      operator delete(v68[0]);
  }
  kaldi::Input::~Input((kaldi::Input *)v69);
}

void sub_1ADA2FD78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (*(char *)(v26 - 105) < 0)
    operator delete(*(void **)(v26 - 128));
  kaldi::Input::~Input((kaldi::Input *)(v26 - 104));
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::CEStatelessDecoderNet::CEStatelessDecoderNet(uint64_t a1, uint64_t a2)
{
  size_t v4;
  void **v5;
  const void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *__p[2];
  char v12;

  *((_QWORD *)kaldi::quasar::CEStatelessDecoderNetConfig::CEStatelessDecoderNetConfig((kaldi::quasar::CEStatelessDecoderNetConfig *)a1)
  + 42) = 0;
  if (*(char *)(a2 + 23) >= 0)
    v4 = *(unsigned __int8 *)(a2 + 23);
  else
    v4 = *(_QWORD *)(a2 + 8);
  v5 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v4 + 7);
  if (v12 < 0)
    v5 = (void **)__p[0];
  if (v4)
  {
    if (*(char *)(a2 + 23) >= 0)
      v6 = (const void *)a2;
    else
      v6 = *(const void **)a2;
    memmove(v5, v6, v4);
  }
  strcpy((char *)v5 + v4, ".config");
  kaldi::quasar::CEStatelessDecoderNetConfig::Read(a1, a2, (uint64_t)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 328) + 24))(__p);
  v7 = __p[0];
  __p[0] = 0;
  v8 = *(_QWORD *)(a1 + 336);
  *(_QWORD *)(a1 + 336) = v7;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = __p[0];
    __p[0] = 0;
    if (v9)
      (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
  }
  return a1;
}

void sub_1ADA2FF70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  kaldi::quasar::CEStatelessDecoderNetConfig *v14;
  uint64_t v16;

  v16 = *((_QWORD *)v14 + 42);
  *((_QWORD *)v14 + 42) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  kaldi::quasar::CEStatelessDecoderNetConfig::~CEStatelessDecoderNetConfig(v14);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEStatelessDecoderNet::~CEStatelessDecoderNet(kaldi::quasar::CEStatelessDecoderNet *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  kaldi::quasar::CEStatelessDecoderNetConfig::~CEStatelessDecoderNetConfig(this);
}

uint64_t kaldi::quasar::CEStatelessDecoderNet::CroppedAttentionState(kaldi::quasar::CEStatelessDecoderNet *this, const kaldi::quasar::ComputeEngineBufferItf *a2, int a3, int a4)
{
  double v8;
  int v9;
  int v10;
  double v11;
  _QWORD v13[34];
  _BYTE v14[40];

  v8 = kaldi::Matrix<float>::Matrix((uint64_t)v14);
  (*(void (**)(const kaldi::quasar::ComputeEngineBufferItf *, _BYTE *, double))(*(_QWORD *)a2 + 24))(a2, v14, v8);
  v9 = kaldi::MatrixBase<float>::NumCols((uint64_t)v14) - (a4 + a3);
  if (v9 <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"num_cols > 0", 12);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  v10 = kaldi::MatrixBase<float>::NumRows((uint64_t)v14);
  v11 = kaldi::SubMatrix<float>::SubMatrix((uint64_t)v13, (uint64_t)v14, 0, v10, a3, v9);
  (*(void (**)(_QWORD, _QWORD *, double))(**((_QWORD **)this + 42) + 40))(*((_QWORD *)this + 42), v13, v11);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v13);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v14);
}

void kaldi::quasar::CEStatelessDecoderNet::LeftPadLastAxis(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v3;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  _QWORD *v42;
  uint64_t v43;
  void *__p;
  char *v45;
  char *v46;

  LODWORD(v3) = a3;
  v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 152))(*a2);
  __p = 0;
  v45 = 0;
  v46 = 0;
  v7 = v6 - 1;
  if (v6 == 1)
  {
    v12 = 0;
    v21 = 0;
    v3 = (int)v3;
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 160))(*a2, v8);
      v10 = v9;
      v11 = v45;
      if (v45 >= v46)
      {
        v13 = (char *)__p;
        v14 = (v45 - (_BYTE *)__p) >> 3;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v16 = v46 - (_BYTE *)__p;
        if ((v46 - (_BYTE *)__p) >> 2 > v15)
          v15 = v16 >> 2;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v46, v17);
          v13 = (char *)__p;
          v11 = v45;
        }
        else
        {
          v18 = 0;
        }
        v19 = &v18[8 * v14];
        *(_QWORD *)v19 = v10;
        v12 = v19 + 8;
        while (v11 != v13)
        {
          v20 = *((_QWORD *)v11 - 1);
          v11 -= 8;
          *((_QWORD *)v19 - 1) = v20;
          v19 -= 8;
        }
        __p = v19;
        v45 = v12;
        v46 = &v18[8 * v17];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *(_QWORD *)v45 = v9;
        v12 = v11 + 8;
      }
      v45 = v12;
      ++v8;
    }
    while (v8 != v7);
    v21 = v46;
    v3 = (int)v3;
    if (v12 < v46)
    {
      *(_QWORD *)v12 = (int)v3;
      v22 = v12 + 8;
      goto LABEL_37;
    }
  }
  v23 = (char *)__p;
  v24 = (v12 - (_BYTE *)__p) >> 3;
  v25 = v24 + 1;
  if ((unint64_t)(v24 + 1) >> 61)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v26 = v21 - (_BYTE *)__p;
  if (v26 >> 2 > v25)
    v25 = v26 >> 2;
  if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
    v27 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v27 = v25;
  if (v27)
  {
    v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v46, v27);
    v23 = (char *)__p;
    v12 = v45;
  }
  else
  {
    v28 = 0;
  }
  v29 = &v28[8 * v24];
  v30 = &v28[8 * v27];
  *(_QWORD *)v29 = v3;
  v22 = v29 + 8;
  while (v12 != v23)
  {
    v31 = *((_QWORD *)v12 - 1);
    v12 -= 8;
    *((_QWORD *)v29 - 1) = v31;
    v29 -= 8;
  }
  __p = v29;
  v45 = v22;
  v46 = v30;
  if (v23)
    operator delete(v23);
LABEL_37:
  v45 = v22;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, void **))(**(_QWORD **)(a1 + 336) + 56))(&v43, *(_QWORD *)(a1 + 336), &__p);
  v32 = v43;
  v33 = *a2;
  v34 = operator new(0x10uLL);
  v41 = v34 + 2;
  v42 = v34 + 2;
  *v34 = v32;
  v34[1] = v33;
  v40 = v34;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, void **, uint64_t))(**(_QWORD **)(a1 + 336) + 96))(&v39, *(_QWORD *)(a1 + 336), &v40, v7);
  v35 = v39;
  v39 = 0;
  v36 = *a2;
  *a2 = v35;
  if (v36)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
    v37 = v39;
    v39 = 0;
    if (v37)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  }
  if (v40)
  {
    v41 = v40;
    operator delete(v40);
  }
  v38 = v43;
  v43 = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  if (__p)
  {
    v45 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1ADA303FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::CEStatelessDecoderNet::Decode(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, _QWORD *a7, uint64_t *a8, uint64_t *a9)
{
  uint64_t v9;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int FirstNonZeroColumn;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  const kaldi::quasar::ComputeEngineBufferItf *v28;
  int v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  std::string *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  int64x2_t v46;
  char *v47;
  uint64_t v48;
  __int128 v49;
  std::string *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  int64x2_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  std::string *v75;
  __int128 v76;
  std::string *v77;
  __int128 *v78;
  uint64_t v79;
  __int128 v80;
  std::string *v81;
  __int128 *v82;
  uint64_t v83;
  __int128 v84;
  std::string *v85;
  __int128 *v86;
  uint64_t v87;
  __int128 v88;
  std::string *v89;
  __int128 *v90;
  _OWORD *size;
  __int128 v92;
  std::string *v93;
  __int128 *v94;
  __int128 v95;
  std::string::size_type v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t *v111;
  _QWORD *v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t *v115;
  void **v116[3];
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  std::string *v120;
  unint64_t v121;
  int64x2_t v122;
  _QWORD v123[2];
  std::string v124;
  char *v125;
  _QWORD *v126;
  void ***v127;

  v9 = (uint64_t)(a2[1] - *a2) >> 3;
  if (v9 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v124);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v124, "input_states.size() == cfg_.input_states.size()");
    goto LABEL_147;
  }
  if (v9 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v124);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v124, "input_states.size() == cfg_.output_states.size()");
    goto LABEL_147;
  }
  if (!*a3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v124);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v124, "input_feats != nullptr");
    goto LABEL_147;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a3 + 152))(*a3) != *(_DWORD *)(a1 + 304))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v124);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v124, "input_feats->GetNumDims() == cfg_.input_shape_template.ndim");
    goto LABEL_147;
  }
  if ((*(int (**)(uint64_t, _QWORD))(*(_QWORD *)*a3 + 160))(*a3, *(unsigned int *)(a1 + 296)) <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v124);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v124, "input_feats->GetDimSize(cfg_.input_shape_template.row_index) > 0");
    goto LABEL_147;
  }
  if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)*a3 + 160))(*a3, *(unsigned int *)(a1 + 300)) != *(_DWORD *)(a1 + 308))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v124);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v124, "input_feats->GetDimSize(cfg_.input_shape_template.col_index) == InputDim()");
LABEL_147:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v124);
  }
  v113 = a4;
  v115 = a5;
  v111 = a6;
  v112 = a7;
  if (!*(_QWORD *)(a1 + 216))
    goto LABEL_16;
  v18 = *(_QWORD *)(a1 + 120);
  if (*(_QWORD *)(a1 + 128) == v18)
    goto LABEL_16;
  v19 = 0;
  v20 = 0;
  v21 = 0x7FFFFFFFLL;
  do
  {
    if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 192), (unsigned __int8 *)(v18 + v19)))
    {
      FirstNonZeroColumn = kaldi::quasar::ComputeEngineBufferItf::GetFirstNonZeroColumn(*(kaldi::quasar::ComputeEngineBufferItf **)(*a2 + 8 * v20), 0.00097656);
      if ((int)v21 >= FirstNonZeroColumn)
        v21 = FirstNonZeroColumn;
      else
        v21 = v21;
    }
    ++v20;
    v18 = *(_QWORD *)(a1 + 120);
    v19 += 24;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 128) - v18) >> 3) > v20);
  if ((_DWORD)v21 == 0x7FFFFFFF)
LABEL_16:
    v21 = 0;
  v114 = a3;
  v23 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)*a3 + 160))(*a3, 0);
  v122 = 0uLL;
  v123[0] = 0;
  v119 = 0;
  v120 = 0;
  v121 = 0;
  v24 = *(_QWORD *)(a1 + 120);
  if (*(_QWORD *)(a1 + 128) != v24)
  {
    v25 = v23;
    v26 = 0;
    while (1)
    {
      v27 = v24 + 24 * v26;
      v28 = *(const kaldi::quasar::ComputeEngineBufferItf **)(*a2 + 8 * v26);
      if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 192), (unsigned __int8 *)v27)|| ((v29 = (*(uint64_t (**)(const kaldi::quasar::ComputeEngineBufferItf *, uint64_t))(*(_QWORD *)v28 + 160))(v28, 1)- v25, v29 <= 0)? (v30 = (_DWORD)v21 == 0): (v30 = 0), v30))
      {
        v34 = v120;
        if ((unint64_t)v120 >= v121)
        {
          v35 = std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string const&,kaldi::quasar::ComputeEngineBufferItf const&>(&v119, (__int128 *)v27, (uint64_t)v28);
LABEL_51:
          v50 = (std::string *)v35;
          goto LABEL_52;
        }
        if ((*(char *)(v27 + 23) & 0x80000000) == 0)
        {
LABEL_48:
          v49 = *(_OWORD *)v27;
          v34->__r_.__value_.__r.__words[2] = *(_QWORD *)(v27 + 16);
          *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v49;
          goto LABEL_49;
        }
      }
      else
      {
        kaldi::quasar::CEStatelessDecoderNet::CroppedAttentionState((uint64_t *)&v117, (kaldi::quasar::CEStatelessDecoderNet *)a1, v28, v21, v29 & ~(v29 >> 31));
        v31 = v122.i64[1];
        if (v122.i64[1] >= v123[0])
        {
          v36 = (v122.i64[1] - v122.i64[0]) >> 3;
          if ((unint64_t)(v36 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v37 = (v123[0] - v122.i64[0]) >> 2;
          if (v37 <= v36 + 1)
            v37 = v36 + 1;
          if (v123[0] - v122.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL)
            v38 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v38 = v37;
          v126 = v123;
          if (v38)
            v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v123, v38);
          else
            v39 = 0;
          v40 = &v39[8 * v36];
          v41 = &v39[8 * v38];
          v125 = v41;
          v42 = v117;
          *(_QWORD *)&v117 = 0;
          *(_QWORD *)v40 = v42;
          v33 = v40 + 8;
          v124.__r_.__value_.__r.__words[2] = (std::string::size_type)(v40 + 8);
          v43 = (_QWORD *)v122.i64[1];
          v44 = (_QWORD *)v122.i64[0];
          if (v122.i64[1] == v122.i64[0])
          {
            v46 = vdupq_n_s64(v122.u64[1]);
          }
          else
          {
            do
            {
              v45 = *--v43;
              *v43 = 0;
              *((_QWORD *)v40 - 1) = v45;
              v40 -= 8;
            }
            while (v43 != v44);
            v46 = v122;
            v33 = (_QWORD *)v124.__r_.__value_.__r.__words[2];
            v41 = v125;
          }
          v122.i64[0] = (uint64_t)v40;
          v122.i64[1] = (uint64_t)v33;
          *(int64x2_t *)&v124.__r_.__value_.__r.__words[1] = v46;
          v47 = (char *)v123[0];
          v123[0] = v41;
          v125 = v47;
          v124.__r_.__value_.__r.__words[0] = v46.i64[0];
          std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v124);
        }
        else
        {
          v32 = v117;
          *(_QWORD *)&v117 = 0;
          *(_QWORD *)v122.i64[1] = v32;
          v33 = (_QWORD *)(v31 + 8);
        }
        v122.i64[1] = (uint64_t)v33;
        v48 = v117;
        *(_QWORD *)&v117 = 0;
        if (v48)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
          v33 = (_QWORD *)v122.i64[1];
        }
        v28 = (const kaldi::quasar::ComputeEngineBufferItf *)*(v33 - 1);
        v34 = v120;
        if ((unint64_t)v120 >= v121)
        {
          v35 = std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string const&,kaldi::quasar::ComputeEngineBufferItf&>(&v119, (__int128 *)v27, (uint64_t)v28);
          goto LABEL_51;
        }
        if ((*(char *)(v27 + 23) & 0x80000000) == 0)
          goto LABEL_48;
      }
      std::string::__init_copy_ctor_external(v120, *(const std::string::value_type **)v27, *(_QWORD *)(v27 + 8));
LABEL_49:
      v34[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
      v50 = (std::string *)((char *)v34 + 32);
LABEL_52:
      v120 = v50;
      ++v26;
      v24 = *(_QWORD *)(a1 + 120);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 128) - v24) >> 3) <= v26)
        goto LABEL_56;
    }
  }
  v50 = 0;
LABEL_56:
  if ((_DWORD)v21)
  {
    v51 = *(_QWORD *)(a1 + 336);
    v52 = *v114;
    v53 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)*v114 + 160))(*v114, 0);
    v54 = v115;
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v51 + 112))(&v117, v51, v52, v21, v53);
    v55 = v122.i64[1];
    if (v122.i64[1] >= v123[0])
    {
      v60 = (v122.i64[1] - v122.i64[0]) >> 3;
      if ((unint64_t)(v60 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v61 = (v123[0] - v122.i64[0]) >> 2;
      if (v61 <= v60 + 1)
        v61 = v60 + 1;
      if (v123[0] - v122.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL)
        v62 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v62 = v61;
      v126 = v123;
      if (v62)
        v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v123, v62);
      else
        v63 = 0;
      v65 = &v63[8 * v60];
      v66 = &v63[8 * v62];
      v125 = v66;
      v67 = v117;
      *(_QWORD *)&v117 = 0;
      *(_QWORD *)v65 = v67;
      v57 = v65 + 8;
      v124.__r_.__value_.__r.__words[2] = (std::string::size_type)(v65 + 8);
      v68 = (_QWORD *)v122.i64[1];
      v69 = (_QWORD *)v122.i64[0];
      if (v122.i64[1] == v122.i64[0])
      {
        v71 = vdupq_n_s64(v122.u64[1]);
      }
      else
      {
        do
        {
          v70 = *--v68;
          *v68 = 0;
          *((_QWORD *)v65 - 1) = v70;
          v65 -= 8;
        }
        while (v68 != v69);
        v71 = v122;
        v57 = (_QWORD *)v124.__r_.__value_.__r.__words[2];
        v66 = v125;
      }
      v122.i64[0] = (uint64_t)v65;
      v122.i64[1] = (uint64_t)v57;
      *(int64x2_t *)&v124.__r_.__value_.__r.__words[1] = v71;
      v72 = (char *)v123[0];
      v123[0] = v66;
      v125 = v72;
      v124.__r_.__value_.__r.__words[0] = v71.i64[0];
      std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v124);
    }
    else
    {
      v56 = v117;
      *(_QWORD *)&v117 = 0;
      *(_QWORD *)v122.i64[1] = v56;
      v57 = (_QWORD *)(v55 + 8);
    }
    v122.i64[1] = (uint64_t)v57;
    v73 = v117;
    *(_QWORD *)&v117 = 0;
    if (v73)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
      v57 = (_QWORD *)v122.i64[1];
    }
    v74 = *(v57 - 1);
    v75 = v120;
    if ((unint64_t)v120 < v121)
    {
      if (*(char *)(a1 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v120, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
      }
      else
      {
        v76 = *(_OWORD *)a1;
        v120->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
        *(_OWORD *)&v75->__r_.__value_.__l.__data_ = v76;
      }
      v75[1].__r_.__value_.__r.__words[0] = v74;
      v77 = (std::string *)((char *)v75 + 32);
      goto LABEL_88;
    }
    v64 = std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string const&,kaldi::quasar::ComputeEngineBufferItf&>(&v119, (__int128 *)a1, v74);
  }
  else
  {
    v54 = v115;
    v58 = *v114;
    if ((unint64_t)v50 < v121)
    {
      if (*(char *)(a1 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v50, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
      }
      else
      {
        v59 = *(_OWORD *)a1;
        v50->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
        *(_OWORD *)&v50->__r_.__value_.__l.__data_ = v59;
      }
      v50[1].__r_.__value_.__r.__words[0] = v58;
      v77 = (std::string *)((char *)v50 + 32);
      goto LABEL_88;
    }
    v64 = std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string const&,kaldi::quasar::ComputeEngineBufferItf&>(&v119, (__int128 *)a1, *v114);
  }
  v77 = (std::string *)v64;
LABEL_88:
  v120 = v77;
  v78 = (__int128 *)(a1 + 24);
  v79 = *v113;
  if ((unint64_t)v77 >= v121)
  {
    v81 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string const&,kaldi::quasar::ComputeEngineBufferItf&>(&v119, v78, *v113);
  }
  else
  {
    if (*(char *)(a1 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(v77, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
    }
    else
    {
      v80 = *v78;
      v77->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 40);
      *(_OWORD *)&v77->__r_.__value_.__l.__data_ = v80;
    }
    v77[1].__r_.__value_.__r.__words[0] = v79;
    v81 = (std::string *)((char *)v77 + 32);
  }
  v120 = v81;
  v82 = (__int128 *)(a1 + 48);
  v83 = *v54;
  if ((unint64_t)v81 >= v121)
  {
    v85 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string const&,kaldi::quasar::ComputeEngineBufferItf&>(&v119, v82, *v54);
  }
  else
  {
    if (*(char *)(a1 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(v81, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
    }
    else
    {
      v84 = *v82;
      v81->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 64);
      *(_OWORD *)&v81->__r_.__value_.__l.__data_ = v84;
    }
    v81[1].__r_.__value_.__r.__words[0] = v83;
    v85 = (std::string *)((char *)v81 + 32);
  }
  v120 = v85;
  if (*(char *)(a1 + 295) < 0)
  {
    if (!*(_QWORD *)(a1 + 280))
      goto LABEL_111;
  }
  else if (!*(_BYTE *)(a1 + 295))
  {
    goto LABEL_111;
  }
  v86 = (__int128 *)(a1 + 272);
  v87 = *v111;
  if ((unint64_t)v85 >= v121)
  {
    v89 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string const&,kaldi::quasar::ComputeEngineBufferItf&>(&v119, v86, *v111);
  }
  else
  {
    if ((*(_BYTE *)(a1 + 295) & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(v85, *(const std::string::value_type **)(a1 + 272), *(_QWORD *)(a1 + 280));
    }
    else
    {
      v88 = *v86;
      v85->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 288);
      *(_OWORD *)&v85->__r_.__value_.__l.__data_ = v88;
    }
    v85[1].__r_.__value_.__r.__words[0] = v87;
    v89 = (std::string *)((char *)v85 + 32);
  }
  v120 = v89;
LABEL_111:
  memset(&v124, 0, sizeof(v124));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v124, *(__int128 **)(a1 + 144), *(__int128 **)(a1 + 152), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3));
  v90 = (__int128 *)(a1 + 72);
  size = (_OWORD *)v124.__r_.__value_.__l.__size_;
  if (v124.__r_.__value_.__l.__size_ >= v124.__r_.__value_.__r.__words[2])
  {
    v93 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v124, v90);
  }
  else
  {
    if (*(char *)(a1 + 95) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v124.__r_.__value_.__l.__size_, *(const std::string::value_type **)(a1 + 72), *(_QWORD *)(a1 + 80));
    }
    else
    {
      v92 = *v90;
      *(_QWORD *)(v124.__r_.__value_.__l.__size_ + 16) = *(_QWORD *)(a1 + 88);
      *size = v92;
    }
    v93 = (std::string *)((char *)size + 24);
  }
  v124.__r_.__value_.__l.__size_ = (std::string::size_type)v93;
  v94 = (__int128 *)(a1 + 96);
  if ((unint64_t)v93 >= v124.__r_.__value_.__r.__words[2])
  {
    v96 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v124, v94);
  }
  else
  {
    if (*(char *)(a1 + 119) < 0)
    {
      std::string::__init_copy_ctor_external(v93, *(const std::string::value_type **)(a1 + 96), *(_QWORD *)(a1 + 104));
    }
    else
    {
      v95 = *v94;
      v93->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 112);
      *(_OWORD *)&v93->__r_.__value_.__l.__data_ = v95;
    }
    v96 = (std::string::size_type)&v93[1];
  }
  v124.__r_.__value_.__l.__size_ = v96;
  v117 = 0uLL;
  v118 = 0;
  v97 = *(_QWORD *)(a1 + 336);
  memset(v116, 0, sizeof(v116));
  (*(void (**)(uint64_t, uint64_t *, std::string *, void ***, __int128 *))(*(_QWORD *)v97 + 128))(v97, &v119, &v124, v116, &v117);
  v127 = v116;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v127);
  v98 = *(_QWORD *)(*((_QWORD *)&v117 + 1) - 8);
  *(_QWORD *)(*((_QWORD *)&v117 + 1) - 8) = 0;
  v99 = *a9;
  *a9 = v98;
  if (v99)
    (*(void (**)(uint64_t))(*(_QWORD *)v99 + 8))(v99);
  if ((_DWORD)v21)
    kaldi::quasar::CEStatelessDecoderNet::LeftPadLastAxis(a1, a9, v21);
  v100 = *((_QWORD *)&v117 + 1);
  v102 = *((_QWORD *)&v117 + 1) - 8;
  v101 = *(_QWORD *)(*((_QWORD *)&v117 + 1) - 8);
  *(_QWORD *)(*((_QWORD *)&v117 + 1) - 8) = 0;
  if (v101)
    (*(void (**)(uint64_t))(*(_QWORD *)v101 + 8))(v101);
  *((_QWORD *)&v117 + 1) = v102;
  v103 = *(_QWORD *)(v100 - 16);
  *(_QWORD *)(v100 - 16) = 0;
  v104 = *a8;
  *a8 = v103;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  v106 = *((_QWORD *)&v117 + 1) - 8;
  v105 = *(_QWORD *)(*((_QWORD *)&v117 + 1) - 8);
  *(_QWORD *)(*((_QWORD *)&v117 + 1) - 8) = 0;
  if (v105)
    (*(void (**)(uint64_t))(*(_QWORD *)v105 + 8))(v105);
  *((_QWORD *)&v117 + 1) = v106;
  if ((_DWORD)v21)
  {
    if (*(_QWORD *)(a1 + 216))
    {
      v107 = *(_QWORD *)(a1 + 120);
      if (*(_QWORD *)(a1 + 128) != v107)
      {
        v108 = 0;
        v109 = 0;
        v110 = 0;
        do
        {
          if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 192), (unsigned __int8 *)(v107 + v108)))
          {
            kaldi::quasar::CEStatelessDecoderNet::LeftPadLastAxis(a1, (_QWORD *)(v117 + v109), v21);
          }
          ++v110;
          v107 = *(_QWORD *)(a1 + 120);
          v109 += 8;
          v108 += 24;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 128) - v107) >> 3) > v110);
      }
    }
  }
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate(v112);
  *(_OWORD *)v112 = v117;
  v112[2] = v118;
  v118 = 0;
  v117 = 0uLL;
  v116[0] = (void **)&v117;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](v116);
  *(_QWORD *)&v117 = &v124;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
  v124.__r_.__value_.__r.__words[0] = (std::string::size_type)&v119;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v124);
  v124.__r_.__value_.__r.__words[0] = (std::string::size_type)&v122;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v124);
}

void sub_1ADA30EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void ***a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  a19 = &a22;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  a22 = (void **)&a25;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void sub_1ADA30FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a29);
}

uint64_t kaldi::quasar::CEStatelessDecoderNet::Decode(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  void *__p;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 336) + 16))(&v28, *(_QWORD *)(a1 + 336), a4, 0);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 336) + 16))(&v27, *(_QWORD *)(a1 + 336), a5, 0);
  v16 = *(_QWORD *)(a1 + 336);
  __p = 0;
  v24 = 0;
  v25 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)v16 + 48))(&v26, v16, &__p);
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v26 + 96))(v26, a6, 0);
  v22 = 0;
  __p = 0;
  kaldi::quasar::CEStatelessDecoderNet::Decode(a1, a2, a3, &v28, &v27, &v26, a7, (uint64_t *)&__p, &v22);
  v17 = __p;
  (*(void (**)(void *, uint64_t))(*(_QWORD *)__p + 56))(__p, a8);
  v18 = v22;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 56))(v22, a9);
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  (*(void (**)(void *))(*(_QWORD *)v17 + 8))(v17);
  v19 = v26;
  v26 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = v27;
  v27 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  result = v28;
  v28 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1ADA31174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::CEStatelessDecoderNet::InitialStates(kaldi::quasar::CEStatelessDecoderNet *this@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  void *v8;
  uint64_t v9;
  _DWORD *v10;
  __int128 *v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  void **v15;
  uint64_t v16;
  _DWORD *v17;
  __int128 *v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  void **v22;
  uint64_t *v23;
  uint64_t v24;
  _OWORD *v25;
  __int128 *v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  void **v30;
  uint64_t v31;
  int64x2_t v32;
  void *__p;
  void *v34;
  _DWORD *v35;
  void *v36[3];
  uint64_t v37;
  std::string *v38;
  unint64_t v39;
  void **p_p;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = (char *)this + 168;
  if (*((_QWORD *)this + 22) != *((_QWORD *)this + 21))
  {
    v37 = 0;
    v38 = 0;
    v39 = 0;
    kaldi::quasar::InputShapeTemplate::Get((kaldi::quasar::CEStatelessDecoderNet *)((char *)this + 296), 1, *((int *)this + 77), v36);
    (*(void (**)(void **__return_ptr, _QWORD, void **))(**((_QWORD **)this + 42) + 56))(&__p, *((_QWORD *)this + 42), v36);
    v5 = v38;
    if ((unint64_t)v38 >= v39)
    {
      v7 = (std::string *)std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__emplace_back_slow_path<std::string const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>(&v37, (__int128 *)this, (uint64_t *)&__p);
      v8 = __p;
      v38 = v7;
      __p = 0;
      if (v8)
        (*(void (**)(void *))(*(_QWORD *)v8 + 8))(v8);
    }
    else
    {
      if (*((char *)this + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v38, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
      }
      else
      {
        v6 = *(_OWORD *)this;
        v38->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
        *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      }
      v5[1].__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      v38 = (std::string *)((char *)v5 + 32);
    }
    v9 = *((_QWORD *)this + 42);
    v10 = operator new(4uLL);
    __p = v10;
    *v10 = 0;
    v34 = v10 + 1;
    v35 = v10 + 1;
    (*(void (**)(void ***__return_ptr, uint64_t, void **, _QWORD))(*(_QWORD *)v9 + 16))(&p_p, v9, &__p, 0);
    v11 = (__int128 *)((char *)this + 48);
    v12 = v38;
    if ((unint64_t)v38 >= v39)
    {
      v14 = (std::string *)std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__emplace_back_slow_path<std::string const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>(&v37, v11, (uint64_t *)&p_p);
      v15 = p_p;
      v38 = v14;
      p_p = 0;
      if (v15)
        (*((void (**)(void **))*v15 + 1))(v15);
    }
    else
    {
      if (*((char *)this + 71) < 0)
      {
        std::string::__init_copy_ctor_external(v38, *((const std::string::value_type **)this + 6), *((_QWORD *)this + 7));
      }
      else
      {
        v13 = *v11;
        v38->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 8);
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
      }
      v12[1].__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
      v38 = (std::string *)((char *)v12 + 32);
      p_p = 0;
    }
    if (__p)
    {
      v34 = __p;
      operator delete(__p);
    }
    v16 = *((_QWORD *)this + 42);
    v17 = operator new(4uLL);
    __p = v17;
    *v17 = 0;
    v34 = v17 + 1;
    v35 = v17 + 1;
    (*(void (**)(void ***__return_ptr, uint64_t, void **, _QWORD))(*(_QWORD *)v16 + 16))(&p_p, v16, &__p, 0);
    v18 = (__int128 *)((char *)this + 24);
    v19 = v38;
    if ((unint64_t)v38 >= v39)
    {
      v21 = (std::string *)std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__emplace_back_slow_path<std::string const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>(&v37, v18, (uint64_t *)&p_p);
      v22 = p_p;
      v38 = v21;
      p_p = 0;
      if (v22)
        (*((void (**)(void **))*v22 + 1))(v22);
    }
    else
    {
      if (*((char *)this + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v38, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
      }
      else
      {
        v20 = *v18;
        v38->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 5);
        *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
      }
      v19[1].__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
      v38 = (std::string *)((char *)v19 + 32);
      p_p = 0;
    }
    if (__p)
    {
      v34 = __p;
      operator delete(__p);
    }
    v23 = (uint64_t *)*((_QWORD *)this + 26);
    if (v23)
    {
      v32 = vdupq_n_s64(1uLL);
      do
      {
        v24 = *((_QWORD *)this + 42);
        v25 = operator new(0x10uLL);
        __p = v25;
        *v25 = v32;
        v34 = v25 + 1;
        v35 = v25 + 1;
        (*(void (**)(void ***__return_ptr, uint64_t, void **))(*(_QWORD *)v24 + 56))(&p_p, v24, &__p);
        v26 = (__int128 *)(v23 + 2);
        v27 = v38;
        if ((unint64_t)v38 >= v39)
        {
          v29 = (std::string *)std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__emplace_back_slow_path<std::string const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>(&v37, v26, (uint64_t *)&p_p);
          v30 = p_p;
          v38 = v29;
          p_p = 0;
          if (v30)
            (*((void (**)(void **))*v30 + 1))(v30);
        }
        else
        {
          if (*((char *)v23 + 39) < 0)
          {
            std::string::__init_copy_ctor_external(v38, (const std::string::value_type *)v23[2], v23[3]);
          }
          else
          {
            v28 = *v26;
            v38->__r_.__value_.__r.__words[2] = v23[4];
            *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
          }
          v27[1].__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
          v38 = (std::string *)((char *)v27 + 32);
          p_p = 0;
        }
        if (__p)
        {
          v34 = __p;
          operator delete(__p);
        }
        v23 = (uint64_t *)*v23;
      }
      while (v23);
    }
    v31 = *((_QWORD *)this + 42);
    __p = 0;
    v34 = 0;
    v35 = 0;
    (*(void (**)(uint64_t, uint64_t *, char *, void **, _QWORD *))(*(_QWORD *)v31 + 120))(v31, &v37, v3, &__p, a2);
    p_p = &__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
    if (v36[0])
    {
      v36[1] = v36[0];
      operator delete(v36[0]);
    }
    v36[0] = &v37;
    std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v36);
  }
}

void sub_1ADA315C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t *a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v20;

  v20 = *(_QWORD *)(v18 - 56);
  *(_QWORD *)(v18 - 56) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  if (__p)
    operator delete(__p);
  if (a14)
  {
    a15 = a14;
    operator delete(a14);
  }
  a14 = &a17;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::CEStatelessDecoderNet::CopyCellOutputs(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[34];

  v3 = (uint64_t)(a2[1] - *a2) >> 3;
  v4 = a1[15];
  v5 = a1[16];
  if (v3 != 0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "src_states.size() == cfg_.input_states.size()");
    goto LABEL_18;
  }
  if (v3 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[19] - a1[18]) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "src_states.size() == cfg_.output_states.size()");
    goto LABEL_18;
  }
  if (v3 != (a3[1] - *a3) >> 3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "src_states.size() == dst_states.size()");
LABEL_18:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  v8 = 0;
  if (a1[32] && v5 != v4)
  {
    v10 = 0;
    v11 = 0;
    v8 = 0;
    do
    {
      if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a1 + 29, (unsigned __int8 *)(v4 + v10)))
      {
        (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(*a2 + 8 * v11) + 16))(v17);
        v12 = *a3;
        v13 = v17[0];
        v17[0] = 0;
        v14 = *(_QWORD *)(v12 + 8 * v11);
        *(_QWORD *)(v12 + 8 * v11) = v13;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        v15 = v17[0];
        v17[0] = 0;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        v8 = 1;
      }
      ++v11;
      v4 = a1[15];
      v10 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a1[16] - v4) >> 3) > v11);
  }
  return v8 & 1;
}

uint64_t kaldi::quasar::CEStatelessDecoderNet::BOSIndex(kaldi::quasar::CEStatelessDecoderNet *this)
{
  return *((unsigned int *)this + 79);
}

uint64_t kaldi::quasar::CEStatelessDecoderNet::EOSIndex(kaldi::quasar::CEStatelessDecoderNet *this)
{
  return *((unsigned int *)this + 80);
}

uint64_t kaldi::quasar::CEStatelessDecoderNet::SilIndex(kaldi::quasar::CEStatelessDecoderNet *this)
{
  return *((unsigned int *)this + 81);
}

kaldi::quasar::CEEncoderDecoderNetConfig *kaldi::quasar::CEEncoderDecoderNetConfig::CEEncoderDecoderNetConfig(kaldi::quasar::CEEncoderDecoderNetConfig *this)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(this, "encoder_input");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "decoder_parent_ids");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 6, "decoder_input");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 9, "");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 12, "");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 15, "decoder_output");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 18, "decoder_attention");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 21, "encode");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 24, "reset");
  kaldi::quasar::InputShapeTemplate::InputShapeTemplate((kaldi::quasar::CEEncoderDecoderNetConfig *)((char *)this + 216));
  *(_OWORD *)((char *)this + 228) = xmmword_1AE140E90;
  *(_QWORD *)((char *)this + 244) = 0xFFFFFFFF00000001;
  *((_DWORD *)this + 63) = 8;
  *((_QWORD *)this + 32) = 0;
  return this;
}

void sub_1ADA319A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  void **v9;

  if (*(char *)(v1 + 215) < 0)
    operator delete(*v9);
  if (*(char *)(v1 + 191) < 0)
    operator delete(*v8);
  if (*(char *)(v1 + 167) < 0)
    operator delete(*v7);
  if (*(char *)(v1 + 143) < 0)
    operator delete(*v6);
  if (*(char *)(v1 + 119) < 0)
    operator delete(*v5);
  if (*(char *)(v1 + 95) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::CEEncoderDecoderNetConfig::~CEEncoderDecoderNetConfig(kaldi::quasar::CEEncoderDecoderNetConfig *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 215) < 0)
    operator delete(*((void **)this + 24));
  if (*((char *)this + 191) < 0)
    operator delete(*((void **)this + 21));
  if (*((char *)this + 167) < 0)
    operator delete(*((void **)this + 18));
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

kaldi::quasar::CEEncoderNetConfig *kaldi::quasar::CEEncoderNetConfig::CEEncoderNetConfig(kaldi::quasar::CEEncoderNetConfig *this)
{
  _QWORD *v2;
  std::string *v3;
  std::string *v4;
  std::string *v5;
  void *__p[2];
  char v8;
  __int128 v9;

  *(_QWORD *)&v9 = *MEMORY[0x1E0C80C00];
  v2 = std::string::basic_string[abi:ne180100]<0>(this, "inputs");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "outputs");
  std::string::basic_string[abi:ne180100]<0>(__p, "input_states");
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  v3 = (std::string *)operator new(0x18uLL);
  *((_QWORD *)this + 8) = v3 + 1;
  *((_QWORD *)this + 6) = v3;
  *((_QWORD *)this + 7) = v3;
  *((_QWORD *)this + 7) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)this + 64, (__int128 *)__p, &v9, v3);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "output_states");
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  v4 = (std::string *)operator new(0x18uLL);
  *((_QWORD *)this + 11) = v4 + 1;
  *((_QWORD *)this + 9) = v4;
  *((_QWORD *)this + 10) = v4;
  *((_QWORD *)this + 10) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)this + 88, (__int128 *)__p, &v9, v4);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "initial_states");
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  v5 = (std::string *)operator new(0x18uLL);
  *((_QWORD *)this + 14) = v5 + 1;
  *((_QWORD *)this + 12) = v5;
  *((_QWORD *)this + 13) = v5;
  *((_QWORD *)this + 13) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)this + 112, (__int128 *)__p, &v9, v5);
  if (v8 < 0)
    operator delete(__p[0]);
  kaldi::quasar::InputShapeTemplate::InputShapeTemplate((kaldi::quasar::CEEncoderNetConfig *)((char *)this + 120));
  *(_QWORD *)((char *)this + 132) = -1;
  *((_DWORD *)this + 35) = 1;
  *((_QWORD *)this + 18) = 0;
  return this;
}

void sub_1ADA31D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  void **v17;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v16 + 47) < 0)
    operator delete(*v17);
  if (*(char *)(v16 + 23) < 0)
    operator delete(*(void **)v16);
  _Unwind_Resume(a1);
}

void sub_1ADA31DE4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v16 + 56) = v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (a16 < 0)
    operator delete(__p);
  JUMPOUT(0x1ADA31DBCLL);
}

void sub_1ADA31E14()
{
  JUMPOUT(0x1ADA31DBCLL);
}

void sub_1ADA31E1C()
{
  JUMPOUT(0x1ADA31DCCLL);
}

kaldi::quasar::CEDecoderNetConfig *kaldi::quasar::CEDecoderNetConfig::CEDecoderNetConfig(kaldi::quasar::CEDecoderNetConfig *this)
{
  _QWORD *v2;
  std::string *v3;
  std::string *v4;
  std::string *v5;
  void *__p[2];
  char v8;
  __int128 v9;

  *(_QWORD *)&v9 = *MEMORY[0x1E0C80C00];
  v2 = std::string::basic_string[abi:ne180100]<0>(this, "feats") + 3;
  std::string::basic_string[abi:ne180100]<0>(v2, "parents");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 6, "inputs");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 9, "");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 12, "outputs");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 15, "attentions");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 18, "");
  std::string::basic_string[abi:ne180100]<0>(__p, "input_states");
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  v3 = (std::string *)operator new(0x18uLL);
  *((_QWORD *)this + 23) = v3 + 1;
  *((_QWORD *)this + 21) = v3;
  *((_QWORD *)this + 22) = v3;
  *((_QWORD *)this + 22) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)this + 184, (__int128 *)__p, &v9, v3);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "output_states");
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  v4 = (std::string *)operator new(0x18uLL);
  *((_QWORD *)this + 26) = v4 + 1;
  *((_QWORD *)this + 24) = v4;
  *((_QWORD *)this + 25) = v4;
  *((_QWORD *)this + 25) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)this + 208, (__int128 *)__p, &v9, v4);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "initial_states");
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  v5 = (std::string *)operator new(0x18uLL);
  *((_QWORD *)this + 29) = v5 + 1;
  *((_QWORD *)this + 27) = v5;
  *((_QWORD *)this + 28) = v5;
  *((_QWORD *)this + 28) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)this + 232, (__int128 *)__p, &v9, v5);
  if (v8 < 0)
    operator delete(__p[0]);
  kaldi::quasar::InputShapeTemplate::InputShapeTemplate((kaldi::quasar::CEDecoderNetConfig *)((char *)this + 240));
  *(_OWORD *)((char *)this + 252) = xmmword_1AE15C0B0;
  *((_DWORD *)this + 67) = -1;
  *((_QWORD *)this + 34) = 0;
  return this;
}

void sub_1ADA32078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  void **v19;
  void **v20;
  void **v21;
  void **v22;
  void **v23;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v18 + 167) < 0)
    operator delete(*v23);
  if (*(char *)(v18 + 143) < 0)
    operator delete(*v22);
  if (*(char *)(v18 + 119) < 0)
    operator delete(*v21);
  if (*(char *)(v18 + 95) < 0)
    operator delete(*v20);
  if (*(char *)(v18 + 71) < 0)
    operator delete(*v19);
  if (*(char *)(v18 + 47) < 0)
    operator delete(*a10);
  if (*(char *)(v18 + 23) < 0)
    operator delete(*(void **)v18);
  _Unwind_Resume(a1);
}

void sub_1ADA3218C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)(v18 + 176) = v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a11);
  if (a18 < 0)
    operator delete(__p);
  JUMPOUT(0x1ADA32110);
}

void sub_1ADA321BC()
{
  JUMPOUT(0x1ADA32110);
}

void sub_1ADA321C4()
{
  JUMPOUT(0x1ADA32120);
}

void sub_1ADA321CC()
{
  JUMPOUT(0x1ADA32130);
}

void sub_1ADA321D4()
{
  JUMPOUT(0x1ADA32140);
}

void sub_1ADA321DC()
{
  JUMPOUT(0x1ADA32150);
}

void sub_1ADA321E4()
{
  JUMPOUT(0x1ADA32160);
}

void sub_1ADA321EC()
{
  JUMPOUT(0x1ADA32174);
}

void kaldi::quasar::CEDecoderNetConfig::~CEDecoderNetConfig(kaldi::quasar::CEDecoderNetConfig *this)
{
  uint64_t v2;
  void **v3;

  v2 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void **)((char *)this + 216);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 192);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 168);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 167) < 0)
    operator delete(*((void **)this + 18));
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

kaldi::quasar::CEStatelessEncoderNetConfig *kaldi::quasar::CEStatelessEncoderNetConfig::CEStatelessEncoderNetConfig(kaldi::quasar::CEStatelessEncoderNetConfig *this)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(this, "input_feats");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 6, "output_feats");
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 17) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  kaldi::quasar::InputShapeTemplate::InputShapeTemplate((kaldi::quasar::CEStatelessEncoderNetConfig *)((char *)this + 144));
  *(_QWORD *)((char *)this + 156) = -1;
  *((_DWORD *)this + 41) = 1;
  *((_QWORD *)this + 21) = 0;
  return this;
}

void sub_1ADA32374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;

  v14 = v12;
  a10 = (void **)(v10 + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 71) < 0)
    operator delete(*v13);
  if (*(char *)(v10 + 47) < 0)
    operator delete(*v11);
  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  _Unwind_Resume(a1);
}

kaldi::quasar::CEStatelessDecoderNetConfig *kaldi::quasar::CEStatelessDecoderNetConfig::CEStatelessDecoderNetConfig(kaldi::quasar::CEStatelessDecoderNetConfig *this)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(this, "input_feats");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "input_parents");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 6, "input_labels");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 9, "output_loglikes");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 12, "output_alignments");
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((_QWORD *)this + 27) = 0;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 56) = 1065353216;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_DWORD *)this + 66) = 1065353216;
  *(_OWORD *)((char *)this + 248) = 0u;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 34, "");
  kaldi::quasar::InputShapeTemplate::InputShapeTemplate((kaldi::quasar::CEStatelessDecoderNetConfig *)((char *)this + 296));
  *(_OWORD *)((char *)this + 308) = xmmword_1AE15C0B0;
  *((_DWORD *)this + 81) = -1;
  *((_QWORD *)this + 41) = 0;
  return this;
}

void sub_1ADA32504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10)
{
  uint64_t v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;

  if (*(char *)(v10 + 295) < 0)
    operator delete(*v16);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v15);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v17 + 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  a10 = v17 + 24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  a10 = v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  if (*(char *)(v10 + 119) < 0)
    operator delete(*v14);
  if (*(char *)(v10 + 95) < 0)
    operator delete(*v13);
  if (*(char *)(v10 + 71) < 0)
    operator delete(*v12);
  if (*(char *)(v10 + 47) < 0)
    operator delete(*v11);
  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEStatelessDecoderNetConfig::~CEStatelessDecoderNetConfig(kaldi::quasar::CEStatelessDecoderNetConfig *this)
{
  uint64_t v2;
  void **v3;

  v2 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 295) < 0)
    operator delete(*((void **)this + 34));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 232);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 192);
  v3 = (void **)((char *)this + 168);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 144);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

uint64_t std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(uint64_t *a1, __int128 *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  std::string *v13;
  __int128 v14;
  uint64_t v15;
  _QWORD v17[2];
  std::string *v18;
  char *v19;
  uint64_t *v20;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v20 = a1 + 2;
  if (v11)
    v12 = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v9, v11);
  else
    v12 = 0;
  v13 = (std::string *)&v12[4 * v5];
  v17[0] = v12;
  v17[1] = v13;
  v18 = v13;
  v19 = (char *)&v12[4 * v11];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v13 = v18;
  }
  else
  {
    v14 = *a2;
    v13->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  v12[4 * v5 + 3] = a3;
  v18 = (std::string *)((char *)v13 + 32);
  std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__swap_out_circular_buffer(a1, v17);
  v15 = a1[1];
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v17);
  return v15;
}

void sub_1ADA327B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__emplace_back_slow_path<std::string&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>(uint64_t *a1, __int128 *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  std::string *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  void *v18[2];
  std::string *v19;
  char *v20;
  uint64_t *v21;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v21 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v9, v11);
  else
    v12 = 0;
  v13 = (std::string *)&v12[32 * v5];
  v18[0] = v12;
  v18[1] = v13;
  v19 = v13;
  v20 = &v12[32 * v11];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v13 = v19;
  }
  else
  {
    v14 = *a2;
    v13->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  v15 = *a3;
  *a3 = 0;
  *(_QWORD *)&v12[32 * v5 + 24] = v15;
  v19 = (std::string *)((char *)v13 + 32);
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(a1, v18);
  v16 = a1[1];
  std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer(v18);
  return v16;
}

void sub_1ADA328D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v8 = a7 - 32;
    do
    {
      v9 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v8 + 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)v8 = v9;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v10 = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(v8 + 24) = v10;
      *((_QWORD *)&v16 + 1) = v8;
      v7 -= 32;
      v8 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::destroy[abi:ne180100](v3, v1);
      v1 += 32;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 32;
    std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::destroy[abi:ne180100](v4, i - 32);
  }
}

uint64_t std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string const&,kaldi::quasar::ComputeEngineBufferItf&>(uint64_t *a1, __int128 *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  std::string *v13;
  __int128 v14;
  uint64_t v15;
  _QWORD v17[2];
  std::string *v18;
  char *v19;
  uint64_t *v20;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v20 = a1 + 2;
  if (v11)
    v12 = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v9, v11);
  else
    v12 = 0;
  v13 = (std::string *)&v12[4 * v5];
  v17[0] = v12;
  v17[1] = v13;
  v18 = v13;
  v19 = (char *)&v12[4 * v11];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v13 = v18;
  }
  else
  {
    v14 = *a2;
    v13->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  v12[4 * v5 + 3] = a3;
  v18 = (std::string *)((char *)v13 + 32);
  std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__swap_out_circular_buffer(a1, v17);
  v15 = a1[1];
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v17);
  return v15;
}

void sub_1ADA32BFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__emplace_back_slow_path<std::string const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>(uint64_t *a1, __int128 *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  std::string *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  void *v18[2];
  std::string *v19;
  char *v20;
  uint64_t *v21;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v21 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v9, v11);
  else
    v12 = 0;
  v13 = (std::string *)&v12[32 * v5];
  v18[0] = v12;
  v18[1] = v13;
  v19 = v13;
  v20 = &v12[32 * v11];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v13 = v19;
  }
  else
  {
    v14 = *a2;
    v13->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  v15 = *a3;
  *a3 = 0;
  *(_QWORD *)&v12[32 * v5 + 24] = v15;
  v19 = (std::string *)((char *)v13 + 32);
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(a1, v18);
  v16 = a1[1];
  std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer(v18);
  return v16;
}

void sub_1ADA32D18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string const&,kaldi::quasar::ComputeEngineBufferItf const&>(uint64_t *a1, __int128 *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  std::string *v13;
  __int128 v14;
  uint64_t v15;
  _QWORD v17[2];
  std::string *v18;
  char *v19;
  uint64_t *v20;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v20 = a1 + 2;
  if (v11)
    v12 = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v9, v11);
  else
    v12 = 0;
  v13 = (std::string *)&v12[4 * v5];
  v17[0] = v12;
  v17[1] = v13;
  v18 = v13;
  v19 = (char *)&v12[4 * v11];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v13 = v18;
  }
  else
  {
    v14 = *a2;
    v13->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  v12[4 * v5 + 3] = a3;
  v18 = (std::string *)((char *)v13 + 32);
  std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__swap_out_circular_buffer(a1, v17);
  v15 = a1[1];
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v17);
  return v15;
}

void sub_1ADA32E2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::QuantizedMatrixBase<short>::NumCols(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

uint64_t kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(uint64_t a1, int a2, int a3)
{
  int v6;
  void *v7;
  uint64_t v8;
  void *memptr;

  kaldi::QuantizedMatrixBase<signed char>::QuantizedMatrixBase(a1, a2, a3);
  memptr = 0;
  v6 = malloc_type_posix_memalign(&memptr, 0x20uLL, a3 * a2, 0x100004077774924uLL);
  v7 = memptr;
  if (v6)
    v7 = 0;
  memptr = v7;
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  if (v8)
    (*(void (**)(void))(a1 + 24))();
  kaldi::QuantizedMatrixBase<signed char>::UpdateFilter((int *)a1);
  return a1;
}

void sub_1ADA32EDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v1);
  _Unwind_Resume(a1);
}

void kaldi::QuantizedMatrixBase<signed char>::CopyFromMat(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  _QWORD v17[34];

  kaldi::MatrixBase<float>::NumRows(a2);
  kaldi::MatrixBase<float>::NumCols(a2);
  v4 = kaldi::MatrixBase<float>::NumRows(a2);
  v5 = kaldi::MatrixBase<float>::NumCols(a2);
  if (v4)
  {
    v6 = 0;
    if (v5 <= 1)
      v7 = 1;
    else
      v7 = v5;
    v8 = -INFINITY;
    v9 = INFINITY;
    do
    {
      if (v5)
      {
        v10 = 0;
        for (i = 0; i != v7; ++i)
        {
          v12 = *(_QWORD *)a2 + 4 * *(_DWORD *)(a2 + 16) * (int)v6;
          v13 = *(float *)(v12 + (v10 >> 30));
          if (v13 < v9)
            v9 = *(float *)(v12 + (v10 >> 30));
          if (v8 < v13)
            v8 = *(float *)(v12 + (v10 >> 30));
          v10 += 0x100000000;
        }
      }
      ++v6;
    }
    while (v6 != v4);
  }
  else
  {
    v9 = INFINITY;
    v8 = -INFINITY;
  }
  if ((float)((float)*(int *)(a1 + 4) * 16129.0) > 2147500000.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "Too many rows*cols for 8-bit Matrix");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  v14 = fabsf(v8);
  v15 = fabsf(v9);
  if (v14 >= v15)
    v15 = v14;
  *(_DWORD *)(a1 + 8) = 1123942400;
  *(float *)(a1 + 12) = 127.0 / v15;
  v16 = kaldi::QuantizedMatrixBase<signed char>::MutableData(a1);
  kaldi::ComputeQuantizedData<signed char>(v16, a2, *(float *)(a1 + 12));
  kaldi::QuantizedMatrixBase<signed char>::UpdateFilter((int *)a1);
}

uint64_t kaldi::QuantizedMatrix<signed char>::QuantizedMatrix<short>(uint64_t a1, int *a2)
{
  _BYTE v5[40];

  kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(a1, *a2, a2[1]);
  kaldi::Matrix<float>::Matrix<short>((uint64_t)v5, (kaldi::quasar::Vocab *)a2);
  kaldi::QuantizedMatrixBase<signed char>::CopyFromMat(a1, (uint64_t)v5);
  kaldi::Matrix<float>::~Matrix((uint64_t)v5);
  return a1;
}

void sub_1ADA330B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::QuantizedMatrix<short>::QuantizedMatrix(uint64_t a1, int a2, int a3)
{
  int v6;
  void *v7;
  uint64_t v8;
  void *memptr;

  kaldi::QuantizedMatrixBase<short>::QuantizedMatrixBase(a1, a2, a3);
  memptr = 0;
  v6 = malloc_type_posix_memalign(&memptr, 0x20uLL, 2 * a3 * a2, 0x1000040BDFB0063uLL);
  v7 = memptr;
  if (v6)
    v7 = 0;
  memptr = v7;
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  if (v8)
    (*(void (**)(void))(a1 + 24))();
  kaldi::QuantizedMatrixBase<short>::UpdateFilter((int *)a1);
  return a1;
}

void sub_1ADA33174(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v1);
  _Unwind_Resume(a1);
}

void kaldi::QuantizedMatrixBase<short>::CopyFromMat(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  uint64_t v17;

  kaldi::MatrixBase<float>::NumRows(a2);
  kaldi::MatrixBase<float>::NumCols(a2);
  v4 = kaldi::MatrixBase<float>::NumRows(a2);
  v5 = kaldi::MatrixBase<float>::NumCols(a2);
  if (v4)
  {
    v6 = 0;
    if (v5 <= 1)
      v7 = 1;
    else
      v7 = v5;
    v8 = -INFINITY;
    v9 = INFINITY;
    do
    {
      if (v5)
      {
        v10 = 0;
        for (i = 0; i != v7; ++i)
        {
          v12 = *(_QWORD *)a2 + 4 * *(_DWORD *)(a2 + 16) * (int)v6;
          v13 = *(float *)(v12 + (v10 >> 30));
          if (v13 < v9)
            v9 = *(float *)(v12 + (v10 >> 30));
          if (v8 < v13)
            v8 = *(float *)(v12 + (v10 >> 30));
          v10 += 0x100000000;
        }
      }
      ++v6;
    }
    while (v6 != v4);
  }
  else
  {
    v9 = INFINITY;
    v8 = -INFINITY;
  }
  v14 = fabsf(v8);
  v15 = fabsf(v9);
  if (v14 >= v15)
    v15 = v14;
  v16 = 2147500000.0 / (float)(int)(v5 * v4);
  if (v16 > 32767.0)
    v16 = 32767.0;
  *(float *)(a1 + 8) = v16;
  *(float *)(a1 + 12) = v16 / v15;
  v17 = kaldi::QuantizedMatrixBase<short>::MutableData(a1);
  kaldi::ComputeQuantizedData<short>(v17, a2, *(float *)(a1 + 12));
  kaldi::QuantizedMatrixBase<short>::UpdateFilter((int *)a1);
}

uint64_t kaldi::QuantizedMatrix<short>::QuantizedMatrix<signed char>(uint64_t a1, int *a2)
{
  _BYTE v5[40];

  kaldi::QuantizedMatrix<short>::QuantizedMatrix(a1, *a2, a2[1]);
  kaldi::Matrix<float>::Matrix<signed char>((uint64_t)v5, (kaldi::quasar::Vocab *)a2);
  kaldi::QuantizedMatrixBase<short>::CopyFromMat(a1, (uint64_t)v5);
  kaldi::Matrix<float>::~Matrix((uint64_t)v5);
  return a1;
}

void sub_1ADA3330C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  v2 = *(void **)(a1 + 40);
  if (v2)
    BNNSFilterDestroy(v2);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(void))(a1 + 24))();
  return a1;
}

uint64_t kaldi::QuantizedMatrixBase<signed char>::AddMatMat(uint64_t a1, uint64_t a2, void **a3, float a4)
{
  uint64_t v7;
  uint64_t v8;
  float v9;
  void *v10;
  const void *v11;
  size_t v12;
  void *v13;
  int v14;
  void *v15;
  int v16;
  const void *v17;
  size_t v18;
  void *v19;
  int v20;
  uint64_t result;
  _QWORD v22[5];
  const void *v23;
  uint64_t (*v24)(void);
  uint64_t v25;
  int v26;
  uint64_t v27;

  v23 = 0;
  v24 = (uint64_t (*)(void))kaldi::kaldi_memalign_free;
  v26 = 0;
  v25 = 0;
  v27 = 0;
  kaldi::QuantizedMatrixBase<signed char>::PrepareMatMat((float *)a1, a2, (uint64_t)&v23);
  v7 = kaldi::MatrixBase<float>::NumRows((uint64_t)a3);
  v8 = kaldi::MatrixBase<float>::NumCols((uint64_t)a3);
  v9 = 1.0 / (float)(*(float *)(a1 + 12) * *(float *)&v25);
  if (a4 == 0.0)
  {
    v10 = *(void **)(a1 + 40);
    v11 = v23;
    v12 = *(int *)(a1 + 4);
    v13 = *a3;
    v14 = fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::Start((uint64_t)a3);
    BNNSFilterApplyBatch(v10, (int)v7, v11, v12, v13, v14);
    kaldi::MatrixBase<float>::Scale((uint64_t)a3, v9);
  }
  else
  {
    kaldi::Matrix<float>::Matrix((uint64_t)v22, v7, v8, 0, 0);
    v15 = *(void **)(a1 + 40);
    v16 = kaldi::MatrixBase<float>::NumRows((uint64_t)v22);
    v17 = v23;
    v18 = *(int *)(a1 + 4);
    v19 = (void *)v22[0];
    v20 = fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::Start((uint64_t)v22);
    BNNSFilterApplyBatch(v15, v16, v17, v18, v19, v20);
    kaldi::MatrixBase<float>::AddMat((uint64_t)a3, (uint64_t)v22, 111, v9, a4);
    kaldi::Matrix<float>::~Matrix((uint64_t)v22);
  }
  result = (uint64_t)v23;
  v23 = 0;
  if (result)
    return v24();
  return result;
}

void sub_1ADA334E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(void))
{
  if (a14)
    a15();
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::QuantizedMatrixBase<signed char>::PrepareMatMat(float *a1, uint64_t a2, uint64_t a3)
{
  float v6;
  float v7;
  int v8;
  int v9;
  float v10;
  float v11;
  float v12;
  float v13;
  void *v14;
  void *v15;
  uint64_t result;
  float v17;
  uint64_t v18;
  int v19;
  void *memptr;

  v6 = kaldi::MatrixBase<float>::AbsMax(a2);
  if (v6 == 0.0)
    v7 = 1.0;
  else
    v7 = v6;
  v8 = kaldi::MatrixBase<float>::NumRows(a2);
  v9 = kaldi::MatrixBase<float>::NumCols(a2);
  v10 = a1[2];
  v11 = 2147500000.0 / (float)(v10 * (float)v9);
  v12 = v10 / v7;
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  memptr = 0;
  if (malloc_type_posix_memalign(&memptr, 0x20uLL, v9 * v8, 0x100004077774924uLL))
    v14 = 0;
  else
    v14 = memptr;
  memptr = v14;
  v15 = *(void **)a3;
  *(_QWORD *)a3 = v14;
  if (v15)
  {
    (*(void (**)(void *))(a3 + 8))(v15);
    v14 = *(void **)a3;
  }
  result = kaldi::ComputeQuantizedData<signed char>((uint64_t)v14, a2, v13);
  *(float *)(a3 + 16) = v13;
  v17 = *a1;
  v18 = *((_QWORD *)a1 + 4);
  if (!v18)
    v18 = *((_QWORD *)a1 + 2);
  v19 = *((_DWORD *)a1 + 1);
  if (*(_DWORD *)(a3 + 20) != LODWORD(v17) || *(_DWORD *)(a3 + 24) != v19 || *(_QWORD *)(a3 + 32) != v18)
  {
    *(float *)(a3 + 20) = v17;
    *(_DWORD *)(a3 + 24) = v19;
    *(_QWORD *)(a3 + 32) = v18;
  }
  return result;
}

uint64_t kaldi::QuantizedMatrixBase<signed char>::CopyRowsFromVec(unsigned int *a1, char **a2)
{
  void *v5[5];

  kaldi::Matrix<float>::Matrix((uint64_t)v5, *a1, a1[1], 0, 0);
  kaldi::MatrixBase<float>::CopyRowsFromVec(v5, a2);
  kaldi::QuantizedMatrixBase<signed char>::CopyFromMat((uint64_t)a1, (uint64_t)v5);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v5);
}

void sub_1ADA336B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::QuantizedMatrixBase<signed char>::CopyFromMat(int *a1, _QWORD *a2, int a3)
{
  void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;

  *((_QWORD *)a1 + 1) = a2[1];
  if (a3 == 111)
  {
    v5 = (void *)kaldi::QuantizedMatrixBase<signed char>::MutableData((uint64_t)a1);
    if (a2[4])
      v6 = (const void *)a2[4];
    else
      v6 = (const void *)a2[2];
    memmove(v5, v6, *a1 * (uint64_t)a1[1]);
  }
  else
  {
    v8 = *a1;
    v7 = a1[1];
    v9 = kaldi::QuantizedMatrixBase<signed char>::MutableData((uint64_t)a1);
    v10 = (_BYTE *)a2[4];
    if (!v10)
      v10 = (_BYTE *)a2[2];
    v11 = *a1;
    if (*a1 >= 1)
    {
      v12 = 0;
      LODWORD(v13) = a1[1];
      do
      {
        if ((int)v13 >= 1)
        {
          v14 = 0;
          v15 = v10;
          do
          {
            *(_BYTE *)(v9 + v14++) = *v15;
            v13 = a1[1];
            v15 += v8;
          }
          while (v14 < v13);
          v11 = *a1;
        }
        ++v12;
        v9 += v7;
        ++v10;
      }
      while (v12 < v11);
    }
  }
  kaldi::QuantizedMatrixBase<signed char>::UpdateFilter(a1);
}

uint64_t kaldi::QuantizedMatrixBase<signed char>::MutableData(uint64_t a1)
{
  _QWORD v2[34];

  if (*(_QWORD *)(a1 + 32))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Attempt to write into immutable matrix");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return *(_QWORD *)(a1 + 16);
}

uint64_t kaldi::QuantizedMatrixBase<signed char>::Data(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (!result)
    return *(_QWORD *)(a1 + 16);
  return result;
}

void kaldi::QuantizedMatrixBase<signed char>::UpdateFilter(int *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _QWORD v16[2];
  __int128 v17;
  _QWORD v18[3];
  _QWORD v19[3];

  v2 = (void *)*((_QWORD *)a1 + 5);
  if (v2)
  {
    BNNSFilterDestroy(v2);
    *((_QWORD *)a1 + 5) = 0;
  }
  v3 = *((_QWORD *)a1 + 4);
  if (v3 || *((_QWORD *)a1 + 2))
  {
    v5 = *a1;
    v4 = a1[1];
    v18[2] = 0;
    v19[0] = v4;
    v19[1] = 0x3F80000000020008;
    v19[2] = 0;
    v18[0] = v5;
    v18[1] = 65568;
    if (!v3)
      v3 = *((_QWORD *)a1 + 2);
    v16[0] = 1;
    v17 = 0u;
    v16[1] = 1;
    v6[0] = v4;
    v6[1] = v5;
    v6[2] = v3;
    v7 = 131080;
    v8 = 1065353216;
    v9 = 0;
    v10 = 0;
    v11 = xmmword_1AE15C0D0;
    v12 = unk_1AE15C0E0;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    *((_QWORD *)a1 + 5) = MEMORY[0x1AF44C23C](v19, v18, v6, v16);
  }
}

float kaldi::QuantizedMatrixBase<signed char>::Sum(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  int v4;
  float result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *a1;
  if (!(_DWORD)v1)
    return 0.0;
  v2 = 0;
  v3 = a1[1];
  if (v3 <= 1)
    v4 = 1;
  else
    v4 = a1[1];
  result = 0.0;
  do
  {
    if (v3)
    {
      v6 = 0;
      v7 = 0;
      do
      {
        v8 = *((_QWORD *)a1 + 4);
        if (!v8)
          v8 = *((_QWORD *)a1 + 2);
        result = result + (float)((float)*(char *)(v8 + (int)(v3 * v2) + (v6 >> 32)) / *((float *)a1 + 3));
        ++v7;
        v6 += 0x100000000;
      }
      while (v4 != v7);
    }
    ++v2;
  }
  while (v2 != v1);
  return result;
}

float kaldi::QuantizedMatrixBase<signed char>::Row@<S0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 32);
  if (!v5)
    v5 = *(_QWORD *)(a1 + 16);
  return kaldi::QuantizedSubVector<signed char>::QuantizedSubVector(a3, v5 + *(_DWORD *)(a1 + 4) * a2, *(_DWORD *)(a1 + 4), *(float *)(a1 + 12));
}

uint64_t kaldi::QuantizedMatrixBase<signed char>::Range@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  LODWORD(v8) = a3;
  LODWORD(v9) = a2;
  result = kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(a6, a3, a5);
  *(_QWORD *)(a6 + 8) = *(_QWORD *)(a1 + 8);
  if ((_DWORD)v8)
  {
    v13 = 0;
    v8 = (int)v8;
    v9 = (int)v9;
    do
    {
      v14 = kaldi::QuantizedMatrixBase<signed char>::MutableData(a6);
      v15 = *(_QWORD *)(a1 + 32);
      if (!v15)
        v15 = *(_QWORD *)(a1 + 16);
      result = (uint64_t)memcpy((void *)(v14 + v13), (const void *)(v15 + v9 * *(int *)(a1 + 4) + a4), a5);
      ++v9;
      v13 += a5;
      --v8;
    }
    while (v8);
  }
  return result;
}

void sub_1ADA33A48(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::ComputeQuantizedData<signed char>(uint64_t a1, uint64_t a2, float a3)
{
  int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = kaldi::MatrixBase<float>::NumRows(a2);
  result = kaldi::MatrixBase<float>::NumCols(a2);
  if (v6)
  {
    v8 = 0;
    if ((unint64_t)(int)result <= 1)
      v9 = 1;
    else
      v9 = (int)result;
    do
    {
      if ((_DWORD)result)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          *(_BYTE *)(a1 + v11++) = llroundf(*(float *)(*(_QWORD *)a2 + 4 * *(_DWORD *)(a2 + 16) * (int)v8 + (v10 >> 30)) * a3);
          v10 += 0x100000000;
        }
        while (v9 != v11);
      }
      ++v8;
      a1 += (int)result;
    }
    while (v8 != v6);
  }
  return result;
}

uint64_t kaldi::QuantizedMatrixBase<signed char>::QuantizedMatrixBase(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = kaldi::kaldi_memalign_free;
  kaldi::QuantizedMatrixBase<signed char>::UpdateFilter((int *)a1);
  return a1;
}

void sub_1ADA33B4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v3)
    (*(void (**)(void))(v1 + 24))();
  _Unwind_Resume(exception_object);
}

int *kaldi::QuantizedMatrixBase<signed char>::QuantizedMatrixBase(int *a1, int *a2)
{
  int v3;
  int v4;
  void *v6;
  uint64_t v7;
  void *memptr;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a1 + 2) = 0;
  *((_QWORD *)a1 + 3) = kaldi::kaldi_memalign_free;
  *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a1 + 5) = 0;
  if (*((_QWORD *)a2 + 2))
  {
    memptr = 0;
    if (malloc_type_posix_memalign(&memptr, 0x20uLL, v4 * v3, 0x100004077774924uLL))
      v6 = 0;
    else
      v6 = memptr;
    memptr = v6;
    v7 = *((_QWORD *)a1 + 2);
    *((_QWORD *)a1 + 2) = v6;
    if (v7)
    {
      (*((void (**)(uint64_t))a1 + 3))(v7);
      v6 = (void *)*((_QWORD *)a1 + 2);
    }
    memcpy(v6, *((const void **)a2 + 2), a1[1] * (uint64_t)*a1);
  }
  kaldi::QuantizedMatrixBase<signed char>::UpdateFilter(a1);
  return a1;
}

void sub_1ADA33C38(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v3)
    (*(void (**)(void))(v1 + 24))();
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  v2 = *(void **)(a1 + 40);
  if (v2)
    BNNSFilterDestroy(v2);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(void))(a1 + 24))();
  return a1;
}

uint64_t kaldi::QuantizedMatrixBase<short>::AddMatMat(uint64_t a1, uint64_t a2, void **a3, float a4)
{
  uint64_t v7;
  uint64_t v8;
  float v9;
  void *v10;
  const void *v11;
  size_t v12;
  void *v13;
  int v14;
  void *v15;
  int v16;
  const void *v17;
  size_t v18;
  void *v19;
  int v20;
  uint64_t result;
  _QWORD v22[5];
  const void *v23;
  uint64_t (*v24)(void);
  uint64_t v25;
  int v26;
  uint64_t v27;

  v23 = 0;
  v24 = (uint64_t (*)(void))kaldi::kaldi_memalign_free;
  v26 = 0;
  v25 = 0;
  v27 = 0;
  kaldi::QuantizedMatrixBase<short>::PrepareMatMat((float *)a1, a2, (uint64_t)&v23);
  v7 = kaldi::MatrixBase<float>::NumRows((uint64_t)a3);
  v8 = kaldi::MatrixBase<float>::NumCols((uint64_t)a3);
  v9 = 1.0 / (float)(*(float *)(a1 + 12) * *(float *)&v25);
  if (a4 == 0.0)
  {
    v10 = *(void **)(a1 + 40);
    v11 = v23;
    v12 = *(int *)(a1 + 4);
    v13 = *a3;
    v14 = fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::Start((uint64_t)a3);
    BNNSFilterApplyBatch(v10, (int)v7, v11, v12, v13, v14);
    kaldi::MatrixBase<float>::Scale((uint64_t)a3, v9);
  }
  else
  {
    kaldi::Matrix<float>::Matrix((uint64_t)v22, v7, v8, 0, 0);
    v15 = *(void **)(a1 + 40);
    v16 = kaldi::MatrixBase<float>::NumRows((uint64_t)v22);
    v17 = v23;
    v18 = *(int *)(a1 + 4);
    v19 = (void *)v22[0];
    v20 = fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::Start((uint64_t)v22);
    BNNSFilterApplyBatch(v15, v16, v17, v18, v19, v20);
    kaldi::MatrixBase<float>::AddMat((uint64_t)a3, (uint64_t)v22, 111, v9, a4);
    kaldi::Matrix<float>::~Matrix((uint64_t)v22);
  }
  result = (uint64_t)v23;
  v23 = 0;
  if (result)
    return v24();
  return result;
}

void sub_1ADA33E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(void))
{
  if (a14)
    a15();
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::QuantizedMatrixBase<short>::PrepareMatMat(float *a1, uint64_t a2, uint64_t a3)
{
  float v6;
  float v7;
  int v8;
  int v9;
  float v10;
  float v11;
  float v12;
  float v13;
  void *v14;
  void *v15;
  uint64_t result;
  float v17;
  uint64_t v18;
  int v19;
  void *memptr;

  v6 = kaldi::MatrixBase<float>::AbsMax(a2);
  if (v6 == 0.0)
    v7 = 1.0;
  else
    v7 = v6;
  v8 = kaldi::MatrixBase<float>::NumRows(a2);
  v9 = kaldi::MatrixBase<float>::NumCols(a2);
  v10 = a1[2];
  v11 = 2147500000.0 / (float)(v10 * (float)v9);
  v12 = v10 / v7;
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  memptr = 0;
  if (malloc_type_posix_memalign(&memptr, 0x20uLL, 2 * v9 * v8, 0x1000040BDFB0063uLL))
    v14 = 0;
  else
    v14 = memptr;
  memptr = v14;
  v15 = *(void **)a3;
  *(_QWORD *)a3 = v14;
  if (v15)
  {
    (*(void (**)(void *))(a3 + 8))(v15);
    v14 = *(void **)a3;
  }
  result = kaldi::ComputeQuantizedData<short>((uint64_t)v14, a2, v13);
  *(float *)(a3 + 16) = v13;
  v17 = *a1;
  v18 = *((_QWORD *)a1 + 4);
  if (!v18)
    v18 = *((_QWORD *)a1 + 2);
  v19 = *((_DWORD *)a1 + 1);
  if (*(_DWORD *)(a3 + 20) != LODWORD(v17) || *(_DWORD *)(a3 + 24) != v19 || *(_QWORD *)(a3 + 32) != v18)
  {
    *(float *)(a3 + 20) = v17;
    *(_DWORD *)(a3 + 24) = v19;
    *(_QWORD *)(a3 + 32) = v18;
  }
  return result;
}

uint64_t kaldi::QuantizedMatrixBase<short>::CopyRowsFromVec(unsigned int *a1, char **a2)
{
  void *v5[5];

  kaldi::Matrix<float>::Matrix((uint64_t)v5, *a1, a1[1], 0, 0);
  kaldi::MatrixBase<float>::CopyRowsFromVec(v5, a2);
  kaldi::QuantizedMatrixBase<short>::CopyFromMat((uint64_t)a1, (uint64_t)v5);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v5);
}

void sub_1ADA33FDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::QuantizedMatrixBase<short>::CopyFromMat(int *a1, _QWORD *a2, int a3)
{
  void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _WORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  _WORD *v16;

  *((_QWORD *)a1 + 1) = a2[1];
  if (a3 == 111)
  {
    v5 = (void *)kaldi::QuantizedMatrixBase<short>::MutableData((uint64_t)a1);
    if (a2[4])
      v6 = (const void *)a2[4];
    else
      v6 = (const void *)a2[2];
    memmove(v5, v6, 2 * *a1 * a1[1]);
  }
  else
  {
    v8 = *a1;
    v7 = a1[1];
    v9 = kaldi::QuantizedMatrixBase<short>::MutableData((uint64_t)a1);
    v10 = (_WORD *)a2[4];
    if (!v10)
      v10 = (_WORD *)a2[2];
    v11 = *a1;
    if ((int)v11 >= 1)
    {
      v12 = 0;
      v13 = a1[1];
      do
      {
        v14 = v13;
        v15 = v10;
        v16 = (_WORD *)v9;
        if ((int)v13 >= 1)
        {
          do
          {
            *v16++ = *v15;
            v15 += v8;
            --v14;
          }
          while (v14);
        }
        ++v12;
        v9 += 2 * v7;
        ++v10;
      }
      while (v12 != v11);
    }
  }
  kaldi::QuantizedMatrixBase<short>::UpdateFilter(a1);
}

uint64_t kaldi::QuantizedMatrixBase<short>::MutableData(uint64_t a1)
{
  _QWORD v2[34];

  if (*(_QWORD *)(a1 + 32))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Attempt to write into immutable matrix");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return *(_QWORD *)(a1 + 16);
}

void kaldi::QuantizedMatrixBase<short>::UpdateFilter(int *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _QWORD v16[2];
  __int128 v17;
  _QWORD v18[3];
  _QWORD v19[3];

  v2 = (void *)*((_QWORD *)a1 + 5);
  if (v2)
  {
    BNNSFilterDestroy(v2);
    *((_QWORD *)a1 + 5) = 0;
  }
  v3 = *((_QWORD *)a1 + 4);
  if (v3 || *((_QWORD *)a1 + 2))
  {
    v5 = *a1;
    v4 = a1[1];
    v18[2] = 0;
    v19[0] = v4;
    v19[1] = 0x3F80000000020010;
    v19[2] = 0;
    v18[0] = v5;
    v18[1] = 65568;
    if (!v3)
      v3 = *((_QWORD *)a1 + 2);
    v16[0] = 1;
    v17 = 0u;
    v16[1] = 1;
    v6[0] = v4;
    v6[1] = v5;
    v6[2] = v3;
    v7 = 131088;
    v8 = 1065353216;
    v9 = 0;
    v10 = 0;
    v11 = xmmword_1AE15C0D0;
    v12 = unk_1AE15C0E0;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    *((_QWORD *)a1 + 5) = MEMORY[0x1AF44C23C](v19, v18, v6, v16);
  }
}

float kaldi::QuantizedMatrixBase<short>::Sum(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  int v4;
  float result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *a1;
  if (!(_DWORD)v1)
    return 0.0;
  v2 = 0;
  v3 = a1[1];
  if (v3 <= 1)
    v4 = 1;
  else
    v4 = a1[1];
  result = 0.0;
  do
  {
    if (v3)
    {
      v6 = 0;
      v7 = 0;
      do
      {
        v8 = *((_QWORD *)a1 + 4);
        if (!v8)
          v8 = *((_QWORD *)a1 + 2);
        result = result + (float)((float)*(__int16 *)(v8 + 2 * (int)(v3 * v2) + (v6 >> 31)) / *((float *)a1 + 3));
        ++v7;
        v6 += 0x100000000;
      }
      while (v4 != v7);
    }
    ++v2;
  }
  while (v2 != v1);
  return result;
}

float kaldi::QuantizedMatrixBase<short>::Row@<S0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 32);
  if (!v5)
    v5 = *(_QWORD *)(a1 + 16);
  return kaldi::QuantizedSubVector<signed char>::QuantizedSubVector(a3, v5 + 2 * *(_DWORD *)(a1 + 4) * a2, *(_DWORD *)(a1 + 4), *(float *)(a1 + 12));
}

uint64_t kaldi::QuantizedMatrixBase<short>::Range@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;

  LODWORD(v8) = a3;
  LODWORD(v9) = a2;
  result = kaldi::QuantizedMatrix<short>::QuantizedMatrix(a6, a3, a5);
  *(_QWORD *)(a6 + 8) = *(_QWORD *)(a1 + 8);
  if ((_DWORD)v8)
  {
    v13 = 0;
    v8 = (int)v8;
    v9 = (int)v9;
    v14 = 2 * a5;
    do
    {
      v15 = kaldi::QuantizedMatrixBase<short>::MutableData(a6);
      v16 = *(_QWORD *)(a1 + 32);
      if (!v16)
        v16 = *(_QWORD *)(a1 + 16);
      result = (uint64_t)memcpy((void *)(v15 + v13), (const void *)(v16 + 2 * v9 * *(int *)(a1 + 4) + 2 * a4), v14);
      ++v9;
      v13 += v14;
      --v8;
    }
    while (v8);
  }
  return result;
}

void sub_1ADA34364(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::ComputeQuantizedData<short>(uint64_t a1, uint64_t a2, float a3)
{
  int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v6 = kaldi::MatrixBase<float>::NumRows(a2);
  result = kaldi::MatrixBase<float>::NumCols(a2);
  if (v6)
  {
    v8 = 0;
    v9 = (int)result;
    v10 = *(_QWORD *)a2;
    v11 = *(_DWORD *)(a2 + 16);
    if ((unint64_t)(int)result <= 1)
      v9 = 1;
    do
    {
      if ((_DWORD)result)
      {
        v12 = 0;
        v13 = 0;
        do
        {
          *(_WORD *)(a1 + 2 * v13++) = llroundf(*(float *)(v10 + 4 * v11 * (int)v8 + (v12 >> 30)) * a3);
          v12 += 0x100000000;
        }
        while (v9 != v13);
      }
      ++v8;
      a1 += 2 * (int)result;
    }
    while (v8 != v6);
  }
  return result;
}

uint64_t kaldi::QuantizedMatrixBase<short>::QuantizedMatrixBase(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = kaldi::kaldi_memalign_free;
  kaldi::QuantizedMatrixBase<short>::UpdateFilter((int *)a1);
  return a1;
}

void sub_1ADA3446C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v3)
    (*(void (**)(void))(v1 + 24))();
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::QuantizedMatrixBase<short>::QuantizedMatrixBase(uint64_t a1, int *a2)
{
  int v3;
  int v4;
  void *v6;
  uint64_t v7;
  void *memptr;

  v3 = *a2;
  v4 = a2[1];
  *(_DWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 4) = v4;
  *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = kaldi::kaldi_memalign_free;
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_QWORD *)(a1 + 40) = 0;
  if (*((_QWORD *)a2 + 2))
  {
    memptr = 0;
    if (malloc_type_posix_memalign(&memptr, 0x20uLL, 2 * v4 * v3, 0x1000040BDFB0063uLL))
      v6 = 0;
    else
      v6 = memptr;
    memptr = v6;
    v7 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v6;
    if (v7)
    {
      (*(void (**)(uint64_t))(a1 + 24))(v7);
      v6 = *(void **)(a1 + 16);
    }
    memcpy(v6, *((const void **)a2 + 2), 2 * *(_DWORD *)(a1 + 4) * *(_DWORD *)a1);
  }
  kaldi::QuantizedMatrixBase<short>::UpdateFilter((int *)a1);
  return a1;
}

void sub_1ADA3455C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v3)
    (*(void (**)(void))(v1 + 24))();
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(uint64_t a1, int *a2)
{
  int *v4;

  v4 = (int *)kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(a1, *a2, a2[1]);
  kaldi::QuantizedMatrixBase<signed char>::CopyFromMat(v4, a2, 111);
  return a1;
}

void sub_1ADA345C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;

  v4 = kaldi::MatrixBase<float>::NumRows(a2);
  v5 = kaldi::MatrixBase<float>::NumCols(a2);
  kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(a1, v4, v5);
  kaldi::QuantizedMatrixBase<signed char>::CopyFromMat(a1, a2);
  return a1;
}

{
  uint64_t v4;

  v4 = kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(a1, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16));
  kaldi::QuantizedMatrixBase<signed char>::CopyFromMat(v4, a2 + 8);
  return a1;
}

void sub_1ADA34630(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v1);
  _Unwind_Resume(a1);
}

void kaldi::QuantizedMatrix<signed char>::Read(float *a1, _QWORD *a2, int a3, uint64_t a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *memptr[34];
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;

  kaldi::ReadBasicType<float>(a2, a3, a1 + 3);
  a1[2] = 127.0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  kaldi::ReadIntegerVector<signed char>(a2, a3, (unint64_t *)&v12, a4, (_QWORD *)a1 + 4, 0, 0);
  if (*((_QWORD *)a1 + 4))
  {
    v8 = *((_QWORD *)a1 + 2);
    *((_QWORD *)a1 + 2) = 0;
    if (v8)
      (*((void (**)(void))a1 + 3))();
  }
  else
  {
    if (v13 - v12 != *((int *)a1 + 1) * (uint64_t)*(int *)a1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)memptr);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(memptr, (uint64_t)"Quantized matrix improperly serialized", 38);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)memptr);
    }
    memptr[0] = 0;
    if (malloc_type_posix_memalign(memptr, 0x20uLL, v13 - v12, 0x100004077774924uLL))
      v9 = 0;
    else
      v9 = memptr[0];
    memptr[0] = v9;
    v10 = *((_QWORD *)a1 + 2);
    *((_QWORD *)a1 + 2) = v9;
    if (v10)
    {
      (*((void (**)(uint64_t))a1 + 3))(v10);
      v9 = (void *)*((_QWORD *)a1 + 2);
    }
    memcpy(v9, v12, v13 - v12);
  }
  kaldi::QuantizedMatrixBase<signed char>::UpdateFilter((int *)a1);
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
}

void sub_1ADA347AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 72);
  if (v3)
  {
    *(_QWORD *)(v1 - 64) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::ReadIntegerVector<signed char>(_QWORD *a1, int a2, unint64_t *a3, uint64_t a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  int v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  unint64_t v17;
  int v18;
  _QWORD *v19;
  char v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  size_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t *v36;
  void *__p;
  char *v38;
  unint64_t v39;
  signed int v40;
  _QWORD v41[16];
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (a5)
    *a5 = 0;
  if (a2)
  {
    if (std::istream::peek() != 1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v41);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"ReadIntegerVector: expected to see type of size ", 48);
      v33 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", saw instead ", 14);
      v34 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", at file position ", 19);
      std::istream::tellg();
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v41);
    }
    std::istream::get();
    v40 = 0;
    std::istream::read();
    if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) == 0)
    {
      v13 = v40;
      v14 = v40;
      if (a7)
        *a7 = v40;
      if (a4 && (a5 ? (v15 = v13 < 0) : (v15 = 0), !v15 ? (v16 = 0) : (v16 = 1), a6 || v16))
      {
        if (v16)
        {
          std::istream::tellg();
          *a5 = a4 + v42;
        }
        else if (a6)
        {
          std::istream::tellg();
          *a6 = a4 + v42;
        }
        std::istream::seekg();
        a3[1] = *a3;
        std::vector<signed char>::shrink_to_fit(a3);
      }
      else
      {
        v17 = a3[1] - *a3;
        if (v14 <= v17)
        {
          if (v14 < v17)
            a3[1] = *a3 + v14;
        }
        else
        {
          std::vector<signed char>::__append((std::vector<char> *)a3, v14 - v17);
          v14 = v40;
        }
        if ((int)v14 >= 1)
          std::istream::read();
      }
      goto LABEL_58;
    }
LABEL_61:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"ReadIntegerVector: read failure at file position ", 49);
    std::istream::tellg();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v41);
  }
  __p = 0;
  v38 = 0;
  v39 = 0;
  std::ws[abi:ne180100]<char,std::char_traits<char>>(a1);
  if (std::istream::peek() != 91)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"ReadIntegerVector: expected to see [, saw ", 42);
    std::istream::peek();
    v35 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", at file position ", 19);
    std::istream::tellg();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v41);
  }
  std::istream::get();
  std::ws[abi:ne180100]<char,std::char_traits<char>>(a1);
  v36 = a3;
  while (1)
  {
    v18 = std::istream::peek();
    if (v18 == 93)
      break;
    LOWORD(v41[0]) = 0;
    v19 = (_QWORD *)MEMORY[0x1AF44CB30](a1, v41);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(v19);
    if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
      goto LABEL_45;
    v20 = v41[0];
    v21 = v38;
    if ((unint64_t)v38 >= v39)
    {
      v23 = (char *)__p;
      v24 = v38 - (_BYTE *)__p;
      v25 = v38 - (_BYTE *)__p + 1;
      if (v25 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v26 = v39 - (_QWORD)__p;
      if (2 * (v39 - (unint64_t)__p) > v25)
        v25 = 2 * v26;
      if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
        v27 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v27 = v25;
      if (v27)
        v28 = (char *)operator new(v27);
      else
        v28 = 0;
      v29 = &v28[v24];
      v30 = &v28[v24];
      *v30 = v20;
      v22 = v30 + 1;
      if (v21 != v23)
      {
        v31 = &v21[~(unint64_t)v23];
        do
        {
          v32 = *--v21;
          (v31--)[(_QWORD)v28] = v32;
        }
        while (v21 != v23);
        v21 = (char *)__p;
        v29 = v28;
      }
      __p = v29;
      v38 = v22;
      v39 = (unint64_t)&v28[v27];
      if (v21)
        operator delete(v21);
    }
    else
    {
      *v38 = v41[0];
      v22 = v21 + 1;
    }
    v38 = v22;
  }
  std::istream::get();
  if (&__p != (void **)v36)
    std::vector<signed char>::__assign_with_size[abi:ne180100]<signed char *,signed char *>(v36, (char *)__p, v38, v38 - (_BYTE *)__p);
  if (a7)
    *a7 = v36[1] - *v36;
LABEL_45:
  if (__p)
  {
    v38 = (char *)__p;
    operator delete(__p);
  }
  if (v18 != 93)
    goto LABEL_61;
LABEL_58:
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
    goto LABEL_61;
}

void sub_1ADA34C94(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADA34CD0);
}

void sub_1ADA34CAC()
{
  JUMPOUT(0x1ADA34CD0);
}

void sub_1ADA34CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::QuantizedMatrix<signed char>::Write(int *a1, _QWORD *a2, int a3, int a4)
{
  uint64_t v8;

  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  v8 = *((_QWORD *)a1 + 4);
  if (!v8)
    v8 = *((_QWORD *)a1 + 2);
  return kaldi::WriteIntegerByteArray<signed char>(a2, a3, a4, a1[1] * (uint64_t)*a1, v8);
}

uint64_t kaldi::QuantizedMatrix<short>::QuantizedMatrix(uint64_t a1, int *a2)
{
  int *v4;

  v4 = (int *)kaldi::QuantizedMatrix<short>::QuantizedMatrix(a1, *a2, a2[1]);
  kaldi::QuantizedMatrixBase<short>::CopyFromMat(v4, a2, 111);
  return a1;
}

void sub_1ADA34D74(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::QuantizedMatrix<short>::QuantizedMatrix(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;

  v4 = kaldi::MatrixBase<float>::NumRows(a2);
  v5 = kaldi::MatrixBase<float>::NumCols(a2);
  kaldi::QuantizedMatrix<short>::QuantizedMatrix(a1, v4, v5);
  kaldi::QuantizedMatrixBase<short>::CopyFromMat(a1, a2);
  return a1;
}

{
  uint64_t v4;

  v4 = kaldi::QuantizedMatrix<short>::QuantizedMatrix(a1, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16));
  kaldi::QuantizedMatrixBase<short>::CopyFromMat(v4, a2 + 8);
  return a1;
}

void sub_1ADA34DE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v1);
  _Unwind_Resume(a1);
}

void kaldi::QuantizedMatrix<short>::Read(float *a1, _QWORD *a2, int a3, uint64_t a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *memptr[34];
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;

  kaldi::ReadBasicType<float>(a2, a3, a1 + 3);
  kaldi::ReadBasicType<float>(a2, a3, a1 + 2);
  v12 = 0;
  v13 = 0;
  v14 = 0;
  kaldi::ReadIntegerVector<short>(a2, a3, (uint64_t)&v12, a4, (_QWORD *)a1 + 4, 0, 0);
  if (*((_QWORD *)a1 + 4))
  {
    v8 = *((_QWORD *)a1 + 2);
    *((_QWORD *)a1 + 2) = 0;
    if (v8)
      (*((void (**)(void))a1 + 3))();
  }
  else
  {
    if (*((int *)a1 + 1) * (uint64_t)*(int *)a1 != (v13 - v12) >> 1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)memptr);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(memptr, (uint64_t)"Quantized matrix improperly serialized", 38);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)memptr);
    }
    memptr[0] = 0;
    if (malloc_type_posix_memalign(memptr, 0x20uLL, v13 - v12, 0x1000040BDFB0063uLL))
      v9 = 0;
    else
      v9 = memptr[0];
    memptr[0] = v9;
    v10 = *((_QWORD *)a1 + 2);
    *((_QWORD *)a1 + 2) = v9;
    if (v10)
    {
      (*((void (**)(uint64_t))a1 + 3))(v10);
      v9 = (void *)*((_QWORD *)a1 + 2);
    }
    memcpy(v9, v12, v13 - v12);
  }
  kaldi::QuantizedMatrixBase<short>::UpdateFilter((int *)a1);
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
}

void sub_1ADA34F68(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 72);
  if (v3)
  {
    *(_QWORD *)(v1 - 64) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::ReadIntegerVector<short>(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6, uint64_t *a7)
{
  int v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  int v17;
  _QWORD *v18;
  _WORD *v19;
  _WORD *v20;
  _WORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int16 v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *__p;
  _WORD *v33;
  unint64_t v34;
  int v35;
  _QWORD v36[16];
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (a5)
    *a5 = 0;
  if (a2)
  {
    if (std::istream::peek() != 2)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"ReadIntegerVector: expected to see type of size ", 48);
      v29 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)", saw instead ", 14);
      v30 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)", at file position ", 19);
      std::istream::tellg();
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v36);
    }
    std::istream::get();
    v35 = 0;
    std::istream::read();
    if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) == 0)
    {
      v13 = v35;
      v14 = v35;
      if (a7)
        *a7 = v35;
      if (a4 && (a5 ? (v15 = v13 < 0) : (v15 = 0), !v15 ? (v16 = 0) : (v16 = 1), a6 || v16))
      {
        if (v16)
        {
          std::istream::tellg();
          *a5 = a4 + v37;
        }
        else if (a6)
        {
          std::istream::tellg();
          *a6 = a4 + v37;
        }
        std::istream::seekg();
        *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
        std::vector<short>::shrink_to_fit(a3);
      }
      else
      {
        std::vector<unsigned short>::resize(a3, v14);
        if (v35 >= 1)
          std::istream::read();
      }
      goto LABEL_54;
    }
LABEL_57:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"ReadIntegerVector: read failure at file position ", 49);
    std::istream::tellg();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v36);
  }
  __p = 0;
  v33 = 0;
  v34 = 0;
  std::ws[abi:ne180100]<char,std::char_traits<char>>(a1);
  if (std::istream::peek() != 91)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"ReadIntegerVector: expected to see [, saw ", 42);
    std::istream::peek();
    v31 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)", at file position ", 19);
    std::istream::tellg();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v36);
  }
  std::istream::get();
  std::ws[abi:ne180100]<char,std::char_traits<char>>(a1);
  while (1)
  {
    v17 = std::istream::peek();
    if (v17 == 93)
      break;
    LOWORD(v36[0]) = 0;
    v18 = (_QWORD *)MEMORY[0x1AF44CB30](a1, v36);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(v18);
    if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
      goto LABEL_45;
    v19 = v33;
    if ((unint64_t)v33 >= v34)
    {
      v21 = __p;
      v22 = (char *)v33 - (_BYTE *)__p;
      if ((char *)v33 - (_BYTE *)__p <= -3)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v23 = v22 >> 1;
      if (v34 - (unint64_t)__p <= (v22 >> 1) + 1)
        v24 = v23 + 1;
      else
        v24 = v34 - (_QWORD)__p;
      if (v34 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFFELL)
        v25 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v25 = v24;
      if (v25)
      {
        v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>((uint64_t)&v34, v25);
        v21 = __p;
        v19 = v33;
      }
      else
      {
        v26 = 0;
      }
      v27 = &v26[2 * v23];
      *(_WORD *)v27 = v36[0];
      v20 = v27 + 2;
      while (v19 != v21)
      {
        v28 = *--v19;
        *((_WORD *)v27 - 1) = v28;
        v27 -= 2;
      }
      __p = v27;
      v33 = v20;
      v34 = (unint64_t)&v26[2 * v25];
      if (v21)
        operator delete(v21);
    }
    else
    {
      *v33 = v36[0];
      v20 = v19 + 1;
    }
    v33 = v20;
  }
  std::istream::get();
  if (&__p != (void **)a3)
    std::vector<short>::__assign_with_size[abi:ne180100]<short *,short *>((char *)a3, (char *)__p, (uint64_t)v33, ((char *)v33 - (_BYTE *)__p) >> 1);
  if (a7)
    *a7 = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 1;
LABEL_45:
  if (__p)
  {
    v33 = __p;
    operator delete(__p);
  }
  if (v17 != 93)
    goto LABEL_57;
LABEL_54:
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
    goto LABEL_57;
}

void sub_1ADA35430(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADA35468);
}

void sub_1ADA35444()
{
  JUMPOUT(0x1ADA35468);
}

void sub_1ADA35454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::QuantizedMatrix<short>::Write(int *a1, _QWORD *a2, int a3, int a4)
{
  uint64_t v8;

  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  v8 = *((_QWORD *)a1 + 4);
  if (!v8)
    v8 = *((_QWORD *)a1 + 2);
  return kaldi::WriteIntegerByteArray<short>(a2, a3, a4, a1[1] * (uint64_t)*a1, v8);
}

double kaldi::VectorwiseQuantizedMatrix<signed char>::VectorwiseQuantizedMatrix(uint64_t a1, int a2, int a3)
{
  double result;

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

void kaldi::VectorwiseQuantizedMatrix<signed char>::CopyFromMat(int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  const void *v9;
  _DWORD v10[4];
  const void *v11;
  const void *v12;
  _BYTE v13[32];

  v4 = operator new[]();
  v5 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = v4;
  if (v5)
    MEMORY[0x1AF44D190](v5, 0x1000C4052888210);
  v6 = operator new[]();
  v7 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = v6;
  if (v7)
    MEMORY[0x1AF44D190](v7, 0x1000C4077774924);
  if (*a1)
  {
    v8 = 0;
    do
    {
      kaldi::SubMatrix<float>::SubMatrix((uint64_t)v13, a2, v8, 1, 0, a1[1]);
      kaldi::QuantizedMatrix<signed char>::QuantizedMatrix((uint64_t)v10, (uint64_t)v13);
      *(_DWORD *)(*((_QWORD *)a1 + 1) + 4 * v8) = v10[3];
      if (v12)
        v9 = v12;
      else
        v9 = v11;
      memcpy((void *)(*((_QWORD *)a1 + 3) + v8 * a1[1]), v9, a1[1]);
      kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase((uint64_t)v10);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v13);
      ++v8;
    }
    while (v8 < *a1);
  }
}

void sub_1ADA3562C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

int *kaldi::VectorwiseQuantizedMatrix<signed char>::VectorwiseQuantizedMatrix(int *a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 2) = 0u;
  v4 = (void **)(a1 + 2);
  *(_OWORD *)(a1 + 6) = 0u;
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    *((_QWORD *)a1 + 2) = v5;
  }
  else
  {
    v6 = (void *)operator new[]();
    v7 = *v4;
    *v4 = v6;
    if (v7)
    {
      MEMORY[0x1AF44D190](v7, 0x1000C4052888210);
      v6 = *v4;
    }
    memcpy(v6, *(const void **)(a2 + 8), 4 * *a1);
  }
  v8 = *(_QWORD *)(a2 + 32);
  if (v8)
  {
    *((_QWORD *)a1 + 4) = v8;
  }
  else
  {
    v9 = (void *)operator new[]();
    v10 = *((_QWORD *)a1 + 3);
    *((_QWORD *)a1 + 3) = v9;
    if (v10)
    {
      MEMORY[0x1AF44D190](v10, 0x1000C4077774924);
      v9 = (void *)*((_QWORD *)a1 + 3);
    }
    memcpy(v9, *(const void **)(a2 + 24), a1[1] * (uint64_t)*a1);
  }
  return a1;
}

void sub_1ADA35750(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (v4)
    MEMORY[0x1AF44D190](v4, 0x1000C4077774924);
  kaldi::VectorwiseQuantizedMatrix<signed char>::VectorwiseQuantizedMatrix(v2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::VectorwiseQuantizedMatrix<signed char>::Read(unsigned int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int32x2_t *v8;
  const void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD v17[34];
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  const void *v21[4];
  char v22;

  v8 = (int32x2_t *)kaldi::Matrix<float>::Matrix((uint64_t)v21, 1, *a1, 0, 0);
  kaldi::Matrix<float>::Read(v8, a2, a3, 0, a4);
  if (v22)
  {
    v9 = v21[0];
    v10 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = 0;
    *((_QWORD *)a1 + 2) = v9;
    if (v10)
      MEMORY[0x1AF44D190](v10, 0x1000C4052888210);
  }
  else
  {
    *((_QWORD *)a1 + 2) = 0;
    v11 = (void *)operator new[]();
    v12 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v11;
    if (v12)
    {
      MEMORY[0x1AF44D190](v12, 0x1000C4052888210);
      v11 = (void *)*((_QWORD *)a1 + 1);
    }
    memcpy(v11, v21[0], 4 * (int)*a1);
  }
  v18 = 0;
  v19 = 0;
  v20 = 0;
  kaldi::ReadIntegerVector<signed char>(a2, a3, (unint64_t *)&v18, a4, (_QWORD *)a1 + 4, 0, 0);
  if (*((_QWORD *)a1 + 4))
  {
    v13 = *((_QWORD *)a1 + 3);
    *((_QWORD *)a1 + 3) = 0;
    if (v13)
      MEMORY[0x1AF44D190](v13, 0x1000C4077774924);
  }
  else
  {
    if (v19 - v18 != (int)a1[1] * (uint64_t)(int)*a1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Quantized matrix improperly serialized", 38);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
    }
    v14 = (void *)operator new[]();
    v15 = *((_QWORD *)a1 + 3);
    *((_QWORD *)a1 + 3) = v14;
    if (v15)
    {
      MEMORY[0x1AF44D190](v15, 0x1000C4077774924);
      v14 = (void *)*((_QWORD *)a1 + 3);
    }
    memcpy(v14, v18, v19 - v18);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  return kaldi::Matrix<float>::~Matrix((uint64_t)v21);
}

void sub_1ADA3598C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 112);
  if (v3)
  {
    *(_QWORD *)(v1 - 104) = v3;
    operator delete(v3);
  }
  kaldi::Matrix<float>::~Matrix(v1 - 88);
  _Unwind_Resume(a1);
}

void kaldi::VectorwiseQuantizedMatrix<signed char>::Write(int *a1, _QWORD *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  _DWORD v8[8];

  v6 = *((_QWORD *)a1 + 2);
  if (!v6)
    v6 = *((_QWORD *)a1 + 1);
  kaldi::SubMatrix<float>::SubMatrix((uint64_t)v8, v6, 1, *a1, *a1);
  kaldi::MatrixBase<float>::Write(v8, a2, a3, a3);
  v7 = *((_QWORD *)a1 + 4);
  if (!v7)
    v7 = *((_QWORD *)a1 + 3);
  kaldi::WriteIntegerByteArray<signed char>(a2, a3, a3, a1[1] * (uint64_t)*a1, v7);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v8);
}

void sub_1ADA35A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  _Unwind_Resume(a1);
}

float kaldi::VectorwiseQuantizedMatrix<signed char>::Row@<S0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(a1 + 32);
  if (!v5)
    v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
    v6 = *(_QWORD *)(a1 + 8);
  return kaldi::QuantizedSubVector<signed char>::QuantizedSubVector(a3, v5 + *(int *)(a1 + 4) * (uint64_t)a2, *(_DWORD *)(a1 + 4), *(float *)(v6 + 4 * a2));
}

uint64_t kaldi::VectorwiseQuantizedMatrix<signed char>::AddMatMat(uint64_t a1, uint64_t a2, int *a3, float a4)
{
  int v8;
  double v9;
  uint64_t i;
  uint64_t v11;
  int v12;
  int v13;
  _BYTE v15[16];
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20[4];
  int v21;

  v8 = kaldi::MatrixBase<float>::NumCols((uint64_t)a3);
  kaldi::Matrix<float>::Matrix(v20, a3, 112, v9);
  if (v8)
  {
    for (i = 0; i != v8; ++i)
    {
      v11 = *(_QWORD *)v20;
      v12 = v21;
      v13 = kaldi::MatrixBase<float>::NumCols((uint64_t)v20);
      v18 = 0;
      v19 = 0;
      v16 = v11 + 4 * v12 * (int)i;
      v17 = v13;
      kaldi::VectorwiseQuantizedMatrix<signed char>::Row(a1, i, (uint64_t)v15);
      kaldi::QuantizedVectorBase<signed char>::AddMatVec((uint64_t)v15, a2, (uint64_t)&v16, a4);
    }
  }
  kaldi::MatrixBase<float>::CopyFromMat<float>(a3, v20, 112);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v20);
}

void sub_1ADA35B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

int *kaldi::VectorwiseQuantizedMatrix<short>::VectorwiseQuantizedMatrix(int *a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 2) = 0u;
  v4 = (void **)(a1 + 2);
  *(_OWORD *)(a1 + 6) = 0u;
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    *((_QWORD *)a1 + 2) = v5;
  }
  else
  {
    v6 = (void *)operator new[]();
    v7 = *v4;
    *v4 = v6;
    if (v7)
    {
      MEMORY[0x1AF44D190](v7, 0x1000C4052888210);
      v6 = *v4;
    }
    memcpy(v6, *(const void **)(a2 + 8), 4 * *a1);
  }
  v8 = *(_QWORD *)(a2 + 32);
  if (v8)
  {
    *((_QWORD *)a1 + 4) = v8;
  }
  else
  {
    v9 = (void *)operator new[]();
    v10 = *((_QWORD *)a1 + 3);
    *((_QWORD *)a1 + 3) = v9;
    if (v10)
    {
      MEMORY[0x1AF44D190](v10, 0x1000C40BDFB0063);
      v9 = (void *)*((_QWORD *)a1 + 3);
    }
    memcpy(v9, *(const void **)(a2 + 24), 2 * *a1 * (uint64_t)a1[1]);
  }
  return a1;
}

void sub_1ADA35CC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (v4)
    MEMORY[0x1AF44D190](v4, 0x1000C40BDFB0063);
  kaldi::VectorwiseQuantizedMatrix<signed char>::VectorwiseQuantizedMatrix(v2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::VectorwiseQuantizedMatrix<short>::Read(unsigned int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int32x2_t *v8;
  const void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD v17[34];
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  const void *v21[4];
  char v22;

  v8 = (int32x2_t *)kaldi::Matrix<float>::Matrix((uint64_t)v21, 1, *a1, 0, 0);
  kaldi::Matrix<float>::Read(v8, a2, a3, 0, a4);
  if (v22)
  {
    v9 = v21[0];
    v10 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = 0;
    *((_QWORD *)a1 + 2) = v9;
    if (v10)
      MEMORY[0x1AF44D190](v10, 0x1000C4052888210);
  }
  else
  {
    *((_QWORD *)a1 + 2) = 0;
    v11 = (void *)operator new[]();
    v12 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v11;
    if (v12)
    {
      MEMORY[0x1AF44D190](v12, 0x1000C4052888210);
      v11 = (void *)*((_QWORD *)a1 + 1);
    }
    memcpy(v11, v21[0], 4 * (int)*a1);
  }
  v18 = 0;
  v19 = 0;
  v20 = 0;
  kaldi::ReadIntegerVector<short>(a2, a3, (uint64_t)&v18, a4, (_QWORD *)a1 + 4, 0, 0);
  if (*((_QWORD *)a1 + 4))
  {
    v13 = *((_QWORD *)a1 + 3);
    *((_QWORD *)a1 + 3) = 0;
    if (v13)
      MEMORY[0x1AF44D190](v13, 0x1000C40BDFB0063);
  }
  else
  {
    if ((int)a1[1] * (uint64_t)(int)*a1 != (v19 - v18) >> 1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Quantized matrix improperly serialized", 38);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
    }
    v14 = (void *)operator new[]();
    v15 = *((_QWORD *)a1 + 3);
    *((_QWORD *)a1 + 3) = v14;
    if (v15)
    {
      MEMORY[0x1AF44D190](v15, 0x1000C40BDFB0063);
      v14 = (void *)*((_QWORD *)a1 + 3);
    }
    memcpy(v14, v18, v19 - v18);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  return kaldi::Matrix<float>::~Matrix((uint64_t)v21);
}

void sub_1ADA35F0C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 112);
  if (v3)
  {
    *(_QWORD *)(v1 - 104) = v3;
    operator delete(v3);
  }
  kaldi::Matrix<float>::~Matrix(v1 - 88);
  _Unwind_Resume(a1);
}

void kaldi::VectorwiseQuantizedMatrix<short>::Write(int *a1, _QWORD *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  _DWORD v8[8];

  v6 = *((_QWORD *)a1 + 2);
  if (!v6)
    v6 = *((_QWORD *)a1 + 1);
  kaldi::SubMatrix<float>::SubMatrix((uint64_t)v8, v6, 1, *a1, *a1);
  kaldi::MatrixBase<float>::Write(v8, a2, a3, a3);
  v7 = *((_QWORD *)a1 + 4);
  if (!v7)
    v7 = *((_QWORD *)a1 + 3);
  kaldi::WriteIntegerByteArray<short>(a2, a3, a3, a1[1] * (uint64_t)*a1, v7);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v8);
}

void sub_1ADA35FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  _Unwind_Resume(a1);
}

float kaldi::VectorwiseQuantizedMatrix<short>::Row@<S0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(a1 + 32);
  if (!v5)
    v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
    v6 = *(_QWORD *)(a1 + 8);
  return kaldi::QuantizedSubVector<signed char>::QuantizedSubVector(a3, v5 + 2 * *(_DWORD *)(a1 + 4) * a2, *(_DWORD *)(a1 + 4), *(float *)(v6 + 4 * a2));
}

uint64_t kaldi::VectorwiseQuantizedMatrix<short>::AddMatMat(uint64_t a1, uint64_t a2, int *a3, float a4)
{
  int v8;
  double v9;
  uint64_t i;
  uint64_t v11;
  int v12;
  int v13;
  _BYTE v15[16];
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20[4];
  int v21;

  v8 = kaldi::MatrixBase<float>::NumCols((uint64_t)a3);
  kaldi::Matrix<float>::Matrix(v20, a3, 112, v9);
  if (v8)
  {
    for (i = 0; i != v8; ++i)
    {
      v11 = *(_QWORD *)v20;
      v12 = v21;
      v13 = kaldi::MatrixBase<float>::NumCols((uint64_t)v20);
      v18 = 0;
      v19 = 0;
      v16 = v11 + 4 * v12 * (int)i;
      v17 = v13;
      kaldi::VectorwiseQuantizedMatrix<short>::Row(a1, i, (uint64_t)v15);
      kaldi::QuantizedVectorBase<short>::AddMatVec((uint64_t)v15, a2, (uint64_t)&v16, a4);
    }
  }
  kaldi::MatrixBase<float>::CopyFromMat<float>(a3, v20, 112);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v20);
}

void sub_1ADA3610C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<signed char>::shrink_to_fit(unint64_t *a1)
{
  char *v1;
  unint64_t v2;
  char *v3;
  unint64_t v5;
  char *v6;
  char v7;

  v1 = (char *)a1[1];
  v2 = *a1;
  v3 = &v1[-*a1];
  if (a1[2] - *a1 > (unint64_t)v3)
  {
    if (v1 == (char *)v2)
    {
      v5 = (unint64_t)&v1[-*a1];
    }
    else
    {
      v5 = (unint64_t)operator new((size_t)&v1[-*a1]);
      v3 += v5;
      v6 = &v1[~v2];
      do
      {
        v7 = *--v1;
        (v6--)[v5] = v7;
      }
      while (v1 != (char *)v2);
      v2 = *a1;
    }
    *a1 = v5;
    a1[1] = (unint64_t)v3;
    a1[2] = (unint64_t)v3;
    if (v2)
      operator delete((void *)v2);
  }
}

void std::vector<signed char>::__append(std::vector<char> *this, std::vector<char>::size_type __n)
{
  char *value;
  char *end;
  std::vector<char>::pointer begin;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (value - end >= __n)
  {
    if (__n)
    {
      bzero(this->__end_, __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v7 = end - this->__begin_;
    v8 = v7 + __n;
    if ((uint64_t)(v7 + __n) < 0)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v9 = value - begin;
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (char *)operator new(v10);
    else
      v11 = 0;
    v12 = &v11[v7];
    v13 = &v11[v10];
    bzero(v12, __n);
    if (end == begin)
    {
      v11 = v12;
    }
    else
    {
      v14 = &end[~(unint64_t)begin];
      do
      {
        v15 = *--end;
        (v14--)[(_QWORD)v11] = v15;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v11;
    this->__end_ = &v12[__n];
    this->__end_cap_.__value_ = v13;
    if (end)
      operator delete(end);
  }
}

_QWORD *std::vector<signed char>::__assign_with_size[abi:ne180100]<signed char *,signed char *>(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  _BYTE *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<quasar::rescoring::FeatureType>::__vallocate[abi:ne180100](v7, v11);
    v9 = (char *)v7[1];
    goto LABEL_17;
  }
  v12 = (_BYTE *)result[1];
  v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    v16 = a3 - __src;
    if (v16)
      result = memmove(v9, __src, v16);
    v15 = &v9[v16];
    goto LABEL_20;
  }
  v14 = &__src[v13];
  if (v12 != v9)
  {
    result = memmove((void *)*result, __src, v13);
    v9 = (char *)v7[1];
  }
  if (a3 != v14)
    result = memmove(v9, v14, a3 - v14);
  v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

uint64_t kaldi::WriteIntegerByteArray<signed char>(_QWORD *a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  int v9;
  uint64_t result;
  _QWORD *v11;
  std::runtime_error *exception;
  _QWORD v13[34];
  int v14;
  char v15;

  if (a2)
  {
    v15 = 1;
    std::ostream::write();
    if (a3)
      v9 = -(int)a4;
    else
      v9 = a4;
    v14 = v9;
    result = std::ostream::write();
    if ((_DWORD)a4)
    {
      if (a3 && !fst::AlignOutput(a1))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "Could not align output");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
      }
      result = std::ostream::write();
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[ ", 2);
    for (; a4; --a4)
    {
      ++a5;
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" ", 1);
    }
    result = (uint64_t)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"]\n", 2);
  }
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Write failure in WriteIntegerType.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1ADA36574(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<short>::shrink_to_fit(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BYTE *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __int16 v13;

  v2 = a1 + 16;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = *(_BYTE **)(a1 + 8);
  v6 = (v5 - v4) >> 1;
  if (v6 < (v3 - (uint64_t)v4) >> 1)
  {
    if (v5 == v4)
    {
      v11 = 0;
      v9 = 2 * v6;
    }
    else
    {
      v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v2, v6);
      v4 = *(char **)a1;
      v8 = *(char **)(a1 + 8);
      v9 = (uint64_t)&v7[2 * v6];
      v11 = &v7[2 * v10];
      if (v8 != *(char **)a1)
      {
        v12 = v9;
        do
        {
          v13 = *((_WORD *)v8 - 1);
          v8 -= 2;
          *(_WORD *)(v12 - 2) = v13;
          v12 -= 2;
        }
        while (v8 != v4);
        goto LABEL_9;
      }
    }
    v12 = v9;
LABEL_9:
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v11;
    if (v4)
      operator delete(v4);
  }
}

